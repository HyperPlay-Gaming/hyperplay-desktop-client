diff --git a/dist/index.mjs b/dist/index.mjs
index de8dc4e16ef627ce2edc0b48c684e610c4ba03b6..3cf0ae92cd8a760efab2b0bd96c24834c36dcf2a 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -183,16 +183,24 @@ function bytecodePlugin(options = {}) {
             }
         },
         transform(code, id) {
-            if (config.build.minify || protectedStrings.length === 0 || !filter(id))
+            if (id.includes('extension-provider'))
+                console.log('transforming in bytecode plugin mjs id ', id, config.build.minify, protectedStrings.length, !filter(id))
+            if (config.build.minify || protectedStrings.length === 0 || !filter(id)){
+                if (id.includes('extension-provider'))
+                    console.log('returning early ', config.build.minify, protectedStrings.length, !filter(id))
                 return;
+            }
             let match;
             let s;
             protectedStrings.forEach(str => {
+                if (id.includes('extension-provider'))
+                    console.log('searching for protected string ')
                 const escapedStr = escapeRegExpString(str);
-                const re = new RegExp(`\\u0027${escapedStr}\\u0027|\\u0022${escapedStr}\\u0022`, 'g');
+                const re = new RegExp(`\\u0027${escapedStr}\\u0027|\\u0022${escapedStr}\\u0022|\\u0060${escapedStr}\\u0060`, 'g');
                 const charCodes = Array.from(str).map(s => s.charCodeAt(0));
                 const replacement = `String.fromCharCode(${charCodes.toString()})`;
                 while ((match = re.exec(code))) {
+                    console.log('I FOUND THE PROTECTED STRING \N \N XXXXXXXXXXXXXXXXXXXX', id)
                     s ||= new MagicString(code);
                     const [full] = match;
                     s.overwrite(match.index, match.index + full.length, replacement, {
