name: Build

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
  GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
  RUDDERSTACK_CLIENT_ID: ${{ secrets.RUDDERSTACK_CLIENT_ID }}
  NODE_OPTIONS: '--max_old_space_size=8196'

jobs:
  build_windows:
    runs-on: windows-latest
    concurrency:
      group: build-windows-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $YARN_CACHE_DIR
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: $YARN_CACHE_DIR
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Checkout repository.
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          token: ${{ secrets.pat }}
      - name: Install modules.
        run: yarn install --frozen-lockfile --network-timeout 600000 && yarn allow-scripts
      - name: Build artifacts.
        run: yarn dist:win
      - name: Upload EXE.
        uses: actions/upload-artifact@v3
        with:
          name: win-setup
          path: dist/HyperPlay*.exe
          retention-days: 14
  build_linux:
    runs-on: ubuntu-latest
    concurrency:
      group: build-linux-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $YARN_CACHE_DIR
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: $YARN_CACHE_DIR
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install libarchive-tools for pacman build # Related https://github.com/electron-userland/electron-builder/issues/4181
        run: sudo apt-get install libarchive-tools
      - name: Checkout repository.
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          token: ${{ secrets.pat }}
      - name: Install modules.
        run: yarn install --frozen-lockfile --network-timeout 600000 && yarn allow-scripts
      - name: Build deb artifact
        run: yarn dist:linux:ci:deb
      - name: Build rpm artifact
        run: yarn dist:linux:ci:rpm
      - name: Build pacman artifact
        run: yarn dist:linux:ci:pacman
  build_mac:
    runs-on: macos-13
    concurrency:
      group: build-mac-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $YARN_CACHE_DIR
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: $YARN_CACHE_DIR
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Checkout repository.
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          token: ${{ secrets.pat }}
      - name: Install modules.
        run: yarn install --frozen-lockfile --network-timeout 600000 && yarn allow-scripts
      - name: Build artifacts.
        run: yarn dist:mac
        env:
          NOTARIZE: false
      - name: Upload Intel build.
        uses: actions/upload-artifact@v3
        with:
          name: mac-dmg-Intel
          path: dist/HyperPlay*x64.dmg
          retention-days: 14
      - name: Upload M1/M2.
        uses: actions/upload-artifact@v3
        with:
          name: mac-dmg-M1-M2
          path: dist/HyperPlay*arm64.dmg
          retention-days: 14
