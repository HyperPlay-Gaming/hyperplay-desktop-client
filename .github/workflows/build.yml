name: Build

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
  GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
  RUDDERSTACK_CLIENT_ID: ${{ secrets.RUDDERSTACK_CLIENT_ID }}

jobs:
  build_windows:
    runs-on: windows-latest
    concurrency:
      group: build-windows-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v3
        with:
          standalone: ${{ runner.os == 'Windows' }}
      - name: Install node-gyp
        run: pnpm add --global node-gyp
        shell: bash
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/
      - name: Authenticate with private NPM package
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name: Install modules.
        run: pnpm run setup
      - name: setup env file
        run: |
          echo "VITE_LD_ENVIRONMENT_ID=${{ secrets.VITE_LD_ENVIRONMENT_ID_TEST }}" > .env
          echo "VITE_IPFS_API=${{ secrets.VITE_IPFS_API }}" >> .env
      - name: Build artifacts.
        run: pnpm dist:win
      - name: Upload EXE.
        uses: actions/upload-artifact@v4
        with:
          name: win-setup
          path: dist/HyperPlay*.exe
          retention-days: 7
          if-no-files-found: error
          compression-level: 3
  build_linux:
    runs-on: ubuntu-latest
    concurrency:
      group: build-linux-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Update deps
        run: sudo apt-get update
      - name: Install libarchive-tools for pacman build # Related https://github.com/electron-userland/electron-builder/issues/4181
        run: sudo apt-get install libarchive-tools
      - name: Checkout repository.
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v3
        with:
          standalone: ${{ runner.os == 'Windows' }}
      - name: Install node-gyp
        run: pnpm add --global node-gyp
        shell: bash
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/
      - name: Authenticate with private NPM package
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name: Install modules.
        run: pnpm run setup
      - name: setup env file
        run: |
          echo "VITE_LD_ENVIRONMENT_ID=${{ secrets.VITE_LD_ENVIRONMENT_ID_TEST }}" > .env
          echo "VITE_IPFS_API=${{ secrets.VITE_IPFS_API }}" >> .env
      - name: Build deb artifact
        run: pnpm dist:linux:ci:deb
      - name: Build rpm artifact
        run: pnpm dist:linux:ci:rpm
      - name: Build pacman artifact
        run: pnpm dist:linux:ci:pacman
  build_mac_arm64:
    runs-on: macos-latest
    concurrency:
      group: build-mac-arm64-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v3
        with:
          standalone: ${{ runner.os == 'Windows' }}
      - name: Install node-gyp
        run: pnpm add --global node-gyp
        shell: bash
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/
      - name: Authenticate with private NPM package
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name: Install modules.
        run: pnpm run setup
      - name: setup env file
        run: |
          echo "VITE_LD_ENVIRONMENT_ID=${{ secrets.VITE_LD_ENVIRONMENT_ID_TEST }}" > .env
          echo "VITE_IPFS_API=${{ secrets.VITE_IPFS_API }}" >> .env
      - name: Build artifacts.
        run: pnpm run dist:mac:arm64
        env:
          NOTARIZE: false
      - name: Upload Intel build.
        uses: actions/upload-artifact@v4
        with:
          name: mac-dmg-arm64
          path: dist/HyperPlay*arm64.dmg
          retention-days: 7
          if-no-files-found: error
          compression-level: 3
