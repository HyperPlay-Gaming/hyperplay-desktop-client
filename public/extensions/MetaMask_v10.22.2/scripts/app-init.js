!function e(o,s,t){function r(i,c){if(!s[i]){if(!o[i]){var l="function"==typeof require&&require;if(!c&&l)return l(i,!0);if(n)return n(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var m=s[i]={exports:{}};o[i][0].call(m.exports,function(e){return r(o[i][1][e]||e)},m,m.exports,e,o,s,t)}return s[i].exports}for(var n="function"==typeof require&&require,i=0;i<t.length;i++)r(t[i]);return r}({1:[function(e,o,s){"use strict";var t=e("../../shared/lib/promise-with-resolvers");console.log("[APP-INIT] Starting app-init.js at",(new Date).toISOString());let r=!1;const{chrome:n}=globalThis;globalThis.stateHooks=globalThis.stateHooks||{};const i=[];function c(...e){try{const o=(new Date).getTime();importScripts(...e);const s=(new Date).getTime();return i.push({name:e[0],value:s-o,children:[],startTime:o,endTime:s}),!0}catch(e){console.error(e)}return!1}function l(){if(console.log("[APP-INIT] importAllScripts called, scriptsLoadInitiated:",r),r)return void console.log("[APP-INIT] Scripts already loaded, returning early");console.log("[APP-INIT] Starting script imports"),r=!0;const e=[],o=o=>{e.push(o)},s=Date.now();o("../scripts/sentry-install.js");!self.document||o("../scripts/snow.js"),o("../scripts/use-snow.js");o("../scripts/runtime-lavamoat.js"),o("../scripts/lockdown-more.js"),o("../scripts/policy-load.js");"../common-0.js,../common-1.js,../common-2.js,../common-3.js,../common-4.js,../common-5.js,../common-6.js,../common-7.js,../common-8.js,../common-9.js,../common-10.js,../common-11.js,../common-12.js,../background-0.js,../background-1.js,../background-2.js,../background-3.js,../background-4.js,../background-5.js,../background-6.js,../background-7.js,../background-8.js".split(",").forEach(e=>o(e)),c(...e);Date.now();console.log("SCRIPTS IMPORT COMPLETE in Seconds: "+(Date.now()-s)/1e3)}self.addEventListener("install",()=>{console.log("[APP-INIT] Service Worker install event fired"),self.skipWaiting(),l()}),n.runtime.onMessage.addListener(e=>(console.log("[APP-INIT] chrome.runtime.onMessage received:",e),l(),!1)),console.log("[APP-INIT] Service Worker state:",self.serviceWorker.state),"activated"===self.serviceWorker.state&&(console.log("[APP-INIT] Service Worker already activated, calling importAllScripts"),l());const a=(0,t.withResolvers)();globalThis.stateHooks.onInstalledListener=a.promise,n.runtime.onInstalled.addListener(function e(o){console.log("[APP-INIT] chrome.runtime.onInstalled event fired with details:",o),n.runtime.onInstalled.removeListener(e),a.resolve(o),delete globalThis.stateHooks.onInstalledListener}),console.log("[APP-INIT] Calling registerInPageContentScript"),(async()=>{console.log("[APP-INIT] Registering in-page content script");try{await n.scripting.registerContentScripts([{id:"inpage",matches:["file://*/*","http://*/*","https://*/*"],js:["scripts/inpage.js"],runAt:"document_start",world:"MAIN",allFrames:!0}]),console.log("[APP-INIT] In-page content script registered successfully")}catch(e){console.warn(`Dropped attempt to register inpage content script. ${e}`)}})()},{"../../shared/lib/promise-with-resolvers":2}],2:[function(e,o,s){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.withResolvers=void 0;s.withResolvers=void 0===Promise.withResolvers?()=>{let e,o;return{promise:new Promise((s,t)=>{e=s,o=t}),resolve:e,reject:o}}:Promise.withResolvers.bind(Promise)},{}]},{},[1]);