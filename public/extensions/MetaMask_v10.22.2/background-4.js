LavaPack.loadBundle([[88,{"../../shared/constants/app":4018,"../../shared/constants/hardware-wallets":4023,"../../shared/constants/keyring":4024,"../../shared/constants/logs":4026,"../../shared/constants/metametrics":4027,"../../shared/constants/network":4028,"../../shared/constants/permissions":4030,"../../shared/constants/swaps":4036,"../../shared/constants/time":4038,"../../shared/constants/tokens":4039,"../../shared/constants/transaction":4040,"../../shared/lib/metamask-controller-utils":4043,"../../shared/lib/token-util.ts":4047,"../../shared/modules/conversion.utils":4054,"../../shared/modules/mv3.utils":4061,"../../shared/modules/network.utils":4062,"../../shared/modules/string-utils":4068,"../../shared/modules/transaction.utils":4070,"../../shared/notifications":4072,"./controllers/account-order":6,"./controllers/alert":7,"./controllers/app-metadata":8,"./controllers/app-state":9,"./controllers/decrypt-message":10,"./controllers/detect-tokens":11,"./controllers/encryption-public-key":12,"./controllers/ens":14,"./controllers/metametrics":15,"./controllers/network-order":16,"./controllers/onboarding":17,"./controllers/permissions":21,"./controllers/preferences":25,"./controllers/swaps":26,"./detect-multiple-instances":27,"./lib/ComposableObservableStore":29,"./lib/account-tracker":30,"./lib/backup":31,"./lib/createDupeReqFilterMiddleware":32,"./lib/createLoggerMiddleware":33,"./lib/createMetaRPCHandler":34,"./lib/createMetamaskMiddleware":35,"./lib/createOnboardingMiddleware":36,"./lib/createOriginMiddleware":37,"./lib/createRPCMethodTrackingMiddleware":38,"./lib/createTabIdMiddleware":40,"./lib/encryptor-factory":41,"./lib/hardware-keyring-builder-factory":49,"./lib/keyring-snaps-permissions":50,"./lib/offscreen-bridge/lattice-offscreen-keyring":57,"./lib/offscreen-bridge/ledger-offscreen-bridge":58,"./lib/offscreen-bridge/trezor-offscreen-bridge":59,"./lib/ppom/indexed-db-backend":60,"./lib/ppom/ppom":62,"./lib/ppom/ppom-middleware":61,"./lib/rpc-method-middleware":73,"./lib/security-provider-helpers":74,"./lib/segment":76,"./lib/snap-keyring":80,"./lib/stream-utils":84,"./lib/transaction/metrics":85,"./lib/transaction/util":86,"./lib/util":87,"./translate":205,"@keystonehq/metamask-airgapped-keyring":552,"@metamask/accounts-controller":1006,"@metamask/address-book-controller":1009,"@metamask/announcement-controller":1039,"@metamask/approval-controller":1042,"@metamask/assets-controllers":1061,"@metamask/base-controller":1069,"@metamask/controller-utils":1074,"@metamask/eth-json-rpc-middleware":1090,"@metamask/eth-keyring-controller":1106,"@metamask/eth-ledger-bridge-keyring":1107,"@metamask/eth-query":1111,"@metamask/eth-trezor-keyring":1168,"@metamask/ethjs-query":1186,"@metamask/gas-fee-controller":1201,"@metamask/keyring-controller":1286,"@metamask/logging-controller":1292,"@metamask/network-controller":1335,"@metamask/notification-controller":1339,"@metamask/obs-store":1386,"@metamask/obs-store/dist/asStream":1385,"@metamask/permission-controller":1394,"@metamask/phishing-controller":1404,"@metamask/post-message-stream":1413,"@metamask/ppom-validator":1450,"@metamask/queued-request-controller":1460,"@metamask/rate-limit-controller":1462,"@metamask/scure-bip39/dist/wordlists/english":1474,"@metamask/selected-network-controller":1486,"@metamask/signature-controller":1488,"@metamask/smart-transactions-controller":1502,"@metamask/snaps-controllers":1520,"@metamask/snaps-rpc-methods":1588,"@metamask/transaction-controller":1715,"@metamask/user-operation-controller":1732,"@sentry/browser":1840,"await-semaphore":2309,buffer:2421,"eth-json-rpc-filters":2709,"eth-json-rpc-filters/subscriptionManager":2711,"eth-lattice-keyring":2713,"eth-rpc-errors":2746,events:2831,"json-rpc-engine":3193,"json-rpc-middleware-stream":3197,lodash:3399,loglevel:3409,nanoid:3474,pump:3565},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var n=at(e("events")),o=at(e("pump")),s=e("@metamask/assets-controllers"),i=e("@metamask/obs-store"),a=e("@metamask/obs-store/dist/asStream"),l=e("json-rpc-engine"),c=e("json-rpc-middleware-stream"),d=e("@metamask/eth-json-rpc-middleware"),h=e("lodash"),u=e("@metamask/eth-keyring-controller"),p=e("@metamask/keyring-controller"),g=at(e("eth-json-rpc-filters")),C=at(e("eth-json-rpc-filters/subscriptionManager")),m=e("eth-rpc-errors"),w=e("await-semaphore"),k=at(e("loglevel")),b=e("@metamask/eth-trezor-keyring"),f=e("@metamask/eth-ledger-bridge-keyring"),y=at(e("eth-lattice-keyring")),v=e("@keystonehq/metamask-airgapped-keyring"),S=at(e("@metamask/eth-query")),A=at(e("@metamask/ethjs-query")),T=at(e("nanoid")),M=e("@sentry/browser"),P=e("@metamask/address-book-controller"),N=e("@metamask/approval-controller"),E=e("@metamask/base-controller"),R=e("@metamask/phishing-controller"),I=e("@metamask/announcement-controller"),O=e("@metamask/network-controller"),_=e("@metamask/gas-fee-controller"),L=e("@metamask/permission-controller"),U=at(e("@metamask/smart-transactions-controller")),F=e("@metamask/selected-network-controller"),D=e("@metamask/logging-controller"),x=e("@metamask/rate-limit-controller"),B=e("@metamask/notification-controller"),j=e("@metamask/snaps-controllers"),q=e("@metamask/snaps-rpc-methods"),K=e("@metamask/accounts-controller"),$=e("@metamask/signature-controller"),G=e("@metamask/ppom-validator"),H=e("@metamask/controller-utils"),V=e("@metamask/scure-bip39/dist/wordlists/english"),W=e("@metamask/queued-request-controller"),Q=e("@metamask/user-operation-controller"),z=e("@metamask/transaction-controller"),Y=e("@metamask/post-message-stream"),J=e("../../shared/constants/transaction"),X=e("../../shared/constants/swaps"),Z=e("../../shared/constants/network"),ee=e("../../shared/constants/hardware-wallets"),te=e("../../shared/constants/keyring"),re=e("../../shared/constants/permissions"),ne=e("../../shared/notifications"),oe=e("../../shared/constants/time"),se=e("../../shared/constants/app"),ie=e("../../shared/constants/metametrics"),ae=e("../../shared/constants/logs"),le=e("../../shared/lib/token-util.ts"),ce=e("../../shared/modules/string-utils"),de=e("../../shared/modules/transaction.utils"),he=e("../../shared/constants/tokens"),ue=e("../../shared/lib/metamask-controller-utils"),pe=e("../../shared/modules/mv3.utils"),ge=e("../../shared/modules/conversion.utils"),Ce=e("../../shared/modules/network.utils"),me=e("./lib/transaction/metrics"),we=e("./lib/keyring-snaps-permissions"),ke=e("./lib/ppom/ppom-middleware"),be=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=it(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}(e("./lib/ppom/ppom")),fe=e("./detect-multiple-instances"),ye=at(e("./lib/ComposableObservableStore")),ve=at(e("./lib/account-tracker")),Se=at(e("./lib/createDupeReqFilterMiddleware")),Ae=at(e("./lib/createLoggerMiddleware")),Te=e("./lib/rpc-method-middleware"),Me=at(e("./lib/createOriginMiddleware")),Pe=at(e("./lib/createTabIdMiddleware")),Ne=e("./controllers/network-order"),Ee=e("./controllers/account-order"),Re=at(e("./lib/createOnboardingMiddleware")),Ie=e("./lib/stream-utils"),Oe=at(e("./controllers/ens")),_e=at(e("./controllers/preferences")),Le=at(e("./controllers/app-state")),Ue=at(e("./controllers/alert")),Fe=at(e("./controllers/onboarding")),De=at(e("./lib/backup")),xe=at(e("./controllers/decrypt-message")),Be=at(e("./controllers/detect-tokens")),je=at(e("./controllers/swaps")),qe=at(e("./controllers/metametrics")),Ke=e("./lib/segment"),$e=at(e("./lib/createMetaRPCHandler")),Ge=e("./lib/util"),He=at(e("./lib/createMetamaskMiddleware")),Ve=e("./lib/hardware-keyring-builder-factory"),We=at(e("./controllers/encryption-public-key")),Qe=at(e("./controllers/app-metadata")),ze=e("./controllers/permissions"),Ye=at(e("./lib/createRPCMethodTrackingMiddleware")),Je=e("./lib/security-provider-helpers"),Xe=e("./lib/ppom/indexed-db-backend"),Ze=e("./translate"),et=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),tt=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),rt=e("./lib/snap-keyring"),nt=e("./lib/encryptor-factory"),ot=e("./lib/transaction/util"),st=e("./lib/offscreen-bridge/lattice-offscreen-keyring");function it(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(it=function(e){return e?r:t})(e)}function at(e){return e&&e.__esModule?e:{default:e}}function lt(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class ct extends n.default{constructor(e){var t,r;super(),lt(this,"_trackSnapExportUsage",(0,h.wrap)((0,h.memoize)((()=>(0,h.throttle)(((e,t,r,n)=>{var o;return this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.SnapExportUsed,category:ie.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(o=this._getSnapMetadata(e))||void 0===o?void 0:o.category,success:r,origin:n}})}),60*oe.SECOND)),((e,t,r,n)=>`${e}${t}${n}`)),((e,...t)=>e(...t)(...t)))),lt(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:r,networkClientId:n})=>{switch(t){case H.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:n});case H.ERC721:case H.ERC1155:return this.nftController.watchNft(e,t,r);default:throw new Error(`Asset type ${t} not supported`)}})),lt(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof L.PermissionsRequestNotFoundError))throw e}})),lt(this,"updateCaveat",((e,t,r,n)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,r,n)}catch(e){if(!(e instanceof L.PermissionsRequestNotFoundError))throw e}})),lt(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw k.default.error(e.message),e}})),lt(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw k.default.error(e.message),e}})),lt(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw k.default.error(e.message),e}})),lt(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof L.PermissionsRequestNotFoundError))throw e}})),lt(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof L.PermissionsRequestNotFoundError))throw e}})),lt(this,"resolvePendingApproval",(async(e,t,r)=>{try{await this.approvalController.accept(e,t,r)}catch(e){if(!(e instanceof N.ApprovalRequestNotFoundError))throw e}})),lt(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new m.EthereumRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof N.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,h.debounce)(this.privateSendUpdate.bind(this),200*oe.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const o=e.initState||{},i=this.platform.getVersion();this.recordFirstTimeInfo(o),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new E.ControllerMessenger,this.loggingController=new D.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController"}),state:o.LoggingController}),this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new ye.default({state:o,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new w.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&("8.1.0"===i&&this.platform.openExtensionInBrowser(),this.loggingController.add({type:D.LogType.GenericLog,data:{event:ae.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:i}}))})),this.appMetadataController=new Qe.default({state:o.AppMetadataController,currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:i}),this.queuedRequestController=new W.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController"})}),this.approvalController=new N.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[H.ApprovalType.EthSign,H.ApprovalType.PersonalSign,H.ApprovalType.EthSignTypedData,H.ApprovalType.Transaction,H.ApprovalType.WatchAsset,H.ApprovalType.EthGetEncryptionPublicKey,H.ApprovalType.EthDecrypt]});const a=this.controllerMessenger.getRestricted({name:"NetworkController"});let l={};o.NetworkController&&(l=o.NetworkController),this.networkController=new O.NetworkController({messenger:a,state:l,infuraProjectId:e.infuraProjectId,trackMetaMetricsEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkId=null,this.updateDeprecatedNetworkId(),a.subscribe("NetworkController:networkDidChange",(()=>this.updateDeprecatedNetworkId()));const c=this.controllerMessenger.getRestricted({name:"TokenListController",allowedEvents:["NetworkController:stateChange"]});this.selectedNetworkController=new F.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]})}),this.tokenListController=new s.TokenListController({chainId:this.networkController.state.providerConfig.chainId,preventPollingOnNetworkRestart:!o.TokenListController||o.TokenListController.preventPollingOnNetworkRestart,messenger:c,state:o.TokenListController}),this.preferencesController=new _e.default({initState:o.PreferencesController,initLangCode:e.initLangCode,tokenListController:this.tokenListController,provider:this.provider,networkConfigurations:this.networkController.state.networkConfigurations}),this.assetsContractController=new s.AssetsContractController({chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{provider:this.provider},o.AssetsContractController);const d=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest"],allowedEvents:["NetworkController:stateChange","AccountsController:selectedAccountChange"]});this.tokensController=new s.TokensController({messenger:d,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),onTokenListStateChange:e=>this.controllerMessenger.subscribe(`${this.tokenListController.name}:stateChange`,e),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),getERC20TokenName:this.assetsContractController.getERC20TokenName.bind(this.assetsContractController),config:{provider:this.provider,selectedAddress:(null===(t=o.AccountsController)||void 0===t||null===(t=t.internalAccounts)||void 0===t||null===(t=t.accounts[null===(r=o.AccountsController)||void 0===r||null===(r=r.internalAccounts)||void 0===r?void 0:r.selectedAccount])||void 0===t?void 0:t.address)??""},state:o.TokensController});const g=this.controllerMessenger.getRestricted({name:"NftController",allowedActions:[`${this.approvalController.name}:addRequest`]});this.nftController=new s.NftController({messenger:g,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onNftAdded:({address:e,symbol:t,tokenId:r,standard:n,source:o})=>this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.NftAdded,category:ie.MetaMetricsEventCategory.Wallet,sensitiveProperties:{token_contract_address:e,token_symbol:t,token_id:r,token_standard:n,asset_type:J.AssetType.NFT,source:o}}),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{},o.NftController),this.nftController.setApiKey(null),this.nftDetectionController=new s.NftDetectionController({chainId:this.networkController.state.providerConfig.chainId,onNftsStateChange:e=>this.nftController.subscribe(e),onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftApi:this.nftController.getNftApi.bind(this.nftController),getNftState:()=>this.nftController.state}),this.metaMetricsController=new qe.default({segment:Ke.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange"),getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===Z.NETWORK_TYPES.RPC?t:e},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,version:this.platform.getVersion(),environment:"other",extension:this.extension,initState:o.MetaMetricsController,captureException:M.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const C=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),S=X.GAS_API_BASE_URL;this.gasFeeController=new _.GasFeeController({state:o.GasFeeController,interval:1e4,messenger:C,clientId:X.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${S}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${S}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>{const{chainId:e}=this.networkController.state.providerConfig;return e===Z.CHAIN_IDS.BSC},getChainId:()=>this.networkController.state.providerConfig.chainId}),this.appStateController=new Le.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:o.AppStateController,onInactiveTimeout:()=>this.setLocked(),preferencesStore:this.preferencesController.store,messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`],allowedEvents:["KeyringController:qrKeyringStateChange"]}),extension:this.extension});const A=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new s.CurrencyRateController({includeUsdRate:!0,messenger:A,state:o.CurrencyController});const T=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new R.PhishingController({messenger:T,state:o.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined}),this.phishingController.maybeUpdateState(),this.ppomController=new G.PPOMController({messenger:this.controllerMessenger.getRestricted({name:"PPOMController",allowedEvents:["NetworkController:stateChange"]}),storageBackend:new Xe.IndexedDBPPOMStorage("PPOMDB",1),provider:this.provider,ppomProvider:{PPOM:be.PPOM,ppomInit:be.default},state:o.PPOMController,chainId:this.networkController.state.providerConfig.chainId,securityAlertsEnabled:this.preferencesController.store.getState().securityAlertsEnabled,onPreferencesChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),cdnBaseUrl:"static.metafi.codefi.network/api/v1/confirmations/ppom",blockaidPublicKey:"066ad3e8af5583385e312c156d238055215d5f25247c1e91055afa756cb98a88"});const q=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new I.AnnouncementController({messenger:q,allAnnouncements:ne.UI_NOTIFICATIONS,state:o.AnnouncementController});const V=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new Ne.NetworkOrderController({messenger:V,state:o.NetworkOrderController});const ee=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new Ee.AccountOrderController({messenger:ee,state:o.AccountOrderController});const te=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange","AccountsController:selectedAccountChange"],allowedActions:["AccountsController:setCurrentAccount","AccountsController:setAccountName","AccountsController:listAccounts","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:updateAccounts","KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new K.AccountsController({messenger:te,state:o.AccountsController}),this.tokenRatesController=new s.TokenRatesController({chainId:this.networkController.state.providerConfig.chainId,ticker:this.networkController.state.providerConfig.ticker,selectedAddress:this.accountsController.getSelectedAccount().address,onTokensStateChange:e=>this.tokensController.subscribe(e),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),tokenPricesService:new s.CodefiTokenPricesServiceV2,getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{allTokens:this.tokensController.state.allTokens,allDetectedTokens:this.tokensController.state.allDetectedTokens},o.TokenRatesController),this.preferencesController.store.getState().useCurrencyRateCheck&&this.tokenRatesController.start(),this.preferencesController.store.subscribe((0,Ge.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:r}=e,{useCurrencyRateCheck:n}=t;n&&!r?(this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.tokenRatesController.start()):!n&&r&&(this.currencyRateController.stopAllPolling(),this.tokenRatesController.stop())}),this.preferencesController.store.getState())),this.ensController=new Oe.default({provider:this.provider,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange")}),this.onboardingController=new Fe.default({initState:o.OnboardingController});let le=[(0,u.keyringBuilderFactory)(v.MetaMaskKeyring)];if(!1===pe.isManifestV3){var ce;const e=null===(ce=this.opts.overrides)||void 0===ce?void 0:ce.keyrings,t=[(null==e?void 0:e.lattice)||y.default,v.MetaMaskKeyring],r=[{keyring:(null==e?void 0:e.trezor)||b.TrezorKeyring,bridge:(null==e?void 0:e.trezorBridge)||b.TrezorConnectBridge},{keyring:(null==e?void 0:e.ledger)||f.LedgerKeyring,bridge:(null==e?void 0:e.ledgerBridge)||f.LedgerIframeBridge}];le=t.map((e=>(0,u.keyringBuilderFactory)(e))),r.forEach((e=>le.push((0,Ve.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else le.push((0,Ve.hardwareKeyringBuilderFactory)(b.TrezorKeyring,et.TrezorOffscreenBridge),(0,Ve.hardwareKeyringBuilderFactory)(f.LedgerKeyring,tt.LedgerOffscreenBridge),(0,u.keyringBuilderFactory)(st.LatticeKeyringOffscreen));const de=this.controllerMessenger.getRestricted({name:"SnapKeyringBuilder",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","SubjectMetadataController:getSubjectMetadata","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress"]});le.push((0,rt.snapKeyringBuilder)(de,(()=>this.snapController),(async()=>await this.keyringController.persistAllKeyrings()),(e=>this.preferencesController.setSelectedAddress(e)),(e=>this.removeAccount(e))));const he=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new p.KeyringController({cacheEncryptionKey:!0,keyringBuilders:le,state:o.KeyringController,encryptor:e.encryptor||(0,nt.encryptorFactory)(6e5),messenger:he,removeIdentity:this.preferencesController.removeAddress.bind(this.preferencesController),setAccountLabel:(e,t)=>{const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t),this.preferencesController.setAccountLabel(e,t)},setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(t===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},syncIdentities:e=>{this.preferencesController.syncAddresses(e)},updateIdentities:this.preferencesController.setAddresses.bind(this.preferencesController)}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new L.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:o.PermissionController,caveatSpecifications:(0,ze.getCaveatSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController)}),permissionSpecifications:{...(0,ze.getPermissionSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e=[],t=[])=>{const r=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),n=e.length,o=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,M.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${o} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:ze.unrestrictedMethods}),this.permissionLogController=new ze.PermissionLogController({restrictedMethods:new Set(Object.keys(re.RestrictedMethods)),initState:o.PermissionLogController}),this.subjectMetadataController=new L.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:o.SubjectMetadataController,subjectCacheLimit:100}),this.runtimeStream=new Y.BrowserRuntimePostMessageStream({name:"parent",target:"child"}),this.runtimeStream.on("data",(e=>{console.log("Service worker received data from offscreen document",e)}));const ue={iframeUrl:new URL("https://execution.metamask.io/3.5.0/index.html"),messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=new j.IframeExecutionService(ue);const ge=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,`${this.subjectMetadataController.name}:addSubjectMetadata`,`${this.phishingController.name}:maybeUpdateState`,`${this.phishingController.name}:testOrigin`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update","SnapsRegistry:resolveVersion"]}),Ce=!0;this.snapController=new j.SnapController({environmentEndowmentPermissions:Object.values(re.EndowmentPermissions),excludedPermissions:{...re.ExcludedSnapPermissions,...re.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:o.SnapController,messenger:ge,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!1,requireAllowlist:Ce}}),this.notificationController=new B.NotificationController({messenger:this.controllerMessenger.getRestricted({name:"NotificationController"}),state:o.NotificationController}),this.rateLimitController=new x.RateLimitController({state:o.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const r=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==r?void 0:r.name)??e,t).catch((e=>{k.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>(this.controllerMessenger.call("NotificationController:show",e,t),null),rateLimitCount:5,rateLimitTimeout:6e4}}});const me=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapUninstalled","SnapController:snapEnabled","SnapController:snapDisabled"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new j.CronjobController({state:o.CronjobController,messenger:me});const we=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new j.JsonSnapsRegistry({state:o.SnapsRegistry,messenger:we,refetchOnAllowlistMiss:Ce,failOnUnavailableRegistry:Ce,url:{registry:"https://acl.execution.metamask.io/latest/registry.json",signature:"https://acl.execution.metamask.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"}),this.accountTracker=new ve.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getNetworkIdentifier:e=>{const{type:t,rpcUrl:r}=e??this.networkController.state.providerConfig;return t===Z.NETWORK_TYPES.RPC?r:t},preferencesController:this.preferencesController,onboardingController:this.onboardingController,controllerMessenger:this.controllerMessenger.getRestricted({name:"AccountTracker",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]}),initState:{accounts:{}},onAccountRemoved:this.controllerMessenger.subscribe.bind(this.controllerMessenger,"KeyringController:accountRemoved")}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.store.getState();e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.onboardingController.store.subscribe((0,Ge.previousValueComparator)((async(e,t)=>{const{completedOnboarding:r}=e,{completedOnboarding:n}=t;!r&&n&&this.triggerNetworkrequests()}),this.onboardingController.store.getState()));const ke=this.controllerMessenger.getRestricted({name:"DetectTokensController",allowedActions:["KeyringController:getState"],allowedEvents:["NetworkController:stateChange","KeyringController:lock","KeyringController:unlock","AccountsController:selectedAccountChange","TokenListController:stateChange"]});this.detectTokensController=new Be.default({messenger:ke,preferences:this.preferencesController,tokensController:this.tokensController,getCurrentSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),assetsContractController:this.assetsContractController,network:this.networkController,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)}),this.addressBookController=new P.AddressBookController(undefined,o.AddressBookController),this.alertController=new Ue.default({initState:o.AlertController,preferencesStore:this.preferencesController.store,controllerMessenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new De.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})},this.txController=new z.TransactionController({blockTracker:this.blockTracker,cancelMultiplier:1.1,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getNetworkState:()=>this.networkController.state,getPermittedAccounts:this.getPermittedAccounts.bind(this),getSavedGasFees:()=>this.preferencesController.store.getState().advancedGasFee[this.networkController.state.providerConfig.chainId],getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,incomingTransactions:{includeTokenTransfers:!1,isEnabled:()=>{var e;return Boolean((null===(e=this.preferencesController.store.getState().incomingTransactionsPreferences)||void 0===e?void 0:e[this.networkController.state.providerConfig.chainId])&&this.onboardingController.store.getState().completedOnboarding)},queryEntireHistory:!1,updateTransactions:!1},messenger:this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`]}),onNetworkStateChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e()))},provider:this.provider,hooks:{}},{sign:(...e)=>this.keyringController.signTransaction(...e)},o.TransactionController),this._addTransactionControllerListeners(),a.subscribe("NetworkController:networkDidChange",(async()=>{try{this.preferencesController.store.getState().useCurrencyRateCheck&&(await this.currencyRateController.stopAllPolling(),this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId))}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.decryptMessageController=new xe.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new We.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new $.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`]}),isEthSignEnabled:()=>{var e;return null===(e=this.preferencesController.store.getState())||void 0===e||null===(e=e.disabledRpcMethodPreferences)||void 0===e?void 0:e.eth_sign},getAllState:this.getState.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:ie.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})})),this.swapsController=new je.default({getBufferedGasLimit:async(e,t)=>{const{gas:r,simulationFails:n}=await this.txController.estimateGasBuffered(e.txParams,t);return{gasLimit:r,simulationFails:n}},provider:this.provider,getProviderConfig:()=>this.networkController.state.providerConfig,getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},o.SwapsController),this.smartTransactionsController=new U.default({getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},{supportedChainIds:[Z.CHAIN_IDS.MAINNET,Z.CHAIN_IDS.GOERLI]},o.SmartTransactionsController),this.userOperationController=new Q.UserOperationController({entrypoint:"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById"]}),state:o.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),a.subscribe("NetworkController:networkDidChange",(()=>{this.accountTracker.updateAccounts()})),a.subscribe("NetworkController:networkWillChange",(()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(m.ethErrors.provider.userRejectedRequest())})),this.metamaskMiddleware=(0,He.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${i}`},version:i,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===se.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:(e,t)=>(0,ot.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processEthSignMessage:this.signatureController.newUnsignedMessage.bind(this.signatureController),processTypedMessage:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV3:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV4:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processPersonalMessage:this.signatureController.newUnsignedPersonalMessage.bind(this.signatureController),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===z.TransactionStatus.submitted))}),this.on("update",(e=>this._onStateUpdate(e)));const Se={AccountTracker:this.accountTracker.store,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,PPOMController:this.ppomController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,TransactionController:this.txController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,PPOMController:this.ppomController,UserOperationController:this.userOperationController,...Se}),this.memStore=new ye.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,TxController:this.txController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,UserOperationController:this.userOperationController,...Se},controllerMessenger:this.controllerMessenger});const Ae=[this.accountTracker.resetState,this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState,this.ensController.resetState,this.approvalController.clear.bind(this.approvalController)];pe.isManifestV3?!0===n&&(this.resetStates(Ae),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Ae);!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(fe.onMessageReceived),(0,fe.checkForMultipleVersionsRunning)()}triggerNetworkrequests(){this.accountTracker.start(),this.txController.startIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()}stopNetworkRequests(){this.accountTracker.stop(),this.txController.stopIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.stopAllPolling(),this.preferencesController.store.getState().useTokenDetection&&(this.tokenListController.stop(),this.tokenRatesController.stop())}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(te.KeyringType.snap);return e||(e=await this.keyringController.addNewKeyring(te.KeyringType.snap)),e}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.store.getState();return e}getSnapPermissionSpecifications(){const e=(0,nt.encryptorFactory)(1e4);return{...(0,j.buildSnapEndowmentSpecifications)(Object.keys(re.ExcludedSnapEndowments)),...(0,j.buildSnapRestrictedMethodSpecifications)(Object.keys(re.ExcludedSnapPermissions),{encrypt:e.encrypt,decrypt:e.decrypt,getLocale:this.getLocale.bind(this),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),showDialog:(e,t,r,n)=>this.approvalController.addAndShowApprovalRequest({origin:e,type:se.SNAP_DIALOG_TYPES[t],requestData:{content:r,placeholder:n}}),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t.message),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.store.getState();e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.store.getState();return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},getSnapKeyring:this.getSnapKeyring.bind(this)})}}dismissNotifications(e){this.notificationController.dismiss(e)}markNotificationsAsRead(e){this.notificationController.markRead(e)}setupControllerEventSubscriptions(){let e;this.preferencesController.store.subscribe((async e=>{var t;const{currentLocale:r}=e,{chainId:n}=this.networkController.state.providerConfig;await(0,Ze.updateCurrentLocale)(r),null!==(t=e.incomingTransactionsPreferences)&&void 0!==t&&t[n]?this.txController.startIncomingTransactionPolling():this.txController.stopIncomingTransactionPolling()})),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const r=(0,ze.getChangedAccounts)(e,t);for(const[e,t]of r.entries())this._notifyAccountsChange(e,t)}),ze.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{await this.txController.updateIncomingTransactions()})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t)=>{var r;const n=e.id,o=null===(r=this._getSnapMetadata(n))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.SnapInstalled,category:ie.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,origin:t,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,r)=>{var n;const o=e.id,s=null===(n=this._getSnapMetadata(o))||void 0===n?void 0:n.category;this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.SnapUpdated,category:ie.MetaMetricsEventCategory.Snaps,properties:{snap_id:o,old_version:t,new_version:e.version,origin:r,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(re.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const r=Object.values(this.notificationController.state.notifications).reduce(((t,r)=>(r.origin===e.id&&t.push(r.id),t)),[]);this.dismissNotifications(r);const n=e.id,o=null===(t=this._getSnapMetadata(n))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.SnapUninstalled,category:ie.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,snap_category:o}})}))}createPublicConfigStore(){const e=new i.ObservableStore,t=(e,{isUnlocked:t})=>({isUnlocked:t,chainId:e,networkVersion:this.deprecatedNetworkId??"loading"}),r=r=>{var n;const o=null===(n=r.networksMetadata[r.selectedNetworkClientId])||void 0===n?void 0:n.status,{chainId:s}=this.networkController.state.providerConfig;o===Z.NetworkStatus.Available&&e.putState(t(s,r))};return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),accounts:await this.getPermittedAccounts(e),...this.getProviderNetworkState(this.preferencesController.getUseRequestQueue()?e:undefined)}}getProviderNetworkState(e="metamask"){let t;if(this.preferencesController.getUseRequestQueue()){const r=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e)||this.networkController.state.selectedNetworkClientId;t=this.controllerMessenger.call("NetworkController:getNetworkClientById",r).configuration.chainId}else t=this.networkController.state.providerConfig.chainId;return{chainId:t,networkVersion:this.deprecatedNetworkId??"loading"}}async updateDeprecatedNetworkId(){try{this.deprecatedNetworkId=await this.deprecatedGetNetworkId()}catch(e){console.error(e),this.deprecatedNetworkId=null}this._notifyChainChange()}async deprecatedGetNetworkId(){const e=this.controllerMessenger.call("NetworkController:getEthQuery");if(!e)throw new Error("Provider has not been initialized");return new Promise(((t,r)=>{e.sendAsync({method:"net_version"},((e,n)=>{e?r(e):t((0,Ce.convertNetworkId)(n))}))}))}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),r=this.memStore.getFlatState();return delete r.vault,{isInitialized:t,...r,snapStates:{},unencryptedSnapStates:{},snaps:Object.values(r.snaps??{}).reduce(((e,t)=>{const{sourceCode:r,auxiliaryFiles:n,...o}=t;return e[t.id]=o,e}),{})}}getApi(){const{accountsController:e,addressBookController:t,alertController:r,appStateController:n,keyringController:o,nftController:s,nftDetectionController:i,currencyRateController:a,detectTokensController:l,ensController:c,gasFeeController:d,metaMetricsController:h,networkController:u,announcementController:p,onboardingController:g,permissionController:C,preferencesController:m,swapsController:w,tokensController:k,smartTransactionsController:b,txController:f,assetsContractController:y,backup:v,approvalController:S,phishingController:A}=this;return{getState:this.getState.bind(this),setCurrentCurrency:a.setCurrentCurrency.bind(a),setUseBlockie:m.setUseBlockie.bind(m),setUseNonceField:m.setUseNonceField.bind(m),setUsePhishDetect:m.setUsePhishDetect.bind(m),setUseMultiAccountBalanceChecker:m.setUseMultiAccountBalanceChecker.bind(m),setUseSafeChainsListValidation:m.setUseSafeChainsListValidation.bind(m),setUseTokenDetection:m.setUseTokenDetection.bind(m),setUseNftDetection:m.setUseNftDetection.bind(m),setUse4ByteResolution:m.setUse4ByteResolution.bind(m),setUseCurrencyRateCheck:m.setUseCurrencyRateCheck.bind(m),setOpenSeaEnabled:m.setOpenSeaEnabled.bind(m),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setSecurityAlertsEnabled:m.setSecurityAlertsEnabled.bind(m),setAddSnapAccountEnabled:m.setAddSnapAccountEnabled.bind(m),setUseRequestQueue:this.setUseRequestQueue.bind(this),setIpfsGateway:m.setIpfsGateway.bind(m),setUseAddressBarEnsResolution:m.setUseAddressBarEnsResolution.bind(m),setParticipateInMetaMetrics:h.setParticipateInMetaMetrics.bind(h),setCurrentLocale:m.setCurrentLocale.bind(m),setIncomingTransactionsPreferences:m.setIncomingTransactionsPreferences.bind(m),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:S.addAndShowApprovalRequest.bind(S),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getAccountsBySnapId:e=>(0,rt.getAccountsBySnapId)(this,e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:o.submitQRCryptoHDKey.bind(o),submitQRHardwareCryptoAccount:o.submitQRCryptoAccount.bind(o),cancelSyncQRHardware:o.cancelQRSynchronization.bind(o),submitQRHardwareSignature:o.submitQRSignature.bind(o),cancelQRHardwareSignRequest:o.cancelQRSignRequest.bind(o),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),setActiveNetwork:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)),rollbackToPreviousProvider:u.rollbackToPreviousProvider.bind(u),removeNetworkConfiguration:u.removeNetworkConfiguration.bind(u),upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},addToken:k.addToken.bind(k),updateTokenType:k.updateTokenType.bind(k),setFeatureFlag:m.setFeatureFlag.bind(m),setPreference:m.setPreference.bind(m),addKnownMethodData:m.addKnownMethodData.bind(m),setDismissSeedBackUpReminder:m.setDismissSeedBackUpReminder.bind(m),setDisabledRpcMethodPreference:m.setDisabledRpcMethodPreference.bind(m),getRpcMethodPreferences:m.getRpcMethodPreferences.bind(m),setAdvancedGasFee:m.setAdvancedGasFee.bind(m),setTheme:m.setTheme.bind(m),setTransactionSecurityCheckEnabled:m.setTransactionSecurityCheckEnabled.bind(m),setSnapsAddSnapAccountModalDismissed:m.setSnapsAddSnapAccountModalDismissed.bind(m),setSelectedInternalAccount:e=>{const t=this.accountsController.getAccount(e);t&&(this.preferencesController.setSelectedAddress(t.address),this.accountsController.setSelectedAccount(e))},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{this.preferencesController.setAccountLabel(e,t);const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),addNft:s.addNft.bind(s),addNftVerifyOwnership:s.addNftVerifyOwnership.bind(s),removeAndIgnoreNft:s.removeAndIgnoreNft.bind(s),removeNft:s.removeNft.bind(s),checkAndUpdateAllNftsOwnershipStatus:s.checkAndUpdateAllNftsOwnershipStatus.bind(s),checkAndUpdateSingleNftOwnershipStatus:s.checkAndUpdateSingleNftOwnershipStatus.bind(s),isNftOwner:s.isNftOwner.bind(s),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setTermsOfUseLastAgreed:n.setTermsOfUseLastAgreed.bind(n),setSurveyLinkLastClickedOrClosed:n.setSurveyLinkLastClickedOrClosed.bind(n),setSnapsInstallPrivacyWarningShownStatus:n.setSnapsInstallPrivacyWarningShownStatus.bind(n),setOutdatedBrowserWarningLastShown:n.setOutdatedBrowserWarningLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setShowBetaHeader:n.setShowBetaHeader.bind(n),setShowProductTour:n.setShowProductTour.bind(n),setShowAccountBanner:n.setShowAccountBanner.bind(n),setShowNetworkBanner:n.setShowNetworkBanner.bind(n),updateNftDropDownState:n.updateNftDropDownState.bind(n),setFirstTimeUsedNetwork:n.setFirstTimeUsedNetwork.bind(n),tryReverseResolveAddress:c.reverseResolveAddress.bind(c),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:f.updateTransaction.bind(f),approveTransactionsWithSameNonce:f.approveTransactionsWithSameNonce.bind(f),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,ot.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1}),this.updateSecurityAlertResponseByTxId.bind(this)),addTransactionAndWaitForPublish:(e,t)=>(0,ot.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0}),this.updateSecurityAlertResponseByTxId.bind(this)),createTransactionEventFragment:me.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),getTransactions:this.txController.getTransactions.bind(this.txController),updateEditableParams:this.txController.updateEditableParams.bind(this.txController),updateTransactionGasFees:f.updateTransactionGasFees.bind(f),updateTransactionSendFlowHistory:f.updateTransactionSendFlowHistory.bind(f),updatePreviousGasParams:f.updatePreviousGasParams.bind(f),abortTransactionSigning:f.abortTransactionSigning.bind(f),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:g.setSeedPhraseBackedUp.bind(g),completeOnboarding:g.completeOnboarding.bind(g),setFirstTimeFlowType:g.setFirstTimeFlowType.bind(g),setAlertEnabledness:r.setAlertEnabledness.bind(r),setUnconnectedAccountAlertShown:r.setUnconnectedAccountAlertShown.bind(r),setWeb3ShimUsageAlertDismissed:r.setWeb3ShimUsageAlertDismissed.bind(r),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,ze.getPermissionBackgroundApiMethods)(C),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),dismissNotifications:this.dismissNotifications.bind(this),markNotificationsAsRead:this.markNotificationsAsRead.bind(this),updateCaveat:this.updateCaveat.bind(this),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await A.maybeUpdateState(),A.test(e)),fetchAndSetQuotes:w.fetchAndSetQuotes.bind(w),setSelectedQuoteAggId:w.setSelectedQuoteAggId.bind(w),resetSwapsState:w.resetSwapsState.bind(w),setSwapsTokens:w.setSwapsTokens.bind(w),clearSwapsQuotes:w.clearSwapsQuotes.bind(w),setApproveTxId:w.setApproveTxId.bind(w),setTradeTxId:w.setTradeTxId.bind(w),setSwapsTxGasPrice:w.setSwapsTxGasPrice.bind(w),setSwapsTxGasLimit:w.setSwapsTxGasLimit.bind(w),setSwapsTxMaxFeePerGas:w.setSwapsTxMaxFeePerGas.bind(w),setSwapsTxMaxFeePriorityPerGas:w.setSwapsTxMaxFeePriorityPerGas.bind(w),safeRefetchQuotes:w.safeRefetchQuotes.bind(w),stopPollingForQuotes:w.stopPollingForQuotes.bind(w),setBackgroundSwapRouteState:w.setBackgroundSwapRouteState.bind(w),resetPostFetchState:w.resetPostFetchState.bind(w),setSwapsErrorKey:w.setSwapsErrorKey.bind(w),setInitialGasEstimate:w.setInitialGasEstimate.bind(w),setCustomApproveTxData:w.setCustomApproveTxData.bind(w),setSwapsLiveness:w.setSwapsLiveness.bind(w),setSwapsFeatureFlags:w.setSwapsFeatureFlags.bind(w),setSwapsUserFeeLevel:w.setSwapsUserFeeLevel.bind(w),setSwapsQuotesPollingLimitEnabled:w.setSwapsQuotesPollingLimitEnabled.bind(w),setSmartTransactionsOptInStatus:b.setOptInState.bind(b),fetchSmartTransactionFees:b.getFees.bind(b),clearSmartTransactionFees:b.clearFees.bind(b),submitSignedTransactions:b.submitSignedTransactions.bind(b),cancelSmartTransaction:b.cancelSmartTransaction.bind(b),fetchSmartTransactionsLiveness:b.fetchLiveness.bind(b),updateSmartTransaction:b.updateSmartTransaction.bind(b),setStatusRefreshInterval:b.setStatusRefreshInterval.bind(b),trackMetaMetricsEvent:h.trackEvent.bind(h),trackMetaMetricsPage:h.trackPage.bind(h),createEventFragment:h.createEventFragment.bind(h),updateEventFragment:h.updateEventFragment.bind(h),finalizeEventFragment:h.finalizeEventFragment.bind(h),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,updateViewedNotifications:p.updateViewed.bind(p),getGasFeeEstimatesAndStartPolling:d.getGasFeeEstimatesAndStartPolling.bind(d),disconnectGasFeeEstimatePoller:d.disconnectPoller.bind(d),getGasFeeTimeEstimate:d.getTimeEstimate.bind(d),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),backupUserData:v.backupUserData.bind(v),restoreUserData:v.restoreUserData.bind(v),detectNewTokens:l.detectNewTokens.bind(l),detectNfts:i.detectNfts.bind(i),addDetectedTokens:k.addDetectedTokens.bind(k),addImportedTokens:k.addTokens.bind(k),ignoreTokens:k.ignoreTokens.bind(k),getBalancesInSingleCall:y.getBalancesInSingleCall.bind(y),throwTestError:this.throwTestError.bind(this)}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,r){var n,o;const{tokenList:s}=this.tokenListController.state,{tokens:i}=this.tokensController.state,a={...he.STATIC_MAINNET_TOKEN_LIST[e.toLowerCase()]||{},...s[e.toLowerCase()]||{},...i.find((({address:t})=>(0,ce.isEqualCaseInsensitive)(t,e)))||{}},l=(0,ce.isEqualCaseInsensitive)(a.standard,J.TokenStandard.ERC20)||!0===a.erc20,c=!(r||(0,ce.isEqualCaseInsensitive)(a.standard,J.TokenStandard.ERC1155)||(0,ce.isEqualCaseInsensitive)(a.standard,J.TokenStandard.ERC721)||a.erc721),d=a.decimals!==undefined&&a.symbol;let h;if(l||c&&d)try{const r=await(0,le.fetchTokenBalance)(e,t,this.provider);h={address:e,balance:r,standard:J.TokenStandard.ERC20,decimals:a.decimals,symbol:a.symbol}}catch(e){k.default.warning(`Failed to get token balance. Error: ${e}`)}h===undefined&&(h=await this.assetsContractController.getTokenStandardAndDetails(e,t,r));if((0,ce.isEqualCaseInsensitive)(h.standard,J.TokenStandard.ERC1155))try{const n=await(0,le.fetchERC1155Balance)(e,t,r,this.provider),o=null!=n&&n._hex?parseInt(n._hex,16).toString():null;h={...h,balance:o}}catch(e){k.default.warning("Failed to get token balance. Error:",e)}return{...h,decimals:null===(n=h)||void 0===n||null===(n=n.decimals)||void 0===n?void 0:n.toString(10),balance:null===(o=h)||void 0===o||null===(o=o.balance)||void 0===o?void 0:o.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{const t=await this.keyringController.createNewVaultAndKeychain(e),r=await this.keyringController.getAccounts();return this.preferencesController.setAddresses(r),this.selectFirstAccount(),t}finally{t()}}async createNewVaultAndRestore(e,r){const n=await this.createVaultMutex.acquire();try{const n=t.from(r);this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.snapController.clearState(),this.notificationController.clear(),this.accountTracker.clearAccounts(),this.txController.clearUnapprovedTransactions();const i=await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(n)),{chainId:a}=this.networkController.state.providerConfig,l=new S.default(this.provider),c=await this.keyringController.getAccounts();let d=c[c.length-1];for(let e=c.length;;e++){if("0x0"===await this.getBalance(d,l)){var o,s;await this.detectTokensController.detectNewTokens({selectedAddress:d});const t=null===(o=this.tokensController.state.allTokens)||void 0===o||null===(o=o[a])||void 0===o?void 0:o[d],r=null===(s=this.tokensController.state.allDetectedTokens)||void 0===s||null===(s=s[a])||void 0===s?void 0:s[d];if(0===((null==t?void 0:t.length)??0)&&0===((null==r?void 0:r.length)??0)){1!==e&&await this.removeAccount(d);break}}({addedAccountAddress:d}=await this.keyringController.addNewAccount(e))}return this.setLedgerTransportPreference(),this.selectFirstAccount(),i}finally{n()}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>V.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>V.wordlist[e])).join(" "))}getBalance(e,t){return new Promise(((r,n)=>{const o=this.accountTracker.store.getState().accounts[e];o&&o.balance?r(o.balance):t.getBalance(e,((e,t)=>{e?(n(e),k.default.error(e)):r(t||"0x0")}))}))}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){k.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),this.setLedgerTransportPreference()}async _loginUser(e){try{await this.submitPassword(e),await this.accountTracker.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:r}=this.keyringController.state;if(JSON.parse(r).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstAccount(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t);const[r]=this.accountsController.listAccounts();this.accountsController.setSelectedAccount(r.id)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(te.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var r,n,o,s;const i=null===(r=this.opts.overrides)||void 0===r?void 0:r.keyrings;let a=null;switch(e){case ee.HardwareDeviceNames.trezor:a=(null==i||null===(n=i.trezor)||void 0===n?void 0:n.type)||b.TrezorKeyring.type;break;case ee.HardwareDeviceNames.ledger:a=(null==i||null===(o=i.ledger)||void 0===o?void 0:o.type)||f.LedgerKeyring.type;break;case ee.HardwareDeviceNames.qr:a=v.MetaMaskKeyring.type;break;case ee.HardwareDeviceNames.lattice:a=(null==i||null===(s=i.lattice)||void 0===s?void 0:s.type)||y.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(a);if(l||(l=await this.keyringController.addNewKeyring(a)),t&&l.setHdPath&&l.setHdPath(t),e===ee.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===ee.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=this.networkController.state.providerConfig.type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(ee.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let o=[];switch(t){case-1:o=await n.getPreviousPage();break;case 1:o=await n.getNextPage();break;default:o=await n.getFirstPage()}const s=await this.keyringController.getAccounts(),i=[...new Set(s.concat(o.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),o}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){const t=await this.getKeyringForDevice(e);for(const e of t.accounts)await this.removeAccount(e);return t.forgetDevice(),!0}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case te.KeyringType.trezor:case te.KeyringType.lattice:case te.KeyringType.qr:case te.KeyringType.ledger:return"hardware";case te.KeyringType.imported:return"imported";case te.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case te.KeyringType.trezor:return t.getModel();case te.KeyringType.qr:return t.getName();case te.KeyringType.ledger:return ee.HardwareDeviceNames.ledger;case te.KeyringType.lattice:return ee.HardwareDeviceNames.lattice;default:return undefined}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const o=await this.getKeyringForDevice(t,r);o.setAccountToUnlock(e);const s=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccountForKeyring(o),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!s.includes(r)){const s=this.getAccountLabel(t===ee.HardwareDeviceNames.qr?o.getName():t,e,n);this.preferencesController.setAccountLabel(r,s),this.preferencesController.setSelectedAddress(r);const i=this.accountsController.getAccountByAddress(r);this.accountsController.setAccountName(i.id,s)}}));const l=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.store.getState();return{...i,identities:c,accounts:l}}async addNewAccount(e){const t=await this.keyringController.getAccounts(),{addedAccountAddress:r}=await this.keyringController.addNewAccount(e);return t.includes(r)||this.preferencesController.setSelectedAddress(r),r}async getSeedPhrase(e){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address;return this.txController.wipeTransactions(!0,e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,re.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===m.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(re.CaveatTypes.restrictReturnedAccounts,(t=>ze.CaveatMutatorFactories[re.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const{importedAccountAddress:r}=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(r)}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:r}){var n;return{dappRequest:r,networkClientId:this.networkController.state.selectedNetworkClientId,selectedAccount:this.accountsController.getSelectedAccount(),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,ppomController:this.ppomController,securityAlertsEnabled:null===(n=this.preferencesController.store.getState())||void 0===n?void 0:n.securityAlertsEnabled,chainId:this.networkController.state.providerConfig.chainId}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.stopTransaction(e,t,r);return this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.speedUpTransaction(e,t,r);return this.getState()}async estimateGas(e){return new Promise(((t,r)=>new A.default(this.provider).estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}async updateSecurityAlertResponseByTxId(e,t){let r=!1;for(;!r;)r=J.SIGNING_METHODS.includes(e.method)?Object.values(this.signatureController.messages).find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})):this.txController.state.transactions.find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})),r||await new Promise((e=>setTimeout(e,100)));J.SIGNING_METHODS.includes(e.method)?this.appStateController.addSignatureSecurityAlertResponse(t):this.txController.updateSecurityAlertResponse(r.id,t)}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setUseRequestQueue(e){this.preferencesController.setUseRequestQueue(e),this.selectedNetworkController.update((t=>{t.perDomainNetwork=e}))}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let o;if(o=r||(t.id&&t.id!==this.extension.runtime.id?L.SubjectType.Extension:L.SubjectType.Website),t.url){const{hostname:r}=new URL(t.url);this.phishingController.maybeUpdateState();const o=this.phishingController.test(r);if(n&&null!=o&&o.result)return this.sendPhishingWarning(e,r),void this.metaMetricsController.trackEvent({event:ie.MetaMetricsEventName.PhishingPageDisplayed,category:ie.MetaMetricsEventCategory.Phishing,properties:{url:r}})}const s=(0,Ie.setupMultiplex)(e);this.setupProviderConnection(s.createStream("metamask-provider"),t,o),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,Ie.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,L.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,Ie.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,$e.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},r))}sendPhishingWarning(e,t){(0,Ie.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,$e.default)(t,e,this.store,this.localStoreApiWrapper));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r);const n=()=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?n():this.once("startUISync",n),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===L.SubjectType.Internal?se.ORIGIN_METAMASK:r===L.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:L.SubjectType.Extension}),t.tab&&t.tab.id&&(s=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),a=(0,c.createEngineStream)({engine:i}),l=this.addConnection(n,{engine:i});(0,o.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),l&&this.removeConnection(n,l),e&&k.default.error(e)}))}setupSnapProvider(e,t){this.setupUntrustedCommunication({connectionStream:t,sender:{snapId:e},subjectType:L.SubjectType.Snap})}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const o=new l.JsonRpcEngine,{blockTracker:s,provider:i}=this;o.push((0,Me.default)({origin:e})),o.push((0,F.createSelectedNetworkMiddleware)(this.controllerMessenger));const{selectedNetworkClientId:a}=this.networkController.state;this.selectedNetworkController.getNetworkClientIdForDomain(e)===undefined&&this.selectedNetworkController.setNetworkClientIdForDomain(e,a);let c=i;this.preferencesController.getUseRequestQueue()&&(c=this.selectedNetworkController.getProviderAndBlockTracker(e).provider);const h=(0,W.createQueuedRequestMiddleware)({messenger:this.controllerMessenger,useRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController)});o.push(h);const u=(0,g.default)({provider:i,blockTracker:s}),p=(0,C.default)({provider:i,blockTracker:s});return p.events.on("notification",(e=>o.emit("notification",e))),pe.isManifestV3&&o.push((0,Se.default)()),n&&o.push((0,Pe.default)({tabId:n})),o.push((0,Ae.default)({origin:e})),o.push(this.permissionLogController.createMiddleware()),o.push((0,ke.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.updateSecurityAlertResponseByTxId.bind(this))),o.push((0,Ye.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store),securityProviderRequest:this.securityProviderRequest.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController})),t===L.SubjectType.Website&&o.push((0,Re.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),o.push((0,Te.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),setApprovalFlowLoadingText:this.approvalController.setFlowLoadingText.bind(this.approvalController),showApprovalSuccess:this.approvalController.success.bind(this.approvalController),showApprovalError:this.approvalController.error.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getCurrentRpcUrl:()=>this.networkController.state.providerConfig.rpcUrl,getNetworkConfigurations:()=>this.networkController.state.networkConfigurations,upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),setActiveNetwork:e=>{this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)},findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),findNetworkConfigurationBy:this.findNetworkConfigurationBy.bind(this),getNetworkClientIdForDomain:this.selectedNetworkController.getNetworkClientIdForDomain.bind(this.selectedNetworkController),setNetworkClientIdForDomain:this.selectedNetworkController.setNetworkClientIdForDomain.bind(this.selectedNetworkController),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),o.push((0,q.createSnapsMethodMiddleware)(t===L.SubjectType.Snap,{getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),getIsLocked:()=>!this.appStateController.isUnlocked(),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,we.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),o.push(u),o.push(p.middleware),t!==L.SubjectType.Internal&&o.push(this.permissionController.createPermissionMiddleware({origin:e})),o.push(this.metamaskMiddleware),o.push((0,d.providerAsMiddleware)(c)),o}setupPublicConfig(e){const t=(0,a.storeAsStream)(this.publicConfigStore);(0,o.default)(t,e,(e=>{t.destroy(),e&&k.default.error(e)}))}addConnection(e,{engine:t}){if(e===se.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,T.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.getNonceLock(e);return t.releaseLock(),t.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addTransactionControllerListeners(){const e=this.getTransactionMetricsRequest();this.txController.hub.on("post-transaction-balance-updated",me.handlePostTransactionBalanceUpdate.bind(null,e)),this.txController.hub.on("unapprovedTransaction",(t=>(0,me.handleTransactionAdded)(e,{transactionMeta:t}))),this.txController.hub.on("transaction-approved",me.handleTransactionApproved.bind(null,e)),this.txController.hub.on("transaction-dropped",me.handleTransactionDropped.bind(null,e)),this.txController.hub.on("transaction-confirmed",me.handleTransactionConfirmed.bind(null,e)),this.txController.hub.on("transaction-failed",me.handleTransactionFailed.bind(null,e)),this.txController.hub.on("transaction-new-swap",(({transactionMeta:e})=>{this.swapsController.setTradeTxId(e.id)})),this.txController.hub.on("transaction-new-swap-approval",(({transactionMeta:e})=>{this.swapsController.setApproveTxId(e.id)})),this.txController.hub.on("transaction-rejected",me.handleTransactionRejected.bind(null,e)),this.txController.hub.on("transaction-submitted",me.handleTransactionSubmitted.bind(null,e)),this.txController.hub.on("transaction-status-update",(({transactionMeta:e})=>{this._onFinishedTransaction(e)}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.preferencesController.store.getState().selectedAddress,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e))},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}findNetworkConfigurationBy(e){const{networkConfigurations:t}=this.networkController.state;return Object.values(t).find((t=>Object.keys(e).some((r=>t[r]===e[r]))))||null}async setLedgerTransportPreference(){const e=window.navigator.hid?ee.LedgerTransportTypes.webhid:ee.LedgerTransportTypes.u2f,t=await this.getKeyringForDevice(ee.HardwareDeviceNames.ledger);return null!=t&&t.updateTransportMethod?t.updateTransportMethod(e).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=se.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){const e=this.platform.getExtensionURL();await this.platform.switchToAnotherURL(undefined,e)}setLocked(){return this.keyringController.setLocked()}async securityProviderRequest(e,t){const{currentLocale:r,transactionSecurityCheckEnabled:n}=this.preferencesController.store.getState();if(n){const n=Number((0,ge.hexToDecimal)(this.networkController.state.providerConfig.chainId));try{return await(0,Je.securityProviderCheck)(e,t,n,r)}catch(e){throw k.default.error(e.message),e}}return null}async _onAccountChange(e){const t=(0,ze.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[r,n]of t.entries())n.includes(e)&&this._notifyAccountsChange(r,n);await this.txController.updateIncomingTransactions()}async _notifyAccountsChange(e,t){this.isUnlocked()&&this.notifyConnections(e,{method:ze.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)}_notifyChainChange(){this.preferencesController.getUseRequestQueue()?this.notifyAllConnections((e=>({method:ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)}))):this.notifyAllConnections({method:ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState()})}async _onFinishedTransaction(e){[z.TransactionStatus.confirmed,z.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),this._updateNFTOwnership(e),this._trackTransactionFailure(e))}async _createTransactionNotifcation(e){const{chainId:t}=e;let r={};if(t){const{networkConfigurations:e}=this.networkController.state,n=Object.values(e).find((e=>e.chainId===t));r=(null==n?void 0:n.rpcPrefs)??{}}try{await this.platform.showTransactionNotification(e,r)}catch(e){k.default.error("Failed to create transaction notification",e)}}_updateNFTOwnership(e){var t;const{type:r,txParams:n,chainId:o}=e;if(r!==z.TransactionType.tokenMethodTransferFrom||n===undefined)return;const{data:s,to:i,from:a}=n,l=(0,de.parseStandardTokenTransactionData)(s),c=(0,le.getTokenIdParam)(l)??(0,ue.getTokenValueParam)(l),{allNfts:d}=this.nftController.state,h=null==d||null===(t=d[a])||void 0===t||null===(t=t[o])||void 0===t?void 0:t.find((({address:e,tokenId:t})=>(0,ce.isEqualCaseInsensitive)(e,i)&&t===c));h&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(h,!1,{userAddress:a})}_trackTransactionFailure(e){var t;const{txReceipt:r}=e,n=this.getState();r&&"0x0"===r.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:ie.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(t=e.simulationFails)||void 0===t?void 0:t.reason,numberOfTokens:n.tokens.length,numberOfAccounts:Object.keys(n.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===z.TransactionType.swap?this.txController.hub.emit("transaction-new-swap",{transactionMeta:t}):t.type===z.TransactionType.swapApproval&&this.txController.hub.emit("transaction-new-swap-approval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){e.txParams.from=this.preferencesController.getSelectedAddress();this.txController.state.transactions.some((t=>t.id===e.id))||this.txController.state.transactions.push(e),this.txController.updateTransaction(e,"Generated from user operation"),this.txController.hub.emit("transaction-status-update",{transactionMeta:e})}}r.default=ct}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[89,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[9,{"../../../shared/constants/alarms":4016,"../../../shared/constants/app":4018,"../../../shared/constants/preferences":4031,"../../../shared/constants/time":4038,"../../../shared/modules/mv3.utils":4061,"../../../ui/helpers/utils/build-types":4878,"../metamask-controller":88,"@metamask/controller-utils":1074,"@metamask/obs-store":1386,events:2831,loglevel:3409,uuid:3965},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=C(e("events")),o=e("@metamask/obs-store"),s=e("uuid"),i=C(e("loglevel")),a=e("@metamask/controller-utils"),l=e("../metamask-controller"),c=e("../../../shared/constants/time"),d=e("../../../shared/constants/alarms"),h=e("../../../shared/modules/mv3.utils"),u=e("../../../ui/helpers/utils/build-types"),p=e("../../../shared/constants/app"),g=e("../../../shared/constants/preferences");function C(e){return e&&e.__esModule?e:{default:e}}class m extends n.default{constructor(e={}){const{addUnlockListener:t,isUnlocked:r,initState:n,onInactiveTimeout:s,preferencesStore:i,messenger:a,extension:l}=e;super(),this.extension=l,this.onInactiveTimeout=s||(()=>undefined),this.store=new o.ObservableStore({timeoutMinutes:g.DEFAULT_AUTO_LOCK_TIME_LIMIT,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),outdatedBrowserWarningLastShown:(new Date).getTime(),nftsDetectionNoticeDismissed:!1,showTestnetMessageInDropdown:!0,showBetaHeader:(0,u.isBeta)(),showProductTour:!0,showNetworkBanner:!0,showAccountBanner:!0,trezorModel:null,currentPopupId:undefined,hadAdvancedGasFeesSetPriorToMigration92_3:!1,...n,qrHardware:{},nftsDropdownState:{},usedNetworks:{"0x1":!0,"0x5":!0,"0x539":!0},surveyLinkLastClickedOrClosed:null,signatureSecurityAlertResponses:{}}),this.timer=null,this.isUnlocked=r,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),i.subscribe((({preferences:e})=>{this.store.getState().timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),a.subscribe("KeyringController:qrKeyringStateChange",(e=>this.store.updateState({qrHardware:e})));const{preferences:c}=i.getState();this._setInactiveTimeout(c.autoLockTimeLimit),this.messagingSystem=a,this._approvalRequestId=null}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._requestApproval()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;)this.waitingForUnlock.shift().resolve();this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}this._acceptApproval()}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setSurveyLinkLastClickedOrClosed(e){this.store.updateState({surveyLinkLastClickedOrClosed:e})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setTermsOfUseLastAgreed(e){this.store.updateState({termsOfUseLastAgreed:e})}setSnapsInstallPrivacyWarningShownStatus(e){this.store.updateState({snapsInstallPrivacyWarningShown:e})}setOutdatedBrowserWarningLastShown(e){this.store.updateState({outdatedBrowserWarningLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();this.timer?clearTimeout(this.timer):h.isManifestV3&&this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM),e&&(h.isManifestV3?(this.extension.alarms.create(d.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:e,periodInMinutes:e}),this.extension.alarms.onAlarm.addListener((e=>{e.name===d.AUTO_LOCK_TIMEOUT_ALARM&&(this.onInactiveTimeout(),this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM))}))):this.timer=setTimeout((()=>this.onInactiveTimeout()),e*c.MINUTE))}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:[...r,e]})}}removePollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:r.filter((t=>t!==e))})}}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setShowBetaHeader(e){this.store.updateState({showBetaHeader:e})}setShowProductTour(e){this.store.updateState({showProductTour:e})}setShowNetworkBanner(e){this.store.updateState({showNetworkBanner:e})}setShowAccountBanner(e){this.store.updateState({showAccountBanner:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}updateNftDropDownState(e){this.store.updateState({nftsDropdownState:e})}setFirstTimeUsedNetwork(e){const t=this.store.getState(),{usedNetworks:r}=t;r[e]=!0,this.store.updateState({usedNetworks:r})}getSignatureSecurityAlertResponse(e){return this.store.getState().signatureSecurityAlertResponses[e]}addSignatureSecurityAlertResponse(e){const t=this.store.getState(),{signatureSecurityAlertResponses:r}=t;this.store.updateState({signatureSecurityAlertResponses:{...r,[e.securityAlertId]:e}})}setCurrentPopupId(e){this.store.updateState({currentPopupId:e})}getCurrentPopupId(){return this.store.getState().currentPopupId}_requestApproval(){this._approvalRequestId||(this._approvalRequestId=(0,s.v4)(),this.messagingSystem.call("ApprovalController:addRequest",{id:this._approvalRequestId,origin:p.ORIGIN_METAMASK,type:a.ApprovalType.Unlock},!0).catch((()=>{this._approvalRequestId=null})))}_acceptApproval(){if(this._approvalRequestId){try{this.messagingSystem.call("ApprovalController:acceptRequest",this._approvalRequestId)}catch(e){i.default.error("Failed to unlock approval request",e)}this._approvalRequestId=null}}}r.default=m}}},{package:"$root$",file:"app/scripts/controllers/app-state.js"}],[90,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[91,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[92,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[93,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[94,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[95,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[96,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[97,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:10,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,n.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[98,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:11,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[99,{lodash:3399},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:12,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[4,{"../../shared/constants/app":4018,"../../shared/constants/metametrics":4027,"../../shared/modules/browser-runtime.utils":4051,"../../shared/modules/mv3.utils":4061,"../../shared/modules/object.utils":4063,"./first-time-state":28,"./lib/createStreamSink":39,"./lib/ens-ipfs/setup":45,"./lib/get-first-preferred-lang-code":47,"./lib/getObjStructure":48,"./lib/local-store":51,"./lib/migrator":54,"./lib/network-store":55,"./lib/notification-manager":56,"./lib/setup-initial-state-hooks":78,"./lib/setupSentry":79,"./lib/util":87,"./metamask-controller":88,"./migrations":203,"./platforms/extension":204,"@metamask/controller-utils":1074,"@metamask/obs-store":1386,"@metamask/utils":1760,"debounce-stream":2642,"end-of-stream":2682,"eth-rpc-errors":2746,events:2831,"extension-port-stream":2834,loglevel:3409,pump:3565,"webextension-polyfill":4e3},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.loadStateFromPersistence=le,r.setupController=de,r.statePersistenceEvents=void 0,e("./lib/setup-initial-state-hooks");var n=L(e("events")),o=L(e("end-of-stream")),s=L(e("pump")),i=L(e("debounce-stream")),a=L(e("loglevel")),l=L(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=e("@metamask/utils"),h=e("@metamask/controller-utils"),u=L(e("extension-port-stream")),p=e("eth-rpc-errors"),g=e("../../shared/constants/app"),C=e("../../shared/constants/metametrics"),m=e("../../shared/modules/browser-runtime.utils"),w=e("../../shared/modules/mv3.utils"),k=e("../../shared/modules/object.utils"),b=L(e("./migrations")),f=L(e("./lib/migrator")),y=L(e("./platforms/extension")),v=L(e("./lib/local-store")),S=(L(e("./lib/network-store")),e("./lib/setupSentry")),A=L(e("./lib/createStreamSink")),T=_(e("./lib/notification-manager")),M=_(e("./metamask-controller")),P=L(e("./first-time-state")),N=L(e("./lib/get-first-preferred-lang-code")),E=L(e("./lib/getObjStructure")),R=L(e("./lib/ens-ipfs/setup")),I=e("./lib/util");function O(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(O=function(e){return e?r:t})(e)}function _(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=O(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}function L(e){return e&&e.__esModule?e:{default:e}}const U=new v.default;global.stateHooks.getMostRecentPersistedState=()=>U.mostRecentRetrievedState;const{sentry:F}=global,D={...P.default},x={[g.ENVIRONMENT_TYPE_POPUP]:!0,[g.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[g.ENVIRONMENT_TYPE_FULLSCREEN]:!0},B=["trezor-connect"];a.default.setLevel("info",!1);const j=new y.default,q=new T.default;let K=!1,$=!1,G=!1;const H={},V={};let W,Q;const z={};const Y=new URL("https://metamask.github.io/phishing-warning/v3.0.3/"),J=1e3,X=r.statePersistenceEvents=new n.default,{promise:Z,resolve:ee,reject:te}=(0,I.deferredPromise)(),re=async()=>{const e=await l.default.tabs.query({url:"<all_urls>",windowType:"normal"}).then((e=>((0,m.checkForLastErrorAndLog)(),e))).catch((()=>{(0,m.checkForLastErrorAndLog)()}));for(const t of e)l.default.tabs.sendMessage(t.id,{name:g.EXTENSION_MESSAGES.READY}).then((()=>{(0,m.checkForLastErrorAndLog)()})).catch((()=>{(0,m.checkForLastErrorAndLog)()}))};let ne,oe;function se(){const e=(new Date).toISOString();l.default.storage.session.set({timestamp:e})}async function ie(){try{const e=await le(),t=e.data,r=await(0,N.default)();let n;if(w.isManifestV3){const e=2e3;se(),setInterval(se,e);const t=await l.default.storage.session.get(["isFirstMetaMaskControllerSetup"]);n=(null==t?void 0:t.isFirstMetaMaskControllerSetup)===undefined,await l.default.storage.session.set({isFirstMetaMaskControllerSetup:n})}de(t,r,{},n,e.meta),w.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v3.0.3/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const o=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new ae)),J),await o}catch(e){e instanceof ae?console.warn("Phishing warning page timeout; page not guaranteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),await re(),a.default.info("MetaMask initialization complete."),ee()}catch(e){te(e)}}l.default.runtime.onConnect.addListener((async(...e)=>{await Z,ne(...e)})),l.default.runtime.onConnectExternal.addListener((async(...e)=>{await Z,oe(...e)}));class ae extends Error{constructor(){super("Timeout failed")}}async function le(){const e=new f.default({migrations:b.default});if(e.on("error",console.warn),Q=await U.get()||e.generateInitialState(D),Q&&!Q.data&&(Q=e.generateInitialState(D),F.captureMessage("MetaMask - Empty vault found - unable to recover")),e.on("error",(e=>{const t=(0,E.default)(Q);F.captureException(e,{extra:{vaultStructure:t}})})),Q=await e.migrateData(Q),!Q)throw new Error("MetaMask - migrator returned undefined");if(!(0,d.isObject)(Q.meta))throw new Error(`MetaMask - migrator metadata has invalid type '${typeof Q.meta}'`);if("number"!=typeof Q.meta.version)throw new Error(`MetaMask - migrator metadata version has invalid type '${typeof Q.meta.version}'`);if(!(0,d.isObject)(Q.data))throw new Error(`MetaMask - migrator data has invalid type '${typeof Q.data}'`);return U.setMetadata(Q.meta),U.set(Q.data),Q}function ce(e,t,r){if(!(0,d.hasProperty)(t.permissions,"eth_accounts"))return;const n=Object.keys(r.store.getState().identities).length,o=t.permissions.eth_accounts.caveats;if(o){const t=o[0].value.length;W.metaMetricsController.trackEvent({event:C.MetaMetricsEventName.DappViewed,category:C.MetaMetricsEventCategory.InpageProvider,referrer:{url:e},properties:{is_first_visit:!1,number_of_accounts:n,number_of_accounts_connected:t}})}}function de(e,t,r,n,d){var m;W=new M.default({infuraProjectId:"b6bf7d3508c941499b10025c0776eaf8",showUserConfirmation:he,initState:e,initLangCode:t,platform:j,notificationManager:q,browser:l.default,getRequestAccountTabIds:()=>V,getOpenMetamaskTabsIds:()=>H,localStore:U,overrides:r,isFirstMetaMaskControllerSetup:n,currentMigrationVersion:d.version,featureFlags:{}}),(0,R.default)({getCurrentChainId:()=>W.networkController.state.providerConfig.chainId,getIpfsGateway:W.preferencesController.getIpfsGateway.bind(W.preferencesController),getUseAddressBarEnsResolution:()=>W.preferencesController.store.getState().useAddressBarEnsResolution,provider:W.provider}),(0,s.default)((0,c.storeAsStream)(W.store),(0,i.default)(1e3),(0,A.default)((async e=>{await U.set(e),X.emit("state-persisted",e)})),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)})),m=W,global.stateHooks.getSentryAppState=function(){const e=m.memStore.getState();return(0,k.maskObject)(e,S.SENTRY_BACKGROUND_STATE)};const b=()=>K||Boolean(Object.keys(H).length)||$,f=(e,t)=>{if(!1===e)W.onClientClosed();else{if(t===g.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(H).length))return;W.onEnvironmentTypeClosed(t)}};function y(){let e="";const t=v();t&&(e=String(t)),w.isManifestV3?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function v(){let e=W.appStateController.waitingForUnlock.length;return W.preferencesController.getUseRequestQueue()?e+=W.queuedRequestController.length():e+=W.approvalController.getTotalApprovalCount(),e}ne=async e=>{var t;const n=e.name;if(B.includes(e.name))return;let s=!1;const i=(0,I.getPlatform)(),a=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(s=i===g.PLATFORM_FIREFOX?x[n]:(null==a?void 0:a.origin)===`chrome-extension://${l.default.runtime.id}`,s){var c;const t=(null==r||null===(c=r.getPortStream)||void 0===c?void 0:c.call(r,e))||new u.default(e);if(W.isClientOpen=!0,W.setupTrustedCommunication(t,e.sender),n===g.ENVIRONMENT_TYPE_POPUP&&(K=!0,(0,o.default)(t,(()=>{K=!1;const e=b();W.isClientOpen=e,f(e,g.ENVIRONMENT_TYPE_POPUP)}))),n===g.ENVIRONMENT_TYPE_NOTIFICATION&&($=!0,(0,o.default)(t,(()=>{$=!1;const e=b();W.isClientOpen=e,f(e,g.ENVIRONMENT_TYPE_NOTIFICATION)}))),n===g.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;H[r]=!0,(0,o.default)(t,(()=>{delete H[r];const e=b();W.isClientOpen=e,f(e,g.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(a&&a.origin===Y.origin&&a.pathname===Y.pathname){var d;const t=(null==r||null===(d=r.getPortStream)||void 0===d?void 0:d.call(r,e))||new u.default(e);W.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;Object.keys(z).includes(t)||(z[t]=n);const o=W.permissionController.state.subjects[n],s=o!==undefined,i="New Tab"!==e.sender.tab.title;s&&i&&ce(n,o,W.preferencesController),e.onMessage.addListener((e=>{e.data&&e.data.method===g.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS&&(V[n]=t)}))}oe(e)}},oe=e=>{var t;const n=(null==r||null===(t=r.getPortStream)||void 0===t?void 0:t.call(r,e))||new u.default(e);W.setupUntrustedCommunication({connectionStream:n,sender:e.sender})},null!=r&&r.registerConnectListeners&&r.registerConnectListeners(ne,oe),y(),W.decryptMessageController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),W.encryptionPublicKeyController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),W.signatureController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),W.appStateController.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),W.controllerMessenger.subscribe(M.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,y),W.txController.initApprovals(),W.controllerMessenger.subscribe("QueuedRequestController:countChanged",(e=>{y(),e>0&&he()})),q.on(T.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{W.preferencesController.getUseRequestQueue()||(e?v()>0&&he():(W.signatureController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE_SIG),W.decryptMessageController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE),W.encryptionPublicKeyController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE),Object.values(W.approvalController.state.pendingApprovals).forEach((({id:e,type:t})=>{switch(t){case h.ApprovalType.SnapDialogAlert:case h.ApprovalType.SnapDialogPrompt:W.approvalController.accept(e,null);break;case h.ApprovalType.SnapDialogConfirmation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect:W.approvalController.accept(e,!1);break;default:W.approvalController.reject(e,p.ethErrors.provider.userRejectedRequest())}}))),y())})),Object.keys(W.snapController.state.snaps).length>0&&W.snapController.updateBlockedSnaps()}async function he(){const e=await j.getActiveTabs(),t=Boolean(e.find((e=>H[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!G&&(r||!K)&&!t){G=!0;try{const e=W.appStateController.getCurrentPopupId();await q.showPopup((e=>W.appStateController.setCurrentPopupId(e)),e)}finally{G=!1}}}const ue=()=>{if(W)return W.metaMetricsController.updateTraits({[C.MetaMetricsUserTrait.InstallDateExt]:(new Date).toISOString().split("T")[0]}),void W.metaMetricsController.addEventBeforeMetricsOptIn({category:C.MetaMetricsEventCategory.App,event:C.MetaMetricsEventName.AppInstalled,properties:{}});setTimeout((()=>{ue()}),1e3)};async function pe(){Boolean(await U.get())||(ue(),j.openExtensionInBrowser()),l.default.tabs.onActivated.addListener((e=>{if(W){const{tabId:t}=e,r=z[t];if(r){const e=W.permissionController.state.subjects[r];e!==undefined&&ce(r,e,W.preferencesController)}}}))}(async function(){await pe(),ie().catch(a.default.error)})()}}},{package:"$root$",file:"app/scripts/background.js"}]],[4],{});