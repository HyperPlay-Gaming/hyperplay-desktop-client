LavaPack.loadBundle([[10,{"../../../shared/constants/network":5264,"../constants/contracts":5,"../lib/util":135,"@ethersproject/contracts":523,"@ethersproject/providers":561,"@metamask/base-controller":1396,"@metamask/eth-query":1640,"@metamask/utils":2761,lodash:4380,loglevel:4386,pify:4517,"single-call-balance-checker-abi":5094,uuid:5175},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAccountTrackerControllerState=n.default=void 0;var r=f(e("@metamask/eth-query")),s=e("uuid"),o=f(e("loglevel")),a=f(e("pify")),i=e("@ethersproject/providers"),l=e("@ethersproject/contracts"),c=f(e("single-call-balance-checker-abi")),d=e("lodash"),u=e("@metamask/utils"),h=e("@metamask/base-controller"),p=e("../../../shared/constants/network"),m=e("../constants/contracts"),g=e("../lib/util");function f(e){return e&&e.__esModule?e:{default:e}}function C(e,t,n){y(e,t),t.set(e,n)}function y(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function w(e,t){return e.get(b(e,t))}function v(e,t,n){return e.set(b(e,t),n),n}function b(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const k={accounts:{persist:!0,anonymous:!1},currentBlockGasLimit:{persist:!0,anonymous:!0},accountsByChainId:{persist:!0,anonymous:!1},currentBlockGasLimitByChainId:{persist:!0,anonymous:!0}},S=()=>({accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{}});n.getDefaultAccountTrackerControllerState=S;var A=new WeakMap,T=new WeakMap,E=new WeakMap,M=new WeakMap,P=new WeakMap,_=new WeakMap,I=new WeakMap,N=new WeakSet,R=new WeakMap;class O extends h.BaseController{constructor(e){var t,n;super({name:"AccountTrackerController",metadata:k,state:{accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{},...e.state},messenger:e.messenger}),y(t=this,n=N),n.add(t),C(this,A,new Map),C(this,T,{}),C(this,E,void 0),C(this,M,void 0),C(this,P,{}),C(this,_,void 0),C(this,I,void 0),C(this,R,(async e=>{await b(N,this,F).call(this,undefined,e)})),v(E,this,e.provider),v(M,this,e.blockTracker),v(_,this,e.getNetworkIdentifier),this.messagingSystem.subscribe("KeyringController:accountRemoved",(e=>this.removeAccounts([e])));const r=this.messagingSystem.call("OnboardingController:getState");this.messagingSystem.subscribe("OnboardingController:stateChange",(0,g.previousValueComparator)(((e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r}=t;return!n&&r&&this.updateAccountsAllActiveNetworks(),!0}),r)),v(I,this,this.messagingSystem.call("AccountsController:getSelectedAccount")),this.messagingSystem.subscribe("AccountsController:selectedEvmAccountChange",(e=>{const{useMultiAccountBalanceChecker:t}=this.messagingSystem.call("PreferencesController:getState");w(I,this).id===e.id||t||(v(I,this,e),this.updateAccountsAllActiveNetworks())}))}resetState(){const{accounts:e,accountsByChainId:t,currentBlockGasLimit:n,currentBlockGasLimitByChainId:r}={accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{}};this.update((s=>{s.accounts=e,s.accountsByChainId=t,s.currentBlockGasLimit=n,s.currentBlockGasLimitByChainId=r}))}start(){v(P,this,{[b(N,this,x).call(this)]:w(M,this).getCurrentBlock()}),w(M,this).once("latest",(e=>{w(P,this)[b(N,this,x).call(this)]=e})),w(M,this).removeListener("latest",w(R,this)),w(M,this).addListener("latest",w(R,this)),this.updateAccounts()}stop(){w(M,this).removeListener("latest",w(R,this))}startPollingByNetworkClientId(e){const t=(0,s.v4)(),n=w(A,this).get(e);if(n)n.add(t);else{const n=new Set;n.add(t),w(A,this).set(e,n),b(N,this,j).call(this,e)}return t}stopAllPolling(){this.stop(),w(A,this).forEach(((e,t)=>{e.forEach((e=>{this.stopPollingByPollingToken(e)}))}))}stopPollingByPollingToken(e){if(!e)throw new Error("pollingToken required");let t=!1;if(w(A,this).forEach(((n,r)=>{n.has(e)&&(t=!0,n.delete(e),0===n.size&&(w(A,this).delete(r),b(N,this,D).call(this,r)))})),!t)throw new Error("pollingToken not found")}syncWithAddresses(e){const{accounts:t}=this.state,n=Object.keys(t),r=[];e.forEach((e=>{n.includes(e)||r.push(e)}));const s=[];n.forEach((t=>{e.includes(t)||s.push(t)})),this.addAccounts(r),this.removeAccounts(s)}addAccounts(e){const{accounts:t,accountsByChainId:n}=this.state,r=(0,d.cloneDeep)(t),s=(0,d.cloneDeep)(n);e.forEach((e=>{r[e]={}})),Object.keys(s).forEach((t=>{e.forEach((e=>{s[t][e]={}}))})),this.update((e=>{e.accounts=r,e.accountsByChainId=s})),w(P,this)[b(N,this,x).call(this)]&&this.updateAccounts(),w(A,this).forEach(((e,t)=>{const{chainId:n}=b(N,this,B).call(this,t);w(P,this)[n]&&this.updateAccounts(t)}))}removeAccounts(e){const{accounts:t,accountsByChainId:n}=this.state,r=(0,d.cloneDeep)(t),s=(0,d.cloneDeep)(n);e.forEach((e=>{delete r[e]})),Object.keys(s).forEach((t=>{e.forEach((e=>{delete s[t][e]}))})),this.update((e=>{e.accounts=r,e.accountsByChainId=s}))}clearAccounts(){this.update((e=>{e.accounts={},e.accountsByChainId={[b(N,this,x).call(this)]:{}}}))}async updateAccountsAllActiveNetworks(){await this.updateAccounts(),await Promise.all(Array.from(w(A,this)).map((([e])=>this.updateAccounts(e))))}async updateAccounts(e){const{completedOnboarding:t}=this.messagingSystem.call("OnboardingController:getState");if(!t)return;const{chainId:n,provider:r,identifier:s}=b(N,this,B).call(this,e),{useMultiAccountBalanceChecker:o}=this.messagingSystem.call("PreferencesController:getState");let a=[];if(o){const{accounts:e}=this.state;a=Object.keys(e)}else{a=[this.messagingSystem.call("AccountsController:getSelectedAccount").address]}s!==p.LOCALHOST_RPC_URL&&"http://127.0.0.1:8545"!==s&&n in m.SINGLE_CALL_BALANCES_ADDRESSES?await b(N,this,$).call(this,a,m.SINGLE_CALL_BALANCES_ADDRESSES[n],r,n):await Promise.all(a.map((e=>b(N,this,L).call(this,e,r,n))))}}function x(){const{selectedNetworkClientId:e}=this.messagingSystem.call("NetworkController:getState"),{configuration:{chainId:t}}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);return t}function B(e){if(e){const{configuration:t,provider:n,blockTracker:r}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);return{chainId:t.chainId,provider:n,blockTracker:r,identifier:w(_,this).call(this,t)}}return{chainId:b(N,this,x).call(this),provider:w(E,this),blockTracker:w(M,this),identifier:w(_,this).call(this)}}function j(e){if(w(T,this)[e])return;const{blockTracker:t}=b(N,this,B).call(this,e),n=t=>b(N,this,F).call(this,e,t);t.addListener("latest",n),w(T,this)[e]=n,this.updateAccounts(e)}function D(e){if(!w(T,this)[e])return;const{blockTracker:t}=b(N,this,B).call(this,e);t.removeListener("latest",w(T,this)[e]),delete w(T,this)[e]}function U(e){const{accounts:t,accountsByChainId:n}=this.state;if(n[e])return(0,d.cloneDeep)(n[e]);const r={};return Object.keys(t).forEach((e=>{r[e]={}})),r}async function F(e,t){const{chainId:n,provider:s}=b(N,this,B).call(this,e);w(P,this)[n]=t;const i=await(0,a.default)(new r.default(s)).getBlockByNumber(t,!1);if(!i)return;const l=i.gasLimit;this.update((e=>{n===b(N,this,x).call(this)&&(e.currentBlockGasLimit=l),e.currentBlockGasLimitByChainId[n]=l}));try{await this.updateAccounts(e)}catch(e){o.default.error(e)}}async function L(e,t,n){const{useMultiAccountBalanceChecker:s}=this.messagingSystem.call("PreferencesController:getState");let o="0x0";try{o=await(0,a.default)(new r.default(t)).getBalance(e)}catch(e){if(e&&"object"==typeof e&&(0,u.hasProperty)(e,"data")&&e.data&&(0,u.hasProperty)(e.data,"request")&&e.data.request&&(0,u.hasProperty)(e.data.request,"method")&&"eth_getBalance"!==e.data.request.method)throw e}const i={address:e,balance:o},l=b(N,this,U).call(this,n);if(!l[e])return;let c=l;s||(c={},Object.keys(l).forEach((t=>{e!==t&&(c[t]={address:t,balance:null})}))),c[e]=i,this.update((e=>{n===b(N,this,x).call(this)&&(e.accounts=c),e.accountsByChainId[n]=c}))}async function $(e,t,n,r){const s=await new l.Contract(t,c.default,new i.Web3Provider(n)),a=["0x0000000000000000000000000000000000000000"];try{const t=await s.balances(e,a),n=b(N,this,U).call(this,r),o={};Object.keys(n).forEach((t=>{e.includes(t)||(o[t]={address:t,balance:null})})),e.forEach(((e,n)=>{const r=t[n]?t[n].toHexString():"0x0";o[e]={address:e,balance:r}})),this.update((e=>{r===b(N,this,x).call(this)&&(e.accounts=o),e.accountsByChainId[r]=o}))}catch(t){o.default.warn("MetaMask - Account Tracker single call balance fetch failed",t),Promise.allSettled(e.map((e=>b(N,this,L).call(this,e,n,r))))}}n.default=O}}},{package:"$root$",file:"app/scripts/controllers/account-tracker-controller.ts"}],[100,{"../../../../../shared/constants/app":5248,"./ethereum-chain-utils":102,"@metamask/controller-utils":1422,"@metamask/network-controller":1990,"@metamask/rpc-errors":2304,lodash:4380,"uri-js":5150},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&{}.hasOwnProperty.call(e,o)){var a=s?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(e("uri-js")),s=e("@metamask/controller-utils"),o=e("@metamask/network-controller"),a=e("@metamask/rpc-errors"),i=e("lodash"),l=e("../../../../../shared/constants/app"),c=e("./ethereum-chain-utils");function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}const u={methodNames:[l.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],implementation:async function(e,t,n,l,{addNetwork:d,updateNetwork:u,getNetworkConfigurationByChainId:h,setActiveNetwork:p,requestUserApproval:m,startApprovalFlow:g,endApprovalFlow:f,getCurrentChainIdForDomain:C,getCaveat:y,requestPermittedChainsPermission:w,grantPermittedChainsPermissionIncremental:v}){let b;try{b=(0,c.validateAddEthereumChainParams)(e.params[0],l)}catch(e){return l(e)}const{chainId:k,chainName:S,firstValidBlockExplorerUrl:A,firstValidRPCUrl:T,ticker:E}=b,{origin:M}=e,P=C(M),_=h(k);if(_&&_.chainId===k&&_.nativeCurrency!==E)return l(a.rpcErrors.invalidParams({message:`nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${E}`}));let I,N=_,R=null==_?void 0:_.rpcEndpoints.findIndex((({url:e})=>r.equal(e,T))),O=A?null==_?void 0:_.blockExplorerUrls.findIndex((e=>r.equal(e,A))):undefined;if(!_||R!==_.defaultRpcEndpointIndex||A&&O!==_.defaultBlockExplorerUrlIndex){({id:I}=await g());try{if(await m({origin:M,type:s.ApprovalType.AddEthereumChain,requestData:{chainId:k,rpcPrefs:{blockExplorerUrl:A},chainName:S,rpcUrl:T,ticker:E}}),_){const e=(0,i.cloneDeep)(_);-1===R&&(e.rpcEndpoints=[...e.rpcEndpoints,{url:T,type:o.RpcEndpointType.Custom,name:S}],R=e.rpcEndpoints.length-1),e.defaultRpcEndpointIndex=R,A&&(-1===O&&(e.blockExplorerUrls=[...e.blockExplorerUrls,A],O=e.blockExplorerUrls.length-1),e.defaultBlockExplorerUrlIndex=O),N=await u(e.chainId,e,P===k?{replacementSelectedRpcEndpointIndex:e.defaultRpcEndpointIndex}:undefined)}else N=await d({blockExplorerUrls:A?[A]:[],defaultBlockExplorerUrlIndex:A?0:undefined,chainId:k,defaultRpcEndpointIndex:0,name:S,nativeCurrency:E,rpcEndpoints:[{url:T,name:S,type:o.RpcEndpointType.Custom}]})}catch(e){return f({id:I}),l(e)}}if(k!==P){const{networkClientId:e}=N.rpcEndpoints[N.defaultRpcEndpointIndex];return(0,c.switchChain)(t,l,k,e,I,{isAddFlow:!0,setActiveNetwork:p,endApprovalFlow:f,getCaveat:y,requestPermittedChainsPermission:w,grantPermittedChainsPermissionIncremental:v})}I&&f({id:I});return t.result=null,l()},hookNames:{addNetwork:!0,updateNetwork:!0,getNetworkConfigurationByChainId:!0,setActiveNetwork:!0,requestUserApproval:!0,startApprovalFlow:!0,endApprovalFlow:!0,getCurrentChainIdForDomain:!0,getCaveat:!0,requestPermittedChainsPermission:!0,grantPermittedChainsPermissionIncremental:!0}};n.default=u}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/add-ethereum-chain.js"}],[101,{"../../../../../shared/constants/app":5248},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.ETH_ACCOUNTS],implementation:async function(e,t,n,r,{getAccounts:s}){return t.result=await s(),r()},hookNames:{getAccounts:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/eth-accounts.ts"}],[102,{"../../../../../shared/constants/app":5248,"../../../../../shared/constants/permissions":5268,"../../../../../shared/modules/network.utils":5311,"../../../controllers/permissions":30,"../../util":135,"@metamask/rpc-errors":2304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.switchChain=async function(e,t,n,s,a,{isAddFlow:l,setActiveNetwork:c,endApprovalFlow:d,getCaveat:u,requestPermittedChainsPermission:h,grantPermittedChainsPermissionIncremental:p}){try{const{value:t}=u({target:i.PermissionNames.permittedChains,caveatType:o.CaveatTypes.restrictNetworkSwitching})??{};t!==undefined&&t.includes(n)||(l?await p([n]):await h([n])),await c(s),e.result=null}catch(n){return n.code===r.errorCodes.provider.userRejectedRequest&&a?(e.result=null,t()):t(n)}finally{a&&d({id:a})}return t()},n.validateAddEthereumChainParams=function(e,t){if(!e||"object"!=typeof e)throw r.rpcErrors.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e)}`});const{chainId:n,chainName:s,blockExplorerUrls:o,nativeCurrency:i,rpcUrls:d,...u}=e,h=Object.keys(u).filter((e=>!["iconUrls"].includes(e)));if(h.length>0)throw r.rpcErrors.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${h}`});const p=c(n);if(!d||!Array.isArray(d)||0===d.length)throw r.rpcErrors.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${d}`});const m=e=>{const t=(0,l.getValidUrl)(e);return null!==t&&("localhost"===t.hostname||"127.0.0.1"===t.hostname||"https:"===t.protocol)},g=d.find((e=>m(e))),f=Array.isArray(o)?o.find((e=>m(e))):null;if(!g)throw r.rpcErrors.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${d}`});if("string"!=typeof s||!s)throw r.rpcErrors.invalidParams({message:`Expected non-empty string 'chainName'. Received:\n${s}`});const C=s.length>100?s.substring(0,100):s;if(null!==i){if("object"!=typeof i||Array.isArray(i))throw r.rpcErrors.invalidParams({message:`Expected null or object 'nativeCurrency'. Received:\n${i}`});if(18!==i.decimals)throw r.rpcErrors.invalidParams({message:`Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${i.decimals}`});if(!i.symbol||"string"!=typeof i.symbol)throw r.rpcErrors.invalidParams({message:`Expected a string 'nativeCurrency.symbol'. Received: ${i.symbol}`})}const y=(null==i?void 0:i.symbol)||a.UNKNOWN_TICKER_SYMBOL;if(y!==a.UNKNOWN_TICKER_SYMBOL&&("string"!=typeof y||y.length<1||y.length>6))throw r.rpcErrors.invalidParams({message:`Expected 1-6 character string 'nativeCurrency.symbol'. Received:\n${y}`});return{chainId:p,chainName:C,firstValidBlockExplorerUrl:f,firstValidRPCUrl:g,ticker:y}},n.validateChainId=c,n.validateSwitchEthereumChainParams=function(e,t){var n;if(null===(n=e.params)||void 0===n||!n[0]||"object"!=typeof e.params[0])throw r.rpcErrors.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`});const{chainId:s,...o}=e.params[0];if(Object.keys(o).length>0)throw r.rpcErrors.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${Object.keys(o)}`});return c(s)};var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/modules/network.utils"),o=e("../../../../../shared/constants/permissions"),a=e("../../../../../shared/constants/app"),i=e("../../../controllers/permissions"),l=e("../../util");function c(e){const t="string"==typeof e&&e.toLowerCase();if(!(0,s.isPrefixedFormattedHexString)(t))throw r.rpcErrors.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${e}`});if(!(0,s.isSafeChainId)(parseInt(t,16)))throw r.rpcErrors.invalidParams({message:`Invalid chain ID "${t}": numerical value greater than max safe value. Received:\n${e}`});return t}}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/ethereum-chain-utils.js"}],[103,{"../../../../../shared/constants/app":5248},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.GET_PROVIDER_STATE],implementation:async function(e,t,n,r,{getProviderState:s}){return t.result={...await s(e.origin)},r()},hookNames:{getProviderState:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/get-provider-state.ts"}],[104,{"./add-ethereum-chain":100,"./eth-accounts":101,"./get-provider-state":103,"./log-web3-shim-usage":105,"./request-accounts":106,"./send-metadata":107,"./switch-ethereum-chain":108,"./watch-asset":109},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.legacyHandlers=n.handlers=void 0;var r=u(e("./add-ethereum-chain")),s=u(e("./eth-accounts")),o=u(e("./get-provider-state")),a=u(e("./log-web3-shim-usage")),i=u(e("./request-accounts")),l=u(e("./send-metadata")),c=u(e("./switch-ethereum-chain")),d=u(e("./watch-asset"));function u(e){return e&&e.__esModule?e:{default:e}}n.handlers=[r.default,o.default,a.default,i.default,l.default,c.default,d.default],n.legacyHandlers=[s.default]}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/index.ts"}],[105,{"../../../../../shared/constants/app":5248},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],implementation:function(e,t,n,r,{getWeb3ShimUsageState:s,setWeb3ShimUsageRecorded:o}){const{origin:a}=e;s(a)===undefined&&o(a);return t.result=!0,r()},hookNames:{getWeb3ShimUsageState:!0,setWeb3ShimUsageRecorded:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/log-web3-shim-usage.ts"}],[106,{"../../../../../shared/constants/app":5248,"../../../../../shared/constants/metametrics":5260,"../../util":135,"@metamask/rpc-errors":2304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/constants/app"),o=e("../../../../../shared/constants/metametrics"),a=e("../../util");const i={methodNames:[s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],implementation:async function(e,t,n,i,{origin:c,getAccounts:d,getUnlockPromise:u,hasPermission:h,requestAccountsPermission:p,sendMetrics:m,getPermissionsForOrigin:g,metamaskState:f}){if(l.has(c))return t.error=r.rpcErrors.resourceUnavailable(`Already processing ${s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`),i();if(h(s.MESSAGE_TYPE.ETH_ACCOUNTS)){try{l.add(c),await u(!0),t.result=await d(),i()}catch(e){i(e)}finally{l.delete(c)}return undefined}try{await p()}catch(e){return t.error=e,i()}const C=await d();if(C.length>0){t.result=C;const e=g(c).eth_accounts.caveats[0].value.length,n=!Object.keys(f.permissionHistory).includes(c);(0,a.shouldEmitDappViewedEvent)(f.metaMetricsId)&&m({event:o.MetaMetricsEventName.DappViewed,category:o.MetaMetricsEventCategory.InpageProvider,referrer:{url:c},properties:{is_first_visit:n,number_of_accounts:Object.keys(f.accounts).length,number_of_accounts_connected:e}})}else t.error=r.rpcErrors.internal("Accounts unexpectedly unavailable. Please report this bug.");return i()},hookNames:{origin:!0,getAccounts:!0,getUnlockPromise:!0,hasPermission:!0,requestAccountsPermission:!0,sendMetrics:!0,getPermissionsForOrigin:!0,metamaskState:!0}};n.default=i;const l=new Set}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/request-accounts.js"}],[107,{"../../../../../shared/constants/app":5248,"@metamask/rpc-errors":2304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors");const s={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.SEND_METADATA],implementation:function(e,t,n,s,{addSubjectMetadata:o,subjectType:a}){const{origin:i,params:l}=e;if(!l||"object"!=typeof l||Array.isArray(l))return s(r.rpcErrors.invalidParams({data:l}));{const{icon:e=null,name:t=null,...n}=l;o({...n,iconUrl:e,name:t,subjectType:a,origin:i})}return t.result=!0,s()},hookNames:{addSubjectMetadata:!0,subjectType:!0}};n.default=s}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/send-metadata.js"}],[108,{"../../../../../shared/constants/app":5248,"./ethereum-chain-utils":102,"@metamask/rpc-errors":2304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/constants/app"),o=e("./ethereum-chain-utils");const a={methodNames:[s.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],implementation:async function(e,t,n,a,{getNetworkConfigurationByChainId:i,setActiveNetwork:l,requestPermittedChainsPermission:c,getCaveat:d,getCurrentChainIdForDomain:u,grantPermittedChainsPermissionIncremental:h}){let p;try{p=(0,o.validateSwitchEthereumChainParams)(e,a)}catch(e){return a(e)}const{origin:m}=e;if(u(m)===p)return t.result=null,a();const g=i(p),f=null==g?void 0:g.rpcEndpoints[g.defaultRpcEndpointIndex].networkClientId;if(!f)return a(r.providerErrors.custom({code:4902,message:`Unrecognized chain ID "${p}". Try adding the chain using ${s.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`}));return(0,o.switchChain)(t,a,p,f,null,{setActiveNetwork:l,getCaveat:d,requestPermittedChainsPermission:c,grantPermittedChainsPermissionIncremental:h})},hookNames:{getNetworkConfigurationByChainId:!0,setActiveNetwork:!0,getCaveat:!0,requestPermittedChainsPermission:!0,getCurrentChainIdForDomain:!0,grantPermittedChainsPermissionIncremental:!0}};n.default=a}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/switch-ethereum-chain.js"}],[109,{"../../../../../shared/constants/app":5248,"@metamask/controller-utils":1422,"@metamask/rpc-errors":2304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/controller-utils"),s=e("@metamask/rpc-errors"),o=e("../../../../../shared/constants/app");const a={methodNames:[o.MESSAGE_TYPE.WATCH_ASSET,o.MESSAGE_TYPE.WATCH_ASSET_LEGACY],implementation:async function(e,t,n,o,{handleWatchAssetRequest:a}){try{const{params:{options:n,type:i},origin:l,networkClientId:c}=e,{tokenId:d}=n;return[r.ERC721,r.ERC1155].includes(i)&&d!==undefined&&"string"!=typeof d?o(s.rpcErrors.invalidParams({message:`Expected parameter 'tokenId' to be type 'string'. Received type '${typeof d}'`})):(await a({asset:n,type:i,origin:l,networkClientId:c}),t.result=!0,o())}catch(e){return o(e)}},hookNames:{handleWatchAssetRequest:!0}};n.default=a}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/watch-asset.js"}],[11,{"../../../shared/constants/alerts":5246,"@metamask/base-controller":1396},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAlertControllerState=n.AlertController=void 0;var r=e("@metamask/base-controller"),s=e("../../../shared/constants/alerts");function o(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function a(e,t,n){return e.set(i(e,t),n),n}function i(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const l=()=>({alertEnabledness:s.TOGGLEABLE_ALERT_TYPES.reduce(((e,t)=>(e[t]=!0,e)),{}),unconnectedAccountAlertShownOrigins:{},web3ShimUsageOrigins:{}});n.getDefaultAlertControllerState=l;const c={alertEnabledness:{persist:!0,anonymous:!0},unconnectedAccountAlertShownOrigins:{persist:!0,anonymous:!1},web3ShimUsageOrigins:{persist:!0,anonymous:!1}};var d=new WeakMap,u=new WeakSet;class h extends r.BaseController{constructor(e){var t,n;super({messenger:e.messenger,metadata:c,name:"AlertController",state:{...l(),...e.state}}),o(t=this,n=u),n.add(t),function(e,t,n){o(e,t),t.set(e,n)}(this,d,void 0),a(d,this,this.messagingSystem.call("AccountsController:getSelectedAccount").address),this.messagingSystem.subscribe("AccountsController:selectedAccountChange",(e=>{this.state.unconnectedAccountAlertShownOrigins&&function(e,t){return e.get(i(e,t))}(d,this)!==e.address&&(a(d,this,e.address),this.update((e=>{e.unconnectedAccountAlertShownOrigins={}})))}))}setAlertEnabledness(e,t){this.update((n=>{n.alertEnabledness[e]=t}))}setUnconnectedAccountAlertShown(e){this.update((t=>{t.unconnectedAccountAlertShownOrigins[e]=!0}))}getWeb3ShimUsageState(e){var t;return null===(t=this.state.web3ShimUsageOrigins)||void 0===t?void 0:t[e]}setWeb3ShimUsageRecorded(e){i(u,this,p).call(this,e,s.Web3ShimUsageAlertStates.recorded)}setWeb3ShimUsageAlertDismissed(e){i(u,this,p).call(this,e,s.Web3ShimUsageAlertStates.dismissed)}}function p(e,t){this.update((n=>{n.web3ShimUsageOrigins&&(n.web3ShimUsageOrigins[e]=t)}))}n.AlertController=h}}},{package:"$root$",file:"app/scripts/controllers/alert-controller.ts"}],[110,{"./createMethodMiddleware":98,"./createUnsupportedMethodMiddleware":99},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./createMethodMiddleware");Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in n&&n[e]===r[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return r[e]}}))}));var s=e("./createUnsupportedMethodMiddleware");Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in n&&n[e]===s[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return s[e]}}))}))}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/index.js"}],[111,{"../util":135,"@segment/loosely-validate-event":2832,buffer:3561,"is-retry-allowed":4214,lodash:4380,"remove-trailing-slash":4800,timers:5116},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t,r){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=c(e("remove-trailing-slash")),o=c(e("@segment/loosely-validate-event")),a=e("lodash"),i=c(e("is-retry-allowed")),l=e("../util");function c(e){return e&&e.__esModule?e:{default:e}}const d=()=>({});n.default=class{constructor(e,t={}){this.writeKey=e,this.host=(0,s.default)(t.host||"https://api.segment.io"),this.flushInterval=t.flushInterval||1e4,this.flushAt=t.flushAt||Math.max(t.flushAt,1)||20,this.queue=[],this.path="/v1/batch",this.maxQueueSize=460800,this.flushed=!1,this.retryCount=3,Object.defineProperty(this,"enable",{configurable:!1,writable:!1,enumerable:!0,value:!0})}_validate(e,t){(0,o.default)(e,t)}_message(e,t,n){return this._validate(t,e),this.enqueue(e,t,n),this}identify(e,t){return this._message("identify",e,t)}track(e,t){return this._message("track",e,t)}page(e,t){return this._message("page",e,t)}enqueue(e,t,n=d){if(!this.enable)return void r(n);const s={...t,type:e};if(s.context={...s.context,library:{name:"analytics-node"}},s.timestamp||(s.timestamp=new Date),s.messageId||(s.messageId=(0,l.generateRandomId)()),s.anonymousId&&!(0,a.isString)(s.anonymousId)&&(s.anonymousId=JSON.stringify(s.anonymousId)),s.userId&&!(0,a.isString)(s.userId)&&(s.userId=JSON.stringify(s.userId)),this.queue.push({message:s,callback:n}),!this.flushed)return this.flushed=!0,void this.flush();const o=this.queue.length>=this.flushAt,i=this.queue.reduce(((e,t)=>e+JSON.stringify(t).length),0)>=this.maxQueueSize;(o||i)&&this.flush(),this.flushInterval&&!this.timer&&(this.timer=setTimeout(this.flush.bind(this),this.flushInterval))}flush(e=d){if(!this.enable)return r(e),Promise.resolve();if(this.timer&&(clearTimeout(this.timer),this.timer=null),!this.queue.length)return r(e),Promise.resolve();const n=this.queue.splice(0,this.flushAt),s=n.map((e=>e.callback)),o={batch:n.map((e=>e.message)),timestamp:new Date,sentAt:new Date},a={Authorization:`Basic ${t.from(this.writeKey,"utf8").toString("base64")}`};return this._sendRequest(`${this.host}${this.path}`,{method:"POST",body:JSON.stringify(o),headers:a},(t=>{r((()=>{s.forEach((e=>e(t,o))),e(t,o)}))}),0)}_retryRequest(e,t,n,r){const s=100*Math.pow(2,r);setTimeout((()=>{this._sendRequest(e,t,n,r+1)}),s)}async _sendRequest(e,t,n,r){return fetch(e,t).then((async s=>{if(s.ok)n();else if(this._isErrorRetryable({response:s})&&r<=this.retryCount)this._retryRequest(e,t,n,r);else{const e=new Error(s.statusText);n(e)}})).catch((s=>{this._isErrorRetryable(s)&&r<=this.retryCount?this._retryRequest(e,t,n,r):n(s)}))}_isErrorRetryable(e){return!!function(e){return!e.response&&Boolean(e.code)&&"ECONNABORTED"!==e.code&&(0,i.default)(e)}(e)||!!e.response&&(e.response.status>=500&&e.response.status<=599||429===e.response.status)}}}).call(this)}).call(this,e("buffer").Buffer,e("timers").setImmediate)}}},{package:"$root$",file:"app/scripts/lib/segment/analytics.js"}],[112,{"../../../../shared/constants/time":5276,"./analytics":111},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.segment=n.createSegmentMock=void 0;var r,s=e("../../../../shared/constants/time");(r=e("./analytics"))&&r.__esModule;s.SECOND;const o=(e=1)=>{const t={queue:[],flush(){t.queue.forEach((([e,t])=>{t()})),t.queue=[]},track(n,r=(()=>undefined)){t.queue.push([n,r]),t.queue.length>=e&&t.flush()},page(){},identify(){}};return t};n.createSegmentMock=o;n.segment=o(1)}}},{package:"$root$",file:"app/scripts/lib/segment/index.js"}],[116,{"../../../../shared/lib/trace":5291},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addPersonalMessage=async function({signatureParams:e,signatureController:t}){return s(e,t,"newUnsignedPersonalMessage")},n.addTypedMessage=async function({signatureParams:e,signatureController:t}){return s(e,t,"newUnsignedTypedMessage")};var r=e("../../../../shared/lib/trace");async function s(e,t,n){const[,s]=e,{id:o}=s,a=null==o?void 0:o.toString();(0,r.endTrace)({name:r.TraceName.Middleware,id:a});const i=await t[n](...e);return(0,r.endTrace)({name:r.TraceName.Signature,id:a}),i}}}},{package:"$root$",file:"app/scripts/lib/signature/util.ts"}],[117,{"./snap-keyring":120},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"getAccountsBySnapId",{enumerable:!0,get:function(){return r.getAccountsBySnapId}}),Object.defineProperty(n,"snapKeyringBuilder",{enumerable:!0,get:function(){return r.snapKeyringBuilder}});var r=e("./snap-keyring")}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/index.ts"}],[118,{"@metamask/keyring-api":1843,"@metamask/permission-controller":2133},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isProtocolAllowed=d,n.keyringSnapPermissionsBuilder=function(e,t){return()=>{if("metamask"===t)return a;if(o.includes(t))return l;const n=e.getSubjectMetadata(t);return(null==n?void 0:n.subjectType)===r.SubjectType.Website&&d(t)?i:[]}};var r=e("@metamask/permission-controller"),s=e("@metamask/keyring-api");const o=["https://portfolio.metamask.io"],a=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.FilterAccountChains,s.KeyringRpcMethod.DeleteAccount,s.KeyringRpcMethod.ListRequests,s.KeyringRpcMethod.GetRequest,s.KeyringRpcMethod.SubmitRequest,s.KeyringRpcMethod.RejectRequest],i=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.CreateAccount,s.KeyringRpcMethod.FilterAccountChains,s.KeyringRpcMethod.UpdateAccount,s.KeyringRpcMethod.DeleteAccount,s.KeyringRpcMethod.ExportAccount,s.KeyringRpcMethod.ListRequests,s.KeyringRpcMethod.GetRequest,s.KeyringRpcMethod.ApproveRequest,s.KeyringRpcMethod.RejectRequest],l=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.GetAccountBalances,s.KeyringRpcMethod.SubmitRequest],c=["https:"];function d(e){try{const t=new URL(e);return c.includes(t.protocol)}catch(e){return!1}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/keyring-snaps-permissions.ts"}],[119,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getSnapAndHardwareInfoForMetrics=async function(e,t,n){var r,s,o;if(!n)return{};const a=n.call("AccountsController:getSelectedAccount"),i=a.address,{keyring:l}=a.metadata;let c;var d;null!==(r=a.metadata.snap)&&void 0!==r&&r.id&&(c=n.call("SnapController:get",null===(d=a.metadata.snap)||void 0===d?void 0:d.id));return{account_type:await e(i),device_model:await t(i),account_hardware_type:await async function(){var e;return null!=l&&null!==(e=l.type)&&void 0!==e&&e.includes("Hardware")?l.type:undefined}(),account_snap_type:null===(s=c)||void 0===s?void 0:s.id,account_snap_version:null===(o=c)||void 0===o?void 0:o.version}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/metrics.ts"}],[12,{"@metamask/base-controller":1396},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAppMetadataControllerState=n.default=void 0;var r=e("@metamask/base-controller");function s(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function o(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const a=()=>({currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0});n.getDefaultAppMetadataControllerState=a;const i={currentAppVersion:{persist:!0,anonymous:!0},previousAppVersion:{persist:!0,anonymous:!0},previousMigrationVersion:{persist:!0,anonymous:!0},currentMigrationVersion:{persist:!0,anonymous:!0}};var l=new WeakSet;class c extends r.BaseController{constructor({state:e={},messenger:t,currentAppVersion:n="",currentMigrationVersion:r=0}){super({name:"AppMetadataController",metadata:i,state:{currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0,...e},messenger:t}),s(this,l),o(l,this,d).call(this,n),o(l,this,u).call(this,r)}}function d(e){const t=this.state.currentAppVersion;e!==t&&this.update((n=>{n.currentAppVersion=e,n.previousAppVersion=t}))}function u(e){const t=this.state.currentMigrationVersion;e!==t&&this.update((n=>{n.previousMigrationVersion=t,n.currentMigrationVersion=e}))}n.default=c}}},{package:"$root$",file:"app/scripts/controllers/app-metadata.ts"}],[120,{"../../../../shared/constants/app":5248,"../../../../shared/constants/metametrics":5260,"../../../../ui/components/component-library/icon":5805,"../../translate":294,"./utils/isBlockedUrl":121,"./utils/showResult":122,"@metamask/eth-snap-keyring":1695,"webextension-polyfill":5225},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getAccountsBySnapId=void 0,n.showAccountCreationDialog=h,n.showAccountNameSuggestionDialog=p,n.snapKeyringBuilder=void 0;var r,s=e("@metamask/eth-snap-keyring"),o=(r=e("webextension-polyfill"))&&r.__esModule?r:{default:r},a=e("../../../../shared/constants/metametrics"),i=e("../../../../shared/constants/app"),l=e("../../translate"),c=e("../../../../ui/components/component-library/icon"),d=e("./utils/isBlockedUrl"),u=e("./utils/showResult");async function h(e,t){try{return Boolean(await t.call("ApprovalController:addRequest",{origin:e,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation},!0))}catch(e){throw new Error(`Error occurred while showing account creation dialog.\n${e}`)}}async function p(e,t,n){try{return await t.call("ApprovalController:addRequest",{origin:e,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showNameSnapAccount,requestData:{snapSuggestedAccountName:n}},!0)}catch(e){throw new Error(`Error occurred while showing name account dialog.\n${e}`)}}n.getAccountsBySnapId=async(e,t)=>{const n=await e.getSnapKeyring();return await n.getAccountsBySnapId(t)};n.snapKeyringBuilder=(e,t,n,r,m,g,f)=>{const C=()=>new s.SnapKeyring(t(),{addressExists:async t=>(await e.call("KeyringController:getAccounts")).includes(t.toLowerCase()),redirectUser:async(t,n,r)=>{if(n.length>0||r.length>0){const s=await(0,d.isBlockedUrl)(n,(async()=>await e.call("PhishingController:maybeUpdateState")),(t=>e.call("PhishingController:testOrigin",t))),a=await e.call("ApprovalController:addRequest",{origin:t,requestData:{url:n,message:r,isBlockedUrl:s},type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect},!0);Boolean(a)&&n.length>0?o.default.tabs.create({url:n}):console.log("User refused snap account redirection to:",n)}else console.log("Error occurred when redirecting snap account. url or message must be defined")},saveState:async()=>{await n()},addAccount:async(t,r,s,o="",i=!1)=>{const d=g(r),{id:C}=e.call("ApprovalController:startFlow"),y=e=>{m({event:e,category:a.MetaMetricsEventCategory.Accounts,properties:{account_type:a.MetaMetricsEventAccountType.Snap,snap_id:r,snap_name:d}})};try{const m="https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-add-accounts-in-your-wallet/",g=f(r)&&!i,C=g||await h(r,e);if(!C)throw await s(C),new Error("User denied account creation");const w=await p(r,e,o);if(null==w||!w.success)throw await s(null==w?void 0:w.success),new Error("User denied account creation");try{await n(),await s(w.success);const o=e.call("AccountsController:getAccountByAddress",t);if(!o)throw new Error(`Internal account not found for address: ${t}`);e.call("AccountsController:setSelectedAccount",o.id),w.name&&e.call("AccountsController:setAccountName",o.id,w.name),g||(y(a.MetaMetricsEventName.AddSnapAccountSuccessViewed),await(0,u.showSuccess)(e,r,{icon:c.IconName.UserCircleAdd,title:(0,l.t)("snapAccountCreated")},{message:(0,l.t)("snapAccountCreatedDescription"),address:t,learnMoreLink:m}),y(a.MetaMetricsEventName.AddSnapAccountSuccessClicked)),y(a.MetaMetricsEventName.AccountAdded)}catch(t){const n=t.message;throw await(0,u.showError)(e,r,{icon:c.IconName.UserCircleAdd,title:(0,l.t)("snapAccountCreationFailed")},{message:(0,l.t)("snapAccountCreationFailedDescription",d),learnMoreLink:m,error:n}),new Error(`Error occurred while creating snap account: ${n}`)}}finally{e.call("ApprovalController:endFlow",{id:C})}},removeAccount:async(t,s,o)=>{const d=g(s),{id:h}=e.call("ApprovalController:startFlow"),p="https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-remove-an-account-from-your-metamask-wallet/",f=e=>{m({event:e,category:a.MetaMetricsEventCategory.Accounts,properties:{account_type:a.MetaMetricsEventAccountType.Snap,snap_id:s,snap_name:d}})};let C=!1;try{if(C=Boolean(await e.call("ApprovalController:addRequest",{origin:s,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval,requestData:{publicAddress:t}},!0)),!C)throw await o(C),new Error("User denied account removal");try{await r(t),await o(C),await n(),f(a.MetaMetricsEventName.RemoveSnapAccountSuccessViewed),await(0,u.showError)(e,s,{icon:c.IconName.UserCircleRemove,title:(0,l.t)("snapAccountRemoved")},{message:(0,l.t)("snapAccountRemovedDescription"),learnMoreLink:p}),f(a.MetaMetricsEventName.RemoveSnapAccountSuccessClicked)}catch(t){const n=t.message;throw await(0,u.showError)(e,s,{icon:c.IconName.UserCircleRemove,title:(0,l.t)("snapAccountRemovalFailed")},{message:(0,l.t)("snapAccountRemovalFailedDescription",d),learnMoreLink:p,error:n}),f(a.MetaMetricsEventName.AccountRemoveFailed),new Error(`Error occurred while removing snap account: ${n}`)}}finally{C&&f(a.MetaMetricsEventName.AccountRemoved),e.call("ApprovalController:endFlow",{id:h})}}});return C.type=s.SnapKeyring.type,C}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/snap-keyring.ts"}],[121,{"../keyring-snaps-permissions":118},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isBlockedUrl=void 0;var r=e("../keyring-snaps-permissions");n.isBlockedUrl=async(e,t,n)=>{try{return!(0,r.isProtocolAllowed)(e)||(await t(),n(e).result)}catch(e){return console.error("Invalid URL passed into snap-keyring:",e),!1}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/utils/isBlockedUrl.ts"}],[122,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.showSuccess=n.showError=void 0;const r=e=>({name:"SnapAuthorshipHeader",key:"snapHeader",properties:{snapId:e}});n.showError=(e,t,n,s)=>e.call("ApprovalController:showError",{header:[r(t)],title:n.title,icon:n.icon,error:{key:"snapAccountErrorMessage",name:"SnapAccountErrorMessage",properties:s}});n.showSuccess=(e,t,n,s)=>e.call("ApprovalController:showSuccess",{header:[r(t)],title:n.title,icon:n.icon,message:{key:"snapAccountSuccessMessage",name:"SnapAccountSuccessMessage",properties:s}})}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/utils/showResult.ts"}],[123,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.sanitizeUIState=function(e){const t={...e};for(const e of r)delete t[e];return function(e){const t=e.snaps;if(!t)return;e.snaps=Object.values(t).reduce(((e,t)=>(e[t.id]=function(e){const t={...e};return delete t.sourceCode,delete t.auxiliaryFiles,t}(t),e)),{})}(t),t};const r=["snapStates","unencryptedSnapStates","vault"]}}},{package:"$root$",file:"app/scripts/lib/state-utils.ts"}],[125,{"../../../../../shared/lib/four-byte":5284,"@ethersproject/abi":500,"@metamask/utils":2761,"ethereumjs-util":3796},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionDataWithFourByte=async function(e){const t=e.slice(0,10),n=await(0,a.getMethodFrom4Byte)(t);if(!n)return undefined;const o=n.split("(")[0],u=function(e){let t=e.slice(e.indexOf("(")+1,-1);const n=[];for(;t.includes("(");){const e=d(t);if(!e)break;n.push(e.value),t=`${t.slice(0,e.start)}${n.length-1}#${t.slice(e.end+1)}`}return c(t,n)}(n);i("Generated inputs",u);const h=(0,r.addHexPrefix)(e.slice(10)),p=s.Interface.getAbiCoder().decode(u,h),m=u.map(((e,t)=>l(e,t,p)));return{name:o,params:m}};var r=e("ethereumjs-util"),s=e("@ethersproject/abi"),o=e("@metamask/utils"),a=e("../../../../../shared/lib/four-byte");const i=(0,o.createProjectLogger)("four-byte");function l(e,t,n){var r;const s=n[t],{type:o,name:a}=e;let i=null===(r=e.components)||void 0===r?void 0:r.map(((e,t)=>l(e,t,s)));if(o.endsWith("[]")){const t=o.slice(0,-2);i=s.map(((n,r)=>{const o=`Item ${r+1}`;return l({...e,name:o,type:t},r,s)}))}return{name:a,type:o,value:s,children:i}}function c(e,t){return e.split(",").map((e=>{const n=e.split("#"),r=n.length>1?parseInt(n[0],10):undefined;return{type:r===undefined?e:`tuple${n[1]??""}`,components:r===undefined?undefined:c(t[r],t)}}))}function d(e){let t=-1;for(let n=0;n<e.length;n++)if("("===e[n])t=n;else if(")"===e[n]&&-1!==t)return{start:t,end:n,value:e.slice(t+1,n)};return undefined}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/four-byte.ts"}],[126,{"@metamask/controller-utils":1422,"ethereumjs-util":3796},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getContractProxyAddress=async function(e,t){const n=(await Promise.all(o.map((n=>(0,r.query)(t,"eth_getStorageAt",[e,n,"latest"]))))).find((e=>(0,s.stripHexPrefix)(e)!==a));return n&&(0,s.addHexPrefix)(n.slice(26))};var r=e("@metamask/controller-utils"),s=e("ethereumjs-util");const o=["0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3","0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"],a="0".padEnd(64,"0")}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/proxy.ts"}],[127,{"@ethersproject/abi":500,"@metamask/utils":2761},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionDataWithSourcify=async function(e,t,n){var i,l;const c=await async function(e,t){var n;const r=await async function(e,t){const n=parseInt(t,16),r=await fetch(`https://sourcify.dev/server/files/any/${n}/${e}`);if(!r.ok)throw new Error("Failed to fetch Sourcify files");return r.json()}(e,t),s=null===(n=r.files)||void 0===n?void 0:n.find((e=>e.name.includes("metadata.json")));if(!s)throw new Error("Metadata not found");return JSON.parse(s.content)}(t,n);s("Retrieved Sourcify metadata",{contractAddress:t,chainId:n,metadata:c});const{abi:d}=c.output,u=new r.Interface(d),h=e.slice(0,10);let p;try{p=u.getFunction(h)}catch(e){}if(!p)return s("Failed to find function in ABI",h,d),undefined;const{name:m,inputs:g}=p,f=a(m,g),C=null===(i=c.output.userdoc)||void 0===i?void 0:i.methods[f],y=null===(l=c.output.devdoc)||void 0===l?void 0:l.methods[f],w=(null==C?void 0:C.notice)??(null==y?void 0:y.details);s("Extracted NatSpec",{signature:f,userDoc:C,devDoc:y});const v=u.decodeFunctionData(h,e),b=g.map(((e,t)=>o(e,t,v,C,y)));return{name:m,description:w,params:b}};var r=e("@ethersproject/abi");const s=(0,e("@metamask/utils").createProjectLogger)("sourcify");function o(e,t,n,r,s){var a,i;const{name:l,type:c,components:d}=e,u=(null==r||null===(a=r.params)||void 0===a?void 0:a[l])??(null==s||null===(i=s.params)||void 0===i?void 0:i[l]),h=n[t];let p=null==d?void 0:d.map(((e,t)=>o(e,t,h,{},{})));if(c.endsWith("[]")){const t=c.slice(0,-2);p=h.map(((n,r)=>{const s=`Item ${r+1}`;return o({...e,name:s,type:t},r,h,{},{})}))}return{name:l,description:u,type:c,value:h,children:p}}function a(e,t){return`${e??""}(${t.map((e=>{var t;return null!==(t=e.components)&&void 0!==t&&t.length?`${a(undefined,e.components)}${e.type.endsWith("[]")?"[]":""}`:e.type})).join(",")})`}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/sourcify.ts"}],[128,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_ROUTER_COMMANDS=void 0;n.UNISWAP_ROUTER_COMMANDS={0:{name:"V3_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},1:{name:"V3_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},2:{name:"PERMIT2_TRANSFER_FROM",params:[{type:"address",description:"The token to fetch from Permit2",name:"token"},{type:"address",description:"The recipient of the tokens fetched",name:"recipient"},{type:"uint256",description:"The amount of token to fetch",name:"amount"}]},3:{name:"PERMIT2_PERMIT_BATCH",params:[{type:"bytes",description:"A PermitBatch struct outlining all of the Permit2 permits to execute.",name:"batch"},{type:"bytes",description:"The signature to provide to Permit2",name:"data"}]},4:{name:"SWEEP",params:[{type:"address",description:"The ERC20 token to sweep (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amountMin"}]},5:{name:"TRANSFER",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The amount to transfer",name:"value"}]},6:{name:"PAY_PORTION",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"In basis points, the percentage of the contract’s balance to transfer",name:"bips"}]},8:{name:"V2_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},9:{name:"V2_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},10:{name:"PERMIT2_PERMIT",params:[{type:"bytes",description:"A PermitSingle struct outlining the Permit2 permit to execute",name:"permitSingle"},{type:"bytes",description:"The signature to provide to Permit2",name:"signature"}]},11:{name:"WRAP_ETH",params:[{type:"address",description:"The recipient of the WETH",name:"recipient"},{type:"uint256",description:"The amount of ETH to wrap",name:"amountMin"}]},12:{name:"UNWRAP_WETH",params:[{type:"address",description:"The recipient of the ETH",name:"recipient"},{type:"uint256",description:"The minimum required ETH to receive from the unwrapping",name:"amountMin"}]},13:{name:"PERMIT2_TRANSFER_FROM_BATCH",params:[{type:"bytes",description:"An array of AllowanceTransferDetails structs that each describe a Permit2 transfer to perform",name:"batchDetails"}]},16:{name:"SEAPORT",params:[{type:"uint256",description:"The ETH value to forward to the Seaport contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Seaport contract",name:"data"}]},17:{name:"LOOKS_RARE_721",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},18:{name:"NFTX",params:[{type:"uint256",description:"The ETH value to forward to the NFTX contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFTX contract",name:"data"}]},19:{name:"CRYPTOPUNKS",params:[{type:"uint256",description:"The PunkID to purchase",name:"punkId"},{type:"address",description:"The recipient for the cryptopunk",name:"recipient"},{type:"uint256",description:"The ETH value to forward to the Cryptopunks contract",name:"value"}]},20:{name:"LOOKS_RARE_1155",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},21:{name:"OWNER_CHECK_721",params:[{type:"address",description:"The required owner of the ERC721",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},22:{name:"OWNER_CHECK_1155",params:[{type:"address",description:"The required owner of the ERC1155",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The minimum required amount of the ERC1155",name:"minBalance"}]},23:{name:"SWEEP_ERC721",params:[{type:"address",description:"The ERC721 token address to transfer",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The token ID to transfer",name:"id"}]},24:{name:"X2Y2_721",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},25:{name:"SUDOSWAP",params:[{type:"uint256",description:"The ETH value to forward to the Sudoswap contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Sudoswap contract",name:"data"}]},26:{name:"NFT20",params:[{type:"uint256",description:"The ETH value to forward to the NFT20 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFT20 contract",name:"data"}]},27:{name:"X2Y2_1155",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},28:{name:"FOUNDATION",params:[{type:"uint256",description:"The ETH value to forward to the Foundation contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Foundation contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},29:{name:"SWEEP_ERC1155",params:[{type:"address",description:"The ERC1155 token address to sweep",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The token ID to sweep",name:"id"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amount"}]}}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap-commands.ts"}],[129,{"../../../../../shared/constants/network":5264,"./uniswap-commands":128,"@ethersproject/abi":500,"ethereumjs-util":3796},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES=void 0,n.decodeUniswapRouterTransactionData=function({transactionData:e,contractAddress:t,chainId:n}){const o=c[n];if(null==o||!o.map((e=>e.toLowerCase())).includes(t.toLowerCase()))return undefined;const u=new r.Interface(d);let h;try{h=u.parseTransaction({data:e})}catch(e){return undefined}const p=h.args.commands,m=h.args.inputs;return p.slice(2).match(/.{1,2}/gu).map(((e,t)=>function(e,t){const n=parseInt(e,16),o=31&n,c=a.UNISWAP_ROUTER_COMMANDS[String(o)];if(!c)return undefined;const d=c.params.map((e=>e.type)),u=r.Interface.getAbiCoder().decode(d,t),{name:h}=c,p=c.params.map(((e,t)=>{const{name:n,type:r,description:o}=e,a=u[t];return{name:n,type:r,value:"path"===n?function(e){const t=[];let n=(0,s.stripHexPrefix)(e),r={},o=!0;for(;n.length;){if(o){const e=(0,s.addHexPrefix)(n.slice(0,i));r.firstAddress?(r.secondAddress=e,t.push(r),r={firstAddress:e}):r.firstAddress=e,n=n.slice(i)}else r.tickSpacing=parseInt(n.slice(0,l),16),n=n.slice(l);o=!o}return t}(a):a,description:o}}));return{name:h,params:p}}(e,m[t]))).filter((e=>e!==undefined))};var r=e("@ethersproject/abi"),s=e("ethereumjs-util"),o=e("../../../../../shared/constants/network"),a=e("./uniswap-commands");const i=40,l=6,c=n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES={[o.CHAIN_IDS.ARBITRUM]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x5E325eDA8064b456f4781070C0738d849c824258"],[o.CHAIN_IDS.AVALANCHE]:["0x82635AF6146972cD6601161c4472ffe97237D292","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[o.CHAIN_IDS.BASE]:["0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[o.CHAIN_IDS.BSC]:["0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[o.CHAIN_IDS.MAINNET]:["0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[o.CHAIN_IDS.OPTIMISM]:["0xb555edF5dcF85f42cEeF1f3630a52A108E55A654","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8"],[o.CHAIN_IDS.POLYGON]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0x643770E279d5D0733F21d6DC03A8efbABf3255B4","0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2"],[o.CHAIN_IDS.SEPOLIA]:["0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"]},d=[{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"},{name:"deadline",type:"uint256"}],name:"execute",type:"function"},{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"}],name:"execute",type:"function"}]}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap.ts"}],[13,{"../../../shared/constants/alarms":5245,"../../../shared/constants/app":5248,"../../../shared/constants/preferences":5269,"../../../shared/constants/time":5276,"../../../shared/modules/mv3.utils":5310,"../../../ui/helpers/utils/build-types":6273,"../metamask-controller":136,"@metamask/controller-utils":1422,"@metamask/obs-store":2126,events:3868,loglevel:4386,uuid:5175},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.AppStateController=void 0;var r=g(e("events")),s=e("@metamask/obs-store"),o=e("uuid"),a=g(e("loglevel")),i=e("@metamask/controller-utils"),l=e("../metamask-controller"),c=e("../../../shared/constants/time"),d=e("../../../shared/constants/alarms"),u=e("../../../shared/modules/mv3.utils"),h=e("../../../ui/helpers/utils/build-types"),p=e("../../../shared/constants/app"),m=e("../../../shared/constants/preferences");function g(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function C(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e,t){return e.get(v(e,t))}function w(e,t,n){return e.set(v(e,t),n),n}function v(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}var b=new WeakMap,k=new WeakSet;class S extends r.default{constructor(e){const{addUnlockListener:t,isUnlocked:n,initState:r,onInactiveTimeout:o,messenger:a,extension:i}=e;var l,c;super(),f(l=this,c=k),c.add(l),C(this,"extension",void 0),C(this,"onInactiveTimeout",void 0),C(this,"store",void 0),C(this,"timer",void 0),C(this,"isUnlocked",void 0),C(this,"waitingForUnlock",void 0),C(this,"messagingSystem",void 0),function(e,t,n){f(e,t),t.set(e,n)}(this,b,void 0),this.extension=i,this.onInactiveTimeout=o||(()=>undefined),this.store=new s.ObservableStore((e=>({timeoutMinutes:m.DEFAULT_AUTO_LOCK_TIME_LIMIT,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),outdatedBrowserWarningLastShown:null,nftsDetectionNoticeDismissed:!1,showTestnetMessageInDropdown:!0,showBetaHeader:(0,h.isBeta)(),showPermissionsTour:!0,showNetworkBanner:!0,showAccountBanner:!0,trezorModel:null,onboardingDate:null,lastViewedUserSurvey:null,newPrivacyPolicyToastClickedOrClosed:null,newPrivacyPolicyToastShownDate:null,hadAdvancedGasFeesSetPriorToMigration92_3:!1,...e,qrHardware:{},nftsDropdownState:{},usedNetworks:{"0x1":!0,"0x5":!0,"0x539":!0},surveyLinkLastClickedOrClosed:null,signatureSecurityAlertResponses:{},switchedNetworkDetails:null,switchedNetworkNeverShowMessage:!1,currentExtensionPopupId:0}))(r)),this.timer=null,this.isUnlocked=n,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),a.subscribe("PreferencesController:stateChange",(({preferences:e})=>{const t=this.store.getState();"number"==typeof(null==e?void 0:e.autoLockTimeLimit)&&t.timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),a.subscribe("KeyringController:qrKeyringStateChange",(e=>this.store.updateState({qrHardware:e})));const{preferences:d}=a.call("PreferencesController:getState");"number"==typeof d.autoLockTimeLimit&&this._setInactiveTimeout(d.autoLockTimeLimit),this.messagingSystem=a,this.messagingSystem.registerActionHandler("AppStateController:getState",(()=>this.store.getState())),this.store.subscribe((e=>{this.messagingSystem.publish("AppStateController:stateChange",e,[])})),w(b,this,null)}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._requestApproval()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;){var e;null===(e=this.waitingForUnlock.shift())||void 0===e||e.resolve()}this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}this._acceptApproval()}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setSurveyLinkLastClickedOrClosed(e){this.store.updateState({surveyLinkLastClickedOrClosed:e})}setOnboardingDate(){this.store.updateState({onboardingDate:Date.now()})}setLastViewedUserSurvey(e){this.store.updateState({lastViewedUserSurvey:e})}setNewPrivacyPolicyToastClickedOrClosed(){this.store.updateState({newPrivacyPolicyToastClickedOrClosed:!0})}setNewPrivacyPolicyToastShownDate(e){this.store.updateState({newPrivacyPolicyToastShownDate:e})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setTermsOfUseLastAgreed(e){this.store.updateState({termsOfUseLastAgreed:e})}setSnapsInstallPrivacyWarningShownStatus(e){this.store.updateState({snapsInstallPrivacyWarningShown:e})}setOutdatedBrowserWarningLastShown(e){this.store.updateState({outdatedBrowserWarningLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();if(this.timer?clearTimeout(this.timer):u.isManifestV3&&this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM),!e)return;const t=Number(e);u.isManifestV3?(this.extension.alarms.create(d.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:t,periodInMinutes:t}),this.extension.alarms.onAlarm.addListener((e=>{e.name===d.AUTO_LOCK_TIMEOUT_ALARM&&(this.onInactiveTimeout(),this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM))}))):this.timer=setTimeout((()=>this.onInactiveTimeout()),t*c.MINUTE)}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){t.toString()!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]&&v(k,this,T).call(this,t)&&v(k,this,A).call(this,e,t)}removePollingToken(e,t){if(t.toString()!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const n=this.store.getState()[t];v(k,this,T).call(this,t)&&this.store.updateState({[t]:n.filter((t=>t!==e))})}}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setShowBetaHeader(e){this.store.updateState({showBetaHeader:e})}setShowPermissionsTour(e){this.store.updateState({showPermissionsTour:e})}setShowNetworkBanner(e){this.store.updateState({showNetworkBanner:e})}setShowAccountBanner(e){this.store.updateState({showAccountBanner:e})}setCurrentExtensionPopupId(e){this.store.updateState({currentExtensionPopupId:e})}setSwitchedNetworkDetails(e){this.store.updateState({switchedNetworkDetails:e})}clearSwitchedNetworkDetails(){this.store.updateState({switchedNetworkDetails:null})}setSwitchedNetworkNeverShowMessage(e){this.store.updateState({switchedNetworkDetails:null,switchedNetworkNeverShowMessage:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}updateNftDropDownState(e){this.store.updateState({nftsDropdownState:e})}setFirstTimeUsedNetwork(e){const t=this.store.getState(),{usedNetworks:n}=t;n[e]=!0,this.store.updateState({usedNetworks:n})}getSignatureSecurityAlertResponse(e){return this.store.getState().signatureSecurityAlertResponses[e]}addSignatureSecurityAlertResponse(e){const t=this.store.getState(),{signatureSecurityAlertResponses:n}=t;e.securityAlertId&&this.store.updateState({signatureSecurityAlertResponses:{...n,[String(e.securityAlertId)]:e}})}setCurrentPopupId(e){this.store.updateState({currentPopupId:e})}getLastInteractedConfirmationInfo(){return this.store.getState().lastInteractedConfirmationInfo}setLastInteractedConfirmationInfo(e){this.store.updateState({lastInteractedConfirmationInfo:e})}getCurrentPopupId(){return this.store.getState().currentPopupId}_requestApproval(){y(b,this)||(w(b,this,(0,o.v4)()),this.messagingSystem.call("ApprovalController:addRequest",{id:y(b,this),origin:p.ORIGIN_METAMASK,type:i.ApprovalType.Unlock},!0).catch((()=>{w(b,this,null)})))}emit(e){return super.emit(e)}_acceptApproval(){if(y(b,this)){try{this.messagingSystem.call("ApprovalController:acceptRequest",y(b,this))}catch(e){a.default.error("Failed to unlock approval request",e)}w(b,this,null)}}}function A(e,t){const n=this.store.getState()[t];this.store.updateState({[t]:[...n,e]})}function T(e){return["popupGasPollTokens","notificationGasPollTokens","fullScreenGasPollTokens"].includes(e)}n.AppStateController=S}}},{package:"$root$",file:"app/scripts/controllers/app-state-controller.ts"}],[130,{"../../../../../shared/types/transaction-decode":5330,"./four-byte":125,"./proxy":126,"./sourcify":127,"./uniswap":129,"@metamask/utils":2761},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionData=async function({transactionData:e,contractAddress:t,chainId:n,ethQuery:r}){c("Decoding transaction data",{transactionData:e,contractAddress:t,chainId:n});const u=(0,o.decodeUniswapRouterTransactionData)({transactionData:e,contractAddress:t,chainId:n});if(u)return c("Decoded with Uniswap commands",u),{data:d(u),source:s.DecodedTransactionDataSource.Uniswap};const h=await(0,i.getContractProxyAddress)(t,r);h&&c("Retrieved proxy implementation address",h);const p=h??t,m=(0,a.decodeTransactionDataWithSourcify)(e,p,n),g=(0,l.decodeTransactionDataWithFourByte)(e),[f,C]=await Promise.allSettled([m,g]);if("fulfilled"===f.status&&f.value)return c("Decoded data with Sourcify",f.value),{data:d([f.value]),source:s.DecodedTransactionDataSource.Sourcify};if(c("Failed to decode data with Sourcify",f),"fulfilled"===C.status&&C.value)return c("Decoded data with 4Byte",C.value),{data:d([C.value]),source:s.DecodedTransactionDataSource.FourByte};return c("Failed to decode data with 4Byte",C),undefined};var r=e("@metamask/utils"),s=e("../../../../../shared/types/transaction-decode"),o=e("./uniswap"),a=e("./sourcify"),i=e("./proxy"),l=e("./four-byte");const c=(0,r.createProjectLogger)("transaction-decode");function d(e){return e.map((e=>function(e){return{...e,params:e.params.map((e=>u(e)))}}(e)))}function u(e){var t;return{...e,value:h(e.value),children:null===(t=e.children)||void 0===t?void 0:t.map((e=>u(e)))}}function h(e){const t=e._hex;return t?parseInt(t,16):e}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/util.ts"}],[131,{"../../../../shared/constants/app":5248,"../../../../shared/constants/gas":5255,"../../../../shared/constants/metametrics":5260,"../../../../shared/constants/transaction":5278,"../../../../shared/lib/confirmation.utils":5281,"../../../../shared/lib/transactions-controller-utils":5292,"../../../../shared/modules/conversion.utils":5301,"../../../../shared/modules/metametrics":5309,"../../../../shared/modules/transaction.utils":5326,"../../../../ui/helpers/utils/metrics":6283,"../snap-keyring/metrics":119,"@metamask/eth-query":1640,"@metamask/transaction-controller":2698,"bignumber.js":3465,"ethereumjs-util":3796},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.handleTransactionSubmitted=n.handleTransactionRejected=n.handleTransactionFailed=n.handleTransactionDropped=n.handleTransactionConfirmed=n.handleTransactionApproved=n.handleTransactionAdded=n.handlePostTransactionBalanceUpdate=n.createTransactionEventFragmentWithTxId=n.METRICS_STATUS_FAILED=void 0;var r,s=(r=e("@metamask/eth-query"))&&r.__esModule?r:{default:r},o=e("bignumber.js"),a=e("ethereumjs-util"),i=e("@metamask/transaction-controller"),l=e("../../../../shared/constants/app"),c=e("../../../../shared/constants/gas"),d=e("../../../../shared/constants/metametrics"),u=e("../../../../shared/constants/transaction"),h=e("../../../../shared/lib/transactions-controller-utils"),p=e("../../../../shared/modules/conversion.utils"),m=e("../../../../shared/modules/metametrics"),g=e("../../../../shared/modules/transaction.utils"),f=e("../../../../ui/helpers/utils/metrics"),C=e("../snap-keyring/metrics"),y=e("../../../../shared/lib/confirmation.utils");const w=n.METRICS_STATUS_FAILED="failed on-chain";n.handleTransactionAdded=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await S({transactionEventPayload:t,transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.added,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.handleTransactionApproved=async(e,t)=>{t.transactionMeta&&await b({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionFailed=async(e,t)=>{if(!t.transactionMeta)return;const n={};t.error&&(n.error=t.error),await b({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionConfirmed=async(e,t)=>{if(0===Object.keys(t).length)return;const n={},r={...t},{txReceipt:s}=r;n.gas_used=null==s?void 0:s.gasUsed;const{submittedTime:o}=r;o&&(n.completion_time=function(e){return Math.round((Date.now()-e)/1e3).toString()}(o)),"0x0"===(null==s?void 0:s.status)&&(n.status=w),await b({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e})};n.handleTransactionDropped=async(e,t)=>{if(!t.transactionMeta)return;await b({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:{dropped:!0},transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionRejected=async(e,t)=>{t.transactionMeta&&await b({eventName:u.TransactionMetaMetricsEvent.rejected,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionSubmitted=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await S({transactionEventPayload:t,transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.submitted,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.createTransactionEventFragmentWithTxId=async(e,{transactionId:t,actionId:n})=>{const r={...e.getTransaction(t),actionId:n},{properties:s,sensitiveProperties:o}=await S({transactionEventPayload:{transactionMeta:r},transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e,payload:{properties:s,sensitiveProperties:o}})};function v({eventName:e,transactionEventPayload:{transactionMeta:t,actionId:n},transactionMetricsRequest:r,payload:s}){if(function(e,t,n){const r=k(t,n.id);return void 0!==e(r)}(r.getEventFragmentById,e,t)&&e!==u.TransactionMetaMetricsEvent.submitted)return;const o=k(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.added:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.added,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.submitted:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.submitted,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.finalized:r.createEventFragment({category:d.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0})}}async function b({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r={}}){const{properties:s,sensitiveProperties:o}=await S({transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r});v({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionEventPayload:{transactionMeta:t},transactionMetricsRequest:n,payload:r}){const s=k(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:case u.TransactionMetaMetricsEvent.finalized:n.updateEventFragment(s,{properties:r.properties,sensitiveProperties:r.sensitiveProperties})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionMetricsRequest:t,transactionEventPayload:{transactionMeta:n}}){const r=k(e,n.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.finalized:t.finalizeEventFragment(r);break;case u.TransactionMetaMetricsEvent.rejected:t.finalizeEventFragment(r,{abandoned:!0})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n})}function k(e,t){return`transaction-${e===u.TransactionMetaMetricsEvent.finalized||e===u.TransactionMetaMetricsEvent.submitted?"submitted":"added"}-${t}`}async function S({transactionEventPayload:{transactionMeta:e},transactionMetricsRequest:t,extraParams:n={}}){var r;const{type:w,time:v,status:b,chainId:k,origin:S,txParams:{gasPrice:A,gas:T,maxFeePerGas:E,maxPriorityFeePerGas:M,estimateSuggested:P,estimateUsed:_},defaultGasEstimates:I,originalType:N,replacedById:R,customTokenAmount:O,dappProposedTokenAmount:x,currentTokenBalance:B,originalApprovalAmount:j,finalApprovalAmount:D,securityProviderResponse:U,simulationFails:F}=e,L=new s.default(t.provider),$=S===l.ORIGIN_METAMASK?"user":"dapp",{assetType:H,tokenStandard:q}=await(0,g.determineTransactionAssetType)(e,L,t.getTokenStandardAndDetails);let G;if(e.txParams.data){const n=await t.getMethodData(e.txParams.data);G=null==n?void 0:n.name}const K={};if((0,g.isEIP1559Transaction)(e)?(K.max_fee_per_gas=E,K.max_priority_fee_per_gas=M):K.gas_price=A,I){var V,W;const{estimateType:n}=I;if(n){var z,J;K.default_estimate=n;let r=null===(z=e.defaultGasEstimates)||void 0===z?void 0:z.maxFeePerGas,s=null===(J=e.defaultGasEstimates)||void 0===J?void 0:J.maxPriorityFeePerGas;if([c.GasRecommendations.low,c.GasRecommendations.medium,c.GasRecommendations.high].includes(n)){var Y,Q;const{gasFeeEstimates:e}=await t.getEIP1559GasFeeEstimates();var X,Z;if(null!=e&&null!==(Y=e[n])&&void 0!==Y&&Y.suggestedMaxFeePerGas)r=null===(X=e[n])||void 0===X?void 0:X.suggestedMaxFeePerGas,K.default_max_fee_per_gas=r;if(null!=e&&null!==(Q=e[n])&&void 0!==Q&&Q.suggestedMaxPriorityFeePerGas)s=null===(Z=e[n])||void 0===Z?void 0:Z.suggestedMaxPriorityFeePerGas,K.default_max_priority_fee_per_gas=s}}null!==(V=e.defaultGasEstimates)&&void 0!==V&&V.gas&&(K.default_gas=e.defaultGasEstimates.gas),null!==(W=e.defaultGasEstimates)&&void 0!==W&&W.gasPrice&&(K.default_gas_price=e.defaultGasEstimates.gasPrice)}P&&(K.estimate_suggested=P),_&&(K.estimate_used=_),null!=n&&n.gas_used&&(K.gas_used=n.gas_used);const ee=function(e){const t={};for(const n in e)(0,a.isHexString)(e[n])?t[n]=(0,p.hexWEIToDecGWEI)(e[n]):t[n]=e[n];return t}(K);let te="0";e.txParams.maxFeePerGas&&(te="2");const ne=w&&[i.TransactionType.contractInteraction,i.TransactionType.tokenMethodApprove,i.TransactionType.tokenMethodIncreaseAllowance,i.TransactionType.tokenMethodSafeTransferFrom,i.TransactionType.tokenMethodSetApprovalForAll,i.TransactionType.tokenMethodTransfer,i.TransactionType.tokenMethodTransferFrom,i.TransactionType.swap,i.TransactionType.swapAndSend,i.TransactionType.swapApproval].includes(w),re="Approve";let se,oe,ae,ie,le,ce=i.TransactionType.simpleSend;if(w===i.TransactionType.swapAndSend)ce=i.TransactionType.swapAndSend;else if(w===i.TransactionType.cancel)ce=i.TransactionType.cancel;else if(w===i.TransactionType.retry&&N)ce=N;else if(w===i.TransactionType.deployContract)ce=i.TransactionType.deployContract;else if(ne){var de;ce=i.TransactionType.contractInteraction,oe=G,le=null===(de=e.txParams)||void 0===de?void 0:de.to,oe===re&&q===u.TokenStandard.ERC20&&("0"===x||"0"===O?se=u.TransactionApprovalAmountType.revoke:O&&O!==x?se=u.TransactionApprovalAmountType.custom:x&&(se=u.TransactionApprovalAmountType.dappProposed),ae=function(e,t,n){if(e===u.TransactionApprovalAmountType.custom&&t&&n)return`${new o.BigNumber(t,10).div(n,10).times(100).round(2)}`;return null}(se,j,D),ie=function(e,t,n){if((e===u.TransactionApprovalAmountType.custom||e===u.TransactionApprovalAmountType.dappProposed)&&t&&n)return`${new o.BigNumber(t,16).div(n,10).times(100).round(2)}`;return null}(se,x,B))}const ue=t.getTransaction(R),he={RETRY:i.TransactionType.retry,CANCEL:i.TransactionType.cancel,SAME_NONCE:"other"};let pe;null!=n&&n.dropped&&(pe=he.SAME_NONCE,(null==ue?void 0:ue.type)===i.TransactionType.cancel?pe=he.CANCEL:(null==ue?void 0:ue.type)===i.TransactionType.retry&&(pe=he.RETRY));const me=[];let ge=null;1===(null==U?void 0:U.flagAsDangerous)?me.push(d.MetaMetricsEventUiCustomization.FlaggedAsMalicious):2===(null==U?void 0:U.flagAsDangerous)&&me.push(d.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown);const fe=(0,f.getBlockaidMetricsProps)(e);(null==fe||null===(r=fe.ui_customizations)||void 0===r?void 0:r.length)>0&&me.push(...fe.ui_customizations),F&&me.push(d.MetaMetricsEventUiCustomization.GasEstimationFailed);(0,y.shouldUseRedesignForTransactions)({transactionMetadataType:e.type,isRedesignedTransactionsUserSettingEnabled:t.getRedesignedTransactionsEnabled(),isRedesignedConfirmationsDeveloperEnabled:t.getIsRedesignedConfirmationsDeveloperEnabled()})&&(me.push(d.MetaMetricsEventUiCustomization.RedesignedConfirmation),ge=t.getIsConfirmationAdvancedDetailsOpen());const Ce=(0,m.getSmartTransactionMetricsProperties)(t,e),ye=(0,f.getSwapAndSendMetricsProps)(e);let we={chain_id:k,referrer:S,source:$,status:b,network:`${parseInt(k,16)}`,eip_1559_version:te,gas_edit_type:"none",gas_edit_attempted:"none",gas_estimation_failed:Boolean(F),account_type:await t.getAccountType(t.getSelectedAddress()),device_model:await t.getDeviceModel(t.getSelectedAddress()),asset_type:H,token_standard:q,transaction_type:ce,transaction_speed_up:w===i.TransactionType.retry,...fe,ui_customizations:me.length>0?me:null,transaction_advanced_view:ge,transaction_contract_method:oe,...Ce,...ye};const ve=await(0,C.getSnapAndHardwareInfoForMetrics)(t.getAccountType,t.getDeviceModel,t.snapAndHardwareMessenger);Object.assign(we,ve),oe===re&&(we={...we,transaction_approval_amount_type:se});let be={transaction_envelope_type:(0,g.isEIP1559Transaction)(e)?h.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET:h.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,first_seen:v,gas_limit:T,transaction_replaced:pe,transaction_contract_address:le,...n,...ee};return oe===re&&(be={...be,transaction_approval_amount_vs_balance_ratio:ie,transaction_approval_amount_vs_proposed_ratio:ae}),{properties:we,sensitiveProperties:be}}n.handlePostTransactionBalanceUpdate=async({getParticipateInMetrics:e,trackEvent:t},{transactionMeta:n,approvalTransactionMeta:r})=>{var s;if(e()&&n.swapMetaData)if("0x0"===(null===(s=n.txReceipt)||void 0===s?void 0:s.status))t({event:"Swap Failed",sensitiveProperties:{...n.swapMetaData},category:d.MetaMetricsEventCategory.Swaps});else{var a;const e=(0,h.getSwapsTokensReceivedFromTxMeta)(n.destinationTokenSymbol,n,n.destinationTokenAddress,n.txParams.from,n.destinationTokenDecimals,r,n.chainId),s=e?`${new o.BigNumber(e,10).div(n.swapMetaData.token_to_amount,10).times(100).round(2)}%`:null,i=null!==(a=n.txReceipt)&&void 0!==a&&a.gasUsed&&n.swapMetaData.estimated_gas?`${new o.BigNumber(n.txReceipt.gasUsed,16).div(n.swapMetaData.estimated_gas,10).times(100).round(2)}%`:null,l=function(e,t){var n,r;let s="0x0";null!=t&&t.txReceipt&&(s=(0,h.calcGasTotal)(t.txReceipt.gasUsed,t.txReceipt.effectiveGasPrice));const a=(0,h.calcGasTotal)(null===(n=e.txReceipt)||void 0===n?void 0:n.gasUsed,null===(r=e.txReceipt)||void 0===r?void 0:r.effectiveGasPrice),i=new o.BigNumber(a,16).plus(s,16).toString(16);return{approvalGasCostInEth:Number((0,p.hexWEIToDecETH)(s)),tradeGasCostInEth:Number((0,p.hexWEIToDecETH)(a)),tradeAndApprovalGasCostInEth:Number((0,p.hexWEIToDecETH)(i))}}(n,r);t({event:d.MetaMetricsEventName.SwapCompleted,category:d.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...n.swapMetaData,token_to_amount_received:e,quote_vs_executionRatio:s,estimated_vs_used_gasRatio:i,approval_gas_cost_in_eth:l.approvalGasCostInEth,trade_gas_cost_in_eth:l.tradeGasCostInEth,trade_and_approval_gas_cost_in_eth:l.tradeAndApprovalGasCostInEth,token_to_amount:n.swapMetaData.token_to_amount.toString(10)}})}}}}},{package:"$root$",file:"app/scripts/lib/transaction/metrics.ts"}],[132,{"../../../../shared/constants/app":5248,"../../../../shared/constants/smartTransactions":5272,"../../../../shared/modules/conversion.utils":5301,"@metamask/smart-transactions-controller/dist/types":2358,"@metamask/transaction-controller":2698,loglevel:4386},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.submitSmartTransactionHook=void 0;var r,s=e("@metamask/smart-transactions-controller/dist/types"),o=e("@metamask/transaction-controller"),a=(r=e("loglevel"))&&r.__esModule?r:{default:r},i=e("../../../../shared/modules/conversion.utils"),l=e("../../../../shared/constants/smartTransactions"),c=e("../../../../shared/constants/app");function d(e,t,n){u(e,t),t.set(e,n)}function u(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function h(e,t){return e.get(m(e,t))}function p(e,t,n){return e.set(m(e,t),n),n}function m(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}var g=new WeakMap,f=new WeakMap,C=new WeakMap,y=new WeakMap,w=new WeakMap,v=new WeakMap,b=new WeakMap,k=new WeakMap,S=new WeakMap,A=new WeakMap,T=new WeakMap,E=new WeakMap,M=new WeakSet;class P{constructor(e){!function(e,t){u(e,t),t.add(e)}(this,M),d(this,g,void 0),d(this,f,void 0),d(this,C,void 0),d(this,y,void 0),d(this,w,void 0),d(this,v,void 0),d(this,b,void 0),d(this,k,void 0),d(this,S,void 0),d(this,A,void 0),d(this,T,void 0),d(this,E,void 0);const{transactionMeta:t,signedTransactionInHex:n,smartTransactionsController:r,transactionController:s,isSmartTransaction:o,controllerMessenger:a,featureFlags:i}=e;p(f,this,""),p(g,this,!1),p(A,this,t),p(T,this,n),p(k,this,r),p(S,this,s),p(b,this,o),p(y,this,a),p(w,this,i),p(v,this,t.origin!==c.ORIGIN_METAMASK),p(C,this,t.chainId),p(E,this,t.txParams)}async submit(){var e;const t=!(null===(e=h(A,this))||void 0===e||!e.type)&&[o.TransactionType.swapAndSend,o.TransactionType.swapApproval].includes(h(A,this).type),n={transactionHash:undefined};if(!h(b,this)||t)return n;const{id:r}=await h(y,this).call("ApprovalController:startFlow");let s;p(f,this,r);try{s=await h(k,this).getFees({...h(E,this),chainId:h(C,this)},undefined)}catch(e){return a.default.error("Error in smart transaction publish hook, falling back to regular transaction submission",e),m(M,this,_).call(this),n}try{var i;const e=await m(M,this,x).call(this,{getFeesResponse:s}),t=null==e?void 0:e.uuid;if(!t)throw new Error("No smart transaction UUID");const n=null===(i=h(w,this))||void 0===i||null===(i=i.smartTransactions)||void 0===i?void 0:i.extensionReturnTxHashAsap;let r;if(m(M,this,I).call(this,{uuid:t}),m(M,this,R).call(this,{uuid:t}),r=n&&null!=e&&e.txHash?e.txHash:await m(M,this,O).call(this,{uuid:t}),null===r)throw new Error("Transaction does not have a transaction hash, there was a problem");return{transactionHash:r}}catch(e){throw a.default.error("Error in smart transaction publish hook",e),m(M,this,_).call(this),e}}}function _(){h(g,this)||(p(g,this,!0),h(y,this).call("ApprovalController:endFlow",{id:h(f,this)}))}function I({uuid:e}){const t=()=>{m(M,this,_).call(this)};h(y,this).call("ApprovalController:addRequest",{id:h(f,this),origin:origin,type:c.SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage,requestState:{smartTransaction:{status:s.SmartTransactionStatuses.PENDING,creationTime:Date.now(),uuid:e},isDapp:h(v,this),txId:h(A,this).id}},!0).then(t,t)}async function N({smartTransaction:e}){return await h(y,this).call("ApprovalController:updateRequestState",{id:h(f,this),requestState:{smartTransaction:e,isDapp:h(v,this),txId:h(A,this).id}})}async function R({uuid:e}){h(y,this).subscribe("SmartTransactionsController:smartTransaction",(async t=>{if(t.uuid===e){const{status:e}=t;if(!e||e===s.SmartTransactionStatuses.PENDING)return;h(g,this)||await m(M,this,N).call(this,{smartTransaction:t})}}))}function O({uuid:e}){return new Promise((t=>{h(y,this).subscribe("SmartTransactionsController:smartTransaction",(async n=>{if(n.uuid===e){const{status:e,statusMetadata:r}=n;if(!e||e===s.SmartTransactionStatuses.PENDING)return;a.default.debug("Smart Transaction: ",n),null!=r&&r.minedHash?(a.default.debug("Smart Transaction - Received tx hash: ",null==r?void 0:r.minedHash),t(r.minedHash)):t(null)}}))}))}async function x({getFeesResponse:e}){let t;var n;h(T,this)?t=[h(T,this)]:t=await m(M,this,j).call(this,(null===(n=e.tradeTxFees)||void 0===n?void 0:n.fees)??[],!1);return await h(k,this).submitSignedTransactions({signedTransactions:t,signedCanceledTransactions:[],txParams:h(E,this),transactionMeta:h(A,this)})}function B(e,t){const n={...h(E,this),maxFeePerGas:`0x${(0,i.decimalToHex)(e.maxFeePerGas)}`,maxPriorityFeePerGas:`0x${(0,i.decimalToHex)(e.maxPriorityFeePerGas)}`,gas:t?`0x${(0,i.decimalToHex)(l.CANCEL_GAS_LIMIT_DEC)}`:h(E,this).gas};return t&&(n.to=n.from,n.data="0x"),n}async function j(e,t){const n=e.map((e=>m(M,this,B).call(this,e,t))).map((e=>({...e,chainId:e.chainId||h(C,this)})));return await h(S,this).approveTransactionsWithSameNonce(n,{hasNonce:!0})}n.submitSmartTransactionHook=e=>new P(e).submit()}}},{package:"$root$",file:"app/scripts/lib/transaction/smart-transactions.ts"}],[133,{"../../../../shared/constants/security-provider":5270,"../../../../shared/lib/trace":5291,"../ppom/ppom-util":95,"@metamask/keyring-api":1843,"ethereumjs-util":3796},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:n,method:r,origin:s}=t,{securityAlertResponse:o,traceContext:a}=t,c={actionId:n,method:r,origin:s,requireApproval:!0,securityAlertResponse:o};(0,i.endTrace)({name:i.TraceName.Middleware,id:n});const{waitForHash:d}=await l({...e,transactionOptions:{...c,traceContext:a}}),u=await d();return(0,i.endTrace)({name:i.TraceName.Transaction,id:n}),u},n.addTransaction=async function(e){await async function(e){const{chainId:t,ppomController:n,securityAlertsEnabled:r,transactionOptions:s,transactionParams:i,updateSecurityAlertResponse:l,internalAccounts:c}=e,{type:d}=s,u=a.SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES.includes(d);if(!r||u)return;if(c.some((({address:e})=>{var t;return e.toLowerCase()===(null===(t=i.to)||void 0===t?void 0:t.toLowerCase())})))return;try{const{from:r,to:c,value:d,data:u}=i,{actionId:h,origin:p}=s,m={method:"eth_sendTransaction",id:h??"",origin:p??"",params:[{from:r,to:c??"",value:d??"",data:u??""}],jsonrpc:"2.0"},g=(0,o.generateSecurityAlertId)();(0,o.validateRequestWithPPOM)({ppomController:n,request:m,securityAlertId:g,chainId:t,updateSecurityAlertResponse:l});const f={...a.SECURITY_ALERT_RESPONSE_CHECKING_CHAIN,securityAlertId:g};e.transactionOptions.securityAlertResponse=f}catch(e){(0,o.handlePPOMError)(e,"Error validating JSON RPC using PPOM: ")}}(e);const{transactionMeta:t,waitForHash:n}=await l(e);if(!e.waitForSubmit)return n().catch((()=>{})),t;const r=await n();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(r,e.transactionController)};var r=e("@metamask/keyring-api"),s=e("ethereumjs-util"),o=e("../ppom/ppom-util"),a=e("../../../../shared/constants/security-provider"),i=e("../../../../shared/lib/trace");async function l(e){const{selectedAccount:t}=e;return t.type===r.EthAccountType.Erc4337?async function(e){var t;const{networkClientId:n,transactionController:r,transactionOptions:o,transactionParams:a,userOperationController:i}=e,{maxFeePerGas:l,maxPriorityFeePerGas:d}=a,{origin:u,requireApproval:h,type:p}=o,m={...a,maxFeePerGas:(0,s.addHexPrefix)(l),maxPriorityFeePerGas:(0,s.addHexPrefix)(d)},g=null==o||null===(t=o.swaps)||void 0===t?void 0:t.meta;null!=g&&g.type&&delete g.type;const f={networkClientId:n,origin:u,requireApproval:h,swaps:g,type:p},C=await i.addUserOperationFromTransaction(m,f);i.startPollingByNetworkClientId(n);return{transactionMeta:c(C.id,r),waitForHash:C.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:n,transactionParams:r,networkClientId:s}=e,{result:o,transactionMeta:a}=await t.addTransaction(r,{...n});return{transactionMeta:a,waitForHash:()=>o}}(e)}function c(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[134,{"../../../../shared/constants/app":5248,"../../../../shared/constants/verification":5280,"../../../../shared/modules/selectors/networks":5320,"@ethersproject/hash":529,"@ethersproject/wallet":612,"@metamask/rpc-errors":2304,"@metamask/utils":2761},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createTxVerificationMiddleware=function(e,t=i.TRUSTED_SIGNERS){return function(n,d,u,h){if(n.method!==l.MESSAGE_TYPE.ETH_SEND_TRANSACTION||!Array.isArray(n.params)||!function(e){return(0,a.isObject)(e[0])&&"string"==typeof e[0].data&&"string"==typeof e[0].from&&"string"==typeof e[0].to&&"string"==typeof e[0].value&&(!(0,a.hasProperty)(e[0],"chainId")||"string"==typeof e[0].chainId&&e[0].chainId.startsWith("0x"))}(n.params))return u();const p=n.params[0],m="string"==typeof p.chainId?p.chainId.toLowerCase():(0,c.getCurrentChainId)({metamask:e.state}),g=(0,i.getExperience)(p.to.toLowerCase(),m);if(!g||!i.EXPERIENCES_TO_VERIFY.includes(g))return u();const f=`0x${p.data.slice(-i.TX_SIG_LEN)}`,C=(0,s.verifyMessage)(function(e){const t={to:(0,r.hashMessage)(e.to.toLowerCase()),from:(0,r.hashMessage)(e.from.toLowerCase()),data:(0,r.hashMessage)(e.data.toLowerCase().slice(0,e.data.length-i.TX_SIG_LEN)),value:(0,r.hashMessage)(e.value.toLowerCase())};return(0,r.hashMessage)(JSON.stringify(t))}(p),f);return C!==t[g]?h(o.rpcErrors.invalidParams("Invalid transaction signature.")):u()}};var r=e("@ethersproject/hash"),s=e("@ethersproject/wallet"),o=e("@metamask/rpc-errors"),a=e("@metamask/utils"),i=e("../../../../shared/constants/verification"),l=e("../../../../shared/constants/app"),c=e("../../../../shared/modules/selectors/networks")}}},{package:"$root$",file:"app/scripts/lib/tx-verification/tx-verification-middleware.ts"}],[1346,{"./utils.cjs":1348,"@metamask/base-controller":1396,"@metamask/eth-snap-keyring":1695,"@metamask/keyring-api":1843,"@metamask/keyring-controller":1896,"@metamask/utils":2761},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,o,a,i,l,c,d,u,h,p,m,g,f,C,y=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.AccountsController=n.EMPTY_ACCOUNT=void 0;const w=e("@metamask/base-controller"),v=e("@metamask/eth-snap-keyring"),b=e("@metamask/keyring-api"),k=e("@metamask/keyring-controller"),S=e("@metamask/utils"),A=e("./utils.cjs"),T="AccountsController",E={internalAccounts:{persist:!0,anonymous:!1}},M={internalAccounts:{accounts:{},selectedAccount:""}};n.EMPTY_ACCOUNT={id:"",address:"",options:{},methods:[],type:b.EthAccountType.Eoa,metadata:{name:"",keyring:{type:""},importTime:0}};class P extends w.BaseController{constructor({messenger:e,state:t}){super({messenger:e,name:T,metadata:E,state:{...M,...t}}),r.add(this),this.messagingSystem.subscribe("SnapController:stateChange",(e=>y(this,r,"m",l).call(this,e))),this.messagingSystem.subscribe("KeyringController:stateChange",(e=>y(this,r,"m",i).call(this,e))),y(this,r,"m",C).call(this)}getAccount(e){return this.state.internalAccounts.accounts[e]}listAccounts(){return Object.values(this.state.internalAccounts.accounts).filter((e=>(0,b.isEvmAccountType)(e.type)))}listMultichainAccounts(e){const t=Object.values(this.state.internalAccounts.accounts);if(!e)return t;if(!(0,S.isCaipChainId)(e))throw new Error(`Invalid CAIP-2 chain ID: ${String(e)}`);return t.filter((t=>y(this,r,"m",u).call(this,t,e)))}getAccountExpect(e){const t=this.getAccount(e);if(t===undefined)throw new Error(`Account Id "${e}" not found`);return t}getSelectedAccount(){if(""===this.state.internalAccounts.selectedAccount)return n.EMPTY_ACCOUNT;const e=this.getAccountExpect(this.state.internalAccounts.selectedAccount);if((0,b.isEvmAccountType)(e.type))return e;const t=this.listAccounts();if(!t.length)throw new Error("No EVM accounts");return y(this,r,"m",d).call(this,t)}getSelectedMultichainAccount(e){if(""===this.state.internalAccounts.selectedAccount)return n.EMPTY_ACCOUNT;if(!e)return this.getAccountExpect(this.state.internalAccounts.selectedAccount);if(!(0,S.isCaipChainId)(e))throw new Error(`Invalid CAIP-2 chain ID: ${e}`);const t=Object.values(this.state.internalAccounts.accounts).filter((t=>y(this,r,"m",u).call(this,t,e)));return y(this,r,"m",d).call(this,t)}getAccountByAddress(e){return this.listMultichainAccounts().find((t=>t.address.toLowerCase()===e.toLowerCase()))}setSelectedAccount(e){const t=this.getAccountExpect(e);this.update((e=>{e.internalAccounts.accounts[t.id].metadata.lastSelected=Date.now(),e.internalAccounts.selectedAccount=t.id})),y(this,r,"m",m).call(this,t)}setAccountName(e,t){this.updateAccountMetadata(e,{name:t,nameLastUpdatedAt:Date.now()})}updateAccountMetadata(e,t){const n=this.getAccountExpect(e);if(t.name&&this.listMultichainAccounts().find((n=>n.metadata.name===t.name&&n.id!==e)))throw new Error("Account name already exists");this.update((r=>{const s={...n,metadata:{...n.metadata,...t}};r.internalAccounts.accounts[e]=s,t.name&&this.messagingSystem.publish("AccountsController:accountRenamed",s)}))}async updateAccounts(){const e=await y(this,r,"m",o).call(this),t=await y(this,r,"m",a).call(this),n=new Map,s=this.state.internalAccounts.accounts,i=[...t,...e].reduce(((e,t)=>{const o=(0,A.keyringTypeToName)(t.metadata.keyring.type),a=n.get(o)??0;a?n.set(o,a+1):n.set(o,1);const i=s[t.id];return e[t.id]={...t,metadata:{...t.metadata,name:y(this,r,"m",f).call(this,i?.id,"name")??`${o} ${a+1}`,importTime:y(this,r,"m",f).call(this,i?.id,"importTime")??Date.now(),lastSelected:y(this,r,"m",f).call(this,i?.id,"lastSelected")??0}},e}),{});this.update((e=>{if(e.internalAccounts.accounts=i,!e.internalAccounts.accounts[e.internalAccounts.selectedAccount]){const t=y(this,r,"m",d).call(this,Object.values(i));t?(e.internalAccounts.selectedAccount=t.id,e.internalAccounts.accounts[t.id].metadata.lastSelected=y(this,r,"m",h).call(this),y(this,r,"m",m).call(this,t)):e.internalAccounts.selectedAccount=""}}))}loadBackup(e){e.internalAccounts&&this.update((t=>{t.internalAccounts=e.internalAccounts}))}getNextAvailableAccountName(e=k.KeyringTypes.hd,t){const n=(0,A.keyringTypeToName)(e),s=y(this,r,"m",c).call(this,e,t),o=s.reduce(((e,t)=>{const r=new RegExp(`${n} ([0-9]+)$`,"u").exec(t.metadata.name);if(r){const t=parseInt(r[1],10);return Math.max(e,t)}return e}),0),a=Math.max(s.length+1,o+1);return`${n} ${a}`}}n.AccountsController=P,r=new WeakSet,s=function(e,t){return{id:(0,A.getUUIDFromAddressOfNormalAccount)(e),address:e,options:{},methods:[b.EthMethod.PersonalSign,b.EthMethod.Sign,b.EthMethod.SignTransaction,b.EthMethod.SignTypedDataV1,b.EthMethod.SignTypedDataV3,b.EthMethod.SignTypedDataV4],type:b.EthAccountType.Eoa,metadata:{name:"",importTime:Date.now(),keyring:{type:t}}}},o=async function(){const[e]=this.messagingSystem.call("KeyringController:getKeyringsByType",v.SnapKeyring.type);if(!e)return[];return e.listAccounts()},a=async function(){const e=await this.messagingSystem.call("KeyringController:getAccounts"),t=[];for(const n of e){const e=await this.messagingSystem.call("KeyringController:getKeyringForAccount",n),s=e.type;if(!(0,A.isNormalKeyringType)(s))continue;const o=(0,A.getUUIDFromAddressOfNormalAccount)(n),a=y(this,r,"m",f).call(this,o,"nameLastUpdatedAt");t.push({id:o,address:n,options:{},methods:[b.EthMethod.PersonalSign,b.EthMethod.Sign,b.EthMethod.SignTransaction,b.EthMethod.SignTypedDataV1,b.EthMethod.SignTypedDataV3,b.EthMethod.SignTypedDataV4],type:b.EthAccountType.Eoa,metadata:{name:y(this,r,"m",f).call(this,o,"name")??"",...a&&{nameLastUpdatedAt:a},importTime:y(this,r,"m",f).call(this,o,"importTime")??Date.now(),lastSelected:y(this,r,"m",f).call(this,o,"lastSelected")??0,keyring:{type:e.type}}})}return t},i=function(e){if(e.isUnlocked&&e.keyrings.length>0){const t=[],n=[];for(const r of e.keyrings)r.type===k.KeyringTypes.snap?n.push(...r.accounts.map((e=>({address:e,type:r.type})))):t.push(...r.accounts.map((e=>({address:e,type:r.type}))));const{previousNormalInternalAccounts:s,previousSnapInternalAccounts:o}=this.listMultichainAccounts().reduce(((e,t)=>(t.metadata.keyring.type===k.KeyringTypes.snap?e.previousSnapInternalAccounts.push(t):e.previousNormalInternalAccounts.push(t),e)),{previousNormalInternalAccounts:[],previousSnapInternalAccounts:[]}),a=[],i=[];for(const e of t)this.state.internalAccounts.accounts[(0,A.getUUIDFromAddressOfNormalAccount)(e.address)]||a.push(e);for(const e of n)o.find((t=>t.address.toLowerCase()===e.address.toLowerCase()))||a.push(e);for(const e of s)t.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||i.push(e);for(const e of o)n.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||i.push(e);this.update((e=>{if(i.length>0)for(const t of i)e.internalAccounts.accounts=y(this,r,"m",g).call(this,e.internalAccounts.accounts,t.id);if(a.length>0)for(const t of a)e.internalAccounts.accounts=y(this,r,"m",p).call(this,e.internalAccounts.accounts,t);const t=Object.values(e.internalAccounts.accounts);if(!e.internalAccounts.accounts[this.state.internalAccounts.selectedAccount]){const n=y(this,r,"m",d).call(this,t);n?(e.internalAccounts.selectedAccount=n.id,e.internalAccounts.accounts[n.id].metadata.lastSelected=y(this,r,"m",h).call(this),y(this,r,"m",m).call(this,n)):e.internalAccounts.selectedAccount=""}}))}},l=function(e){const{snaps:t}=e,n=this.listMultichainAccounts().filter((e=>e.metadata.snap));this.update((e=>{n.forEach((n=>{const r=e.internalAccounts.accounts[n.id];if(r.metadata.snap){const e=r.metadata.snap.id,n=t[e];n&&(r.metadata.snap.enabled=n.enabled&&!n.blocked)}}))}))},c=function(e,t){return(t??this.listMultichainAccounts()).filter((t=>e===k.KeyringTypes.hd||e===k.KeyringTypes.simple?t.metadata.keyring.type===k.KeyringTypes.hd||t.metadata.keyring.type===k.KeyringTypes.simple:t.metadata.keyring.type===e))},d=function(e){const[t]=e.sort(((e,t)=>(t.metadata.lastSelected??0)-(e.metadata.lastSelected??0)));return t},u=function(e,t){return e.type.startsWith((0,S.parseCaipChainId)(t).namespace)},h=function(){return Date.now()},p=function(e,t){let n;if(t.type!==k.KeyringTypes.snap)n=y(this,r,"m",s).call(this,t.address,t.type);else{const[r]=this.messagingSystem.call("KeyringController:getKeyringsByType",v.SnapKeyring.type);if(n=r.getAccountByAddress(t.address),!n)return e}const o=0===Object.keys(e).length,a=this.getNextAvailableAccountName(n.metadata.keyring.type,Object.values(e)),i={...n,metadata:{...n.metadata,name:a,importTime:Date.now(),lastSelected:o?y(this,r,"m",h).call(this):0}};return e[n.id]=i,this.messagingSystem.publish("AccountsController:accountAdded",i),e},m=function(e){(0,b.isEvmAccountType)(e.type)&&this.messagingSystem.publish("AccountsController:selectedEvmAccountChange",e),this.messagingSystem.publish("AccountsController:selectedAccountChange",e)},g=function(e,t){return delete e[t],this.messagingSystem.publish("AccountsController:accountRemoved",t),e},f=function(e,t,n){const r=n??this.getAccount(e);return r?r.metadata[t]:undefined},C=function(){this.messagingSystem.registerActionHandler(`${T}:setSelectedAccount`,this.setSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:listAccounts`,this.listAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:listMultichainAccounts`,this.listMultichainAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:setAccountName`,this.setAccountName.bind(this)),this.messagingSystem.registerActionHandler(`${T}:updateAccounts`,this.updateAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getSelectedAccount`,this.getSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getSelectedMultichainAccount`,this.getSelectedMultichainAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getAccountByAddress`,this.getAccountByAddress.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getNextAvailableAccountName`,this.getNextAvailableAccountName.bind(this)),this.messagingSystem.registerActionHandler("AccountsController:getAccount",this.getAccount.bind(this)),this.messagingSystem.registerActionHandler("AccountsController:updateAccountMetadata",this.updateAccountMetadata.bind(this))}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/AccountsController.cjs"}],[1347,{"./AccountsController.cjs":1346,"./utils.cjs":1348},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getUUIDFromAddressOfNormalAccount=n.keyringTypeToName=n.AccountsController=void 0;var r=e("./AccountsController.cjs");Object.defineProperty(n,"AccountsController",{enumerable:!0,get:function(){return r.AccountsController}});var s=e("./utils.cjs");Object.defineProperty(n,"keyringTypeToName",{enumerable:!0,get:function(){return s.keyringTypeToName}}),Object.defineProperty(n,"getUUIDFromAddressOfNormalAccount",{enumerable:!0,get:function(){return s.getUUIDFromAddressOfNormalAccount}})}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/index.cjs"}],[1348,{"@ethereumjs/util":478,"@metamask/keyring-controller":1896,"ethereum-cryptography/sha256":3787,uuid:5175},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isNormalKeyringType=n.getUUIDFromAddressOfNormalAccount=n.getUUIDOptionsFromAddressOfNormalAccount=n.keyringTypeToName=void 0;const r=e("@ethereumjs/util"),s=e("@metamask/keyring-controller"),o=e("ethereum-cryptography/sha256"),a=e("uuid");function i(e){return{random:(0,o.sha256)((0,r.toBuffer)(e)).slice(0,16)}}n.keyringTypeToName=function(e){if((0,s.isCustodyKeyring)(e))return"Custody";switch(e){case s.KeyringTypes.simple:case s.KeyringTypes.hd:return"Account";case s.KeyringTypes.trezor:return"Trezor";case s.KeyringTypes.ledger:return"Ledger";case s.KeyringTypes.lattice:return"Lattice";case s.KeyringTypes.qr:return"QR";case s.KeyringTypes.snap:return"Snap Account";default:throw new Error(`Unknown keyring ${e}`)}},n.getUUIDOptionsFromAddressOfNormalAccount=i,n.getUUIDFromAddressOfNormalAccount=function(e){return(0,a.v4)(i(e))},n.isNormalKeyringType=function(e){return e!==s.KeyringTypes.snap}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/utils.cjs"}],[1349,{"@metamask/base-controller":1396,"@metamask/controller-utils":1422},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("@metamask/base-controller"),s=e("@metamask/controller-utils"),o=(e=>(e.externallyOwnedAccounts="EXTERNALLY_OWNED_ACCOUNTS",e.contractAccounts="CONTRACT_ACCOUNTS",e.nonAccounts="NON_ACCOUNTS",e))(o||{}),a="AddressBookController",i={addressBook:{persist:!0,anonymous:!1}},l=()=>({addressBook:{}}),c=class extends r.BaseController{constructor({messenger:e,state:t}){const n={addressBook:{},...t};super({messenger:e,metadata:i,name:a,state:n})}clear(){this.update((e=>{e.addressBook={}}))}delete(e,t){return t=s.toChecksumHexAddress.call(void 0,t),!!([e,t].every((e=>s.isSafeDynamicKey.call(void 0,e)))&&s.isValidHexAddress.call(void 0,t)&&this.state.addressBook[e]&&this.state.addressBook[e][t])&&(this.update((n=>{delete n.addressBook[e][t],0===Object.keys(n.addressBook[e]).length&&delete n.addressBook[e]})),!0)}set(e,t,n=s.toHex.call(void 0,1),r="",o){if(e=s.toChecksumHexAddress.call(void 0,e),!s.isValidHexAddress.call(void 0,e))return!1;const a={address:e,chainId:n,isEns:!1,memo:r,name:t,addressType:o},i=s.normalizeEnsName.call(void 0,t);return i&&(a.name=i,a.isEns=!0),this.update((t=>{t.addressBook={...this.state.addressBook,[n]:{...this.state.addressBook[n],[e]:a}}})),!0}},d=c;n.AddressType=o,n.controllerName=a,n.getDefaultAddressBookControllerState=l,n.AddressBookController=c,n.AddressBookController_default=d}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/chunk-QIOW2RCR.js"}],[1350,{"./chunk-QIOW2RCR.js":1349},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-QIOW2RCR.js");n.AddressBookController=r.AddressBookController,n.getDefaultAddressBookControllerState=r.getDefaultAddressBookControllerState}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/index.js"}],[1351,{"@metamask/base-controller":1358},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o=(e,t,n)=>(((e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)})(e,t,"access private method"),n),a=e("@metamask/base-controller"),i={announcements:{}},l={announcements:{persist:!0,anonymous:!0}},c=class extends a.BaseController{constructor({messenger:e,state:t,allAnnouncements:n}){const a={...i,...t};super({messenger:e,metadata:l,name:"AnnouncementController",state:a}),((e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)})(this,r),o(this,r,s).call(this,n)}resetViewed(){this.update((({announcements:e})=>{for(const t of Object.values(e))t.isShown=!1}))}updateViewed(e){this.update((({announcements:t})=>{for(const n of Object.keys(e).map(Number))t[n].isShown=e[n]}))}};r=new WeakSet,s=function(e){this.update((t=>{Object.values(e).forEach((e=>{t.announcements[e.id]=t.announcements[e.id]??{...e,isShown:!1}}))}))},n.AnnouncementController=c}}},{package:"@metamask/announcement-controller",file:"node_modules/@metamask/announcement-controller/dist/chunk-ZGM3XNIO.js"}],[1352,{"./chunk-ZGM3XNIO.js":1351},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-ZGM3XNIO.js");n.AnnouncementController=r.AnnouncementController}}},{package:"@metamask/announcement-controller",file:"node_modules/@metamask/announcement-controller/dist/index.js"}],[1353,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=class{constructor(e={},t={}){this.defaultConfig={},this.defaultState={},this.disabled=!1,this.name="BaseController",this.internalConfig=this.defaultConfig,this.internalState=this.defaultState,this.internalListeners=[],this.initialState=t,this.initialConfig=e}initialize(){return this.internalState=this.defaultState,this.internalConfig=this.defaultConfig,this.configure(this.initialConfig),this.update(this.initialState),this}get config(){return this.internalConfig}get state(){return this.internalState}configure(e,t=!1,n=!0){if(n){this.internalConfig=t?e:Object.assign(this.internalConfig,e);for(const e of Object.keys(this.internalConfig)){const t=this.internalConfig[e];void 0!==t&&(this[e]=t)}}else for(const t of Object.keys(e))if(void 0!==this.internalConfig[t]){const n=e[t];this.internalConfig[t]=n,this[t]=n}}notify(){this.disabled||this.internalListeners.forEach((e=>{e(this.internalState)}))}subscribe(e){this.internalListeners.push(e)}unsubscribe(e){const t=this.internalListeners.findIndex((t=>e===t));return t>-1&&this.internalListeners.splice(t,1),t>-1}update(e,t=!1){this.internalState=t?Object.assign({},e):Object.assign({},this.internalState,e),this.notify()}},s=r;n.BaseControllerV1=r,n.BaseControllerV1_default=s}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js"}],[1354,{"./chunk-UJFCPTF3.js":1356,"./chunk-Z4BLTVTB.js":1357},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o,a,i=e("./chunk-UJFCPTF3.js"),l=e("./chunk-Z4BLTVTB.js");r=new WeakMap,s=new WeakMap,o=new WeakMap,a=new WeakMap,n.ControllerMessenger=class{constructor(){l.__privateAdd.call(void 0,this,r,new Map),l.__privateAdd.call(void 0,this,s,new Map),l.__privateAdd.call(void 0,this,o,new Map),l.__privateAdd.call(void 0,this,a,new Map)}registerActionHandler(e,t){if(l.__privateGet.call(void 0,this,r).has(e))throw new Error(`A handler for ${e} has already been registered`);l.__privateGet.call(void 0,this,r).set(e,t)}unregisterActionHandler(e){l.__privateGet.call(void 0,this,r).delete(e)}clearActions(){l.__privateGet.call(void 0,this,r).clear()}call(e,...t){const n=l.__privateGet.call(void 0,this,r).get(e);if(!n)throw new Error(`A handler for ${e} has not been registered`);return n(...t)}registerInitialEventPayload({eventType:e,getPayload:t}){l.__privateGet.call(void 0,this,o).set(e,t)}publish(e,...t){const n=l.__privateGet.call(void 0,this,s).get(e);if(n)for(const[e,r]of n.entries())try{if(r){const n=l.__privateGet.call(void 0,this,a).get(e),s=r(...t);s!==n&&(l.__privateGet.call(void 0,this,a).set(e,s),e(s,n))}else e(...t)}catch(e){setTimeout((()=>{throw e}))}}subscribe(e,t,n){let r=l.__privateGet.call(void 0,this,s).get(e);if(r||(r=new Map,l.__privateGet.call(void 0,this,s).set(e,r)),r.set(t,n),n){const r=l.__privateGet.call(void 0,this,o).get(e);if(r){const e=n(...r());l.__privateGet.call(void 0,this,a).set(t,e)}}}unsubscribe(e,t){const n=l.__privateGet.call(void 0,this,s).get(e);if(!n||!n.has(t))throw new Error(`Subscription not found for event: ${e}`);n.get(t)&&l.__privateGet.call(void 0,this,a).delete(t),n.delete(t)}clearEventSubscriptions(e){l.__privateGet.call(void 0,this,s).delete(e)}clearSubscriptions(){l.__privateGet.call(void 0,this,s).clear()}getRestricted({name:e,allowedActions:t,allowedEvents:n}){return new(0,i.RestrictedControllerMessenger)({controllerMessenger:this,name:e,allowedActions:t,allowedEvents:n})}}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js"}],[1355,{"./chunk-Z4BLTVTB.js":1357,immer:4195},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s=e("./chunk-Z4BLTVTB.js"),o=e("immer");o.enablePatches.call(void 0);function a(e,t,n){return Object.keys(e).reduce(((r,s)=>{try{const o=t[s];if(!o)throw new Error(`No metadata found for '${String(s)}'`);const a=o[n],i=e[s];return"function"==typeof a?r[s]=a(i):a&&(r[s]=i),r}catch(e){return setTimeout((()=>{throw e})),r}}),{})}r=new WeakMap,n.BaseController=class{constructor({messenger:e,metadata:t,name:n,state:a}){s.__privateAdd.call(void 0,this,r,void 0),this.messagingSystem=e,this.name=n,s.__privateSet.call(void 0,this,r,o.freeze.call(void 0,a,!0)),this.metadata=t,this.messagingSystem.registerActionHandler(`${n}:getState`,(()=>this.state)),this.messagingSystem.registerInitialEventPayload({eventType:`${n}:stateChange`,getPayload:()=>[this.state,[]]})}get state(){return s.__privateGet.call(void 0,this,r)}set state(e){throw new Error("Controller state cannot be directly mutated; use 'update' method instead.")}update(e){const[t,n,a]=o.produceWithPatches.call(void 0,s.__privateGet.call(void 0,this,r),e);return s.__privateSet.call(void 0,this,r,t),this.messagingSystem.publish(`${this.name}:stateChange`,t,n),{nextState:t,patches:n,inversePatches:a}}applyPatches(e){const t=o.applyPatches.call(void 0,s.__privateGet.call(void 0,this,r),e);s.__privateSet.call(void 0,this,r,t),this.messagingSystem.publish(`${this.name}:stateChange`,t,e)}destroy(){this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`)}},n.getAnonymizedState=function(e,t){return a(e,t,"anonymous")},n.getPersistentState=function(e,t){return a(e,t,"persist")}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js"}],[1356,{"./chunk-Z4BLTVTB.js":1357},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o,a,i,l,c,d,u,h,p=e("./chunk-Z4BLTVTB.js");r=new WeakMap,s=new WeakMap,o=new WeakMap,a=new WeakMap,i=new WeakSet,l=function(e){const t=p.__privateGet.call(void 0,this,a);return p.__privateMethod.call(void 0,this,u,h).call(this,e)||null!==t&&t.includes(e)},c=new WeakSet,d=function(e){const t=p.__privateGet.call(void 0,this,o);return p.__privateMethod.call(void 0,this,u,h).call(this,e)||null!==t&&t.includes(e)},u=new WeakSet,h=function(e){return e.startsWith(`${p.__privateGet.call(void 0,this,s)}:`)},n.RestrictedControllerMessenger=class{constructor({controllerMessenger:e,name:t,allowedActions:n,allowedEvents:l}){p.__privateAdd.call(void 0,this,i),p.__privateAdd.call(void 0,this,c),p.__privateAdd.call(void 0,this,u),p.__privateAdd.call(void 0,this,r,void 0),p.__privateAdd.call(void 0,this,s,void 0),p.__privateAdd.call(void 0,this,o,void 0),p.__privateAdd.call(void 0,this,a,void 0),p.__privateSet.call(void 0,this,r,e),p.__privateSet.call(void 0,this,s,t),p.__privateSet.call(void 0,this,o,n),p.__privateSet.call(void 0,this,a,l)}registerActionHandler(e,t){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed registering action handlers prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).registerActionHandler(e,t)}unregisterActionHandler(e){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed unregistering action handlers prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).unregisterActionHandler(e)}call(e,...t){if(!p.__privateMethod.call(void 0,this,c,d).call(this,e))throw new Error(`Action missing from allow list: ${e}`);return p.__privateGet.call(void 0,this,r).call(e,...t)}registerInitialEventPayload({eventType:e,getPayload:t}){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).registerInitialEventPayload({eventType:e,getPayload:t})}publish(e,...t){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).publish(e,...t)}subscribe(e,t,n){if(!p.__privateMethod.call(void 0,this,i,l).call(this,e))throw new Error(`Event missing from allow list: ${e}`);return n?p.__privateGet.call(void 0,this,r).subscribe(e,t,n):p.__privateGet.call(void 0,this,r).subscribe(e,t)}unsubscribe(e,t){if(!p.__privateMethod.call(void 0,this,i,l).call(this,e))throw new Error(`Event missing from allow list: ${e}`);p.__privateGet.call(void 0,this,r).unsubscribe(e,t)}clearEventSubscriptions(e){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed clearing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).clearEventSubscriptions(e)}}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js"}],[1357,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};n.__privateGet=(e,t,n)=>(r(e,t,"read from private field"),n?n.call(e):t.get(e)),n.__privateAdd=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},n.__privateSet=(e,t,n,s)=>(r(e,t,"write to private field"),s?s.call(e,n):t.set(e,n),n),n.__privateMethod=(e,t,n)=>(r(e,t,"access private method"),n)}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js"}],[1358,{"./chunk-FTHCJ6HY.js":1353,"./chunk-G42723LG.js":1354,"./chunk-IURK6TKD.js":1355,"./chunk-UJFCPTF3.js":1356,"./chunk-Z4BLTVTB.js":1357},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-FTHCJ6HY.js"),s=e("./chunk-IURK6TKD.js"),o=e("./chunk-G42723LG.js"),a=e("./chunk-UJFCPTF3.js");e("./chunk-Z4BLTVTB.js"),n.BaseController=s.BaseController,n.BaseControllerV1=r.BaseControllerV1,n.ControllerMessenger=o.ControllerMessenger,n.RestrictedControllerMessenger=a.RestrictedControllerMessenger,n.getAnonymizedState=s.getAnonymizedState,n.getPersistentState=s.getPersistentState}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/index.js"}],[136,{"../../shared/constants/app":5248,"../../shared/constants/hardware-wallets":5256,"../../shared/constants/keyring":5257,"../../shared/constants/logs":5259,"../../shared/constants/metametrics":5260,"../../shared/constants/methods-tags":5261,"../../shared/constants/network":5264,"../../shared/constants/permissions":5268,"../../shared/constants/smartTransactions":5272,"../../shared/constants/swaps":5274,"../../shared/constants/time":5276,"../../shared/constants/tokens":5277,"../../shared/constants/transaction":5278,"../../shared/constants/urls":5279,"../../shared/lib/fetch-with-cache":5283,"../../shared/lib/metamask-controller-utils":5285,"../../shared/lib/storage-helpers":5287,"../../shared/lib/token-util":5290,"../../shared/lib/trace":5291,"../../shared/lib/transactions-controller-utils":5292,"../../shared/modules/caip-stream":5299,"../../shared/modules/mv3.utils":5310,"../../shared/modules/network.utils":5311,"../../shared/modules/selectors":5319,"../../shared/modules/selectors/networks":5320,"../../shared/modules/string-utils":5324,"../../shared/modules/transaction.utils":5326,"../../shared/notifications":5328,"../../shared/types/bridge-status":5329,"../../ui/helpers/utils/snaps":6292,"./constants/stream":8,"./controllers/account-order":9,"./controllers/account-tracker-controller":10,"./controllers/alert-controller":11,"./controllers/app-metadata":12,"./controllers/app-state-controller":13,"./controllers/bridge-status/bridge-status-controller":14,"./controllers/bridge-status/constants":15,"./controllers/bridge/bridge-controller":18,"./controllers/bridge/constants":19,"./controllers/bridge/types":20,"./controllers/decrypt-message":21,"./controllers/encryption-public-key":22,"./controllers/metametrics-controller":23,"./controllers/metametrics-data-deletion/metametrics-data-deletion":24,"./controllers/network-order":25,"./controllers/onboarding":26,"./controllers/permissions":30,"./controllers/preferences-controller":33,"./controllers/push-notifications":36,"./controllers/swaps":37,"./detect-multiple-instances":40,"./lib/AccountIdentitiesPetnamesBridge":51,"./lib/AddressBookPetnamesBridge":52,"./lib/ComposableObservableStore":53,"./lib/PatchStore":54,"./lib/SnapsNameProvider":55,"./lib/WeakRefObjectMap":56,"./lib/accounts/BalancesController":57,"./lib/backup":60,"./lib/createDupeReqFilterStream":61,"./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware":62,"./lib/createLoggerMiddleware":63,"./lib/createMainFrameOriginMiddleware":64,"./lib/createMetaRPCHandler":65,"./lib/createMetamaskMiddleware":66,"./lib/createOnboardingMiddleware":67,"./lib/createOriginMiddleware":68,"./lib/createRPCMethodTrackingMiddleware":69,"./lib/createTabIdMiddleware":71,"./lib/createTracingMiddleware":72,"./lib/encryptor-factory":73,"./lib/hardware-keyring-builder-factory":81,"./lib/multichain/address":87,"./lib/offscreen-bridge/lattice-offscreen-keyring":90,"./lib/offscreen-bridge/ledger-offscreen-bridge":91,"./lib/offscreen-bridge/trezor-offscreen-bridge":92,"./lib/ppom/indexed-db-backend":93,"./lib/ppom/ppom":96,"./lib/ppom/ppom-middleware":94,"./lib/ppom/ppom-util":95,"./lib/rpc-method-middleware":110,"./lib/segment":112,"./lib/signature/util":116,"./lib/snap-keyring":117,"./lib/snap-keyring/keyring-snaps-permissions":118,"./lib/state-utils":123,"./lib/stream-utils":124,"./lib/transaction/decode/util":130,"./lib/transaction/metrics":131,"./lib/transaction/smart-transactions":132,"./lib/transaction/util":133,"./lib/tx-verification/tx-verification-middleware":134,"./lib/util":135,"./services/data-deletion-service":292,"./snaps/preinstalled-snaps":293,"./translate":294,"@ethersproject/abi":500,"@keystonehq/metamask-airgapped-keyring":668,"@metamask/accounts-controller":1347,"@metamask/address-book-controller":1350,"@metamask/announcement-controller":1352,"@metamask/approval-controller":1361,"@metamask/assets-controllers":1381,"@metamask/base-controller":1396,"@metamask/controller-utils":1422,"@metamask/ens-controller":1450,"@metamask/eth-json-rpc-filters":1526,"@metamask/eth-json-rpc-filters/subscriptionManager":1528,"@metamask/eth-json-rpc-middleware":1598,"@metamask/eth-ledger-bridge-keyring":1633,"@metamask/eth-query":1640,"@metamask/eth-trezor-keyring":1745,"@metamask/ethjs-query":1762,"@metamask/gas-fee-controller":1771,"@metamask/json-rpc-engine":1780,"@metamask/json-rpc-middleware-stream":1784,"@metamask/keyring-api":1843,"@metamask/keyring-controller":1896,"@metamask/logging-controller":1929,"@metamask/metamask-eth-abis":1944,"@metamask/name-controller":1955,"@metamask/network-controller":1990,"@metamask/notification-services-controller":2115,"@metamask/obs-store":2126,"@metamask/obs-store/dist/asStream":2125,"@metamask/permission-controller":2133,"@metamask/permission-log-controller":2142,"@metamask/phishing-controller":2166,"@metamask/ppom-validator":2201,"@metamask/profile-sync-controller":2225,"@metamask/queued-request-controller":2245,"@metamask/rate-limit-controller":2247,"@metamask/rpc-errors":2304,"@metamask/scure-bip39/dist/wordlists/english":2308,"@metamask/selected-network-controller":2320,"@metamask/signature-controller":2322,"@metamask/smart-transactions-controller":2357,"@metamask/smart-transactions-controller/dist/types":2358,"@metamask/snaps-controllers":2418,"@metamask/snaps-rpc-methods":2479,"@metamask/snaps-utils":2647,"@metamask/transaction-controller":2698,"@metamask/user-operation-controller":2722,"@sentry/browser":2871,"await-semaphore":3454,buffer:3561,"eth-chainlist":3751,"eth-lattice-keyring":3756,events:3868,lodash:4380,loglevel:4386,nanoid:4473,"readable-stream":4791},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.ONE_KEY_VIA_TREZOR_MINOR_VERSION=n.METAMASK_CONTROLLER_EVENTS=void 0;var r=Jt(e("events")),s=e("readable-stream"),o=e("@metamask/assets-controllers"),a=e("@metamask/json-rpc-engine"),i=e("@metamask/json-rpc-middleware-stream"),l=e("@metamask/obs-store"),c=e("@metamask/obs-store/dist/asStream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),h=e("@metamask/keyring-controller"),p=Jt(e("@metamask/eth-json-rpc-filters")),m=Jt(e("@metamask/eth-json-rpc-filters/subscriptionManager")),g=e("@metamask/rpc-errors"),f=e("await-semaphore"),C=Jt(e("loglevel")),y=e("@metamask/eth-trezor-keyring"),w=e("@metamask/eth-ledger-bridge-keyring"),v=Jt(e("eth-lattice-keyring")),b=e("eth-chainlist"),k=e("@keystonehq/metamask-airgapped-keyring"),S=Jt(e("@metamask/eth-query")),A=Jt(e("@metamask/ethjs-query")),T=e("nanoid"),E=e("@sentry/browser"),M=e("@metamask/address-book-controller"),P=e("@metamask/approval-controller"),_=e("@metamask/base-controller"),I=e("@metamask/ens-controller"),N=e("@metamask/phishing-controller"),R=e("@metamask/announcement-controller"),O=e("@metamask/network-controller"),x=e("@metamask/gas-fee-controller"),B=e("@metamask/permission-controller"),j=Jt(e("@metamask/smart-transactions-controller")),D=e("@metamask/smart-transactions-controller/dist/types"),U=e("@metamask/selected-network-controller"),F=e("@metamask/logging-controller"),L=e("@metamask/permission-log-controller"),$=e("@metamask/rate-limit-controller"),H=e("@metamask/snaps-controllers"),q=e("@metamask/snaps-rpc-methods"),G=e("@metamask/controller-utils"),K=e("@metamask/accounts-controller"),V=e("@metamask/signature-controller"),W=e("@metamask/ppom-validator"),z=e("@metamask/scure-bip39/dist/wordlists/english"),J=e("@metamask/name-controller"),Y=e("@metamask/queued-request-controller"),Q=e("@metamask/user-operation-controller"),X=e("@metamask/transaction-controller"),Z=e("@metamask/snaps-utils"),ee=e("@ethersproject/abi"),te=e("@metamask/metamask-eth-abis"),ne=e("@metamask/keyring-api"),re=e("@metamask/profile-sync-controller"),se=e("@metamask/notification-services-controller"),oe=e("../../shared/constants/methods-tags"),ae=e("../../shared/constants/transaction"),ie=e("../../shared/constants/swaps"),le=e("../../shared/constants/network"),ce=e("../../shared/constants/smartTransactions"),de=e("../../shared/constants/hardware-wallets"),ue=e("../../shared/constants/keyring"),he=e("../../shared/constants/permissions"),pe=e("../../shared/notifications"),me=e("../../shared/constants/time"),ge=e("../../shared/constants/app"),fe=e("../../shared/constants/metametrics"),Ce=e("../../shared/constants/logs"),ye=e("../../shared/lib/storage-helpers"),we=e("../../shared/lib/token-util"),ve=e("../../shared/modules/string-utils"),be=e("../../shared/modules/transaction.utils"),ke=e("../../shared/constants/tokens"),Se=e("../../shared/lib/metamask-controller-utils"),Ae=e("../../shared/modules/mv3.utils"),Te=e("../../shared/modules/network.utils"),Ee=e("../../shared/modules/selectors"),Me=e("../../shared/modules/caip-stream"),Pe=e("../../shared/constants/urls"),_e=e("../../shared/lib/transactions-controller-utils"),Ie=e("../../shared/modules/selectors/networks"),Ne=e("../../shared/lib/trace"),Re=e("../../ui/helpers/utils/snaps"),Oe=e("../../shared/types/bridge-status"),xe=Jt(e("../../shared/lib/fetch-with-cache")),Be=e("./lib/accounts/BalancesController"),je=e("./lib/transaction/metrics"),De=e("./lib/transaction/smart-transactions"),Ue=e("./lib/snap-keyring/keyring-snaps-permissions"),Fe=e("./lib/SnapsNameProvider"),Le=e("./lib/AddressBookPetnamesBridge"),$e=e("./lib/AccountIdentitiesPetnamesBridge"),He=e("./lib/ppom/ppom-middleware"),qe=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=zt(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&{}.hasOwnProperty.call(e,o)){var a=s?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(e("./lib/ppom/ppom")),Ge=e("./detect-multiple-instances"),Ke=Jt(e("./lib/ComposableObservableStore")),Ve=Jt(e("./controllers/account-tracker-controller")),We=Jt(e("./lib/createDupeReqFilterStream")),ze=Jt(e("./lib/createLoggerMiddleware")),Je=e("./lib/rpc-method-middleware"),Ye=Jt(e("./lib/createOriginMiddleware")),Qe=Jt(e("./lib/createMainFrameOriginMiddleware")),Xe=Jt(e("./lib/createTabIdMiddleware")),Ze=e("./controllers/network-order"),et=e("./controllers/account-order"),tt=Jt(e("./lib/createOnboardingMiddleware")),nt=e("./lib/stream-utils"),rt=e("./controllers/preferences-controller"),st=e("./controllers/app-state-controller"),ot=e("./controllers/alert-controller"),at=Jt(e("./controllers/onboarding")),it=Jt(e("./lib/backup")),lt=Jt(e("./controllers/decrypt-message")),ct=Jt(e("./controllers/swaps")),dt=Jt(e("./controllers/metametrics-controller")),ut=e("./lib/segment"),ht=Jt(e("./lib/createMetaRPCHandler")),pt=e("./lib/util"),mt=Jt(e("./lib/createMetamaskMiddleware")),gt=e("./lib/hardware-keyring-builder-factory"),ft=Jt(e("./controllers/encryption-public-key")),Ct=Jt(e("./controllers/app-metadata")),yt=e("./controllers/permissions"),wt=e("./controllers/metametrics-data-deletion/metametrics-data-deletion"),vt=e("./services/data-deletion-service"),bt=Jt(e("./lib/createRPCMethodTrackingMiddleware")),kt=e("./lib/ppom/indexed-db-backend"),St=e("./translate"),At=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),Tt=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),Et=e("./lib/snap-keyring"),Mt=e("./lib/encryptor-factory"),Pt=e("./lib/transaction/util"),_t=e("./lib/signature/util"),It=e("./lib/offscreen-bridge/lattice-offscreen-keyring"),Nt=Jt(e("./snaps/preinstalled-snaps")),Rt=e("./lib/WeakRefObjectMap"),Ot=e("./constants/stream"),xt=e("./lib/tx-verification/tx-verification-middleware"),Bt=e("./lib/ppom/ppom-util"),jt=Jt(e("./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware")),Dt=e("./lib/multichain/address"),Ut=e("./lib/transaction/decode/util"),Ft=e("./controllers/bridge/types"),Lt=Jt(e("./controllers/bridge/bridge-controller")),$t=e("./controllers/bridge/constants"),Ht=e("./controllers/push-notifications"),qt=Jt(e("./lib/createTracingMiddleware")),Gt=e("./lib/PatchStore"),Kt=e("./lib/state-utils"),Vt=Jt(e("./controllers/bridge-status/bridge-status-controller")),Wt=e("./controllers/bridge-status/constants");function zt(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(zt=function(e){return e?n:t})(e)}function Jt(e){return e&&e.__esModule?e:{default:e}}function Yt(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function Qt(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Xt(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const{TRIGGER_TYPES:Zt}=se.NotificationServicesController.Constants,en=(n.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange",QUEUED_REQUEST_STATE_CHANGE:"QueuedRequestController:stateChange",METAMASK_NOTIFICATIONS_LIST_UPDATED:"NotificationServicesController:notificationsListUpdated",METAMASK_NOTIFICATIONS_MARK_AS_READ:"NotificationServicesController:markNotificationsAsRead"},n.ONE_KEY_VIA_TREZOR_MINOR_VERSION=99);var tn=new WeakSet;class nn extends r.default{constructor(e){var t;super(),Yt(this,tn),Qt(this,"_trackSnapExportUsage",(0,u.wrap)((0,u.memoize)((()=>(0,u.throttle)(((e,t,n,r)=>{var s;return this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.SnapExportUsed,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category,success:n,origin:r}})}),60*me.SECOND)),((e,t,n,r)=>`${e}${t}${r}`)),((e,...t)=>e(...t)(...t)))),Qt(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:n,networkClientId:r})=>{switch(t){case G.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:r});case G.ERC721:case G.ERC1155:return this.nftController.watchNft(e,t,n);default:throw new Error(`Asset type ${t} not supported`)}})),Qt(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof B.PermissionsRequestNotFoundError))throw e}})),Qt(this,"updateCaveat",((e,t,n,r)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,n,r)}catch(e){if(!(e instanceof B.PermissionsRequestNotFoundError))throw e}})),Qt(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw C.default.error(e.message),e}})),Qt(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw C.default.error(e.message),e}})),Qt(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw C.default.error(e.message),e}})),Qt(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof B.PermissionsRequestNotFoundError))throw e}})),Qt(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof B.PermissionsRequestNotFoundError))throw e}})),Qt(this,"resolvePendingApproval",(async(e,t,n)=>{try{await this.approvalController.accept(e,t,n)}catch(e){if(!(e instanceof P.ApprovalRequestNotFoundError))throw e}})),Qt(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new g.JsonRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof P.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*me.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const r=e.initState||{},s="12.9.3";this.recordFirstTimeInfo(r),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.offscreenPromise=e.offscreenPromise??Promise.resolve(),this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.initializeChainlist(),this.controllerMessenger=new _.ControllerMessenger,this.loggingController=new F.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController",allowedActions:[],allowedEvents:[]}),state:r.LoggingController}),this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new Ke.default({state:r,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new f.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&this.loggingController.add({type:F.LogType.GenericLog,data:{event:Ce.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:s}})})),this.appMetadataController=new Ct.default({state:r.AppMetadataController,messenger:this.controllerMessenger.getRestricted({name:"AppMetadataController",allowedActions:[],allowedEvents:[]}),currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:s});const a=()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(g.providerErrors.userRejectedRequest())};this.approvalController=new P.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[G.ApprovalType.PersonalSign,G.ApprovalType.EthSignTypedData,G.ApprovalType.Transaction,G.ApprovalType.WatchAsset,G.ApprovalType.EthGetEncryptionPublicKey,G.ApprovalType.EthDecrypt]}),this.queuedRequestController=new Y.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController",allowedActions:["NetworkController:getState","NetworkController:setActiveNetwork","SelectedNetworkController:getNetworkClientIdForDomain"],allowedEvents:["SelectedNetworkController:stateChange"]}),shouldRequestSwitchNetwork:({method:e})=>oe.methodsRequiringNetworkSwitch.includes(e),canRequestSwitchNetworkWithoutApproval:({method:e})=>oe.methodsThatCanSwitchNetworkWithoutApproval.includes(e),clearPendingConfirmations:a,showApprovalRequest:()=>{this.approvalController.getTotalApprovalCount()>0&&e.showUserConfirmation()}});const i=this.controllerMessenger.getRestricted({name:"NetworkController"});let l=r.NetworkController;if(!l){l=(0,O.getDefaultNetworkControllerState)();const e=l.networkConfigurationsByChainId;let t;e[le.CHAIN_IDS.MAINNET].name=le.MAINNET_DISPLAY_NAME,delete e[le.CHAIN_IDS.GOERLI],delete e[le.CHAIN_IDS.LINEA_GOERLI],Object.values(e).forEach((e=>{const t=e.rpcEndpoints[0].networkClientId;e.blockExplorerUrls=[G.BlockExplorerUrl[t]],e.defaultBlockExplorerUrlIndex=0})),t=e[le.CHAIN_IDS.MAINNET],l.selectedNetworkClientId=t.rpcEndpoints[t.defaultRpcEndpointIndex].networkClientId}this.networkController=new O.NetworkController({messenger:i,state:l,infuraProjectId:e.infuraProjectId}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkVersions={};const c=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange"],allowedActions:["KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new K.AccountsController({messenger:c,state:r.AccountsController});const d=this.controllerMessenger.getRestricted({name:"PreferencesController",allowedActions:["AccountsController:setSelectedAccount","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","NetworkController:getState"],allowedEvents:["AccountsController:stateChange"]});this.preferencesController=new rt.PreferencesController({state:{currentLocale:e.initLangCode??"",...r.PreferencesController},messenger:d});const p=this.controllerMessenger.getRestricted({name:"TokenListController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]});this.tokenListController=new o.TokenListController({chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),preventPollingOnNetworkRestart:!Xt(tn,this,sn).call(this,this.preferencesController.state),messenger:p,state:r.TokenListController});const m=this.controllerMessenger.getRestricted({name:"AssetsContractController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getSelectedNetworkClient","NetworkController:getState"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.assetsContractController=new o.AssetsContractController({messenger:m,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state})});const b=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount","AccountsController:getAccount"],allowedEvents:["NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokenListController:stateChange","NetworkController:stateChange"]});this.tokensController=new o.TokensController({state:r.TokensController,provider:this.provider,messenger:b,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state})});const S=this.controllerMessenger.getRestricted({name:"NftController",allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange"],allowedActions:[`${this.approvalController.name}:addRequest`,`${this.networkController.name}:getNetworkClientById`,"AccountsController:getSelectedAccount","AccountsController:getAccount","AssetsContractController:getERC721AssetName","AssetsContractController:getERC721AssetSymbol","AssetsContractController:getERC721TokenURI","AssetsContractController:getERC721OwnerOf","AssetsContractController:getERC1155BalanceOf","AssetsContractController:getERC1155TokenURI"]});this.nftController=new o.NftController({state:r.NftController,messenger:S,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),onNftAdded:({address:e,symbol:t,tokenId:n,standard:r,source:s})=>this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.NftAdded,category:fe.MetaMetricsEventCategory.Wallet,sensitiveProperties:{token_contract_address:e,token_symbol:t,token_id:n,token_standard:r,asset_type:ae.AssetType.NFT,source:s}})}),this.nftController.setApiKey(null);const A=this.controllerMessenger.getRestricted({name:"NftDetectionController",allowedEvents:["NetworkController:stateChange","PreferencesController:stateChange"],allowedActions:["ApprovalController:addRequest","NetworkController:getState","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount"]});this.nftDetectionController=new o.NftDetectionController({messenger:A,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftState:()=>this.nftController.state,disabled:!this.preferencesController.state.useNftDetection});const T=this.controllerMessenger.getRestricted({name:"MetaMetricsController",allowedActions:["PreferencesController:getState","NetworkController:getState","NetworkController:getNetworkClientById"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.metaMetricsController=new dt.default({state:r.MetaMetricsController,messenger:T,segment:ut.segment,version:"12.9.3",environment:"other",extension:this.extension,captureException:E.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const q=new vt.DataDeletionService,z=this.controllerMessenger.getRestricted({name:"MetaMetricsDataDeletionController",allowedActions:["MetaMetricsController:getState"],allowedEvents:[]});this.metaMetricsDataDeletionController=new wt.MetaMetricsDataDeletionController({dataDeletionService:q,messenger:z,state:r.metaMetricsDataDeletionController});const ee=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),te=ie.GAS_API_BASE_URL;this.gasFeeController=new x.GasFeeController({state:r.GasFeeController,interval:1e4,messenger:ee,clientId:ie.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{i.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${te}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${te}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>(0,Ie.getCurrentChainId)({metamask:this.networkController.state})===le.CHAIN_IDS.BSC,getChainId:()=>(0,Ie.getCurrentChainId)({metamask:this.networkController.state})}),this.appStateController=new st.AppStateController({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:r.AppStateController,onInactiveTimeout:()=>this.setLocked(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,"PreferencesController:getState"],allowedEvents:["KeyringController:qrKeyringStateChange","PreferencesController:stateChange"]}),extension:this.extension});const ne=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new o.CurrencyRateController({includeUsdRate:!0,messenger:ne,state:r.CurrencyController});const de=this.currencyRateController.fetchMultiExchangeRate.bind(this.currencyRateController);this.currencyRateController.fetchMultiExchangeRate=(...e)=>this.preferencesController.state.useCurrencyRateCheck?de(...e):{conversionRate:null,usdConversionRate:null};const ue=this.controllerMessenger.getRestricted({name:"TokenBalancesController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokensController:getState","PreferencesController:getState","AccountsController:getSelectedAccount"],allowedEvents:["PreferencesController:stateChange","TokensController:stateChange","NetworkController:stateChange"]});this.tokenBalancesController=new o.TokenBalancesController({messenger:ue,state:r.TokenBalancesController,interval:3e4});const ye=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new N.PhishingController({messenger:ye,state:r.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined}),this.ppomController=new W.PPOMController({messenger:this.controllerMessenger.getRestricted({name:"PPOMController",allowedEvents:["NetworkController:stateChange","NetworkController:networkDidChange"],allowedActions:["NetworkController:getNetworkClientById"]}),storageBackend:new kt.IndexedDBPPOMStorage("PPOMDB",1),provider:this.provider,ppomProvider:{PPOM:qe.PPOM,ppomInit:()=>qe.default("./ppom_bg.wasm")},state:r.PPOMController,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),securityAlertsEnabled:this.preferencesController.state.securityAlertsEnabled,onPreferencesChange:d.subscribe.bind(d,"PreferencesController:stateChange"),cdnBaseUrl:"static.cx.metamask.io/api/v1/confirmations/ppom",blockaidPublicKey:"066ad3e8af5583385e312c156d238055215d5f25247c1e91055afa756cb98a88"});const we=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new R.AnnouncementController({messenger:we,allAnnouncements:pe.UI_NOTIFICATIONS,state:r.AnnouncementController});const ve=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new Ze.NetworkOrderController({messenger:ve,state:r.NetworkOrderController});const be=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new et.AccountOrderController({messenger:be,state:r.AccountOrderController});const ke=this.controllerMessenger.getRestricted({name:"BalancesController",allowedEvents:["AccountsController:accountAdded","AccountsController:accountRemoved"],allowedActions:["AccountsController:listMultichainAccounts","SnapController:handleRequest"]});this.multichainBalancesController=new Be.BalancesController({messenger:ke,state:r.MultichainBalancesController});const Se=this.controllerMessenger.getRestricted({name:"RatesController"});this.multichainRatesController=new o.RatesController({state:r.MultichainRatesController,messenger:Se,includeUsdRate:!0,fetchMultiExchangeRate:o.fetchMultiExchangeRate});const Te=this.controllerMessenger.getRestricted({name:"TokenRatesController",allowedActions:["TokensController:getState","NetworkController:getNetworkClientById","NetworkController:getState","AccountsController:getAccount","AccountsController:getSelectedAccount"],allowedEvents:["NetworkController:stateChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokensController:stateChange"]});this.tokenRatesController=new o.TokenRatesController({state:r.TokenRatesController,messenger:Te,tokenPricesService:new o.CodefiTokenPricesServiceV2,disabled:!this.preferencesController.state.useCurrencyRateCheck}),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:n}=e,{useCurrencyRateCheck:r}=t;r&&!n?this.tokenRatesController.enable():!r&&n&&this.tokenRatesController.disable()}),this.preferencesController.state)),this.ensController=new I.EnsController({messenger:this.controllerMessenger.getRestricted({name:"EnsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:[]}),onNetworkDidChange:i.subscribe.bind(i,"NetworkController:networkDidChange")});const Me=this.controllerMessenger.getRestricted({name:"OnboardingController",allowedActions:[],allowedEvents:[]});this.onboardingController=new at.default({messenger:Me,state:r.OnboardingController});let Pe=[(0,h.keyringBuilderFactory)(k.MetaMaskKeyring)];const _e=null===(t=this.opts.overrides)||void 0===t?void 0:t.keyrings;if(!1===Ae.isManifestV3){const e=[(null==_e?void 0:_e.lattice)||v.default,k.MetaMaskKeyring],t=[{keyring:(null==_e?void 0:_e.trezor)||y.TrezorKeyring,bridge:(null==_e?void 0:_e.trezorBridge)||y.TrezorConnectBridge},{keyring:(null==_e?void 0:_e.ledger)||w.LedgerKeyring,bridge:(null==_e?void 0:_e.ledgerBridge)||w.LedgerIframeBridge}];Pe=e.map((e=>(0,h.keyringBuilderFactory)(e))),t.forEach((e=>Pe.push((0,gt.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else Pe.push((0,gt.hardwareKeyringBuilderFactory)(y.TrezorKeyring,(null==_e?void 0:_e.trezorBridge)||At.TrezorOffscreenBridge),(0,gt.hardwareKeyringBuilderFactory)(w.LedgerKeyring,(null==_e?void 0:_e.ledgerBridge)||Tt.LedgerOffscreenBridge),(0,h.keyringBuilderFactory)(It.LatticeKeyringOffscreen));const Re=this.controllerMessenger.getRestricted({name:"SnapKeyringBuilder",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName"]});Pe.push((0,Et.snapKeyringBuilder)(Re,(()=>this.snapController),(async()=>{await this.keyringController.persistAllKeyrings(),await this.accountsController.updateAccounts()}),(e=>this.removeAccount(e)),this.metaMetricsController.trackEvent.bind(this.metaMetricsController),(e=>{if(!e)return null;const t=this.getLocale(),{snaps:n}=this.snapController.state,r=n[e];if(!r)return(0,Z.stripSnapPrefix)(e);if(r.localizationFiles){return(0,Z.getLocalizedSnapManifest)(r.manifest,t,r.localizationFiles).proposedName}return r.manifest.proposedName}),(e=>Nt.default.some((t=>t.snapId===e)))));const Oe=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new h.KeyringController({cacheEncryptionKey:!0,keyringBuilders:Pe,state:r.KeyringController,encryptor:e.encryptor||(0,Mt.encryptorFactory)(6e5),messenger:Oe}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new B.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:r.PermissionController,caveatSpecifications:(0,yt.getCaveatSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController)}),permissionSpecifications:{...(0,yt.getPermissionSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e=[],t=[])=>{const n=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),r=e.length,s=Object.keys(this.accountTrackerController.state.accounts||{}).length;(0,E.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${r} identities, and the ${n} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:yt.unrestrictedMethods}),this.selectedNetworkController=new U.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState","NetworkController:getSelectedNetworkClient","PermissionController:hasPermissions","PermissionController:getSubjectNames"],allowedEvents:["NetworkController:stateChange","PermissionController:stateChange"]}),state:r.SelectedNetworkController,useRequestQueuePreference:this.preferencesController.state.useRequestQueue,onPreferencesStateChange:e=>{d.subscribe("PreferencesController:stateChange",e)},domainProxyMap:new Rt.WeakRefObjectMap}),this.permissionLogController=new L.PermissionLogController({messenger:this.controllerMessenger.getRestricted({name:"PermissionLogController"}),restrictedMethods:new Set(Object.keys(he.RestrictedMethods)),state:r.PermissionLogController}),this.subjectMetadataController=new B.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:r.SubjectMetadataController,subjectCacheLimit:100});const xe=Ae.isManifestV3&&"undefined"!=typeof chrome&&void 0!==chrome.offscreen,je={messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=!1===xe?new H.IframeExecutionService({...je,iframeUrl:new URL("https://execution.metamask.io/iframe/6.10.0/index.html")}):new H.OffscreenExecutionService({...je,offscreenPromise:this.offscreenPromise});const De=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,`${this.subjectMetadataController.name}:addSubjectMetadata`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update","SnapsRegistry:resolveVersion","SnapInterfaceController:createInterface","SnapInterfaceController:getInterface"]}),Ue=!0;this.snapController=new H.SnapController({environmentEndowmentPermissions:Object.values(he.EndowmentPermissions),excludedPermissions:{...he.ExcludedSnapPermissions,...he.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:r.SnapController,messenger:De,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!1,requireAllowlist:Ue,rejectInvalidPlatformVersion:!0},encryptor:(0,Mt.encryptorFactory)(6e5),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),preinstalledSnaps:Nt.default,getFeatureFlags:()=>({disableSnaps:!1===this.preferencesController.state.useExternalServices})}),this.rateLimitController=new $.RateLimitController({state:r.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const n=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==n?void 0:n.name)??e,t).catch((e=>{C.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>{const{message:n}=t,r={data:{message:n,origin:e},type:Zt.SNAP,readDate:null};return this.controllerMessenger.call("NotificationServicesController:updateMetamaskNotificationsList",r),null},rateLimitCount:5,rateLimitTimeout:6e4}}});const He=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapUninstalled","SnapController:snapEnabled","SnapController:snapDisabled"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new H.CronjobController({state:r.CronjobController,messenger:He});const We=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new H.JsonSnapsRegistry({state:r.SnapsRegistry,messenger:We,refetchOnAllowlistMiss:Ue,url:{registry:"https://acl.execution.metamask.io/latest/registry.json",signature:"https://acl.execution.metamask.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"});const ze=this.controllerMessenger.getRestricted({name:"SnapInterfaceController",allowedActions:[`${this.phishingController.name}:maybeUpdateState`,`${this.phishingController.name}:testOrigin`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.snapController.name}:get`],allowedEvents:["NotificationServicesController:notificationsListUpdated"]});this.snapInterfaceController=new H.SnapInterfaceController({state:r.SnapInterfaceController,messenger:ze});const Je=this.controllerMessenger.getRestricted({name:"SnapInsightsController",allowedActions:[`${this.snapController.name}:handleRequest`,`${this.snapController.name}:getAll`,`${this.permissionController.name}:getPermissions`,`${this.snapInterfaceController.name}:deleteInterface`],allowedEvents:["TransactionController:unapprovedTransactionAdded","TransactionController:transactionStatusUpdated","SignatureController:stateChange"]});this.snapInsightsController=new H.SnapInsightsController({state:r.SnapInsightsController,messenger:Je}),this.authenticationController=new re.AuthenticationController.Controller({state:r.AuthenticationController,messenger:this.controllerMessenger.getRestricted({name:"AuthenticationController",allowedActions:["KeyringController:getState","SnapController:handleRequest"],allowedEvents:["KeyringController:lock","KeyringController:unlock"]}),metametrics:{getMetaMetricsId:()=>this.metaMetricsController.getMetaMetricsId(),agent:"extension"}}),this.userStorageController=new re.UserStorageController.Controller({getMetaMetricsState:()=>this.metaMetricsController.state.participateInMetaMetrics??!1,state:r.UserStorageController,config:{accountSyncing:{onAccountAdded:e=>{this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.ProfileSyncing,event:fe.MetaMetricsEventName.AccountsSyncAdded,properties:{profile_id:e}})},onAccountNameUpdated:e=>{this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.ProfileSyncing,event:fe.MetaMetricsEventName.AccountsSyncNameUpdated,properties:{profile_id:e}})},onAccountSyncErroneousSituation:(e,t)=>{this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.ProfileSyncing,event:fe.MetaMetricsEventName.AccountsSyncErroneousSituation,properties:{profile_id:e,situation_message:t}})}}},env:{isAccountSyncingEnabled:Ae.isManifestV3},messenger:this.controllerMessenger.getRestricted({name:"UserStorageController",allowedActions:["KeyringController:getState","KeyringController:addNewAccount","SnapController:handleRequest","AuthenticationController:getBearerToken","AuthenticationController:getSessionProfile","AuthenticationController:isSignedIn","AuthenticationController:performSignOut","AuthenticationController:performSignIn","NotificationServicesController:disableNotificationServices","NotificationServicesController:selectIsNotificationServicesEnabled","AccountsController:listAccounts","AccountsController:updateAccountMetadata"],allowedEvents:["KeyringController:lock","KeyringController:unlock","AccountsController:accountAdded","AccountsController:accountRenamed"]})});const Ye=this.controllerMessenger.getRestricted({name:"NotificationServicesPushController",allowedActions:["AuthenticationController:getBearerToken"],allowedEvents:[]});this.notificationServicesPushController=new se.NotificationServicesPushController.Controller({messenger:Ye,state:r.NotificationServicesPushController,env:{apiKey:"",authDomain:"",storageBucket:"",projectId:"",messagingSenderId:"",appId:"",measurementId:"",vapidKey:""},config:{isPushEnabled:Ae.isManifestV3,platform:"extension",onPushNotificationReceived:Ht.onPushNotificationReceived,onPushNotificationClicked:Ht.onPushNotificationClicked}}),Ye.subscribe("NotificationServicesPushController:onNewNotifications",(e=>{this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.PushNotifications,event:fe.MetaMetricsEventName.PushNotificationReceived,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),Ye.subscribe("NotificationServicesPushController:pushNotificationClicked",(e=>{this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.PushNotifications,event:fe.MetaMetricsEventName.PushNotificationClicked,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.notificationServicesController=new se.NotificationServicesController.Controller({messenger:this.controllerMessenger.getRestricted({name:"NotificationServicesController",allowedActions:["KeyringController:getAccounts","KeyringController:getState","AuthenticationController:getBearerToken","AuthenticationController:isSignedIn","UserStorageController:enableProfileSyncing","UserStorageController:getStorageKey","UserStorageController:performGetStorage","UserStorageController:performSetStorage","NotificationServicesPushController:enablePushNotifications","NotificationServicesPushController:disablePushNotifications","NotificationServicesPushController:subscribeToPushNotifications","NotificationServicesPushController:updateTriggerPushNotifications"],allowedEvents:["KeyringController:stateChange","KeyringController:lock","KeyringController:unlock","NotificationServicesPushController:onNewNotifications"]}),state:r.NotificationServicesController,env:{isPushIntegrated:Ae.isManifestV3,featureAnnouncements:{platform:"extension",spaceId:"",accessToken:""}}}),this.accountTrackerController=new Ve.default({state:{accounts:{}},messenger:this.controllerMessenger.getRestricted({name:"AccountTrackerController",allowedActions:["AccountsController:getSelectedAccount","NetworkController:getState","NetworkController:getNetworkClientById","OnboardingController:getState","PreferencesController:getState"],allowedEvents:["AccountsController:selectedEvmAccountChange","OnboardingController:stateChange","KeyringController:accountRemoved"]}),provider:this.provider,blockTracker:this.blockTracker,getNetworkIdentifier:e=>{const{type:t,rpcUrl:n}=e??(0,Ie.getProviderConfig)({metamask:this.networkController.state});return t===le.NETWORK_TYPES.RPC?n:t}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.state;e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.controllerMessenger.subscribe(`${this.onboardingController.name}:stateChange`,(0,pt.previousValueComparator)((async(e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r}=t;if(!n&&r){const{address:e}=this.accountsController.getSelectedAccount();await this._addAccountsWithBalance(),this.postOnboardingInitialization(),this.triggerNetworkrequests(),await this.tokenDetectionController.detectTokens({selectedAddress:e})}}),this.onboardingController.state));const Qe=this.controllerMessenger.getRestricted({name:"TokenDetectionController",allowedActions:["AccountsController:getAccount","AccountsController:getSelectedAccount","KeyringController:getState","NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getState","PreferencesController:getState","TokenListController:getState","TokensController:getState","TokensController:addDetectedTokens"],allowedEvents:["AccountsController:selectedEvmAccountChange","KeyringController:lock","KeyringController:unlock","NetworkController:networkDidChange","PreferencesController:stateChange","TokenListController:stateChange"]});this.tokenDetectionController=new o.TokenDetectionController({messenger:Qe,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),useAccountsAPI:!0,platform:"extension"});const Xe=this.controllerMessenger.getRestricted({name:"AddressBookController",allowedActions:[],allowedEvents:[]});this.addressBookController=new M.AddressBookController({messenger:Xe,state:r.AddressBookController}),this.alertController=new ot.AlertController({state:r.AlertController,messenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new it.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})};const tt=this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`,"NetworkController:findNetworkClientIdByChainId","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount"],allowedEvents:["NetworkController:stateChange"]});this.txController=new X.TransactionController({blockTracker:this.blockTracker,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getNetworkClientRegistry:this.networkController.getNetworkClientRegistry.bind(this.networkController),getNetworkState:()=>this.networkController.state,getPermittedAccounts:this.getPermittedAccounts.bind(this),getSavedGasFees:()=>this.preferencesController.state.advancedGasFee[(0,Ie.getCurrentChainId)({metamask:this.networkController.state})],incomingTransactions:{etherscanApiKeysByChainId:{[le.CHAIN_IDS.MAINNET]:"",[le.CHAIN_IDS.SEPOLIA]:""},includeTokenTransfers:!1,isEnabled:()=>{var e;return Boolean((null===(e=this.preferencesController.state.incomingTransactionsPreferences)||void 0===e?void 0:e[(0,Ie.getCurrentChainId)({metamask:this.networkController.state})])&&this.onboardingController.state.completedOnboarding)},queryEntireHistory:!1,updateTransactions:!1},isFirstTimeInteractionEnabled:()=>this.preferencesController.state.securityAlertsEnabled,isMultichainEnabled:"",isSimulationEnabled:()=>this.preferencesController.state.useTransactionSimulations,messenger:tt,onNetworkStateChange:e=>{i.subscribe("NetworkController:networkDidChange",(()=>e()))},pendingTransactions:{isResubmitEnabled:()=>{const e=this._getMetaMaskState();return!((0,Ee.getSmartTransactionsPreferenceEnabled)(e)&&(0,Ee.getCurrentChainSupportsSmartTransactions)(e))}},provider:this.provider,testGasFeeFlows:!1,trace:Ne.trace,hooks:{publish:this._publishSmartTransactionHook.bind(this)},sign:(...e)=>this.keyringController.signTransaction(...e),state:r.TransactionController}),this._addTransactionControllerListeners(),this.decryptMessageController=new lt.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new ft.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new V.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`,`${this.networkController.name}:getNetworkClientById`]}),trace:Ne.trace,decodingApiUrl:"https://signature-insights.api.cx.metamask.io/v1",isDecodeSignatureRequestEnabled:()=>!0===this.preferencesController.state.useExternalServices&&this.preferencesController.state.useTransactionSimulations}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:fe.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})}));const nt=this.controllerMessenger.getRestricted({name:"SwapsController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokenRatesController:getState"],allowedEvents:[]});this.swapsController=new ct.default({messenger:nt,getBufferedGasLimit:async(e,t)=>{const{gas:n,simulationFails:r}=await this.txController.estimateGasBuffered(e.txParams,t);return{gasLimit:n,simulationFails:r}},getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getLayer1GasFee:this.txController.getLayer1GasFee.bind(this.txController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},r.SwapsController);const ht=this.controllerMessenger.getRestricted({name:$t.BRIDGE_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedAccount","NetworkController:getSelectedNetworkClient","NetworkController:findNetworkClientIdByChainId"],allowedEvents:[]});this.bridgeController=new Lt.default({messenger:ht,getLayer1GasFee:this.txController.getLayer1GasFee.bind(this.txController)});const bt=this.controllerMessenger.getRestricted({name:Wt.BRIDGE_STATUS_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedAccount","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId","NetworkController:getState"],allowedEvents:[]});this.bridgeStatusController=new Vt.default({messenger:bt,state:r.BridgeStatusController});const St=this.controllerMessenger.getRestricted({name:"SmartTransactionsController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]});this.smartTransactionsController=new j.default({supportedChainIds:(0,ce.getAllowedSmartTransactionsChainIds)(),clientId:D.ClientId.Extension,getNonceLock:this.txController.getNonceLock.bind(this.txController),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),state:r.SmartTransactionsController,messenger:St,getTransactions:this.txController.getTransactions.bind(this.txController),updateTransaction:this.txController.updateTransaction.bind(this.txController),getFeatureFlags:()=>{const e=this._getMetaMaskState();return(0,Ee.getFeatureFlagsByChainId)(e)},getMetaMetricsProps:async()=>{const e=this.accountsController.getSelectedAccount().address;return{accountHardwareType:await(0,Ee.getHardwareWalletType)(this._getMetaMaskState()),accountType:await this.getAccountType(e),deviceModel:await this.getDeviceModel(e)}}});const Ot=()=>this.preferencesController.state.useExternalNameSources;this.nameController=new J.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new J.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new J.EtherscanNameProvider({isEnabled:Ot}),new J.TokenNameProvider({isEnabled:Ot}),new J.LensNameProvider({isEnabled:Ot}),new Fe.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:r.NameController});const xt=this.controllerMessenger.getRestricted({name:"PetnamesBridge",allowedEvents:["NameController:stateChange","AccountsController:stateChange","AddressBookController:stateChange"],allowedActions:["AccountsController:listAccounts"]});new Le.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:xt}).init(),new $e.AccountIdentitiesPetnamesBridge({nameController:this.nameController,messenger:xt}).init(),this.userOperationController=new Q.UserOperationController({entrypoint:null,getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","KeyringController:prepareUserOperation","KeyringController:patchUserOperation","KeyringController:signUserOperation"]}),state:r.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),i.subscribe("NetworkController:networkDidChange",(()=>{this.accountTrackerController.updateAccounts()})),i.subscribe("NetworkController:networkWillChange",a.bind(this)),this.metamaskMiddleware=(0,mt.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${s}`},version:s,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===ge.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:(e,t)=>(0,Pt.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processTypedMessage:(...e)=>(0,_t.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV3:(...e)=>(0,_t.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV4:(...e)=>(0,_t.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processPersonalMessage:(...e)=>(0,_t.addPersonalMessage)({signatureController:this.signatureController,signatureParams:e}),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===X.TransactionStatus.submitted))}),this.on("update",(e=>this._onStateUpdate(e)));const Bt={AccountTracker:this.accountTrackerController,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController,BridgeController:this.bridgeController,BridgeStatusController:this.bridgeStatusController,EnsController:this.ensController,ApprovalController:this.approvalController,PPOMController:this.ppomController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController,MultichainBalancesController:this.multichainBalancesController,TransactionController:this.txController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,PPOMController:this.ppomController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,NotificationServicesPushController:this.notificationServicesPushController,...Bt}),this.memStore=new Ke.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController,MultichainBalancesController:this.multichainBalancesController,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,TxController:this.txController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,QueuedRequestController:this.queuedRequestController,NotificationServicesPushController:this.notificationServicesPushController,...Bt},controllerMessenger:this.controllerMessenger});const jt=[this.accountTrackerController.resetState.bind(this.accountTrackerController),this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState.bind(this.swapsController),this.bridgeController.resetState.bind(this.bridgeController),this.ensController.resetState.bind(this.ensController),this.approvalController.clear.bind(this.approvalController)];Ae.isManifestV3?!0===n&&(this.resetStates(jt),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(jt);!this.isUnlocked()&&this.onboardingController.state.completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.setupMultichainDataAndSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(Ge.onMessageReceived),(0,Ge.checkForMultipleVersionsRunning)(),this.onboardingController.state.completedOnboarding&&this.postOnboardingInitialization()}getInfuraFeatureFlags(){(0,xe.default)({url:"https://swap.api.cx.metamask.io/featureFlags",cacheRefreshTime:20*me.MINUTE}).then(this.onFeatureFlagResponseReceived).catch((e=>{C.default.warn("Feature flag endpoint is unreachable",e)}))}onFeatureFlagResponseReceived(e){const{multiChainAssets:t={}}=e,{pollInterval:n}=t;n>0&&this.tokenBalancesController.setIntervalLength(n*me.SECOND)}postOnboardingInitialization(){const{usePhishDetect:e}=this.preferencesController.state;this.networkController.lookupNetwork(),e&&this.phishingController.maybeUpdateState();const t=this.preferencesController.state,{useTokenDetection:n,useNftDetection:r}=t??{};this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.Onboarding,event:fe.MetaMetricsUserTrait.TokenDetectionEnabled,properties:{[fe.MetaMetricsUserTrait.TokenDetectionEnabled]:n}}),this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.Onboarding,event:fe.MetaMetricsUserTrait.NftAutodetectionEnabled,properties:{[fe.MetaMetricsUserTrait.NftAutodetectionEnabled]:r}})}triggerNetworkrequests(){this.txController.startIncomingTransactionPolling(),this.tokenDetectionController.enable(),this.getInfuraFeatureFlags()}stopNetworkRequests(){this.txController.stopIncomingTransactionPolling(),this.tokenDetectionController.disable()}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(ue.KeyringType.snap);return e||(e=await this.keyringController.addNewKeyring(ue.KeyringType.snap)),e}trackInsightSnapView(e){this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.InsightSnapViewed,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:e}})}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.state;return e}getSnapPermissionSpecifications(){return{...(0,q.buildSnapEndowmentSpecifications)(Object.keys(he.ExcludedSnapEndowments)),...(0,q.buildSnapRestrictedMethodSpecifications)(Object.keys(he.ExcludedSnapPermissions),{getPreferences:()=>({locale:this.getLocale(),currency:this.currencyRateController.state.currentCurrency}),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.state;e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.state;return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface"),getInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:getInterface"),getSnapKeyring:this.getSnapKeyring.bind(this)})}}setupControllerEventSubscriptions(){let e;this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)((async(e,t)=>{var n;const{currentLocale:r}=t,s=(0,Ie.getCurrentChainId)({metamask:this.networkController.state});await(0,St.updateCurrentLocale)(r),null!==(n=t.incomingTransactionsPreferences)&&void 0!==n&&n[s]?this.txController.startIncomingTransactionPolling():this.txController.stopIncomingTransactionPolling(),Xt(tn,this,rn).call(this,t,e)}),this.preferencesController.state)),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,yt.diffMap)(e,t);for(const[e,t]of n.entries())this._notifyAccountsChange(e,t)}),yt.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,yt.diffMap)(e,t);for(const[e,t]of n.entries()){const n=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:r}=this.networkController.getNetworkConfigurationByNetworkClientId(n);if(t.length>0&&!t.includes(r)){const n=this.networkController.findNetworkClientIdByChainId(t[0]);this.selectedNetworkController.setNetworkClientIdForDomain(e,n),this.networkController.setActiveNetwork(n)}}}),yt.getPermittedChainsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{await this.txController.updateIncomingTransactions()})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallStarted`,((e,t,n)=>{var r;const s=null===(r=this._getSnapMetadata(e))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:n?fe.MetaMetricsEventName.SnapUpdateStarted:fe.MetaMetricsEventName.SnapInstallStarted,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallFailed`,((e,t,n,r)=>{var s;const o=r.includes("User rejected the request."),a=n?fe.MetaMetricsEventName.SnapUpdateFailed:fe.MetaMetricsEventName.SnapInstallFailed,i=n?fe.MetaMetricsEventName.SnapUpdateRejected:fe.MetaMetricsEventName.SnapInstallRejected,l=null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:o?i:a,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:l}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t,n)=>{var r;if(n)return;const s=e.id,o=null===(r=this._getSnapMetadata(s))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.SnapInstalled,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:s,version:e.version,origin:t,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,n,r)=>{var s;if(r)return;const o=e.id,a=null===(s=this._getSnapMetadata(o))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.SnapUpdated,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:o,old_version:t,new_version:e.version,origin:n,snap_category:a}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(he.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const n=this.notificationServicesController.getNotificationsByType(Zt.SNAP).filter((t=>t.data.origin===e.id)).map((e=>e.id));this.notificationServicesController.deleteNotificationsById(n);const r=e.id,s=null===(t=this._getSnapMetadata(r))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.SnapUninstalled,category:fe.MetaMetricsEventCategory.Snaps,properties:{snap_id:r,version:e.version,snap_category:s}})}))}setupMultichainDataAndSubscriptions(){(0,ne.isEvmAccountType)(this.accountsController.getSelectedMultichainAccount().type)||this.multichainRatesController.start(),this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(e=>{(0,ne.isEvmAccountType)(e.type)?this.multichainRatesController.stop():this.multichainRatesController.start()})),this.multichainBalancesController.start(),this.multichainBalancesController.updateBalances()}createPublicConfigStore(){const e=new l.ObservableStore,t=async({isUnlocked:e})=>{const{chainId:t,networkVersion:n}=await this.getProviderNetworkState();return{isUnlocked:e,chainId:t,networkVersion:n??"loading"}},n=async n=>{var r;(null===(r=n.networksMetadata[n.selectedNetworkClientId])||void 0===r?void 0:r.status)===le.NetworkStatus.Available&&e.putState(await t(n))};return this.on("update",n),n(this.getState()),e}async getProviderState(e){const t=await this.getProviderNetworkState(this.preferencesController.getUseRequestQueue()?e:undefined);return{isUnlocked:this.isUnlocked(),accounts:await this.getPermittedAccounts(e),...t}}async getProviderNetworkState(e=U.METAMASK_DOMAIN){const t=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e),n=this.controllerMessenger.call("NetworkController:getNetworkClientById",t),{chainId:r}=n.configuration,{completedOnboarding:s}=this.onboardingController.state;let o=this.deprecatedNetworkVersions[t];if(o===undefined&&s){const e=new S.default(n.provider);o=await new Promise((t=>{e.sendAsync({method:"net_version"},((e,n)=>{e?(console.error(e),t(null)):t((0,Te.convertNetworkId)(n))}))})),this.deprecatedNetworkVersions[t]=o}return{chainId:r,networkVersion:o??"loading"}}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),n=this.memStore.getFlatState();return{isInitialized:t,...(0,Kt.sanitizeUIState)(n)}}getApi(){const{accountsController:e,addressBookController:t,alertController:n,appStateController:r,keyringController:s,nftController:o,nftDetectionController:a,currencyRateController:i,tokenBalancesController:l,tokenDetectionController:c,ensController:d,tokenListController:u,gasFeeController:h,metaMetricsController:p,networkController:m,announcementController:g,onboardingController:f,permissionController:C,preferencesController:y,tokensController:w,smartTransactionsController:v,txController:b,assetsContractController:k,backup:A,approvalController:T,phishingController:E,tokenRatesController:M,accountTrackerController:P,authenticationController:_,userStorageController:I,notificationServicesController:N,notificationServicesPushController:R}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:y.setUseBlockie.bind(y),setUseNonceField:y.setUseNonceField.bind(y),setUsePhishDetect:y.setUsePhishDetect.bind(y),setUseMultiAccountBalanceChecker:y.setUseMultiAccountBalanceChecker.bind(y),setUseSafeChainsListValidation:y.setUseSafeChainsListValidation.bind(y),setUseTokenDetection:y.setUseTokenDetection.bind(y),setUseNftDetection:y.setUseNftDetection.bind(y),setUse4ByteResolution:y.setUse4ByteResolution.bind(y),setUseCurrencyRateCheck:y.setUseCurrencyRateCheck.bind(y),setOpenSeaEnabled:y.setOpenSeaEnabled.bind(y),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>(0,Ie.getProviderConfig)({metamask:this.networkController.state}),grantPermissionsIncremental:this.permissionController.grantPermissionsIncremental.bind(this.permissionController),grantPermissions:this.permissionController.grantPermissions.bind(this.permissionController),setSecurityAlertsEnabled:y.setSecurityAlertsEnabled.bind(y),setAddSnapAccountEnabled:y.setAddSnapAccountEnabled.bind(y),setBitcoinSupportEnabled:y.setBitcoinSupportEnabled.bind(y),setBitcoinTestnetSupportEnabled:y.setBitcoinTestnetSupportEnabled.bind(y),setUseExternalNameSources:y.setUseExternalNameSources.bind(y),setUseTransactionSimulations:y.setUseTransactionSimulations.bind(y),setUseRequestQueue:this.setUseRequestQueue.bind(this),setIpfsGateway:y.setIpfsGateway.bind(y),setIsIpfsGatewayEnabled:y.setIsIpfsGatewayEnabled.bind(y),setUseAddressBarEnsResolution:y.setUseAddressBarEnsResolution.bind(y),setParticipateInMetaMetrics:p.setParticipateInMetaMetrics.bind(p),setDataCollectionForMarketing:p.setDataCollectionForMarketing.bind(p),setMarketingCampaignCookieId:p.setMarketingCampaignCookieId.bind(p),setCurrentLocale:y.setCurrentLocale.bind(y),setIncomingTransactionsPreferences:y.setIncomingTransactionsPreferences.bind(y),setServiceWorkerKeepAlivePreference:y.setServiceWorkerKeepAlivePreference.bind(y),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:T.addAndShowApprovalRequest.bind(T),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getNextAvailableAccountName:e.getNextAvailableAccountName.bind(e),getAccountsBySnapId:e=>(0,Et.getAccountsBySnapId)(this,e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),getDeviceNameForMetric:this.getDeviceNameForMetric.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:s.submitQRCryptoHDKey.bind(s),submitQRHardwareCryptoAccount:s.submitQRCryptoAccount.bind(s),cancelSyncQRHardware:s.cancelQRSynchronization.bind(s),submitQRHardwareSignature:s.submitQRSignature.bind(s),cancelQRHardwareSignRequest:s.cancelQRSignRequest.bind(s),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setActiveNetwork:e=>this.networkController.setActiveNetwork(e),setActiveNetworkConfigurationId:e=>{this.networkController.setActiveNetwork(e)},setNetworkClientIdForDomain:(e,t)=>this.selectedNetworkController.setNetworkClientIdForDomain(e,t),rollbackToPreviousProvider:m.rollbackToPreviousProvider.bind(m),addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),removeNetwork:this.networkController.removeNetwork.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getNetworkConfigurationByNetworkClientId:this.networkController.getNetworkConfigurationByNetworkClientId.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id)},toggleExternalServices:this.toggleExternalServices.bind(this),addToken:w.addToken.bind(w),updateTokenType:w.updateTokenType.bind(w),setFeatureFlag:y.setFeatureFlag.bind(y),setPreference:y.setPreference.bind(y),addKnownMethodData:y.addKnownMethodData.bind(y),setDismissSeedBackUpReminder:y.setDismissSeedBackUpReminder.bind(y),setOverrideContentSecurityPolicyHeader:y.setOverrideContentSecurityPolicyHeader.bind(y),setAdvancedGasFee:y.setAdvancedGasFee.bind(y),setTheme:y.setTheme.bind(y),setSnapsAddSnapAccountModalDismissed:y.setSnapsAddSnapAccountModalDismissed.bind(y),setSelectedInternalAccount:e=>{this.accountsController.getAccount(e)&&this.accountsController.setSelectedAccount(e)},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{const n=this.accountsController.getAccountByAddress(e);if(n===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(n.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),addNft:o.addNft.bind(o),addNftVerifyOwnership:o.addNftVerifyOwnership.bind(o),removeAndIgnoreNft:o.removeAndIgnoreNft.bind(o),removeNft:o.removeNft.bind(o),checkAndUpdateAllNftsOwnershipStatus:o.checkAndUpdateAllNftsOwnershipStatus.bind(o),checkAndUpdateSingleNftOwnershipStatus:o.checkAndUpdateSingleNftOwnershipStatus.bind(o),getNFTContractInfo:o.getNFTContractInfo.bind(o),isNftOwner:o.isNftOwner.bind(o),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:r.setLastActiveTime.bind(r),setCurrentExtensionPopupId:r.setCurrentExtensionPopupId.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setSurveyLinkLastClickedOrClosed:r.setSurveyLinkLastClickedOrClosed.bind(r),setOnboardingDate:r.setOnboardingDate.bind(r),setLastViewedUserSurvey:r.setLastViewedUserSurvey.bind(r),setNewPrivacyPolicyToastClickedOrClosed:r.setNewPrivacyPolicyToastClickedOrClosed.bind(r),setNewPrivacyPolicyToastShownDate:r.setNewPrivacyPolicyToastShownDate.bind(r),setSnapsInstallPrivacyWarningShownStatus:r.setSnapsInstallPrivacyWarningShownStatus.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowPermissionsTour:r.setShowPermissionsTour.bind(r),setShowAccountBanner:r.setShowAccountBanner.bind(r),setShowNetworkBanner:r.setShowNetworkBanner.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),setFirstTimeUsedNetwork:r.setFirstTimeUsedNetwork.bind(r),setSwitchedNetworkDetails:r.setSwitchedNetworkDetails.bind(r),clearSwitchedNetworkDetails:r.clearSwitchedNetworkDetails.bind(r),setSwitchedNetworkNeverShowMessage:r.setSwitchedNetworkNeverShowMessage.bind(r),getLastInteractedConfirmationInfo:r.getLastInteractedConfirmationInfo.bind(r),setLastInteractedConfirmationInfo:r.setLastInteractedConfirmationInfo.bind(r),tryReverseResolveAddress:d.reverseResolveAddress.bind(d),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:b.updateTransaction.bind(b),approveTransactionsWithSameNonce:b.approveTransactionsWithSameNonce.bind(b),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),estimateGasFee:b.estimateGasFee.bind(b),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,Pt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1})),addTransactionAndWaitForPublish:(e,t)=>(0,Pt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0})),createTransactionEventFragment:je.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),getTransactions:this.txController.getTransactions.bind(this.txController),updateEditableParams:this.txController.updateEditableParams.bind(this.txController),updateTransactionGasFees:b.updateTransactionGasFees.bind(b),updateTransactionSendFlowHistory:b.updateTransactionSendFlowHistory.bind(b),updatePreviousGasParams:b.updatePreviousGasParams.bind(b),abortTransactionSigning:b.abortTransactionSigning.bind(b),getLayer1GasFee:b.getLayer1GasFee.bind(b),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:f.setSeedPhraseBackedUp.bind(f),completeOnboarding:f.completeOnboarding.bind(f),setFirstTimeFlowType:f.setFirstTimeFlowType.bind(f),setAlertEnabledness:n.setAlertEnabledness.bind(n),setUnconnectedAccountAlertShown:n.setUnconnectedAccountAlertShown.bind(n),setWeb3ShimUsageAlertDismissed:n.setWeb3ShimUsageAlertDismissed.bind(n),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,yt.getPermissionBackgroundApiMethods)(C),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),disconnectOriginFromSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disconnectOrigin"),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await E.maybeUpdateState(),E.test(e)),deleteInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:deleteInterface"),updateInterfaceState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterfaceState"),fetchAndSetQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:fetchAndSetQuotes"),setSelectedQuoteAggId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSelectedQuoteAggId"),resetSwapsState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetSwapsState"),setSwapsTokens:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTokens"),clearSwapsQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:clearSwapsQuotes"),setApproveTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setApproveTxId"),setTradeTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setTradeTxId"),setSwapsTxGasPrice:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasPrice"),setSwapsTxGasLimit:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasLimit"),setSwapsTxMaxFeePerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePerGas"),setSwapsTxMaxFeePriorityPerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePriorityPerGas"),safeRefetchQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:safeRefetchQuotes"),stopPollingForQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:stopPollingForQuotes"),setBackgroundSwapRouteState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setBackgroundSwapRouteState"),resetPostFetchState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetPostFetchState"),setSwapsErrorKey:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsErrorKey"),setInitialGasEstimate:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setInitialGasEstimate"),setCustomApproveTxData:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setCustomApproveTxData"),setSwapsLiveness:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsLiveness"),setSwapsFeatureFlags:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsFeatureFlags"),setSwapsUserFeeLevel:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsUserFeeLevel"),setSwapsQuotesPollingLimitEnabled:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsQuotesPollingLimitEnabled"),[Ft.BridgeBackgroundAction.SET_FEATURE_FLAGS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeBackgroundAction.SET_FEATURE_FLAGS}`),[Ft.BridgeBackgroundAction.RESET_STATE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeBackgroundAction.RESET_STATE}`),[Ft.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE}`),[Ft.BridgeUserAction.SELECT_SRC_NETWORK]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeUserAction.SELECT_SRC_NETWORK}`),[Ft.BridgeUserAction.SELECT_DEST_NETWORK]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeUserAction.SELECT_DEST_NETWORK}`),[Ft.BridgeUserAction.UPDATE_QUOTE_PARAMS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${$t.BRIDGE_CONTROLLER_NAME}:${Ft.BridgeUserAction.UPDATE_QUOTE_PARAMS}`),[Oe.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${Wt.BRIDGE_STATUS_CONTROLLER_NAME}:${Oe.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS}`),fetchSmartTransactionFees:v.getFees.bind(v),clearSmartTransactionFees:v.clearFees.bind(v),submitSignedTransactions:v.submitSignedTransactions.bind(v),cancelSmartTransaction:v.cancelSmartTransaction.bind(v),fetchSmartTransactionsLiveness:v.fetchLiveness.bind(v),updateSmartTransaction:v.updateSmartTransaction.bind(v),setStatusRefreshInterval:v.setStatusRefreshInterval.bind(v),trackMetaMetricsEvent:p.trackEvent.bind(p),trackMetaMetricsPage:p.trackPage.bind(p),createEventFragment:p.createEventFragment.bind(p),updateEventFragment:p.updateEventFragment.bind(p),finalizeEventFragment:p.finalizeEventFragment.bind(p),trackInsightSnapView:this.trackInsightSnapView.bind(this),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,resetViewedNotifications:g.resetViewed.bind(g),updateViewedNotifications:g.updateViewed.bind(g),currencyRateStartPolling:i.startPolling.bind(i),currencyRateStopPollingByPollingToken:i.stopPollingByPollingToken.bind(i),tokenRatesStartPolling:M.startPolling.bind(M),tokenRatesStopPollingByPollingToken:M.stopPollingByPollingToken.bind(M),accountTrackerStartPolling:P.startPollingByNetworkClientId.bind(P),accountTrackerStopPollingByPollingToken:P.stopPollingByPollingToken.bind(P),tokenDetectionStartPolling:c.startPolling.bind(c),tokenDetectionStopPollingByPollingToken:c.stopPollingByPollingToken.bind(c),tokenListStartPolling:u.startPolling.bind(u),tokenListStopPollingByPollingToken:u.stopPollingByPollingToken.bind(u),tokenBalancesStartPolling:l.startPolling.bind(l),tokenBalancesStopPollingByPollingToken:l.stopPollingByPollingToken.bind(l),gasFeeStartPolling:h.startPolling.bind(h),gasFeeStopPollingByPollingToken:h.stopPollingByPollingToken.bind(h),getGasFeeTimeEstimate:h.getTimeEstimate.bind(h),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),backupUserData:A.backupUserData.bind(A),restoreUserData:A.restoreUserData.bind(A),detectTokens:c.detectTokens.bind(c),detectNfts:a.detectNfts.bind(a),addDetectedTokens:w.addDetectedTokens.bind(w),addImportedTokens:w.addTokens.bind(w),ignoreTokens:w.ignoreTokens.bind(w),getBalancesInSingleCall:k.getBalancesInSingleCall.bind(k),performSignIn:_.performSignIn.bind(_),performSignOut:_.performSignOut.bind(_),enableProfileSyncing:I.enableProfileSyncing.bind(I),disableProfileSyncing:I.disableProfileSyncing.bind(I),setIsProfileSyncingEnabled:I.setIsProfileSyncingEnabled.bind(I),syncInternalAccountsWithUserStorage:I.syncInternalAccountsWithUserStorage.bind(I),deleteAccountSyncingDataFromUserStorage:I.performDeleteStorageAllFeatureEntries.bind(I),checkAccountsPresence:N.checkAccountsPresence.bind(N),createOnChainTriggers:N.createOnChainTriggers.bind(N),deleteOnChainTriggersByAccount:N.deleteOnChainTriggersByAccount.bind(N),updateOnChainTriggersByAccount:N.updateOnChainTriggersByAccount.bind(N),fetchAndUpdateMetamaskNotifications:N.fetchAndUpdateMetamaskNotifications.bind(N),deleteNotificationsById:N.deleteNotificationsById.bind(N),getNotificationsByType:N.getNotificationsByType.bind(N),markMetamaskNotificationsAsRead:N.markMetamaskNotificationsAsRead.bind(N),setFeatureAnnouncementsEnabled:N.setFeatureAnnouncementsEnabled.bind(N),enablePushNotifications:R.enablePushNotifications.bind(R),disablePushNotifications:R.disablePushNotifications.bind(R),updateTriggerPushNotifications:R.updateTriggerPushNotifications.bind(R),enableMetamaskNotifications:N.enableMetamaskNotifications.bind(N),disableMetamaskNotifications:N.disableNotificationServices.bind(N),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController),multichainUpdateBalance:e=>this.multichainBalancesController.updateBalance(e),multichainUpdateBalances:()=>this.multichainBalancesController.updateBalances(),decodeTransactionData:e=>(0,Ut.decodeTransactionData)({...e,ethQuery:new S.default(this.provider)}),createMetaMetricsDataDeletionTask:this.metaMetricsDataDeletionController.createMetaMetricsDataDeletionTask.bind(this.metaMetricsDataDeletionController),updateDataDeletionTaskStatus:this.metaMetricsDataDeletionController.updateDataDeletionTaskStatus.bind(this.metaMetricsDataDeletionController),endTrace:Ne.endTrace}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,n){var r,s;const{tokenList:o}=this.tokenListController.state,{tokens:a}=this.tokensController.state,i={...ke.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{},...o[e.toLowerCase()]||{},...a.find((({address:t})=>(0,ve.isEqualCaseInsensitive)(t,e)))||{}},l=(0,ve.isEqualCaseInsensitive)(i.standard,ae.TokenStandard.ERC20)||!0===i.erc20,c=!(n||(0,ve.isEqualCaseInsensitive)(i.standard,ae.TokenStandard.ERC1155)||(0,ve.isEqualCaseInsensitive)(i.standard,ae.TokenStandard.ERC721)||i.erc721),d=i.decimals!==undefined&&i.symbol;let u;if(l||c&&d)try{const n=t?await(0,we.fetchTokenBalance)(e,t,this.provider):undefined;u={address:e,balance:n,standard:ae.TokenStandard.ERC20,decimals:i.decimals,symbol:i.symbol}}catch(e){C.default.warn(`Failed to get token balance. Error: ${e}`)}u===undefined&&(u=await this.assetsContractController.getTokenStandardAndDetails(e,t,n));if((0,ve.isEqualCaseInsensitive)(u.standard,ae.TokenStandard.ERC1155))try{const r=await(0,we.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;u={...u,balance:s}}catch(e){C.default.warn("Failed to get token balance. Error:",e)}return{...u,decimals:null===(r=u)||void 0===r||null===(r=r.decimals)||void 0===r?void 0:r.toString(10),balance:null===(s=u)||void 0===s||null===(s=s.balance)||void 0===s?void 0:s.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{return await this.keyringController.createNewVaultAndKeychain(e)}finally{t()}}async createNewVaultAndRestore(e,n){const r=await this.createVaultMutex.acquire();try{const{completedOnboarding:r}=this.onboardingController.state,s=t.from(n);this.permissionController.clearState(),this.snapController.clearState(),this.accountTrackerController.clearAccounts(),this.txController.clearUnapprovedTransactions(),r&&this.tokenDetectionController.enable(),await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(s)),r&&(await this._addAccountsWithBalance(),this.setLedgerTransportPreference())}finally{r()}}async _addAccountsWithBalance(){try{const n=(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),r=new S.default(this.provider),s=await this.keyringController.getAccounts();let o=s[s.length-1];for(let a=s.length;;a++){if("0x0"===await this.getBalance(o,r)){var e,t;await this.tokenDetectionController.detectTokens({chainIds:[n],selectedAddress:o});const r=null===(e=this.tokensController.state.allTokens)||void 0===e||null===(e=e[n])||void 0===e?void 0:e[o],s=null===(t=this.tokensController.state.allDetectedTokens)||void 0===t||null===(t=t[n])||void 0===t?void 0:t[o];if(0===((null==r?void 0:r.length)??0)&&0===((null==s?void 0:s.length)??0)){1!==a&&await this.removeAccount(o);break}}o=await this.keyringController.addNewAccount(a)}}catch(e){C.default.warn(`Failed to add accounts with balance. Error: ${e}`)}finally{await this.userStorageController.setIsAccountSyncingReadyToBeDispatched(!0)}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>z.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>z.wordlist[e])).join(" "))}getBalance(e,t){return new Promise(((n,r)=>{const s=this.accountTrackerController.state.accounts[e];s&&s.balance?n(s.balance):t.getBalance(e,((e,t)=>{e?(r(e),C.default.error(e)):n(t||"0x0")}))}))}async submitPassword(e){const{completedOnboarding:t}=this.onboardingController.state;await this.offscreenPromise,await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){C.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),t&&this.setLedgerTransportPreference()}async _loginUser(e){try{await this.submitPassword(e),await this.accountTrackerController.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:n}=this.keyringController.state;if(JSON.parse(n).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(ue.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var n,r,s,o;const a=null===(n=this.opts.overrides)||void 0===n?void 0:n.keyrings;let i=null;switch(e){case de.HardwareDeviceNames.trezor:i=(null==a||null===(r=a.trezor)||void 0===r?void 0:r.type)||y.TrezorKeyring.type;break;case de.HardwareDeviceNames.ledger:i=(null==a||null===(s=a.ledger)||void 0===s?void 0:s.type)||w.LedgerKeyring.type;break;case de.HardwareDeviceNames.qr:i=k.MetaMaskKeyring.type;break;case de.HardwareDeviceNames.lattice:i=(null==a||null===(o=a.lattice)||void 0===o?void 0:o.type)||v.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(i);if(l||(l=await this.keyringController.addNewKeyring(i)),t&&l.setHdPath&&l.setHdPath(t),e===de.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===de.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=(0,Ie.getProviderConfig)({metamask:this.networkController.state}).type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(de.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async connectHardware(e,t,n){const r=await this.getKeyringForDevice(e,n);e===de.HardwareDeviceNames.ledger&&await this.setLedgerTransportPreference(r);let s=[];switch(t){case-1:s=await r.getPreviousPage();break;case 1:s=await r.getNextPage();break;default:s=await r.getFirstPage()}const o=await this.keyringController.getAccounts(),a=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTrackerController.syncWithAddresses(a),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async getDeviceNameForMetric(e,t){if(e===de.HardwareDeviceNames.trezor){const n=await this.getKeyringForDevice(e,t),{minorVersion:r}=n.bridge;if(r&&r===en)return de.HardwareDeviceNames.oneKeyViaTrezor}return e}async forgetDevice(e){const t=await this.getKeyringForDevice(e);for(const e of t.accounts)await this.removeAccount(e);return t.forgetDevice(),!0}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case ue.KeyringType.trezor:case ue.KeyringType.lattice:case ue.KeyringType.qr:case ue.KeyringType.ledger:return"hardware";case ue.KeyringType.imported:return"imported";case ue.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case ue.KeyringType.trezor:return t.getModel();case ue.KeyringType.qr:return t.getName();case ue.KeyringType.ledger:return de.HardwareDeviceNames.ledger;case ue.KeyringType.lattice:return de.HardwareDeviceNames.lattice;default:return undefined}}getAccountLabel(e,t,n){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${n||""}`.trim()}async unlockHardwareWalletAccount(e,t,n,r){const s=await this.getKeyringForDevice(t,n);s.setAccountToUnlock(e);const o=await this.keyringController.addNewAccountForKeyring(s),a=this.getAccountLabel(t===de.HardwareDeviceNames.qr?s.getName():t,e,r);this.preferencesController.setAccountLabel(o,a),this.preferencesController.setSelectedAddress(o);const i=this.accountsController.getAccountByAddress(o);this.accountsController.setAccountName(i.id,a);const l=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.state;return{unlockedAccount:o,identities:c,accounts:l}}async addNewAccount(e){const t=await this.keyringController.getAccounts(),n=await this.keyringController.addNewAccount(e);return t.includes(n)||this.preferencesController.setSelectedAddress(n),n}async getSeedPhrase(e){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address;return this.txController.wipeTransactions(!1,e),this.smartTransactionsController.wipeSmartTransactions({address:e,ignoreNetwork:!1}),this.bridgeStatusController.wipeBridgeStatus({address:e,ignoreNetwork:!1}),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,he.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===g.errorCodes.provider.unauthorized)return[];throw e}}removeAllChainIdPermissions(e){this.permissionController.updatePermissionsByCaveat(he.CaveatTypes.restrictNetworkSwitching,(t=>yt.CaveatMutatorFactories[he.CaveatTypes.restrictNetworkSwitching].removeChainId(e,t)))}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(he.CaveatTypes.restrictReturnedAccounts,(t=>yt.CaveatMutatorFactories[he.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const n=t?await t.getAccounts():{};var r;0===(null==n?void 0:n.length)&&(null===(r=t.destroy)||void 0===r||r.call(t));return e}async importAccountWithStrategy(e,t){const n=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(n)}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:n,...r}){var s;return{internalAccounts:this.accountsController.listAccounts(),dappRequest:n,networkClientId:(null==n?void 0:n.networkClientId)??this.networkController.state.selectedNetworkClientId,selectedAccount:this.accountsController.getAccountByAddress(e.from),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,chainId:(0,Ie.getCurrentChainId)({metamask:this.networkController.state}),ppomController:this.ppomController,securityAlertsEnabled:null===(s=this.preferencesController.state)||void 0===s?void 0:s.securityAlertsEnabled,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this),...r}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,n){await this.txController.stopTransaction(e,t,n);return this.getState()}async createSpeedUpTransaction(e,t,n){await this.txController.speedUpTransaction(e,t,n);return this.getState()}async estimateGas(e){return new Promise(((t,n)=>new A.default(this.provider).estimateGas(e,((e,r)=>e?n(e):t(r.toString(16))))))}async updateSecurityAlertResponse(e,t,n){await(0,Bt.updateSecurityAlertResponse)({appStateController:this.appStateController,method:e,securityAlertId:t,securityAlertResponse:n,signatureController:this.signatureController,transactionController:this.txController})}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setUseRequestQueue(e){this.preferencesController.setUseRequestQueue(e)}setupUntrustedCommunicationEip1193({connectionStream:e,sender:t,subjectType:n}){if(t.url&&this.onboardingController.state.completedOnboarding&&this.preferencesController.state.usePhishDetect){const{hostname:n}=new URL(t.url);this.phishingController.maybeUpdateState();const r=this.phishingController.test(t.url);if(null!=r&&r.result)return this.sendPhishingWarning(e,n),void this.metaMetricsController.trackEvent({event:fe.MetaMetricsEventName.PhishingPageDisplayed,category:fe.MetaMetricsEventCategory.Phishing,properties:{url:n}})}let r;r=n||(t.id&&t.id!==this.extension.runtime.id?B.SubjectType.Extension:B.SubjectType.Website);const s=(0,nt.setupMultiplex)(e);this.setupProviderConnectionEip1193(s.createStream("metamask-provider"),t,r),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupUntrustedCommunicationCaip({connectionStream:e,sender:t,subjectType:n}){let r;r=n||(t.id&&t.id!==this.extension.runtime.id?B.SubjectType.Extension:B.SubjectType.Website);const s=(0,Me.createCaipStream)(e);this.setupProviderConnectionCaip(s,t,r)}setupTrustedCommunication(e,t){const n=(0,nt.setupMultiplex)(e);this.setupControllerConnection(n.createStream("controller")),this.setupProviderConnectionEip1193(n.createStream("provider"),t,B.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.state;if(!t)return;const n=(0,nt.setupMultiplex)(e).createStream("metamask-phishing-safelist");n.on("data",(0,ht.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},n))}setUpCookieHandlerCommunication({connectionStream:e}){const{metaMetricsId:t,dataCollectionForMarketing:n,participateInMetaMetrics:r}=this.metaMetricsController.state;if(t&&n&&r){const t=(0,nt.setupMultiplex)(e).createStream(Ot.METAMASK_COOKIE_HANDLER);t.on("data",(0,ht.default)({getCookieFromMarketingPage:this.getCookieFromMarketingPage.bind(this)},t))}}getCookieFromMarketingPage(e){const{ga_client_id:t}=e;this.metaMetricsController.setMarketingCampaignCookieId(t)}sendPhishingWarning(e,t){(0,nt.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=new Gt.PatchStore(this.memStore);let n=!1;const r=()=>{if(!(0,nt.isStreamWritable)(e)||!n)return;const r=t.flushPendingPatches();e.write({jsonrpc:"2.0",method:"sendUpdate",params:[r]})},o={...this.getApi(),startPatches:()=>{n=!0,r()},getStatePatches:()=>t.flushPendingPatches()};this.on("update",r),this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,ht.default)(o,e));const a=()=>{(0,nt.isStreamWritable)(e)&&e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?a():this.once("startUISync",a);const i=()=>{e.mmFinished||(this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.mmFinished=!0,this.removeListener("update",r),t.destroy())};e.mmFinished=!1,(0,s.finished)(e,i),e.once("close",i),e.once("end",i)}setupProviderConnectionEip1193(e,t,n){let r,o;r=n===B.SubjectType.Internal?ge.ORIGIN_METAMASK:n===B.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:B.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);let a=r;t.tab&&t.tab.url&&(a=new URL(t.tab.url).origin);const l=this.setupProviderEngineEip1193({origin:r,sender:t,subjectType:n,tabId:o,mainFrameOrigin:a}),c=(0,We.default)(),d=(0,i.createEngineStream)({engine:l}),u=this.addConnection(r,{engine:l});(0,s.pipeline)(e,c,d,e,(e=>{var t;l.destroy(),u&&this.removeConnection(r,u),!e||null!==(t=e.message)&&void 0!==t&&t.match("Premature close")||C.default.error(e)})),n!==B.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:l},r)}setupProviderConnectionCaip(e,t,n){let r,o;r=n===B.SubjectType.Internal?ge.ORIGIN_METAMASK:n===B.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:B.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);const a=this.setupProviderEngineCaip({origin:r,tabId:o}),l=(0,We.default)(),c=(0,i.createEngineStream)({engine:a}),d=this.addConnection(r,{engine:a});(0,s.pipeline)(e,l,c,e,(e=>{a._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),d&&this.removeConnection(r,d),e&&C.default.error(e)})),n!==B.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:a},r)}setupSnapProvider(e,t){this.setupUntrustedCommunicationEip1193({connectionStream:t,sender:{snapId:e},subjectType:B.SubjectType.Snap})}setupProviderEngineEip1193({origin:e,subjectType:t,sender:n,tabId:r,mainFrameOrigin:s}){const o=new a.JsonRpcEngine;o.push((0,Ye.default)({origin:e})),s&&o.push((0,Qe.default)({mainFrameOrigin:s})),o.push((0,U.createSelectedNetworkMiddleware)(this.controllerMessenger));const i=(0,Y.createQueuedRequestMiddleware)({enqueueRequest:this.queuedRequestController.enqueueRequest.bind(this.queuedRequestController),useRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),shouldEnqueueRequest:e=>oe.methodsThatShouldBeEnqueued.includes(e.method)});o.push(i);const l=this.selectedNetworkController.getProviderAndBlockTracker(e),c=(0,p.default)(l),u=(0,m.default)(l);return u.events.on("notification",(e=>o.emit("notification",e))),r&&o.push((0,Xe.default)({tabId:r})),o.push((0,ze.default)({origin:e})),o.push(this.permissionLogController.createMiddleware()),e===Pe.BaseUrl.Portfolio&&o.push((0,xt.createTxVerificationMiddleware)(this.networkController)),o.push((0,qt.default)()),o.push((0,He.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.accountsController,this.updateSecurityAlertResponse.bind(this))),o.push((0,bt.default)({getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),isConfirmationRedesignEnabled:this.isConfirmationRedesignEnabled.bind(this),isRedesignedConfirmationsDeveloperEnabled:this.isConfirmationRedesignDeveloperEnabled.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController,metaMetricsController:this.metaMetricsController})),o.push((0,Je.createUnsupportedMethodMiddleware)()),o.push((0,Je.createLegacyMethodMiddleware)({getAccounts:this.getPermittedAccounts.bind(this,e)})),t!==B.SubjectType.Internal&&o.push(this.permissionController.createPermissionMiddleware({origin:e})),t===B.SubjectType.Website&&o.push((0,tt.default)({location:n.url,registerOnboarding:this.onboardingController.registerOnboarding})),o.push((0,jt.default)({messenger:this.controllerMessenger.getRestricted({name:"EvmMethodsToNonEvmAccountFilterMessenger",allowedActions:["AccountsController:getSelectedAccount"]})})),o.push((0,Je.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{},...!(0,Re.isSnapId)(e)&&{[yt.PermissionNames.permittedChains]:{}}}),requestPermittedChainsPermission:t=>this.permissionController.requestPermissionsIncremental({origin:e},{[yt.PermissionNames.permittedChains]:{caveats:[yt.CaveatFactories[he.CaveatTypes.restrictNetworkSwitching](t)]}}),grantPermittedChainsPermissionIncremental:t=>this.permissionController.grantPermissionsIncremental({subject:{origin:e},approvedPermissions:{[yt.PermissionNames.permittedChains]:{caveats:[yt.CaveatFactories[he.CaveatTypes.restrictNetworkSwitching](t)]}}}),requestPermissionsForOrigin:t=>this.permissionController.requestPermissions({origin:e},{...t[yt.PermissionNames.eth_accounts]&&{[yt.PermissionNames.permittedChains]:{}},...t[yt.PermissionNames.permittedChains]&&{[yt.PermissionNames.eth_accounts]:{}},...t}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCaveat:({target:t,caveatType:n})=>{try{return this.permissionController.getCaveat(e,t,n)}catch(e){if(!(e instanceof B.PermissionDoesNotExistError))throw e}return undefined},setActiveNetwork:async t=>{await this.networkController.setActiveNetwork(t),this.permissionController.hasPermission(e,yt.PermissionNames.eth_accounts)&&this.selectedNetworkController.setNetworkClientIdForDomain(e,t)},addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),getNetworkConfigurationByChainId:this.networkController.getNetworkConfigurationByChainId.bind(this.networkController),getCurrentChainIdForDomain:e=>{const t=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:n}=this.networkController.getNetworkConfigurationByNetworkClientId(t);return n},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),o.push((0,q.createSnapsMethodMiddleware)(t===B.SubjectType.Snap,{getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),invokeSnap:this.permissionController.executeRestrictedMethod.bind(this.permissionController,e,he.RestrictedMethods.wallet_snap),getIsLocked:()=>!this.appStateController.isUnlocked(),getInterfaceState:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).state,getInterfaceContext:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).context,createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface",e),updateInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterface",e),resolveInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:resolveInterface",e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),getCurrencyRate:e=>{const t=this.multichainRatesController.state.rates[e],{fiatCurrency:n}=this.multichainRatesController.state;return t?{...t,currency:n}:undefined},hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,Ue.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),o.push(c),o.push(u.middleware),o.push(this.metamaskMiddleware),o.push((0,d.providerAsMiddleware)(l.provider)),o}setupProviderEngineCaip({origin:e,tabId:t}){const n=new a.JsonRpcEngine;return n.push(((n,r,s,o)=>(console.log("CAIP request received",{origin:e,tabId:t,request:n}),o(new Error("CAIP RPC Pipeline not yet implemented."))))),n}setupPublicConfig(e){const t=(0,c.storeAsStream)(this.publicConfigStore);(0,s.pipeline)(t,e,(e=>{var n;t.destroy(),!e||null!==(n=e.message)&&void 0!==n&&n.match("Premature close")||C.default.error(e)}))}addConnection(e,{engine:t}){if(e===ge.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const n=(0,T.nanoid)();return this.connections[e][n]={engine:t},n}removeConnection(e,t){const n=this.connections[e];n&&(delete n[t],0===Object.keys(n).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const n=this.connections[e];n&&Object.values(n).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async n=>{try{this.notifyConnection(n,await t(e))}catch(e){console.error(e)}}))}))}notifyConnection(e,t){try{e.engine&&e.engine.emit("notification",t)}catch(e){console.error(e)}}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,n=t.reduce(((e,{accounts:t})=>e.concat(t)),[]).filter(Dt.isEthAddress);n.length&&this.accountTrackerController.syncWithAddresses(n)}_onUnlock(){this.notifyAllConnections((async e=>({method:yt.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:yt.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}isConfirmationRedesignEnabled(){return this.preferencesController.state.preferences.redesignedConfirmationsEnabled}isTransactionsRedesignEnabled(){return this.preferencesController.state.preferences.redesignedTransactionsEnabled}isConfirmationRedesignDeveloperEnabled(){return this.preferencesController.state.preferences.isRedesignedConfirmationsDeveloperEnabled}async initializeChainlist(){const e=`cachedFetch:${le.CHAIN_SPEC_URL}`,{cachedResponse:t}=await(0,ye.getStorageItem)(e)||{};t||await(0,ye.setStorageItem)(e,{cachedResponse:(0,b.rawChainData)(),cachedTime:0})}async getPendingNonce(e,t){const{nonceDetails:n,releaseLock:r}=await this.txController.getNonceLock(e,undefined),s=n.params.highestSuggested;return r(),s}async getNextNonce(e,t){const n=await this.txController.getNonceLock(e,undefined);return n.releaseLock(),n.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addTransactionControllerListeners(){const e=this.getTransactionMetricsRequest();this.controllerMessenger.subscribe("TransactionController:postTransactionBalanceUpdated",je.handlePostTransactionBalanceUpdate.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:unapprovedTransactionAdded",(t=>(0,je.handleTransactionAdded)(e,{transactionMeta:t}))),this.controllerMessenger.subscribe("TransactionController:transactionApproved",je.handleTransactionApproved.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionDropped",je.handleTransactionDropped.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionConfirmed",je.handleTransactionConfirmed.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionFailed",je.handleTransactionFailed.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionNewSwap",(({transactionMeta:e})=>this.controllerMessenger.call("SwapsController:setTradeTxId",e.id))),this.controllerMessenger.subscribe("TransactionController:transactionNewSwapApproval",(({transactionMeta:e})=>this.controllerMessenger.call("SwapsController:setApproveTxId",e.id))),this.controllerMessenger.subscribe("TransactionController:transactionRejected",je.handleTransactionRejected.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionSubmitted",je.handleTransactionSubmitted.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionStatusUpdated",(({transactionMeta:e})=>{this._onFinishedTransaction(e)}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e)),getIsSmartTransaction:()=>(0,Ee.getIsSmartTransaction)(this._getMetaMaskState()),getSmartTransactionByMinedTxHash:e=>this.smartTransactionsController.getSmartTransactionByMinedTxHash(e),getRedesignedConfirmationsEnabled:this.isConfirmationRedesignEnabled.bind(this),getRedesignedTransactionsEnabled:this.isTransactionsRedesignEnabled.bind(this),getMethodData:e=>{if(!e)return null;const{knownMethodData:t,use4ByteResolution:n}=this.preferencesController.state,r=(0,pt.addHexPrefix)(e);return(0,pt.getMethodDataName)(t,n,r,this.preferencesController.addKnownMethodData.bind(this.preferencesController),this.provider)},getIsRedesignedConfirmationsDeveloperEnabled:this.isConfirmationRedesignDeveloperEnabled.bind(this),getIsConfirmationAdvancedDetailsOpen:()=>this.preferencesController.state.preferences.showConfirmationAdvancedDetails},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}toggleExternalServices(e){this.preferencesController.toggleExternalServices(e),this.tokenListController.updatePreventPollingOnNetworkRestart(!e),e?(this.tokenDetectionController.enable(),this.gasFeeController.enableNonRPCGasFeeApis()):(this.tokenDetectionController.disable(),this.gasFeeController.disableNonRPCGasFeeApis())}async setLedgerTransportPreference(e){const t=de.LedgerTransportTypes.webhid,n=e||await this.getKeyringForDevice(de.HardwareDeviceNames.ledger);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(t).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t="12.9.3";e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e}onClientClosed(){try{this.gasFeeController.stopAllPolling(),this.currencyRateController.stopAllPolling(),this.tokenRatesController.stopAllPolling(),this.tokenDetectionController.stopAllPolling(),this.tokenListController.stopAllPolling(),this.tokenBalancesController.stopAllPolling(),this.appStateController.clearPollingTokens(),this.accountTrackerController.stopAllPolling()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=ge.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.stopPollingByPollingToken(e),this.currencyRateController.stopPollingByPollingToken(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.Phishing,event:fe.MetaMetricsEventName.ProceedAnywayClicked,properties:{url:e,referrer:{url:e}}}),this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){this.metaMetricsController.trackEvent({category:fe.MetaMetricsEventCategory.Navigation,event:fe.MetaMetricsEventName.PortfolioLinkClicked,properties:{location:"phishing_page",text:"Back to safety"}}),await this.platform.switchToAnotherURL(undefined,"https://portfolio.metamask.io/?metamaskEntry=phishing_page_portfolio_button")}setLocked(){return this.keyringController.setLocked()}async _onAccountChange(e){const t=(0,yt.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[n,r]of t.entries())r.includes(e)&&this._notifyAccountsChange(n,r);await this.txController.updateIncomingTransactions()}async _notifyAccountsChange(e,t){this.isUnlocked()&&this.notifyConnections(e,{method:yt.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)}async _notifyChainChange(){this.preferencesController.getUseRequestQueue()?this.notifyAllConnections((async e=>({method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(e)}))):this.notifyAllConnections({method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState()})}async _notifyChainChangeForConnection(e,t){this.preferencesController.getUseRequestQueue()?this.notifyConnection(e,{method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(t)}):this.notifyConnection(e,{method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState()})}async _onFinishedTransaction(e){[X.TransactionStatus.confirmed,X.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),await this._updateNFTOwnership(e),this._trackTransactionFailure(e),await this.tokenBalancesController.updateBalancesByChainId({chainId:e.chainId}))}async _createTransactionNotifcation(e){const{chainId:t}=e;let n={};if(t){var r,s;const e=null===(r=this.networkController.state.networkConfigurationsByChainId)||void 0===r?void 0:r[t];n={blockExplorerUrl:null==e||null===(s=e.blockExplorerUrls)||void 0===s?void 0:s[null==e?void 0:e.defaultBlockExplorerUrlIndex]}}try{await this.platform.showTransactionNotification(e,n)}catch(e){C.default.error("Failed to create transaction notification",e)}}async _updateNFTOwnership(e){const{type:t,txParams:n,chainId:r,txReceipt:s}=e,o=this.accountsController.getSelectedAccount().address,{allNfts:a}=this.nftController.state,i=null==s?void 0:s.logs,l=t===X.TransactionType.contractInteraction&&i,c=(t===X.TransactionType.tokenMethodTransferFrom||t===X.TransactionType.tokenMethodSafeTransferFrom)&&n!==undefined;if(l||c)if(c){var d;const{data:e,to:t,from:s}=n,o=(0,be.parseStandardTokenTransactionData)(e),i=(0,we.getTokenIdParam)(o)??(0,Se.getTokenValueParam)(o),l=null==a||null===(d=a[s])||void 0===d||null===(d=d[r])||void 0===d?void 0:d.find((({address:e,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(e,t)&&n===i));l&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(l,!1,{userAddress:s})}else{const e=i.map((e=>{const t=e.topics&&e.topics[0]===_e.TRANSFER_SINFLE_LOG_TOPIC_HASH,n=e.topics&&e.topics[0]===_e.TOKEN_TRANSFER_LOG_TOPIC_HASH;let r;return t&&(r=e.topics&&e.topics[3]&&e.topics[3].match(null==o?void 0:o.slice(2))),n&&(r=e.topics&&e.topics[2]&&e.topics[2].match(null==o?void 0:o.slice(2))),{isERC1155NftTransfer:t,isERC721NftTransfer:n,isTransferToSelectedAddress:r,...e}}));if(0!==e.length){const t=[];e.forEach((e=>{if(e.isTransferToSelectedAddress&&(e.isERC1155NftTransfer||e.isERC721NftTransfer)){let n;n=e.isERC1155NftTransfer?new ee.Interface(te.abiERC1155):new ee.Interface(te.abiERC721);try{const r=n.parseLog({data:e.data,topics:e.topics});t.push({contract:e.address,...r})}catch(e){}}}));const n=[],s=[];t.forEach((e=>{var t;const i=(0,we.getTokenIdParam)(e),l=null==a||null===(t=a[o])||void 0===t||null===(t=t[r])||void 0===t?void 0:t.find((({address:t,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(t,e.contract)&&n===i));l?n.push(l):s.push({tokenId:i,...e})}));const i=n.map((async e=>this.nftController.checkAndUpdateSingleNftOwnershipStatus(e,!1,{selectedAddress:o})));await Promise.allSettled(i);const l=s.map((async e=>this.nftController.addNft(e.contract,e.tokenId)));await Promise.allSettled(l)}}}_trackTransactionFailure(e){var t;const{txReceipt:n}=e,r=this.getState();n&&"0x0"===n.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:fe.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(t=e.simulationFails)||void 0===t?void 0:t.reason,numberOfTokens:r.tokens.length,numberOfAccounts:Object.keys(r.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===X.TransactionType.swap?this.controllerMessenger.publish("TransactionController:transactionNewSwap",{transactionMeta:t}):t.type===X.TransactionType.swapApproval&&this.controllerMessenger.publish("TransactionController:transactionNewSwapApproval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){const t={...e,txParams:{...e.txParams,from:this.accountsController.getSelectedAccount().address}};this.txController.state.transactions.some((e=>e.id===t.id))||this.txController.update((e=>{e.transactions.push(t)})),this.txController.updateTransaction(t,"Generated from user operation"),this.controllerMessenger.publish("TransactionController:transactionStatusUpdated",{transactionMeta:t})}_publishSmartTransactionHook(e,t){const n=this._getMetaMaskState(),r=(0,Ee.getIsSmartTransaction)(n);if(!r)return{transactionHash:undefined};const s=(0,Ee.getFeatureFlagsByChainId)(n);return(0,De.submitSmartTransactionHook)({transactionMeta:e,signedTransactionInHex:t,transactionController:this.txController,smartTransactionsController:this.smartTransactionsController,controllerMessenger:this.controllerMessenger,isSmartTransaction:r,isHardwareWallet:(0,Ee.isHardwareWallet)(n),featureFlags:s})}_getMetaMaskState(){return{metamask:this.getState()}}}function rn(e,t){const n=Xt(tn,this,sn).call(this,t),r=Xt(tn,this,sn).call(this,e);n!==r&&this.tokenListController.updatePreventPollingOnNetworkRestart(!r)}function sn(e){const{useTokenDetection:t,useTransactionSimulations:n,preferences:r}=e??{},{petnamesEnabled:s}=r??{};return t||s||n}n.default=nn}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[137,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:2,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[138,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:3,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[139,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:4,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[14,{"../../../../shared/modules/conversion.utils":5301,"../../../../shared/types/bridge-status":5329,"./constants":15,"./utils":16,"@metamask/polling-controller":2172},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/polling-controller"),s=e("../../../../shared/types/bridge-status"),o=e("../../../../shared/modules/conversion.utils"),a=e("./constants"),i=e("./utils");function l(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t,n){d(e,t),t.set(e,n)}function d(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function u(e,t){return e.get(h(e,t))}function h(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const p={bridgeStatusState:{persist:!0,anonymous:!1}};var m=new WeakMap,g=new WeakMap,f=new WeakSet,C=new WeakMap,y=new WeakMap;class w extends((0,r.StaticIntervalPollingController)()){constructor({messenger:e,state:t}){var n,r;super({name:a.BRIDGE_STATUS_CONTROLLER_NAME,metadata:p,messenger:e,state:{...t,bridgeStatusState:{...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,...null==t?void 0:t.bridgeStatusState}}}),d(n=this,r=f),r.add(n),c(this,m,{}),l(this,"resetState",(()=>{this.update((e=>{e.bridgeStatusState={...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE}}))})),l(this,"wipeBridgeStatus",(({address:e,ignoreNetwork:t})=>{if(t)this.update((e=>{e.bridgeStatusState={...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE}}));else{const{selectedNetworkClientId:t}=this.messagingSystem.call("NetworkController:getState"),n=this.messagingSystem.call("NetworkController:getNetworkClientById",t).configuration.chainId;u(y,this).call(this,e,n)}})),c(this,g,(()=>{const{bridgeStatusState:e}=this.state;Object.values(e.txHistory).filter((e=>e.status.status!==s.StatusTypes.COMPLETE)).filter((e=>{const t=e.status.srcChain.txHash;return!u(m,this)[t]})).forEach((e=>{const t={bridgeId:e.quote.bridgeId,srcTxHash:e.status.srcChain.txHash,bridge:e.quote.bridges[0],srcChainId:e.quote.srcChainId,destChainId:e.quote.destChainId,quote:e.quote,refuel:Boolean(e.quote.refuel)},n=(0,o.decimalToPrefixedHex)(t.srcChainId),r=this.messagingSystem.call("NetworkController:findNetworkClientIdByChainId",n);u(m,this)[t.srcTxHash]=this.startPolling({networkClientId:r,statusRequest:t})}))})),l(this,"startPollingForBridgeTxStatus",(e=>{const{statusRequest:t,quoteResponse:n,startTime:r,slippagePercentage:a,pricingData:i,initialDestAssetBalance:l,targetContractAddress:c}=e,d=(0,o.decimalToPrefixedHex)(t.srcChainId),{bridgeStatusState:p}=this.state,{address:g}=h(f,this,v).call(this);this.update((e=>{e.bridgeStatusState={...p,txHistory:{...p.txHistory,[t.srcTxHash]:{quote:n.quote,startTime:r,estimatedProcessingTimeInSeconds:n.estimatedProcessingTimeInSeconds,slippagePercentage:a,pricingData:i,initialDestAssetBalance:l,targetContractAddress:c,account:g,status:{status:s.StatusTypes.PENDING,srcChain:{chainId:t.srcChainId,txHash:t.srcTxHash}}}}}}));const C=this.messagingSystem.call("NetworkController:findNetworkClientIdByChainId",d);u(m,this)[t.srcTxHash]=this.startPolling({networkClientId:C,statusRequest:t})})),l(this,"_executePoll",(async e=>{await u(C,this).call(this,e)})),c(this,C,(async({networkClientId:e,statusRequest:t})=>{const{bridgeStatusState:n}=this.state;try{const e=await(0,i.fetchBridgeTxStatus)(t);this.update((r=>{const s=r.bridgeStatusState.txHistory[t.srcTxHash];r.bridgeStatusState={...n,txHistory:{...n.txHistory,[t.srcTxHash]:{...s,status:e}}}}));const r=u(m,this)[t.srcTxHash];e.status===s.StatusTypes.COMPLETE&&r&&this.stopPollingByPollingToken(r)}catch(e){console.log("Failed to fetch bridge tx status",e)}})),c(this,y,((e,t)=>{const n=Object.keys(this.state.bridgeStatusState.txHistory).filter((n=>{const r=this.state.bridgeStatusState.txHistory[n],s=(0,o.decimalToPrefixedHex)(r.quote.srcChainId),a=(0,o.decimalToPrefixedHex)(r.quote.destChainId);return r.account===e&&(s===t||a===t)}));n.forEach((e=>{u(m,this)[e]&&this.stopPollingByPollingToken(u(m,this)[e])})),this.update((e=>{e.bridgeStatusState.txHistory=n.reduce(((e,t)=>(delete e[t],e)),e.bridgeStatusState.txHistory)}))})),this.messagingSystem.registerActionHandler(`${a.BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,this.startPollingForBridgeTxStatus.bind(this)),this.messagingSystem.registerActionHandler(`${a.BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,this.wipeBridgeStatus.bind(this)),this.setIntervalLength(a.REFRESH_INTERVAL_MS),u(g,this).call(this)}}function v(){return this.messagingSystem.call("AccountsController:getSelectedAccount")}n.default=w}}},{package:"$root$",file:"app/scripts/controllers/bridge-status/bridge-status-controller.ts"}],[140,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:5,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,n={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete n.vault,delete n.walletNicknames,delete n.config.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[141,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:6,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,n={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete n.KeyringController.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[142,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:7,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[143,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:8,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[144,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:9,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,r.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[1449,{"@ethersproject/providers":561,"@metamask/base-controller":1396,"@metamask/controller-utils":1422,"@metamask/utils":1461,"punycode/punycode.js":4586},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,o,a,i,l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},c=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};Object.defineProperty(n,"__esModule",{value:!0}),n.EnsController=n.DEFAULT_ENS_NETWORK_MAP=void 0;const d=e("@ethersproject/providers"),u=e("@metamask/base-controller"),h=e("@metamask/controller-utils"),p=e("@metamask/utils"),m=e("punycode/punycode.js"),g=(0,p.createProjectLogger)("ens-controller");n.DEFAULT_ENS_NETWORK_MAP={1:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",3:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",4:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",5:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",17e3:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",11155111:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"};const f={ensEntries:{persist:!0,anonymous:!1},ensResolutionsByAddress:{persist:!0,anonymous:!1}},C={ensEntries:{},ensResolutionsByAddress:{}};class y extends u.BaseController{constructor({registriesByChainId:e=n.DEFAULT_ENS_NETWORK_MAP,messenger:t,state:i={},onNetworkDidChange:c}){super({name:"EnsController",metadata:f,messenger:t,state:{...C,ensEntries:Object.fromEntries(Object.entries(e).map((([e,t])=>[(0,h.toHex)(e),{".":{address:t,chainId:(0,h.toHex)(e),ensName:"."}}]))),...i}}),r.add(this),s.set(this,null),l(this,r,"m",o).call(this,e),c&&c((({selectedNetworkClientId:t})=>{this.resetState(),l(this,r,"m",a).call(this,t,e)}))}resetState(){this.update((e=>{e.ensResolutionsByAddress={}}))}clear(){this.update((e=>{e.ensEntries={}}))}delete(e,t){const n=(0,h.normalizeEnsName)(t);return!!((0,h.isSafeDynamicKey)(e)&&n&&this.state.ensEntries[e]&&this.state.ensEntries[e][n])&&(this.update((t=>{delete t.ensEntries[e][n],0===Object.keys(t.ensEntries[e]).length&&delete t.ensEntries[e]})),!0)}get(e,t){const n=(0,h.normalizeEnsName)(t);return n&&this.state.ensEntries[e]&&this.state.ensEntries[e][n]||null}set(e,t,n){if(!Number.isInteger(Number.parseInt(e,10))||!t||"string"!=typeof t||n&&!(0,h.isValidHexAddress)(n))throw new Error(`Invalid ENS entry: { chainId:${e}, ensName:${t}, address:${n}}`);const r=(0,h.normalizeEnsName)(t);if(!r)throw new Error(`Invalid ENS name: ${t}`);const s=n?(0,h.toChecksumHexAddress)(n):null,o=this.state.ensEntries[e];return(!o?.[r]||o[r].address!==s)&&(this.update((t=>{t.ensEntries={...this.state.ensEntries,[e]:{...this.state.ensEntries[e],[r]:{address:s,chainId:e,ensName:r}}}})),!0)}async reverseResolveAddress(e){if(!l(this,s,"f"))return undefined;const t=(0,h.toChecksumHexAddress)(e);if(this.state.ensResolutionsByAddress[t])return this.state.ensResolutionsByAddress[t];let n,r;try{n=await l(this,s,"f").lookupAddress(t)}catch(e){return g(e),undefined}if(!n)return undefined;try{r=await l(this,s,"f").resolveName(n)}catch(e){return g(e),undefined}return r?"0x0000000000000000000000000000000000000000"===r||"0x"===r||(0,h.toChecksumHexAddress)(r)!==t?undefined:(this.update((e=>{e.ensResolutionsByAddress[t]=(0,m.toASCII)(n)})),n):undefined}}n.EnsController=y,s=new WeakMap,r=new WeakSet,o=function(e){const{selectedNetworkClientId:t}=this.messagingSystem.call("NetworkController:getState");l(this,r,"m",a).call(this,t,e)},a=function(e,t){const{configuration:{chainId:n},provider:o}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);t&&t[parseInt(n,16)]&&l(this,r,"m",i).call(this,n)?c(this,s,new d.Web3Provider(o,{chainId:(0,h.convertHexToDecimal)(n),name:h.CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP[n],ensAddress:t[parseInt(n,16)]}),"f"):c(this,s,null,"f")},i=function(e){return Boolean(this.state.ensEntries[e])},n.default=y}}},{package:"@metamask/ens-controller",file:"node_modules/@metamask/ens-controller/dist/EnsController.cjs"}],[145,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:10,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,r.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[1450,{"./EnsController.cjs":1449},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./EnsController.cjs"),n)}}},{package:"@metamask/ens-controller",file:"node_modules/@metamask/ens-controller/dist/index.cjs"}],[1451,{"./errors.cjs":1459,"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.assertExhaustive=n.assertStruct=n.assert=n.AssertionError=void 0;const r=e("@metamask/superstruct"),s=e("./errors.cjs");function o(e,t){return n=e,Boolean("string"==typeof n?.prototype?.constructor?.name)?new e({message:t}):e({message:t});var n}class a extends Error{constructor(e){super(e.message),this.code="ERR_ASSERTION"}}n.AssertionError=a,n.assert=function(e,t="Assertion failed.",n=a){if(!e){if(t instanceof Error)throw t;throw o(n,t)}},n.assertStruct=function(e,t,n="Assertion failed",i=a){try{(0,r.assert)(e,t)}catch(e){throw o(i,`${n}: ${function(e){return(0,s.getErrorMessage)(e).replace(/\.$/u,"")}(e)}.`)}},n.assertExhaustive=function(e){throw new Error("Invalid branch reached. Should be detected during compilation.")}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/assert.cjs"}],[1452,{"./assert.cjs":1451,"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.base64=void 0;const r=e("@metamask/superstruct"),s=e("./assert.cjs");n.base64=(e,t={})=>{const n=t.paddingRequired??!1,o=t.characterSet??"base64";let a,i;return"base64"===o?a=String.raw`[A-Za-z0-9+\/]`:((0,s.assert)("base64url"===o),a=String.raw`[-_A-Za-z0-9]`),i=n?new RegExp(`^(?:${a}{4})*(?:${a}{3}=|${a}{2}==)?$`,"u"):new RegExp(`^(?:${a}{4})*(?:${a}{2,3}|${a}{3}=|${a}{2}==)?$`,"u"),(0,r.pattern)(e,i)}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/base64.cjs"}],[1453,{"./assert.cjs":1451,"./hex.cjs":1460,"@scure/base":2830,buffer:3561},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.createDataView=n.concatBytes=n.valueToBytes=n.base64ToBytes=n.stringToBytes=n.numberToBytes=n.signedBigIntToBytes=n.bigIntToBytes=n.hexToBytes=n.bytesToBase64=n.bytesToString=n.bytesToNumber=n.bytesToSignedBigInt=n.bytesToBigInt=n.bytesToHex=n.assertIsBytes=n.isBytes=void 0;const r=e("@scure/base"),s=e("./assert.cjs"),o=e("./hex.cjs"),a=48,i=58,l=87;const c=function(){const e=[];return()=>{if(0===e.length)for(let t=0;t<256;t++)e.push(t.toString(16).padStart(2,"0"));return e}}();function d(e){return e instanceof Uint8Array}function u(e){(0,s.assert)(d(e),"Value must be a Uint8Array.")}function h(e){if(u(e),0===e.length)return"0x";const t=c(),n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=t[e[r]];return(0,o.add0x)(n.join(""))}function p(e){u(e);const t=h(e);return BigInt(t)}function m(e){if("0x"===e?.toLowerCase?.())return new Uint8Array;(0,o.assertIsHexString)(e);const t=(0,o.remove0x)(e).toLowerCase(),n=t.length%2==0?t:`0${t}`,r=new Uint8Array(n.length/2);for(let e=0;e<r.length;e++){const t=n.charCodeAt(2*e),s=n.charCodeAt(2*e+1),o=t-(t<i?a:l),c=s-(s<i?a:l);r[e]=16*o+c}return r}function g(e){(0,s.assert)("bigint"==typeof e,"Value must be a bigint."),(0,s.assert)(e>=BigInt(0),"Value must be a non-negative bigint.");return m(e.toString(16))}function f(e){(0,s.assert)("number"==typeof e,"Value must be a number."),(0,s.assert)(e>=0,"Value must be a non-negative number."),(0,s.assert)(Number.isSafeInteger(e),"Value is not a safe integer. Use `bigIntToBytes` instead.");return m(e.toString(16))}function C(e){return(0,s.assert)("string"==typeof e,"Value must be a string."),(new TextEncoder).encode(e)}function y(e){if("bigint"==typeof e)return g(e);if("number"==typeof e)return f(e);if("string"==typeof e)return e.startsWith("0x")?m(e):C(e);if(d(e))return e;throw new TypeError(`Unsupported value type: "${typeof e}".`)}n.isBytes=d,n.assertIsBytes=u,n.bytesToHex=h,n.bytesToBigInt=p,n.bytesToSignedBigInt=function(e){u(e);let t=BigInt(0);for(const n of e)t=(t<<BigInt(8))+BigInt(n);return BigInt.asIntN(8*e.length,t)},n.bytesToNumber=function(e){u(e);const t=p(e);return(0,s.assert)(t<=BigInt(Number.MAX_SAFE_INTEGER),"Number is not a safe integer. Use `bytesToBigInt` instead."),Number(t)},n.bytesToString=function(e){return u(e),(new TextDecoder).decode(e)},n.bytesToBase64=function(e){return u(e),r.base64.encode(e)},n.hexToBytes=m,n.bigIntToBytes=g,n.signedBigIntToBytes=function(e,t){(0,s.assert)("bigint"==typeof e,"Value must be a bigint."),(0,s.assert)("number"==typeof t,"Byte length must be a number."),(0,s.assert)(t>0,"Byte length must be greater than 0."),(0,s.assert)(function(e,t){(0,s.assert)(t>0);const n=e>>BigInt(31);return!((~e&n)+(e&~n)>>BigInt(8*t-1))}(e,t),"Byte length is too small to represent the given value.");let n=e;const r=new Uint8Array(t);for(let e=0;e<r.length;e++)r[e]=Number(BigInt.asUintN(8,n)),n>>=BigInt(8);return r.reverse()},n.numberToBytes=f,n.stringToBytes=C,n.base64ToBytes=function(e){return(0,s.assert)("string"==typeof e,"Value must be a string."),r.base64.decode(e)},n.valueToBytes=y,n.concatBytes=function(e){const t=new Array(e.length);let n=0;for(let r=0;r<e.length;r++){const s=y(e[r]);t[r]=s,n+=s.length}const r=new Uint8Array(n);for(let e=0,n=0;e<t.length;e++)r.set(t[e],n),n+=t[e].length;return r},n.createDataView=function(e){if(void 0!==t&&e instanceof t){const t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return new DataView(t)}return new DataView(e.buffer,e.byteOffset,e.byteLength)}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/bytes.cjs"}],[1454,{"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.toCaipChainId=n.parseCaipAccountId=n.parseCaipChainId=n.isCaipAssetId=n.isCaipAssetType=n.isCaipAccountAddress=n.isCaipAccountId=n.isCaipReference=n.isCaipNamespace=n.isCaipChainId=n.KnownCaipNamespace=n.CaipAssetIdStruct=n.CaipAssetTypeStruct=n.CaipAccountAddressStruct=n.CaipAccountIdStruct=n.CaipReferenceStruct=n.CaipNamespaceStruct=n.CaipChainIdStruct=n.CAIP_ASSET_ID_REGEX=n.CAIP_ASSET_TYPE_REGEX=n.CAIP_ACCOUNT_ADDRESS_REGEX=n.CAIP_ACCOUNT_ID_REGEX=n.CAIP_REFERENCE_REGEX=n.CAIP_NAMESPACE_REGEX=n.CAIP_CHAIN_ID_REGEX=void 0;const r=e("@metamask/superstruct");function s(e){return(0,r.is)(e,n.CaipNamespaceStruct)}function o(e){return(0,r.is)(e,n.CaipReferenceStruct)}n.CAIP_CHAIN_ID_REGEX=/^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u,n.CAIP_NAMESPACE_REGEX=/^[-a-z0-9]{3,8}$/u,n.CAIP_REFERENCE_REGEX=/^[-_a-zA-Z0-9]{1,32}$/u,n.CAIP_ACCOUNT_ID_REGEX=/^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u,n.CAIP_ACCOUNT_ADDRESS_REGEX=/^[-.%a-zA-Z0-9]{1,128}$/u,n.CAIP_ASSET_TYPE_REGEX=/^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u,n.CAIP_ASSET_ID_REGEX=/^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u,n.CaipChainIdStruct=(0,r.pattern)((0,r.string)(),n.CAIP_CHAIN_ID_REGEX),n.CaipNamespaceStruct=(0,r.pattern)((0,r.string)(),n.CAIP_NAMESPACE_REGEX),n.CaipReferenceStruct=(0,r.pattern)((0,r.string)(),n.CAIP_REFERENCE_REGEX),n.CaipAccountIdStruct=(0,r.pattern)((0,r.string)(),n.CAIP_ACCOUNT_ID_REGEX),n.CaipAccountAddressStruct=(0,r.pattern)((0,r.string)(),n.CAIP_ACCOUNT_ADDRESS_REGEX),n.CaipAssetTypeStruct=(0,r.pattern)((0,r.string)(),n.CAIP_ASSET_TYPE_REGEX),n.CaipAssetIdStruct=(0,r.pattern)((0,r.string)(),n.CAIP_ASSET_ID_REGEX),function(e){e.Bip122="bip122",e.Eip155="eip155",e.Wallet="wallet"}(n.KnownCaipNamespace||(n.KnownCaipNamespace={})),n.isCaipChainId=function(e){return(0,r.is)(e,n.CaipChainIdStruct)},n.isCaipNamespace=s,n.isCaipReference=o,n.isCaipAccountId=function(e){return(0,r.is)(e,n.CaipAccountIdStruct)},n.isCaipAccountAddress=function(e){return(0,r.is)(e,n.CaipAccountAddressStruct)},n.isCaipAssetType=function(e){return(0,r.is)(e,n.CaipAssetTypeStruct)},n.isCaipAssetId=function(e){return(0,r.is)(e,n.CaipAssetIdStruct)},n.parseCaipChainId=function(e){const t=n.CAIP_CHAIN_ID_REGEX.exec(e);if(!t?.groups)throw new Error("Invalid CAIP chain ID.");return{namespace:t.groups.namespace,reference:t.groups.reference}},n.parseCaipAccountId=function(e){const t=n.CAIP_ACCOUNT_ID_REGEX.exec(e);if(!t?.groups)throw new Error("Invalid CAIP account ID.");return{address:t.groups.accountAddress,chainId:t.groups.chainId,chain:{namespace:t.groups.namespace,reference:t.groups.reference}}},n.toCaipChainId=function(e,t){if(!s(e))throw new Error(`Invalid "namespace", must match: ${n.CAIP_NAMESPACE_REGEX.toString()}`);if(!o(t))throw new Error(`Invalid "reference", must match: ${n.CAIP_REFERENCE_REGEX.toString()}`);return`${e}:${t}`}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/caip-types.cjs"}],[1455,{"./base64.cjs":1452,"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.ChecksumStruct=void 0;const r=e("@metamask/superstruct"),s=e("./base64.cjs");n.ChecksumStruct=(0,r.size)((0,s.base64)((0,r.string)(),{paddingRequired:!0}),44,44)}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/checksum.cjs"}],[1456,{"./assert.cjs":1451,"./bytes.cjs":1453,"./hex.cjs":1460,"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createHex=n.createBytes=n.createBigInt=n.createNumber=void 0;const r=e("@metamask/superstruct"),s=e("./assert.cjs"),o=e("./bytes.cjs"),a=e("./hex.cjs"),i=(0,r.union)([(0,r.number)(),(0,r.bigint)(),(0,r.string)(),a.StrictHexStruct]),l=(0,r.coerce)((0,r.number)(),i,Number),c=(0,r.coerce)((0,r.bigint)(),i,BigInt),d=((0,r.union)([a.StrictHexStruct,(0,r.instance)(Uint8Array)]),(0,r.coerce)((0,r.instance)(Uint8Array),(0,r.union)([a.StrictHexStruct]),o.hexToBytes)),u=(0,r.coerce)(a.StrictHexStruct,(0,r.instance)(Uint8Array),o.bytesToHex);n.createNumber=function(e){try{const t=(0,r.create)(e,l);return(0,s.assert)(Number.isFinite(t),`Expected a number-like value, got "${e}".`),t}catch(t){if(t instanceof r.StructError)throw new Error(`Expected a number-like value, got "${e}".`);throw t}},n.createBigInt=function(e){try{return(0,r.create)(e,c)}catch(e){if(e instanceof r.StructError)throw new Error(`Expected a number-like value, got "${String(e.value)}".`);throw e}},n.createBytes=function(e){if("string"==typeof e&&"0x"===e.toLowerCase())return new Uint8Array;try{return(0,r.create)(e,d)}catch(e){if(e instanceof r.StructError)throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);throw e}},n.createHex=function(e){if(e instanceof Uint8Array&&0===e.length||"string"==typeof e&&"0x"===e.toLowerCase())return"0x";try{return(0,r.create)(e,u)}catch(e){if(e instanceof r.StructError)throw new Error(`Expected a bytes-like value, got "${String(e.value)}".`);throw e}}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/coercers.cjs"}],[1457,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,o=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},a=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};Object.defineProperty(n,"__esModule",{value:!0}),n.FrozenSet=n.FrozenMap=void 0;class i{get size(){return o(this,r,"f").size}[(r=new WeakMap,Symbol.iterator)](){return o(this,r,"f")[Symbol.iterator]()}constructor(e){r.set(this,void 0),a(this,r,new Map(e),"f"),Object.freeze(this)}entries(){return o(this,r,"f").entries()}forEach(e,t){return o(this,r,"f").forEach(((n,r,s)=>e.call(t,n,r,this)))}get(e){return o(this,r,"f").get(e)}has(e){return o(this,r,"f").has(e)}keys(){return o(this,r,"f").keys()}values(){return o(this,r,"f").values()}toString(){return`FrozenMap(${this.size}) {${this.size>0?` ${[...this.entries()].map((([e,t])=>`${String(e)} => ${String(t)}`)).join(", ")} `:""}}`}}n.FrozenMap=i;class l{get size(){return o(this,s,"f").size}[(s=new WeakMap,Symbol.iterator)](){return o(this,s,"f")[Symbol.iterator]()}constructor(e){s.set(this,void 0),a(this,s,new Set(e),"f"),Object.freeze(this)}entries(){return o(this,s,"f").entries()}forEach(e,t){return o(this,s,"f").forEach(((n,r,s)=>e.call(t,n,r,this)))}has(e){return o(this,s,"f").has(e)}keys(){return o(this,s,"f").keys()}values(){return o(this,s,"f").values()}toString(){return`FrozenSet(${this.size}) {${this.size>0?` ${[...this.values()].map((e=>String(e))).join(", ")} `:""}}`}}n.FrozenSet=l,Object.freeze(i),Object.freeze(i.prototype),Object.freeze(l),Object.freeze(l.prototype)}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/collections.cjs"}],[1458,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0})}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/encryption-types.cjs"}],[1459,{"./misc.cjs":1465,"pony-cause":4518},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.wrapError=n.getErrorMessage=n.isErrorWithStack=n.isErrorWithMessage=n.isErrorWithCode=void 0;const r=e("pony-cause"),s=e("./misc.cjs");function o(e){return"object"==typeof e&&null!==e&&"code"in e}function a(e){return"object"==typeof e&&null!==e&&"message"in e}n.isErrorWithCode=o,n.isErrorWithMessage=a,n.isErrorWithStack=function(e){return"object"==typeof e&&null!==e&&"stack"in e},n.getErrorMessage=function(e){return a(e)&&"string"==typeof e.message?e.message:(0,s.isNullOrUndefined)(e)?"":String(e)},n.wrapError=function(e,t){if((n=e)instanceof Error||(0,s.isObject)(n)&&"Error"===n.constructor.name){let n;return n=2===Error.length?new Error(t,{cause:e}):new r.ErrorWithCause(t,{cause:e}),o(e)&&(n.code=e.code),n}var n;return t.length>0?new Error(`${String(e)}: ${t}`):new Error(String(e))}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/errors.cjs"}],[146,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:11,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[1460,{"./assert.cjs":1451,"./bytes.cjs":1453,"@metamask/superstruct":2670,"@noble/hashes/sha3":2811},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.remove0x=n.add0x=n.isValidChecksumAddress=n.getChecksumAddress=n.isValidHexAddress=n.assertIsStrictHexString=n.assertIsHexString=n.isStrictHexString=n.isHexString=n.HexChecksumAddressStruct=n.HexAddressStruct=n.StrictHexStruct=n.HexStruct=void 0;const r=e("@metamask/superstruct"),s=e("@noble/hashes/sha3"),o=e("./assert.cjs"),a=e("./bytes.cjs");function i(e){return(0,r.is)(e,n.HexStruct)}function l(e){return(0,r.is)(e,n.StrictHexStruct)}function c(e){(0,o.assert)((0,r.is)(e,n.HexChecksumAddressStruct),"Invalid hex address.");const t=u(e.toLowerCase()),i=u((0,a.bytesToHex)((0,s.keccak_256)(t)));return`0x${t.split("").map(((e,t)=>{const n=i[t];return(0,o.assert)((0,r.is)(n,(0,r.string)()),"Hash shorter than address."),parseInt(n,16)>7?e.toUpperCase():e})).join("")}`}function d(e){return!!(0,r.is)(e,n.HexChecksumAddressStruct)&&c(e)===e}function u(e){return e.startsWith("0x")||e.startsWith("0X")?e.substring(2):e}n.HexStruct=(0,r.pattern)((0,r.string)(),/^(?:0x)?[0-9a-f]+$/iu),n.StrictHexStruct=(0,r.pattern)((0,r.string)(),/^0x[0-9a-f]+$/iu),n.HexAddressStruct=(0,r.pattern)((0,r.string)(),/^0x[0-9a-f]{40}$/u),n.HexChecksumAddressStruct=(0,r.pattern)((0,r.string)(),/^0x[0-9a-fA-F]{40}$/u),n.isHexString=i,n.isStrictHexString=l,n.assertIsHexString=function(e){(0,o.assert)(i(e),"Value must be a hexadecimal string.")},n.assertIsStrictHexString=function(e){(0,o.assert)(l(e),'Value must be a hexadecimal string, starting with "0x".')},n.isValidHexAddress=function(e){return(0,r.is)(e,n.HexAddressStruct)||d(e)},n.getChecksumAddress=c,n.isValidChecksumAddress=d,n.add0x=function(e){return e.startsWith("0x")?e:e.startsWith("0X")?`0x${e.substring(2)}`:`0x${e}`},n.remove0x=u}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/hex.cjs"}],[1461,{"./assert.cjs":1451,"./base64.cjs":1452,"./bytes.cjs":1453,"./caip-types.cjs":1454,"./checksum.cjs":1455,"./coercers.cjs":1456,"./collections.cjs":1457,"./encryption-types.cjs":1458,"./errors.cjs":1459,"./hex.cjs":1460,"./json.cjs":1462,"./keyring.cjs":1463,"./logging.cjs":1464,"./misc.cjs":1465,"./number.cjs":1466,"./opaque.cjs":1467,"./promise.cjs":1468,"./time.cjs":1469,"./transaction-types.cjs":1470,"./versions.cjs":1471},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./assert.cjs"),n),s(e("./base64.cjs"),n),s(e("./bytes.cjs"),n),s(e("./caip-types.cjs"),n),s(e("./checksum.cjs"),n),s(e("./coercers.cjs"),n),s(e("./collections.cjs"),n),s(e("./encryption-types.cjs"),n),s(e("./errors.cjs"),n),s(e("./hex.cjs"),n),s(e("./json.cjs"),n),s(e("./keyring.cjs"),n),s(e("./logging.cjs"),n),s(e("./misc.cjs"),n),s(e("./number.cjs"),n),s(e("./opaque.cjs"),n),s(e("./promise.cjs"),n),s(e("./time.cjs"),n),s(e("./transaction-types.cjs"),n),s(e("./versions.cjs"),n)}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/index.cjs"}],[1462,{"./assert.cjs":1451,"./misc.cjs":1465,"@metamask/superstruct":2670},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getJsonRpcIdValidator=n.assertIsJsonRpcError=n.isJsonRpcError=n.assertIsJsonRpcFailure=n.isJsonRpcFailure=n.assertIsJsonRpcSuccess=n.isJsonRpcSuccess=n.assertIsJsonRpcResponse=n.isJsonRpcResponse=n.assertIsPendingJsonRpcResponse=n.isPendingJsonRpcResponse=n.JsonRpcResponseStruct=n.JsonRpcFailureStruct=n.JsonRpcSuccessStruct=n.PendingJsonRpcResponseStruct=n.assertIsJsonRpcRequest=n.isJsonRpcRequest=n.assertIsJsonRpcNotification=n.isJsonRpcNotification=n.JsonRpcNotificationStruct=n.JsonRpcRequestStruct=n.JsonRpcParamsStruct=n.JsonRpcErrorStruct=n.JsonRpcIdStruct=n.JsonRpcVersionStruct=n.jsonrpc2=n.getJsonSize=n.getSafeJson=n.isValidJson=n.JsonStruct=n.UnsafeJsonStruct=n.exactOptional=n.object=void 0;const r=e("@metamask/superstruct"),s=e("./assert.cjs"),o=e("./misc.cjs");function a({path:e,branch:t}){const n=e[e.length-1];return(0,o.hasProperty)(t[t.length-2],n)}function i(e){return new r.Struct({...e,type:`optional ${e.type}`,validator:(t,n)=>!a(n)||e.validator(t,n),refiner:(t,n)=>!a(n)||e.refiner(t,n)})}n.object=e=>(0,r.object)(e),n.exactOptional=i;function l(e){return(0,r.create)(e,n.JsonStruct)}n.UnsafeJsonStruct=(0,r.union)([(0,r.literal)(null),(0,r.boolean)(),(0,r.define)("finite number",(e=>(0,r.is)(e,(0,r.number)())&&Number.isFinite(e))),(0,r.string)(),(0,r.array)((0,r.lazy)((()=>n.UnsafeJsonStruct))),(0,r.record)((0,r.string)(),(0,r.lazy)((()=>n.UnsafeJsonStruct)))]),n.JsonStruct=(0,r.coerce)(n.UnsafeJsonStruct,(0,r.any)(),(e=>((0,s.assertStruct)(e,n.UnsafeJsonStruct),JSON.parse(JSON.stringify(e,((e,t)=>"__proto__"===e||"constructor"===e?undefined:t)))))),n.isValidJson=function(e){try{return l(e),!0}catch{return!1}},n.getSafeJson=l,n.getJsonSize=function(e){(0,s.assertStruct)(e,n.JsonStruct,"Invalid JSON value");const t=JSON.stringify(e);return(new TextEncoder).encode(t).byteLength},n.jsonrpc2="2.0",n.JsonRpcVersionStruct=(0,r.literal)(n.jsonrpc2),n.JsonRpcIdStruct=(0,r.nullable)((0,r.union)([(0,r.number)(),(0,r.string)()])),n.JsonRpcErrorStruct=(0,n.object)({code:(0,r.integer)(),message:(0,r.string)(),data:i(n.JsonStruct),stack:i((0,r.string)())}),n.JsonRpcParamsStruct=(0,r.union)([(0,r.record)((0,r.string)(),n.JsonStruct),(0,r.array)(n.JsonStruct)]),n.JsonRpcRequestStruct=(0,n.object)({id:n.JsonRpcIdStruct,jsonrpc:n.JsonRpcVersionStruct,method:(0,r.string)(),params:i(n.JsonRpcParamsStruct)}),n.JsonRpcNotificationStruct=(0,n.object)({jsonrpc:n.JsonRpcVersionStruct,method:(0,r.string)(),params:i(n.JsonRpcParamsStruct)}),n.isJsonRpcNotification=function(e){return(0,r.is)(e,n.JsonRpcNotificationStruct)},n.assertIsJsonRpcNotification=function(e,t){(0,s.assertStruct)(e,n.JsonRpcNotificationStruct,"Invalid JSON-RPC notification",t)},n.isJsonRpcRequest=function(e){return(0,r.is)(e,n.JsonRpcRequestStruct)},n.assertIsJsonRpcRequest=function(e,t){(0,s.assertStruct)(e,n.JsonRpcRequestStruct,"Invalid JSON-RPC request",t)},n.PendingJsonRpcResponseStruct=(0,r.object)({id:n.JsonRpcIdStruct,jsonrpc:n.JsonRpcVersionStruct,result:(0,r.optional)((0,r.unknown)()),error:(0,r.optional)(n.JsonRpcErrorStruct)}),n.JsonRpcSuccessStruct=(0,n.object)({id:n.JsonRpcIdStruct,jsonrpc:n.JsonRpcVersionStruct,result:n.JsonStruct}),n.JsonRpcFailureStruct=(0,n.object)({id:n.JsonRpcIdStruct,jsonrpc:n.JsonRpcVersionStruct,error:n.JsonRpcErrorStruct}),n.JsonRpcResponseStruct=(0,r.union)([n.JsonRpcSuccessStruct,n.JsonRpcFailureStruct]),n.isPendingJsonRpcResponse=function(e){return(0,r.is)(e,n.PendingJsonRpcResponseStruct)},n.assertIsPendingJsonRpcResponse=function(e,t){(0,s.assertStruct)(e,n.PendingJsonRpcResponseStruct,"Invalid pending JSON-RPC response",t)},n.isJsonRpcResponse=function(e){return(0,r.is)(e,n.JsonRpcResponseStruct)},n.assertIsJsonRpcResponse=function(e,t){(0,s.assertStruct)(e,n.JsonRpcResponseStruct,"Invalid JSON-RPC response",t)},n.isJsonRpcSuccess=function(e){return(0,r.is)(e,n.JsonRpcSuccessStruct)},n.assertIsJsonRpcSuccess=function(e,t){(0,s.assertStruct)(e,n.JsonRpcSuccessStruct,"Invalid JSON-RPC success response",t)},n.isJsonRpcFailure=function(e){return(0,r.is)(e,n.JsonRpcFailureStruct)},n.assertIsJsonRpcFailure=function(e,t){(0,s.assertStruct)(e,n.JsonRpcFailureStruct,"Invalid JSON-RPC failure response",t)},n.isJsonRpcError=function(e){return(0,r.is)(e,n.JsonRpcErrorStruct)},n.assertIsJsonRpcError=function(e,t){(0,s.assertStruct)(e,n.JsonRpcErrorStruct,"Invalid JSON-RPC error",t)},n.getJsonRpcIdValidator=function(e){const{permitEmptyString:t,permitFractions:n,permitNull:r}={permitEmptyString:!0,permitFractions:!1,permitNull:!0,...e};return e=>Boolean("number"==typeof e&&(n||Number.isInteger(e))||"string"==typeof e&&(t||e.length>0)||r&&null===e)}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/json.cjs"}],[1463,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0})}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/keyring.cjs"}],[1464,{debug:3705},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.createModuleLogger=n.createProjectLogger=void 0;const s=(0,r(e("debug")).default)("metamask");n.createProjectLogger=function(e){return s.extend(e)},n.createModuleLogger=function(e,t){return e.extend(t)}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/logging.cjs"}],[1465,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.calculateNumberSize=n.calculateStringSize=n.isASCII=n.isPlainObject=n.ESCAPE_CHARACTERS_REGEXP=n.JsonSize=n.getKnownPropertyNames=n.hasProperty=n.isObject=n.isNullOrUndefined=n.isNonEmptyArray=void 0,n.isNonEmptyArray=function(e){return Array.isArray(e)&&e.length>0},n.isNullOrUndefined=function(e){return null===e||e===undefined},n.isObject=function(e){return Boolean(e)&&"object"==typeof e&&!Array.isArray(e)};function r(e){return e.charCodeAt(0)<=127}n.hasProperty=(e,t)=>Object.hasOwnProperty.call(e,t),n.getKnownPropertyNames=function(e){return Object.getOwnPropertyNames(e)},function(e){e[e.Null=4]="Null",e[e.Comma=1]="Comma",e[e.Wrapper=1]="Wrapper",e[e.True=4]="True",e[e.False=5]="False",e[e.Quote=1]="Quote",e[e.Colon=1]="Colon",e[e.Date=24]="Date"}(n.JsonSize||(n.JsonSize={})),n.ESCAPE_CHARACTERS_REGEXP=/"|\\|\n|\r|\t/gu,n.isPlainObject=function(e){if("object"!=typeof e||null===e)return!1;try{let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}catch(e){return!1}},n.isASCII=r,n.calculateStringSize=function(e){return e.split("").reduce(((e,t)=>r(t)?e+1:e+2),0)+(e.match(n.ESCAPE_CHARACTERS_REGEXP)??[]).length},n.calculateNumberSize=function(e){return e.toString().length}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/misc.cjs"}],[1466,{"./assert.cjs":1451,"./hex.cjs":1460},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.hexToBigInt=n.hexToNumber=n.bigIntToHex=n.numberToHex=void 0;const r=e("./assert.cjs"),s=e("./hex.cjs");n.numberToHex=e=>((0,r.assert)("number"==typeof e,"Value must be a number."),(0,r.assert)(e>=0,"Value must be a non-negative number."),(0,r.assert)(Number.isSafeInteger(e),"Value is not a safe integer. Use `bigIntToHex` instead."),(0,s.add0x)(e.toString(16)));n.bigIntToHex=e=>((0,r.assert)("bigint"==typeof e,"Value must be a bigint."),(0,r.assert)(e>=0,"Value must be a non-negative bigint."),(0,s.add0x)(e.toString(16)));n.hexToNumber=e=>{(0,s.assertIsHexString)(e);const t=parseInt(e,16);return(0,r.assert)(Number.isSafeInteger(t),"Value is not a safe integer. Use `hexToBigInt` instead."),t};n.hexToBigInt=e=>((0,s.assertIsHexString)(e),BigInt((0,s.add0x)(e)))}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/number.cjs"}],[1467,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0})}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/opaque.cjs"}],[1468,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createDeferredPromise=void 0,n.createDeferredPromise=function({suppressUnhandledRejection:e=!1}={}){let t,n;const r=new Promise(((e,r)=>{t=e,n=r}));return e&&r.catch((e=>{})),{promise:r,resolve:t,reject:n}}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/promise.cjs"}],[1469,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.timeSince=n.inMilliseconds=n.Duration=void 0,function(e){e[e.Millisecond=1]="Millisecond",e[e.Second=1e3]="Second",e[e.Minute=6e4]="Minute",e[e.Hour=36e5]="Hour",e[e.Day=864e5]="Day",e[e.Week=6048e5]="Week",e[e.Year=31536e6]="Year"}(n.Duration||(n.Duration={}));const r=(e,t)=>{if(!(e=>Number.isInteger(e)&&e>=0)(e))throw new Error(`"${t}" must be a non-negative integer. Received: "${e}".`)};n.inMilliseconds=function(e,t){return r(e,"count"),e*t},n.timeSince=function(e){return r(e,"timestamp"),Date.now()-e}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/time.cjs"}],[147,{lodash:4380},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:12,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[1470,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0})}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/transaction-types.cjs"}],[1471,{"./assert.cjs":1451,"@metamask/superstruct":2670,semver:5064},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.satisfiesVersionRange=n.gtRange=n.gtVersion=n.assertIsSemVerRange=n.assertIsSemVerVersion=n.isValidSemVerRange=n.isValidSemVerVersion=n.VersionRangeStruct=n.VersionStruct=void 0;const r=e("@metamask/superstruct"),s=e("semver"),o=e("./assert.cjs");n.VersionStruct=(0,r.refine)((0,r.string)(),"Version",(e=>null!==(0,s.valid)(e)||`Expected SemVer version, got "${e}"`)),n.VersionRangeStruct=(0,r.refine)((0,r.string)(),"Version range",(e=>null!==(0,s.validRange)(e)||`Expected SemVer range, got "${e}"`)),n.isValidSemVerVersion=function(e){return(0,r.is)(e,n.VersionStruct)},n.isValidSemVerRange=function(e){return(0,r.is)(e,n.VersionRangeStruct)},n.assertIsSemVerVersion=function(e){(0,o.assertStruct)(e,n.VersionStruct)},n.assertIsSemVerRange=function(e){(0,o.assertStruct)(e,n.VersionRangeStruct)},n.gtVersion=function(e,t){return(0,s.gt)(e,t)},n.gtRange=function(e,t){return(0,s.gtr)(e,t)},n.satisfiesVersionRange=function(e,t){return(0,s.satisfies)(e,t,{includePrerelease:!0})}}}},{package:"@metamask/ens-controller>@metamask/utils",file:"node_modules/@metamask/ens-controller/node_modules/@metamask/utils/dist/versions.cjs"}]],[],{});