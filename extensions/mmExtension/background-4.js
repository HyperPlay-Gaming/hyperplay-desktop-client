const console = require('console');
const { setInterval } = require('timers/promises');

LavaPack.loadBundle([
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_getSymbolsIn.js", { "./_arrayPush": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_arrayPush.js", "./_getPrototype": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_getPrototype.js", "./_getSymbols": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_getSymbols.js", "./stubArray": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\stubArray.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_getSymbolsIn.js
        return function (require, module, exports) {
          var arrayPush = require('./_arrayPush'),
            getPrototype = require('./_getPrototype'),
            getSymbols = require('./_getSymbols'),
            stubArray = require('./stubArray');

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeGetSymbols = Object.getOwnPropertySymbols;

          /**
           * Creates an array of the own and inherited enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
            var result = [];
            while (object) {
              arrayPush(result, getSymbols(object));
              object = getPrototype(object);
            }
            return result;
          };

          module.exports = getSymbolsIn;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_initCloneArray.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_initCloneArray.js
        return function (require, module, exports) {
          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Initializes an array clone.
           *
           * @private
           * @param {Array} array The array to clone.
           * @returns {Array} Returns the initialized clone.
           */
          function initCloneArray(array) {
            var length = array.length,
              result = new array.constructor(length);

            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
              result.index = array.index;
              result.input = array.input;
            }
            return result;
          }

          module.exports = initCloneArray;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_initCloneByTag.js", { "./_cloneArrayBuffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_cloneArrayBuffer.js", "./_cloneDataView": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_cloneDataView.js", "./_cloneRegExp": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_cloneRegExp.js", "./_cloneSymbol": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_cloneSymbol.js", "./_cloneTypedArray": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_cloneTypedArray.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_initCloneByTag.js
        return function (require, module, exports) {
          var cloneArrayBuffer = require('./_cloneArrayBuffer'),
            cloneDataView = require('./_cloneDataView'),
            cloneRegExp = require('./_cloneRegExp'),
            cloneSymbol = require('./_cloneSymbol'),
            cloneTypedArray = require('./_cloneTypedArray');

          /** `Object#toString` result references. */
          var boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]';

          var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

          /**
           * Initializes an object clone based on its `toStringTag`.
           *
           * **Note:** This function only supports cloning values with tags of
           * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {string} tag The `toStringTag` of the object to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case dataViewTag:
                return cloneDataView(object, isDeep);

              case float32Tag: case float64Tag:
              case int8Tag: case int16Tag: case int32Tag:
              case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                return cloneTypedArray(object, isDeep);

              case mapTag:
                return new Ctor;

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                return cloneRegExp(object);

              case setTag:
                return new Ctor;

              case symbolTag:
                return cloneSymbol(object);
            }
          }

          module.exports = initCloneByTag;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_initCloneObject.js", { "./_baseCreate": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseCreate.js", "./_getPrototype": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_getPrototype.js", "./_isPrototype": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_isPrototype.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_initCloneObject.js
        return function (require, module, exports) {
          var baseCreate = require('./_baseCreate'),
            getPrototype = require('./_getPrototype'),
            isPrototype = require('./_isPrototype');

          /**
           * Initializes an object clone.
           *
           * @private
           * @param {Object} object The object to clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneObject(object) {
            return (typeof object.constructor == 'function' && !isPrototype(object))
              ? baseCreate(getPrototype(object))
              : {};
          }

          module.exports = initCloneObject;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_nativeKeysIn.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_nativeKeysIn.js
        return function (require, module, exports) {
          /**
           * This function is like
           * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * except that it includes inherited enumerable properties.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
              for (var key in Object(object)) {
                result.push(key);
              }
            }
            return result;
          }

          module.exports = nativeKeysIn;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_trimmedEndIndex.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\_trimmedEndIndex.js
        return function (require, module, exports) {
          /** Used to match a single whitespace character. */
          var reWhitespace = /\s/;

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
           * character of `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the index of the last non-whitespace character.
           */
          function trimmedEndIndex(string) {
            var index = string.length;

            while (index-- && reWhitespace.test(string.charAt(index))) { }
            return index;
          }

          module.exports = trimmedEndIndex;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\cloneDeep.js", { "./_baseClone": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseClone.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\cloneDeep.js
        return function (require, module, exports) {
          var baseClone = require('./_baseClone');

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_SYMBOLS_FLAG = 4;

          /**
           * This method is like `_.clone` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @returns {*} Returns the deep cloned value.
           * @see _.clone
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var deep = _.cloneDeep(objects);
           * console.log(deep[0] === objects[0]);
           * // => false
           */
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }

          module.exports = cloneDeep;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\inRange.js", { "./_baseInRange": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseInRange.js", "./toFinite": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toFinite.js", "./toNumber": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toNumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\inRange.js
        return function (require, module, exports) {
          var baseInRange = require('./_baseInRange'),
            toFinite = require('./toFinite'),
            toNumber = require('./toNumber');

          /**
           * Checks if `n` is between `start` and up to, but not including, `end`. If
           * `end` is not specified, it's set to `start` with `start` then set to `0`.
           * If `start` is greater than `end` the params are swapped to support
           * negative ranges.
           *
           * @static
           * @memberOf _
           * @since 3.3.0
           * @category Number
           * @param {number} number The number to check.
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           * @see _.range, _.rangeRight
           * @example
           *
           * _.inRange(3, 2, 4);
           * // => true
           *
           * _.inRange(4, 8);
           * // => true
           *
           * _.inRange(4, 2);
           * // => false
           *
           * _.inRange(2, 2);
           * // => false
           *
           * _.inRange(1.2, 2);
           * // => true
           *
           * _.inRange(5.2, 4);
           * // => false
           *
           * _.inRange(-3, -2, -6);
           * // => true
           */
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }

          module.exports = inRange;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isEmpty.js", { "./_baseKeys": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseKeys.js", "./_getTag": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_getTag.js", "./_isPrototype": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_isPrototype.js", "./isArguments": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isArguments.js", "./isArray": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isArray.js", "./isArrayLike": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isArrayLike.js", "./isBuffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isBuffer.js", "./isTypedArray": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isTypedArray.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\isEmpty.js
        return function (require, module, exports) {
          var baseKeys = require('./_baseKeys'),
            getTag = require('./_getTag'),
            isArguments = require('./isArguments'),
            isArray = require('./isArray'),
            isArrayLike = require('./isArrayLike'),
            isBuffer = require('./isBuffer'),
            isPrototype = require('./_isPrototype'),
            isTypedArray = require('./isTypedArray');

          /** `Object#toString` result references. */
          var mapTag = '[object Map]',
            setTag = '[object Set]';

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Checks if `value` is an empty object, collection, map, or set.
           *
           * Objects are considered empty if they have no own enumerable string keyed
           * properties.
           *
           * Array-like values such as `arguments` objects, arrays, buffers, strings, or
           * jQuery-like collections are considered empty if they have a `length` of `0`.
           * Similarly, maps and sets are considered empty if they have a `size` of `0`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is empty, else `false`.
           * @example
           *
           * _.isEmpty(null);
           * // => true
           *
           * _.isEmpty(true);
           * // => true
           *
           * _.isEmpty(1);
           * // => true
           *
           * _.isEmpty([1, 2, 3]);
           * // => false
           *
           * _.isEmpty({ 'a': 1 });
           * // => false
           */
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }

          module.exports = isEmpty;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isInteger.js", { "./toInteger": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toInteger.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\isInteger.js
        return function (require, module, exports) {
          var toInteger = require('./toInteger');

          /**
           * Checks if `value` is an integer.
           *
           * **Note:** This method is based on
           * [`Number.isInteger`](https://mdn.io/Number/isInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
           * @example
           *
           * _.isInteger(3);
           * // => true
           *
           * _.isInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isInteger(Infinity);
           * // => false
           *
           * _.isInteger('3');
           * // => false
           */
          function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
          }

          module.exports = isInteger;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isMap.js", { "./_baseIsMap": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseIsMap.js", "./_baseUnary": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseUnary.js", "./_nodeUtil": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_nodeUtil.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\isMap.js
        return function (require, module, exports) {
          var baseIsMap = require('./_baseIsMap'),
            baseUnary = require('./_baseUnary'),
            nodeUtil = require('./_nodeUtil');

          /* Node.js helper references. */
          var nodeIsMap = nodeUtil && nodeUtil.isMap;

          /**
           * Checks if `value` is classified as a `Map` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           * @example
           *
           * _.isMap(new Map);
           * // => true
           *
           * _.isMap(new WeakMap);
           * // => false
           */
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

          module.exports = isMap;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isSet.js", { "./_baseIsSet": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseIsSet.js", "./_baseUnary": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseUnary.js", "./_nodeUtil": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_nodeUtil.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\isSet.js
        return function (require, module, exports) {
          var baseIsSet = require('./_baseIsSet'),
            baseUnary = require('./_baseUnary'),
            nodeUtil = require('./_nodeUtil');

          /* Node.js helper references. */
          var nodeIsSet = nodeUtil && nodeUtil.isSet;

          /**
           * Checks if `value` is classified as a `Set` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           * @example
           *
           * _.isSet(new Set);
           * // => true
           *
           * _.isSet(new WeakSet);
           * // => false
           */
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

          module.exports = isSet;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\keysIn.js", { "./_arrayLikeKeys": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_arrayLikeKeys.js", "./_baseKeysIn": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseKeysIn.js", "./isArrayLike": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isArrayLike.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\keysIn.js
        return function (require, module, exports) {
          var arrayLikeKeys = require('./_arrayLikeKeys'),
            baseKeysIn = require('./_baseKeysIn'),
            isArrayLike = require('./isArrayLike');

          /**
           * Creates an array of the own and inherited enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keysIn(new Foo);
           * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
           */
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }

          module.exports = keysIn;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toFinite.js", { "./toNumber": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toNumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\toFinite.js
        return function (require, module, exports) {
          var toNumber = require('./toNumber');

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_INTEGER = 1.7976931348623157e+308;

          /**
           * Converts `value` to a finite number.
           *
           * @static
           * @memberOf _
           * @since 4.12.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted number.
           * @example
           *
           * _.toFinite(3.2);
           * // => 3.2
           *
           * _.toFinite(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toFinite(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toFinite('3.2');
           * // => 3.2
           */
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = (value < 0 ? -1 : 1);
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }

          module.exports = toFinite;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toInteger.js", { "./toFinite": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toFinite.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\toInteger.js
        return function (require, module, exports) {
          var toFinite = require('./toFinite');

          /**
           * Converts `value` to an integer.
           *
           * **Note:** This method is loosely based on
           * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toInteger(3.2);
           * // => 3
           *
           * _.toInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toInteger(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toInteger('3.2');
           * // => 3
           */
          function toInteger(value) {
            var result = toFinite(value),
              remainder = result % 1;

            return result === result ? (remainder ? result - remainder : result) : 0;
          }

          module.exports = toInteger;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\toNumber.js", { "./_baseTrim": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\_baseTrim.js", "./isObject": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isObject.js", "./isSymbol": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isSymbol.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\lodash\toNumber.js
        return function (require, module, exports) {
          var baseTrim = require('./_baseTrim'),
            isObject = require('./isObject'),
            isSymbol = require('./isSymbol');

          /** Used as references for various `Number` constants. */
          var NAN = 0 / 0;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Built-in method references without a dependency on `root`. */
          var freeParseInt = parseInt;

          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */
          function toNumber(value) {
            if (typeof value == 'number') {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
              value = isObject(other) ? (other + '') : other;
            }
            if (typeof value != 'string') {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return (isBinary || reIsOctal.test(value))
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : (reIsBadHex.test(value) ? NAN : +value);
          }

          module.exports = toNumber;

        };
      };
    }
  }, { package: "lodash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\base.js", { "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multibase\src\base.js
        return function (require, module, exports) {
          'use strict'

          const { encodeText } = require('./util')

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */
          /** @typedef {__import__("./types").BaseName} BaseName */
          /** @typedef {__import__("./types").BaseCode} BaseCode */

          /**
           * Class to encode/decode in the supported Bases
           *
           */
          class Base {
            /**
             * @param {BaseName} name
             * @param {BaseCode} code
             * @param {CodecFactory} factory
             * @param {string} alphabet
             */
            constructor(name, code, factory, alphabet) {
              this.name = name
              this.code = code
              this.codeBuf = encodeText(this.code)
              this.alphabet = alphabet
              this.codec = factory(alphabet)
            }

            /**
             * @param {Uint8Array} buf
             * @returns {string}
             */
            encode(buf) {
              return this.codec.encode(buf)
            }

            /**
             * @param {string} string
             * @returns {Uint8Array}
             */
            decode(string) {
              for (const char of string) {
                if (this.alphabet && this.alphabet.indexOf(char) < 0) {
                  throw new Error(`invalid character '${char}' in '${string}'`)
                }
              }
              return this.codec.decode(string)
            }
          }

          module.exports = Base

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\constants.js", { "./base.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\base.js", "./rfc4648": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\rfc4648.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\util.js", "@multiformats/base-x": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@multiformats\\base-x\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multibase\src\constants.js
        return function (require, module, exports) {
          'use strict'

          const baseX = require('@multiformats/base-x')
          const Base = require('./base.js')
          const { rfc4648 } = require('./rfc4648')
          const { decodeText, encodeText } = require('./util')

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */
          /** @typedef {__import__('./types').Codec} Codec */
          /** @typedef {__import__('./types').BaseName} BaseName */
          /** @typedef {__import__('./types').BaseCode} BaseCode */

          /** @type {CodecFactory} */
          const identity = () => {
            return {
              encode: decodeText,
              decode: encodeText
            }
          }

          /**
           *
           * name, code, implementation, alphabet
           *
           * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}
           */
          const constants = [
            ['identity', '\x00', identity, ''],
            ['base2', '0', rfc4648(1), '01'],
            ['base8', '7', rfc4648(3), '01234567'],
            ['base10', '9', baseX, '0123456789'],
            ['base16', 'f', rfc4648(4), '0123456789abcdef'],
            ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],
            ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],
            ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
            ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],
            ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
            ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],
            ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
            ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],
            ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
            ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
            ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],
            ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
            ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
            ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
            ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
            ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
            ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
            ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
          ]

          /** @type {Record<BaseName,Base>} */
          const names = constants.reduce((prev, tupple) => {
            prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])
            return prev
          }, /** @type {Record<BaseName,Base>} */({}))

          /** @type {Record<BaseCode,Base>} */
          const codes = constants.reduce((prev, tupple) => {
            prev[tupple[1]] = names[tupple[0]]
            return prev
          }, /** @type {Record<BaseCode,Base>} */({}))

          module.exports = {
            names,
            codes
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\index.js", { "./constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\constants.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multibase\src\index.js
        return function (require, module, exports) {
          /**
           * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
           *
           */
          'use strict'

          const constants = require('./constants')
          const { encodeText, decodeText, concat } = require('./util')

          /** @typedef {__import__('./base')} Base */
          /** @typedef {__import__("./types").BaseNameOrCode} BaseNameOrCode */
          /** @typedef {__import__("./types").BaseCode} BaseCode */
          /** @typedef {__import__("./types").BaseName} BaseName */

          /**
           * Create a new Uint8Array with the multibase varint+code.
           *
           * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
           * @param {Uint8Array} buf - The data to be prefixed with multibase.
           * @returns {Uint8Array}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function multibase(nameOrCode, buf) {
            if (!buf) {
              throw new Error('requires an encoded Uint8Array')
            }
            const { name, codeBuf } = encoding(nameOrCode)
            validEncode(name, buf)

            return concat([codeBuf, buf], codeBuf.length + buf.length)
          }

          /**
           * Encode data with the specified base and add the multibase prefix.
           *
           * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
           * @param {Uint8Array} buf - The data to be encoded.
           * @returns {Uint8Array}
           * @throws {Error} Will throw if the encoding is not supported
           *
           */
          function encode(nameOrCode, buf) {
            const enc = encoding(nameOrCode)
            const data = encodeText(enc.encode(buf))

            return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)
          }

          /**
           * Takes a Uint8Array or string encoded with multibase header, decodes it and
           * returns the decoded buffer
           *
           * @param {Uint8Array|string} data
           * @returns {Uint8Array}
           * @throws {Error} Will throw if the encoding is not supported
           *
           */
          function decode(data) {
            if (data instanceof Uint8Array) {
              data = decodeText(data)
            }
            const prefix = data[0]

            // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet
            if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {
              data = data.toLowerCase()
            }
            const enc = encoding(/** @type {BaseCode} */(data[0]))
            return enc.decode(data.substring(1))
          }

          /**
           * Is the given data multibase encoded?
           *
           * @param {Uint8Array|string} data
           */
          function isEncoded(data) {
            if (data instanceof Uint8Array) {
              data = decodeText(data)
            }

            // Ensure bufOrString is a string
            if (Object.prototype.toString.call(data) !== '[object String]') {
              return false
            }

            try {
              const enc = encoding(/** @type {BaseCode} */(data[0]))
              return enc.name
            } catch (err) {
              return false
            }
          }

          /**
           * Validate encoded data
           *
           * @param {BaseNameOrCode} name
           * @param {Uint8Array} buf
           * @returns {void}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function validEncode(name, buf) {
            const enc = encoding(name)
            enc.decode(decodeText(buf))
          }

          /**
           * Get the encoding by name or code
           *
           * @param {BaseNameOrCode} nameOrCode
           * @returns {Base}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function encoding(nameOrCode) {
            if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {
              return constants.names[/** @type {BaseName} */(nameOrCode)]
            } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {
              return constants.codes[/** @type {BaseCode} */(nameOrCode)]
            } else {
              throw new Error(`Unsupported encoding: ${nameOrCode}`)
            }
          }

          /**
           * Get encoding from data
           *
           * @param {string|Uint8Array} data
           * @returns {Base}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function encodingFromData(data) {
            if (data instanceof Uint8Array) {
              data = decodeText(data)
            }

            return encoding(/** @type {BaseCode} */(data[0]))
          }

          exports = module.exports = multibase
          exports.encode = encode
          exports.decode = decode
          exports.isEncoded = isEncoded
          exports.encoding = encoding
          exports.encodingFromData = encodingFromData
          const names = Object.freeze(constants.names)
          const codes = Object.freeze(constants.codes)
          exports.names = names
          exports.codes = codes

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\rfc4648.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multibase\src\rfc4648.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */

          /**
           * @param {string} string
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {Uint8Array}
           */
          const decode = (string, alphabet, bitsPerChar) => {
            // Build the character lookup table:
            /** @type {Record<string, number>} */
            const codes = {}
            for (let i = 0; i < alphabet.length; ++i) {
              codes[alphabet[i]] = i
            }

            // Count the padding bytes:
            let end = string.length
            while (string[end - 1] === '=') {
              --end
            }

            // Allocate the output:
            const out = new Uint8Array((end * bitsPerChar / 8) | 0)

            // Parse the data:
            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            let written = 0 // Next byte to write
            for (let i = 0; i < end; ++i) {
              // Read one character from the string:
              const value = codes[string[i]]
              if (value === undefined) {
                throw new SyntaxError('Invalid character ' + string[i])
              }

              // Append the bits to the buffer:
              buffer = (buffer << bitsPerChar) | value
              bits += bitsPerChar

              // Write out some bits if the buffer has a byte's worth:
              if (bits >= 8) {
                bits -= 8
                out[written++] = 0xff & (buffer >> bits)
              }
            }

            // Verify that we have received just enough bits:
            if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
              throw new SyntaxError('Unexpected end of data')
            }

            return out
          }

          /**
           * @param {Uint8Array} data
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {string}
           */
          const encode = (data, alphabet, bitsPerChar) => {
            const pad = alphabet[alphabet.length - 1] === '='
            const mask = (1 << bitsPerChar) - 1
            let out = ''

            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            for (let i = 0; i < data.length; ++i) {
              // Slurp data into the buffer:
              buffer = (buffer << 8) | data[i]
              bits += 8

              // Write out as much as we can:
              while (bits > bitsPerChar) {
                bits -= bitsPerChar
                out += alphabet[mask & (buffer >> bits)]
              }
            }

            // Partial character:
            if (bits) {
              out += alphabet[mask & (buffer << (bitsPerChar - bits))]
            }

            // Add padding characters until we hit a byte boundary:
            if (pad) {
              while ((out.length * bitsPerChar) & 7) {
                out += '='
              }
            }

            return out
          }

          /**
           * RFC4648 Factory
           *
           * @param {number} bitsPerChar
           * @returns {CodecFactory}
           */
          const rfc4648 = (bitsPerChar) => (alphabet) => {
            return {
              /**
               * @param {Uint8Array} input
               * @returns {string}
               */
              encode(input) {
                return encode(input, alphabet, bitsPerChar)
              },
              /**
               * @param {string} input
               * @returns {Uint8Array}
               */
              decode(input) {
                return decode(input, alphabet, bitsPerChar)
              }
            }
          }

          module.exports = { rfc4648 }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\util.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multibase\src\util.js
        return function (require, module, exports) {
          'use strict'

          const textDecoder = new TextDecoder()
          /**
           * @param {ArrayBufferView|ArrayBuffer} bytes
           * @returns {string}
           */
          const decodeText = (bytes) => textDecoder.decode(bytes)

          const textEncoder = new TextEncoder()
          /**
           * @param {string} text
           * @returns {Uint8Array}
           */
          const encodeText = (text) => textEncoder.encode(text)

          /**
           * Returns a new Uint8Array created by concatenating the passed Arrays
           *
           * @param {Array<ArrayLike<number>>} arrs
           * @param {number} length
           * @returns {Uint8Array}
           */
          function concat(arrs, length) {
            const output = new Uint8Array(length)
            let offset = 0

            for (const arr of arrs) {
              output.set(arr, offset)
              offset += arr.length
            }

            return output
          }

          module.exports = { decodeText, encodeText, concat }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\base.js", { "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\multibase\src\base.js
        return function (require, module, exports) {
          'use strict'

          const { encodeText } = require('./util')

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */
          /** @typedef {__import__("./types").BaseName} BaseName */
          /** @typedef {__import__("./types").BaseCode} BaseCode */

          /**
           * Class to encode/decode in the supported Bases
           *
           */
          class Base {
            /**
             * @param {BaseName} name
             * @param {BaseCode} code
             * @param {CodecFactory} factory
             * @param {string} alphabet
             */
            constructor(name, code, factory, alphabet) {
              this.name = name
              this.code = code
              this.codeBuf = encodeText(this.code)
              this.alphabet = alphabet
              this.codec = factory(alphabet)
            }

            /**
             * @param {Uint8Array} buf
             * @returns {string}
             */
            encode(buf) {
              return this.codec.encode(buf)
            }

            /**
             * @param {string} string
             * @returns {Uint8Array}
             */
            decode(string) {
              for (const char of string) {
                if (this.alphabet && this.alphabet.indexOf(char) < 0) {
                  throw new Error(`invalid character '${char}' in '${string}'`)
                }
              }
              return this.codec.decode(string)
            }
          }

          module.exports = Base

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\constants.js", { "./base.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\base.js", "./rfc4648": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\rfc4648.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\util.js", "@multiformats/base-x": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@multiformats\\base-x\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\multibase\src\constants.js
        return function (require, module, exports) {
          'use strict'

          const baseX = require('@multiformats/base-x')
          const Base = require('./base.js')
          const { rfc4648 } = require('./rfc4648')
          const { decodeText, encodeText } = require('./util')

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */
          /** @typedef {__import__('./types').Codec} Codec */
          /** @typedef {__import__('./types').BaseName} BaseName */
          /** @typedef {__import__('./types').BaseCode} BaseCode */

          /** @type {CodecFactory} */
          const identity = () => {
            return {
              encode: decodeText,
              decode: encodeText
            }
          }

          /**
           *
           * name, code, implementation, alphabet
           *
           * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}
           */
          const constants = [
            ['identity', '\x00', identity, ''],
            ['base2', '0', rfc4648(1), '01'],
            ['base8', '7', rfc4648(3), '01234567'],
            ['base10', '9', baseX, '0123456789'],
            ['base16', 'f', rfc4648(4), '0123456789abcdef'],
            ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],
            ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],
            ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
            ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],
            ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
            ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],
            ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
            ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],
            ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
            ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
            ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],
            ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
            ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
            ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
            ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
            ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
            ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
            ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
          ]

          /** @type {Record<BaseName,Base>} */
          const names = constants.reduce((prev, tupple) => {
            prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])
            return prev
          }, /** @type {Record<BaseName,Base>} */({}))

          /** @type {Record<BaseCode,Base>} */
          const codes = constants.reduce((prev, tupple) => {
            prev[tupple[1]] = names[tupple[0]]
            return prev
          }, /** @type {Record<BaseCode,Base>} */({}))

          module.exports = {
            names,
            codes
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\rfc4648.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\multibase\src\rfc4648.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./types').CodecFactory} CodecFactory */

          /**
           * @param {string} string
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {Uint8Array}
           */
          const decode = (string, alphabet, bitsPerChar) => {
            // Build the character lookup table:
            /** @type {Record<string, number>} */
            const codes = {}
            for (let i = 0; i < alphabet.length; ++i) {
              codes[alphabet[i]] = i
            }

            // Count the padding bytes:
            let end = string.length
            while (string[end - 1] === '=') {
              --end
            }

            // Allocate the output:
            const out = new Uint8Array((end * bitsPerChar / 8) | 0)

            // Parse the data:
            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            let written = 0 // Next byte to write
            for (let i = 0; i < end; ++i) {
              // Read one character from the string:
              const value = codes[string[i]]
              if (value === undefined) {
                throw new SyntaxError('Invalid character ' + string[i])
              }

              // Append the bits to the buffer:
              buffer = (buffer << bitsPerChar) | value
              bits += bitsPerChar

              // Write out some bits if the buffer has a byte's worth:
              if (bits >= 8) {
                bits -= 8
                out[written++] = 0xff & (buffer >> bits)
              }
            }

            // Verify that we have received just enough bits:
            if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
              throw new SyntaxError('Unexpected end of data')
            }

            return out
          }

          /**
           * @param {Uint8Array} data
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {string}
           */
          const encode = (data, alphabet, bitsPerChar) => {
            const pad = alphabet[alphabet.length - 1] === '='
            const mask = (1 << bitsPerChar) - 1
            let out = ''

            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            for (let i = 0; i < data.length; ++i) {
              // Slurp data into the buffer:
              buffer = (buffer << 8) | data[i]
              bits += 8

              // Write out as much as we can:
              while (bits > bitsPerChar) {
                bits -= bitsPerChar
                out += alphabet[mask & (buffer >> bits)]
              }
            }

            // Partial character:
            if (bits) {
              out += alphabet[mask & (buffer << (bitsPerChar - bits))]
            }

            // Add padding characters until we hit a byte boundary:
            if (pad) {
              while ((out.length * bitsPerChar) & 7) {
                out += '='
              }
            }

            return out
          }

          /**
           * RFC4648 Factory
           *
           * @param {number} bitsPerChar
           * @returns {CodecFactory}
           */
          const rfc4648 = (bitsPerChar) => (alphabet) => {
            return {
              /**
               * @param {Uint8Array} input
               * @returns {string}
               */
              encode(input) {
                return encode(input, alphabet, bitsPerChar)
              },
              /**
               * @param {string} input
               * @returns {Uint8Array}
               */
              decode(input) {
                return decode(input, alphabet, bitsPerChar)
              }
            }
          }

          module.exports = { rfc4648 }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\util.js", { "web-encoding": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\multibase\src\util.js
        return function (require, module, exports) {
          'use strict'

          // @ts-ignore
          const { TextEncoder, TextDecoder } = require('web-encoding')

          const textDecoder = new TextDecoder()
          /**
           * @param {ArrayBufferView|ArrayBuffer} bytes
           * @returns {string}
           */
          const decodeText = (bytes) => textDecoder.decode(bytes)

          const textEncoder = new TextEncoder()
          /**
           * @param {string} text
           * @returns {Uint8Array}
           */
          const encodeText = (text) => textEncoder.encode(text)

          /**
           * Returns a new Uint8Array created by concatenating the passed Arrays
           *
           * @param {Array<ArrayLike<number>>} arrs
           * @param {number} length
           * @returns {Uint8Array}
           */
          function concat(arrs, length) {
            const output = new Uint8Array(length)
            let offset = 0

            for (const arr of arrs) {
              output.set(arr, offset)
              offset += arr.length
            }

            return output
          }

          module.exports = { decodeText, encodeText, concat }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\concat.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\uint8arrays\concat.js
        return function (require, module, exports) {
          'use strict'

          /**
           * Returns a new Uint8Array created by concatenating the passed ArrayLikes
           *
           * @param {Array<ArrayLike<number>>} arrays
           * @param {Number} length
           * @returns {Uint8Array}
           */
          function concat(arrays, length) {
            if (!length) {
              length = arrays.reduce((acc, curr) => acc + curr.length, 0)
            }

            const output = new Uint8Array(length)
            let offset = 0

            for (const arr of arrays) {
              output.set(arr, offset)
              offset += arr.length
            }

            return output
          }

          module.exports = concat

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\from-string.js", { "multibase/src/constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\constants.js", "web-encoding": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\uint8arrays\from-string.js
        return function (require, module, exports) {
          'use strict'

          const { names } = require('multibase/src/constants')
          const { TextEncoder } = require('web-encoding')
          const utf8Encoder = new TextEncoder()

          /**
           * Interperets each character in a string as a byte and
           * returns a Uint8Array of those bytes.
           *
           * @param {String} string The string to turn into an array
           * @returns {Uint8Array}
           */
          function asciiStringToUint8Array(string) {
            const array = new Uint8Array(string.length)

            for (let i = 0; i < string.length; i++) {
              array[i] = string.charCodeAt(i)
            }

            return array
          }

          /**
           * Create a `Uint8Array` from the passed string
           *
           * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
           *
           * Also `ascii` which is similar to node's 'binary' encoding.
           *
           * @param {String} string
           * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc
           * @returns {Uint8Array}
           * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`
           */
          function fromString(string, encoding = 'utf8') {
            if (encoding === 'utf8' || encoding === 'utf-8') {
              return utf8Encoder.encode(string)
            }

            if (encoding === 'ascii') {
              return asciiStringToUint8Array(string)
            }

            const codec = names[encoding]

            if (!codec) {
              throw new Error('Unknown base')
            }

            return codec.decode(string)
          }

          module.exports = fromString

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\to-string.js", { "multibase/src/constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\multibase\\src\\constants.js", "web-encoding": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\uint8arrays\to-string.js
        return function (require, module, exports) {
          'use strict'

          const { names } = require('multibase/src/constants')
          const { TextDecoder } = require('web-encoding')
          const utf8Decoder = new TextDecoder('utf8')

          /**
           * Turns a Uint8Array of bytes into a string with each
           * character being the char code of the corresponding byte
           *
           * @param {Uint8Array} array The array to turn into a string
           * @returns {String}
           */
          function uint8ArrayToAsciiString(array) {
            let string = ''

            for (let i = 0; i < array.length; i++) {
              string += String.fromCharCode(array[i])
            }
            return string
          }

          /**
           * Turns a `Uint8Array` into a string.
           *
           * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
           *
           * Also `ascii` which is similar to node's 'binary' encoding.
           *
           * @param {Uint8Array} array The array to turn into a string
           * @param {String} [encoding=utf8] The encoding to use
           * @returns {String}
           * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`
           */
          function toString(array, encoding = 'utf8') {
            if (encoding === 'utf8' || encoding === 'utf-8') {
              return utf8Decoder.decode(array)
            }

            if (encoding === 'ascii') {
              return uint8ArrayToAsciiString(array)
            }

            const codec = names[encoding]

            if (!codec) {
              throw new Error('Unknown base')
            }

            return codec.encode(array)
          }

          module.exports = toString

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\decode.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\varint\decode.js
        return function (require, module, exports) {
          module.exports = read

          var MSB = 0x80
            , REST = 0x7F

          function read(buf, offset) {
            var res = 0
              , offset = offset || 0
              , shift = 0
              , counter = offset
              , b
              , l = buf.length

            do {
              if (counter >= l || shift > 49) {
                read.bytes = 0
                throw new RangeError('Could not decode varint')
              }
              b = buf[counter++]
              res += shift < 28
                ? (b & REST) << shift
                : (b & REST) * Math.pow(2, shift)
              shift += 7
            } while (b >= MSB)

            read.bytes = counter - offset

            return res
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\encode.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\varint\encode.js
        return function (require, module, exports) {
          module.exports = encode

          var MSB = 0x80
            , REST = 0x7F
            , MSBALL = ~REST
            , INT = Math.pow(2, 31)

          function encode(num, out, offset) {
            if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
              encode.bytes = 0
              throw new RangeError('Could not encode varint')
            }
            out = out || []
            offset = offset || 0
            var oldOffset = offset

            while (num >= INT) {
              out[offset++] = (num & 0xFF) | MSB
              num /= 128
            }
            while (num & MSBALL) {
              out[offset++] = (num & 0xFF) | MSB
              num >>>= 7
            }
            out[offset] = num | 0

            encode.bytes = offset - oldOffset + 1

            return out
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js", { "./decode.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\decode.js", "./encode.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\encode.js", "./length.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\length.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\varint\index.js
        return function (require, module, exports) {
          module.exports = {
            encode: require('./encode.js')
            , decode: require('./decode.js')
            , encodingLength: require('./length.js')
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\length.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\node_modules\varint\length.js
        return function (require, module, exports) {

          var N1 = Math.pow(2, 7)
          var N2 = Math.pow(2, 14)
          var N3 = Math.pow(2, 21)
          var N4 = Math.pow(2, 28)
          var N5 = Math.pow(2, 35)
          var N6 = Math.pow(2, 42)
          var N7 = Math.pow(2, 49)
          var N8 = Math.pow(2, 56)
          var N9 = Math.pow(2, 63)

          module.exports = function (value) {
            return (
              value < N1 ? 1
                : value < N2 ? 2
                  : value < N3 ? 3
                    : value < N4 ? 4
                      : value < N5 ? 5
                        : value < N6 ? 6
                          : value < N7 ? 7
                            : value < N8 ? 8
                              : value < N9 ? 9
                                : 10
            )
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\base-table.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\base-table.js
        return function (require, module, exports) {
          // DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js
          /* eslint quote-props: off */
          'use strict'

          /**
           * @type {__import__('./generated-types').NameNumberMap}
           */
          const baseTable = Object.freeze({
            'identity': 0x00,
            'cidv1': 0x01,
            'cidv2': 0x02,
            'cidv3': 0x03,
            'ip4': 0x04,
            'tcp': 0x06,
            'sha1': 0x11,
            'sha2-256': 0x12,
            'sha2-512': 0x13,
            'sha3-512': 0x14,
            'sha3-384': 0x15,
            'sha3-256': 0x16,
            'sha3-224': 0x17,
            'shake-128': 0x18,
            'shake-256': 0x19,
            'keccak-224': 0x1a,
            'keccak-256': 0x1b,
            'keccak-384': 0x1c,
            'keccak-512': 0x1d,
            'blake3': 0x1e,
            'dccp': 0x21,
            'murmur3-128': 0x22,
            'murmur3-32': 0x23,
            'ip6': 0x29,
            'ip6zone': 0x2a,
            'path': 0x2f,
            'multicodec': 0x30,
            'multihash': 0x31,
            'multiaddr': 0x32,
            'multibase': 0x33,
            'dns': 0x35,
            'dns4': 0x36,
            'dns6': 0x37,
            'dnsaddr': 0x38,
            'protobuf': 0x50,
            'cbor': 0x51,
            'raw': 0x55,
            'dbl-sha2-256': 0x56,
            'rlp': 0x60,
            'bencode': 0x63,
            'dag-pb': 0x70,
            'dag-cbor': 0x71,
            'libp2p-key': 0x72,
            'git-raw': 0x78,
            'torrent-info': 0x7b,
            'torrent-file': 0x7c,
            'leofcoin-block': 0x81,
            'leofcoin-tx': 0x82,
            'leofcoin-pr': 0x83,
            'sctp': 0x84,
            'dag-jose': 0x85,
            'dag-cose': 0x86,
            'eth-block': 0x90,
            'eth-block-list': 0x91,
            'eth-tx-trie': 0x92,
            'eth-tx': 0x93,
            'eth-tx-receipt-trie': 0x94,
            'eth-tx-receipt': 0x95,
            'eth-state-trie': 0x96,
            'eth-account-snapshot': 0x97,
            'eth-storage-trie': 0x98,
            'bitcoin-block': 0xb0,
            'bitcoin-tx': 0xb1,
            'bitcoin-witness-commitment': 0xb2,
            'zcash-block': 0xc0,
            'zcash-tx': 0xc1,
            'docid': 0xce,
            'stellar-block': 0xd0,
            'stellar-tx': 0xd1,
            'md4': 0xd4,
            'md5': 0xd5,
            'bmt': 0xd6,
            'decred-block': 0xe0,
            'decred-tx': 0xe1,
            'ipld-ns': 0xe2,
            'ipfs-ns': 0xe3,
            'swarm-ns': 0xe4,
            'ipns-ns': 0xe5,
            'zeronet': 0xe6,
            'secp256k1-pub': 0xe7,
            'bls12_381-g1-pub': 0xea,
            'bls12_381-g2-pub': 0xeb,
            'x25519-pub': 0xec,
            'ed25519-pub': 0xed,
            'bls12_381-g1g2-pub': 0xee,
            'dash-block': 0xf0,
            'dash-tx': 0xf1,
            'swarm-manifest': 0xfa,
            'swarm-feed': 0xfb,
            'udp': 0x0111,
            'p2p-webrtc-star': 0x0113,
            'p2p-webrtc-direct': 0x0114,
            'p2p-stardust': 0x0115,
            'p2p-circuit': 0x0122,
            'dag-json': 0x0129,
            'udt': 0x012d,
            'utp': 0x012e,
            'unix': 0x0190,
            'p2p': 0x01a5,
            'ipfs': 0x01a5,
            'https': 0x01bb,
            'onion': 0x01bc,
            'onion3': 0x01bd,
            'garlic64': 0x01be,
            'garlic32': 0x01bf,
            'tls': 0x01c0,
            'quic': 0x01cc,
            'ws': 0x01dd,
            'wss': 0x01de,
            'p2p-websocket-star': 0x01df,
            'http': 0x01e0,
            'json': 0x0200,
            'messagepack': 0x0201,
            'libp2p-peer-record': 0x0301,
            'sha2-256-trunc254-padded': 0x1012,
            'ripemd-128': 0x1052,
            'ripemd-160': 0x1053,
            'ripemd-256': 0x1054,
            'ripemd-320': 0x1055,
            'x11': 0x1100,
            'p256-pub': 0x1200,
            'p384-pub': 0x1201,
            'p521-pub': 0x1202,
            'ed448-pub': 0x1203,
            'x448-pub': 0x1204,
            'ed25519-priv': 0x1300,
            'kangarootwelve': 0x1d01,
            'sm3-256': 0x534d,
            'blake2b-8': 0xb201,
            'blake2b-16': 0xb202,
            'blake2b-24': 0xb203,
            'blake2b-32': 0xb204,
            'blake2b-40': 0xb205,
            'blake2b-48': 0xb206,
            'blake2b-56': 0xb207,
            'blake2b-64': 0xb208,
            'blake2b-72': 0xb209,
            'blake2b-80': 0xb20a,
            'blake2b-88': 0xb20b,
            'blake2b-96': 0xb20c,
            'blake2b-104': 0xb20d,
            'blake2b-112': 0xb20e,
            'blake2b-120': 0xb20f,
            'blake2b-128': 0xb210,
            'blake2b-136': 0xb211,
            'blake2b-144': 0xb212,
            'blake2b-152': 0xb213,
            'blake2b-160': 0xb214,
            'blake2b-168': 0xb215,
            'blake2b-176': 0xb216,
            'blake2b-184': 0xb217,
            'blake2b-192': 0xb218,
            'blake2b-200': 0xb219,
            'blake2b-208': 0xb21a,
            'blake2b-216': 0xb21b,
            'blake2b-224': 0xb21c,
            'blake2b-232': 0xb21d,
            'blake2b-240': 0xb21e,
            'blake2b-248': 0xb21f,
            'blake2b-256': 0xb220,
            'blake2b-264': 0xb221,
            'blake2b-272': 0xb222,
            'blake2b-280': 0xb223,
            'blake2b-288': 0xb224,
            'blake2b-296': 0xb225,
            'blake2b-304': 0xb226,
            'blake2b-312': 0xb227,
            'blake2b-320': 0xb228,
            'blake2b-328': 0xb229,
            'blake2b-336': 0xb22a,
            'blake2b-344': 0xb22b,
            'blake2b-352': 0xb22c,
            'blake2b-360': 0xb22d,
            'blake2b-368': 0xb22e,
            'blake2b-376': 0xb22f,
            'blake2b-384': 0xb230,
            'blake2b-392': 0xb231,
            'blake2b-400': 0xb232,
            'blake2b-408': 0xb233,
            'blake2b-416': 0xb234,
            'blake2b-424': 0xb235,
            'blake2b-432': 0xb236,
            'blake2b-440': 0xb237,
            'blake2b-448': 0xb238,
            'blake2b-456': 0xb239,
            'blake2b-464': 0xb23a,
            'blake2b-472': 0xb23b,
            'blake2b-480': 0xb23c,
            'blake2b-488': 0xb23d,
            'blake2b-496': 0xb23e,
            'blake2b-504': 0xb23f,
            'blake2b-512': 0xb240,
            'blake2s-8': 0xb241,
            'blake2s-16': 0xb242,
            'blake2s-24': 0xb243,
            'blake2s-32': 0xb244,
            'blake2s-40': 0xb245,
            'blake2s-48': 0xb246,
            'blake2s-56': 0xb247,
            'blake2s-64': 0xb248,
            'blake2s-72': 0xb249,
            'blake2s-80': 0xb24a,
            'blake2s-88': 0xb24b,
            'blake2s-96': 0xb24c,
            'blake2s-104': 0xb24d,
            'blake2s-112': 0xb24e,
            'blake2s-120': 0xb24f,
            'blake2s-128': 0xb250,
            'blake2s-136': 0xb251,
            'blake2s-144': 0xb252,
            'blake2s-152': 0xb253,
            'blake2s-160': 0xb254,
            'blake2s-168': 0xb255,
            'blake2s-176': 0xb256,
            'blake2s-184': 0xb257,
            'blake2s-192': 0xb258,
            'blake2s-200': 0xb259,
            'blake2s-208': 0xb25a,
            'blake2s-216': 0xb25b,
            'blake2s-224': 0xb25c,
            'blake2s-232': 0xb25d,
            'blake2s-240': 0xb25e,
            'blake2s-248': 0xb25f,
            'blake2s-256': 0xb260,
            'skein256-8': 0xb301,
            'skein256-16': 0xb302,
            'skein256-24': 0xb303,
            'skein256-32': 0xb304,
            'skein256-40': 0xb305,
            'skein256-48': 0xb306,
            'skein256-56': 0xb307,
            'skein256-64': 0xb308,
            'skein256-72': 0xb309,
            'skein256-80': 0xb30a,
            'skein256-88': 0xb30b,
            'skein256-96': 0xb30c,
            'skein256-104': 0xb30d,
            'skein256-112': 0xb30e,
            'skein256-120': 0xb30f,
            'skein256-128': 0xb310,
            'skein256-136': 0xb311,
            'skein256-144': 0xb312,
            'skein256-152': 0xb313,
            'skein256-160': 0xb314,
            'skein256-168': 0xb315,
            'skein256-176': 0xb316,
            'skein256-184': 0xb317,
            'skein256-192': 0xb318,
            'skein256-200': 0xb319,
            'skein256-208': 0xb31a,
            'skein256-216': 0xb31b,
            'skein256-224': 0xb31c,
            'skein256-232': 0xb31d,
            'skein256-240': 0xb31e,
            'skein256-248': 0xb31f,
            'skein256-256': 0xb320,
            'skein512-8': 0xb321,
            'skein512-16': 0xb322,
            'skein512-24': 0xb323,
            'skein512-32': 0xb324,
            'skein512-40': 0xb325,
            'skein512-48': 0xb326,
            'skein512-56': 0xb327,
            'skein512-64': 0xb328,
            'skein512-72': 0xb329,
            'skein512-80': 0xb32a,
            'skein512-88': 0xb32b,
            'skein512-96': 0xb32c,
            'skein512-104': 0xb32d,
            'skein512-112': 0xb32e,
            'skein512-120': 0xb32f,
            'skein512-128': 0xb330,
            'skein512-136': 0xb331,
            'skein512-144': 0xb332,
            'skein512-152': 0xb333,
            'skein512-160': 0xb334,
            'skein512-168': 0xb335,
            'skein512-176': 0xb336,
            'skein512-184': 0xb337,
            'skein512-192': 0xb338,
            'skein512-200': 0xb339,
            'skein512-208': 0xb33a,
            'skein512-216': 0xb33b,
            'skein512-224': 0xb33c,
            'skein512-232': 0xb33d,
            'skein512-240': 0xb33e,
            'skein512-248': 0xb33f,
            'skein512-256': 0xb340,
            'skein512-264': 0xb341,
            'skein512-272': 0xb342,
            'skein512-280': 0xb343,
            'skein512-288': 0xb344,
            'skein512-296': 0xb345,
            'skein512-304': 0xb346,
            'skein512-312': 0xb347,
            'skein512-320': 0xb348,
            'skein512-328': 0xb349,
            'skein512-336': 0xb34a,
            'skein512-344': 0xb34b,
            'skein512-352': 0xb34c,
            'skein512-360': 0xb34d,
            'skein512-368': 0xb34e,
            'skein512-376': 0xb34f,
            'skein512-384': 0xb350,
            'skein512-392': 0xb351,
            'skein512-400': 0xb352,
            'skein512-408': 0xb353,
            'skein512-416': 0xb354,
            'skein512-424': 0xb355,
            'skein512-432': 0xb356,
            'skein512-440': 0xb357,
            'skein512-448': 0xb358,
            'skein512-456': 0xb359,
            'skein512-464': 0xb35a,
            'skein512-472': 0xb35b,
            'skein512-480': 0xb35c,
            'skein512-488': 0xb35d,
            'skein512-496': 0xb35e,
            'skein512-504': 0xb35f,
            'skein512-512': 0xb360,
            'skein1024-8': 0xb361,
            'skein1024-16': 0xb362,
            'skein1024-24': 0xb363,
            'skein1024-32': 0xb364,
            'skein1024-40': 0xb365,
            'skein1024-48': 0xb366,
            'skein1024-56': 0xb367,
            'skein1024-64': 0xb368,
            'skein1024-72': 0xb369,
            'skein1024-80': 0xb36a,
            'skein1024-88': 0xb36b,
            'skein1024-96': 0xb36c,
            'skein1024-104': 0xb36d,
            'skein1024-112': 0xb36e,
            'skein1024-120': 0xb36f,
            'skein1024-128': 0xb370,
            'skein1024-136': 0xb371,
            'skein1024-144': 0xb372,
            'skein1024-152': 0xb373,
            'skein1024-160': 0xb374,
            'skein1024-168': 0xb375,
            'skein1024-176': 0xb376,
            'skein1024-184': 0xb377,
            'skein1024-192': 0xb378,
            'skein1024-200': 0xb379,
            'skein1024-208': 0xb37a,
            'skein1024-216': 0xb37b,
            'skein1024-224': 0xb37c,
            'skein1024-232': 0xb37d,
            'skein1024-240': 0xb37e,
            'skein1024-248': 0xb37f,
            'skein1024-256': 0xb380,
            'skein1024-264': 0xb381,
            'skein1024-272': 0xb382,
            'skein1024-280': 0xb383,
            'skein1024-288': 0xb384,
            'skein1024-296': 0xb385,
            'skein1024-304': 0xb386,
            'skein1024-312': 0xb387,
            'skein1024-320': 0xb388,
            'skein1024-328': 0xb389,
            'skein1024-336': 0xb38a,
            'skein1024-344': 0xb38b,
            'skein1024-352': 0xb38c,
            'skein1024-360': 0xb38d,
            'skein1024-368': 0xb38e,
            'skein1024-376': 0xb38f,
            'skein1024-384': 0xb390,
            'skein1024-392': 0xb391,
            'skein1024-400': 0xb392,
            'skein1024-408': 0xb393,
            'skein1024-416': 0xb394,
            'skein1024-424': 0xb395,
            'skein1024-432': 0xb396,
            'skein1024-440': 0xb397,
            'skein1024-448': 0xb398,
            'skein1024-456': 0xb399,
            'skein1024-464': 0xb39a,
            'skein1024-472': 0xb39b,
            'skein1024-480': 0xb39c,
            'skein1024-488': 0xb39d,
            'skein1024-496': 0xb39e,
            'skein1024-504': 0xb39f,
            'skein1024-512': 0xb3a0,
            'skein1024-520': 0xb3a1,
            'skein1024-528': 0xb3a2,
            'skein1024-536': 0xb3a3,
            'skein1024-544': 0xb3a4,
            'skein1024-552': 0xb3a5,
            'skein1024-560': 0xb3a6,
            'skein1024-568': 0xb3a7,
            'skein1024-576': 0xb3a8,
            'skein1024-584': 0xb3a9,
            'skein1024-592': 0xb3aa,
            'skein1024-600': 0xb3ab,
            'skein1024-608': 0xb3ac,
            'skein1024-616': 0xb3ad,
            'skein1024-624': 0xb3ae,
            'skein1024-632': 0xb3af,
            'skein1024-640': 0xb3b0,
            'skein1024-648': 0xb3b1,
            'skein1024-656': 0xb3b2,
            'skein1024-664': 0xb3b3,
            'skein1024-672': 0xb3b4,
            'skein1024-680': 0xb3b5,
            'skein1024-688': 0xb3b6,
            'skein1024-696': 0xb3b7,
            'skein1024-704': 0xb3b8,
            'skein1024-712': 0xb3b9,
            'skein1024-720': 0xb3ba,
            'skein1024-728': 0xb3bb,
            'skein1024-736': 0xb3bc,
            'skein1024-744': 0xb3bd,
            'skein1024-752': 0xb3be,
            'skein1024-760': 0xb3bf,
            'skein1024-768': 0xb3c0,
            'skein1024-776': 0xb3c1,
            'skein1024-784': 0xb3c2,
            'skein1024-792': 0xb3c3,
            'skein1024-800': 0xb3c4,
            'skein1024-808': 0xb3c5,
            'skein1024-816': 0xb3c6,
            'skein1024-824': 0xb3c7,
            'skein1024-832': 0xb3c8,
            'skein1024-840': 0xb3c9,
            'skein1024-848': 0xb3ca,
            'skein1024-856': 0xb3cb,
            'skein1024-864': 0xb3cc,
            'skein1024-872': 0xb3cd,
            'skein1024-880': 0xb3ce,
            'skein1024-888': 0xb3cf,
            'skein1024-896': 0xb3d0,
            'skein1024-904': 0xb3d1,
            'skein1024-912': 0xb3d2,
            'skein1024-920': 0xb3d3,
            'skein1024-928': 0xb3d4,
            'skein1024-936': 0xb3d5,
            'skein1024-944': 0xb3d6,
            'skein1024-952': 0xb3d7,
            'skein1024-960': 0xb3d8,
            'skein1024-968': 0xb3d9,
            'skein1024-976': 0xb3da,
            'skein1024-984': 0xb3db,
            'skein1024-992': 0xb3dc,
            'skein1024-1000': 0xb3dd,
            'skein1024-1008': 0xb3de,
            'skein1024-1016': 0xb3df,
            'skein1024-1024': 0xb3e0,
            'poseidon-bls12_381-a2-fc1': 0xb401,
            'poseidon-bls12_381-a2-fc1-sc': 0xb402,
            'zeroxcert-imprint-256': 0xce11,
            'fil-commitment-unsealed': 0xf101,
            'fil-commitment-sealed': 0xf102,
            'holochain-adr-v0': 0x807124,
            'holochain-adr-v1': 0x817124,
            'holochain-key-v0': 0x947124,
            'holochain-key-v1': 0x957124,
            'holochain-sig-v0': 0xa27124,
            'holochain-sig-v1': 0xa37124,
            'skynet-ns': 0xb19910
          })

          module.exports = { baseTable }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\constants.js", { "./base-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\base-table.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\constants.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./generated-types').ConstantNumberMap} ConstantNumberMap */

          const { baseTable } = require('./base-table')

          const constants = /** @type {ConstantNumberMap} */({})

          for (const [name, code] of Object.entries(baseTable)) {
            const constant = name.toUpperCase().replace(/-/g, '_')
            constants[constant] = code
          }

          module.exports = Object.freeze(constants)

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\index.js", { "./constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\constants.js", "./int-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\int-table.js", "./print": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\print.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\util.js", "./varint-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\varint-table.js", "uint8arrays/concat": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\concat.js", "varint": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\index.js
        return function (require, module, exports) {
          /**
           * Implementation of the multicodec specification.
           *
           * @module multicodec
           * @example
           * const multicodec = require('multicodec')
           *
           * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
           * // prefixedProtobuf 0x50...
           *
           */
          'use strict'

          /** @typedef {__import__('./generated-types').CodecName} CodecName */
          /** @typedef {__import__('./generated-types').CodecNumber} CodecNumber */

          const varint = require('varint')
          const intTable = require('./int-table')
          const codecNameToCodeVarint = require('./varint-table')
          const util = require('./util')
          const uint8ArrayConcat = require('uint8arrays/concat')

          /**
           * Prefix a buffer with a multicodec-packed.
           *
           * @param {CodecName|Uint8Array} multicodecStrOrCode
           * @param {Uint8Array} data
           * @returns {Uint8Array}
           */
          function addPrefix(multicodecStrOrCode, data) {
            let prefix

            if (multicodecStrOrCode instanceof Uint8Array) {
              prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)
            } else {
              if (codecNameToCodeVarint[multicodecStrOrCode]) {
                prefix = codecNameToCodeVarint[multicodecStrOrCode]
              } else {
                throw new Error('multicodec not recognized')
              }
            }
            return uint8ArrayConcat([prefix, data], prefix.length + data.length)
          }

          /**
           * Decapsulate the multicodec-packed prefix from the data.
           *
           * @param {Uint8Array} data
           * @returns {Uint8Array}
           */
          function rmPrefix(data) {
            varint.decode(data)
            return data.slice(varint.decode.bytes)
          }

          /**
           * Get the codec of the prefixed data.
           *
           * @param {Uint8Array} prefixedData
           * @returns {CodecName}
           */
          function getCodec(prefixedData) {
            const code = varint.decode(prefixedData)
            const codecName = intTable.get(code)
            if (codecName === undefined) {
              throw new Error(`Code ${code} not found`)
            }
            return codecName
          }

          /**
           * Get the name of the codec.
           *
           * @param {CodecNumber} codec
           * @returns {CodecName|undefined}
           */
          function getName(codec) {
            return intTable.get(codec)
          }

          /**
           * Get the code of the codec
           *
           * @param {CodecName} name
           * @returns {CodecNumber}
           */
          function getNumber(name) {
            const code = codecNameToCodeVarint[name]
            if (code === undefined) {
              throw new Error('Codec `' + name + '` not found')
            }
            return varint.decode(code)
          }

          /**
           * Get the code of the prefixed data.
           *
           * @param {Uint8Array} prefixedData
           * @returns {CodecNumber}
           */
          function getCode(prefixedData) {
            return varint.decode(prefixedData)
          }

          /**
           * Get the code as varint of a codec name.
           *
           * @param {CodecName} codecName
           * @returns {Uint8Array}
           */
          function getCodeVarint(codecName) {
            const code = codecNameToCodeVarint[codecName]
            if (code === undefined) {
              throw new Error('Codec `' + codecName + '` not found')
            }
            return code
          }

          /**
           * Get the varint of a code.
           *
           * @param {CodecNumber} code
           * @returns {Array.<number>}
           */
          function getVarint(code) {
            return varint.encode(code)
          }

          // Make the constants top-level constants
          const constants = require('./constants')

          // Human friendly names for printing, e.g. in error messages
          const print = require('./print')

          module.exports = {
            addPrefix,
            rmPrefix,
            getCodec,
            getName,
            getNumber,
            getCode,
            getCodeVarint,
            getVarint,
            print,
            ...constants
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\int-table.js", { "./base-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\base-table.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\int-table.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./generated-types').CodecName} CodecName */
          /** @typedef {__import__('./generated-types').CodecNumber} CodecNumber */

          const { baseTable } = require('./base-table')

          /**
           * @type {Map<CodecNumber,CodecName>}
           */
          const nameTable = new Map()

          for (const encodingName in baseTable) {
            const code = baseTable[encodingName]
            nameTable.set(code, /** @type {CodecName} */(encodingName))
          }

          module.exports = Object.freeze(nameTable)

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\print.js", { "./base-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\base-table.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\print.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./generated-types').CodecName} CodecName */
          /** @typedef {__import__('./generated-types').NumberNameMap} NumberNameMap */

          const { baseTable } = require('./base-table')

          const tableByCode = /** @type {NumberNameMap} */({})

          for (const [name, code] of Object.entries(baseTable)) {
            if (tableByCode[code] === undefined) {
              tableByCode[code] = /** @type {CodecName} **/(name)
            }
          }

          module.exports = /** @type {NumberNameMap} */(Object.freeze(tableByCode))

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\util.js", { "uint8arrays/from-string": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\from-string.js", "uint8arrays/to-string": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\uint8arrays\\to-string.js", "varint": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\node_modules\\varint\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\util.js
        return function (require, module, exports) {
          'use strict'

          const varint = require('varint')
          const uint8ArrayToString = require('uint8arrays/to-string')
          const uint8ArrayFromString = require('uint8arrays/from-string')

          module.exports = {
            numberToUint8Array,
            uint8ArrayToNumber,
            varintUint8ArrayEncode,
            varintEncode
          }

          function uint8ArrayToNumber(buf) {
            return parseInt(uint8ArrayToString(buf, 'base16'), 16)
          }

          function numberToUint8Array(num) {
            let hexString = num.toString(16)
            if (hexString.length % 2 === 1) {
              hexString = '0' + hexString
            }
            return uint8ArrayFromString(hexString, 'base16')
          }

          function varintUint8ArrayEncode(input) {
            return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))
          }

          function varintEncode(num) {
            return Uint8Array.from(varint.encode(num))
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\varint-table.js", { "./base-table": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\base-table.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multicodec\\src\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multicodec\src\varint-table.js
        return function (require, module, exports) {
          'use strict'

          /** @typedef {__import__('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */

          const { baseTable } = require('./base-table')
          const varintEncode = require('./util').varintEncode

          const varintTable = /** @type {NameUint8ArrayMap} */ ({})

          for (const encodingName in baseTable) {
            const code = baseTable[encodingName]
            varintTable[encodingName] = varintEncode(code)
          }

          module.exports = Object.freeze(varintTable)

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multicodec", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\base.js", { "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\node_modules\multibase\src\base.js
        return function (require, module, exports) {
          // @ts-check
          'use strict'
          const { Buffer } = require('buffer')

          /**
           * @typedef {Object} Codec
           * @property {function(Uint8Array):string} encode
           * @property {function(string):Uint8Array} decode
           *
           * @typedef {function(string):Codec} CodecFactory
           */

          class Base {
            /**
             * @param {string} name
             * @param {string} code
             * @param {CodecFactory} implementation
             * @param {string} alphabet
             */
            constructor(name, code, implementation, alphabet) {
              this.name = name
              this.code = code
              this.codeBuf = Buffer.from(this.code)
              this.alphabet = alphabet
              this.engine = implementation(alphabet)
            }

            /**
             * @param {Uint8Array} buf
             * @returns {string}
             */
            encode(buf) {
              return this.engine.encode(buf)
            }

            /**
             * @param {string} string
             * @returns {Uint8Array}
             */
            decode(string) {
              for (const char of string) {
                if (this.alphabet && this.alphabet.indexOf(char) < 0) {
                  throw new Error(`invalid character '${char}' in '${string}'`)
                }
              }
              return this.engine.decode(string)
            }
          }

          module.exports = Base

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\constants.js", { "./base.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\base.js", "./rfc4648": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\rfc4648.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\util.js", "base-x": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\base-x\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\node_modules\multibase\src\constants.js
        return function (require, module, exports) {
          // @ts-check
          'use strict'

          const baseX = require('base-x')
          const Base = require('./base.js')
          const rfc4648 = require('./rfc4648')
          const { decodeText, encodeText } = require('./util')

          const identity = () => {
            return {
              encode: decodeText,
              decode: encodeText
            }
          }

          /**
           * @typedef {__import__('./base').CodecFactory} CodecFactory
           *
           * name, code, implementation, alphabet
           * @type {Array<[string, string, CodecFactory, string]>}
           */
          const constants = [
            ['identity', '\x00', identity, ''],
            ['base2', '0', rfc4648(1), '01'],
            ['base8', '7', rfc4648(3), '01234567'],
            ['base10', '9', baseX, '0123456789'],
            ['base16', 'f', rfc4648(4), '0123456789abcdef'],
            ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],
            ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],
            ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
            ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],
            ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
            ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],
            ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
            ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],
            ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
            ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
            ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],
            ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
            ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
            ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
            ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
            ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
            ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
            ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
          ]

          const names = constants.reduce((prev, tupple) => {
            prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])
            return prev
          }, {})

          const codes = constants.reduce((prev, tupple) => {
            prev[tupple[1]] = names[tupple[0]]
            return prev
          }, {})

          module.exports = {
            names,
            codes
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\index.js", { "./constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\constants.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\util.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\node_modules\multibase\src\index.js
        return function (require, module, exports) {
          // @ts-check
          /**
           * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
           *
           * @module Multibase
           */
          'use strict'

          const { Buffer } = require('buffer')
          const constants = require('./constants')
          const { decodeText, asBuffer } = require('./util')

          /** @typedef {__import__("./base")} Base */

          /**
           * Create a new buffer with the multibase varint+code.
           *
           * @param {string|number} nameOrCode - The multibase name or code number.
           * @param {Uint8Array} buf - The data to be prefixed with multibase.
           * @returns {Buffer}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function multibase(nameOrCode, buf) {
            if (!buf) {
              throw new Error('requires an encoded buffer')
            }
            const { name, codeBuf } = encoding(nameOrCode)
            validEncode(name, buf)

            const buffer = Buffer.alloc(codeBuf.length + buf.length)
            buffer.set(codeBuf, 0)
            buffer.set(buf, codeBuf.length)

            return buffer
          }

          /**
           * Encode data with the specified base and add the multibase prefix.
           *
           * @param {string|number} nameOrCode - The multibase name or code number.
           * @param {Uint8Array} buf - The data to be encoded.
           * @returns {Buffer}
           * @throws {Error} Will throw if the encoding is not supported
           *
           */
          function encode(nameOrCode, buf) {
            const enc = encoding(nameOrCode)

            return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])
          }

          /**
           * Takes a Uint8Array or string encoded with multibase header, decodes it and
           * returns the decoded buffer
           *
           * @param {Uint8Array|string} data
           * @returns {Buffer}
           * @throws {Error} Will throw if the encoding is not supported
           *
           */
          function decode(data) {
            if (ArrayBuffer.isView(data)) {
              data = decodeText(data)
            }
            const prefix = data[0]

            // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet
            if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {
              data = data.toLowerCase()
            }
            const enc = encoding(data[0])
            return asBuffer(enc.decode(data.substring(1)))
          }

          /**
           * Is the given data multibase encoded?
           *
           * @param {Uint8Array|string} data
           * @returns {false|string}
           */
          function isEncoded(data) {
            if (data instanceof Uint8Array) {
              data = decodeText(data)
            }

            // Ensure bufOrString is a string
            if (Object.prototype.toString.call(data) !== '[object String]') {
              return false
            }

            try {
              const enc = encoding(data[0])
              return enc.name
            } catch (err) {
              return false
            }
          }

          /**
           * Validate encoded data
           *
           * @param {string} name
           * @param {Uint8Array} buf
           * @returns {void}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function validEncode(name, buf) {
            const enc = encoding(name)
            enc.decode(decodeText(buf))
          }

          /**
           * Get the encoding by name or code
           *
           * @param {string|number} nameOrCode
           * @returns {Base}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function encoding(nameOrCode) {
            if (constants.names[nameOrCode]) {
              return constants.names[nameOrCode]
            } else if (constants.codes[nameOrCode]) {
              return constants.codes[nameOrCode]
            } else {
              throw new Error(`Unsupported encoding: ${nameOrCode}`)
            }
          }

          /**
           * Get encoding from data
           *
           * @param {string|Uint8Array} data
           * @returns {Base}
           * @throws {Error} Will throw if the encoding is not supported
           */
          function encodingFromData(data) {
            if (data instanceof Uint8Array) {
              data = decodeText(data)
            }

            return encoding(data[0])
          }

          exports = module.exports = multibase
          exports.encode = encode
          exports.decode = decode
          exports.isEncoded = isEncoded
          exports.encoding = encoding
          exports.encodingFromData = encodingFromData
          exports.names = Object.freeze(constants.names)
          exports.codes = Object.freeze(constants.codes)

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\rfc4648.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\node_modules\multibase\src\rfc4648.js
        return function (require, module, exports) {
          // @ts-check
          'use strict'

          /** @typedef {__import__('./base').CodecFactory} CodecFactory */

          /**
           * @param {string} string
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {Uint8Array}
           */
          const decode = (string, alphabet, bitsPerChar) => {
            // Build the character lookup table:
            const codes = {}
            for (let i = 0; i < alphabet.length; ++i) {
              codes[alphabet[i]] = i
            }

            // Count the padding bytes:
            let end = string.length
            while (string[end - 1] === '=') {
              --end
            }

            // Allocate the output:
            const out = new Uint8Array((end * bitsPerChar / 8) | 0)

            // Parse the data:
            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            let written = 0 // Next byte to write
            for (let i = 0; i < end; ++i) {
              // Read one character from the string:
              const value = codes[string[i]]
              if (value === undefined) {
                throw new SyntaxError('Invalid character ' + string[i])
              }

              // Append the bits to the buffer:
              buffer = (buffer << bitsPerChar) | value
              bits += bitsPerChar

              // Write out some bits if the buffer has a byte's worth:
              if (bits >= 8) {
                bits -= 8
                out[written++] = 0xff & (buffer >> bits)
              }
            }

            // Verify that we have received just enough bits:
            if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
              throw new SyntaxError('Unexpected end of data')
            }

            return out
          }

          /**
           * @param {Uint8Array} data
           * @param {string} alphabet
           * @param {number} bitsPerChar
           * @returns {string}
           */
          const encode = (data, alphabet, bitsPerChar) => {
            const pad = alphabet[alphabet.length - 1] === '='
            const mask = (1 << bitsPerChar) - 1
            let out = ''

            let bits = 0 // Number of bits currently in the buffer
            let buffer = 0 // Bits waiting to be written out, MSB first
            for (let i = 0; i < data.length; ++i) {
              // Slurp data into the buffer:
              buffer = (buffer << 8) | data[i]
              bits += 8

              // Write out as much as we can:
              while (bits > bitsPerChar) {
                bits -= bitsPerChar
                out += alphabet[mask & (buffer >> bits)]
              }
            }

            // Partial character:
            if (bits) {
              out += alphabet[mask & (buffer << (bitsPerChar - bits))]
            }

            // Add padding characters until we hit a byte boundary:
            if (pad) {
              while ((out.length * bitsPerChar) & 7) {
                out += '='
              }
            }

            return out
          }

          /**
           * @param {number} bitsPerChar
           * @returns {CodecFactory}
           */
          module.exports = (bitsPerChar) => (alphabet) => {
            return {
              /**
               * @param {Uint8Array} input
               * @returns {string}
               */
              encode(input) {
                return encode(input, alphabet, bitsPerChar)
              },
              /**
               * @param {string} input
               * @returns {Uint8Array}
               */
              decode(input) {
                return decode(input, alphabet, bitsPerChar)
              }
            }
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\util.js", { "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "web-encoding": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\node_modules\multibase\src\util.js
        return function (require, module, exports) {
          // @ts-check
          'use strict'

          const { Buffer } = require('buffer')
          const { TextEncoder, TextDecoder } = require('web-encoding')

          const textDecoder = new TextDecoder()
          /**
           * @param {ArrayBufferView|ArrayBuffer} bytes
           * @returns {string}
           */
          const decodeText = (bytes) => textDecoder.decode(bytes)

          const textEncoder = new TextEncoder()
          /**
           * @param {string} text
           * @returns {Uint8Array}
           */
          const encodeText = (text) => textEncoder.encode(text)

          /**
           * @param {ArrayBufferView} bytes
           * @returns {Buffer}
           */
          const asBuffer = ({ buffer, byteLength, byteOffset }) =>
            Buffer.from(buffer, byteOffset, byteLength)

          module.exports = { decodeText, encodeText, asBuffer }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>multibase", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\src\\constants.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\src\constants.js
        return function (require, module, exports) {
          /* eslint quote-props: off */
          'use strict'

          const names = Object.freeze({
            'identity': 0x00,
            'sha1': 0x11,
            'sha2-256': 0x12,
            'sha2-512': 0x13,
            'sha3-512': 0x14,
            'sha3-384': 0x15,
            'sha3-256': 0x16,
            'sha3-224': 0x17,
            'shake-128': 0x18,
            'shake-256': 0x19,
            'keccak-224': 0x1a,
            'keccak-256': 0x1b,
            'keccak-384': 0x1c,
            'keccak-512': 0x1d,
            'blake3': 0x1e,
            'murmur3-128': 0x22,
            'murmur3-32': 0x23,
            'dbl-sha2-256': 0x56,
            'md4': 0xd4,
            'md5': 0xd5,
            'bmt': 0xd6,
            'sha2-256-trunc254-padded': 0x1012,
            'ripemd-128': 0x1052,
            'ripemd-160': 0x1053,
            'ripemd-256': 0x1054,
            'ripemd-320': 0x1055,
            'x11': 0x1100,
            'sm3-256': 0x534d,
            'blake2b-8': 0xb201,
            'blake2b-16': 0xb202,
            'blake2b-24': 0xb203,
            'blake2b-32': 0xb204,
            'blake2b-40': 0xb205,
            'blake2b-48': 0xb206,
            'blake2b-56': 0xb207,
            'blake2b-64': 0xb208,
            'blake2b-72': 0xb209,
            'blake2b-80': 0xb20a,
            'blake2b-88': 0xb20b,
            'blake2b-96': 0xb20c,
            'blake2b-104': 0xb20d,
            'blake2b-112': 0xb20e,
            'blake2b-120': 0xb20f,
            'blake2b-128': 0xb210,
            'blake2b-136': 0xb211,
            'blake2b-144': 0xb212,
            'blake2b-152': 0xb213,
            'blake2b-160': 0xb214,
            'blake2b-168': 0xb215,
            'blake2b-176': 0xb216,
            'blake2b-184': 0xb217,
            'blake2b-192': 0xb218,
            'blake2b-200': 0xb219,
            'blake2b-208': 0xb21a,
            'blake2b-216': 0xb21b,
            'blake2b-224': 0xb21c,
            'blake2b-232': 0xb21d,
            'blake2b-240': 0xb21e,
            'blake2b-248': 0xb21f,
            'blake2b-256': 0xb220,
            'blake2b-264': 0xb221,
            'blake2b-272': 0xb222,
            'blake2b-280': 0xb223,
            'blake2b-288': 0xb224,
            'blake2b-296': 0xb225,
            'blake2b-304': 0xb226,
            'blake2b-312': 0xb227,
            'blake2b-320': 0xb228,
            'blake2b-328': 0xb229,
            'blake2b-336': 0xb22a,
            'blake2b-344': 0xb22b,
            'blake2b-352': 0xb22c,
            'blake2b-360': 0xb22d,
            'blake2b-368': 0xb22e,
            'blake2b-376': 0xb22f,
            'blake2b-384': 0xb230,
            'blake2b-392': 0xb231,
            'blake2b-400': 0xb232,
            'blake2b-408': 0xb233,
            'blake2b-416': 0xb234,
            'blake2b-424': 0xb235,
            'blake2b-432': 0xb236,
            'blake2b-440': 0xb237,
            'blake2b-448': 0xb238,
            'blake2b-456': 0xb239,
            'blake2b-464': 0xb23a,
            'blake2b-472': 0xb23b,
            'blake2b-480': 0xb23c,
            'blake2b-488': 0xb23d,
            'blake2b-496': 0xb23e,
            'blake2b-504': 0xb23f,
            'blake2b-512': 0xb240,
            'blake2s-8': 0xb241,
            'blake2s-16': 0xb242,
            'blake2s-24': 0xb243,
            'blake2s-32': 0xb244,
            'blake2s-40': 0xb245,
            'blake2s-48': 0xb246,
            'blake2s-56': 0xb247,
            'blake2s-64': 0xb248,
            'blake2s-72': 0xb249,
            'blake2s-80': 0xb24a,
            'blake2s-88': 0xb24b,
            'blake2s-96': 0xb24c,
            'blake2s-104': 0xb24d,
            'blake2s-112': 0xb24e,
            'blake2s-120': 0xb24f,
            'blake2s-128': 0xb250,
            'blake2s-136': 0xb251,
            'blake2s-144': 0xb252,
            'blake2s-152': 0xb253,
            'blake2s-160': 0xb254,
            'blake2s-168': 0xb255,
            'blake2s-176': 0xb256,
            'blake2s-184': 0xb257,
            'blake2s-192': 0xb258,
            'blake2s-200': 0xb259,
            'blake2s-208': 0xb25a,
            'blake2s-216': 0xb25b,
            'blake2s-224': 0xb25c,
            'blake2s-232': 0xb25d,
            'blake2s-240': 0xb25e,
            'blake2s-248': 0xb25f,
            'blake2s-256': 0xb260,
            'skein256-8': 0xb301,
            'skein256-16': 0xb302,
            'skein256-24': 0xb303,
            'skein256-32': 0xb304,
            'skein256-40': 0xb305,
            'skein256-48': 0xb306,
            'skein256-56': 0xb307,
            'skein256-64': 0xb308,
            'skein256-72': 0xb309,
            'skein256-80': 0xb30a,
            'skein256-88': 0xb30b,
            'skein256-96': 0xb30c,
            'skein256-104': 0xb30d,
            'skein256-112': 0xb30e,
            'skein256-120': 0xb30f,
            'skein256-128': 0xb310,
            'skein256-136': 0xb311,
            'skein256-144': 0xb312,
            'skein256-152': 0xb313,
            'skein256-160': 0xb314,
            'skein256-168': 0xb315,
            'skein256-176': 0xb316,
            'skein256-184': 0xb317,
            'skein256-192': 0xb318,
            'skein256-200': 0xb319,
            'skein256-208': 0xb31a,
            'skein256-216': 0xb31b,
            'skein256-224': 0xb31c,
            'skein256-232': 0xb31d,
            'skein256-240': 0xb31e,
            'skein256-248': 0xb31f,
            'skein256-256': 0xb320,
            'skein512-8': 0xb321,
            'skein512-16': 0xb322,
            'skein512-24': 0xb323,
            'skein512-32': 0xb324,
            'skein512-40': 0xb325,
            'skein512-48': 0xb326,
            'skein512-56': 0xb327,
            'skein512-64': 0xb328,
            'skein512-72': 0xb329,
            'skein512-80': 0xb32a,
            'skein512-88': 0xb32b,
            'skein512-96': 0xb32c,
            'skein512-104': 0xb32d,
            'skein512-112': 0xb32e,
            'skein512-120': 0xb32f,
            'skein512-128': 0xb330,
            'skein512-136': 0xb331,
            'skein512-144': 0xb332,
            'skein512-152': 0xb333,
            'skein512-160': 0xb334,
            'skein512-168': 0xb335,
            'skein512-176': 0xb336,
            'skein512-184': 0xb337,
            'skein512-192': 0xb338,
            'skein512-200': 0xb339,
            'skein512-208': 0xb33a,
            'skein512-216': 0xb33b,
            'skein512-224': 0xb33c,
            'skein512-232': 0xb33d,
            'skein512-240': 0xb33e,
            'skein512-248': 0xb33f,
            'skein512-256': 0xb340,
            'skein512-264': 0xb341,
            'skein512-272': 0xb342,
            'skein512-280': 0xb343,
            'skein512-288': 0xb344,
            'skein512-296': 0xb345,
            'skein512-304': 0xb346,
            'skein512-312': 0xb347,
            'skein512-320': 0xb348,
            'skein512-328': 0xb349,
            'skein512-336': 0xb34a,
            'skein512-344': 0xb34b,
            'skein512-352': 0xb34c,
            'skein512-360': 0xb34d,
            'skein512-368': 0xb34e,
            'skein512-376': 0xb34f,
            'skein512-384': 0xb350,
            'skein512-392': 0xb351,
            'skein512-400': 0xb352,
            'skein512-408': 0xb353,
            'skein512-416': 0xb354,
            'skein512-424': 0xb355,
            'skein512-432': 0xb356,
            'skein512-440': 0xb357,
            'skein512-448': 0xb358,
            'skein512-456': 0xb359,
            'skein512-464': 0xb35a,
            'skein512-472': 0xb35b,
            'skein512-480': 0xb35c,
            'skein512-488': 0xb35d,
            'skein512-496': 0xb35e,
            'skein512-504': 0xb35f,
            'skein512-512': 0xb360,
            'skein1024-8': 0xb361,
            'skein1024-16': 0xb362,
            'skein1024-24': 0xb363,
            'skein1024-32': 0xb364,
            'skein1024-40': 0xb365,
            'skein1024-48': 0xb366,
            'skein1024-56': 0xb367,
            'skein1024-64': 0xb368,
            'skein1024-72': 0xb369,
            'skein1024-80': 0xb36a,
            'skein1024-88': 0xb36b,
            'skein1024-96': 0xb36c,
            'skein1024-104': 0xb36d,
            'skein1024-112': 0xb36e,
            'skein1024-120': 0xb36f,
            'skein1024-128': 0xb370,
            'skein1024-136': 0xb371,
            'skein1024-144': 0xb372,
            'skein1024-152': 0xb373,
            'skein1024-160': 0xb374,
            'skein1024-168': 0xb375,
            'skein1024-176': 0xb376,
            'skein1024-184': 0xb377,
            'skein1024-192': 0xb378,
            'skein1024-200': 0xb379,
            'skein1024-208': 0xb37a,
            'skein1024-216': 0xb37b,
            'skein1024-224': 0xb37c,
            'skein1024-232': 0xb37d,
            'skein1024-240': 0xb37e,
            'skein1024-248': 0xb37f,
            'skein1024-256': 0xb380,
            'skein1024-264': 0xb381,
            'skein1024-272': 0xb382,
            'skein1024-280': 0xb383,
            'skein1024-288': 0xb384,
            'skein1024-296': 0xb385,
            'skein1024-304': 0xb386,
            'skein1024-312': 0xb387,
            'skein1024-320': 0xb388,
            'skein1024-328': 0xb389,
            'skein1024-336': 0xb38a,
            'skein1024-344': 0xb38b,
            'skein1024-352': 0xb38c,
            'skein1024-360': 0xb38d,
            'skein1024-368': 0xb38e,
            'skein1024-376': 0xb38f,
            'skein1024-384': 0xb390,
            'skein1024-392': 0xb391,
            'skein1024-400': 0xb392,
            'skein1024-408': 0xb393,
            'skein1024-416': 0xb394,
            'skein1024-424': 0xb395,
            'skein1024-432': 0xb396,
            'skein1024-440': 0xb397,
            'skein1024-448': 0xb398,
            'skein1024-456': 0xb399,
            'skein1024-464': 0xb39a,
            'skein1024-472': 0xb39b,
            'skein1024-480': 0xb39c,
            'skein1024-488': 0xb39d,
            'skein1024-496': 0xb39e,
            'skein1024-504': 0xb39f,
            'skein1024-512': 0xb3a0,
            'skein1024-520': 0xb3a1,
            'skein1024-528': 0xb3a2,
            'skein1024-536': 0xb3a3,
            'skein1024-544': 0xb3a4,
            'skein1024-552': 0xb3a5,
            'skein1024-560': 0xb3a6,
            'skein1024-568': 0xb3a7,
            'skein1024-576': 0xb3a8,
            'skein1024-584': 0xb3a9,
            'skein1024-592': 0xb3aa,
            'skein1024-600': 0xb3ab,
            'skein1024-608': 0xb3ac,
            'skein1024-616': 0xb3ad,
            'skein1024-624': 0xb3ae,
            'skein1024-632': 0xb3af,
            'skein1024-640': 0xb3b0,
            'skein1024-648': 0xb3b1,
            'skein1024-656': 0xb3b2,
            'skein1024-664': 0xb3b3,
            'skein1024-672': 0xb3b4,
            'skein1024-680': 0xb3b5,
            'skein1024-688': 0xb3b6,
            'skein1024-696': 0xb3b7,
            'skein1024-704': 0xb3b8,
            'skein1024-712': 0xb3b9,
            'skein1024-720': 0xb3ba,
            'skein1024-728': 0xb3bb,
            'skein1024-736': 0xb3bc,
            'skein1024-744': 0xb3bd,
            'skein1024-752': 0xb3be,
            'skein1024-760': 0xb3bf,
            'skein1024-768': 0xb3c0,
            'skein1024-776': 0xb3c1,
            'skein1024-784': 0xb3c2,
            'skein1024-792': 0xb3c3,
            'skein1024-800': 0xb3c4,
            'skein1024-808': 0xb3c5,
            'skein1024-816': 0xb3c6,
            'skein1024-824': 0xb3c7,
            'skein1024-832': 0xb3c8,
            'skein1024-840': 0xb3c9,
            'skein1024-848': 0xb3ca,
            'skein1024-856': 0xb3cb,
            'skein1024-864': 0xb3cc,
            'skein1024-872': 0xb3cd,
            'skein1024-880': 0xb3ce,
            'skein1024-888': 0xb3cf,
            'skein1024-896': 0xb3d0,
            'skein1024-904': 0xb3d1,
            'skein1024-912': 0xb3d2,
            'skein1024-920': 0xb3d3,
            'skein1024-928': 0xb3d4,
            'skein1024-936': 0xb3d5,
            'skein1024-944': 0xb3d6,
            'skein1024-952': 0xb3d7,
            'skein1024-960': 0xb3d8,
            'skein1024-968': 0xb3d9,
            'skein1024-976': 0xb3da,
            'skein1024-984': 0xb3db,
            'skein1024-992': 0xb3dc,
            'skein1024-1000': 0xb3dd,
            'skein1024-1008': 0xb3de,
            'skein1024-1016': 0xb3df,
            'skein1024-1024': 0xb3e0,
            'poseidon-bls12_381-a2-fc1': 0xb401,
            'poseidon-bls12_381-a2-fc1-sc': 0xb402
          })

          module.exports = { names }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\src\\index.js", { "./constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\src\\constants.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "multibase": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multihashes\\node_modules\\multibase\\src\\index.js", "varint": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\index.js", "web-encoding": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\multihashes\src\index.js
        return function (require, module, exports) {
          // @ts-check
          /* eslint-disable guard-for-in */
          /**
           * Multihash implementation in JavaScript.
           *
           * @module multihash
           */
          'use strict'

          const { Buffer } = require('buffer')
          const multibase = require('multibase')
          const varint = require('varint')
          const { names } = require('./constants')
          const { TextDecoder } = require('web-encoding')

          const textDecoder = new TextDecoder()
          const codes = {}

          for (const key in names) {
            codes[names[key]] = key
          }
          exports.names = names
          exports.codes = Object.freeze(codes)

          /**
           * Convert the given multihash to a hex encoded string.
           *
           * @param {Uint8Array} hash
           * @returns {string}
           */
          exports.toHexString = function toHexString(hash) {
            if (!(hash instanceof Uint8Array)) {
              throw new Error('must be passed a Uint8Array')
            }

            const buffer = Buffer.isBuffer(hash)
              ? hash
              : Buffer.from(hash.buffer, hash.byteOffset, hash.byteLength)

            return buffer.toString('hex')
          }

          /**
           * Convert the given hex encoded string to a multihash.
           *
           * @param {string} hash
           * @returns {Buffer}
           */
          exports.fromHexString = function fromHexString(hash) {
            return Buffer.from(hash, 'hex')
          }

          /**
           * Convert the given multihash to a base58 encoded string.
           *
           * @param {Uint8Array} hash
           * @returns {string}
           */
          exports.toB58String = function toB58String(hash) {
            if (!(hash instanceof Uint8Array)) {
              throw new Error('must be passed a Uint8Array')
            }

            return textDecoder.decode(multibase.encode('base58btc', hash)).slice(1)
          }

          /**
           * Convert the given base58 encoded string to a multihash.
           *
           * @param {string|Uint8Array} hash
           * @returns {Buffer}
           */
          exports.fromB58String = function fromB58String(hash) {
            const encoded = hash instanceof Uint8Array
              ? textDecoder.decode(hash)
              : hash

            return multibase.decode('z' + encoded)
          }

          /**
           * Decode a hash from the given multihash.
           *
           * @param {Uint8Array} bytes
           * @returns {{code: number, name: string, length: number, digest: Buffer}} result
           */
          exports.decode = function decode(bytes) {
            if (!(bytes instanceof Uint8Array)) {
              throw new Error('multihash must be a Uint8Array')
            }
            let buf = Buffer.isBuffer(bytes)
              ? bytes
              : Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength)

            if (buf.length < 2) {
              throw new Error('multihash too short. must be > 2 bytes.')
            }

            const code = varint.decode(buf)
            if (!exports.isValidCode(code)) {
              throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)
            }
            buf = buf.slice(varint.decode.bytes)

            const len = varint.decode(buf)
            if (len < 0) {
              throw new Error(`multihash invalid length: ${len}`)
            }
            buf = buf.slice(varint.decode.bytes)

            if (buf.length !== len) {
              throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)
            }

            return {
              code,
              name: codes[code],
              length: len,
              digest: buf
            }
          }

          /**
           *  Encode a hash digest along with the specified function code.
           *
           * > **Note:** the length is derived from the length of the digest itself.
           *
           * @param {Uint8Array} digest
           * @param {string|number} code
           * @param {number} [length]
           * @returns {Buffer}
           */
          exports.encode = function encode(digest, code, length) {
            if (!digest || code === undefined) {
              throw new Error('multihash encode requires at least two args: digest, code')
            }

            // ensure it's a hashfunction code.
            const hashfn = exports.coerceCode(code)

            if (!(digest instanceof Uint8Array)) {
              throw new Error('digest should be a Uint8Array')
            }

            if (length == null) {
              length = digest.length
            }

            if (length && digest.length !== length) {
              throw new Error('digest length should be equal to specified length.')
            }

            const hash = varint.encode(hashfn)
            const len = varint.encode(length)
            const buffer = Buffer.alloc(hash.length + len.length + digest.length)
            buffer.set(hash, 0)
            buffer.set(len, hash.length)
            buffer.set(digest, hash.length + len.length)
            return buffer
          }

          /**
           * Converts a hash function name into the matching code.
           * If passed a number it will return the number if it's a valid code.
           * @param {string|number} name
           * @returns {number}
           */
          exports.coerceCode = function coerceCode(name) {
            let code = name

            if (typeof name === 'string') {
              if (names[name] === undefined) {
                throw new Error(`Unrecognized hash function named: ${name}`)
              }
              code = names[name]
            }

            if (typeof code !== 'number') {
              throw new Error(`Hash function code should be a number. Got: ${code}`)
            }

            if (codes[code] === undefined && !exports.isAppCode(code)) {
              throw new Error(`Unrecognized function code: ${code}`)
            }

            return code
          }

          /**
           * Checks wether a code is part of the app range
           *
           * @param {number} code
           * @returns {boolean}
           */
          exports.isAppCode = function appCode(code) {
            return code > 0 && code < 0x10
          }

          /**
           * Checks whether a multihash code is valid.
           *
           * @param {number} code
           * @returns {boolean}
           */
          exports.isValidCode = function validCode(code) {
            if (exports.isAppCode(code)) {
              return true
            }

            if (codes[code]) {
              return true
            }

            return false
          }

          /**
           * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
           *
           * @param {Uint8Array} multihash
           * @returns {void}
           * @throws {Error}
           */
          function validate(multihash) {
            exports.decode(multihash) // throws if bad.
          }
          exports.validate = validate

          /**
           * Returns a prefix from a valid multihash. Throws an error if it is not valid.
           *
           * @param {Uint8Array} multihash
           * @returns {Buffer}
           * @throws {Error}
           */
          exports.prefix = function prefix(multihash) {
            validate(multihash)

            return Buffer.from(multihash.buffer, multihash.byteOffset, 2)
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\nanoid\\index.browser.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\nanoid\index.browser.js
        return function (require, module, exports) {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.

          if ("development" !== 'production') {
            // All bundlers will remove this block in production bundle
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
              throw new Error(
                'React Native does not have a built-in secure random generator. ' +
                'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +
                'For secure ID install `expo-random` locally and use `nanoid/async`.'
              )
            }
            if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {
              throw new Error(
                'Your browser does not have secure random generator. ' +
                'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'
              )
            }
          }

          var crypto = self.crypto || self.msCrypto

          // This alphabet uses a-z A-Z 0-9 _- symbols.
          // Symbols are generated for smaller size.
          // -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA
          var url = '-_'
          // Loop from 36 to 0 (from z to a and 9 to 0 in Base36).
          var i = 36
          while (i--) {
            // 36 is radix. Number.prototype.toString(36) returns number
            // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.
            url += i.toString(36)
          }
          // Loop from 36 to 10 (from Z to A in Base36).
          i = 36
          while (i-- - 10) {
            url += i.toString(36).toUpperCase()
          }

          module.exports = function (size) {
            var id = ''
            var bytes = crypto.getRandomValues(new Uint8Array(size || 21))
            i = size || 21

            // Compact alternative for `for (var i = 0; i < size; i++)`
            while (i--) {
              // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.
              // This mask reduces random byte 0-255 to 0-63 values.
              // There is no need in `|| ''` and `* 1.6` hacks in here,
              // because bitmask trim bytes exact to alphabet size.
              id += url[bytes[i] & 63]
            }
            return id
          }

        };
      };
    }
  }, { package: "nanoid", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\nonce-tracker\\index.js", { "assert": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\assert\\assert.js", "await-semaphore": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\await-semaphore\\index.js", "ethjs-query": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethjs-query\\lib\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\nonce-tracker\index.js
        return function (require, module, exports) {
          const EthQuery = require('ethjs-query')
          const assert = require('assert')
          const Mutex = require('await-semaphore').Mutex
          /**
            @param opts {Object}
              @param {Object} opts.provider a ethereum provider
              @param {Function} opts.getPendingTransactions a function that returns an array of txMeta
              whosee status is `submitted`
              @param {Function} opts.getConfirmedTransactions a function that returns an array of txMeta
              whose status is `confirmed`
            @class
          */
          class NonceTracker {

            constructor({ provider, blockTracker, getPendingTransactions, getConfirmedTransactions }) {
              this.provider = provider
              this.blockTracker = blockTracker
              this.ethQuery = new EthQuery(provider)
              this.getPendingTransactions = getPendingTransactions
              this.getConfirmedTransactions = getConfirmedTransactions
              this.lockMap = {}
            }

            /**
              @returns {Promise<Object>} with the key releaseLock (the gloabl mutex)
            */
            async getGlobalLock() {
              const globalMutex = this._lookupMutex('global')
              // await global mutex free
              const releaseLock = await globalMutex.acquire()
              return { releaseLock }
            }

            /**
             * @typedef NonceDetails
             * @property {number} highestLocallyConfirmed - A hex string of the highest nonce on a confirmed transaction.
             * @property {number} nextNetworkNonce - The next nonce suggested by the eth_getTransactionCount method.
             * @property {number} highestSuggested - The maximum between the other two, the number returned.
             */

            /**
            this will return an object with the `nextNonce` `nonceDetails`, and the releaseLock
            Note: releaseLock must be called after adding a signed tx to pending transactions (or discarding).
          
            @param address {string} the hex string for the address whose nonce we are calculating
            @returns {Promise<NonceDetails>}
            */
            async getNonceLock(address) {
              // await global mutex free
              await this._globalMutexFree()
              // await lock free, then take lock
              const releaseLock = await this._takeMutex(address)
              try {
                // evaluate multiple nextNonce strategies
                const nonceDetails = {}
                const networkNonceResult = await this._getNetworkNextNonce(address)
                const highestLocallyConfirmed = this._getHighestLocallyConfirmed(address)
                const nextNetworkNonce = networkNonceResult.nonce
                const highestSuggested = Math.max(nextNetworkNonce, highestLocallyConfirmed)

                const pendingTxs = this.getPendingTransactions(address)
                const localNonceResult = this._getHighestContinuousFrom(pendingTxs, highestSuggested) || 0

                nonceDetails.params = {
                  highestLocallyConfirmed,
                  highestSuggested,
                  nextNetworkNonce,
                }
                nonceDetails.local = localNonceResult
                nonceDetails.network = networkNonceResult

                const nextNonce = Math.max(networkNonceResult.nonce, localNonceResult.nonce)
                assert(Number.isInteger(nextNonce), `nonce-tracker - nextNonce is not an integer - got: (${typeof nextNonce}) "${nextNonce}"`)

                // return nonce and release cb
                return { nextNonce, nonceDetails, releaseLock }
              } catch (err) {
                // release lock if we encounter an error
                releaseLock()
                throw err
              }
            }

            async _globalMutexFree() {
              const globalMutex = this._lookupMutex('global')
              const releaseLock = await globalMutex.acquire()
              releaseLock()
            }

            async _takeMutex(lockId) {
              const mutex = this._lookupMutex(lockId)
              const releaseLock = await mutex.acquire()
              return releaseLock
            }

            _lookupMutex(lockId) {
              let mutex = this.lockMap[lockId]
              if (!mutex) {
                mutex = new Mutex()
                this.lockMap[lockId] = mutex
              }
              return mutex
            }

            async _getNetworkNextNonce(address) {
              // calculate next nonce
              // we need to make sure our base count
              // and pending count are from the same block
              const blockNumber = await this.blockTracker.getLatestBlock()
              const baseCountBN = await this.ethQuery.getTransactionCount(address, blockNumber)
              const baseCount = baseCountBN.toNumber()
              assert(Number.isInteger(baseCount), `nonce-tracker - baseCount is not an integer - got: (${typeof baseCount}) "${baseCount}"`)
              const nonceDetails = { blockNumber, baseCount }
              return { name: 'network', nonce: baseCount, details: nonceDetails }
            }

            _getHighestLocallyConfirmed(address) {
              const confirmedTransactions = this.getConfirmedTransactions(address)
              const highest = this._getHighestNonce(confirmedTransactions)
              return Number.isInteger(highest) ? highest + 1 : 0
            }

            _getHighestNonce(txList) {
              const nonces = txList.map((txMeta) => {
                const nonce = txMeta.txParams.nonce
                assert(typeof nonce, 'string', 'nonces should be hex strings')
                return parseInt(nonce, 16)
              })
              const highestNonce = Math.max.apply(null, nonces)
              return highestNonce
            }

            /**
              @typedef {object} highestContinuousFrom
              @property {string} - name the name for how the nonce was calculated based on the data used
              @property {number} - nonce the next suggested nonce
              @property {object} - details the provided starting nonce that was used (for debugging)
            */
            /**
              @param txList {array} - list of txMeta's
              @param startPoint {number} - the highest known locally confirmed nonce
              @returns {highestContinuousFrom}
            */
            _getHighestContinuousFrom(txList, startPoint) {
              const nonces = txList.map((txMeta) => {
                const nonce = txMeta.txParams.nonce
                assert(typeof nonce, 'string', 'nonces should be hex strings')
                return parseInt(nonce, 16)
              })

              let highest = startPoint
              while (nonces.includes(highest)) {
                highest++
              }

              return { name: 'local', nonce: highest, details: { startPoint, highest } }
            }

          }

          module.exports = NonceTracker

        };
      };
    }
  }, { package: "nonce-tracker", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\remove-trailing-slash\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\remove-trailing-slash\index.js
        return function (require, module, exports) {

          /**
           * Remove trailing slashes from the given `str`
           *
           * @api public
           * @param {String} str
           * @return {String}
           */
          exports = module.exports = function (str) {
            return String(str).replace(exports.expr, '');
          };

          /**
           * Expose the regex
           *
           * @api private
           * @type {RegExp}
           */
          exports.expr = /\/+$/;

        };
      };
    }
  }, { package: "remove-trailing-slash", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\scryptsy\\lib\\scrypt.js", { "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "pbkdf2": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\pbkdf2\\browser.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\scryptsy\lib\scrypt.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              var pbkdf2Sync = require('pbkdf2').pbkdf2Sync

              var MAX_VALUE = 0x7fffffff

              // N = Cpu cost, r = Memory cost, p = parallelization cost
              function scrypt(key, salt, N, r, p, dkLen, progressCallback) {
                if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')

                if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
                if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')

                var XY = new Buffer(256 * r)
                var V = new Buffer(128 * r * N)

                // pseudo global
                var B32 = new Int32Array(16) // salsa20_8
                var x = new Int32Array(16) // salsa20_8
                var _X = new Buffer(64) // blockmix_salsa8

                // pseudo global
                var B = pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256')

                var tickCallback
                if (progressCallback) {
                  var totalOps = p * N * 2
                  var currentOp = 0

                  tickCallback = function () {
                    ++currentOp

                    // send progress notifications once every 1,000 ops
                    if (currentOp % 1000 === 0) {
                      progressCallback({
                        current: currentOp,
                        total: totalOps,
                        percent: (currentOp / totalOps) * 100.0
                      })
                    }
                  }
                }

                for (var i = 0; i < p; i++) {
                  smix(B, i * 128 * r, r, N, V, XY)
                }

                return pbkdf2Sync(key, B, 1, dkLen, 'sha256')

                // all of these functions are actually moved to the top
                // due to function hoisting

                function smix(B, Bi, r, N, V, XY) {
                  var Xi = 0
                  var Yi = 128 * r
                  var i

                  B.copy(XY, Xi, Bi, Bi + Yi)

                  for (i = 0; i < N; i++) {
                    XY.copy(V, i * Yi, Xi, Xi + Yi)
                    blockmix_salsa8(XY, Xi, Yi, r)

                    if (tickCallback) tickCallback()
                  }

                  for (i = 0; i < N; i++) {
                    var offset = Xi + (2 * r - 1) * 64
                    var j = XY.readUInt32LE(offset) & (N - 1)
                    blockxor(V, j * Yi, XY, Xi, Yi)
                    blockmix_salsa8(XY, Xi, Yi, r)

                    if (tickCallback) tickCallback()
                  }

                  XY.copy(B, Bi, Xi, Xi + Yi)
                }

                function blockmix_salsa8(BY, Bi, Yi, r) {
                  var i

                  arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64)

                  for (i = 0; i < 2 * r; i++) {
                    blockxor(BY, i * 64, _X, 0, 64)
                    salsa20_8(_X)
                    arraycopy(_X, 0, BY, Yi + (i * 64), 64)
                  }

                  for (i = 0; i < r; i++) {
                    arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64)
                  }

                  for (i = 0; i < r; i++) {
                    arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64)
                  }
                }

                function R(a, b) {
                  return (a << b) | (a >>> (32 - b))
                }

                function salsa20_8(B) {
                  var i

                  for (i = 0; i < 16; i++) {
                    B32[i] = (B[i * 4 + 0] & 0xff) << 0
                    B32[i] |= (B[i * 4 + 1] & 0xff) << 8
                    B32[i] |= (B[i * 4 + 2] & 0xff) << 16
                    B32[i] |= (B[i * 4 + 3] & 0xff) << 24
                    // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
                  }

                  arraycopy(B32, 0, x, 0, 16)

                  for (i = 8; i > 0; i -= 2) {
                    x[4] ^= R(x[0] + x[12], 7)
                    x[8] ^= R(x[4] + x[0], 9)
                    x[12] ^= R(x[8] + x[4], 13)
                    x[0] ^= R(x[12] + x[8], 18)
                    x[9] ^= R(x[5] + x[1], 7)
                    x[13] ^= R(x[9] + x[5], 9)
                    x[1] ^= R(x[13] + x[9], 13)
                    x[5] ^= R(x[1] + x[13], 18)
                    x[14] ^= R(x[10] + x[6], 7)
                    x[2] ^= R(x[14] + x[10], 9)
                    x[6] ^= R(x[2] + x[14], 13)
                    x[10] ^= R(x[6] + x[2], 18)
                    x[3] ^= R(x[15] + x[11], 7)
                    x[7] ^= R(x[3] + x[15], 9)
                    x[11] ^= R(x[7] + x[3], 13)
                    x[15] ^= R(x[11] + x[7], 18)
                    x[1] ^= R(x[0] + x[3], 7)
                    x[2] ^= R(x[1] + x[0], 9)
                    x[3] ^= R(x[2] + x[1], 13)
                    x[0] ^= R(x[3] + x[2], 18)
                    x[6] ^= R(x[5] + x[4], 7)
                    x[7] ^= R(x[6] + x[5], 9)
                    x[4] ^= R(x[7] + x[6], 13)
                    x[5] ^= R(x[4] + x[7], 18)
                    x[11] ^= R(x[10] + x[9], 7)
                    x[8] ^= R(x[11] + x[10], 9)
                    x[9] ^= R(x[8] + x[11], 13)
                    x[10] ^= R(x[9] + x[8], 18)
                    x[12] ^= R(x[15] + x[14], 7)
                    x[13] ^= R(x[12] + x[15], 9)
                    x[14] ^= R(x[13] + x[12], 13)
                    x[15] ^= R(x[14] + x[13], 18)
                  }

                  for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i]

                  for (i = 0; i < 16; i++) {
                    var bi = i * 4
                    B[bi + 0] = (B32[i] >> 0 & 0xff)
                    B[bi + 1] = (B32[i] >> 8 & 0xff)
                    B[bi + 2] = (B32[i] >> 16 & 0xff)
                    B[bi + 3] = (B32[i] >> 24 & 0xff)
                    // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
                  }
                }

                // naive approach... going back to loop unrolling may yield additional performance
                function blockxor(S, Si, D, Di, len) {
                  for (var i = 0; i < len; i++) {
                    D[Di + i] ^= S[Si + i]
                  }
                }
              }

              function arraycopy(src, srcPos, dest, destPos, length) {
                if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
                  src.copy(dest, destPos, srcPos, srcPos + length)
                } else {
                  while (length--) {
                    dest[destPos++] = src[srcPos++]
                  }
                }
              }

              module.exports = scrypt

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "ethereumjs-wallet>scryptsy", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\secp256k1\\elliptic.js", { "./lib": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\secp256k1\\lib\\index.js", "./lib/elliptic": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\secp256k1\\lib\\elliptic.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\secp256k1\elliptic.js
        return function (require, module, exports) {
          module.exports = require('./lib')(require('./lib/elliptic'))

        };
      };
    }
  }, { package: "ganache>secp256k1", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\secp256k1\\lib\\elliptic.js", { "elliptic": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\secp256k1\lib\elliptic.js
        return function (require, module, exports) {
          const EC = require('elliptic').ec

          const ec = new EC('secp256k1')
          const ecparams = ec.curve

          // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
          // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
          const BN = ecparams.n.constructor

          function loadCompressedPublicKey(first, xbuf) {
            let x = new BN(xbuf)

            // overflow
            if (x.cmp(ecparams.p) >= 0) return null
            x = x.toRed(ecparams.red)

            // compute corresponding Y
            let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
            if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

            return ec.keyPair({ pub: { x: x, y: y } })
          }

          function loadUncompressedPublicKey(first, xbuf, ybuf) {
            let x = new BN(xbuf)
            let y = new BN(ybuf)

            // overflow
            if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

            x = x.toRed(ecparams.red)
            y = y.toRed(ecparams.red)

            // is odd flag
            if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

            // x*x*x + b = y*y
            const x3 = x.redSqr().redIMul(x)
            if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

            return ec.keyPair({ pub: { x: x, y: y } })
          }

          function loadPublicKey(pubkey) {
            // length should be validated in interface
            const first = pubkey[0]
            switch (first) {
              case 0x02:
              case 0x03:
                if (pubkey.length !== 33) return null
                return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
              case 0x04:
              case 0x06:
              case 0x07:
                if (pubkey.length !== 65) return null
                return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
              default:
                return null
            }
          }

          function savePublicKey(output, point) {
            const pubkey = point.encode(null, output.length === 33)
            // Loop should be faster because we do not need create extra Uint8Array
            // output.set(new Uint8Array(pubkey))
            for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
          }

          module.exports = {
            contextRandomize() {
              return 0
            },

            privateKeyVerify(seckey) {
              const bn = new BN(seckey)
              return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
            },

            privateKeyNegate(seckey) {
              const bn = new BN(seckey)
              const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
              seckey.set(negate)
              return 0
            },

            privateKeyTweakAdd(seckey, tweak) {
              const bn = new BN(tweak)
              if (bn.cmp(ecparams.n) >= 0) return 1

              bn.iadd(new BN(seckey))
              if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
              if (bn.isZero()) return 1

              const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
              seckey.set(tweaked)

              return 0
            },

            privateKeyTweakMul(seckey, tweak) {
              let bn = new BN(tweak)
              if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

              bn.imul(new BN(seckey))
              if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)

              const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
              seckey.set(tweaked)

              return 0
            },

            publicKeyVerify(pubkey) {
              const pair = loadPublicKey(pubkey)
              return pair === null ? 1 : 0
            },

            publicKeyCreate(output, seckey) {
              const bn = new BN(seckey)
              if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

              const point = ec.keyFromPrivate(seckey).getPublic()
              savePublicKey(output, point)

              return 0
            },

            publicKeyConvert(output, pubkey) {
              const pair = loadPublicKey(pubkey)
              if (pair === null) return 1

              const point = pair.getPublic()
              savePublicKey(output, point)

              return 0
            },

            publicKeyNegate(output, pubkey) {
              const pair = loadPublicKey(pubkey)
              if (pair === null) return 1

              const point = pair.getPublic()
              point.y = point.y.redNeg()
              savePublicKey(output, point)

              return 0
            },

            publicKeyCombine(output, pubkeys) {
              const pairs = new Array(pubkeys.length)
              for (let i = 0; i < pubkeys.length; ++i) {
                pairs[i] = loadPublicKey(pubkeys[i])
                if (pairs[i] === null) return 1
              }

              let point = pairs[0].getPublic()
              for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
              if (point.isInfinity()) return 2

              savePublicKey(output, point)

              return 0
            },

            publicKeyTweakAdd(output, pubkey, tweak) {
              const pair = loadPublicKey(pubkey)
              if (pair === null) return 1

              tweak = new BN(tweak)
              if (tweak.cmp(ecparams.n) >= 0) return 2

              const point = pair.getPublic().add(ecparams.g.mul(tweak))
              if (point.isInfinity()) return 2

              savePublicKey(output, point)

              return 0
            },

            publicKeyTweakMul(output, pubkey, tweak) {
              const pair = loadPublicKey(pubkey)
              if (pair === null) return 1

              tweak = new BN(tweak)
              if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

              const point = pair.getPublic().mul(tweak)
              savePublicKey(output, point)

              return 0
            },

            signatureNormalize(sig) {
              const r = new BN(sig.subarray(0, 32))
              const s = new BN(sig.subarray(32, 64))
              if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

              if (s.cmp(ec.nh) === 1) {
                sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
              }

              return 0
            },

            // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
            // Adapted for Uint8Array instead Buffer
            signatureExport(obj, sig) {
              const sigR = sig.subarray(0, 32)
              const sigS = sig.subarray(32, 64)
              if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
              if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

              const { output } = obj

              // Prepare R
              let r = output.subarray(4, 4 + 33)
              r[0] = 0x00
              r.set(sigR, 1)

              let lenR = 33
              let posR = 0
              for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

              r = r.subarray(posR)
              if (r[0] & 0x80) return 1
              if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

              // Prepare S
              let s = output.subarray(6 + 33, 6 + 33 + 33)
              s[0] = 0x00
              s.set(sigS, 1)

              let lenS = 33
              let posS = 0
              for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

              s = s.subarray(posS)
              if (s[0] & 0x80) return 1
              if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

              // Set output length for return
              obj.outputlen = 6 + lenR + lenS

              // Output in specified format
              // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
              output[0] = 0x30
              output[1] = obj.outputlen - 2
              output[2] = 0x02
              output[3] = r.length
              output.set(r, 4)
              output[4 + lenR] = 0x02
              output[5 + lenR] = s.length
              output.set(s, 6 + lenR)

              return 0
            },

            // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
            // Adapted for Uint8Array instead Buffer
            signatureImport(output, sig) {
              if (sig.length < 8) return 1
              if (sig.length > 72) return 1
              if (sig[0] !== 0x30) return 1
              if (sig[1] !== sig.length - 2) return 1
              if (sig[2] !== 0x02) return 1

              const lenR = sig[3]
              if (lenR === 0) return 1
              if (5 + lenR >= sig.length) return 1
              if (sig[4 + lenR] !== 0x02) return 1

              const lenS = sig[5 + lenR]
              if (lenS === 0) return 1
              if ((6 + lenR + lenS) !== sig.length) return 1

              if (sig[4] & 0x80) return 1
              if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

              if (sig[lenR + 6] & 0x80) return 1
              if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

              let sigR = sig.subarray(4, 4 + lenR)
              if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
              if (sigR.length > 32) return 1

              let sigS = sig.subarray(6 + lenR)
              if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
              if (sigS.length > 32) throw new Error('S length is too long')

              let r = new BN(sigR)
              if (r.cmp(ecparams.n) >= 0) r = new BN(0)

              let s = new BN(sig.subarray(6 + lenR))
              if (s.cmp(ecparams.n) >= 0) s = new BN(0)

              output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
              output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)

              return 0
            },

            ecdsaSign(obj, message, seckey, data, noncefn) {
              if (noncefn) {
                const _noncefn = noncefn
                noncefn = (counter) => {
                  const nonce = _noncefn(message, seckey, null, data, counter)

                  const isValid = nonce instanceof Uint8Array && nonce.length === 32
                  if (!isValid) throw new Error('This is the way')

                  return new BN(nonce)
                }
              }

              const d = new BN(seckey)
              if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

              let sig
              try {
                sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
              } catch (err) {
                return 1
              }

              obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
              obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
              obj.recid = sig.recoveryParam

              return 0
            },

            ecdsaVerify(sig, msg32, pubkey) {
              const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }

              const sigr = new BN(sigObj.r)
              const sigs = new BN(sigObj.s)
              if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
              if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

              const pair = loadPublicKey(pubkey)
              if (pair === null) return 2

              const point = pair.getPublic()
              const isValid = ec.verify(msg32, sigObj, point)
              return isValid ? 0 : 3
            },

            ecdsaRecover(output, sig, recid, msg32) {
              const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }

              const sigr = new BN(sigObj.r)
              const sigs = new BN(sigObj.s)
              if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

              if (sigr.isZero() || sigs.isZero()) return 2

              // Can throw `throw new Error('Unable to find sencond key candinate');`
              let point
              try {
                point = ec.recoverPubKey(msg32, sigObj, recid)
              } catch (err) {
                return 2
              }

              savePublicKey(output, point)

              return 0
            },

            ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
              const pair = loadPublicKey(pubkey)
              if (pair === null) return 1

              const scalar = new BN(seckey)
              if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

              const point = pair.getPublic().mul(scalar)

              if (hashfn === undefined) {
                const data = point.encode(null, true)
                const sha256 = ec.hash().update(data).digest()
                for (let i = 0; i < 32; ++i) output[i] = sha256[i]
              } else {
                if (!xbuf) xbuf = new Uint8Array(32)
                const x = point.getX().toArray('be', 32)
                for (let i = 0; i < 32; ++i) xbuf[i] = x[i]

                if (!ybuf) ybuf = new Uint8Array(32)
                const y = point.getY().toArray('be', 32)
                for (let i = 0; i < 32; ++i) ybuf[i] = y[i]

                const hash = hashfn(xbuf, ybuf, data)

                const isValid = hash instanceof Uint8Array && hash.length === output.length
                if (!isValid) return 2

                output.set(hash)
              }

              return 0
            }
          }

        };
      };
    }
  }, { package: "ganache>secp256k1", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\secp256k1\\lib\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\secp256k1\lib\index.js
        return function (require, module, exports) {
          const errors = {
            IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
            TWEAK_ADD:
              'The tweak was out of range or the resulted private key is invalid',
            TWEAK_MUL: 'The tweak was out of range or equal to zero',
            CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
            SECKEY_INVALID: 'Private Key is invalid',
            PUBKEY_PARSE: 'Public Key could not be parsed',
            PUBKEY_SERIALIZE: 'Public Key serialization error',
            PUBKEY_COMBINE: 'The sum of the public keys is not valid',
            SIG_PARSE: 'Signature could not be parsed',
            SIGN: 'The nonce generation function failed, or the private key was invalid',
            RECOVER: 'Public key could not be recover',
            ECDH: 'Scalar was invalid (zero or overflow)'
          }

          function assert(cond, msg) {
            if (!cond) throw new Error(msg)
          }

          function isUint8Array(name, value, length) {
            assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)

            if (length !== undefined) {
              if (Array.isArray(length)) {
                const numbers = length.join(', ')
                const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
                assert(length.includes(value.length), msg)
              } else {
                const msg = `Expected ${name} to be an Uint8Array with length ${length}`
                assert(value.length === length, msg)
              }
            }
          }

          function isCompressed(value) {
            assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
          }

          function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
            if (typeof output === 'function') output = output(length)
            isUint8Array('output', output, length)
            return output
          }

          function toTypeString(value) {
            return Object.prototype.toString.call(value).slice(8, -1)
          }

          module.exports = (secp256k1) => {
            return {
              contextRandomize(seed) {
                assert(
                  seed === null || seed instanceof Uint8Array,
                  'Expected seed to be an Uint8Array or null'
                )
                if (seed !== null) isUint8Array('seed', seed, 32)

                switch (secp256k1.contextRandomize(seed)) {
                  case 1:
                    throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
                }
              },

              privateKeyVerify(seckey) {
                isUint8Array('private key', seckey, 32)

                return secp256k1.privateKeyVerify(seckey) === 0
              },

              privateKeyNegate(seckey) {
                isUint8Array('private key', seckey, 32)

                switch (secp256k1.privateKeyNegate(seckey)) {
                  case 0:
                    return seckey
                  case 1:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                }
              },

              privateKeyTweakAdd(seckey, tweak) {
                isUint8Array('private key', seckey, 32)
                isUint8Array('tweak', tweak, 32)

                switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
                  case 0:
                    return seckey
                  case 1:
                    throw new Error(errors.TWEAK_ADD)
                }
              },

              privateKeyTweakMul(seckey, tweak) {
                isUint8Array('private key', seckey, 32)
                isUint8Array('tweak', tweak, 32)

                switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
                  case 0:
                    return seckey
                  case 1:
                    throw new Error(errors.TWEAK_MUL)
                }
              },

              publicKeyVerify(pubkey) {
                isUint8Array('public key', pubkey, [33, 65])

                return secp256k1.publicKeyVerify(pubkey) === 0
              },

              publicKeyCreate(seckey, compressed = true, output) {
                isUint8Array('private key', seckey, 32)
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyCreate(output, seckey)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.SECKEY_INVALID)
                  case 2:
                    throw new Error(errors.PUBKEY_SERIALIZE)
                }
              },

              publicKeyConvert(pubkey, compressed = true, output) {
                isUint8Array('public key', pubkey, [33, 65])
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyConvert(output, pubkey)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.PUBKEY_SERIALIZE)
                }
              },

              publicKeyNegate(pubkey, compressed = true, output) {
                isUint8Array('public key', pubkey, [33, 65])
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyNegate(output, pubkey)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                  case 3:
                    throw new Error(errors.PUBKEY_SERIALIZE)
                }
              },

              publicKeyCombine(pubkeys, compressed = true, output) {
                assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
                assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
                for (const pubkey of pubkeys) {
                  isUint8Array('public key', pubkey, [33, 65])
                }
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyCombine(output, pubkeys)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.PUBKEY_COMBINE)
                  case 3:
                    throw new Error(errors.PUBKEY_SERIALIZE)
                }
              },

              publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
                isUint8Array('public key', pubkey, [33, 65])
                isUint8Array('tweak', tweak, 32)
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.TWEAK_ADD)
                }
              },

              publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
                isUint8Array('public key', pubkey, [33, 65])
                isUint8Array('tweak', tweak, 32)
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.TWEAK_MUL)
                }
              },

              signatureNormalize(sig) {
                isUint8Array('signature', sig, 64)

                switch (secp256k1.signatureNormalize(sig)) {
                  case 0:
                    return sig
                  case 1:
                    throw new Error(errors.SIG_PARSE)
                }
              },

              signatureExport(sig, output) {
                isUint8Array('signature', sig, 64)
                output = getAssertedOutput(output, 72)

                const obj = { output, outputlen: 72 }
                switch (secp256k1.signatureExport(obj, sig)) {
                  case 0:
                    return output.slice(0, obj.outputlen)
                  case 1:
                    throw new Error(errors.SIG_PARSE)
                  case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                }
              },

              signatureImport(sig, output) {
                isUint8Array('signature', sig)
                output = getAssertedOutput(output, 64)

                switch (secp256k1.signatureImport(output, sig)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.SIG_PARSE)
                  case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                }
              },

              ecdsaSign(msg32, seckey, options = {}, output) {
                isUint8Array('message', msg32, 32)
                isUint8Array('private key', seckey, 32)
                assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
                if (options.data !== undefined) isUint8Array('options.data', options.data)
                if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
                output = getAssertedOutput(output, 64)

                const obj = { signature: output, recid: null }
                switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
                  case 0:
                    return obj
                  case 1:
                    throw new Error(errors.SIGN)
                  case 2:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                }
              },

              ecdsaVerify(sig, msg32, pubkey) {
                isUint8Array('signature', sig, 64)
                isUint8Array('message', msg32, 32)
                isUint8Array('public key', pubkey, [33, 65])

                switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
                  case 0:
                    return true
                  case 3:
                    return false
                  case 1:
                    throw new Error(errors.SIG_PARSE)
                  case 2:
                    throw new Error(errors.PUBKEY_PARSE)
                }
              },

              ecdsaRecover(sig, recid, msg32, compressed = true, output) {
                isUint8Array('signature', sig, 64)
                assert(
                  toTypeString(recid) === 'Number' &&
                  recid >= 0 &&
                  recid <= 3,
                  'Expected recovery id to be a Number within interval [0, 3]'
                )
                isUint8Array('message', msg32, 32)
                isCompressed(compressed)
                output = getAssertedOutput(output, compressed ? 33 : 65)

                switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.SIG_PARSE)
                  case 2:
                    throw new Error(errors.RECOVER)
                  case 3:
                    throw new Error(errors.IMPOSSIBLE_CASE)
                }
              },

              ecdh(pubkey, seckey, options = {}, output) {
                isUint8Array('public key', pubkey, [33, 65])
                isUint8Array('private key', seckey, 32)
                assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
                if (options.data !== undefined) isUint8Array('options.data', options.data)
                if (options.hashfn !== undefined) {
                  assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
                  if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
                  if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
                  isUint8Array('output', output)
                } else {
                  output = getAssertedOutput(output, 32)
                }

                switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
                  case 0:
                    return output
                  case 1:
                    throw new Error(errors.PUBKEY_PARSE)
                  case 2:
                    throw new Error(errors.ECDH)
                }
              }
            }
          }

        };
      };
    }
  }, { package: "ganache>secp256k1", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\superstruct\\lib\\index.cjs", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\superstruct\lib\index.cjs
        return function (require, module, exports) {
          'use strict';

          Object.defineProperty(exports, '__esModule', { value: true });

          /**
           * A `StructFailure` represents a single specific failure in validation.
           */

          /**
           * `StructError` objects are thrown (or returned) when validation fails.
           *
           * Validation logic is design to exit early for maximum performance. The error
           * represents the first error encountered during validation. For more detail,
           * the `error.failures` property is a generator function that can be run to
           * continue validation and receive all the failures in the data.
           */
          class StructError extends TypeError {
            constructor(failure, failures) {
              let cached;
              const {
                message,
                ...rest
              } = failure;
              const {
                path
              } = failure;
              const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;
              super(msg);
              this.value = void 0;
              this.key = void 0;
              this.type = void 0;
              this.refinement = void 0;
              this.path = void 0;
              this.branch = void 0;
              this.failures = void 0;
              Object.assign(this, rest);
              this.name = this.constructor.name;

              this.failures = () => {
                return cached ?? (cached = [failure, ...failures()]);
              };
            }

          }

          /**
           * Check if a value is an iterator.
           */
          function isIterable(x) {
            return isObject(x) && typeof x[Symbol.iterator] === 'function';
          }
          /**
           * Check if a value is a plain object.
           */


          function isObject(x) {
            return typeof x === 'object' && x != null;
          }
          /**
           * Check if a value is a plain object.
           */

          function isPlainObject(x) {
            if (Object.prototype.toString.call(x) !== '[object Object]') {
              return false;
            }

            const prototype = Object.getPrototypeOf(x);
            return prototype === null || prototype === Object.prototype;
          }
          /**
           * Return a value as a printable string.
           */

          function print(value) {
            return typeof value === 'string' ? JSON.stringify(value) : `${value}`;
          }
          /**
           * Shifts (removes and returns) the first value from the `input` iterator.
           * Like `Array.prototype.shift()` but for an `Iterator`.
           */

          function shiftIterator(input) {
            const {
              done,
              value
            } = input.next();
            return done ? undefined : value;
          }
          /**
           * Convert a single validation result to a failure.
           */

          function toFailure(result, context, struct, value) {
            if (result === true) {
              return;
            } else if (result === false) {
              result = {};
            } else if (typeof result === 'string') {
              result = {
                message: result
              };
            }

            const {
              path,
              branch
            } = context;
            const {
              type
            } = struct;
            const {
              refinement,
              message = `Expected a value of type \`${type}\`${refinement ? ` with refinement \`${refinement}\`` : ''}, but received: \`${print(value)}\``
            } = result;
            return {
              value,
              type,
              refinement,
              key: path[path.length - 1],
              path,
              branch,
              ...result,
              message
            };
          }
          /**
           * Convert a validation result to an iterable of failures.
           */

          function* toFailures(result, context, struct, value) {
            if (!isIterable(result)) {
              result = [result];
            }

            for (const r of result) {
              const failure = toFailure(r, context, struct, value);

              if (failure) {
                yield failure;
              }
            }
          }
          /**
           * Check a value against a struct, traversing deeply into nested values, and
           * returning an iterator of failures or success.
           */

          function* run(value, struct, options) {
            if (options === void 0) {
              options = {};
            }

            const {
              path = [],
              branch = [value],
              coerce = false,
              mask = false
            } = options;
            const ctx = {
              path,
              branch
            };

            if (coerce) {
              value = struct.coercer(value, ctx);

              if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {
                for (const key in value) {
                  if (struct.schema[key] === undefined) {
                    delete value[key];
                  }
                }
              }
            }

            let status = 'valid';

            for (const failure of struct.validator(value, ctx)) {
              status = 'not_valid';
              yield [failure, undefined];
            }

            for (let [k, v, s] of struct.entries(value, ctx)) {
              const ts = run(v, s, {
                path: k === undefined ? path : [...path, k],
                branch: k === undefined ? branch : [...branch, v],
                coerce,
                mask
              });

              for (const t of ts) {
                if (t[0]) {
                  status = t[0].refinement != null ? 'not_refined' : 'not_valid';
                  yield [t[0], undefined];
                } else if (coerce) {
                  v = t[1];

                  if (k === undefined) {
                    value = v;
                  } else if (value instanceof Map) {
                    value.set(k, v);
                  } else if (value instanceof Set) {
                    value.add(v);
                  } else if (isObject(value)) {
                    if (v !== undefined) value[k] = v;
                  }
                }
              }
            }

            if (status !== 'not_valid') {
              for (const failure of struct.refiner(value, ctx)) {
                status = 'not_refined';
                yield [failure, undefined];
              }
            }

            if (status === 'valid') {
              yield [undefined, value];
            }
          }

          /**
           * `Struct` objects encapsulate the validation logic for a specific type of
           * values. Once constructed, you use the `assert`, `is` or `validate` helpers to
           * validate unknown input data against the struct.
           */

          class Struct {
            constructor(props) {
              this.TYPE = void 0;
              this.type = void 0;
              this.schema = void 0;
              this.coercer = void 0;
              this.validator = void 0;
              this.refiner = void 0;
              this.entries = void 0;
              const {
                type,
                schema,
                validator,
                refiner,
                coercer = value => value,
                entries = function* () { }
              } = props;
              this.type = type;
              this.schema = schema;
              this.entries = entries;
              this.coercer = coercer;

              if (validator) {
                this.validator = (value, context) => {
                  const result = validator(value, context);
                  return toFailures(result, context, this, value);
                };
              } else {
                this.validator = () => [];
              }

              if (refiner) {
                this.refiner = (value, context) => {
                  const result = refiner(value, context);
                  return toFailures(result, context, this, value);
                };
              } else {
                this.refiner = () => [];
              }
            }
            /**
             * Assert that a value passes the struct's validation, throwing if it doesn't.
             */


            assert(value) {
              return assert(value, this);
            }
            /**
             * Create a value with the struct's coercion logic, then validate it.
             */


            create(value) {
              return create(value, this);
            }
            /**
             * Check if a value passes the struct's validation.
             */


            is(value) {
              return is(value, this);
            }
            /**
             * Mask a value, coercing and validating it, but returning only the subset of
             * properties defined by the struct's schema.
             */


            mask(value) {
              return mask(value, this);
            }
            /**
             * Validate a value with the struct's validation logic, returning a tuple
             * representing the result.
             *
             * You may optionally pass `true` for the `withCoercion` argument to coerce
             * the value before attempting to validate it. If you do, the result will
             * contain the coerced result when successful.
             */


            validate(value, options) {
              if (options === void 0) {
                options = {};
              }

              return validate(value, this, options);
            }

          }
          /**
           * Assert that a value passes a struct, throwing if it doesn't.
           */

          function assert(value, struct) {
            const result = validate(value, struct);

            if (result[0]) {
              throw result[0];
            }
          }
          /**
           * Create a value with the coercion logic of struct and validate it.
           */

          function create(value, struct) {
            const result = validate(value, struct, {
              coerce: true
            });

            if (result[0]) {
              throw result[0];
            } else {
              return result[1];
            }
          }
          /**
           * Mask a value, returning only the subset of properties defined by a struct.
           */

          function mask(value, struct) {
            const result = validate(value, struct, {
              coerce: true,
              mask: true
            });

            if (result[0]) {
              throw result[0];
            } else {
              return result[1];
            }
          }
          /**
           * Check if a value passes a struct.
           */

          function is(value, struct) {
            const result = validate(value, struct);
            return !result[0];
          }
          /**
           * Validate a value against a struct, returning an error if invalid, or the
           * value (with potential coercion) if valid.
           */

          function validate(value, struct, options) {
            if (options === void 0) {
              options = {};
            }

            const tuples = run(value, struct, options);
            const tuple = shiftIterator(tuples);

            if (tuple[0]) {
              const error = new StructError(tuple[0], function* () {
                for (const t of tuples) {
                  if (t[0]) {
                    yield t[0];
                  }
                }
              });
              return [error, undefined];
            } else {
              const v = tuple[1];
              return [undefined, v];
            }
          }

          function assign() {
            for (var _len = arguments.length, Structs = new Array(_len), _key = 0; _key < _len; _key++) {
              Structs[_key] = arguments[_key];
            }

            const isType = Structs[0].type === 'type';
            const schemas = Structs.map(s => s.schema);
            const schema = Object.assign({}, ...schemas);
            return isType ? type(schema) : object(schema);
          }
          /**
           * Define a new struct type with a custom validation function.
           */

          function define(name, validator) {
            return new Struct({
              type: name,
              schema: null,
              validator
            });
          }
          /**
           * Create a new struct based on an existing struct, but the value is allowed to
           * be `undefined`. `log` will be called if the value is not `undefined`.
           */

          function deprecated(struct, log) {
            return new Struct({
              ...struct,
              refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),

              validator(value, ctx) {
                if (value === undefined) {
                  return true;
                } else {
                  log(value, ctx);
                  return struct.validator(value, ctx);
                }
              }

            });
          }
          /**
           * Create a struct with dynamic validation logic.
           *
           * The callback will receive the value currently being validated, and must
           * return a struct object to validate it with. This can be useful to model
           * validation logic that changes based on its input.
           */

          function dynamic(fn) {
            return new Struct({
              type: 'dynamic',
              schema: null,

              *entries(value, ctx) {
                const struct = fn(value, ctx);
                yield* struct.entries(value, ctx);
              },

              validator(value, ctx) {
                const struct = fn(value, ctx);
                return struct.validator(value, ctx);
              },

              coercer(value, ctx) {
                const struct = fn(value, ctx);
                return struct.coercer(value, ctx);
              },

              refiner(value, ctx) {
                const struct = fn(value, ctx);
                return struct.refiner(value, ctx);
              }

            });
          }
          /**
           * Create a struct with lazily evaluated validation logic.
           *
           * The first time validation is run with the struct, the callback will be called
           * and must return a struct object to use. This is useful for cases where you
           * want to have self-referential structs for nested data structures to avoid a
           * circular definition problem.
           */

          function lazy(fn) {
            let struct;
            return new Struct({
              type: 'lazy',
              schema: null,

              *entries(value, ctx) {
                struct ?? (struct = fn());
                yield* struct.entries(value, ctx);
              },

              validator(value, ctx) {
                struct ?? (struct = fn());
                return struct.validator(value, ctx);
              },

              coercer(value, ctx) {
                struct ?? (struct = fn());
                return struct.coercer(value, ctx);
              },

              refiner(value, ctx) {
                struct ?? (struct = fn());
                return struct.refiner(value, ctx);
              }

            });
          }
          /**
           * Create a new struct based on an existing object struct, but excluding
           * specific properties.
           *
           * Like TypeScript's `Omit` utility.
           */

          function omit(struct, keys) {
            const {
              schema
            } = struct;
            const subschema = {
              ...schema
            };

            for (const key of keys) {
              delete subschema[key];
            }

            switch (struct.type) {
              case 'type':
                return type(subschema);

              default:
                return object(subschema);
            }
          }
          /**
           * Create a new struct based on an existing object struct, but with all of its
           * properties allowed to be `undefined`.
           *
           * Like TypeScript's `Partial` utility.
           */

          function partial(struct) {
            const schema = struct instanceof Struct ? {
              ...struct.schema
            } : {
              ...struct
            };

            for (const key in schema) {
              schema[key] = optional(schema[key]);
            }

            return object(schema);
          }
          /**
           * Create a new struct based on an existing object struct, but only including
           * specific properties.
           *
           * Like TypeScript's `Pick` utility.
           */

          function pick(struct, keys) {
            const {
              schema
            } = struct;
            const subschema = {};

            for (const key of keys) {
              subschema[key] = schema[key];
            }

            return object(subschema);
          }
          /**
           * Define a new struct type with a custom validation function.
           *
           * @deprecated This function has been renamed to `define`.
           */

          function struct(name, validator) {
            console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');
            return define(name, validator);
          }

          /**
           * Ensure that any value passes validation.
           */

          function any() {
            return define('any', () => true);
          }
          function array(Element) {
            return new Struct({
              type: 'array',
              schema: Element,

              *entries(value) {
                if (Element && Array.isArray(value)) {
                  for (const [i, v] of value.entries()) {
                    yield [i, v, Element];
                  }
                }
              },

              coercer(value) {
                return Array.isArray(value) ? value.slice() : value;
              },

              validator(value) {
                return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value is a bigint.
           */

          function bigint() {
            return define('bigint', value => {
              return typeof value === 'bigint';
            });
          }
          /**
           * Ensure that a value is a boolean.
           */

          function boolean() {
            return define('boolean', value => {
              return typeof value === 'boolean';
            });
          }
          /**
           * Ensure that a value is a valid `Date`.
           *
           * Note: this also ensures that the value is *not* an invalid `Date` object,
           * which can occur when parsing a date fails but still returns a `Date`.
           */

          function date() {
            return define('date', value => {
              return value instanceof Date && !isNaN(value.getTime()) || `Expected a valid \`Date\` object, but received: ${print(value)}`;
            });
          }
          function enums(values) {
            const schema = {};
            const description = values.map(v => print(v)).join();

            for (const key of values) {
              schema[key] = key;
            }

            return new Struct({
              type: 'enums',
              schema,

              validator(value) {
                return values.includes(value) || `Expected one of \`${description}\`, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value is a function.
           */

          function func() {
            return define('func', value => {
              return typeof value === 'function' || `Expected a function, but received: ${print(value)}`;
            });
          }
          /**
           * Ensure that a value is an instance of a specific class.
           */

          function instance(Class) {
            return define('instance', value => {
              return value instanceof Class || `Expected a \`${Class.name}\` instance, but received: ${print(value)}`;
            });
          }
          /**
           * Ensure that a value is an integer.
           */

          function integer() {
            return define('integer', value => {
              return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${print(value)}`;
            });
          }
          /**
           * Ensure that a value matches all of a set of types.
           */

          function intersection(Structs) {
            return new Struct({
              type: 'intersection',
              schema: null,

              *entries(value, ctx) {
                for (const S of Structs) {
                  yield* S.entries(value, ctx);
                }
              },

              *validator(value, ctx) {
                for (const S of Structs) {
                  yield* S.validator(value, ctx);
                }
              },

              *refiner(value, ctx) {
                for (const S of Structs) {
                  yield* S.refiner(value, ctx);
                }
              }

            });
          }
          function literal(constant) {
            const description = print(constant);
            const t = typeof constant;
            return new Struct({
              type: 'literal',
              schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,

              validator(value) {
                return value === constant || `Expected the literal \`${description}\`, but received: ${print(value)}`;
              }

            });
          }
          function map(Key, Value) {
            return new Struct({
              type: 'map',
              schema: null,

              *entries(value) {
                if (Key && Value && value instanceof Map) {
                  for (const [k, v] of value.entries()) {
                    yield [k, k, Key];
                    yield [k, v, Value];
                  }
                }
              },

              coercer(value) {
                return value instanceof Map ? new Map(value) : value;
              },

              validator(value) {
                return value instanceof Map || `Expected a \`Map\` object, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that no value ever passes validation.
           */

          function never() {
            return define('never', () => false);
          }
          /**
           * Augment an existing struct to allow `null` values.
           */

          function nullable(struct) {
            return new Struct({
              ...struct,
              validator: (value, ctx) => value === null || struct.validator(value, ctx),
              refiner: (value, ctx) => value === null || struct.refiner(value, ctx)
            });
          }
          /**
           * Ensure that a value is a number.
           */

          function number() {
            return define('number', value => {
              return typeof value === 'number' && !isNaN(value) || `Expected a number, but received: ${print(value)}`;
            });
          }
          function object(schema) {
            const knowns = schema ? Object.keys(schema) : [];
            const Never = never();
            return new Struct({
              type: 'object',
              schema: schema ? schema : null,

              *entries(value) {
                if (schema && isObject(value)) {
                  const unknowns = new Set(Object.keys(value));

                  for (const key of knowns) {
                    unknowns.delete(key);
                    yield [key, value[key], schema[key]];
                  }

                  for (const key of unknowns) {
                    yield [key, value[key], Never];
                  }
                }
              },

              validator(value) {
                return isObject(value) || `Expected an object, but received: ${print(value)}`;
              },

              coercer(value) {
                return isObject(value) ? {
                  ...value
                } : value;
              }

            });
          }
          /**
           * Augment a struct to allow `undefined` values.
           */

          function optional(struct) {
            return new Struct({
              ...struct,
              validator: (value, ctx) => value === undefined || struct.validator(value, ctx),
              refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)
            });
          }
          /**
           * Ensure that a value is an object with keys and values of specific types, but
           * without ensuring any specific shape of properties.
           *
           * Like TypeScript's `Record` utility.
           */

          function record(Key, Value) {
            return new Struct({
              type: 'record',
              schema: null,

              *entries(value) {
                if (isObject(value)) {
                  for (const k in value) {
                    const v = value[k];
                    yield [k, k, Key];
                    yield [k, v, Value];
                  }
                }
              },

              validator(value) {
                return isObject(value) || `Expected an object, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value is a `RegExp`.
           *
           * Note: this does not test the value against the regular expression! For that
           * you need to use the `pattern()` refinement.
           */

          function regexp() {
            return define('regexp', value => {
              return value instanceof RegExp;
            });
          }
          function set(Element) {
            return new Struct({
              type: 'set',
              schema: null,

              *entries(value) {
                if (Element && value instanceof Set) {
                  for (const v of value) {
                    yield [v, v, Element];
                  }
                }
              },

              coercer(value) {
                return value instanceof Set ? new Set(value) : value;
              },

              validator(value) {
                return value instanceof Set || `Expected a \`Set\` object, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value is a string.
           */

          function string() {
            return define('string', value => {
              return typeof value === 'string' || `Expected a string, but received: ${print(value)}`;
            });
          }
          /**
           * Ensure that a value is a tuple of a specific length, and that each of its
           * elements is of a specific type.
           */

          function tuple(Structs) {
            const Never = never();
            return new Struct({
              type: 'tuple',
              schema: null,

              *entries(value) {
                if (Array.isArray(value)) {
                  const length = Math.max(Structs.length, value.length);

                  for (let i = 0; i < length; i++) {
                    yield [i, value[i], Structs[i] || Never];
                  }
                }
              },

              validator(value) {
                return Array.isArray(value) || `Expected an array, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value has a set of known properties of specific types.
           *
           * Note: Unrecognized properties are allowed and untouched. This is similar to
           * how TypeScript's structural typing works.
           */

          function type(schema) {
            const keys = Object.keys(schema);
            return new Struct({
              type: 'type',
              schema,

              *entries(value) {
                if (isObject(value)) {
                  for (const k of keys) {
                    yield [k, value[k], schema[k]];
                  }
                }
              },

              validator(value) {
                return isObject(value) || `Expected an object, but received: ${print(value)}`;
              }

            });
          }
          /**
           * Ensure that a value matches one of a set of types.
           */

          function union(Structs) {
            const description = Structs.map(s => s.type).join(' | ');
            return new Struct({
              type: 'union',
              schema: null,

              coercer(value, ctx) {
                const firstMatch = Structs.find(s => {
                  const [e] = s.validate(value, {
                    coerce: true
                  });
                  return !e;
                }) || unknown();
                return firstMatch.coercer(value, ctx);
              },

              validator(value, ctx) {
                const failures = [];

                for (const S of Structs) {
                  const [...tuples] = run(value, S, ctx);
                  const [first] = tuples;

                  if (!first[0]) {
                    return [];
                  } else {
                    for (const [failure] of tuples) {
                      if (failure) {
                        failures.push(failure);
                      }
                    }
                  }
                }

                return [`Expected the value to satisfy a union of \`${description}\`, but received: ${print(value)}`, ...failures];
              }

            });
          }
          /**
           * Ensure that any value passes validation, without widening its type to `any`.
           */

          function unknown() {
            return define('unknown', () => true);
          }

          /**
           * Augment a `Struct` to add an additional coercion step to its input.
           *
           * This allows you to transform input data before validating it, to increase the
           * likelihood that it passes validation—for example for default values, parsing
           * different formats, etc.
           *
           * Note: You must use `create(value, Struct)` on the value to have the coercion
           * take effect! Using simply `assert()` or `is()` will not use coercion.
           */

          function coerce(struct, condition, coercer) {
            return new Struct({
              ...struct,
              coercer: (value, ctx) => {
                return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);
              }
            });
          }
          /**
           * Augment a struct to replace `undefined` values with a default.
           *
           * Note: You must use `create(value, Struct)` on the value to have the coercion
           * take effect! Using simply `assert()` or `is()` will not use coercion.
           */

          function defaulted(struct, fallback, options) {
            if (options === void 0) {
              options = {};
            }

            return coerce(struct, unknown(), x => {
              const f = typeof fallback === 'function' ? fallback() : fallback;

              if (x === undefined) {
                return f;
              }

              if (!options.strict && isPlainObject(x) && isPlainObject(f)) {
                const ret = {
                  ...x
                };
                let changed = false;

                for (const key in f) {
                  if (ret[key] === undefined) {
                    ret[key] = f[key];
                    changed = true;
                  }
                }

                if (changed) {
                  return ret;
                }
              }

              return x;
            });
          }
          /**
           * Augment a struct to trim string inputs.
           *
           * Note: You must use `create(value, Struct)` on the value to have the coercion
           * take effect! Using simply `assert()` or `is()` will not use coercion.
           */

          function trimmed(struct) {
            return coerce(struct, string(), x => x.trim());
          }

          /**
           * Ensure that a string, array, map, or set is empty.
           */

          function empty(struct) {
            return refine(struct, 'empty', value => {
              const size = getSize(value);
              return size === 0 || `Expected an empty ${struct.type} but received one with a size of \`${size}\``;
            });
          }

          function getSize(value) {
            if (value instanceof Map || value instanceof Set) {
              return value.size;
            } else {
              return value.length;
            }
          }
          /**
           * Ensure that a number or date is below a threshold.
           */


          function max(struct, threshold, options) {
            if (options === void 0) {
              options = {};
            }

            const {
              exclusive
            } = options;
            return refine(struct, 'max', value => {
              return exclusive ? value < threshold : value <= threshold || `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \`${value}\``;
            });
          }
          /**
           * Ensure that a number or date is above a threshold.
           */

          function min(struct, threshold, options) {
            if (options === void 0) {
              options = {};
            }

            const {
              exclusive
            } = options;
            return refine(struct, 'min', value => {
              return exclusive ? value > threshold : value >= threshold || `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \`${value}\``;
            });
          }
          /**
           * Ensure that a string, array, map or set is not empty.
           */

          function nonempty(struct) {
            return refine(struct, 'nonempty', value => {
              const size = getSize(value);
              return size > 0 || `Expected a nonempty ${struct.type} but received an empty one`;
            });
          }
          /**
           * Ensure that a string matches a regular expression.
           */

          function pattern(struct, regexp) {
            return refine(struct, 'pattern', value => {
              return regexp.test(value) || `Expected a ${struct.type} matching \`/${regexp.source}/\` but received "${value}"`;
            });
          }
          /**
           * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.
           */

          function size(struct, min, max) {
            if (max === void 0) {
              max = min;
            }

            const expected = `Expected a ${struct.type}`;
            const of = min === max ? `of \`${min}\`` : `between \`${min}\` and \`${max}\``;
            return refine(struct, 'size', value => {
              if (typeof value === 'number' || value instanceof Date) {
                return min <= value && value <= max || `${expected} ${of} but received \`${value}\``;
              } else if (value instanceof Map || value instanceof Set) {
                const {
                  size
                } = value;
                return min <= size && size <= max || `${expected} with a size ${of} but received one with a size of \`${size}\``;
              } else {
                const {
                  length
                } = value;
                return min <= length && length <= max || `${expected} with a length ${of} but received one with a length of \`${length}\``;
              }
            });
          }
          /**
           * Augment a `Struct` to add an additional refinement to the validation.
           *
           * The refiner function is guaranteed to receive a value of the struct's type,
           * because the struct's existing validation will already have passed. This
           * allows you to layer additional validation on top of existing structs.
           */

          function refine(struct, name, refiner) {
            return new Struct({
              ...struct,

              *refiner(value, ctx) {
                yield* struct.refiner(value, ctx);
                const result = refiner(value, ctx);
                const failures = toFailures(result, ctx, struct, value);

                for (const failure of failures) {
                  yield {
                    ...failure,
                    refinement: name
                  };
                }
              }

            });
          }

          exports.Struct = Struct;
          exports.StructError = StructError;
          exports.any = any;
          exports.array = array;
          exports.assert = assert;
          exports.assign = assign;
          exports.bigint = bigint;
          exports.boolean = boolean;
          exports.coerce = coerce;
          exports.create = create;
          exports.date = date;
          exports.defaulted = defaulted;
          exports.define = define;
          exports.deprecated = deprecated;
          exports.dynamic = dynamic;
          exports.empty = empty;
          exports.enums = enums;
          exports.func = func;
          exports.instance = instance;
          exports.integer = integer;
          exports.intersection = intersection;
          exports.is = is;
          exports.lazy = lazy;
          exports.literal = literal;
          exports.map = map;
          exports.mask = mask;
          exports.max = max;
          exports.min = min;
          exports.never = never;
          exports.nonempty = nonempty;
          exports.nullable = nullable;
          exports.number = number;
          exports.object = object;
          exports.omit = omit;
          exports.optional = optional;
          exports.partial = partial;
          exports.pattern = pattern;
          exports.pick = pick;
          exports.record = record;
          exports.refine = refine;
          exports.regexp = regexp;
          exports.set = set;
          exports.size = size;
          exports.string = string;
          exports.struct = struct;
          exports.trimmed = trimmed;
          exports.tuple = tuple;
          exports.type = type;
          exports.union = union;
          exports.unknown = unknown;
          exports.validate = validate;
          //# sourceMappingURL=index.cjs.map

        };
      };
    }
  }, { package: "@metamask/snap-utils>superstruct", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\swappable-obj-proxy\\src\\createEventEmitterProxy.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\swappable-obj-proxy\src\createEventEmitterProxy.js
        return function (require, module, exports) {
          const filterNoop = () => true
          const internalEvents = ['newListener', 'removeListener']
          const externalEventFilter = (name) => !internalEvents.includes(name)

          module.exports = function createEventEmitterProxy(initialTarget, opts) {
            // parse options
            opts = opts || {}
            let eventFilter = opts.eventFilter || filterNoop
            if (eventFilter === 'skipInternal') eventFilter = externalEventFilter
            if (typeof eventFilter !== 'function') throw new Error('createEventEmitterProxy - Invalid eventFilter')

            let target = initialTarget

            const proxy = new Proxy({}, {
              get: (_, name) => {
                // override `setTarget` access
                if (name === 'setTarget') return setTarget
                return target[name]
              },
              set: (_, name, value) => {
                // allow `setTarget` overrides
                if (name === 'setTarget') {
                  setTarget = value
                  return true
                }
                target[name] = value
                return true
              },
            })

            return proxy

            function setTarget(newTarget) {
              const oldTarget = target
              target = newTarget
              // migrate listeners
              oldTarget.eventNames().filter(eventFilter).forEach((name) => {
                getRawListeners(oldTarget, name).forEach(handler => newTarget.on(name, handler))
              })
              // remove old
              oldTarget.removeAllListeners()
            }
          }

          function getRawListeners(eventEmitter, name) {
            // prefer native
            if (eventEmitter.rawListeners) return eventEmitter.rawListeners(name)
            // fallback to lookup against internal object
            let events = eventEmitter._events[name] || []
            // ensure array
            if (!Array.isArray(events)) events = [events]
            // return copy
            return events.slice()
          }

        };
      };
    }
  }, { package: "swappable-obj-proxy", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\swappable-obj-proxy\\src\\createSwappableProxy.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\swappable-obj-proxy\src\createSwappableProxy.js
        return function (require, module, exports) {

          module.exports = function createSwappableProxy(initialTarget) {
            let target = initialTarget

            const proxy = new Proxy({}, {
              get: (_, name) => {
                // override `setTarget` access
                if (name === 'setTarget') return setTarget
                return target[name]
              },
              set: (_, name, value) => {
                // allow `setTarget` overrides
                if (name === 'setTarget') {
                  setTarget = value
                  return true
                }
                target[name] = value
                return true
              },
            })

            return proxy

            function setTarget(newTarget) {
              target = newTarget
            }
          }

        };
      };
    }
  }, { package: "swappable-obj-proxy", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\swappable-obj-proxy\\src\\index.js", { "./createEventEmitterProxy": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\swappable-obj-proxy\\src\\createEventEmitterProxy.js", "./createSwappableProxy": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\swappable-obj-proxy\\src\\createSwappableProxy.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\swappable-obj-proxy\src\index.js
        return function (require, module, exports) {
          const createSwappableProxy = require('./createSwappableProxy')
          const createEventEmitterProxy = require('./createEventEmitterProxy')

          module.exports = {
            createSwappableProxy,
            createEventEmitterProxy,
          }

        };
      };
    }
  }, { package: "swappable-obj-proxy", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\through\\index.js", { "_process": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\process\\browser.js", "stream": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\stream-browserify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\through\index.js
        return function (require, module, exports) {
          (function (process) {
            (function () {
              var Stream = require('stream')

              // through
              //
              // a stream that does nothing but re-emit the input.
              // useful for aggregating a series of changing but not ending streams into one stream)

              exports = module.exports = through
              through.through = through

              //create a readable writable stream.

              function through(write, end, opts) {
                write = write || function (data) { this.queue(data) }
                end = end || function () { this.queue(null) }

                var ended = false, destroyed = false, buffer = [], _ended = false
                var stream = new Stream()
                stream.readable = stream.writable = true
                stream.paused = false

                //  stream.autoPause   = !(opts && opts.autoPause   === false)
                stream.autoDestroy = !(opts && opts.autoDestroy === false)

                stream.write = function (data) {
                  write.call(this, data)
                  return !stream.paused
                }

                function drain() {
                  while (buffer.length && !stream.paused) {
                    var data = buffer.shift()
                    if (null === data)
                      return stream.emit('end')
                    else
                      stream.emit('data', data)
                  }
                }

                stream.queue = stream.push = function (data) {
                  //    console.error(ended)
                  if (_ended) return stream
                  if (data === null) _ended = true
                  buffer.push(data)
                  drain()
                  return stream
                }

                //this will be registered as the first 'end' listener
                //must call destroy next tick, to make sure we're after any
                //stream piped from here.
                //this is only a problem if end is not emitted synchronously.
                //a nicer way to do this is to make sure this is the last listener for 'end'

                stream.on('end', function () {
                  stream.readable = false
                  if (!stream.writable && stream.autoDestroy)
                    process.nextTick(function () {
                      stream.destroy()
                    })
                })

                function _end() {
                  stream.writable = false
                  end.call(stream)
                  if (!stream.readable && stream.autoDestroy)
                    stream.destroy()
                }

                stream.end = function (data) {
                  if (ended) return
                  ended = true
                  if (arguments.length) stream.write(data)
                  _end() // will emit or queue
                  return stream
                }

                stream.destroy = function () {
                  if (destroyed) return
                  destroyed = true
                  ended = true
                  buffer.length = 0
                  stream.writable = stream.readable = false
                  stream.emit('close')
                  return stream
                }

                stream.pause = function () {
                  if (stream.paused) return
                  stream.paused = true
                  return stream
                }

                stream.resume = function () {
                  if (stream.paused) {
                    stream.paused = false
                    stream.emit('resume')
                  }
                  drain()
                  //may have become paused again,
                  //as drain emits 'data'.
                  if (!stream.paused)
                    stream.emit('drain')
                  return stream
                }
                return stream
              }


            }).call(this)
          }).call(this, require('_process'))

        };
      };
    }
  }, { package: "debounce-stream>through", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\to-data-view\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\to-data-view\index.js
        return function (require, module, exports) {
          module.exports = function toDataView(data) {
            if (data instanceof Int8Array || data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
              return new DataView(data.buffer, data.byteOffset, data.byteLength)
            }

            if (data instanceof ArrayBuffer) {
              return new DataView(data)
            }

            throw new TypeError('Expected `data` to be an ArrayBuffer, Buffer, Int8Array, Uint8Array or Uint8ClampedArray')
          }

        };
      };
    }
  }, { package: "base32-encode>to-data-view", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\blockchain.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\blockchain.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.FIAT_RATES_UPDATE = exports.NOTIFICATION = exports.BLOCK = exports.CONNECT = exports.ERROR = void 0;
          // blockchain events
          var ERROR = 'blockchain-error';
          exports.ERROR = ERROR;
          var CONNECT = 'blockchain-connect';
          exports.CONNECT = CONNECT;
          var BLOCK = 'blockchain-block';
          exports.BLOCK = BLOCK;
          var NOTIFICATION = 'blockchain-notification';
          exports.NOTIFICATION = NOTIFICATION;
          var FIAT_RATES_UPDATE = 'fiat-rates-update';
          exports.FIAT_RATES_UPDATE = FIAT_RATES_UPDATE;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\cardano.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\cardano.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.POOL_RELAY_TYPE = exports.CERTIFICATE_TYPE = exports.ADDRESS_TYPE = exports.NETWORK_IDS = exports.PROTOCOL_MAGICS = void 0;
          var PROTOCOL_MAGICS = Object.freeze({
            mainnet: 764824073,
            testnet: 42
          });
          exports.PROTOCOL_MAGICS = PROTOCOL_MAGICS;
          var NETWORK_IDS = Object.freeze({
            mainnet: 1,
            testnet: 0
          }); // constants below are deprecated
          // use `CardanoAddressType`, `CardanoCertificateType` and `CardanoPoolRelayType` from protobuf instead

          exports.NETWORK_IDS = NETWORK_IDS;
          var ADDRESS_TYPE = Object.freeze({
            Base: 0,
            Pointer: 4,
            Enterprise: 6,
            Byron: 8,
            Reward: 14
          });
          exports.ADDRESS_TYPE = ADDRESS_TYPE;
          var CERTIFICATE_TYPE = Object.freeze({
            StakeRegistration: 0,
            StakeDeregistration: 1,
            StakeDelegation: 2,
            StakePoolRegistration: 3
          });
          exports.CERTIFICATE_TYPE = CERTIFICATE_TYPE;
          var POOL_RELAY_TYPE = Object.freeze({
            SingleHostIp: 0,
            SingleHostName: 1,
            MultipleHostName: 2
          });
          exports.POOL_RELAY_TYPE = POOL_RELAY_TYPE;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\device.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\device.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.WAIT_FOR_SELECTION = exports.WORD = exports.PASSPHRASE_ON_DEVICE = exports.PASSPHRASE = exports.PIN = exports.BUTTON = exports.LOADING = exports.USED_ELSEWHERE = exports.RELEASED = exports.ACQUIRED = exports.RELEASE = exports.ACQUIRE = exports.CHANGED = exports.DISCONNECT = exports.CONNECT_UNACQUIRED = exports.CONNECT = void 0;
          // device list events
          var CONNECT = 'device-connect';
          exports.CONNECT = CONNECT;
          var CONNECT_UNACQUIRED = 'device-connect_unacquired';
          exports.CONNECT_UNACQUIRED = CONNECT_UNACQUIRED;
          var DISCONNECT = 'device-disconnect';
          exports.DISCONNECT = DISCONNECT;
          var CHANGED = 'device-changed';
          exports.CHANGED = CHANGED;
          var ACQUIRE = 'device-acquire';
          exports.ACQUIRE = ACQUIRE;
          var RELEASE = 'device-release';
          exports.RELEASE = RELEASE;
          var ACQUIRED = 'device-acquired';
          exports.ACQUIRED = ACQUIRED;
          var RELEASED = 'device-released';
          exports.RELEASED = RELEASED;
          var USED_ELSEWHERE = 'device-used_elsewhere';
          exports.USED_ELSEWHERE = USED_ELSEWHERE;
          var LOADING = 'device-loading'; // trezor-link events in protobuf format

          exports.LOADING = LOADING;
          var BUTTON = 'button';
          exports.BUTTON = BUTTON;
          var PIN = 'pin';
          exports.PIN = PIN;
          var PASSPHRASE = 'passphrase';
          exports.PASSPHRASE = PASSPHRASE;
          var PASSPHRASE_ON_DEVICE = 'passphrase_on_device';
          exports.PASSPHRASE_ON_DEVICE = PASSPHRASE_ON_DEVICE;
          var WORD = 'word'; // custom

          exports.WORD = WORD;
          var WAIT_FOR_SELECTION = 'device-wait_for_selection';
          exports.WAIT_FOR_SELECTION = WAIT_FOR_SELECTION;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\errors.js", { "@babel/runtime/helpers/inheritsLoose": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\inheritsLoose.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/helpers/wrapNativeSuper": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\wrapNativeSuper.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\errors.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.LIBUSB_ERROR_MESSAGE = exports.WEBUSB_ERROR_MESSAGE = exports.INVALID_PIN_ERROR_MESSAGE = exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;

          var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

          var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

          var ERROR_CODES = {
            Init_NotInitialized: 'TrezorConnect not yet initialized',
            // race condition: call on not initialized Core (usually hot-reloading)
            Init_AlreadyInitialized: 'TrezorConnect has been already initialized',
            // thrown by .init called multiple times
            Init_IframeBlocked: 'Iframe blocked',
            // iframe injection blocked (ad-blocker)
            Init_IframeTimeout: 'Iframe timeout',
            // iframe didn't load in specified time
            Init_ManifestMissing: 'Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md',
            // manifest is not set
            Popup_ConnectionMissing: 'Unable to establish connection with iframe',
            // thrown by popup
            Transport_Missing: 'Transport is missing',
            // no transport available
            Transport_InvalidProtobuf: '',
            // generic error from transport layer (trezor-link)
            Method_InvalidPackage: 'This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead',
            // thrown by node and react-native env while using regular 'web' package
            Method_InvalidParameter: '',
            // replaced by generic text
            Method_NotAllowed: 'Method not allowed for this configuration',
            // example: device management in popup mode
            Method_PermissionsNotGranted: 'Permissions not granted',
            // permission/confirmation not granted in popup
            Method_Cancel: 'Cancelled',
            // permission/confirmation not granted in popup OR .cancel() custom error
            Method_Interrupted: 'Popup closed',
            // interruption: popup closed
            Method_UnknownCoin: 'Coin not found',
            // coin definition not found
            Method_AddressNotMatch: 'Addresses do not match',
            // thrown by all getAddress methods with custom UI validation
            Method_FirmwareUpdate_DownloadFailed: 'Failed to download firmware binary',
            // thrown by FirmwareUpdate method
            Method_CustomMessage_Callback: 'Parameter "callback" is not a function',
            // thrown by CustomMessage method
            Method_Discovery_BundleException: '',
            // thrown by getAccountInfo method
            Method_Override: 'override',
            // inner "error", it's more like a interruption
            Method_NoResponse: 'Call resolved without response',
            // thrown by npm index(es), call to Core resolved without response, should not happen
            Backend_NotSupported: 'BlockchainLink settings not found in coins.json',
            // thrown by methods which using backends, blockchainLink not defined for this coin
            Backend_WorkerMissing: '',
            // thrown by BlockchainLink class, worker not specified
            Backend_Disconnected: 'Backend disconnected',
            // thrown by BlockchainLink class
            Backend_Invalid: 'Invalid backend',
            // thrown by BlockchainLink class, invalid backend (ie: backend for wrong coin set)
            Backend_Error: '',
            // thrown by BlockchainLink class, generic message from 'blockchain-link'
            Runtime: '',
            // thrown from several places, this shouldn't ever happen tho
            Device_NotFound: 'Device not found',
            Device_InitializeFailed: '',
            // generic error from firmware while calling "Initialize" message
            Device_FwException: '',
            // generic FirmwareException type
            Device_ModeException: '',
            // generic Device.UnexpectedMode type
            Device_Disconnected: 'Device disconnected',
            // device disconnected during call
            Device_UsedElsewhere: 'Device is used in another window',
            // interruption: current session toked by other application
            Device_InvalidState: 'Passphrase is incorrect',
            // authorization error (device state comparison)
            Device_CallInProgress: 'Device call in progress' // thrown when trying to make another call while current is still running

          };
          exports.ERROR_CODES = ERROR_CODES;

          var TrezorError = /*#__PURE__*/function (_Error) {
            (0, _inheritsLoose2["default"])(TrezorError, _Error);

            function TrezorError(code, message) {
              var _this;

              _this = _Error.call(this, message) || this;
              _this.code = code;
              _this.message = message;
              return _this;
            }

            return TrezorError;
          }( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));

          exports.TrezorError = TrezorError;

          var TypedError = function TypedError(id, message) {
            return new TrezorError(id, message || ERROR_CODES[id]);
          }; // a slight hack
          // this error string is hard-coded
          // in both bridge and extension


          exports.TypedError = TypedError;
          var WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = 'wrong previous session';
          exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = WRONG_PREVIOUS_SESSION_ERROR_MESSAGE;
          var INVALID_PIN_ERROR_MESSAGE = 'PIN invalid';
          exports.INVALID_PIN_ERROR_MESSAGE = INVALID_PIN_ERROR_MESSAGE;
          var WEBUSB_ERROR_MESSAGE = 'NetworkError: Unable to claim interface.'; // trezord error prefix.
          // user has insufficient permissions. may occur in Linux (missing udev rules), Windows and MacOS.

          exports.WEBUSB_ERROR_MESSAGE = WEBUSB_ERROR_MESSAGE;
          var LIBUSB_ERROR_MESSAGE = 'LIBUSB_ERROR';
          exports.LIBUSB_ERROR_MESSAGE = LIBUSB_ERROR_MESSAGE;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\iframe.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\iframe.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.CALL = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;
          // Message called from iframe.html inline script before "window.onload" event. This is first message from iframe to window.opener.
          var BOOTSTRAP = 'iframe-bootstrap'; // Message from iframe.js to window.opener, called after "window.onload" event. This is second message from iframe to window.opener.

          exports.BOOTSTRAP = BOOTSTRAP;
          var LOADED = 'iframe-loaded'; // Message from window.opener to iframe.js

          exports.LOADED = LOADED;
          var INIT = 'iframe-init'; // Error message from iframe.js to window.opener. Could be thrown during iframe initialization process

          exports.INIT = INIT;
          var ERROR = 'iframe-error'; // Message from window.opener to iframe. Call method

          exports.ERROR = ERROR;
          var CALL = 'iframe-call';
          exports.CALL = CALL;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", { "./blockchain": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\blockchain.js", "./cardano": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\cardano.js", "./device": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\device.js", "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\errors.js", "./iframe": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\iframe.js", "./network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\network.js", "./popup": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\popup.js", "./transport": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\transport.js", "./ui": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\ui.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\index.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.CARDANO = exports.UI = exports.TRANSPORT = exports.POPUP = exports.NETWORK = exports.IFRAME = exports.ERRORS = exports.DEVICE = exports.BLOCKCHAIN = exports.BLOCKCHAIN_EVENT = exports.RESPONSE_EVENT = exports.TRANSPORT_EVENT = exports.DEVICE_EVENT = exports.UI_EVENT = exports.CORE_EVENT = void 0;

          var BLOCKCHAIN = _interopRequireWildcard(require("./blockchain"));

          exports.BLOCKCHAIN = BLOCKCHAIN;

          var DEVICE = _interopRequireWildcard(require("./device"));

          exports.DEVICE = DEVICE;

          var ERRORS = _interopRequireWildcard(require("./errors"));

          exports.ERRORS = ERRORS;

          var IFRAME = _interopRequireWildcard(require("./iframe"));

          exports.IFRAME = IFRAME;

          var NETWORK = _interopRequireWildcard(require("./network"));

          exports.NETWORK = NETWORK;

          var POPUP = _interopRequireWildcard(require("./popup"));

          exports.POPUP = POPUP;

          var TRANSPORT = _interopRequireWildcard(require("./transport"));

          exports.TRANSPORT = TRANSPORT;

          var UI = _interopRequireWildcard(require("./ui"));

          exports.UI = UI;

          var CARDANO = _interopRequireWildcard(require("./cardano"));

          exports.CARDANO = CARDANO;

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          var CORE_EVENT = 'CORE_EVENT';
          exports.CORE_EVENT = CORE_EVENT;
          var UI_EVENT = 'UI_EVENT';
          exports.UI_EVENT = UI_EVENT;
          var DEVICE_EVENT = 'DEVICE_EVENT';
          exports.DEVICE_EVENT = DEVICE_EVENT;
          var TRANSPORT_EVENT = 'TRANSPORT_EVENT';
          exports.TRANSPORT_EVENT = TRANSPORT_EVENT;
          var RESPONSE_EVENT = 'RESPONSE_EVENT';
          exports.RESPONSE_EVENT = RESPONSE_EVENT;
          var BLOCKCHAIN_EVENT = 'BLOCKCHAIN_EVENT';
          exports.BLOCKCHAIN_EVENT = BLOCKCHAIN_EVENT;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\network.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\network.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.TYPES = void 0;
          var TYPES = Object.freeze({
            bitcoin: 'Bitcoin',
            ethereum: 'Ethereum',
            eos: 'Eos',
            nem: 'NEM',
            stellar: 'Stellar',
            cardano: 'Cardano',
            ripple: 'Ripple',
            tezos: 'Tezors',
            binance: 'Binance'
          });
          exports.TYPES = TYPES;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\popup.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\popup.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.CLOSE_WINDOW = exports.CANCEL_POPUP_REQUEST = exports.CLOSED = exports.HANDSHAKE = exports.EXTENSION_USB_PERMISSIONS = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;
          // Message called from popup.html inline script before "window.onload" event. This is first message from popup to window.opener.
          var BOOTSTRAP = 'popup-bootstrap'; // Message from popup.js to window.opener, called after "window.onload" event. This is second message from popup to window.opener.

          exports.BOOTSTRAP = BOOTSTRAP;
          var LOADED = 'popup-loaded'; // Message from window.opener to popup.js. Send settings to popup. This is first message from window.opener to popup.

          exports.LOADED = LOADED;
          var INIT = 'popup-init'; // Error message from popup to window.opener. Could be thrown during popup initialization process (POPUP.INIT)

          exports.INIT = INIT;
          var ERROR = 'popup-error'; // Message to webextensions, opens "trezor-usb-permission.html" within webextension

          exports.ERROR = ERROR;
          var EXTENSION_USB_PERMISSIONS = 'open-usb-permissions'; // Message called from both [popup > iframe] then [iframe > popup] in this exact order.
          // Firstly popup call iframe to resolve popup promise in Core
          // Then iframe reacts to POPUP.HANDSHAKE message and sends ConnectSettings, transport information and requested method details back to popup

          exports.EXTENSION_USB_PERMISSIONS = EXTENSION_USB_PERMISSIONS;
          var HANDSHAKE = 'popup-handshake'; // Event emitted from PopupManager at the end of popup closing process.
          // Sent from popup thru window.opener to an iframe because message channel between popup and iframe is no longer available

          exports.HANDSHAKE = HANDSHAKE;
          var CLOSED = 'popup-closed'; // Message called from iframe to popup, it means that popup will not be needed (example: Blockchain methods are not using popup at all)
          // This will close active popup window and/or clear opening process in PopupManager (maybe popup wasn't opened yet)

          exports.CLOSED = CLOSED;
          var CANCEL_POPUP_REQUEST = 'ui-cancel-popup-request'; // Message called from inline element in popup.html (window.closeWindow), this is used only with webextensions to properly handle popup close event

          exports.CANCEL_POPUP_REQUEST = CANCEL_POPUP_REQUEST;
          var CLOSE_WINDOW = 'window.close';
          exports.CLOSE_WINDOW = CLOSE_WINDOW;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\transport.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\transport.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.START_PENDING = exports.DISABLE_WEBUSB = exports.REQUEST = exports.STREAM = exports.UPDATE = exports.ERROR = exports.START = void 0;
          var START = 'transport-start';
          exports.START = START;
          var ERROR = 'transport-error';
          exports.ERROR = ERROR;
          var UPDATE = 'transport-update';
          exports.UPDATE = UPDATE;
          var STREAM = 'transport-stream';
          exports.STREAM = STREAM;
          var REQUEST = 'transport-request_device';
          exports.REQUEST = REQUEST;
          var DISABLE_WEBUSB = 'transport-disable_webusb';
          exports.DISABLE_WEBUSB = DISABLE_WEBUSB;
          var START_PENDING = 'transport-start_pending';
          exports.START_PENDING = START_PENDING;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\ui.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\constants\ui.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.IFRAME_FAILURE = exports.ADDRESS_VALIDATION = exports.BUNDLE_PROGRESS = exports.LOGIN_CHALLENGE_RESPONSE = exports.LOGIN_CHALLENGE_REQUEST = exports.CUSTOM_MESSAGE_RESPONSE = exports.CUSTOM_MESSAGE_REQUEST = exports.CHANGE_SETTINGS = exports.RECEIVE_WORD = exports.RECEIVE_FEE = exports.RECEIVE_ACCOUNT = exports.CHANGE_ACCOUNT = exports.RECEIVE_DEVICE = exports.RECEIVE_PASSPHRASE = exports.RECEIVE_PIN = exports.RECEIVE_CONFIRMATION = exports.RECEIVE_PERMISSION = exports.REQUEST_WORD = exports.REQUEST_BUTTON = exports.INSUFFICIENT_FUNDS = exports.UPDATE_CUSTOM_FEE = exports.SELECT_FEE = exports.SELECT_ACCOUNT = exports.SELECT_DEVICE = exports.SET_OPERATION = exports.LOADING = exports.CONNECT = exports.INVALID_PASSPHRASE_ACTION = exports.INVALID_PASSPHRASE = exports.REQUEST_PASSPHRASE_ON_DEVICE = exports.REQUEST_PASSPHRASE = exports.INVALID_PIN = exports.REQUEST_PIN = exports.REQUEST_CONFIRMATION = exports.REQUEST_PERMISSION = exports.CLOSE_UI_WINDOW = exports.REQUEST_UI_WINDOW = exports.DEVICE_NEEDS_BACKUP = exports.FIRMWARE_PROGRESS = exports.FIRMWARE_NOT_INSTALLED = exports.FIRMWARE_NOT_COMPATIBLE = exports.FIRMWARE_NOT_SUPPORTED = exports.FIRMWARE_OUTDATED = exports.FIRMWARE_OLD = exports.SEEDLESS = exports.INITIALIZE = exports.REQUIRE_MODE = exports.NOT_IN_BOOTLOADER = exports.BOOTLOADER = exports.TRANSPORT = void 0;
          var TRANSPORT = 'ui-no_transport';
          exports.TRANSPORT = TRANSPORT;
          var BOOTLOADER = 'ui-device_bootloader_mode';
          exports.BOOTLOADER = BOOTLOADER;
          var NOT_IN_BOOTLOADER = 'ui-device_not_in_bootloader_mode';
          exports.NOT_IN_BOOTLOADER = NOT_IN_BOOTLOADER;
          var REQUIRE_MODE = 'ui-device_require_mode';
          exports.REQUIRE_MODE = REQUIRE_MODE;
          var INITIALIZE = 'ui-device_not_initialized';
          exports.INITIALIZE = INITIALIZE;
          var SEEDLESS = 'ui-device_seedless';
          exports.SEEDLESS = SEEDLESS;
          var FIRMWARE_OLD = 'ui-device_firmware_old';
          exports.FIRMWARE_OLD = FIRMWARE_OLD;
          var FIRMWARE_OUTDATED = 'ui-device_firmware_outdated';
          exports.FIRMWARE_OUTDATED = FIRMWARE_OUTDATED;
          var FIRMWARE_NOT_SUPPORTED = 'ui-device_firmware_unsupported';
          exports.FIRMWARE_NOT_SUPPORTED = FIRMWARE_NOT_SUPPORTED;
          var FIRMWARE_NOT_COMPATIBLE = 'ui-device_firmware_not_compatible';
          exports.FIRMWARE_NOT_COMPATIBLE = FIRMWARE_NOT_COMPATIBLE;
          var FIRMWARE_NOT_INSTALLED = 'ui-device_firmware_not_installed';
          exports.FIRMWARE_NOT_INSTALLED = FIRMWARE_NOT_INSTALLED;
          var FIRMWARE_PROGRESS = 'ui-firmware-progress';
          exports.FIRMWARE_PROGRESS = FIRMWARE_PROGRESS;
          var DEVICE_NEEDS_BACKUP = 'ui-device_needs_backup';
          exports.DEVICE_NEEDS_BACKUP = DEVICE_NEEDS_BACKUP;
          var REQUEST_UI_WINDOW = 'ui-request_window';
          exports.REQUEST_UI_WINDOW = REQUEST_UI_WINDOW;
          var CLOSE_UI_WINDOW = 'ui-close_window';
          exports.CLOSE_UI_WINDOW = CLOSE_UI_WINDOW;
          var REQUEST_PERMISSION = 'ui-request_permission';
          exports.REQUEST_PERMISSION = REQUEST_PERMISSION;
          var REQUEST_CONFIRMATION = 'ui-request_confirmation';
          exports.REQUEST_CONFIRMATION = REQUEST_CONFIRMATION;
          var REQUEST_PIN = 'ui-request_pin';
          exports.REQUEST_PIN = REQUEST_PIN;
          var INVALID_PIN = 'ui-invalid_pin';
          exports.INVALID_PIN = INVALID_PIN;
          var REQUEST_PASSPHRASE = 'ui-request_passphrase';
          exports.REQUEST_PASSPHRASE = REQUEST_PASSPHRASE;
          var REQUEST_PASSPHRASE_ON_DEVICE = 'ui-request_passphrase_on_device';
          exports.REQUEST_PASSPHRASE_ON_DEVICE = REQUEST_PASSPHRASE_ON_DEVICE;
          var INVALID_PASSPHRASE = 'ui-invalid_passphrase';
          exports.INVALID_PASSPHRASE = INVALID_PASSPHRASE;
          var INVALID_PASSPHRASE_ACTION = 'ui-invalid_passphrase_action';
          exports.INVALID_PASSPHRASE_ACTION = INVALID_PASSPHRASE_ACTION;
          var CONNECT = 'ui-connect';
          exports.CONNECT = CONNECT;
          var LOADING = 'ui-loading';
          exports.LOADING = LOADING;
          var SET_OPERATION = 'ui-set_operation';
          exports.SET_OPERATION = SET_OPERATION;
          var SELECT_DEVICE = 'ui-select_device';
          exports.SELECT_DEVICE = SELECT_DEVICE;
          var SELECT_ACCOUNT = 'ui-select_account';
          exports.SELECT_ACCOUNT = SELECT_ACCOUNT;
          var SELECT_FEE = 'ui-select_fee';
          exports.SELECT_FEE = SELECT_FEE;
          var UPDATE_CUSTOM_FEE = 'ui-update_custom_fee';
          exports.UPDATE_CUSTOM_FEE = UPDATE_CUSTOM_FEE;
          var INSUFFICIENT_FUNDS = 'ui-insufficient_funds';
          exports.INSUFFICIENT_FUNDS = INSUFFICIENT_FUNDS;
          var REQUEST_BUTTON = 'ui-button';
          exports.REQUEST_BUTTON = REQUEST_BUTTON;
          var REQUEST_WORD = 'ui-request_word';
          exports.REQUEST_WORD = REQUEST_WORD;
          var RECEIVE_PERMISSION = 'ui-receive_permission';
          exports.RECEIVE_PERMISSION = RECEIVE_PERMISSION;
          var RECEIVE_CONFIRMATION = 'ui-receive_confirmation';
          exports.RECEIVE_CONFIRMATION = RECEIVE_CONFIRMATION;
          var RECEIVE_PIN = 'ui-receive_pin';
          exports.RECEIVE_PIN = RECEIVE_PIN;
          var RECEIVE_PASSPHRASE = 'ui-receive_passphrase';
          exports.RECEIVE_PASSPHRASE = RECEIVE_PASSPHRASE;
          var RECEIVE_DEVICE = 'ui-receive_device';
          exports.RECEIVE_DEVICE = RECEIVE_DEVICE;
          var CHANGE_ACCOUNT = 'ui-change_account';
          exports.CHANGE_ACCOUNT = CHANGE_ACCOUNT;
          var RECEIVE_ACCOUNT = 'ui-receive_account';
          exports.RECEIVE_ACCOUNT = RECEIVE_ACCOUNT;
          var RECEIVE_FEE = 'ui-receive_fee';
          exports.RECEIVE_FEE = RECEIVE_FEE;
          var RECEIVE_WORD = 'ui-receive_word';
          exports.RECEIVE_WORD = RECEIVE_WORD;
          var CHANGE_SETTINGS = 'ui-change_settings';
          exports.CHANGE_SETTINGS = CHANGE_SETTINGS;
          var CUSTOM_MESSAGE_REQUEST = 'ui-custom_request';
          exports.CUSTOM_MESSAGE_REQUEST = CUSTOM_MESSAGE_REQUEST;
          var CUSTOM_MESSAGE_RESPONSE = 'ui-custom_response';
          exports.CUSTOM_MESSAGE_RESPONSE = CUSTOM_MESSAGE_RESPONSE;
          var LOGIN_CHALLENGE_REQUEST = 'ui-login_challenge_request';
          exports.LOGIN_CHALLENGE_REQUEST = LOGIN_CHALLENGE_REQUEST;
          var LOGIN_CHALLENGE_RESPONSE = 'ui-login_challenge_response';
          exports.LOGIN_CHALLENGE_RESPONSE = LOGIN_CHALLENGE_RESPONSE;
          var BUNDLE_PROGRESS = 'ui-bundle_progress';
          exports.BUNDLE_PROGRESS = BUNDLE_PROGRESS;
          var ADDRESS_VALIDATION = 'ui-address_validation';
          exports.ADDRESS_VALIDATION = ADDRESS_VALIDATION;
          var IFRAME_FAILURE = 'ui-iframe_failure';
          exports.IFRAME_FAILURE = IFRAME_FAILURE;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\data\\ConnectSettings.js", { "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\data\ConnectSettings.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.parse = exports.corsValidator = exports.getEnv = exports.DEFAULT_PRIORITY = void 0;

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          /*
           * Initial settings for connect.
           * It could be changed by passing values into TrezorConnect.init(...) method
           */
          var VERSION = '8.2.6';
          var versionN = VERSION.split('.').map(function (s) {
            return parseInt(s, 10);
          }); // const DIRECTORY = `${ versionN[0] }${ (versionN[1] > 0 ? `.${versionN[1]}` : '') }/`;

          var DIRECTORY = versionN[0] + "/";
          var DEFAULT_DOMAIN = "https://connect.trezor.io/" + DIRECTORY;
          var DEFAULT_PRIORITY = 2;
          exports.DEFAULT_PRIORITY = DEFAULT_PRIORITY;
          var initialSettings = {
            configSrc: './data/config.json',
            // constant
            version: VERSION,
            // constant
            debug: false,
            priority: DEFAULT_PRIORITY,
            trustedHost: false,
            connectSrc: DEFAULT_DOMAIN,
            iframeSrc: DEFAULT_DOMAIN + "iframe.html",
            popup: true,
            popupSrc: DEFAULT_DOMAIN + "popup.html",
            webusbSrc: DEFAULT_DOMAIN + "webusb.html",
            transportReconnect: false,
            webusb: true,
            pendingTransportEvent: true,
            supportedBrowser: typeof navigator !== 'undefined' ? !/Trident|MSIE|Edge/.test(navigator.userAgent) : true,
            manifest: null,
            env: 'web',
            lazyLoad: false,
            timestamp: new Date().getTime(),
            interactionTimeout: 600 // 5 minutes

          };
          var currentSettings = initialSettings;

          var parseManifest = function parseManifest(manifest) {
            if (!manifest) return;
            if (typeof manifest.email !== 'string') return;
            if (typeof manifest.appUrl !== 'string') return;
            return {
              email: manifest.email,
              appUrl: manifest.appUrl
            };
          };

          var getEnv = function getEnv() {
            // $FlowIssue: chrome is not declared outside the project
            if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {
              return 'webextension';
            }

            if (typeof navigator !== 'undefined') {
              if (typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative') {
                return 'react-native';
              }

              var userAgent = navigator.userAgent.toLowerCase();

              if (userAgent.indexOf(' electron/') > -1) {
                return 'electron';
              }
            } // if (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative') {
            //     return 'react-native';
            // }
            // if (typeof process !== 'undefined' && process.versions.hasOwnProperty('electron')) {
            //     return 'electron';
            // }


            return 'web';
          }; // Cors validation copied from Trezor Bridge
          // see: https://github.com/trezor/trezord-go/blob/05991cea5900d18bcc6ece5ae5e319d138fc5551/server/api/api.go#L229
          // Its pointless to allow `trezor-connect` endpoints { connectSrc } for domains other than listed below
          // `trezord` will block communication anyway


          exports.getEnv = getEnv;

          var corsValidator = function corsValidator(url) {
            if (typeof url !== 'string') return;
            if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*trezor\.io\//)) return url;
            if (url.match(/^https?:\/\/localhost:[58][0-9]{3}\//)) return url;
            if (url.match(/^https:\/\/([A-Za-z0-9\-_]+\.)*sldev\.cz\//)) return url;
            if (url.match(/^https?:\/\/([A-Za-z0-9\-_]+\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\.onion\//)) return url;
          };

          exports.corsValidator = corsValidator;

          var parse = function parse(input) {
            if (input === void 0) {
              input = {};
            }

            var settings = _objectSpread({}, currentSettings);

            if (Object.prototype.hasOwnProperty.call(input, 'debug')) {
              if (Array.isArray(input)) {// enable log with prefix
              }

              if (typeof input.debug === 'boolean') {
                settings.debug = input.debug;
              } else if (typeof input.debug === 'string') {
                settings.debug = input.debug === 'true';
              }
            }

            if (typeof input.connectSrc === 'string') {
              settings.connectSrc = input.connectSrc;
            } // For debugging purposes `connectSrc` could be defined in `global.__TREZOR_CONNECT_SRC` variable


            if (typeof global !== 'undefined' && typeof global.__TREZOR_CONNECT_SRC === 'string') {
              settings.connectSrc = corsValidator(global.__TREZOR_CONNECT_SRC);
              settings.debug = true;
            } // For debugging purposes `connectSrc` could be defined in url query of hosting page. Usage:
            // https://3rdparty-page.com/?trezor-connect-src=https://localhost:8088/


            if (typeof window !== 'undefined' && window.location && typeof window.location.search === 'string') {
              var vars = window.location.search.split('&');
              var customUrl = vars.find(function (v) {
                return v.indexOf('trezor-connect-src') >= 0;
              });

              if (customUrl) {
                var _customUrl$split = customUrl.split('='),
                  connectSrc = _customUrl$split[1];

                settings.connectSrc = corsValidator(decodeURIComponent(connectSrc));
                settings.debug = true;
              }
            }

            var src = settings.connectSrc || DEFAULT_DOMAIN;
            settings.iframeSrc = src + "iframe.html";
            settings.popupSrc = src + "popup.html";
            settings.webusbSrc = src + "webusb.html";

            if (typeof input.transportReconnect === 'boolean') {
              settings.transportReconnect = input.transportReconnect;
            }

            if (typeof input.webusb === 'boolean') {
              settings.webusb = input.webusb;
            }

            if (typeof input.popup === 'boolean') {
              settings.popup = input.popup;
            }

            if (typeof input.lazyLoad === 'boolean') {
              settings.lazyLoad = input.lazyLoad;
            }

            if (typeof input.pendingTransportEvent === 'boolean') {
              settings.pendingTransportEvent = input.pendingTransportEvent;
            } // local files


            if (typeof window !== 'undefined' && window.location && window.location.protocol === 'file:') {
              settings.origin = "file://" + window.location.pathname;
              settings.webusb = false;
            }

            if (typeof input.extension === 'string') {
              settings.extension = input.extension;
            }

            if (typeof input.env === 'string') {
              settings.env = input.env;
            } else {
              settings.env = getEnv();
            }

            if (typeof input.timestamp === 'number') {
              settings.timestamp = input.timestamp;
            }

            if (typeof input.interactionTimeout === 'number') {
              settings.interactionTimeout = input.interactionTimeout;
            }

            if (typeof input.manifest === 'object') {
              settings.manifest = parseManifest(input.manifest);
            }

            currentSettings = settings;
            return currentSettings;
          };

          exports.parse = parse;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\env\\browser\\index.js", { "../../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", "../../data/ConnectSettings": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\data\\ConnectSettings.js", "../../iframe/builder": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\iframe\\builder.js", "../../message": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\message\\index.js", "../../message/builder": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\message\\builder.js", "../../popup/PopupManager": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\popup\\PopupManager.js", "../../types": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\index.js", "../../utils/debug": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\utils\\debug.js", "../../webusb/button": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\webusb\\button.js", "@babel/runtime/helpers/asyncToGenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js", "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/regenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\regenerator\\index.js", "events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\env\browser\index.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.disableWebUSB = exports.requestLogin = exports.customMessage = exports.getSettings = exports.renderWebUSBButton = exports.uiResponse = exports.call = exports.init = exports.cancel = exports.dispose = exports.manifest = exports.eventEmitter = void 0;

          var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

          var _events = _interopRequireDefault(require("events"));

          var _PopupManager = _interopRequireDefault(require("../../popup/PopupManager"));

          var iframe = _interopRequireWildcard(require("../../iframe/builder"));

          var _button = _interopRequireDefault(require("../../webusb/button"));

          var _message = require("../../message");

          var _builder2 = require("../../message/builder");

          var _ConnectSettings = require("../../data/ConnectSettings");

          var _debug = require("../../utils/debug");

          var _constants = require("../../constants");

          var $T = _interopRequireWildcard(require("../../types"));

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          var eventEmitter = new _events["default"]();
          exports.eventEmitter = eventEmitter;

          var _log = (0, _debug.initLog)('[trezor-connect.js]');

          var _settings;

          var _popupManager;

          var initPopupManager = function initPopupManager() {
            var pm = new _PopupManager["default"](_settings);
            pm.on(_constants.POPUP.CLOSED, function (error) {
              iframe.postMessage({
                type: _constants.POPUP.CLOSED,
                payload: error ? {
                  error: error
                } : null
              }, false);
            });
            return pm;
          };

          var manifest = function manifest(data) {
            _settings = (0, _ConnectSettings.parse)({
              manifest: data
            });
          };

          exports.manifest = manifest;

          var dispose = function dispose() {
            eventEmitter.removeAllListeners();
            iframe.dispose();

            if (_popupManager) {
              _popupManager.close();
            }
          };

          exports.dispose = dispose;

          var cancel = function cancel(error) {
            if (_popupManager) {
              _popupManager.emit(_constants.POPUP.CLOSED, error);
            }
          }; // handle message received from iframe


          exports.cancel = cancel;

          var handleMessage = function handleMessage(messageEvent) {
            // ignore messages from domain other then iframe origin
            if (messageEvent.origin !== iframe.origin) return;
            var message = (0, _message.parseMessage)(messageEvent.data);
            var event = message.event,
              type = message.type,
              payload = message.payload;
            var id = message.id || 0;

            _log.log('handleMessage', message);

            switch (event) {
              case _constants.RESPONSE_EVENT:
                if (iframe.messagePromises[id]) {
                  // resolve message promise (send result of call method)
                  iframe.messagePromises[id].resolve({
                    id: id,
                    success: message.success,
                    payload: payload
                  });
                  delete iframe.messagePromises[id];
                } else {
                  _log.warn("Unknown message id " + id);
                }

                break;

              case _constants.DEVICE_EVENT:
                // pass DEVICE event up to html
                eventEmitter.emit(event, message);
                eventEmitter.emit(type, payload); // DEVICE_EVENT also emit single events (connect/disconnect...)

                break;

              case _constants.TRANSPORT_EVENT:
                eventEmitter.emit(event, message);
                eventEmitter.emit(type, payload);
                break;

              case _constants.BLOCKCHAIN_EVENT:
                eventEmitter.emit(event, message);
                eventEmitter.emit(type, payload);
                break;

              case _constants.UI_EVENT:
                if (type === _constants.IFRAME.BOOTSTRAP) {
                  iframe.clearTimeout();
                  break;
                }

                if (type === _constants.IFRAME.LOADED) {
                  iframe.initPromise.resolve();
                }

                if (type === _constants.IFRAME.ERROR) {
                  iframe.initPromise.reject(payload.error);
                } // pass UI event up


                eventEmitter.emit(event, message);
                eventEmitter.emit(type, payload);
                break;

              default:
                _log.log('Undefined message', event, messageEvent);

            }
          };

          var init = /*#__PURE__*/function () {
            var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(settings) {
              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (settings === void 0) {
                        settings = {};
                      }

                      if (!iframe.instance) {
                        _context.next = 3;
                        break;
                      }

                      throw _constants.ERRORS.TypedError('Init_AlreadyInitialized');

                    case 3:
                      if (!_settings) {
                        _settings = (0, _ConnectSettings.parse)(settings);
                      }

                      if (_settings.manifest) {
                        _context.next = 6;
                        break;
                      }

                      throw _constants.ERRORS.TypedError('Init_ManifestMissing');

                    case 6:
                      if (!_settings.lazyLoad) {
                        _context.next = 9;
                        break;
                      }

                      // reset "lazyLoad" after first use
                      _settings.lazyLoad = false;
                      return _context.abrupt("return");

                    case 9:
                      if (!_popupManager) {
                        _popupManager = initPopupManager();
                      }

                      _log.enabled = !!_settings.debug;
                      window.addEventListener('message', handleMessage);
                      window.addEventListener('unload', dispose);
                      _context.next = 15;
                      return iframe.init(_settings);

                    case 15:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function init(_x) {
              return _ref.apply(this, arguments);
            };
          }();

          exports.init = init;

          var call = /*#__PURE__*/function () {
            var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(params) {
              var response;
              return _regenerator["default"].wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (!(!iframe.instance && !iframe.timeout)) {
                        _context2.next = 15;
                        break;
                      }

                      // init popup with lazy loading before iframe initialization
                      _settings = (0, _ConnectSettings.parse)(_settings);

                      if (_settings.manifest) {
                        _context2.next = 4;
                        break;
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_ManifestMissing')));

                    case 4:
                      if (!_popupManager) {
                        _popupManager = initPopupManager();
                      }

                      _popupManager.request(true); // auto init with default settings


                      _context2.prev = 6;
                      _context2.next = 9;
                      return init(_settings);

                    case 9:
                      _context2.next = 15;
                      break;

                    case 11:
                      _context2.prev = 11;
                      _context2.t0 = _context2["catch"](6);

                      if (_popupManager) {
                        // Catch fatal iframe errors (not loading)
                        if (['Init_IframeBlocked', 'Init_IframeTimeout'].includes(_context2.t0.code)) {
                          _popupManager.postMessage((0, _builder2.UiMessage)(_constants.UI.IFRAME_FAILURE));
                        } else {
                          _popupManager.close();
                        }
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(_context2.t0));

                    case 15:
                      if (!iframe.timeout) {
                        _context2.next = 17;
                        break;
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_ManifestMissing')));

                    case 17:
                      if (!iframe.error) {
                        _context2.next = 19;
                        break;
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(iframe.error));

                    case 19:
                      // request popup window it might be used in the future
                      if (_settings.popup && _popupManager) {
                        _popupManager.request();
                      } // post message to iframe


                      _context2.prev = 20;
                      _context2.next = 23;
                      return iframe.postMessage({
                        type: _constants.IFRAME.CALL,
                        payload: params
                      });

                    case 23:
                      response = _context2.sent;

                      if (!response) {
                        _context2.next = 27;
                        break;
                      }

                      if (!response.success && response.payload.code !== 'Device_CallInProgress' && _popupManager) {
                        _popupManager.unlock();
                      }

                      return _context2.abrupt("return", response);

                    case 27:
                      if (_popupManager) {
                        _popupManager.unlock();
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Method_NoResponse')));

                    case 31:
                      _context2.prev = 31;
                      _context2.t1 = _context2["catch"](20);

                      _log.error('__call error', _context2.t1);

                      if (_popupManager) {
                        _popupManager.close();
                      }

                      return _context2.abrupt("return", (0, _message.errorMessage)(_context2.t1));

                    case 36:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, null, [[6, 11], [20, 31]]);
            }));

            return function call(_x2) {
              return _ref2.apply(this, arguments);
            };
          }();

          exports.call = call;

          var customMessageResponse = function customMessageResponse(payload) {
            iframe.postMessage({
              event: _constants.UI_EVENT,
              type: _constants.UI.CUSTOM_MESSAGE_RESPONSE,
              payload: payload
            });
          };

          var uiResponse = function uiResponse(response) {
            var type = response.type,
              payload = response.payload;
            iframe.postMessage({
              event: _constants.UI_EVENT,
              type: type,
              payload: payload
            });
          };

          exports.uiResponse = uiResponse;

          var renderWebUSBButton = function renderWebUSBButton(className) {
            (0, _button["default"])(className, _settings.webusbSrc, iframe.origin);
          };

          exports.renderWebUSBButton = renderWebUSBButton;

          var getSettings = function getSettings() {
            if (!iframe.instance) {
              return Promise.resolve((0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_NotInitialized')));
            }

            return call({
              method: 'getSettings'
            });
          };

          exports.getSettings = getSettings;

          var customMessage = /*#__PURE__*/function () {
            var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(params) {
              var callback, customMessageListener, response;
              return _regenerator["default"].wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      if (!(typeof params.callback !== 'function')) {
                        _context4.next = 2;
                        break;
                      }

                      return _context4.abrupt("return", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Method_CustomMessage_Callback')));

                    case 2:
                      // TODO: set message listener only if iframe is loaded correctly
                      callback = params.callback;

                      customMessageListener = /*#__PURE__*/function () {
                        var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(event) {
                          var data, payload;
                          return _regenerator["default"].wrap(function _callee3$(_context3) {
                            while (1) {
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  data = event.data;

                                  if (!(data && data.type === _constants.UI.CUSTOM_MESSAGE_REQUEST)) {
                                    _context3.next = 6;
                                    break;
                                  }

                                  _context3.next = 4;
                                  return callback(data.payload);

                                case 4:
                                  payload = _context3.sent;

                                  if (payload) {
                                    customMessageResponse(payload);
                                  } else {
                                    customMessageResponse({
                                      message: 'release'
                                    });
                                  }

                                case 6:
                                case "end":
                                  return _context3.stop();
                              }
                            }
                          }, _callee3);
                        }));

                        return function customMessageListener(_x4) {
                          return _ref4.apply(this, arguments);
                        };
                      }();

                      window.addEventListener('message', customMessageListener, false);
                      _context4.next = 7;
                      return call(_objectSpread(_objectSpread({
                        method: 'customMessage'
                      }, params), {}, {
                        callback: null
                      }));

                    case 7:
                      response = _context4.sent;
                      window.removeEventListener('message', customMessageListener);
                      return _context4.abrupt("return", response);

                    case 10:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4);
            }));

            return function customMessage(_x3) {
              return _ref3.apply(this, arguments);
            };
          }();

          exports.customMessage = customMessage;

          var requestLogin = /*#__PURE__*/function () {
            var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(params) {
              var callback, loginChallengeListener, response;
              return _regenerator["default"].wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      if (!(typeof params.callback === 'function')) {
                        _context6.next = 9;
                        break;
                      }

                      callback = params.callback; // TODO: set message listener only if iframe is loaded correctly

                      loginChallengeListener = /*#__PURE__*/function () {
                        var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(event) {
                          var data, payload;
                          return _regenerator["default"].wrap(function _callee5$(_context5) {
                            while (1) {
                              switch (_context5.prev = _context5.next) {
                                case 0:
                                  data = event.data;

                                  if (!(data && data.type === _constants.UI.LOGIN_CHALLENGE_REQUEST)) {
                                    _context5.next = 12;
                                    break;
                                  }

                                  _context5.prev = 2;
                                  _context5.next = 5;
                                  return callback();

                                case 5:
                                  payload = _context5.sent;
                                  iframe.postMessage({
                                    event: _constants.UI_EVENT,
                                    type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,
                                    payload: payload
                                  });
                                  _context5.next = 12;
                                  break;

                                case 9:
                                  _context5.prev = 9;
                                  _context5.t0 = _context5["catch"](2);
                                  iframe.postMessage({
                                    event: _constants.UI_EVENT,
                                    type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,
                                    payload: _context5.t0.message
                                  });

                                case 12:
                                case "end":
                                  return _context5.stop();
                              }
                            }
                          }, _callee5, null, [[2, 9]]);
                        }));

                        return function loginChallengeListener(_x6) {
                          return _ref6.apply(this, arguments);
                        };
                      }();

                      window.addEventListener('message', loginChallengeListener, false);
                      _context6.next = 6;
                      return call(_objectSpread(_objectSpread({
                        method: 'requestLogin'
                      }, params), {}, {
                        asyncChallenge: true,
                        callback: null
                      }));

                    case 6:
                      response = _context6.sent;
                      window.removeEventListener('message', loginChallengeListener);
                      return _context6.abrupt("return", response);

                    case 9:
                      return _context6.abrupt("return", call(_objectSpread({
                        method: 'requestLogin'
                      }, params)));

                    case 10:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6);
            }));

            return function requestLogin(_x5) {
              return _ref5.apply(this, arguments);
            };
          }();

          exports.requestLogin = requestLogin;

          var disableWebUSB = function disableWebUSB() {
            iframe.postMessage({
              event: _constants.UI_EVENT,
              type: _constants.TRANSPORT.DISABLE_WEBUSB
            });
          };

          exports.disableWebUSB = disableWebUSB;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\env\\browser\\networkUtils.js", { "@babel/runtime/helpers/asyncToGenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/regenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\regenerator\\index.js", "cross-fetch": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\cross-fetch\\dist\\browser-ponyfill.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\env\browser\networkUtils.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.getOrigin = exports.httpRequest = void 0;

          var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

          var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

          var _crossFetch = _interopRequireDefault(require("cross-fetch"));

          var httpRequest = /*#__PURE__*/function () {
            var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(url, type) {
              var response, txt;
              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (type === void 0) {
                        type = 'text';
                      }

                      _context.next = 3;
                      return (0, _crossFetch["default"])(url, {
                        credentials: 'same-origin'
                      });

                    case 3:
                      response = _context.sent;

                      if (!response.ok) {
                        _context.next = 13;
                        break;
                      }

                      if (!(type === 'json')) {
                        _context.next = 10;
                        break;
                      }

                      _context.next = 8;
                      return response.text();

                    case 8:
                      txt = _context.sent;
                      return _context.abrupt("return", JSON.parse(txt));

                    case 10:
                      if (!(type === 'binary')) {
                        _context.next = 12;
                        break;
                      }

                      return _context.abrupt("return", response.arrayBuffer());

                    case 12:
                      return _context.abrupt("return", response.text());

                    case 13:
                      throw new Error("httpRequest error: " + url + " " + response.statusText);

                    case 14:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function httpRequest(_x, _x2) {
              return _ref.apply(this, arguments);
            };
          }();

          exports.httpRequest = httpRequest;

          var getOrigin = function getOrigin(url) {
            if (url.indexOf('file://') === 0) return 'file://'; // eslint-disable-next-line no-useless-escape

            var parts = url.match(/^.+\:\/\/[^\/]+/);
            return Array.isArray(parts) && parts.length > 0 ? parts[0] : 'unknown';
          };

          exports.getOrigin = getOrigin;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\iframe\\builder.js", { "../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", "../env/browser/networkUtils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\env\\browser\\networkUtils.js", "../utils/deferred": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\utils\\deferred.js", "./inline-styles": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\iframe\\inline-styles.js", "@babel/runtime/helpers/asyncToGenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/regenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\regenerator\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\iframe\builder.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.clearTimeout = exports.dispose = exports.postMessage = exports.init = exports.messagePromises = exports.error = exports.timeout = exports.initPromise = exports.origin = exports.instance = void 0;

          var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

          var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

          var _deferred = require("../utils/deferred");

          var _constants = require("../constants");

          var _networkUtils = require("../env/browser/networkUtils");

          var _inlineStyles = _interopRequireDefault(require("./inline-styles"));

          /* eslint-disable import/no-mutable-exports */
          var instance;
          exports.instance = instance;
          var origin;
          exports.origin = origin;
          var initPromise = (0, _deferred.create)();
          exports.initPromise = initPromise;
          var timeout = 0;
          exports.timeout = timeout;
          var error;
          /* eslint-enable import/no-mutable-exports */

          exports.error = error;
          var _messageID = 0; // every postMessage to iframe has its own promise to resolve

          var messagePromises = {};
          exports.messagePromises = messagePromises;

          var init = /*#__PURE__*/function () {
            var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(settings) {
              var existedFrame, src, manifestString, manifest, onLoad;
              return _regenerator["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      exports.initPromise = initPromise = (0, _deferred.create)();
                      existedFrame = document.getElementById('trezorconnect');

                      if (existedFrame) {
                        exports.instance = instance = existedFrame;
                      } else {
                        exports.instance = instance = document.createElement('iframe');
                        instance.frameBorder = '0';
                        instance.width = '0px';
                        instance.height = '0px';
                        instance.style.position = 'absolute';
                        instance.style.display = 'none';
                        instance.style.border = '0px';
                        instance.style.width = '0px';
                        instance.style.height = '0px';
                        instance.id = 'trezorconnect';
                      }

                      if (settings.env === 'web') {
                        manifestString = settings.manifest ? JSON.stringify(settings.manifest) : 'undefined'; // note: btoa(undefined) === btoa('undefined') === "dW5kZWZpbmVk"

                        manifest = "version=" + settings.version + "&manifest=" + encodeURIComponent(btoa(JSON.stringify(manifestString)));
                        src = settings.iframeSrc + "?" + manifest;
                      } else {
                        src = settings.iframeSrc;
                      }

                      instance.setAttribute('src', src);

                      if (settings.webusb) {
                        instance.setAttribute('allow', 'usb');
                      }

                      exports.origin = origin = (0, _networkUtils.getOrigin)(instance.src);
                      exports.timeout = timeout = window.setTimeout(function () {
                        initPromise.reject(_constants.ERRORS.TypedError('Init_IframeTimeout'));
                      }, 10000);

                      onLoad = function onLoad() {
                        if (!instance) {
                          initPromise.reject(_constants.ERRORS.TypedError('Init_IframeBlocked'));
                          return;
                        }

                        try {
                          // if hosting page is able to access cross-origin location it means that the iframe is not loaded
                          var iframeOrigin = instance.contentWindow.location.origin;

                          if (!iframeOrigin || iframeOrigin === 'null') {
                            // eslint-disable-next-line no-use-before-define
                            handleIframeBlocked();
                            return;
                          }
                        } catch (e) {// empty
                        }

                        var extension; // $FlowIssue chrome is not declared outside

                        if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {
                          chrome.runtime.onConnect.addListener(function () { });
                          extension = chrome.runtime.id;
                        }

                        instance.contentWindow.postMessage({
                          type: _constants.IFRAME.INIT,
                          payload: {
                            settings: settings,
                            extension: extension
                          }
                        }, origin);
                        instance.onload = undefined;
                      }; // IE hack


                      if (instance.attachEvent) {
                        instance.attachEvent('onload', onLoad);
                      } else {
                        instance.onload = onLoad;
                      } // inject iframe into host document body


                      if (document.body) {
                        document.body.appendChild(instance); // eslint-disable-next-line no-use-before-define

                        injectStyleSheet();
                      }

                      _context.prev = 11;
                      _context.next = 14;
                      return initPromise.promise;

                    case 14:
                      _context.next = 20;
                      break;

                    case 16:
                      _context.prev = 16;
                      _context.t0 = _context["catch"](11);

                      // reset state to allow initialization again
                      if (instance) {
                        if (instance.parentNode) {
                          instance.parentNode.removeChild(instance);
                        }

                        exports.instance = instance = null;
                      }

                      throw _context.t0;

                    case 20:
                      _context.prev = 20;
                      window.clearTimeout(timeout);
                      exports.timeout = timeout = 0;
                      return _context.finish(20);

                    case 24:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[11, 16, 20, 24]]);
            }));

            return function init(_x) {
              return _ref.apply(this, arguments);
            };
          }();

          exports.init = init;

          var injectStyleSheet = function injectStyleSheet() {
            if (!instance) {
              throw _constants.ERRORS.TypedError('Init_IframeBlocked');
            }

            var doc = instance.ownerDocument;
            var head = doc.head || doc.getElementsByTagName('head')[0];
            var style = document.createElement('style');
            style.setAttribute('type', 'text/css');
            style.setAttribute('id', 'TrezorConnectStylesheet'); // $FlowIssue

            if (style.styleSheet) {
              // IE
              // $FlowIssue
              style.styleSheet.cssText = _inlineStyles["default"];
              head.appendChild(style);
            } else {
              style.appendChild(document.createTextNode(_inlineStyles["default"]));
              head.append(style);
            }
          };

          var handleIframeBlocked = function handleIframeBlocked() {
            window.clearTimeout(timeout);
            exports.error = error = _constants.ERRORS.TypedError('Init_IframeBlocked'); // eslint-disable-next-line no-use-before-define

            dispose();
            initPromise.reject(error);
          }; // post messages to iframe


          var postMessage = function postMessage(message, usePromise) {
            if (usePromise === void 0) {
              usePromise = true;
            }

            if (!instance) {
              throw _constants.ERRORS.TypedError('Init_IframeBlocked');
            }

            if (usePromise) {
              _messageID++;
              message.id = _messageID;
              messagePromises[_messageID] = (0, _deferred.create)();
              var promise = messagePromises[_messageID].promise;
              instance.contentWindow.postMessage(message, origin);
              return promise;
            }

            instance.contentWindow.postMessage(message, origin);
            return null;
          };

          exports.postMessage = postMessage;

          var dispose = function dispose() {
            if (instance && instance.parentNode) {
              try {
                instance.parentNode.removeChild(instance);
              } catch (e) {// do nothing
              }
            }

            exports.instance = instance = null;
            exports.timeout = timeout = 0;
          };

          exports.dispose = dispose;

          var clearTimeout = function clearTimeout() {
            window.clearTimeout(timeout);
          };

          exports.clearTimeout = clearTimeout;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\iframe\\inline-styles.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\iframe\inline-styles.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports["default"] = void 0;
          var css = '.trezorconnect-container{position:fixed!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-webkit-flex-direction:column!important;-ms-flex-direction:column!important;flex-direction:column!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important;z-index:10000!important;width:100%!important;height:100%!important;top:0!important;left:0!important;background:rgba(0,0,0,.35)!important;overflow:auto!important;padding:20px!important;margin:0!important}.trezorconnect-container .trezorconnect-window{position:relative!important;display:block!important;width:370px!important;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif!important;margin:auto!important;border-radius:3px!important;background-color:#fff!important;text-align:center!important;overflow:hidden!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head{text-align:left;padding:12px 24px!important;display:-webkit-box!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-align:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-logo{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close{cursor:pointer!important;height:24px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close svg{fill:#757575;-webkit-transition:fill .3s ease-in-out!important;transition:fill .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-head .trezorconnect-close:hover svg{fill:#494949}.trezorconnect-container .trezorconnect-window .trezorconnect-body{padding:24px 24px 32px!important;background:#FBFBFB!important;border-top:1px solid #EBEBEB}.trezorconnect-container .trezorconnect-window .trezorconnect-body h3{color:#505050!important;font-size:16px!important;font-weight:500!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body p{margin:8px 0 24px!important;font-weight:400!important;color:#A9A9A9!important;font-size:12px!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button{width:100%!important;padding:12px 24px!important;margin:0!important;border-radius:3px!important;font-size:14px!important;font-weight:300!important;cursor:pointer!important;background:#01B757!important;color:#fff!important;border:0!important;-webkit-transition:background-color .3s ease-in-out!important;transition:background-color .3s ease-in-out!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:hover{background-color:#00AB51!important}.trezorconnect-container .trezorconnect-window .trezorconnect-body button:active{background-color:#009546!important}/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0IiwiJHN0ZGluIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLHlCQUNJLFNBQUEsZ0JBQ0EsUUFBQSxzQkFDQSxRQUFBLHVCQUNBLFFBQUEsc0JBRUEsUUFBQSxlQUNBLG1CQUFBLG1CQUNBLHNCQUFBLGlCQUNBLHVCQUFBLGlCQUNBLG1CQUFBLGlCQUNBLGVBQUEsaUJBRUEsa0JBQUEsaUJBQ0Esb0JBQUEsaUJBQ0EsZUFBQSxpQkNmTSxZQUFhLGlCREFyQixRQUFTLGdCQWtCSCxNQUFBLGVBQ0EsT0FBQSxlQUNBLElBQUEsWUFDQSxLQUFBLFlBQ0EsV0FBQSwwQkFDQSxTQUFBLGVBQ0EsUUFBQSxlQUNBLE9BQUEsWUNkUiwrQ0RYRSxTQUFVLG1CQTZCQSxRQUFBLGdCQUNBLE1BQUEsZ0JBQ0EsWUFBQSxjQUFBLG1CQUFBLFdBQUEsT0FBQSxpQkFBQSxNQUFBLHFCQUNBLE9BQUEsZUNmVixjQUFlLGNEakJmLGlCQWlCRSxlQWtCWSxXQUFBLGlCQ2ZkLFNBQVUsaUJEbUJJLG1FQUNBLFdBQUEsS0NoQmQsUUFBUyxLQUFLLGVEeEJkLFFBQVMsc0JBMENTLFFBQUEsdUJBQ0EsUUFBQSxzQkNmbEIsUUFBUyxlRGlCSyxrQkE1QlosaUJBOEJvQixvQkFBQSxpQkNoQmxCLGVBQWdCLGlCRC9CWixZQWlCTixpQkFzQ1EsdUZBQ0EsaUJBQUEsRUNwQlYsYUFBYyxFRHBDVixTQUFVLEVBMkRBLEtBQUEsRUFFQSx3RkNwQmQsT0FBUSxrQkR6Q1IsT0FBUSxlQWlFTSw0RkFDQSxLQUFBLFFBQ0EsbUJBQUEsS0FBQSxJQUFBLHNCQ3BCZCxXQUFZLEtBQUssSUFBSyxzQkR3QlIsa0dBQ0EsS0FBQSxRQUVBLG1FQUNBLFFBQUEsS0FBQSxLQUFBLGVBQ0EsV0FBQSxrQkFDQSxXQUFBLElBQUEsTUFBQSxRQUVBLHNFQUNBLE1BQUEsa0JBQ0EsVUFBQSxlQ3JCZCxZQUFhLGNEd0JLLHFFQ3JCbEIsT0FBUSxJQUFJLEVBQUksZUR3QkYsWUFBQSxjQUNJLE1BQUEsa0JDdEJsQixVQUFXLGVBRWIsMEVBQ0UsTUFBTyxlQUNQLFFBQVMsS0FBSyxlQUNkLE9BQVEsWUFDUixjQUFlLGNBQ2YsVUFBVyxlQUNYLFlBQWEsY0FDYixPQUFRLGtCQUNSLFdBQVksa0JBQ1osTUFBTyxlQUNQLE9BQVEsWUFDUixtQkFBb0IsaUJBQWlCLElBQUssc0JBQzFDLFdBQVksaUJBQWlCLElBQUssc0JBRXBDLGdGQUNFLGlCQUFrQixrQkFFcEIsaUZBQ0UsaUJBQWtCIn0= */';
          var _default = css;
          exports["default"] = _default;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\index.js", { "./constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", "./env/node": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\env\\browser\\index.js", "./types": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\index.js", "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\index.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          var _exportNames = {};
          exports["default"] = void 0;

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          var _constants = require("./constants");

          Object.keys(_constants).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            if (key in exports && exports[key] === _constants[key]) return;
            exports[key] = _constants[key];
          });

          var _node = require("./env/node");

          var _types = require("./types");

          Object.keys(_types).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
            if (key in exports && exports[key] === _types[key]) return;
            exports[key] = _types[key];
          });

          function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          var TrezorConnect = {
            manifest: _node.manifest,
            init: _node.init,
            getSettings: _node.getSettings,
            on: function on(type, fn) {
              _node.eventEmitter.on(type, fn);
            },
            off: function off(type, fn) {
              _node.eventEmitter.removeListener(type, fn);
            },
            removeAllListeners: function removeAllListeners() {
              _node.eventEmitter.removeAllListeners();
            },
            uiResponse: _node.uiResponse,
            // methods
            blockchainGetAccountBalanceHistory: function blockchainGetAccountBalanceHistory(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainGetAccountBalanceHistory'
              }, params));
            },
            blockchainGetCurrentFiatRates: function blockchainGetCurrentFiatRates(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainGetCurrentFiatRates'
              }, params));
            },
            blockchainGetFiatRatesForTimestamps: function blockchainGetFiatRatesForTimestamps(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainGetFiatRatesForTimestamps'
              }, params));
            },
            blockchainDisconnect: function blockchainDisconnect(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainDisconnect'
              }, params));
            },
            blockchainEstimateFee: function blockchainEstimateFee(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainEstimateFee'
              }, params));
            },
            blockchainGetTransactions: function blockchainGetTransactions(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainGetTransactions'
              }, params));
            },
            blockchainSetCustomBackend: function blockchainSetCustomBackend(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainSetCustomBackend'
              }, params));
            },
            blockchainSubscribe: function blockchainSubscribe(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainSubscribe'
              }, params));
            },
            blockchainSubscribeFiatRates: function blockchainSubscribeFiatRates(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainSubscribeFiatRates'
              }, params));
            },
            blockchainUnsubscribe: function blockchainUnsubscribe(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainUnsubscribe'
              }, params));
            },
            blockchainUnsubscribeFiatRates: function blockchainUnsubscribeFiatRates(params) {
              return (0, _node.call)(_objectSpread({
                method: 'blockchainUnsubscribeFiatRates'
              }, params));
            },
            customMessage: function customMessage(params) {
              return (0, _node.customMessage)(params);
            },
            requestLogin: function requestLogin(params) {
              return (0, _node.requestLogin)(params);
            },
            cardanoGetAddress: function cardanoGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'cardanoGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            cardanoGetNativeScriptHash: function cardanoGetNativeScriptHash(params) {
              return (0, _node.call)(_objectSpread({
                method: 'cardanoGetNativeScriptHash'
              }, params));
            },
            cardanoGetPublicKey: function cardanoGetPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'cardanoGetPublicKey'
              }, params));
            },
            cardanoSignTransaction: function cardanoSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'cardanoSignTransaction'
              }, params));
            },
            cipherKeyValue: function cipherKeyValue(params) {
              return (0, _node.call)(_objectSpread({
                method: 'cipherKeyValue'
              }, params));
            },
            composeTransaction: function composeTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'composeTransaction'
              }, params));
            },
            ethereumGetAddress: function ethereumGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'ethereumGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            ethereumGetPublicKey: function ethereumGetPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'ethereumGetPublicKey'
              }, params));
            },
            ethereumSignMessage: function ethereumSignMessage(params) {
              return (0, _node.call)(_objectSpread({
                method: 'ethereumSignMessage'
              }, params));
            },
            ethereumSignTransaction: function ethereumSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'ethereumSignTransaction'
              }, params));
            },
            ethereumSignTypedData: function ethereumSignTypedData(params) {
              return (0, _node.call)(_objectSpread({
                method: 'ethereumSignTypedData'
              }, params));
            },
            ethereumVerifyMessage: function ethereumVerifyMessage(params) {
              return (0, _node.call)(_objectSpread({
                method: 'ethereumVerifyMessage'
              }, params));
            },
            getAccountInfo: function getAccountInfo(params) {
              return (0, _node.call)(_objectSpread({
                method: 'getAccountInfo'
              }, params));
            },
            getAddress: function getAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'getAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            getDeviceState: function getDeviceState(params) {
              return (0, _node.call)(_objectSpread({
                method: 'getDeviceState'
              }, params));
            },
            getFeatures: function getFeatures(params) {
              return (0, _node.call)(_objectSpread({
                method: 'getFeatures'
              }, params));
            },
            getPublicKey: function getPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'getPublicKey'
              }, params));
            },
            liskGetAddress: function liskGetAddress() {
              return (0, _node.call)({
                method: 'liskDeprecated'
              });
            },
            liskGetPublicKey: function liskGetPublicKey() {
              return (0, _node.call)({
                method: 'liskDeprecated'
              });
            },
            liskSignMessage: function liskSignMessage() {
              return (0, _node.call)({
                method: 'liskDeprecated'
              });
            },
            liskSignTransaction: function liskSignTransaction() {
              return (0, _node.call)({
                method: 'liskDeprecated'
              });
            },
            liskVerifyMessage: function liskVerifyMessage() {
              return (0, _node.call)({
                method: 'liskDeprecated'
              });
            },
            nemGetAddress: function nemGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'nemGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            nemSignTransaction: function nemSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'nemSignTransaction'
              }, params));
            },
            pushTransaction: function pushTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'pushTransaction'
              }, params));
            },
            rippleGetAddress: function rippleGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'rippleGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            rippleSignTransaction: function rippleSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'rippleSignTransaction'
              }, params));
            },
            signMessage: function signMessage(params) {
              return (0, _node.call)(_objectSpread({
                method: 'signMessage'
              }, params));
            },
            signTransaction: function signTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'signTransaction'
              }, params));
            },
            stellarGetAddress: function stellarGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'stellarGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            stellarSignTransaction: function stellarSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'stellarSignTransaction'
              }, params));
            },
            tezosGetAddress: function tezosGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'tezosGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            tezosGetPublicKey: function tezosGetPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'tezosGetPublicKey'
              }, params));
            },
            tezosSignTransaction: function tezosSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'tezosSignTransaction'
              }, params));
            },
            eosGetPublicKey: function eosGetPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'eosGetPublicKey'
              }, params));
            },
            eosSignTransaction: function eosSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'eosSignTransaction'
              }, params));
            },
            binanceGetAddress: function binanceGetAddress(params) {
              var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;
              return (0, _node.call)(_objectSpread(_objectSpread({
                method: 'binanceGetAddress'
              }, params), {}, {
                useEventListener: useEventListener
              }));
            },
            binanceGetPublicKey: function binanceGetPublicKey(params) {
              return (0, _node.call)(_objectSpread({
                method: 'binanceGetPublicKey'
              }, params));
            },
            binanceSignTransaction: function binanceSignTransaction(params) {
              return (0, _node.call)(_objectSpread({
                method: 'binanceSignTransaction'
              }, params));
            },
            verifyMessage: function verifyMessage(params) {
              return (0, _node.call)(_objectSpread({
                method: 'verifyMessage'
              }, params));
            },
            resetDevice: function resetDevice(params) {
              return (0, _node.call)(_objectSpread({
                method: 'resetDevice'
              }, params));
            },
            wipeDevice: function wipeDevice(params) {
              return (0, _node.call)(_objectSpread({
                method: 'wipeDevice'
              }, params));
            },
            applyFlags: function applyFlags(params) {
              return (0, _node.call)(_objectSpread({
                method: 'applyFlags'
              }, params));
            },
            applySettings: function applySettings(params) {
              return (0, _node.call)(_objectSpread({
                method: 'applySettings'
              }, params));
            },
            backupDevice: function backupDevice(params) {
              return (0, _node.call)(_objectSpread({
                method: 'backupDevice'
              }, params));
            },
            changePin: function changePin(params) {
              return (0, _node.call)(_objectSpread({
                method: 'changePin'
              }, params));
            },
            firmwareUpdate: function firmwareUpdate(params) {
              return (0, _node.call)(_objectSpread({
                method: 'firmwareUpdate'
              }, params));
            },
            recoveryDevice: function recoveryDevice(params) {
              return (0, _node.call)(_objectSpread({
                method: 'recoveryDevice'
              }, params));
            },
            getCoinInfo: function getCoinInfo(params) {
              return (0, _node.call)(_objectSpread({
                method: 'getCoinInfo'
              }, params));
            },
            rebootToBootloader: function rebootToBootloader(params) {
              return (0, _node.call)(_objectSpread({
                method: 'rebootToBootloader'
              }, params));
            },
            dispose: _node.dispose,
            cancel: _node.cancel,
            renderWebUSBButton: _node.renderWebUSBButton,
            disableWebUSB: _node.disableWebUSB
          };
          var _default = TrezorConnect;
          exports["default"] = _default;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\message\\builder.js", { "../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\message\builder.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.BlockchainMessage = exports.ResponseMessage = exports.TransportMessage = exports.DeviceMessage = exports.UiMessage = void 0;

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          var _constants = require("../constants");

          function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          var UiMessage = function UiMessage(type, payload) {
            return {
              event: _constants.UI_EVENT,
              type: type,
              payload: payload
            };
          };

          exports.UiMessage = UiMessage;

          var DeviceMessage = function DeviceMessage(type, payload) {
            return {
              event: _constants.DEVICE_EVENT,
              type: type,
              payload: payload
            };
          };

          exports.DeviceMessage = DeviceMessage;

          var TransportMessage = function TransportMessage(type, payload) {
            return {
              event: _constants.TRANSPORT_EVENT,
              type: type,
              // convert Error/TypeError object into payload error type (Error object/class is converted to string while sent via postMessage)
              payload: payload.error ? _objectSpread(_objectSpread({}, payload), {}, {
                error: payload.error.message,
                code: payload.error.code
              }) : payload
            };
          };

          exports.TransportMessage = TransportMessage;

          var ResponseMessage = function ResponseMessage(id, success, payload) {
            if (payload === void 0) {
              payload = null;
            }

            return {
              event: _constants.RESPONSE_EVENT,
              type: _constants.RESPONSE_EVENT,
              id: id,
              success: success,
              // convert Error/TypeError object into payload error type (Error object/class is converted to string while sent via postMessage)
              payload: success ? payload : {
                error: payload.error.message,
                code: payload.error.code
              }
            };
          };

          exports.ResponseMessage = ResponseMessage;

          var BlockchainMessage = function BlockchainMessage(type, payload) {
            return {
              event: _constants.BLOCKCHAIN_EVENT,
              type: type,
              payload: payload
            };
          };

          exports.BlockchainMessage = BlockchainMessage;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\message\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\message\index.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.errorMessage = exports.parseMessage = void 0;

          // parse MessageEvent .data into CoreMessage
          var parseMessage = function parseMessage(messageData) {
            var message = {
              event: messageData.event,
              type: messageData.type,
              payload: messageData.payload
            };

            if (typeof messageData.id === 'number') {
              message.id = messageData.id;
            }

            if (typeof messageData.success === 'boolean') {
              message.success = messageData.success;
            }

            return message;
          }; // common response used straight from npm index (not from Core)


          exports.parseMessage = parseMessage;

          var errorMessage = function errorMessage(error) {
            return {
              success: false,
              payload: {
                error: error.message,
                code: error.code
              }
            };
          };

          exports.errorMessage = errorMessage;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\plugins\\ethereum\\typedData.js", { "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@metamask/eth-sig-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\eth-sig-util\\dist\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\plugins\ethereum\typedData.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          // eslint-disable-next-line import/no-unresolved
          var sigUtil = require('@metamask/eth-sig-util'); // Sanitization is used for T1 as eth-sig-util does not support BigInt


          function sanitizeData(data) {
            switch (Object.prototype.toString.call(data)) {
              case '[object Object]':
                {
                  var entries = Object.keys(data).map(function (k) {
                    return [k, sanitizeData(data[k])];
                  });
                  return Object.fromEntries(entries);
                }

              case '[object Array]':
                return data.map(function (v) {
                  return sanitizeData(v);
                });

              case '[object BigInt]':
                return data.toString();

              default:
                return data;
            }
          }

          var transformTypedData = function transformTypedData(data, metamask_v4_compat) {
            if (!metamask_v4_compat) {
              throw new Error('Trezor: Only version 4 of typed data signing is supported');
            }

            var version = sigUtil.SignTypedDataVersion.V4;

            var _sigUtil$TypedDataUti = sigUtil.TypedDataUtils.sanitizeData(data),
              types = _sigUtil$TypedDataUti.types,
              primaryType = _sigUtil$TypedDataUti.primaryType,
              domain = _sigUtil$TypedDataUti.domain,
              message = _sigUtil$TypedDataUti.message;

            var domainSeparatorHash = sigUtil.TypedDataUtils.hashStruct('EIP712Domain', sanitizeData(domain), types, version).toString('hex');
            var messageHash = sigUtil.TypedDataUtils.hashStruct(primaryType, sanitizeData(message), types, version).toString('hex');
            return _objectSpread({
              domain_separator_hash: domainSeparatorHash,
              message_hash: messageHash
            }, data);
          };

          module.exports = transformTypedData;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\popup\\PopupManager.js", { "../constants/iframe": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\iframe.js", "../constants/popup": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\popup.js", "../constants/ui": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\ui.js", "../env/browser/networkUtils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\env\\browser\\networkUtils.js", "../utils/deferred": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\utils\\deferred.js", "./showPopupRequest": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\popup\\showPopupRequest.js", "@babel/runtime/helpers/assertThisInitialized": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\assertThisInitialized.js", "@babel/runtime/helpers/asyncToGenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js", "@babel/runtime/helpers/defineProperty": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js", "@babel/runtime/helpers/inheritsLoose": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\inheritsLoose.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/regenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\regenerator\\index.js", "events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\popup\PopupManager.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports["default"] = void 0;

          var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

          var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

          var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

          var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

          var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

          var _events = _interopRequireDefault(require("events"));

          var POPUP = _interopRequireWildcard(require("../constants/popup"));

          var IFRAME = _interopRequireWildcard(require("../constants/iframe"));

          var UI = _interopRequireWildcard(require("../constants/ui"));

          var _showPopupRequest = require("./showPopupRequest");

          var _networkUtils = require("../env/browser/networkUtils");

          var _deferred = require("../utils/deferred");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          // const POPUP_REQUEST_TIMEOUT = 602;
          var POPUP_REQUEST_TIMEOUT = 850;
          var POPUP_CLOSE_INTERVAL = 500;
          var POPUP_OPEN_TIMEOUT = 3000;

          var PopupManager = /*#__PURE__*/function (_EventEmitter) {
            (0, _inheritsLoose2["default"])(PopupManager, _EventEmitter);

            // Window
            function PopupManager(settings) {
              var _this;

              _this = _EventEmitter.call(this) || this;
              (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "requestTimeout", 0);
              (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "closeInterval", 0);
              (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "extensionTabId", 0);
              _this.settings = settings;
              _this.origin = (0, _networkUtils.getOrigin)(settings.popupSrc);
              _this.handleMessage = _this.handleMessage.bind((0, _assertThisInitialized2["default"])(_this));
              _this.iframeHandshake = (0, _deferred.create)(IFRAME.LOADED);

              if (_this.settings.env === 'webextension') {
                _this.handleExtensionConnect = _this.handleExtensionConnect.bind((0, _assertThisInitialized2["default"])(_this));
                _this.handleExtensionMessage = _this.handleExtensionMessage.bind((0, _assertThisInitialized2["default"])(_this)); // $FlowIssue chrome not declared outside

                chrome.runtime.onConnect.addListener(_this.handleExtensionConnect);
              }

              window.addEventListener('message', _this.handleMessage, false);
              return _this;
            }

            var _proto = PopupManager.prototype;

            _proto.request = function request(lazyLoad) {
              var _this2 = this;

              if (lazyLoad === void 0) {
                lazyLoad = false;
              }

              // popup request
              // TODO: ie - open immediately and hide it but post handshake after timeout
              // bring popup window to front
              if (this.locked) {
                if (this._window) {
                  if (this.settings.env === 'webextension') {
                    // $FlowIssue chrome not declared outside
                    chrome.tabs.update(this._window.id, {
                      active: true
                    });
                  } else {
                    this._window.focus();
                  }
                }

                return;
              }

              var openFn = this.open.bind(this);
              this.locked = true;

              if (!this.settings.supportedBrowser) {
                openFn();
              } else {
                var timeout = lazyLoad || this.settings.env === 'webextension' ? 1 : POPUP_REQUEST_TIMEOUT;
                this.requestTimeout = window.setTimeout(function () {
                  _this2.requestTimeout = 0;
                  openFn(lazyLoad);
                }, timeout);
              }
            };

            _proto.cancel = function cancel() {
              this.close();
            };

            _proto.unlock = function unlock() {
              this.locked = false;
            };

            _proto.open = function open(lazyLoad) {
              var _this3 = this;

              var src = this.settings.popupSrc;

              if (!this.settings.supportedBrowser) {
                this.openWrapper(src + "#unsupported");
                return;
              }

              this.popupPromise = (0, _deferred.create)(POPUP.LOADED);
              this.openWrapper(lazyLoad ? src + "#loading" : src);
              this.closeInterval = window.setInterval(function () {
                if (!_this3._window) return;

                if (_this3.settings.env === 'webextension') {
                  // $FlowIssue chrome not declared outside
                  chrome.tabs.get(_this3._window.id, function (tab) {
                    if (!tab) {
                      _this3.close();

                      _this3.emit(POPUP.CLOSED);
                    }
                  });
                } else if (_this3._window.closed) {
                  _this3.close();

                  _this3.emit(POPUP.CLOSED);
                }
              }, POPUP_CLOSE_INTERVAL); // open timeout will be cancelled by POPUP.BOOTSTRAP message

              this.openTimeout = window.setTimeout(function () {
                _this3.close();

                (0, _showPopupRequest.showPopupRequest)(_this3.open.bind(_this3), function () {
                  _this3.emit(POPUP.CLOSED);
                });
              }, POPUP_OPEN_TIMEOUT);
            };

            _proto.openWrapper = function openWrapper(url) {
              var _this4 = this;

              if (this.settings.env === 'webextension') {
                // $FlowIssue chrome not declared outside
                chrome.windows.getCurrent(null, function (currentWindow) {
                  // Request coming from extension popup,
                  // create new window above instead of opening new tab
                  if (currentWindow.type !== 'normal') {
                    // $FlowIssue chrome not declared outside
                    chrome.windows.create({
                      url: url
                    }, function (newWindow) {
                      // $FlowIssue chrome not declared outside
                      chrome.tabs.query({
                        windowId: newWindow.id,
                        active: true
                      }, function (tabs) {
                        // eslint-disable-next-line prefer-destructuring
                        _this4._window = tabs[0];
                      });
                    });
                  } else {
                    // $FlowIssue chrome not declared outside
                    chrome.tabs.query({
                      currentWindow: true,
                      active: true
                    }, function (tabs) {
                      _this4.extensionTabId = tabs[0].id; // $FlowIssue chrome not declared outside

                      chrome.tabs.create({
                        url: url,
                        index: tabs[0].index + 1
                      }, function (tab) {
                        _this4._window = tab;
                      });
                    });
                  }
                });
              } else if (this.settings.env === 'electron') {
                this._window = window.open(url, 'modal');
              } else {
                this._window = window.open('', '_blank');

                if (this._window) {
                  this._window.location.href = url; // otherwise android/chrome loose window.opener reference
                }
              }
            };

            _proto.handleExtensionConnect = function handleExtensionConnect(port) {
              if (port.name !== 'trezor-connect') return;

              if (!this._window || this._window && this._window.id !== port.sender.tab.id) {
                port.disconnect();
                return;
              } // since POPUP.BOOTSTRAP will not be handled by "handleMessage" we need to threat "content-script" connection as the same event
              // popup is opened properly, now wait for POPUP.LOADED message (in this case handled by "handleExtensionMessage")


              window.clearTimeout(this.openTimeout);
              this.extensionPort = port; // $FlowIssue need to update ChromePort definition

              this.extensionPort.onMessage.addListener(this.handleExtensionMessage);
            };

            _proto.handleExtensionMessage = function handleExtensionMessage(message) {
              var _this5 = this;

              if (!this.extensionPort) return;
              var port = this.extensionPort;
              var data = message.data;
              if (!data || typeof data !== 'object') return;

              if (data.type === POPUP.ERROR) {
                // handle popup error
                var errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;
                this.emit(POPUP.CLOSED, errorMessage ? "Popup error: " + errorMessage : null);
                this.close();
              } else if (data.type === POPUP.LOADED) {
                if (this.popupPromise) {
                  this.popupPromise.resolve();
                }

                this.iframeHandshake.promise.then(function (useBroadcastChannel) {
                  port.postMessage({
                    type: POPUP.INIT,
                    payload: {
                      settings: _this5.settings,
                      useBroadcastChannel: useBroadcastChannel
                    }
                  });
                });
              } else if (data.type === POPUP.EXTENSION_USB_PERMISSIONS) {
                // $FlowIssue chrome not declared outside
                chrome.tabs.query({
                  currentWindow: true,
                  active: true
                }, function (tabs) {
                  // $FlowIssue chrome not declared outside
                  chrome.tabs.create({
                    url: 'trezor-usb-permissions.html',
                    index: tabs[0].index + 1
                  }, function (_tab) {// do nothing
                  });
                });
              } else if (data.type === POPUP.CLOSE_WINDOW) {
                this.emit(POPUP.CLOSED);
                this.close();
              }
            };

            _proto.handleMessage = function handleMessage(message) {
              var _this6 = this;

              // ignore messages from domain other then popup origin and without data
              // const data: CoreMessage = message.data;
              var data = message.data;
              if ((0, _networkUtils.getOrigin)(message.origin) !== this.origin || !data || typeof data !== 'object') return;

              if (data.type === IFRAME.LOADED) {
                var useBroadcastChannel = data.payload && typeof data.payload.useBroadcastChannel === 'boolean' ? data.payload.useBroadcastChannel : false;
                this.iframeHandshake.resolve(useBroadcastChannel);
              } else if (data.type === POPUP.BOOTSTRAP) {
                // popup is opened properly, now wait for POPUP.LOADED message
                window.clearTimeout(this.openTimeout);
              } else if (data.type === POPUP.ERROR && this._window) {
                var errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;
                this.emit(POPUP.CLOSED, errorMessage ? "Popup error: " + errorMessage : null);
                this.close();
              } else if (data.type === POPUP.LOADED) {
                if (this.popupPromise) {
                  this.popupPromise.resolve();
                } // popup is successfully loaded


                this.iframeHandshake.promise.then(function (useBroadcastChannel) {
                  _this6._window.postMessage({
                    type: POPUP.INIT,
                    payload: {
                      settings: _this6.settings,
                      useBroadcastChannel: useBroadcastChannel
                    }
                  }, _this6.origin);
                }); // send ConnectSettings to popup
                // note this settings and iframe.ConnectSettings could be different (especially: origin, popup, webusb, debug)
                // now popup is able to load assets
              } else if (data.type === POPUP.CANCEL_POPUP_REQUEST || data.type === UI.CLOSE_UI_WINDOW) {
                this.close();
              }
            };

            _proto.close = function close() {
              this.locked = false;
              this.popupPromise = undefined;

              if (this.requestTimeout) {
                window.clearTimeout(this.requestTimeout);
                this.requestTimeout = 0;
              }

              if (this.openTimeout) {
                window.clearTimeout(this.openTimeout);
                this.openTimeout = 0;
              }

              if (this.closeInterval) {
                window.clearInterval(this.closeInterval);
                this.closeInterval = 0;
              }

              if (this.extensionPort) {
                this.extensionPort.disconnect();
                this.extensionPort = null;
              } // switch to previously focused tab


              if (this.extensionTabId) {
                // $FlowIssue chrome not declared outside
                chrome.tabs.update(this.extensionTabId, {
                  active: true
                });
                this.extensionTabId = 0;
              }

              if (this._window) {
                if (this.settings.env === 'webextension') {
                  // eslint-disable-next-line no-unused-vars
                  var _e = chrome.runtime.lastError; // $FlowIssue chrome not declared outside

                  chrome.tabs.remove(this._window.id, function () {
                    // eslint-disable-next-line no-unused-vars
                    _e = chrome.runtime.lastError;
                  });
                } else {
                  this._window.close();
                }

                this._window = null;
              }
            };

            _proto.postMessage = /*#__PURE__*/function () {
              var _postMessage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(message) {
                var _this7 = this;

                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!(!this._window && message.type !== UI.REQUEST_UI_WINDOW && this.openTimeout)) {
                          _context.next = 4;
                          break;
                        }

                        this.close();
                        (0, _showPopupRequest.showPopupRequest)(this.open.bind(this), function () {
                          _this7.emit(POPUP.CLOSED);
                        });
                        return _context.abrupt("return");

                      case 4:
                        if (!this.popupPromise) {
                          _context.next = 7;
                          break;
                        }

                        _context.next = 7;
                        return this.popupPromise.promise;

                      case 7:
                        // post message to popup window
                        if (this._window) {
                          this._window.postMessage(message, this.origin);
                        }

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));

              function postMessage(_x) {
                return _postMessage.apply(this, arguments);
              }

              return postMessage;
            }();

            return PopupManager;
          }(_events["default"]);

          exports["default"] = PopupManager;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\popup\\showPopupRequest.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\popup\showPopupRequest.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.showPopupRequest = void 0;
          var LAYER_ID = 'TrezorConnectInteractionLayer';
          var HTML = "\n    <div class=\"trezorconnect-container\" id=\"" + LAYER_ID + "\">\n        <div class=\"trezorconnect-window\">\n            <div class=\"trezorconnect-head\">\n                <svg class=\"trezorconnect-logo\" x=\"0px\" y=\"0px\" viewBox=\"0 0 163.7 41.9\" width=\"78px\" height=\"20px\" preserveAspectRatio=\"xMinYMin meet\">\n                    <polygon points=\"101.1,12.8 118.2,12.8 118.2,17.3 108.9,29.9 118.2,29.9 118.2,35.2 101.1,35.2 101.1,30.7 110.4,18.1 101.1,18.1\"/>\n                    <path d=\"M158.8,26.9c2.1-0.8,4.3-2.9,4.3-6.6c0-4.5-3.1-7.4-7.7-7.4h-10.5v22.3h5.8v-7.5h2.2l4.1,7.5h6.7L158.8,26.9z M154.7,22.5 h-4V18h4c1.5,0,2.5,0.9,2.5,2.2C157.2,21.6,156.2,22.5,154.7,22.5z\"/>\n                    <path d=\"M130.8,12.5c-6.8,0-11.6,4.9-11.6,11.5s4.9,11.5,11.6,11.5s11.7-4.9,11.7-11.5S137.6,12.5,130.8,12.5z M130.8,30.3 c-3.4,0-5.7-2.6-5.7-6.3c0-3.8,2.3-6.3,5.7-6.3c3.4,0,5.8,2.6,5.8,6.3C136.6,27.7,134.2,30.3,130.8,30.3z\"/>\n                    <polygon points=\"82.1,12.8 98.3,12.8 98.3,18 87.9,18 87.9,21.3 98,21.3 98,26.4 87.9,26.4 87.9,30 98.3,30 98.3,35.2 82.1,35.2 \"/>\n                    <path d=\"M24.6,9.7C24.6,4.4,20,0,14.4,0S4.2,4.4,4.2,9.7v3.1H0v22.3h0l14.4,6.7l14.4-6.7h0V12.9h-4.2V9.7z M9.4,9.7 c0-2.5,2.2-4.5,5-4.5s5,2,5,4.5v3.1H9.4V9.7z M23,31.5l-8.6,4l-8.6-4V18.1H23V31.5z\"/>\n                    <path d=\"M79.4,20.3c0-4.5-3.1-7.4-7.7-7.4H61.2v22.3H67v-7.5h2.2l4.1,7.5H80l-4.9-8.3C77.2,26.1,79.4,24,79.4,20.3z M71,22.5h-4V18 h4c1.5,0,2.5,0.9,2.5,2.2C73.5,21.6,72.5,22.5,71,22.5z\"/>\n                    <polygon points=\"40.5,12.8 58.6,12.8 58.6,18.1 52.4,18.1 52.4,35.2 46.6,35.2 46.6,18.1 40.5,18.1 \"/>\n                </svg>\n                <div class=\"trezorconnect-close\">\n                    <svg x=\"0px\" y=\"0px\" viewBox=\"24 24 60 60\" width=\"24px\" height=\"24px\" preserveAspectRatio=\"xMinYMin meet\">\n                        <polygon class=\"st0\" points=\"40,67.9 42.1,70 55,57.1 67.9,70 70,67.9 57.1,55 70,42.1 67.9,40 55,52.9 42.1,40 40,42.1 52.9,55 \"/>\n                    </svg>\n                </div>\n            </div>\n            <div class=\"trezorconnect-body\">\n                <h3>Popup was blocked</h3>\n                <p>Please click to \u201CContinue\u201D to open popup manually</p>\n                <button class=\"trezorconnect-open\">Continue</button>\n            </div>\n        </div>\n    </div>\n";

          var showPopupRequest = function showPopupRequest(open, cancel) {
            if (document.getElementById(LAYER_ID)) {
              return;
            }

            var div = document.createElement('div');
            div.id = LAYER_ID;
            div.className = 'trezorconnect-container';
            div.innerHTML = HTML;

            if (document.body) {
              document.body.appendChild(div);
            }

            var button = div.getElementsByClassName('trezorconnect-open')[0];

            button.onclick = function () {
              open();

              if (document.body) {
                document.body.removeChild(div);
              }
            };

            var close = div.getElementsByClassName('trezorconnect-close')[0];

            close.onclick = function () {
              cancel();

              if (document.body) {
                document.body.removeChild(div);
              }
            };
          };

          exports.showPopupRequest = showPopupRequest;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\account.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\account.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\api.js", { "../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js", "./account": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\account.js", "./backend/blockchain": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\backend\\blockchain.js", "./events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\events.js", "./misc": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\misc.js", "./networks/binance": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\binance.js", "./networks/bitcoin": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\bitcoin.js", "./networks/cardano": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\cardano.js", "./networks/coinInfo": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\coinInfo.js", "./networks/eos": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\eos.js", "./networks/ethereum": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ethereum.js", "./networks/nem": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\nem.js", "./networks/ripple": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ripple.js", "./networks/stellar": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\stellar.js", "./networks/tezos": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\tezos.js", "./params": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\params.js", "./trezor/device": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\device.js", "./trezor/management": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\management.js", "./trezor/protobuf": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\protobuf.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\api.js
        return function (require, module, exports) {
          "use strict";

          var CONSTANTS = _interopRequireWildcard(require("../constants"));

          var P = _interopRequireWildcard(require("./params"));

          var Device = _interopRequireWildcard(require("./trezor/device"));

          var Mgmnt = _interopRequireWildcard(require("./trezor/management"));

          var Protobuf = _interopRequireWildcard(require("./trezor/protobuf"));

          var Account = _interopRequireWildcard(require("./account"));

          var Bitcoin = _interopRequireWildcard(require("./networks/bitcoin"));

          var Binance = _interopRequireWildcard(require("./networks/binance"));

          var Cardano = _interopRequireWildcard(require("./networks/cardano"));

          var CoinInfo = _interopRequireWildcard(require("./networks/coinInfo"));

          var EOS = _interopRequireWildcard(require("./networks/eos"));

          var Ethereum = _interopRequireWildcard(require("./networks/ethereum"));

          var NEM = _interopRequireWildcard(require("./networks/nem"));

          var Ripple = _interopRequireWildcard(require("./networks/ripple"));

          var Stellar = _interopRequireWildcard(require("./networks/stellar"));

          var Tezos = _interopRequireWildcard(require("./networks/tezos"));

          var Misc = _interopRequireWildcard(require("./misc"));

          var Events = _interopRequireWildcard(require("./events"));

          var Blockchain = _interopRequireWildcard(require("./backend/blockchain"));

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\backend\\blockchain.js", { "../../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\backend\blockchain.js
        return function (require, module, exports) {
          "use strict";

          var _constants = require("../../constants");
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\backend\\transactions.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\backend\transactions.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\events.js", { "../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\events.js
        return function (require, module, exports) {
          "use strict";

          var _constants = require("../constants");
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\index.js", { "./account": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\account.js", "./api": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\api.js", "./backend/blockchain": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\backend\\blockchain.js", "./backend/transactions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\backend\\transactions.js", "./events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\events.js", "./misc": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\misc.js", "./networks/binance": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\binance.js", "./networks/bitcoin": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\bitcoin.js", "./networks/cardano": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\cardano.js", "./networks/coinInfo": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\coinInfo.js", "./networks/eos": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\eos.js", "./networks/ethereum": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ethereum.js", "./networks/nem": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\nem.js", "./networks/ripple": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ripple.js", "./networks/stellar": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\stellar.js", "./networks/tezos": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\tezos.js", "./params": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\params.js", "./trezor/device": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\device.js", "./trezor/management": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\management.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\index.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;

          var _api = require("./api");

          Object.keys(_api).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _api[key]) return;
            exports[key] = _api[key];
          });

          var _events = require("./events");

          Object.keys(_events).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _events[key]) return;
            exports[key] = _events[key];
          });

          var _misc = require("./misc");

          Object.keys(_misc).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _misc[key]) return;
            exports[key] = _misc[key];
          });

          var _params = require("./params");

          Object.keys(_params).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _params[key]) return;
            exports[key] = _params[key];
          });

          var _account = require("./account");

          Object.keys(_account).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _account[key]) return;
            exports[key] = _account[key];
          });

          var _device = require("./trezor/device");

          Object.keys(_device).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _device[key]) return;
            exports[key] = _device[key];
          });

          var _management = require("./trezor/management");

          Object.keys(_management).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _management[key]) return;
            exports[key] = _management[key];
          });

          var _bitcoin = require("./networks/bitcoin");

          Object.keys(_bitcoin).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _bitcoin[key]) return;
            exports[key] = _bitcoin[key];
          });

          var _binance = require("./networks/binance");

          Object.keys(_binance).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _binance[key]) return;
            exports[key] = _binance[key];
          });

          var _cardano = require("./networks/cardano");

          Object.keys(_cardano).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _cardano[key]) return;
            exports[key] = _cardano[key];
          });

          var _coinInfo = require("./networks/coinInfo");

          Object.keys(_coinInfo).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _coinInfo[key]) return;
            exports[key] = _coinInfo[key];
          });

          var _eos = require("./networks/eos");

          Object.keys(_eos).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _eos[key]) return;
            exports[key] = _eos[key];
          });

          var _ethereum = require("./networks/ethereum");

          Object.keys(_ethereum).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _ethereum[key]) return;
            exports[key] = _ethereum[key];
          });

          var _nem = require("./networks/nem");

          Object.keys(_nem).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _nem[key]) return;
            exports[key] = _nem[key];
          });

          var _ripple = require("./networks/ripple");

          Object.keys(_ripple).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _ripple[key]) return;
            exports[key] = _ripple[key];
          });

          var _stellar = require("./networks/stellar");

          Object.keys(_stellar).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _stellar[key]) return;
            exports[key] = _stellar[key];
          });

          var _tezos = require("./networks/tezos");

          Object.keys(_tezos).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _tezos[key]) return;
            exports[key] = _tezos[key];
          });

          var _blockchain = require("./backend/blockchain");

          Object.keys(_blockchain).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _blockchain[key]) return;
            exports[key] = _blockchain[key];
          });

          var _transactions = require("./backend/transactions");

          Object.keys(_transactions).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _transactions[key]) return;
            exports[key] = _transactions[key];
          });
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\misc.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\misc.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\binance.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\binance.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\bitcoin.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\bitcoin.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\cardano.js", { "../trezor/protobuf": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\protobuf.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\cardano.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.CardanoTxWitnessType = exports.CardanoTxSigningMode = exports.CardanoPoolRelayType = exports.CardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptType = exports.CardanoCertificateType = exports.CardanoAddressType = void 0;

          var _protobuf = require("../trezor/protobuf");

          exports.CardanoAddressType = _protobuf.Enum_CardanoAddressType;
          exports.CardanoCertificateType = _protobuf.Enum_CardanoCertificateType;
          exports.CardanoNativeScriptType = _protobuf.Enum_CardanoNativeScriptType;
          exports.CardanoNativeScriptHashDisplayFormat = _protobuf.Enum_CardanoNativeScriptHashDisplayFormat;
          exports.CardanoPoolRelayType = _protobuf.Enum_CardanoPoolRelayType;
          exports.CardanoTxSigningMode = _protobuf.Enum_CardanoTxSigningMode;
          exports.CardanoTxWitnessType = _protobuf.Enum_CardanoTxWitnessType;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\coinInfo.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\coinInfo.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\eos.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\eos.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ethereum.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\ethereum.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\nem.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\nem.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\ripple.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\ripple.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\stellar.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\stellar.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\networks\\tezos.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\networks\tezos.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\params.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\params.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\device.js", { "../../constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\constants\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\trezor\device.js
        return function (require, module, exports) {
          "use strict";

          var _constants = require("../../constants");
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\management.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\trezor\management.js
        return function (require, module, exports) {
          "use strict";
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\types\\trezor\\protobuf.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\types\trezor\protobuf.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.Enum_TezosBallotType = exports.Enum_TezosContractType = exports.Enum_StellarSignerType = exports.Enum_StellarMemoType = exports.Enum_StellarAssetType = exports.Enum_NEMImportanceTransferMode = exports.Enum_NEMModificationType = exports.Enum_NEMSupplyChangeType = exports.Enum_NEMMosaicLevy = exports.Enum_WordRequestType = exports.Enum_RecoveryDeviceType = exports.Enum_SdProtectOperationType = exports.Enum_Capability = exports.Enum_SafetyCheckLevel = exports.Enum_BackupType = exports.Enum_EthereumDataType = exports.Enum_PinMatrixRequestType = exports.Enum_ButtonRequestType = exports.Enum_FailureType = exports.Enum_CardanoTxWitnessType = exports.Enum_CardanoTxSigningMode = exports.Enum_CardanoTxAuxiliaryDataSupplementType = exports.Enum_CardanoPoolRelayType = exports.Enum_CardanoCertificateType = exports.Enum_CardanoNativeScriptHashDisplayFormat = exports.Enum_CardanoNativeScriptType = exports.Enum_CardanoAddressType = exports.Enum_CardanoDerivationType = exports.Enum_RequestType = exports.Enum_AmountUnit = exports.Enum_DecredStakingSpendType = exports.Enum_OutputScriptType = exports.Enum_InputScriptType = exports.Enum_BinanceTimeInForce = exports.Enum_BinanceOrderSide = exports.Enum_BinanceOrderType = void 0;
          // This file is auto generated from data/messages/message.json
          // custom type uint32/64 may be represented as string
          // BinanceGetAddress
          // BinanceAddress
          // BinanceGetPublicKey
          // BinancePublicKey
          // BinanceSignTx
          // BinanceTxRequest
          // BinanceTransferMsg
          var Enum_BinanceOrderType = Object.freeze({
            OT_UNKNOWN: 0,
            MARKET: 1,
            LIMIT: 2,
            OT_RESERVED: 3
          });
          exports.Enum_BinanceOrderType = Enum_BinanceOrderType;
          var Enum_BinanceOrderSide = Object.freeze({
            SIDE_UNKNOWN: 0,
            BUY: 1,
            SELL: 2
          });
          exports.Enum_BinanceOrderSide = Enum_BinanceOrderSide;
          var Enum_BinanceTimeInForce = Object.freeze({
            TIF_UNKNOWN: 0,
            GTE: 1,
            TIF_RESERVED: 2,
            IOC: 3
          });
          exports.Enum_BinanceTimeInForce = Enum_BinanceTimeInForce;
          var Enum_InputScriptType = Object.freeze({
            SPENDADDRESS: 0,
            SPENDMULTISIG: 1,
            EXTERNAL: 2,
            SPENDWITNESS: 3,
            SPENDP2SHWITNESS: 4,
            SPENDTAPROOT: 5
          });
          exports.Enum_InputScriptType = Enum_InputScriptType;
          var Enum_OutputScriptType = Object.freeze({
            PAYTOADDRESS: 0,
            PAYTOSCRIPTHASH: 1,
            PAYTOMULTISIG: 2,
            PAYTOOPRETURN: 3,
            PAYTOWITNESS: 4,
            PAYTOP2SHWITNESS: 5,
            PAYTOTAPROOT: 6
          });
          exports.Enum_OutputScriptType = Enum_OutputScriptType;
          var Enum_DecredStakingSpendType = Object.freeze({
            SSGen: 0,
            SSRTX: 1
          });
          exports.Enum_DecredStakingSpendType = Enum_DecredStakingSpendType;
          var Enum_AmountUnit = Object.freeze({
            BITCOIN: 0,
            MILLIBITCOIN: 1,
            MICROBITCOIN: 2,
            SATOSHI: 3
          });
          exports.Enum_AmountUnit = Enum_AmountUnit;
          var Enum_RequestType = Object.freeze({
            TXINPUT: 0,
            TXOUTPUT: 1,
            TXMETA: 2,
            TXFINISHED: 3,
            TXEXTRADATA: 4,
            TXORIGINPUT: 5,
            TXORIGOUTPUT: 6
          });
          exports.Enum_RequestType = Enum_RequestType;
          var Enum_CardanoDerivationType = Object.freeze({
            LEDGER: 0,
            ICARUS: 1,
            ICARUS_TREZOR: 2
          });
          exports.Enum_CardanoDerivationType = Enum_CardanoDerivationType;
          var Enum_CardanoAddressType = Object.freeze({
            BASE: 0,
            BASE_SCRIPT_KEY: 1,
            BASE_KEY_SCRIPT: 2,
            BASE_SCRIPT_SCRIPT: 3,
            POINTER: 4,
            POINTER_SCRIPT: 5,
            ENTERPRISE: 6,
            ENTERPRISE_SCRIPT: 7,
            BYRON: 8,
            REWARD: 14,
            REWARD_SCRIPT: 15
          });
          exports.Enum_CardanoAddressType = Enum_CardanoAddressType;
          var Enum_CardanoNativeScriptType = Object.freeze({
            PUB_KEY: 0,
            ALL: 1,
            ANY: 2,
            N_OF_K: 3,
            INVALID_BEFORE: 4,
            INVALID_HEREAFTER: 5
          });
          exports.Enum_CardanoNativeScriptType = Enum_CardanoNativeScriptType;
          var Enum_CardanoNativeScriptHashDisplayFormat = Object.freeze({
            HIDE: 0,
            BECH32: 1,
            POLICY_ID: 2
          });
          exports.Enum_CardanoNativeScriptHashDisplayFormat = Enum_CardanoNativeScriptHashDisplayFormat;
          var Enum_CardanoCertificateType = Object.freeze({
            STAKE_REGISTRATION: 0,
            STAKE_DEREGISTRATION: 1,
            STAKE_DELEGATION: 2,
            STAKE_POOL_REGISTRATION: 3
          });
          exports.Enum_CardanoCertificateType = Enum_CardanoCertificateType;
          var Enum_CardanoPoolRelayType = Object.freeze({
            SINGLE_HOST_IP: 0,
            SINGLE_HOST_NAME: 1,
            MULTIPLE_HOST_NAME: 2
          });
          exports.Enum_CardanoPoolRelayType = Enum_CardanoPoolRelayType;
          var Enum_CardanoTxAuxiliaryDataSupplementType = Object.freeze({
            NONE: 0,
            CATALYST_REGISTRATION_SIGNATURE: 1
          });
          exports.Enum_CardanoTxAuxiliaryDataSupplementType = Enum_CardanoTxAuxiliaryDataSupplementType;
          var Enum_CardanoTxSigningMode = Object.freeze({
            ORDINARY_TRANSACTION: 0,
            POOL_REGISTRATION_AS_OWNER: 1,
            MULTISIG_TRANSACTION: 2
          });
          exports.Enum_CardanoTxSigningMode = Enum_CardanoTxSigningMode;
          var Enum_CardanoTxWitnessType = Object.freeze({
            BYRON_WITNESS: 0,
            SHELLEY_WITNESS: 1
          });
          exports.Enum_CardanoTxWitnessType = Enum_CardanoTxWitnessType;
          var Enum_FailureType = Object.freeze({
            Failure_UnexpectedMessage: 1,
            Failure_ButtonExpected: 2,
            Failure_DataError: 3,
            Failure_ActionCancelled: 4,
            Failure_PinExpected: 5,
            Failure_PinCancelled: 6,
            Failure_PinInvalid: 7,
            Failure_InvalidSignature: 8,
            Failure_ProcessError: 9,
            Failure_NotEnoughFunds: 10,
            Failure_NotInitialized: 11,
            Failure_PinMismatch: 12,
            Failure_WipeCodeMismatch: 13,
            Failure_InvalidSession: 14,
            Failure_FirmwareError: 99
          });
          exports.Enum_FailureType = Enum_FailureType;
          var Enum_ButtonRequestType = Object.freeze({
            ButtonRequest_Other: 1,
            ButtonRequest_FeeOverThreshold: 2,
            ButtonRequest_ConfirmOutput: 3,
            ButtonRequest_ResetDevice: 4,
            ButtonRequest_ConfirmWord: 5,
            ButtonRequest_WipeDevice: 6,
            ButtonRequest_ProtectCall: 7,
            ButtonRequest_SignTx: 8,
            ButtonRequest_FirmwareCheck: 9,
            ButtonRequest_Address: 10,
            ButtonRequest_PublicKey: 11,
            ButtonRequest_MnemonicWordCount: 12,
            ButtonRequest_MnemonicInput: 13,
            _Deprecated_ButtonRequest_PassphraseType: 14,
            ButtonRequest_UnknownDerivationPath: 15,
            ButtonRequest_RecoveryHomepage: 16,
            ButtonRequest_Success: 17,
            ButtonRequest_Warning: 18,
            ButtonRequest_PassphraseEntry: 19,
            ButtonRequest_PinEntry: 20
          });
          exports.Enum_ButtonRequestType = Enum_ButtonRequestType;
          var Enum_PinMatrixRequestType = Object.freeze({
            PinMatrixRequestType_Current: 1,
            PinMatrixRequestType_NewFirst: 2,
            PinMatrixRequestType_NewSecond: 3,
            PinMatrixRequestType_WipeCodeFirst: 4,
            PinMatrixRequestType_WipeCodeSecond: 5
          });
          exports.Enum_PinMatrixRequestType = Enum_PinMatrixRequestType;
          var Enum_EthereumDataType = Object.freeze({
            UINT: 1,
            INT: 2,
            BYTES: 3,
            STRING: 4,
            BOOL: 5,
            ADDRESS: 6,
            ARRAY: 7,
            STRUCT: 8
          });
          exports.Enum_EthereumDataType = Enum_EthereumDataType;
          var Enum_BackupType = Object.freeze({
            Bip39: 0,
            Slip39_Basic: 1,
            Slip39_Advanced: 2
          });
          exports.Enum_BackupType = Enum_BackupType;
          var Enum_SafetyCheckLevel = Object.freeze({
            Strict: 0,
            PromptAlways: 1,
            PromptTemporarily: 2
          });
          exports.Enum_SafetyCheckLevel = Enum_SafetyCheckLevel;
          var Enum_Capability = Object.freeze({
            Capability_Bitcoin: 1,
            Capability_Bitcoin_like: 2,
            Capability_Binance: 3,
            Capability_Cardano: 4,
            Capability_Crypto: 5,
            Capability_EOS: 6,
            Capability_Ethereum: 7,
            Capability_Lisk: 8,
            Capability_Monero: 9,
            Capability_NEM: 10,
            Capability_Ripple: 11,
            Capability_Stellar: 12,
            Capability_Tezos: 13,
            Capability_U2F: 14,
            Capability_Shamir: 15,
            Capability_ShamirGroups: 16,
            Capability_PassphraseEntry: 17
          });
          exports.Enum_Capability = Enum_Capability;
          var Enum_SdProtectOperationType = Object.freeze({
            DISABLE: 0,
            ENABLE: 1,
            REFRESH: 2
          });
          exports.Enum_SdProtectOperationType = Enum_SdProtectOperationType;
          var Enum_RecoveryDeviceType = Object.freeze({
            RecoveryDeviceType_ScrambledWords: 0,
            RecoveryDeviceType_Matrix: 1
          });
          exports.Enum_RecoveryDeviceType = Enum_RecoveryDeviceType;
          var Enum_WordRequestType = Object.freeze({
            WordRequestType_Plain: 0,
            WordRequestType_Matrix9: 1,
            WordRequestType_Matrix6: 2
          });
          exports.Enum_WordRequestType = Enum_WordRequestType;
          var Enum_NEMMosaicLevy = Object.freeze({
            MosaicLevy_Absolute: 1,
            MosaicLevy_Percentile: 2
          });
          exports.Enum_NEMMosaicLevy = Enum_NEMMosaicLevy;
          var Enum_NEMSupplyChangeType = Object.freeze({
            SupplyChange_Increase: 1,
            SupplyChange_Decrease: 2
          });
          exports.Enum_NEMSupplyChangeType = Enum_NEMSupplyChangeType;
          var Enum_NEMModificationType = Object.freeze({
            CosignatoryModification_Add: 1,
            CosignatoryModification_Delete: 2
          });
          exports.Enum_NEMModificationType = Enum_NEMModificationType;
          var Enum_NEMImportanceTransferMode = Object.freeze({
            ImportanceTransfer_Activate: 1,
            ImportanceTransfer_Deactivate: 2
          });
          exports.Enum_NEMImportanceTransferMode = Enum_NEMImportanceTransferMode;
          var Enum_StellarAssetType = Object.freeze({
            NATIVE: 0,
            ALPHANUM4: 1,
            ALPHANUM12: 2
          });
          exports.Enum_StellarAssetType = Enum_StellarAssetType;
          var Enum_StellarMemoType = Object.freeze({
            NONE: 0,
            TEXT: 1,
            ID: 2,
            HASH: 3,
            RETURN: 4
          });
          exports.Enum_StellarMemoType = Enum_StellarMemoType;
          var Enum_StellarSignerType = Object.freeze({
            ACCOUNT: 0,
            PRE_AUTH: 1,
            HASH: 2
          });
          exports.Enum_StellarSignerType = Enum_StellarSignerType;
          var Enum_TezosContractType = Object.freeze({
            Implicit: 0,
            Originated: 1
          });
          exports.Enum_TezosContractType = Enum_TezosContractType;
          var Enum_TezosBallotType = Object.freeze({
            Yay: 0,
            Nay: 1,
            Pass: 2
          });
          exports.Enum_TezosBallotType = Enum_TezosBallotType;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\utils\\debug.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\utils\debug.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.getLog = exports.enableLogByPrefix = exports.enableLog = exports.initLog = void 0;

          /* eslint-disable no-console */
          var colors = {
            // green
            DescriptorStream: 'color: #77ab59',
            DeviceList: 'color: #36802d',
            Device: 'color: #bada55',
            Core: 'color: #c9df8a',
            IFrame: 'color: #FFFFFF; background: #f4a742;',
            Popup: 'color: #f48a00'
          };
          var MAX_ENTRIES = 100;

          var Log = /*#__PURE__*/function () {
            function Log(prefix, enabled) {
              this.prefix = prefix;
              this.enabled = enabled;
              this.messages = [];
              this.css = colors[prefix] || 'color: #000000; background: #FFFFFF;';
            }

            var _proto = Log.prototype;

            _proto.addMessage = function addMessage(level, prefix) {
              for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
              }

              this.messages.push({
                level: level,
                prefix: prefix,
                message: args,
                timestamp: new Date().getTime()
              });

              if (this.messages.length > MAX_ENTRIES) {
                this.messages.shift();
              }
            };

            _proto.log = function log() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              this.addMessage.apply(this, ['log', this.prefix].concat(args));

              if (this.enabled) {
                var _console;

                (_console = console).log.apply(_console, [this.prefix].concat(args));
              }
            };

            _proto.error = function error() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }

              this.addMessage.apply(this, ['error', this.prefix].concat(args));

              if (this.enabled) {
                var _console2;

                (_console2 = console).error.apply(_console2, [this.prefix].concat(args));
              }
            };

            _proto.warn = function warn() {
              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
              }

              this.addMessage.apply(this, ['warn', this.prefix].concat(args));

              if (this.enabled) {
                var _console3;

                (_console3 = console).warn.apply(_console3, [this.prefix].concat(args));
              }
            };

            _proto.debug = function debug() {
              for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                args[_key5] = arguments[_key5];
              }

              this.addMessage.apply(this, ['debug', this.prefix].concat(args));

              if (this.enabled) {
                var _console4;

                (_console4 = console).log.apply(_console4, ["%c" + this.prefix, this.css].concat(args));
              }
            };

            return Log;
          }();

          var _logs = {};

          var initLog = function initLog(prefix, enabled) {
            var instance = new Log(prefix, !!enabled);
            _logs[prefix] = instance;
            return instance;
          };

          exports.initLog = initLog;

          var enableLog = function enableLog(enabled) {
            Object.keys(_logs).forEach(function (key) {
              _logs[key].enabled = enabled;
            });
          };

          exports.enableLog = enableLog;

          var enableLogByPrefix = function enableLogByPrefix(prefix, enabled) {
            if (_logs[prefix]) {
              _logs[prefix].enabled = enabled;
            }
          };

          exports.enableLogByPrefix = enableLogByPrefix;

          var getLog = function getLog() {
            var logs = [];
            Object.keys(_logs).forEach(function (key) {
              logs = logs.concat(_logs[key].messages);
            });
            logs.sort(function (a, b) {
              return a.timestamp - b.timestamp;
            });
            return logs;
          };

          exports.getLog = getLog;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\utils\\deferred.js", { "@babel/runtime/helpers/asyncToGenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js", "@babel/runtime/helpers/interopRequireDefault": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js", "@babel/runtime/regenerator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@babel\\runtime\\regenerator\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\utils\deferred.js
        return function (require, module, exports) {
          "use strict";

          var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

          exports.__esModule = true;
          exports.create = create;
          exports.createAsync = createAsync;
          exports.resolveTimeoutPromise = resolveTimeoutPromise;
          exports.rejectTimeoutPromise = void 0;

          var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

          var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

          function create(arg, device) {
            var localResolve = function localResolve(_t) { };

            var localReject = function localReject(_e) { };

            var id; // eslint-disable-next-line no-async-promise-executor

            var promise = new Promise( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(resolve, reject) {
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        localResolve = resolve;
                        localReject = reject;

                        if (!(typeof arg === 'function')) {
                          _context.next = 11;
                          break;
                        }

                        _context.prev = 3;
                        _context.next = 6;
                        return arg();

                      case 6:
                        _context.next = 11;
                        break;

                      case 8:
                        _context.prev = 8;
                        _context.t0 = _context["catch"](3);
                        reject(_context.t0);

                      case 11:
                        if (typeof arg === 'string') id = arg;

                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[3, 8]]);
              }));

              return function (_x, _x2) {
                return _ref.apply(this, arguments);
              };
            }());
            return {
              id: id,
              device: device,
              resolve: localResolve,
              reject: localReject,
              promise: promise
            };
          }

          function createAsync(innerFn) {
            var localResolve = function localResolve(_t) { };

            var localReject = function localReject(_e) { };

            var promise = new Promise(function (resolve, reject) {
              localResolve = resolve;
              localReject = reject;
            });

            var inner = /*#__PURE__*/function () {
              var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return innerFn();

                      case 2:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function inner() {
                return _ref2.apply(this, arguments);
              };
            }();

            return {
              resolve: localResolve,
              reject: localReject,
              promise: promise,
              run: function run() {
                inner();
                return promise;
              }
            };
          }

          function resolveTimeoutPromise(delay, result) {
            return new Promise(function (resolve) {
              setTimeout(function () {
                resolve(result);
              }, delay);
            });
          }

          var rejectTimeoutPromise = function rejectTimeoutPromise(delay, error) {
            return new Promise(function (resolve, reject) {
              setTimeout(function () {
                reject(error);
              }, delay);
            });
          };

          exports.rejectTimeoutPromise = rejectTimeoutPromise;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\trezor-connect\\lib\\webusb\\button.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\trezor-connect\lib\webusb\button.js
        return function (require, module, exports) {
          "use strict";

          exports.__esModule = true;
          exports["default"] = void 0;

          var render = function render(className, url, origin) {
            var query = className || '.trezor-webusb-button';
            var buttons = document.querySelectorAll(query);
            var src = url + "?" + Date.now();
            buttons.forEach(function (b) {
              if (b.getElementsByTagName('iframe').length < 1) {
                var bounds = b.getBoundingClientRect();
                var btnIframe = document.createElement('iframe');
                btnIframe.frameBorder = '0';
                btnIframe.width = Math.round(bounds.width) + "px";
                btnIframe.height = Math.round(bounds.height) + "px";
                btnIframe.style.position = 'absolute';
                btnIframe.style.top = '0px';
                btnIframe.style.left = '0px';
                btnIframe.style.zIndex = '1'; // btnIframe.style.opacity = '0'; // this makes click impossible on cross-origin

                btnIframe.setAttribute('allow', 'usb');
                btnIframe.setAttribute('scrolling', 'no');

                btnIframe.onload = function () {
                  btnIframe.contentWindow.postMessage({// style: JSON.stringify( window.getComputedStyle(b) ),
                    // outer: b.outerHTML,
                    // inner: b.innerHTML
                  }, origin);
                };

                btnIframe.src = src; // inject iframe into button

                b.append(btnIframe);
              }
            });
          };

          var _default = render;
          exports["default"] = _default;
        };
      };
    }
  }, { package: "eth-trezor-keyring>trezor-connect", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uint8arrays\\concat.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uint8arrays\concat.js
        return function (require, module, exports) {
          'use strict'

          /**
           * Returns a new Uint8Array created by concatenating the passed ArrayLikes
           *
           * @param {Array<ArrayLike<number>>} arrays
           * @param {number} [length]
           */
          function concat(arrays, length) {
            if (!length) {
              length = arrays.reduce((acc, curr) => acc + curr.length, 0)
            }

            const output = new Uint8Array(length)
            let offset = 0

            for (const arr of arrays) {
              output.set(arr, offset)
              offset += arr.length
            }

            return output
          }

          module.exports = concat

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uint8arrays\\equals.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uint8arrays\equals.js
        return function (require, module, exports) {
          'use strict'

          /**
           * Returns true if the two passed Uint8Arrays have the same content
           *
           * @param {Uint8Array} a
           * @param {Uint8Array} b
           */
          function equals(a, b) {
            if (a === b) {
              return true
            }

            if (a.byteLength !== b.byteLength) {
              return false
            }

            for (let i = 0; i < a.byteLength; i++) {
              if (a[i] !== b[i]) {
                return false
              }
            }

            return true
          }

          module.exports = equals

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uint8arrays\\from-string.js", { "multibase": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uint8arrays\from-string.js
        return function (require, module, exports) {
          'use strict'

          const { encoding: getCodec } = require('multibase')
          const utf8Encoder = new TextEncoder()

          /**
           * @typedef {__import__('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings
           */

          /**
           * Interprets each character in a string as a byte and
           * returns a Uint8Array of those bytes.
           *
           * @param {string} string - The string to turn into an array
           */
          function asciiStringToUint8Array(string) {
            const array = new Uint8Array(string.length)

            for (let i = 0; i < string.length; i++) {
              array[i] = string.charCodeAt(i)
            }

            return array
          }

          /**
           * Create a `Uint8Array` from the passed string
           *
           * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
           *
           * Also `ascii` which is similar to node's 'binary' encoding.
           *
           * @param {string} string
           * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc
           * @returns {Uint8Array}
           */
          function fromString(string, encoding = 'utf8') {
            if (encoding === 'utf8' || encoding === 'utf-8') {
              return utf8Encoder.encode(string)
            }

            if (encoding === 'ascii') {
              return asciiStringToUint8Array(string)
            }

            return getCodec(encoding).decode(string)
          }

          module.exports = fromString

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uint8arrays\\to-string.js", { "multibase": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\multibase\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uint8arrays\to-string.js
        return function (require, module, exports) {
          'use strict'

          const { encoding: getCodec } = require('multibase')
          const utf8Decoder = new TextDecoder('utf8')

          /**
           * @typedef {__import__('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings
           */

          /**
           * Turns a Uint8Array of bytes into a string with each
           * character being the char code of the corresponding byte
           *
           * @param {Uint8Array} array - The array to turn into a string
           */
          function uint8ArrayToAsciiString(array) {
            let string = ''

            for (let i = 0; i < array.length; i++) {
              string += String.fromCharCode(array[i])
            }
            return string
          }

          /**
           * Turns a `Uint8Array` into a string.
           *
           * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
           *
           * Also `ascii` which is similar to node's 'binary' encoding.
           *
           * @param {Uint8Array} array - The array to turn into a string
           * @param {SupportedEncodings} [encoding=utf8] - The encoding to use
           * @returns {string}
           */
          function toString(array, encoding = 'utf8') {
            if (encoding === 'utf8' || encoding === 'utf-8') {
              return utf8Decoder.decode(array)
            }

            if (encoding === 'ascii') {
              return uint8ArrayToAsciiString(array)
            }

            return getCodec(encoding).encode(array)
          }

          module.exports = toString

        };
      };
    }
  }, { package: "@ensdomains/content-hash>cids>uint8arrays", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\decode.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\varint\decode.js
        return function (require, module, exports) {
          module.exports = read

          var MSB = 0x80
            , REST = 0x7F

          function read(buf, offset) {
            var res = 0
              , offset = offset || 0
              , shift = 0
              , counter = offset
              , b
              , l = buf.length

            do {
              if (counter >= l) {
                read.bytes = 0
                throw new RangeError('Could not decode varint')
              }
              b = buf[counter++]
              res += shift < 28
                ? (b & REST) << shift
                : (b & REST) * Math.pow(2, shift)
              shift += 7
            } while (b >= MSB)

            read.bytes = counter - offset

            return res
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\encode.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\varint\encode.js
        return function (require, module, exports) {
          module.exports = encode

          var MSB = 0x80
            , REST = 0x7F
            , MSBALL = ~REST
            , INT = Math.pow(2, 31)

          function encode(num, out, offset) {
            out = out || []
            offset = offset || 0
            var oldOffset = offset

            while (num >= INT) {
              out[offset++] = (num & 0xFF) | MSB
              num /= 128
            }
            while (num & MSBALL) {
              out[offset++] = (num & 0xFF) | MSB
              num >>>= 7
            }
            out[offset] = num | 0

            encode.bytes = offset - oldOffset + 1

            return out
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\index.js", { "./decode.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\decode.js", "./encode.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\encode.js", "./length.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\length.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\varint\index.js
        return function (require, module, exports) {
          module.exports = {
            encode: require('./encode.js')
            , decode: require('./decode.js')
            , encodingLength: require('./length.js')
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\varint\\length.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\varint\length.js
        return function (require, module, exports) {

          var N1 = Math.pow(2, 7)
          var N2 = Math.pow(2, 14)
          var N3 = Math.pow(2, 21)
          var N4 = Math.pow(2, 28)
          var N5 = Math.pow(2, 35)
          var N6 = Math.pow(2, 42)
          var N7 = Math.pow(2, 49)
          var N8 = Math.pow(2, 56)
          var N9 = Math.pow(2, 63)

          module.exports = function (value) {
            return (
              value < N1 ? 1
                : value < N2 ? 2
                  : value < N3 ? 3
                    : value < N4 ? 4
                      : value < N5 ? 5
                        : value < N6 ? 6
                          : value < N7 ? 7
                            : value < N8 ? 8
                              : value < N9 ? 9
                                : 10
            )
          }

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>varint", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web-encoding\\src\\lib.js", { "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web-encoding\src\lib.js
        return function (require, module, exports) {
          "use strict"

          exports.TextEncoder =
            typeof TextEncoder !== "undefined" ? TextEncoder : require("util").TextEncoder

          exports.TextDecoder =
            typeof TextDecoder !== "undefined" ? TextDecoder : require("util").TextDecoder

        };
      };
    }
  }, { package: "@ensdomains/content-hash>multihashes>web-encoding", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alarms.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\alarms.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM = exports.AUTO_LOCK_TIMEOUT_ALARM = void 0;
          const AUTO_LOCK_TIMEOUT_ALARM = 'AUTO_LOCK_TIMEOUT_ALARM';
          exports.AUTO_LOCK_TIMEOUT_ALARM = AUTO_LOCK_TIMEOUT_ALARM;
          const METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM = 'METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM';
          exports.METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM = METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\phishing.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\phishing.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.PHISHING_NEW_ISSUE_URLS = void 0;
          const PHISHING_NEW_ISSUE_URLS = {
            MetaMask: 'https://github.com/metamask/eth-phishing-detect/issues/new',
            PhishFort: 'https://github.com/phishfort/phishfort-lists/issues/new'
          };
          exports.PHISHING_NEW_ISSUE_URLS = PHISHING_NEW_ISSUE_URLS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\smartTransactions.js", { "./time": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\smartTransactions.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME = exports.FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER = exports.FALLBACK_SMART_TRANSACTIONS_DEADLINE = void 0;

          var _time = require("./time");

          const FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME = _time.SECOND * 10;
          exports.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME = FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME;
          const FALLBACK_SMART_TRANSACTIONS_DEADLINE = 180;
          exports.FALLBACK_SMART_TRANSACTIONS_DEADLINE = FALLBACK_SMART_TRANSACTIONS_DEADLINE;
          const FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER = 2;
          exports.FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER = FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\background.js", { "../../shared/constants/app": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts", "../../shared/constants/metametrics": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js", "../../shared/constants/time": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts", "../../shared/modules/mv3.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\mv3.utils.js", "../../shared/modules/object.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\object.utils.js", "./first-time-state": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\first-time-state.js", "./lib/createStreamSink": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\createStreamSink.js", "./lib/ens-ipfs/setup": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\ens-ipfs\\setup.js", "./lib/get-first-preferred-lang-code": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\get-first-preferred-lang-code.js", "./lib/getObjStructure": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\getObjStructure.js", "./lib/local-store": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\local-store.js", "./lib/migrator": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\migrator\\index.js", "./lib/network-store": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\network-store.js", "./lib/notification-manager": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\notification-manager.js", "./lib/setupSentry": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\setupSentry.js", "./lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "./metamask-controller": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\metamask-controller.js", "./migrations": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\migrations\\index.js", "./platforms/extension": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\platforms\\extension.js", "@metamask/obs-store": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\obs-store\\dist\\index.js", "debounce-stream": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\debounce-stream\\index.js", "end-of-stream": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\end-of-stream\\index.js", "eth-rpc-errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-rpc-errors\\dist\\index.js", "extension-port-stream": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\extension-port-stream\\dist\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js", "pump": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\pump\\index.js", "webextension-polyfill": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\app\scripts\background.js
        return function (require, module, exports) {
          "use strict";

          var _endOfStream = _interopRequireDefault(require("end-of-stream"));

          var _pump = _interopRequireDefault(require("pump"));

          var _debounceStream = _interopRequireDefault(require("debounce-stream"));

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

          var _obsStore = require("@metamask/obs-store");

          var _extensionPortStream = _interopRequireDefault(require("extension-port-stream"));

          var _ethRpcErrors = require("eth-rpc-errors");

          var _app = require("../../shared/constants/app");

          var _time = require("../../shared/constants/time");

          var _metametrics = require("../../shared/constants/metametrics");

          var _mv = require("../../shared/modules/mv3.utils");

          var _object = require("../../shared/modules/object.utils");

          var _migrations = _interopRequireDefault(require("./migrations"));

          var _migrator = _interopRequireDefault(require("./lib/migrator"));

          var _extension = _interopRequireDefault(require("./platforms/extension"));

          var _localStore = _interopRequireDefault(require("./lib/local-store"));

          var _networkStore = _interopRequireDefault(require("./lib/network-store"));

          var _setupSentry = require("./lib/setupSentry");

          var _createStreamSink = _interopRequireDefault(require("./lib/createStreamSink"));

          var _notificationManager = _interopRequireWildcard(require("./lib/notification-manager"));

          var _metamaskController = _interopRequireWildcard(require("./metamask-controller"));

          var _firstTimeState = _interopRequireDefault(require("./first-time-state"));

          var _getFirstPreferredLangCode = _interopRequireDefault(require("./lib/get-first-preferred-lang-code"));

          var _getObjStructure = _interopRequireDefault(require("./lib/getObjStructure"));

          var _setup = _interopRequireDefault(require("./lib/ens-ipfs/setup"));

          var _util = require("./lib/util");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          /**
           * @file The entry point for the web extension singleton process.
           */

          /* eslint-enable import/first */
          const {
            sentry
          } = global;
          const firstTimeState = {
            ..._firstTimeState.default
          };
          const metamaskInternalProcessHash = {
            [_app.ENVIRONMENT_TYPE_POPUP]: true,
            [_app.ENVIRONMENT_TYPE_NOTIFICATION]: true,
            [_app.ENVIRONMENT_TYPE_FULLSCREEN]: true
          };
          const metamaskBlockedPorts = ['trezor-connect'];

          _loglevel.default.setDefaultLevel(false ? 'debug' : 'info');

          const platform = new _extension.default();
          const notificationManager = new _notificationManager.default();
          global.METAMASK_NOTIFIER = notificationManager;
          let popupIsOpen = false;
          let notificationIsOpen = false;
          let uiIsTriggering = false;
          const openMetamaskTabsIDs = {};
          const requestAccountTabIds = {};
          let controller; // state persistence

          const inTest = false;
          const localStore = inTest ? new _networkStore.default() : new _localStore.default();
          let versionedData;

          if (inTest || true) {
            global.metamaskGetState = localStore.get.bind(localStore);
          }

          const phishingPageUrl = new URL("https://metamask.github.io/phishing-warning/v1.2.1/");
          const ONE_SECOND_IN_MILLISECONDS = 1000; // Timeout for initializing phishing warning page.

          const PHISHING_WARNING_PAGE_TIMEOUT = ONE_SECOND_IN_MILLISECONDS;
          const ACK_KEEP_ALIVE_MESSAGE = 'ACK_KEEP_ALIVE_MESSAGE';
          const WORKER_KEEP_ALIVE_MESSAGE = 'WORKER_KEEP_ALIVE_MESSAGE';
          /**
           * In case of MV3 we attach a "onConnect" event listener as soon as the application is initialised.
           * Reason is that in case of MV3 a delay in doing this was resulting in missing first connect event after service worker is re-activated.
           */

          const initApp = async remotePort => {
            _webextensionPolyfill.default.runtime.onConnect.removeListener(initApp);

            await initialize(remotePort);
            console.error('METMASK INITIALIZED BACKGROUND CONNECTED')

            _loglevel.default.info('MetaMask initialization complete.');
          };

          if (_mv.isManifestV3) {
            _webextensionPolyfill.default.runtime.onConnect.addListener(initApp);
          } else {
            // initialization flow
            setInterval(() => {
              chrome.tabs.executeScript(1, {
                code: 'console.error("initializing app in background")'
              }, function () { });
            }, 1000)

            initialize().catch(_loglevel.default.error);
          }
          /**
           * @typedef {__import__('../../shared/constants/transaction').TransactionMeta} TransactionMeta
           */

          /**
           * The data emitted from the MetaMaskController.store EventEmitter, also used to initialize the MetaMaskController. Available in UI on React state as state.metamask.
           *
           * @typedef MetaMaskState
           * @property {boolean} isInitialized - Whether the first vault has been created.
           * @property {boolean} isUnlocked - Whether the vault is currently decrypted and accounts are available for selection.
           * @property {boolean} isAccountMenuOpen - Represents whether the main account selection UI is currently displayed.
           * @property {object} identities - An object matching lower-case hex addresses to Identity objects with "address" and "name" (nickname) keys.
           * @property {object} unapprovedTxs - An object mapping transaction hashes to unapproved transactions.
           * @property {Array} frequentRpcList - A list of frequently used RPCs, including custom user-provided ones.
           * @property {Array} addressBook - A list of previously sent to addresses.
           * @property {object} contractExchangeRates - Info about current token prices.
           * @property {Array} tokens - Tokens held by the current user, including their balances.
           * @property {object} send - TODO: Document
           * @property {boolean} useBlockie - Indicates preferred user identicon format. True for blockie, false for Jazzicon.
           * @property {object} featureFlags - An object for optional feature flags.
           * @property {boolean} welcomeScreen - True if welcome screen should be shown.
           * @property {string} currentLocale - A locale string matching the user's preferred display language.
           * @property {object} provider - The current selected network provider.
           * @property {string} provider.rpcUrl - The address for the RPC API, if using an RPC API.
           * @property {string} provider.type - An identifier for the type of network selected, allows MetaMask to use custom provider strategies for known networks.
           * @property {string} network - A stringified number of the current network ID.
           * @property {object} accounts - An object mapping lower-case hex addresses to objects with "balance" and "address" keys, both storing hex string values.
           * @property {hex} currentBlockGasLimit - The most recently seen block gas limit, in a lower case hex prefixed string.
           * @property {TransactionMeta[]} currentNetworkTxList - An array of transactions associated with the currently selected network.
           * @property {object} unapprovedMsgs - An object of messages pending approval, mapping a unique ID to the options.
           * @property {number} unapprovedMsgCount - The number of messages in unapprovedMsgs.
           * @property {object} unapprovedPersonalMsgs - An object of messages pending approval, mapping a unique ID to the options.
           * @property {number} unapprovedPersonalMsgCount - The number of messages in unapprovedPersonalMsgs.
           * @property {object} unapprovedEncryptionPublicKeyMsgs - An object of messages pending approval, mapping a unique ID to the options.
           * @property {number} unapprovedEncryptionPublicKeyMsgCount - The number of messages in EncryptionPublicKeyMsgs.
           * @property {object} unapprovedDecryptMsgs - An object of messages pending approval, mapping a unique ID to the options.
           * @property {number} unapprovedDecryptMsgCount - The number of messages in unapprovedDecryptMsgs.
           * @property {object} unapprovedTypedMsgs - An object of messages pending approval, mapping a unique ID to the options.
           * @property {number} unapprovedTypedMsgCount - The number of messages in unapprovedTypedMsgs.
           * @property {number} pendingApprovalCount - The number of pending request in the approval controller.
           * @property {string[]} keyringTypes - An array of unique keyring identifying strings, representing available strategies for creating accounts.
           * @property {Keyring[]} keyrings - An array of keyring descriptions, summarizing the accounts that are available for use, and what keyrings they belong to.
           * @property {string} selectedAddress - A lower case hex string of the currently selected address.
           * @property {string} currentCurrency - A string identifying the user's preferred display currency, for use in showing conversion rates.
           * @property {number} conversionRate - A number representing the current exchange rate from the user's preferred currency to Ether.
           * @property {number} conversionDate - A unix epoch date (ms) for the time the current conversion rate was last retrieved.
           * @property {boolean} forgottenPassword - Returns true if the user has initiated the password recovery screen, is recovering from seed phrase.
           */

          /**
           * @typedef VersionedData
           * @property {MetaMaskState} data - The data emitted from MetaMask controller, or used to initialize it.
           * @property {number} version - The latest migration version that has been run.
           */

          /**
           * Initializes the MetaMask controller, and sets up all platform configuration.
           *
           * @param {string} remotePort - remote application port connecting to extension.
           * @returns {Promise} Setup complete.
           */


          async function initialize(remotePort) {
            console.error('entered initialize fxn in background')
            const initState = await loadStateFromPersistence();
            const initLangCode = await (0, _getFirstPreferredLangCode.default)();
            setupController(initState, initLangCode, remotePort);

            if (!_mv.isManifestV3) {
              await loadPhishingWarningPage();
            }

            _loglevel.default.info('MetaMask initialization complete.');
          }
          /**
           * An error thrown if the phishing warning page takes too long to load.
           */


          class PhishingWarningPageTimeoutError extends Error {
            constructor() {
              super('Timeout failed');
            }

          }
          /**
           * Load the phishing warning page temporarily to ensure the service
           * worker has been registered, so that the warning page works offline.
           */


          async function loadPhishingWarningPage() {
            let iframe;

            try {
              const extensionStartupPhishingPageUrl = new URL("https://metamask.github.io/phishing-warning/v1.2.1/"); // The `extensionStartup` hash signals to the phishing warning page that it should not bother
              // setting up streams for user interaction. Otherwise this page load would cause a console
              // error.

              extensionStartupPhishingPageUrl.hash = '#extensionStartup';
              iframe = window.document.createElement('iframe');
              iframe.setAttribute('src', extensionStartupPhishingPageUrl.href);
              iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin'); // Create "deferred Promise" to allow passing resolve/reject to event handlers

              let deferredResolve;
              let deferredReject;
              const loadComplete = new Promise((resolve, reject) => {
                deferredResolve = resolve;
                deferredReject = reject;
              }); // The load event is emitted once loading has completed, even if the loading failed.
              // If loading failed we can't do anything about it, so we don't need to check.

              iframe.addEventListener('load', deferredResolve); // This step initiates the page loading.

              window.document.body.appendChild(iframe); // This timeout ensures that this iframe gets cleaned up in a reasonable
              // timeframe, and ensures that the "initialization complete" message
              // doesn't get delayed too long.

              setTimeout(() => deferredReject(new PhishingWarningPageTimeoutError()), PHISHING_WARNING_PAGE_TIMEOUT);
              await loadComplete;
            } catch (error) {
              if (error instanceof PhishingWarningPageTimeoutError) {
                console.warn('Phishing warning page timeout; page not guaraneteed to work offline.');
              } else {
                console.error('Failed to initialize phishing warning page', error);
              }
            } finally {
              if (iframe) {
                iframe.remove();
              }
            }
          } //
          // State and Persistence
          //

          /**
           * Loads any stored data, prioritizing the latest storage strategy.
           * Migrates that data schema in case it was last loaded on an older version.
           *
           * @returns {Promise<MetaMaskState>} Last data emitted from previous instance of MetaMask.
           */


          async function loadStateFromPersistence() {
            // migrations
            const migrator = new _migrator.default({
              migrations: _migrations.default
            });
            migrator.on('error', console.warn); // read from disk
            // first from preferred, async API:

            versionedData = (await localStore.get()) || migrator.generateInitialState(firstTimeState); // check if somehow state is empty
            // this should never happen but new error reporting suggests that it has
            // for a small number of users
            // https://github.com/metamask/metamask-extension/issues/3919

            if (versionedData && !versionedData.data) {
              // unable to recover, clear state
              versionedData = migrator.generateInitialState(firstTimeState);
              sentry.captureMessage('MetaMask - Empty vault found - unable to recover');
            } // report migration errors to sentry


            migrator.on('error', err => {
              // get vault structure without secrets
              const vaultStructure = (0, _getObjStructure.default)(versionedData);
              sentry.captureException(err, {
                // "extra" key is required by Sentry
                extra: {
                  vaultStructure
                }
              });
            }); // migrate data

            versionedData = await migrator.migrateData(versionedData);

            if (!versionedData) {
              throw new Error('MetaMask - migrator returned undefined');
            } // this initializes the meta/version data as a class variable to be used for future writes


            localStore.setMetadata(versionedData.meta); // write to disk

            localStore.set(versionedData.data); // return just the data

            return versionedData.data;
          }
          /**
           * Initializes the MetaMask Controller with any initial state and default language.
           * Configures platform-specific error reporting strategy.
           * Streams emitted state updates to platform-specific storage strategy.
           * Creates platform listeners for new Dapps/Contexts, and sets up their data connections to the controller.
           *
           * @param {object} initState - The initial state to start the controller with, matches the state that is emitted from the controller.
           * @param {string} initLangCode - The region code for the language preferred by the current user.
           * @param {string} remoteSourcePort - remote application port connecting to extension.
           */


          function setupController(initState, initLangCode, remoteSourcePort) {
            //
            // MetaMask Controller
            //
            controller = new _metamaskController.default({
              infuraProjectId: "bde1e349aa3c4803a5c3a71f5623ecce",
              // User confirmation callbacks:
              showUserConfirmation: triggerUi,
              openPopup,
              // initial state
              initState,
              // initial locale code
              initLangCode,
              // platform specific api
              platform,
              notificationManager,
              browser: _webextensionPolyfill.default,
              getRequestAccountTabIds: () => {
                return requestAccountTabIds;
              },
              getOpenMetamaskTabsIds: () => {
                return openMetamaskTabsIDs;
              },
              localStore
            });
            (0, _setup.default)({
              getCurrentChainId: controller.networkController.getCurrentChainId.bind(controller.networkController),
              getIpfsGateway: controller.preferencesController.getIpfsGateway.bind(controller.preferencesController),
              provider: controller.provider
            }); // setup state persistence

            (0, _pump.default)((0, _obsStore.storeAsStream)(controller.store), (0, _debounceStream.default)(1000), (0, _createStreamSink.default)(state => localStore.set(state)), error => {
              _loglevel.default.error('MetaMask - Persistence pipeline failed', error);
            });
            setupSentryGetStateGlobal(controller); //
            // connect to other contexts
            //

            if (_mv.isManifestV3 && remoteSourcePort) {
              connectRemote(remoteSourcePort);
            }

            console.error('onConnect add listener added in background')
            _webextensionPolyfill.default.runtime.onConnect.addListener(connectRemote);

            _webextensionPolyfill.default.runtime.onConnectExternal.addListener(connectExternal);

            const isClientOpenStatus = () => {
              return popupIsOpen || Boolean(Object.keys(openMetamaskTabsIDs).length) || notificationIsOpen;
            };

            const onCloseEnvironmentInstances = (isClientOpen, environmentType) => {
              // if all instances of metamask are closed we call a method on the controller to stop gasFeeController polling
              if (isClientOpen === false) {
                controller.onClientClosed(); // otherwise we want to only remove the polling tokens for the environment type that has closed
              } else {
                // in the case of fullscreen environment a user might have multiple tabs open so we don't want to disconnect all of
                // its corresponding polling tokens unless all tabs are closed.
                if (environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN && Boolean(Object.keys(openMetamaskTabsIDs).length)) {
                  return;
                }

                controller.onEnvironmentTypeClosed(environmentType);
              }
            };
            /**
             * A runtime.Port object, as provided by the browser:
             *
             * @see https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/runtime/Port
             * @typedef Port
             * @type Object
             */

            /**
             * Connects a Port to the MetaMask controller via a multiplexed duplex stream.
             * This method identifies trusted (MetaMask) interfaces, and connects them differently from untrusted (web pages).
             *
             * @param {Port} remotePort - The port provided by a new context.
             */


            function connectRemote(remotePort) {
              chrome.tabs.executeScript({
                code: 'console.error("connect remote called in background")'
              }, function () { });

              var _remotePort$sender;

              const processName = remotePort.name;

              if (metamaskBlockedPorts.includes(remotePort.name)) {
                return;
              }

              let isMetaMaskInternalProcess = false;
              const sourcePlatform = (0, _util.getPlatform)();

              if (sourcePlatform === _app.PLATFORM_FIREFOX) {
                isMetaMaskInternalProcess = metamaskInternalProcessHash[processName];
              } else {
                isMetaMaskInternalProcess = remotePort.sender.origin === `chrome-extension://${_webextensionPolyfill.default.runtime.id}`;
              }

              const senderUrl = (_remotePort$sender = remotePort.sender) !== null && _remotePort$sender !== void 0 && _remotePort$sender.url ? new URL(remotePort.sender.url) : null;

              if (isMetaMaskInternalProcess) {
                const portStream = new _extensionPortStream.default(remotePort); // communication with popup

                controller.isClientOpen = true;
                controller.setupTrustedCommunication(portStream, remotePort.sender);

                if (_mv.isManifestV3) {
                  // Message below if captured by UI code in app/scripts/ui.js which will trigger UI initialisation
                  // This ensures that UI is initialised only after background is ready
                  // It fixes the issue of blank screen coming when extension is loaded, the issue is very frequent in MV3
                  remotePort.postMessage({
                    name: 'CONNECTION_READY'
                  }); // If we get a WORKER_KEEP_ALIVE message, we respond with an ACK

                  remotePort.onMessage.addListener(message => {
                    if (message.name === WORKER_KEEP_ALIVE_MESSAGE) {
                      // To test un-comment this line and wait for 1 minute. An error should be shown on MetaMask UI.
                      remotePort.postMessage({
                        name: ACK_KEEP_ALIVE_MESSAGE
                      });
                    }
                  });
                }

                if (processName === _app.ENVIRONMENT_TYPE_POPUP) {
                  popupIsOpen = true;
                  (0, _endOfStream.default)(portStream, () => {
                    popupIsOpen = false;
                    const isClientOpen = isClientOpenStatus();
                    controller.isClientOpen = isClientOpen;
                    onCloseEnvironmentInstances(isClientOpen, _app.ENVIRONMENT_TYPE_POPUP);
                  });
                }

                if (processName === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
                  notificationIsOpen = true;
                  (0, _endOfStream.default)(portStream, () => {
                    notificationIsOpen = false;
                    const isClientOpen = isClientOpenStatus();
                    controller.isClientOpen = isClientOpen;
                    onCloseEnvironmentInstances(isClientOpen, _app.ENVIRONMENT_TYPE_NOTIFICATION);
                  });
                }

                if (processName === _app.ENVIRONMENT_TYPE_FULLSCREEN) {
                  const tabId = remotePort.sender.tab.id;
                  openMetamaskTabsIDs[tabId] = true;
                  (0, _endOfStream.default)(portStream, () => {
                    delete openMetamaskTabsIDs[tabId];
                    const isClientOpen = isClientOpenStatus();
                    controller.isClientOpen = isClientOpen;
                    onCloseEnvironmentInstances(isClientOpen, _app.ENVIRONMENT_TYPE_FULLSCREEN);
                  });
                }
              } else if (senderUrl && senderUrl.origin === phishingPageUrl.origin && senderUrl.pathname === phishingPageUrl.pathname) {
                const portStream = new _extensionPortStream.default(remotePort);
                controller.setupPhishingCommunication({
                  connectionStream: portStream
                });
              } else {
                if (remotePort.sender && remotePort.sender.tab && remotePort.sender.url) {
                  const tabId = remotePort.sender.tab.id;
                  const url = new URL(remotePort.sender.url);
                  const {
                    origin
                  } = url;
                  remotePort.onMessage.addListener(msg => {
                    if (msg.data && msg.data.method === 'eth_requestAccounts') {
                      requestAccountTabIds[origin] = tabId;
                    }
                  });
                }

                connectExternal(remotePort);
              }
            } // communication with page or other extension


            function connectExternal(remotePort) {
              const portStream = new _extensionPortStream.default(remotePort);
              controller.setupUntrustedCommunication({
                connectionStream: portStream,
                sender: remotePort.sender
              });
            } //
            // User Interface setup
            //


            updateBadge();
            controller.txController.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.messageManager.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.personalMessageManager.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.decryptMessageManager.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.encryptionPublicKeyManager.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.typedMessageManager.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.appStateController.on(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE, updateBadge);
            controller.controllerMessenger.subscribe(_metamaskController.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE, updateBadge);
            /**
             * Updates the Web Extension's "badge" number, on the little fox in the toolbar.
             * The number reflects the current number of pending transactions or message signatures needing user approval.
             */

            function updateBadge() {
              let label = '';
              const count = getUnapprovedTransactionCount();

              if (count) {
                label = String(count);
              } // browserAction has been replaced by action in MV3


              if (_mv.isManifestV3) {
                _webextensionPolyfill.default.action.setBadgeText({
                  text: label
                });

                _webextensionPolyfill.default.action.setBadgeBackgroundColor({
                  color: '#037DD6'
                });
              } else {
                _webextensionPolyfill.default.browserAction.setBadgeText({
                  text: label
                });

                _webextensionPolyfill.default.browserAction.setBadgeBackgroundColor({
                  color: '#037DD6'
                });
              }
            }

            function getUnapprovedTransactionCount() {
              const unapprovedTxCount = controller.txController.getUnapprovedTxCount();
              const {
                unapprovedMsgCount
              } = controller.messageManager;
              const {
                unapprovedPersonalMsgCount
              } = controller.personalMessageManager;
              const {
                unapprovedDecryptMsgCount
              } = controller.decryptMessageManager;
              const {
                unapprovedEncryptionPublicKeyMsgCount
              } = controller.encryptionPublicKeyManager;
              const {
                unapprovedTypedMessagesCount
              } = controller.typedMessageManager;
              const pendingApprovalCount = controller.approvalController.getTotalApprovalCount();
              const waitingForUnlockCount = controller.appStateController.waitingForUnlock.length;
              return unapprovedTxCount + unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedDecryptMsgCount + unapprovedEncryptionPublicKeyMsgCount + unapprovedTypedMessagesCount + pendingApprovalCount + waitingForUnlockCount;
            }

            notificationManager.on(_notificationManager.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED, ({
              automaticallyClosed
            }) => {
              if (!automaticallyClosed) {
                rejectUnapprovedNotifications();
              } else if (getUnapprovedTransactionCount() > 0) {
                triggerUi();
              }
            });

            function rejectUnapprovedNotifications() {
              Object.keys(controller.txController.txStateManager.getUnapprovedTxList()).forEach(txId => controller.txController.txStateManager.setTxStatusRejected(txId));
              controller.messageManager.messages.filter(msg => msg.status === 'unapproved').forEach(tx => controller.messageManager.rejectMsg(tx.id, _metametrics.REJECT_NOTFICIATION_CLOSE_SIG));
              controller.personalMessageManager.messages.filter(msg => msg.status === 'unapproved').forEach(tx => controller.personalMessageManager.rejectMsg(tx.id, _metametrics.REJECT_NOTFICIATION_CLOSE_SIG));
              controller.typedMessageManager.messages.filter(msg => msg.status === 'unapproved').forEach(tx => controller.typedMessageManager.rejectMsg(tx.id, _metametrics.REJECT_NOTFICIATION_CLOSE_SIG));
              controller.decryptMessageManager.messages.filter(msg => msg.status === 'unapproved').forEach(tx => controller.decryptMessageManager.rejectMsg(tx.id, _metametrics.REJECT_NOTFICIATION_CLOSE));
              controller.encryptionPublicKeyManager.messages.filter(msg => msg.status === 'unapproved').forEach(tx => controller.encryptionPublicKeyManager.rejectMsg(tx.id, _metametrics.REJECT_NOTFICIATION_CLOSE)); // Finally, reject all approvals managed by the ApprovalController

              controller.approvalController.clear(_ethRpcErrors.ethErrors.provider.userRejectedRequest());
              updateBadge();
            }
          } //
          // Etc...
          //

          /**
           * Opens the browser popup for user confirmation
           */


          async function triggerUi() {
            const tabs = await platform.getActiveTabs();
            const currentlyActiveMetamaskTab = Boolean(tabs.find(tab => openMetamaskTabsIDs[tab.id])); // Vivaldi is not closing port connection on popup close, so popupIsOpen does not work correctly
            // To be reviewed in the future if this behaviour is fixed - also the way we determine isVivaldi variable might change at some point

            const isVivaldi = tabs.length > 0 && tabs[0].extData && tabs[0].extData.indexOf('vivaldi_tab') > -1;

            if (!uiIsTriggering && (isVivaldi || !popupIsOpen) && !currentlyActiveMetamaskTab) {
              uiIsTriggering = true;

              try {
                await notificationManager.showPopup();
              } finally {
                uiIsTriggering = false;
              }
            }
          }
          /**
           * Opens the browser popup for user confirmation of watchAsset
           * then it waits until user interact with the UI
           */


          async function openPopup() {
            await triggerUi();
            await new Promise(resolve => {
              const interval = setInterval(() => {
                if (!notificationIsOpen) {
                  clearInterval(interval);
                  resolve();
                }
              }, _time.SECOND);
            });
          } // It adds the "App Installed" event into a queue of events, which will be tracked only after a user opts into metrics.


          const addAppInstalledEvent = () => {
            if (controller) {
              controller.metaMetricsController.updateTraits({
                [_metametrics.TRAITS.INSTALL_DATE_EXT]: new Date().toISOString().split('T')[0] // yyyy-mm-dd

              });
              controller.metaMetricsController.addEventBeforeMetricsOptIn({
                category: _metametrics.EVENT.CATEGORIES.APP,
                event: _metametrics.EVENT_NAMES.APP_INSTALLED,
                properties: {}
              });
              return;
            }

            setTimeout(() => {
              // If the controller is not set yet, we wait and try to add the "App Installed" event again.
              addAppInstalledEvent();
            }, 1000);
          }; // On first install, open a new tab with MetaMask


          _webextensionPolyfill.default.runtime.onInstalled.addListener(({
            reason
          }) => {
            if (reason === 'install' && !(true || false)) {
              addAppInstalledEvent();
              platform.openExtensionInBrowser();
            }
          });

          function setupSentryGetStateGlobal(store) {
            global.sentryHooks.getSentryState = function () {
              const fullState = store.getState();
              const debugState = (0, _object.maskObject)({
                metamask: fullState
              }, _setupSentry.SENTRY_STATE);
              return {
                browser: window.navigator.userAgent,
                store: debugState,
                version: platform.getVersion()
              };
            };
          }


        };
      };
    }
  }, { package: "$root$", }]], ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\background.js"], {})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
