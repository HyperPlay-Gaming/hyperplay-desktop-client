LavaPack.loadBundle([
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\validate.js", { "./regex.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\regex.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uuid\dist\validate.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _regex = _interopRequireDefault(require("./regex.js"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function validate(uuid) {
            return typeof uuid === 'string' && _regex.default.test(uuid);
          }

          var _default = validate;
          exports.default = _default;
        };
      };
    }
  }, { package: "uuid", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\version.js", { "./validate.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\validate.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\uuid\dist\version.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _validate = _interopRequireDefault(require("./validate.js"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function version(uuid) {
            if (!(0, _validate.default)(uuid)) {
              throw TypeError('Invalid UUID');
            }

            return parseInt(uuid.substr(14, 1), 16);
          }

          var _default = version;
          exports.default = _default;
        };
      };
    }
  }, { package: "uuid", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\valid-url\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\valid-url\index.js
        return function (require, module, exports) {
          (function (module) {
            'use strict';

            module.exports.is_uri = is_iri;
            module.exports.is_http_uri = is_http_iri;
            module.exports.is_https_uri = is_https_iri;
            module.exports.is_web_uri = is_web_iri;
            // Create aliases
            module.exports.isUri = is_iri;
            module.exports.isHttpUri = is_http_iri;
            module.exports.isHttpsUri = is_https_iri;
            module.exports.isWebUri = is_web_iri;


            // private function
            // internal URI spitter method - direct from RFC 3986
            var splitUri = function (uri) {
              var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
              return splitted;
            };

            function is_iri(value) {
              if (!value) {
                return;
              }

              // check for illegal characters
              if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value)) return;

              // check for hex escapes that aren't complete
              if (/%[^0-9a-f]/i.test(value)) return;
              if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;

              var splitted = [];
              var scheme = '';
              var authority = '';
              var path = '';
              var query = '';
              var fragment = '';
              var out = '';

              // from RFC 3986
              splitted = splitUri(value);
              scheme = splitted[1];
              authority = splitted[2];
              path = splitted[3];
              query = splitted[4];
              fragment = splitted[5];

              // scheme and path are required, though the path can be empty
              if (!(scheme && scheme.length && path.length >= 0)) return;

              // if authority is present, the path must be empty or begin with a /
              if (authority && authority.length) {
                if (!(path.length === 0 || /^\//.test(path))) return;
              } else {
                // if authority is not present, the path must not start with //
                if (/^\/\//.test(path)) return;
              }

              // scheme must begin with a letter, then consist of letters, digits, +, ., or -
              if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase())) return;

              // re-assemble the URL per section 5.3 in RFC 3986
              out += scheme + ':';
              if (authority && authority.length) {
                out += '//' + authority;
              }

              out += path;

              if (query && query.length) {
                out += '?' + query;
              }

              if (fragment && fragment.length) {
                out += '#' + fragment;
              }

              return out;
            }

            function is_http_iri(value, allowHttps) {
              if (!is_iri(value)) {
                return;
              }

              var splitted = [];
              var scheme = '';
              var authority = '';
              var path = '';
              var port = '';
              var query = '';
              var fragment = '';
              var out = '';

              // from RFC 3986
              splitted = splitUri(value);
              scheme = splitted[1];
              authority = splitted[2];
              path = splitted[3];
              query = splitted[4];
              fragment = splitted[5];

              if (!scheme) return;

              if (allowHttps) {
                if (scheme.toLowerCase() != 'https') return;
              } else {
                if (scheme.toLowerCase() != 'http') return;
              }

              // fully-qualified URIs must have an authority section that is
              // a valid host
              if (!authority) {
                return;
              }

              // enable port component
              if (/:(\d+)$/.test(authority)) {
                port = authority.match(/:(\d+)$/)[0];
                authority = authority.replace(/:\d+$/, '');
              }

              out += scheme + ':';
              out += '//' + authority;

              if (port) {
                out += port;
              }

              out += path;

              if (query && query.length) {
                out += '?' + query;
              }

              if (fragment && fragment.length) {
                out += '#' + fragment;
              }

              return out;
            }

            function is_https_iri(value) {
              return is_http_iri(value, true);
            }

            function is_web_iri(value) {
              return (is_http_iri(value) || is_https_iri(value));
            }

          })(module);

        };
      };
    }
  }, { package: "valid-url", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\vm-browserify\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\vm-browserify\index.js
        return function (require, module, exports) {
          var indexOf = function (xs, item) {
            if (xs.indexOf) return xs.indexOf(item);
            else for (var i = 0; i < xs.length; i++) {
              if (xs[i] === item) return i;
            }
            return -1;
          };
          var Object_keys = function (obj) {
            if (Object.keys) return Object.keys(obj)
            else {
              var res = [];
              for (var key in obj) res.push(key)
              return res;
            }
          };

          var forEach = function (xs, fn) {
            if (xs.forEach) return xs.forEach(fn)
            else for (var i = 0; i < xs.length; i++) {
              fn(xs[i], i, xs);
            }
          };

          var defineProp = (function () {
            try {
              Object.defineProperty({}, '_', {});
              return function (obj, name, value) {
                Object.defineProperty(obj, name, {
                  writable: true,
                  enumerable: false,
                  configurable: true,
                  value: value
                })
              };
            } catch (e) {
              return function (obj, name, value) {
                obj[name] = value;
              };
            }
          }());

          var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
            'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
            'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
            'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
            'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

          function Context() { }
          Context.prototype = {};

          var Script = exports.Script = function NodeScript(code) {
            if (!(this instanceof Script)) return new Script(code);
            this.code = code;
          };

          Script.prototype.runInContext = function (context) {
            if (!(context instanceof Context)) {
              throw new TypeError("needs a 'context' argument.");
            }

            var iframe = document.createElement('iframe');
            if (!iframe.style) iframe.style = {};
            iframe.style.display = 'none';

            document.body.appendChild(iframe);

            var win = iframe.contentWindow;
            var wEval = win.eval, wExecScript = win.execScript;

            if (!wEval && wExecScript) {
              // win.(0,eval)() magically appears when this is called in IE:
              wExecScript.call(win, 'null');
              wEval = win.eval;
            }

            forEach(Object_keys(context), function (key) {
              win[key] = context[key];
            });
            forEach(globals, function (key) {
              if (context[key]) {
                win[key] = context[key];
              }
            });

            var winKeys = Object_keys(win);

            var res = wEval.call(win, this.code);

            forEach(Object_keys(win), function (key) {
              // Avoid copying circular objects like `top` and `window` by only
              // updating existing context properties or new properties in the `win`
              // that was only introduced after the eval.
              if (key in context || indexOf(winKeys, key) === -1) {
                context[key] = win[key];
              }
            });

            forEach(globals, function (key) {
              if (!(key in context)) {
                defineProp(context, key, win[key]);
              }
            });

            document.body.removeChild(iframe);

            return res;
          };

          Script.prototype.runInThisContext = function () {
            return (0, eval)(this.code); // maybe...
          };

          Script.prototype.runInNewContext = function (context) {
            var ctx = Script.createContext(context);
            var res = this.runInContext(ctx);

            if (context) {
              forEach(Object_keys(ctx), function (key) {
                context[key] = ctx[key];
              });
            }

            return res;
          };

          forEach(Object_keys(Script.prototype), function (name) {
            exports[name] = Script[name] = function (code) {
              var s = Script(code);
              return s[name].apply(s, [].slice.call(arguments, 1));
            };
          });

          exports.isContext = function (context) {
            return context instanceof Context;
          };

          exports.createScript = function (code) {
            return exports.Script(code);
          };

          exports.createContext = Script.createContext = function (context) {
            var copy = new Context();
            if (typeof context === 'object') {
              forEach(Object_keys(context), function (key) {
                copy[key] = context[key];
              });
            }
            return copy;
          };

        };
      };
    }
  }, { package: "browserify>vm-browserify", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\index.js", { "./util/create-payload.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\create-payload.js", "./util/rpc-cache-utils.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\rpc-cache-utils.js", "./util/stoplight.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\stoplight.js", "async/eachSeries": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\async\\eachSeries.js", "async/map": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\async\\map.js", "eth-block-tracker": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-block-tracker\\src\\polling.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js", "events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\index.js
        return function (require, module, exports) {
          const EventEmitter = require('events').EventEmitter
          const inherits = require('util').inherits
          const ethUtil = require('ethereumjs-util')
          const EthBlockTracker = require('eth-block-tracker')
          const map = require('async/map')
          const eachSeries = require('async/eachSeries')
          const Stoplight = require('./util/stoplight.js')
          const cacheUtils = require('./util/rpc-cache-utils.js')
          const createPayload = require('./util/create-payload.js')
          const noop = function () { }

          module.exports = Web3ProviderEngine


          inherits(Web3ProviderEngine, EventEmitter)

          function Web3ProviderEngine(opts) {
            const self = this
            EventEmitter.call(self)
            self.setMaxListeners(30)
            // parse options
            opts = opts || {}

            // block polling
            const directProvider = { sendAsync: self._handleAsync.bind(self) }
            const blockTrackerProvider = opts.blockTrackerProvider || directProvider
            self._blockTracker = opts.blockTracker || new EthBlockTracker({
              provider: blockTrackerProvider,
              pollingInterval: opts.pollingInterval || 4000,
              setSkipCacheFlag: true,
            })

            // set initialization blocker
            self._ready = new Stoplight()

            // local state
            self.currentBlock = null
            self._providers = []
          }

          // public

          Web3ProviderEngine.prototype.start = function (cb = noop) {
            const self = this

            // trigger start
            self._ready.go()

            // on new block, request block body and emit as events
            self._blockTracker.on('latest', (blockNumber) => {
              // get block body
              self._getBlockByNumberWithRetry(blockNumber, (err, block) => {
                if (err) {
                  this.emit('error', err)
                  return
                }
                if (!block) {
                  console.log(block)
                  this.emit('error', new Error("Could not find block"))
                  return
                }
                const bufferBlock = toBufferBlock(block)
                // set current + emit "block" event
                self._setCurrentBlock(bufferBlock)
                // emit other events
                self.emit('rawBlock', block)
                self.emit('latest', block)
              })
            })

            // forward other events
            self._blockTracker.on('sync', self.emit.bind(self, 'sync'))
            self._blockTracker.on('error', self.emit.bind(self, 'error'))

            // update state
            self._running = true
            // signal that we started
            self.emit('start')
          }

          Web3ProviderEngine.prototype.stop = function () {
            const self = this
            // stop block polling by removing event listeners
            self._blockTracker.removeAllListeners()
            // update state
            self._running = false
            // signal that we stopped
            self.emit('stop')
          }

          Web3ProviderEngine.prototype.isRunning = function () {
            const self = this
            return self._running
          }

          Web3ProviderEngine.prototype.addProvider = function (source, index) {
            const self = this
            if (typeof index === 'number') {
              self._providers.splice(index, 0, source)
            } else {
              self._providers.push(source)
            }
            source.setEngine(this)
          }

          Web3ProviderEngine.prototype.removeProvider = function (source) {
            const self = this
            const index = self._providers.indexOf(source)
            if (index < 0) throw new Error('Provider not found.')
            self._providers.splice(index, 1)
          }

          Web3ProviderEngine.prototype.send = function (payload) {
            throw new Error('Web3ProviderEngine does not support synchronous requests.')
          }

          Web3ProviderEngine.prototype.sendAsync = function (payload, cb) {
            const self = this
            self._ready.await(function () {

              if (Array.isArray(payload)) {
                // handle batch
                map(payload, self._handleAsync.bind(self), cb)
              } else {
                // handle single
                self._handleAsync(payload, cb)
              }

            })
          }

          // private

          Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function (blockNumber, cb) {
            const self = this

            let retriesRemaining = 5

            attemptRequest()
            return

            function attemptRequest() {
              self._getBlockByNumber(blockNumber, afterRequest)
            }

            function afterRequest(err, block) {
              // anomalous error occurred
              if (err) return cb(err)
              // block not ready yet
              if (!block) {
                if (retriesRemaining > 0) {
                  // wait 1s then try again
                  retriesRemaining--
                  setTimeout(function () {
                    attemptRequest()
                  }, 1000)
                  return
                } else {
                  // give up, return a null block
                  cb(null, null)
                  return
                }
              }
              // otherwise return result
              cb(null, block)
              return
            }
          }


          Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
            const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true })
            this._handleAsync(req, (err, res) => {
              if (err) return cb(err)
              return cb(null, res.result)
            })
          }

          Web3ProviderEngine.prototype._handleAsync = function (payload, finished) {
            var self = this
            var currentProvider = -1
            var result = null
            var error = null

            var stack = []

            next()

            function next(after) {
              currentProvider += 1
              stack.unshift(after)

              // Bubbled down as far as we could go, and the request wasn't
              // handled. Return an error.
              if (currentProvider >= self._providers.length) {
                end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'))
              } else {
                try {
                  var provider = self._providers[currentProvider]
                  provider.handleRequest(payload, next, end)
                } catch (e) {
                  end(e)
                }
              }
            }

            function end(_error, _result) {
              error = _error
              result = _result

              eachSeries(stack, function (fn, callback) {

                if (fn) {
                  fn(error, result, callback)
                } else {
                  callback()
                }
              }, function () {

                var resultObj = {
                  id: payload.id,
                  jsonrpc: payload.jsonrpc,
                  result: result
                }

                if (error != null) {
                  resultObj.error = {
                    message: error.stack || error.message || error,
                    code: -32000
                  }
                  // respond with both error formats
                  finished(error, resultObj)
                } else {
                  finished(null, resultObj)
                }
              })
            }
          }

          //
          // from remote-data
          //

          Web3ProviderEngine.prototype._setCurrentBlock = function (block) {
            const self = this
            self.currentBlock = block
            self.emit('block', block)
          }

          // util

          function toBufferBlock(jsonBlock) {
            return {
              number: ethUtil.toBuffer(jsonBlock.number),
              hash: ethUtil.toBuffer(jsonBlock.hash),
              parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
              nonce: ethUtil.toBuffer(jsonBlock.nonce),
              mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
              sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
              logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
              transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
              stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
              receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
              miner: ethUtil.toBuffer(jsonBlock.miner),
              difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
              totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
              size: ethUtil.toBuffer(jsonBlock.size),
              extraData: ethUtil.toBuffer(jsonBlock.extraData),
              gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
              gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
              timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
              transactions: jsonBlock.transactions,
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-block-tracker\\src\\base.js", { "eth-query": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-query\\index.js", "pify": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\pify\\index.js", "safe-event-emitter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\safe-event-emitter\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-block-tracker\src\base.js
        return function (require, module, exports) {
          const EthQuery = require('eth-query')
          const pify = require('pify')
          const SafeEventEmitter = require('safe-event-emitter')

          const sec = 1000

          const calculateSum = (accumulator, currentValue) => accumulator + currentValue
          const blockTrackerEvents = ['sync', 'latest']

          class BaseBlockTracker extends SafeEventEmitter {

            //
            // public
            //

            constructor(opts = {}) {
              super()
              // config
              this._blockResetDuration = opts.blockResetDuration || 20 * sec
              // state
              this._blockResetTimeout
              this._currentBlock = null
              this._isRunning = false
              // bind functions for internal use
              this._onNewListener = this._onNewListener.bind(this)
              this._onRemoveListener = this._onRemoveListener.bind(this)
              this._resetCurrentBlock = this._resetCurrentBlock.bind(this)
              // listen for handler changes
              this._setupInternalEvents()
            }

            isRunning() {
              return this._isRunning
            }

            getCurrentBlock() {
              return this._currentBlock
            }

            async getLatestBlock() {
              // return if available
              if (this._currentBlock) return this._currentBlock
              // wait for a new latest block
              const latestBlock = await new Promise(resolve => this.once('latest', resolve))
              // return newly set current block
              return latestBlock
            }

            // dont allow module consumer to remove our internal event listeners
            removeAllListeners(eventName) {
              // perform default behavior, preserve fn arity
              if (eventName) {
                super.removeAllListeners(eventName)
              } else {
                super.removeAllListeners()
              }
              // re-add internal events
              this._setupInternalEvents()
              // trigger stop check just in case
              this._onRemoveListener()
            }

            //
            // to be implemented in subclass
            //

            _start() {
              // default behavior is noop
            }

            _end() {
              // default behavior is noop
            }

            //
            // private
            //

            _setupInternalEvents() {
              // first remove listeners for idempotence
              this.removeListener('newListener', this._onNewListener)
              this.removeListener('removeListener', this._onRemoveListener)
              // then add them
              this.on('newListener', this._onNewListener)
              this.on('removeListener', this._onRemoveListener)
            }

            _onNewListener(eventName, handler) {
              // `newListener` is called *before* the listener is added
              if (!blockTrackerEvents.includes(eventName)) return
              this._maybeStart()
            }

            _onRemoveListener(eventName, handler) {
              // `removeListener` is called *after* the listener is removed
              if (this._getBlockTrackerEventCount() > 0) return
              this._maybeEnd()
            }

            _maybeStart() {
              if (this._isRunning) return
              this._isRunning = true
              // cancel setting latest block to stale
              this._cancelBlockResetTimeout()
              this._start()
            }

            _maybeEnd() {
              if (!this._isRunning) return
              this._isRunning = false
              this._setupBlockResetTimeout()
              this._end()
            }

            _getBlockTrackerEventCount() {
              return blockTrackerEvents
                .map(eventName => this.listenerCount(eventName))
                .reduce(calculateSum)
            }

            _newPotentialLatest(newBlock) {
              const currentBlock = this._currentBlock
              // only update if blok number is higher
              if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return
              this._setCurrentBlock(newBlock)
            }

            _setCurrentBlock(newBlock) {
              const oldBlock = this._currentBlock
              this._currentBlock = newBlock
              this.emit('latest', newBlock)
              this.emit('sync', { oldBlock, newBlock })
            }

            _setupBlockResetTimeout() {
              // clear any existing timeout
              this._cancelBlockResetTimeout()
              // clear latest block when stale
              this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)
              // nodejs - dont hold process open
              if (this._blockResetTimeout.unref) {
                this._blockResetTimeout.unref()
              }
            }

            _cancelBlockResetTimeout() {
              clearTimeout(this._blockResetTimeout)
            }

            _resetCurrentBlock() {
              this._currentBlock = null
            }

          }

          module.exports = BaseBlockTracker

          function hexToInt(hexInt) {
            return Number.parseInt(hexInt, 16)
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-block-tracker", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-block-tracker\\src\\polling.js", { "./base": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-block-tracker\\src\\base.js", "pify": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\pify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-block-tracker\src\polling.js
        return function (require, module, exports) {
          const pify = require('pify')
          const BaseBlockTracker = require('./base')

          const sec = 1000

          class PollingBlockTracker extends BaseBlockTracker {

            constructor(opts = {}) {
              // parse + validate args
              if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')
              const pollingInterval = opts.pollingInterval || 20 * sec
              const retryTimeout = opts.retryTimeout || pollingInterval / 10
              const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
              const setSkipCacheFlag = opts.setSkipCacheFlag || false
              // BaseBlockTracker constructor
              super(Object.assign({
                blockResetDuration: pollingInterval,
              }, opts))
              // config
              this._provider = opts.provider
              this._pollingInterval = pollingInterval
              this._retryTimeout = retryTimeout
              this._keepEventLoopActive = keepEventLoopActive
              this._setSkipCacheFlag = setSkipCacheFlag
            }

            //
            // public
            //

            // trigger block polling
            async checkForLatestBlock() {
              await this._updateLatestBlock()
              return await this.getLatestBlock()
            }

            //
            // private
            //

            _start() {
              this._performSync().catch(err => this.emit('error', err))
            }

            async _performSync() {
              while (this._isRunning) {
                try {
                  await this._updateLatestBlock()
                  await timeout(this._pollingInterval, !this._keepEventLoopActive)
                } catch (err) {
                  const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`)
                  try {
                    this.emit('error', newErr)
                  } catch (emitErr) {
                    console.error(newErr)
                  }
                  await timeout(this._retryTimeout, !this._keepEventLoopActive)
                }
              }
            }

            async _updateLatestBlock() {
              // fetch + set latest block
              const latestBlock = await this._fetchLatestBlock()
              this._newPotentialLatest(latestBlock)
            }

            async _fetchLatestBlock() {
              const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
              if (this._setSkipCacheFlag) req.skipCache = true
              const res = await pify((cb) => this._provider.sendAsync(req, cb))()
              if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
              return res.result
            }

          }

          module.exports = PollingBlockTracker

          function timeout(duration, unref) {
            return new Promise(resolve => {
              const timoutRef = setTimeout(resolve, duration)
              // don't keep process open
              if (timoutRef.unref && unref) {
                timoutRef.unref()
              }
            })
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-block-tracker", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\block-cache.js", { "./cache-utils.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\cache-utils.js", "json-rpc-engine/src/createAsyncMiddleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\json-rpc-engine\\src\\createAsyncMiddleware.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-json-rpc-middleware\block-cache.js
        return function (require, module, exports) {
          const cacheUtils = require('./cache-utils.js')
          const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
          // `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925
          const emptyValues = [undefined, null, '\u003cnil\u003e']

          module.exports = createBlockCacheMiddleware


          function createBlockCacheMiddleware(opts = {}) {
            // validate options
            const { blockTracker } = opts
            if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')

            // create caching strategies
            const blockCache = new BlockCacheStrategy()
            const strategies = {
              perma: blockCache,
              block: blockCache,
              fork: blockCache,
            }

            return createAsyncMiddleware(async (req, res, next) => {
              // allow cach to be skipped if so specified
              if (req.skipCache) {
                return next()
              }
              // check type and matching strategy
              const type = cacheUtils.cacheTypeForPayload(req)
              const strategy = strategies[type]
              // If there's no strategy in place, pass it down the chain.
              if (!strategy) {
                return next()
              }
              // If the strategy can't cache this request, ignore it.
              if (!strategy.canCacheRequest(req)) {
                return next()
              }

              // get block reference (number or keyword)
              let blockTag = cacheUtils.blockTagForPayload(req)
              if (!blockTag) blockTag = 'latest'

              // get exact block number
              let requestedBlockNumber
              if (blockTag === 'earliest') {
                // this just exists for symmetry with "latest"
                requestedBlockNumber = '0x00'
              } else if (blockTag === 'latest') {
                // fetch latest block number
                const latestBlockNumber = await blockTracker.getLatestBlock()
                // clear all cache before latest block
                blockCache.clearBefore(latestBlockNumber)
                requestedBlockNumber = latestBlockNumber
              } else {
                // We have a hex number
                requestedBlockNumber = blockTag
              }

              // end on a hit, continue on a miss
              const cacheResult = await strategy.get(req, requestedBlockNumber)
              if (cacheResult === undefined) {
                // cache miss
                // wait for other middleware to handle request
                await next()
                // add result to cache
                await strategy.set(req, requestedBlockNumber, res.result)
              } else {
                // fill in result from cache
                res.result = cacheResult
              }
            })
          }


          //
          // Cache Strategies
          //

          class BlockCacheStrategy {

            constructor() {
              this.cache = {}
            }

            getBlockCacheForPayload(payload, blockNumberHex) {
              const blockNumber = Number.parseInt(blockNumberHex, 16)
              let blockCache = this.cache[blockNumber]
              // create new cache if necesary
              if (!blockCache) {
                const newCache = {}
                this.cache[blockNumber] = newCache
                blockCache = newCache
              }
              return blockCache
            }

            async get(payload, requestedBlockNumber) {
              // lookup block cache
              const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
              if (!blockCache) return
              // lookup payload in block cache
              const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
              const cached = blockCache[identifier]
              // may be undefined
              return cached
            }

            async set(payload, requestedBlockNumber, result) {
              // check if we can cached this result
              const canCache = this.canCacheResult(payload, result)
              if (!canCache) return
              // set the value in the cache
              const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
              const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
              blockCache[identifier] = result
            }

            canCacheRequest(payload) {
              // check request method
              if (!cacheUtils.canCache(payload)) {
                return false
              }
              // check blockTag
              const blockTag = cacheUtils.blockTagForPayload(payload)
              if (blockTag === 'pending') {
                return false
              }
              // can be cached
              return true
            }

            canCacheResult(payload, result) {
              // never cache empty values (e.g. undefined)
              if (emptyValues.includes(result)) return
              // check if transactions have block reference before caching
              if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {
                if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {
                  return false
                }
              }
              // otherwise true
              return true
            }

            // removes all block caches with block number lower than `oldBlockHex`
            clearBefore(oldBlockHex) {
              const self = this
              const oldBlockNumber = Number.parseInt(oldBlockHex, 16)
              // clear old caches
              Object.keys(self.cache)
                .map(Number)
                .filter(num => num < oldBlockNumber)
                .forEach(num => delete self.cache[num])
            }

          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-json-rpc-middleware", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\cache-utils.js", { "json-stable-stringify": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\json-stable-stringify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-json-rpc-middleware\cache-utils.js
        return function (require, module, exports) {
          const stringify = require('json-stable-stringify')

          module.exports = {
            cacheIdentifierForPayload: cacheIdentifierForPayload,
            canCache: canCache,
            blockTagForPayload: blockTagForPayload,
            paramsWithoutBlockTag: paramsWithoutBlockTag,
            blockTagParamIndex: blockTagParamIndex,
            cacheTypeForPayload: cacheTypeForPayload
          }

          function cacheIdentifierForPayload(payload, skipBlockRef) {
            const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params
            if (canCache(payload)) {
              return payload.method + ':' + stringify(simpleParams)
            } else {
              return null
            }
          }

          function canCache(payload) {
            return cacheTypeForPayload(payload) !== 'never'
          }

          function blockTagForPayload(payload) {
            let index = blockTagParamIndex(payload)

            // Block tag param not passed.
            if (index >= payload.params.length) {
              return null
            }

            return payload.params[index]
          }

          function paramsWithoutBlockTag(payload) {
            const index = blockTagParamIndex(payload)

            // Block tag param not passed.
            if (index >= payload.params.length) {
              return payload.params
            }

            // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
            if (payload.method === 'eth_getBlockByNumber') {
              return payload.params.slice(1)
            }

            return payload.params.slice(0, index)
          }

          function blockTagParamIndex(payload) {
            switch (payload.method) {
              // blockTag is at index 2
              case 'eth_getStorageAt':
                return 2
              // blockTag is at index 1
              case 'eth_getBalance':
              case 'eth_getCode':
              case 'eth_getTransactionCount':
              case 'eth_call':
                return 1
              // blockTag is at index 0
              case 'eth_getBlockByNumber':
                return 0
              // there is no blockTag
              default:
                return undefined
            }
          }

          function cacheTypeForPayload(payload) {
            switch (payload.method) {
              // cache permanently
              case 'web3_clientVersion':
              case 'web3_sha3':
              case 'eth_protocolVersion':
              case 'eth_getBlockTransactionCountByHash':
              case 'eth_getUncleCountByBlockHash':
              case 'eth_getCode':
              case 'eth_getBlockByHash':
              case 'eth_getTransactionByHash':
              case 'eth_getTransactionByBlockHashAndIndex':
              case 'eth_getTransactionReceipt':
              case 'eth_getUncleByBlockHashAndIndex':
              case 'eth_getCompilers':
              case 'eth_compileLLL':
              case 'eth_compileSolidity':
              case 'eth_compileSerpent':
              case 'shh_version':
              case 'test_permaCache':
                return 'perma'

              // cache until fork
              case 'eth_getBlockByNumber':
              case 'eth_getBlockTransactionCountByNumber':
              case 'eth_getUncleCountByBlockNumber':
              case 'eth_getTransactionByBlockNumberAndIndex':
              case 'eth_getUncleByBlockNumberAndIndex':
              case 'test_forkCache':
                return 'fork'

              // cache for block
              case 'eth_gasPrice':
              case 'eth_blockNumber':
              case 'eth_getBalance':
              case 'eth_getStorageAt':
              case 'eth_getTransactionCount':
              case 'eth_call':
              case 'eth_estimateGas':
              case 'eth_getFilterLogs':
              case 'eth_getLogs':
              case 'test_blockCache':
                return 'block'

              // never cache
              case 'net_version':
              case 'net_peerCount':
              case 'net_listening':
              case 'eth_syncing':
              case 'eth_sign':
              case 'eth_coinbase':
              case 'eth_mining':
              case 'eth_hashrate':
              case 'eth_accounts':
              case 'eth_sendTransaction':
              case 'eth_sendRawTransaction':
              case 'eth_newFilter':
              case 'eth_newBlockFilter':
              case 'eth_newPendingTransactionFilter':
              case 'eth_uninstallFilter':
              case 'eth_getFilterChanges':
              case 'eth_getWork':
              case 'eth_submitWork':
              case 'eth_submitHashrate':
              case 'db_putString':
              case 'db_getString':
              case 'db_putHex':
              case 'db_getHex':
              case 'shh_post':
              case 'shh_newIdentity':
              case 'shh_hasIdentity':
              case 'shh_newGroup':
              case 'shh_addToGroup':
              case 'shh_newFilter':
              case 'shh_uninstallFilter':
              case 'shh_getFilterChanges':
              case 'shh_getMessages':
              case 'test_neverCache':
                return 'never'
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-json-rpc-middleware", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\fetch.js", { "btoa": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\btoa\\index.js", "eth-rpc-errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\index.js", "json-rpc-engine/src/createAsyncMiddleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\json-rpc-engine\\src\\createAsyncMiddleware.js", "node-fetch": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\node-fetch\\browser.js", "url": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\url\\url.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-json-rpc-middleware\fetch.js
        return function (require, module, exports) {
          const fetch = global.fetch || require('node-fetch')
          const url = require('url')
          const { ethErrors } = require('eth-rpc-errors')
          const btoa = require('btoa')
          const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')


          module.exports = createFetchMiddleware
          module.exports.createFetchConfigFromReq = createFetchConfigFromReq

          const RETRIABLE_ERRORS = [
            // ignore server overload errors
            'Gateway timeout',
            'ETIMEDOUT',
            // ignore server sent html error pages
            // or truncated json responses
            'failed to parse response body',
            // ignore errors where http req failed to establish
            'Failed to fetch',
          ]

          function createFetchMiddleware({ rpcUrl, originHttpHeaderKey }) {
            return createAsyncMiddleware(async (req, res, next) => {
              const { fetchUrl, fetchParams } = createFetchConfigFromReq({ req, rpcUrl, originHttpHeaderKey })

              // attempt request multiple times
              const maxAttempts = 5
              const retryInterval = 1000
              for (let attempt = 0; attempt < maxAttempts; attempt++) {
                try {
                  const fetchRes = await fetch(fetchUrl, fetchParams)
                  // check for http errrors
                  checkForHttpErrors(fetchRes)
                  // parse response body
                  const rawBody = await fetchRes.text()
                  let fetchBody
                  try {
                    fetchBody = JSON.parse(rawBody)
                  } catch (_) {
                    throw new Error(`FetchMiddleware - failed to parse response body: "${rawBody}"`)
                  }
                  const result = parseResponse(fetchRes, fetchBody)
                  // set result and exit retry loop
                  res.result = result
                  return
                } catch (err) {
                  const errMsg = err.toString()
                  const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase))
                  // re-throw error if not retriable
                  if (!isRetriable) throw err
                }
                // delay before retrying
                await timeout(retryInterval)
              }
            })
          }

          function checkForHttpErrors(fetchRes) {
            // check for errors
            switch (fetchRes.status) {
              case 405:
                throw ethErrors.rpc.methodNotFound()

              case 418:
                throw createRatelimitError()

              case 503:
              case 504:
                throw createTimeoutError()
            }
          }

          function parseResponse(fetchRes, body) {
            // check for error code
            if (fetchRes.status !== 200) {
              throw ethErrors.rpc.internal({
                message: `Non-200 status code: '${fetchRes.status}'`,
                data: body,
              })
            }
            // check for rpc error
            if (body.error) throw ethErrors.rpc.internal({
              data: body.error,
            })
            // return successful result
            return body.result
          }

          function createFetchConfigFromReq({ req, rpcUrl, originHttpHeaderKey }) {
            const parsedUrl = url.parse(rpcUrl)
            const fetchUrl = normalizeUrlFromParsed(parsedUrl)

            // prepare payload
            // copy only canonical json rpc properties
            const payload = {
              id: req.id,
              jsonrpc: req.jsonrpc,
              method: req.method,
              params: req.params,
            }

            // extract 'origin' parameter from request
            const originDomain = req.origin

            // serialize request body
            const serializedPayload = JSON.stringify(payload)

            // configure fetch params
            const fetchParams = {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: serializedPayload,
            }

            // encoded auth details as header (not allowed in fetch url)
            if (parsedUrl.auth) {
              const encodedAuth = btoa(parsedUrl.auth)
              fetchParams.headers['Authorization'] = `Basic ${encodedAuth}`
            }

            // optional: add request origin as header
            if (originHttpHeaderKey && originDomain) {
              fetchParams.headers[originHttpHeaderKey] = originDomain
            }

            return { fetchUrl, fetchParams }
          }

          function normalizeUrlFromParsed(parsedUrl) {
            let result = ''
            result += parsedUrl.protocol
            if (parsedUrl.slashes) result += '//'
            result += parsedUrl.hostname
            if (parsedUrl.port) {
              result += `:${parsedUrl.port}`
            }
            result += `${parsedUrl.path}`
            return result
          }

          function createRatelimitError() {
            return ethErrors.rpc.internal({ message: `Request is being rate limited.` })
          }

          function createTimeoutError() {
            let msg = `Gateway timeout. The request took too long to process. `
            msg += `This can happen when querying logs over too wide a block range.`
            return ethErrors.rpc.internal({ message: msg })
          }

          function timeout(duration) {
            return new Promise(resolve => setTimeout(resolve, duration))
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-json-rpc-middleware", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\inflight-cache.js", { "./cache-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\cache-utils.js", "clone": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\clone\\clone.js", "json-rpc-engine/src/createAsyncMiddleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\json-rpc-engine\\src\\createAsyncMiddleware.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-json-rpc-middleware\inflight-cache.js
        return function (require, module, exports) {
          const clone = require('clone')
          const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
          const cacheIdentifierForPayload = require('./cache-utils').cacheIdentifierForPayload

          module.exports = createInflightCache


          function createInflightCache() {
            const inflightRequests = {}

            return createAsyncMiddleware(async (req, res, next) => {
              // allow cach to be skipped if so specified
              if (req.skipCache) return next()
              // get cacheId, if cacheable
              const cacheId = cacheIdentifierForPayload(req)
              // if not cacheable, skip
              if (!cacheId) return next()
              // check for matching requests
              let activeRequestHandlers = inflightRequests[cacheId]
              // if found, wait for the active request to be handled
              if (activeRequestHandlers) {
                // setup the response listener and wait for it to be called
                // it will handle copying the result and request fields
                await createActiveRequestHandler(res, activeRequestHandlers)
                return
              }
              // setup response handler array for subsequent requests
              activeRequestHandlers = []
              inflightRequests[cacheId] = activeRequestHandlers
              // allow request to be handled normally
              await next()
              // clear inflight requests
              delete inflightRequests[cacheId]
              // schedule activeRequestHandlers to be handled
              handleActiveRequest(res, activeRequestHandlers)
              // complete
              return
            })

            function createActiveRequestHandler(res, activeRequestHandlers) {
              const { resolve, promise } = deferredPromise()
              activeRequestHandlers.push((handledRes) => {
                // append a copy of the result and error to the response
                res.result = clone(handledRes.result)
                res.error = clone(handledRes.error)
                resolve()
              })
              return promise
            }

            function handleActiveRequest(res, activeRequestHandlers) {
              // use setTimeout so we can resolve our original request first
              setTimeout(() => {
                activeRequestHandlers.forEach((handler) => {
                  try {
                    handler(res)
                  } catch (err) {
                    // catch error so all requests are handled correctly
                    console.error(err)
                  }
                })
              })
            }
          }

          function deferredPromise() {
            let resolve
            const promise = new Promise(_resolve => { resolve = _resolve })
            return { resolve, promise }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-json-rpc-middleware", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\index.js", { "./src/classes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\classes.js", "./src/errorCodes.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorCodes.json", "./src/errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errors.js", "./src/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\index.js
        return function (require, module, exports) {

          const { EthereumRpcError, EthereumProviderError } = require('./src/classes')
          const {
            serializeError, getMessageFromCode,
          } = require('./src/utils')
          const ethErrors = require('./src/errors')
          const ERROR_CODES = require('./src/errorCodes.json')

          module.exports = {
            ethErrors,
            EthereumRpcError,
            EthereumProviderError,
            serializeError,
            getMessageFromCode,

            /** @type ErrorCodes */
            ERROR_CODES,
          }

          // Types

          /**
           * @typedef {Object} EthereumProviderErrorCodes
           * @property {number} userRejectedRequest
           * @property {number} unauthorized
           * @property {number} unsupportedMethod
           * @property {number} disconnected
           * @property {number} chainDisconnected
           */

          /**
           * @typedef {Object} EthereumRpcErrorCodes
           * @property {number} parse
           * @property {number} invalidRequest
           * @property {number} invalidParams
           * @property {number} methodNotFound
           * @property {number} limitExceeded
           * @property {number} internal
           * @property {number} invalidInput
           * @property {number} resourceNotFound
           * @property {number} resourceUnavailable
           * @property {number} transactionRejected
           * @property {number} methodNotSupported
           */

          /**
           * @typedef ErrorCodes
           * @property {EthereumRpcErrorCodes} rpc
           * @property {EthereumProviderErrorCodes} provider
           */

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\classes.js", { "fast-safe-stringify": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\fast-safe-stringify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\src\classes.js
        return function (require, module, exports) {

          const safeStringify = require('fast-safe-stringify')

          /**
           * @class JsonRpcError
           * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
           * per EIP 1474.
           * Permits any integer error code.
           */
          class EthereumRpcError extends Error {

            /**
             * Create an Ethereum JSON RPC error.
             *
             * @param {number} code - The integer error code.
             * @param {string} message - The string message.
             * @param {any} [data] - The error data.
             */
            constructor(code, message, data) {

              if (!Number.isInteger(code)) {
                throw new Error(
                  '"code" must be an integer.',
                )
              }
              if (!message || typeof message !== 'string') {
                throw new Error(
                  '"message" must be a nonempty string.',
                )
              }

              super(message)
              this.code = code
              if (data !== undefined) {
                this.data = data
              }
            }

            /**
             * Returns a plain object with all public class properties.
             *
             * @returns {object} The serialized error.
             */
            serialize() {
              const serialized = {
                code: this.code,
                message: this.message,
              }
              if (this.data !== undefined) {
                serialized.data = this.data
              }
              if (this.stack) {
                serialized.stack = this.stack
              }
              return serialized
            }

            /**
             * Return a string representation of the serialized error, omitting
             * any circular references.
             *
             * @returns {string} The serialized error as a string.
             */
            toString() {
              return safeStringify(
                this.serialize(),
                stringifyReplacer,
                2,
              )
            }
          }

          /**
           * @class EthereumRpcError
           * Error subclass implementing Ethereum Provider errors per EIP 1193.
           * Permits integer error codes in the [ 1000 <= 4999 ] range.
           */
          class EthereumProviderError extends EthereumRpcError {

            /**
             * Create an Ethereum JSON RPC error.
             *
             * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.
             * @param {string} message - The string message.
             * @param {any} [data] - The error data.
             */
            constructor(code, message, data) {

              if (!isValidEthProviderCode(code)) {
                throw new Error(
                  '"code" must be an integer such that: 1000 <= code <= 4999',
                )
              }

              super(code, message, data)
            }
          }

          // Internal

          function isValidEthProviderCode(code) {
            return Number.isInteger(code) && code >= 1000 && code <= 4999
          }

          function stringifyReplacer(_, value) {
            if (value === '[Circular]') {
              return undefined
            }
            return value
          }

          // Exports

          module.exports = {
            EthereumRpcError,
            EthereumProviderError,
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorCodes.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\src\errorCodes.json
        return function (require, module, exports) {
          module.exports = {
            "rpc": {
              "invalidInput": -32000,
              "resourceNotFound": -32001,
              "resourceUnavailable": -32002,
              "transactionRejected": -32003,
              "methodNotSupported": -32004,
              "limitExceeded": -32005,
              "parse": -32700,
              "invalidRequest": -32600,
              "methodNotFound": -32601,
              "invalidParams": -32602,
              "internal": -32603
            },
            "provider": {
              "userRejectedRequest": 4001,
              "unauthorized": 4100,
              "unsupportedMethod": 4200,
              "disconnected": 4900,
              "chainDisconnected": 4901
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorValues.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\src\errorValues.json
        return function (require, module, exports) {
          module.exports = {
            "-32700": {
              "standard": "JSON RPC 2.0",
              "message": "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
            },
            "-32600": {
              "standard": "JSON RPC 2.0",
              "message": "The JSON sent is not a valid Request object."
            },
            "-32601": {
              "standard": "JSON RPC 2.0",
              "message": "The method does not exist / is not available."
            },
            "-32602": {
              "standard": "JSON RPC 2.0",
              "message": "Invalid method parameter(s)."
            },
            "-32603": {
              "standard": "JSON RPC 2.0",
              "message": "Internal JSON-RPC error."
            },
            "-32000": {
              "standard": "EIP 1474",
              "message": "Invalid input."
            },
            "-32001": {
              "standard": "EIP 1474",
              "message": "Resource not found."
            },
            "-32002": {
              "standard": "EIP 1474",
              "message": "Resource unavailable."
            },
            "-32003": {
              "standard": "EIP 1474",
              "message": "Transaction rejected."
            },
            "-32004": {
              "standard": "EIP 1474",
              "message": "Method not supported."
            },
            "-32005": {
              "standard": "EIP 1474",
              "message": "Request limit exceeded."
            },
            "4001": {
              "standard": "EIP 1193",
              "message": "User rejected the request."
            },
            "4100": {
              "standard": "EIP 1193",
              "message": "The requested account and/or method has not been authorized by the user."
            },
            "4200": {
              "standard": "EIP 1193",
              "message": "The requested method is not supported by this Ethereum provider."
            },
            "4900": {
              "standard": "EIP 1193",
              "message": "The provider is disconnected from all chains."
            },
            "4901": {
              "standard": "EIP 1193",
              "message": "The provider is disconnected from the specified chain."
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errors.js", { "./classes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\classes.js", "./errorCodes.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorCodes.json", "./utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\src\errors.js
        return function (require, module, exports) {

          const { EthereumRpcError, EthereumProviderError } = require('./classes')
          const { getMessageFromCode } = require('./utils')
          const ERROR_CODES = require('./errorCodes.json')

          module.exports = {
            rpc: {

              /**
               * Get a JSON RPC 2.0 Parse (-32700) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              parse: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.parse, opts,
              ),

              /**
               * Get a JSON RPC 2.0 Invalid Request (-32600) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              invalidRequest: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.invalidRequest, opts,
              ),

              /**
               * Get a JSON RPC 2.0 Invalid Params (-32602) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              invalidParams: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.invalidParams, opts,
              ),

              /**
               * Get a JSON RPC 2.0 Method Not Found (-32601) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              methodNotFound: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.methodNotFound, opts,
              ),

              /**
               * Get a JSON RPC 2.0 Internal (-32603) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              internal: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.internal, opts,
              ),

              /**
               * Get a JSON RPC 2.0 Server error.
               * Permits integer error codes in the [ -32099 <= -32005 ] range.
               * Codes -32000 through -32004 are reserved by EIP 1474.
               *
               * @param {Object|string} opts - Options object
               * @param {number} opts.code - The error code
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              server: (opts) => {
                if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                  throw new Error('Ethereum RPC Server errors must provide single object argument.')
                }
                const { code } = opts
                if (!Number.isInteger(code) || code > -32005 || code < -32099) {
                  throw new Error(
                    '"code" must be an integer such that: -32099 <= code <= -32005',
                  )
                }
                return getEthJsonRpcError(code, opts)
              },

              /**
               * Get an Ethereum JSON RPC Invalid Input (-32000) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              invalidInput: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.invalidInput, opts,
              ),

              /**
               * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              resourceNotFound: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.resourceNotFound, opts,
              ),

              /**
               * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              resourceUnavailable: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.resourceUnavailable, opts,
              ),

              /**
               * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              transactionRejected: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.transactionRejected, opts,
              ),

              /**
               * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              methodNotSupported: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.methodNotSupported, opts,
              ),

              /**
               * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumRpcError} The error
               */
              limitExceeded: (opts) => getEthJsonRpcError(
                ERROR_CODES.rpc.limitExceeded, opts,
              ),
            },

            provider: {

              /**
               * Get an Ethereum Provider User Rejected Request (4001) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              userRejectedRequest: (opts) => {
                return getEthProviderError(
                  ERROR_CODES.provider.userRejectedRequest, opts,
                )
              },

              /**
               * Get an Ethereum Provider Unauthorized (4100) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              unauthorized: (opts) => {
                return getEthProviderError(
                  ERROR_CODES.provider.unauthorized, opts,
                )
              },

              /**
               * Get an Ethereum Provider Unsupported Method (4200) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              unsupportedMethod: (opts) => {
                return getEthProviderError(
                  ERROR_CODES.provider.unsupportedMethod, opts,
                )
              },

              /**
               * Get an Ethereum Provider Not Connected (4900) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              disconnected: (opts) => {
                return getEthProviderError(
                  ERROR_CODES.provider.disconnected, opts,
                )
              },

              /**
               * Get an Ethereum Provider Chain Not Connected (4901) error.
               *
               * @param {Object|string} [opts] - Options object or error message string
               * @param {string} [opts.message] - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              chainDisconnected: (opts) => {
                return getEthProviderError(
                  ERROR_CODES.provider.chainDisconnected, opts,
                )
              },

              /**
               * Get a custom Ethereum Provider error.
               *
               * @param {Object|string} opts - Options object
               * @param {number} opts.code - The error code
               * @param {string} opts.message - The error message
               * @param {any} [opts.data] - Error data
               * @returns {EthereumProviderError} The error
               */
              custom: (opts) => {
                if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                  throw new Error('Ethereum Provider custom errors must provide single object argument.')
                }
                const { code, message, data } = opts
                if (!message || typeof message !== 'string') {
                  throw new Error(
                    '"message" must be a nonempty string',
                  )
                }
                return new EthereumProviderError(code, message, data)
              },
            },
          }

          // Internal

          function getEthJsonRpcError(code, opts) {
            const [message, data] = validateOpts(opts)
            return new EthereumRpcError(
              code,
              message || getMessageFromCode(code),
              data,
            )
          }

          function getEthProviderError(code, opts) {
            const [message, data] = validateOpts(opts)
            return new EthereumProviderError(
              code,
              message || getMessageFromCode(code),
              data,
            )
          }

          function validateOpts(opts) {
            if (opts) {
              if (typeof opts === 'string') {
                return [opts]
              } else if (typeof opts === 'object' && !Array.isArray(opts)) {
                const { message, data } = opts
                return [message, data]
              }
            }
            return []
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\utils.js", { "./classes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\classes.js", "./errorCodes.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorCodes.json", "./errorValues.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-rpc-errors\\src\\errorValues.json" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-rpc-errors\src\utils.js
        return function (require, module, exports) {

          const errorValues = require('./errorValues.json')
          const FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal
          const { EthereumRpcError } = require('./classes')

          const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'

          const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'

          const FALLBACK_ERROR = {
            code: FALLBACK_ERROR_CODE,
            message: getMessageFromCode(FALLBACK_ERROR_CODE),
          }

          /**
           * Gets the message for a given code, or a fallback message if the code has
           * no corresponding message.
           *
           * @param {number} code - The integer error code
           * @param {string} fallbackMessage - The fallback message
           * @return {string} The corresponding message or the fallback message
           */
          function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {

            if (Number.isInteger(code)) {

              const codeString = code.toString()

              if (errorValues[codeString]) {
                return errorValues[codeString].message
              }
              if (isJsonRpcServerError(code)) {
                return JSON_RPC_SERVER_ERROR_MESSAGE
              }
            }
            return fallbackMessage
          }

          /**
           * Returns whether the given code is valid.
           * A code is only valid if it has a message.
           *
           * @param {number} code - The code to check
           * @return {boolean} true if the code is valid, false otherwise.
           */
          function isValidCode(code) {

            if (!Number.isInteger(code)) {
              return false
            }

            const codeString = code.toString()
            if (errorValues[codeString]) {
              return true
            }

            if (isJsonRpcServerError(code)) {
              return true
            }

            // TODO: allow valid codes and messages to be extended
            // // EIP 1193 Status Codes
            // if (code >= 4000 && code <= 4999) return true

            return false
          }

          /**
           * Serializes the given error to an Ethereum JSON RPC-compatible error object.
           * Merely copies the given error's values if it is already compatible.
           * If the given error is not fully compatible, it will be preserved on the
           * returned object's data.originalError property.
           *
           * @param {any} error - The error to serialize.
           * @param {Object} [options] - An options object.
           * @param {Object} [options.fallbackError] - The custom fallback error values if
           * the given error is invalid.
           * @param {boolean} [options.shouldIncludeStack] - Whether the 'stack' property
           * of the given error should be included on the serialized error, if present.
           * @return {Object} A standardized, plain error object.
           */
          function serializeError(
            error,
            { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false } = {},
          ) {

            if (
              !fallbackError ||
              !Number.isInteger(fallbackError.code) ||
              typeof fallbackError.message !== 'string'
            ) {
              throw new Error(
                'Must provide fallback error with integer number code and string message.',
              )
            }

            if (error instanceof EthereumRpcError) {
              return error.serialize()
            }

            const serialized = {}

            if (error && isValidCode(error.code)) {

              serialized.code = error.code

              if (error.message && typeof error.message === 'string') {
                serialized.message = error.message
                if ('data' in error) {
                  serialized.data = error.data
                }
              } else {
                serialized.message = getMessageFromCode(serialized.code)
                serialized.data = { originalError: assignOriginalError(error) }
              }

            } else {
              serialized.code = fallbackError.code
              serialized.message = (
                error && error.message
                  ? error.message
                  : fallbackError.message
              )
              serialized.data = { originalError: assignOriginalError(error) }
            }

            if (shouldIncludeStack && error && typeof error.stack === 'string') {
              serialized.stack = error.stack
            }
            return serialized
          }

          // Internal

          function isJsonRpcServerError(code) {
            return code >= -32099 && code <= -32000
          }

          function assignOriginalError(error) {
            if (error && typeof error === 'object' && !Array.isArray(error)) {
              return { ...error }
            }
            return error
          }

          // Exports

          module.exports = {
            getMessageFromCode,
            isValidCode,
            serializeError,
            JSON_RPC_SERVER_ERROR_MESSAGE,
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-rpc-errors", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-sig-util\\index.js", { "ethereumjs-abi": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-abi\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\eth-sig-util\index.js
        return function (require, module, exports) {
          const ethUtil = require('ethereumjs-util')
          const ethAbi = require('ethereumjs-abi')

          module.exports = {

            concatSig: function (v, r, s) {
              const rSig = ethUtil.fromSigned(r)
              const sSig = ethUtil.fromSigned(s)
              const vSig = ethUtil.bufferToInt(v)
              const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)
              const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)
              const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))
              return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
            },

            normalize: function (input) {
              if (!input) return

              if (typeof input === 'number') {
                const buffer = ethUtil.toBuffer(input)
                input = ethUtil.bufferToHex(buffer)
              }

              if (typeof input !== 'string') {
                var msg = 'eth-sig-util.normalize() requires hex string or integer input.'
                msg += ' received ' + (typeof input) + ': ' + input
                throw new Error(msg)
              }

              return ethUtil.addHexPrefix(input.toLowerCase())
            },

            personalSign: function (privateKey, msgParams) {
              var message = ethUtil.toBuffer(msgParams.data)
              var msgHash = ethUtil.hashPersonalMessage(message)
              var sig = ethUtil.ecsign(msgHash, privateKey)
              var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
              return serialized
            },

            recoverPersonalSignature: function (msgParams) {
              const publicKey = getPublicKeyFor(msgParams)
              const sender = ethUtil.publicToAddress(publicKey)
              const senderHex = ethUtil.bufferToHex(sender)
              return senderHex
            },

            extractPublicKey: function (msgParams) {
              const publicKey = getPublicKeyFor(msgParams)
              return '0x' + publicKey.toString('hex')
            },

            typedSignatureHash: function (typedData) {
              const hashBuffer = typedSignatureHash(typedData)
              return ethUtil.bufferToHex(hashBuffer)
            },

            signTypedData: function (privateKey, msgParams) {
              const msgHash = typedSignatureHash(msgParams.data)
              const sig = ethUtil.ecsign(msgHash, privateKey)
              return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
            },

            recoverTypedSignature: function (msgParams) {
              const msgHash = typedSignatureHash(msgParams.data)
              const publicKey = recoverPublicKey(msgHash, msgParams.sig)
              const sender = ethUtil.publicToAddress(publicKey)
              return ethUtil.bufferToHex(sender)
            }

          }

          /**
           * @param typedData - Array of data along with types, as per EIP712.
           * @returns Buffer
           */
          function typedSignatureHash(typedData) {
            const error = new Error('Expect argument to be non-empty array')
            if (typeof typedData !== 'object' || !typedData.length) throw error

            const data = typedData.map(function (e) {
              return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value
            })
            const types = typedData.map(function (e) { return e.type })
            const schema = typedData.map(function (e) {
              if (!e.name) throw error
              return e.type + ' ' + e.name
            })

            return ethAbi.soliditySHA3(
              ['bytes32', 'bytes32'],
              [
                ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
                ethAbi.soliditySHA3(types, data)
              ]
            )
          }

          function recoverPublicKey(hash, sig) {
            const signature = ethUtil.toBuffer(sig)
            const sigParams = ethUtil.fromRpcSig(signature)
            return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
          }

          function getPublicKeyFor(msgParams) {
            const message = ethUtil.toBuffer(msgParams.data)
            const msgHash = ethUtil.hashPersonalMessage(message)
            return recoverPublicKey(msgHash, msgParams.sig)
          }


          function padWithZeroes(number, length) {
            var myString = '' + number
            while (myString.length < length) {
              myString = '0' + myString
            }
            return myString
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-sig-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js", { "./secp256k1-adapter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-adapter.js", "assert": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\assert\\assert.js", "bn.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js", "create-hash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\create-hash\\browser.js", "ethereum-cryptography/keccak": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereum-cryptography\\keccak.js", "ethjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethjs-util\\lib\\index.js", "rlp": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\rlp\\dist.browser\\index.js", "safe-buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\safe-buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\ethereumjs-util\dist\index.js
        return function (require, module, exports) {
          'use strict';

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

          var _require = require('ethereum-cryptography/keccak'),
            keccak224 = _require.keccak224,
            keccak384 = _require.keccak384,
            k256 = _require.keccak256,
            keccak512 = _require.keccak512;

          var secp256k1 = require('./secp256k1-adapter');
          var assert = require('assert');
          var rlp = require('rlp');
          var BN = require('bn.js');
          var createHash = require('create-hash');
          var Buffer = require('safe-buffer').Buffer;
          Object.assign(exports, require('ethjs-util'));

          /**
           * the max integer that this VM can handle (a ```BN```)
           * @var {BN} MAX_INTEGER
           */
          exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

          /**
           * 2^256 (a ```BN```)
           * @var {BN} TWO_POW256
           */
          exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

          /**
           * Keccak-256 hash of null (a ```String```)
           * @var {String} KECCAK256_NULL_S
           */
          exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
          exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

          /**
           * Keccak-256 hash of null (a ```Buffer```)
           * @var {Buffer} KECCAK256_NULL
           */
          exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
          exports.SHA3_NULL = exports.KECCAK256_NULL;

          /**
           * Keccak-256 of an RLP of an empty array (a ```String```)
           * @var {String} KECCAK256_RLP_ARRAY_S
           */
          exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
          exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

          /**
           * Keccak-256 of an RLP of an empty array (a ```Buffer```)
           * @var {Buffer} KECCAK256_RLP_ARRAY
           */
          exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
          exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

          /**
           * Keccak-256 hash of the RLP of null  (a ```String```)
           * @var {String} KECCAK256_RLP_S
           */
          exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
          exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

          /**
           * Keccak-256 hash of the RLP of null (a ```Buffer```)
           * @var {Buffer} KECCAK256_RLP
           */
          exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
          exports.SHA3_RLP = exports.KECCAK256_RLP;

          /**
           * [`BN`](https://github.com/indutny/bn.js)
           * @var {Function}
           */
          exports.BN = BN;

          /**
           * [`rlp`](https://github.com/ethereumjs/rlp)
           * @var {Function}
           */
          exports.rlp = rlp;

          /**
           * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
           * @var {Object}
           */
          exports.secp256k1 = secp256k1;

          /**
           * Returns a buffer filled with 0s
           * @method zeros
           * @param {Number} bytes  the number of bytes the buffer should be
           * @return {Buffer}
           */
          exports.zeros = function (bytes) {
            return Buffer.allocUnsafe(bytes).fill(0);
          };

          /**
            * Returns a zero address
            * @method zeroAddress
            * @return {String}
            */
          exports.zeroAddress = function () {
            var addressLength = 20;
            var zeroAddress = exports.zeros(addressLength);
            return exports.bufferToHex(zeroAddress);
          };

          /**
           * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
           * Or it truncates the beginning if it exceeds.
           * @method lsetLength
           * @param {Buffer|Array} msg the value to pad
           * @param {Number} length the number of bytes the output should be
           * @param {Boolean} [right=false] whether to start padding form the left or right
           * @return {Buffer|Array}
           */
          exports.setLengthLeft = exports.setLength = function (msg, length, right) {
            var buf = exports.zeros(length);
            msg = exports.toBuffer(msg);
            if (right) {
              if (msg.length < length) {
                msg.copy(buf);
                return buf;
              }
              return msg.slice(0, length);
            } else {
              if (msg.length < length) {
                msg.copy(buf, length - msg.length);
                return buf;
              }
              return msg.slice(-length);
            }
          };

          /**
           * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
           * Or it truncates the beginning if it exceeds.
           * @param {Buffer|Array} msg the value to pad
           * @param {Number} length the number of bytes the output should be
           * @return {Buffer|Array}
           */
          exports.setLengthRight = function (msg, length) {
            return exports.setLength(msg, length, true);
          };

          /**
           * Trims leading zeros from a `Buffer` or an `Array`
           * @param {Buffer|Array|String} a
           * @return {Buffer|Array|String}
           */
          exports.unpad = exports.stripZeros = function (a) {
            a = exports.stripHexPrefix(a);
            var first = a[0];
            while (a.length > 0 && first.toString() === '0') {
              a = a.slice(1);
              first = a[0];
            }
            return a;
          };
          /**
           * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
           * @param {*} v the value
           */
          exports.toBuffer = function (v) {
            if (!Buffer.isBuffer(v)) {
              if (Array.isArray(v)) {
                v = Buffer.from(v);
              } else if (typeof v === 'string') {
                if (exports.isHexString(v)) {
                  v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
                } else {
                  v = Buffer.from(v);
                }
              } else if (typeof v === 'number') {
                v = exports.intToBuffer(v);
              } else if (v === null || v === undefined) {
                v = Buffer.allocUnsafe(0);
              } else if (BN.isBN(v)) {
                v = v.toArrayLike(Buffer);
              } else if (v.toArray) {
                // converts a BN to a Buffer
                v = Buffer.from(v.toArray());
              } else {
                throw new Error('invalid type');
              }
            }
            return v;
          };

          /**
           * Converts a `Buffer` to a `Number`
           * @param {Buffer} buf
           * @return {Number}
           * @throws If the input number exceeds 53 bits.
           */
          exports.bufferToInt = function (buf) {
            return new BN(exports.toBuffer(buf)).toNumber();
          };

          /**
           * Converts a `Buffer` into a hex `String`
           * @param {Buffer} buf
           * @return {String}
           */
          exports.bufferToHex = function (buf) {
            buf = exports.toBuffer(buf);
            return '0x' + buf.toString('hex');
          };

          /**
           * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
           * @param {Buffer} num
           * @return {BN}
           */
          exports.fromSigned = function (num) {
            return new BN(num).fromTwos(256);
          };

          /**
           * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
           * @param {BN} num
           * @return {Buffer}
           */
          exports.toUnsigned = function (num) {
            return Buffer.from(num.toTwos(256).toArray());
          };

          /**
           * Creates Keccak hash of the input
           * @param {Buffer|Array|String|Number} a the input data
           * @param {Number} [bits=256] the Keccak width
           * @return {Buffer}
           */
          exports.keccak = function (a, bits) {
            a = exports.toBuffer(a);
            if (!bits) bits = 256;

            switch (bits) {
              case 224:
                {
                  return keccak224(a);
                }
              case 256:
                {
                  return k256(a);
                }
              case 384:
                {
                  return keccak384(a);
                }
              case 512:
                {
                  return keccak512(a);
                }
              default:
                {
                  throw new Error('Invald algorithm: keccak' + bits);
                }
            }
          };

          /**
           * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
           * @param {Buffer|Array|String|Number} a the input data
           * @return {Buffer}
           */
          exports.keccak256 = function (a) {
            return exports.keccak(a);
          };

          /**
           * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
           * @param {Buffer|Array|String|Number} a the input data
           * @param {Number} [bits=256] the SHA-3 width
           * @return {Buffer}
           */
          exports.sha3 = exports.keccak;

          /**
           * Creates SHA256 hash of the input
           * @param {Buffer|Array|String|Number} a the input data
           * @return {Buffer}
           */
          exports.sha256 = function (a) {
            a = exports.toBuffer(a);
            return createHash('sha256').update(a).digest();
          };

          /**
           * Creates RIPEMD160 hash of the input
           * @param {Buffer|Array|String|Number} a the input data
           * @param {Boolean} padded whether it should be padded to 256 bits or not
           * @return {Buffer}
           */
          exports.ripemd160 = function (a, padded) {
            a = exports.toBuffer(a);
            var hash = createHash('rmd160').update(a).digest();
            if (padded === true) {
              return exports.setLength(hash, 32);
            } else {
              return hash;
            }
          };

          /**
           * Creates SHA-3 hash of the RLP encoded version of the input
           * @param {Buffer|Array|String|Number} a the input data
           * @return {Buffer}
           */
          exports.rlphash = function (a) {
            return exports.keccak(rlp.encode(a));
          };

          /**
           * Checks if the private key satisfies the rules of the curve secp256k1.
           * @param {Buffer} privateKey
           * @return {Boolean}
           */
          exports.isValidPrivate = function (privateKey) {
            return secp256k1.privateKeyVerify(privateKey);
          };

          /**
           * Checks if the public key satisfies the rules of the curve secp256k1
           * and the requirements of Ethereum.
           * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
           * @param {Boolean} [sanitize=false] Accept public keys in other formats
           * @return {Boolean}
           */
          exports.isValidPublic = function (publicKey, sanitize) {
            if (publicKey.length === 64) {
              // Convert to SEC1 for secp256k1
              return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
            }

            if (!sanitize) {
              return false;
            }

            return secp256k1.publicKeyVerify(publicKey);
          };

          /**
           * Returns the ethereum address of a given public key.
           * Accepts "Ethereum public keys" and SEC1 encoded keys.
           * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
           * @param {Boolean} [sanitize=false] Accept public keys in other formats
           * @return {Buffer}
           */
          exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
            pubKey = exports.toBuffer(pubKey);
            if (sanitize && pubKey.length !== 64) {
              pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
            }
            assert(pubKey.length === 64);
            // Only take the lower 160bits of the hash
            return exports.keccak(pubKey).slice(-20);
          };

          /**
           * Returns the ethereum public key of a given private key
           * @param {Buffer} privateKey A private key must be 256 bits wide
           * @return {Buffer}
           */
          var privateToPublic = exports.privateToPublic = function (privateKey) {
            privateKey = exports.toBuffer(privateKey);
            // skip the type flag and use the X, Y points
            return secp256k1.publicKeyCreate(privateKey, false).slice(1);
          };

          /**
           * Converts a public key to the Ethereum format.
           * @param {Buffer} publicKey
           * @return {Buffer}
           */
          exports.importPublic = function (publicKey) {
            publicKey = exports.toBuffer(publicKey);
            if (publicKey.length !== 64) {
              publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
            }
            return publicKey;
          };

          /**
           * ECDSA sign
           * @param {Buffer} msgHash
           * @param {Buffer} privateKey
           * @return {Object}
           */
          exports.ecsign = function (msgHash, privateKey) {
            var sig = secp256k1.sign(msgHash, privateKey);

            var ret = {};
            ret.r = sig.signature.slice(0, 32);
            ret.s = sig.signature.slice(32, 64);
            ret.v = sig.recovery + 27;
            return ret;
          };

          /**
           * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
           * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
           * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
           * used to produce the signature.
           * @param message
           * @returns {Buffer} hash
           */
          exports.hashPersonalMessage = function (message) {
            var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
            return exports.keccak(Buffer.concat([prefix, message]));
          };

          /**
           * ECDSA public key recovery from signature
           * @param {Buffer} msgHash
           * @param {Number} v
           * @param {Buffer} r
           * @param {Buffer} s
           * @return {Buffer} publicKey
           */
          exports.ecrecover = function (msgHash, v, r, s) {
            var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
            var recovery = v - 27;
            if (recovery !== 0 && recovery !== 1) {
              throw new Error('Invalid signature v value');
            }
            var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
            return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
          };

          /**
           * Convert signature parameters into the format of `eth_sign` RPC method
           * @param {Number} v
           * @param {Buffer} r
           * @param {Buffer} s
           * @return {String} sig
           */
          exports.toRpcSig = function (v, r, s) {
            // NOTE: with potential introduction of chainId this might need to be updated
            if (v !== 27 && v !== 28) {
              throw new Error('Invalid recovery id');
            }

            // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
            // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
            return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
          };

          /**
           * Convert signature format of the `eth_sign` RPC method to signature parameters
           * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
           * @param {String} sig
           * @return {Object}
           */
          exports.fromRpcSig = function (sig) {
            sig = exports.toBuffer(sig);

            // NOTE: with potential introduction of chainId this might need to be updated
            if (sig.length !== 65) {
              throw new Error('Invalid signature length');
            }

            var v = sig[64];
            // support both versions of `eth_sign` responses
            if (v < 27) {
              v += 27;
            }

            return {
              v: v,
              r: sig.slice(0, 32),
              s: sig.slice(32, 64)
            };
          };

          /**
           * Returns the ethereum address of a given private key
           * @param {Buffer} privateKey A private key must be 256 bits wide
           * @return {Buffer}
           */
          exports.privateToAddress = function (privateKey) {
            return exports.publicToAddress(privateToPublic(privateKey));
          };

          /**
           * Checks if the address is a valid. Accepts checksummed addresses too
           * @param {String} address
           * @return {Boolean}
           */
          exports.isValidAddress = function (address) {
            return (/^0x[0-9a-fA-F]{40}$/.test(address)
            );
          };

          /**
            * Checks if a given address is a zero address
            * @method isZeroAddress
            * @param {String} address
            * @return {Boolean}
            */
          exports.isZeroAddress = function (address) {
            var zeroAddress = exports.zeroAddress();
            return zeroAddress === exports.addHexPrefix(address);
          };

          /**
           * Returns a checksummed address
           * @param {String} address
           * @return {String}
           */
          exports.toChecksumAddress = function (address) {
            address = exports.stripHexPrefix(address).toLowerCase();
            var hash = exports.keccak(address).toString('hex');
            var ret = '0x';

            for (var i = 0; i < address.length; i++) {
              if (parseInt(hash[i], 16) >= 8) {
                ret += address[i].toUpperCase();
              } else {
                ret += address[i];
              }
            }

            return ret;
          };

          /**
           * Checks if the address is a valid checksummed address
           * @param {Buffer} address
           * @return {Boolean}
           */
          exports.isValidChecksumAddress = function (address) {
            return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
          };

          /**
           * Generates an address of a newly created contract
           * @param {Buffer} from the address which is creating this new address
           * @param {Buffer} nonce the nonce of the from account
           * @return {Buffer}
           */
          exports.generateAddress = function (from, nonce) {
            from = exports.toBuffer(from);
            nonce = new BN(nonce);

            if (nonce.isZero()) {
              // in RLP we want to encode null in the case of zero nonce
              // read the RLP documentation for an answer if you dare
              nonce = null;
            } else {
              nonce = Buffer.from(nonce.toArray());
            }

            // Only take the lower 160bits of the hash
            return exports.rlphash([from, nonce]).slice(-20);
          };

          /**
           * Returns true if the supplied address belongs to a precompiled account (Byzantium)
           * @param {Buffer|String} address
           * @return {Boolean}
           */
          exports.isPrecompiled = function (address) {
            var a = exports.unpad(address);
            return a.length === 1 && a[0] >= 1 && a[0] <= 8;
          };

          /**
           * Adds "0x" to a given `String` if it does not already start with "0x"
           * @param {String} str
           * @return {String}
           */
          exports.addHexPrefix = function (str) {
            if (typeof str !== 'string') {
              return str;
            }

            return exports.isHexPrefixed(str) ? str : '0x' + str;
          };

          /**
           * Validate ECDSA signature
           * @method isValidSignature
           * @param {Buffer} v
           * @param {Buffer} r
           * @param {Buffer} s
           * @param {Boolean} [homestead=true]
           * @return {Boolean}
           */

          exports.isValidSignature = function (v, r, s, homestead) {
            var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
            var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

            if (r.length !== 32 || s.length !== 32) {
              return false;
            }

            if (v !== 27 && v !== 28) {
              return false;
            }

            r = new BN(r);
            s = new BN(s);

            if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
              return false;
            }

            if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
              return false;
            }

            return true;
          };

          /**
           * Converts a `Buffer` or `Array` to JSON
           * @param {Buffer|Array} ba
           * @return {Array|String|null}
           */
          exports.baToJSON = function (ba) {
            if (Buffer.isBuffer(ba)) {
              return '0x' + ba.toString('hex');
            } else if (ba instanceof Array) {
              var array = [];
              for (var i = 0; i < ba.length; i++) {
                array.push(exports.baToJSON(ba[i]));
              }
              return array;
            }
          };

          /**
           * Defines properties on a `Object`. It make the assumption that underlying data is binary.
           * @param {Object} self the `Object` to define properties on
           * @param {Array} fields an array fields to define. Fields can contain:
           * * `name` - the name of the properties
           * * `length` - the number of bytes the field can have
           * * `allowLess` - if the field can be less than the length
           * * `allowEmpty`
           * @param {*} data data to be validated against the definitions
           */
          exports.defineProperties = function (self, fields, data) {
            self.raw = [];
            self._fields = [];

            // attach the `toJSON`
            self.toJSON = function (label) {
              if (label) {
                var obj = {};
                self._fields.forEach(function (field) {
                  obj[field] = '0x' + self[field].toString('hex');
                });
                return obj;
              }
              return exports.baToJSON(this.raw);
            };

            self.serialize = function serialize() {
              return rlp.encode(self.raw);
            };

            fields.forEach(function (field, i) {
              self._fields.push(field.name);
              function getter() {
                return self.raw[i];
              }
              function setter(v) {
                v = exports.toBuffer(v);

                if (v.toString('hex') === '00' && !field.allowZero) {
                  v = Buffer.allocUnsafe(0);
                }

                if (field.allowLess && field.length) {
                  v = exports.stripZeros(v);
                  assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
                } else if (!(field.allowZero && v.length === 0) && field.length) {
                  assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
                }

                self.raw[i] = v;
              }

              Object.defineProperty(self, field.name, {
                enumerable: true,
                configurable: true,
                get: getter,
                set: setter
              });

              if (field.default) {
                self[field.name] = field.default;
              }

              // attach alias
              if (field.alias) {
                Object.defineProperty(self, field.alias, {
                  enumerable: false,
                  configurable: true,
                  set: setter,
                  get: getter
                });
              }
            });

            // if the constuctor is passed data
            if (data) {
              if (typeof data === 'string') {
                data = Buffer.from(exports.stripHexPrefix(data), 'hex');
              }

              if (Buffer.isBuffer(data)) {
                data = rlp.decode(data);
              }

              if (Array.isArray(data)) {
                if (data.length > self._fields.length) {
                  throw new Error('wrong number of fields in data');
                }

                // make sure all the items are buffers
                data.forEach(function (d, i) {
                  self[self._fields[i]] = exports.toBuffer(d);
                });
              } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
                var keys = Object.keys(data);
                fields.forEach(function (field) {
                  if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
                  if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
                });
              } else {
                throw new Error('invalid data');
              }
            }
          };
        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>ethereumjs-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-adapter.js", { "./secp256k1-lib/der": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\der.js", "./secp256k1-lib/index": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\index.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "ethereum-cryptography/secp256k1": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereum-cryptography\\secp256k1.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\ethereumjs-util\dist\secp256k1-adapter.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';

              var secp256k1 = require('ethereum-cryptography/secp256k1');

              var secp256k1v3 = require('./secp256k1-lib/index');
              var der = require('./secp256k1-lib/der');

              /**
               * Verify an ECDSA privateKey
               * @method privateKeyVerify
               * @param {Buffer} privateKey
               * @return {boolean}
               */
              var privateKeyVerify = function privateKeyVerify(privateKey) {
                // secp256k1 v4 version throws when privateKey length is not 32
                if (privateKey.length !== 32) {
                  return false;
                }

                return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
              };

              /**
               * Export a privateKey in DER format
               * @method privateKeyExport
               * @param {Buffer} privateKey
               * @param {boolean} compressed
               * @return {boolean}
               */
              var privateKeyExport = function privateKeyExport(privateKey, compressed) {
                // privateKeyExport method is not part of secp256k1 v4 package
                // this implementation is based on v3
                if (privateKey.length !== 32) {
                  throw new RangeError('private key length is invalid');
                }

                var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

                return der.privateKeyExport(privateKey, publicKey, compressed);
              };

              /**
               * Import a privateKey in DER format
               * @method privateKeyImport
               * @param {Buffer} privateKey
               * @return {Buffer}
               */

              var privateKeyImport = function privateKeyImport(privateKey) {
                // privateKeyImport method is not part of secp256k1 v4 package
                // this implementation is based on v3
                privateKey = der.privateKeyImport(privateKey);
                if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
                  return privateKey;
                }

                throw new Error("couldn't import from DER format");
              };

              /**
               * Negate a privateKey by subtracting it from the order of the curve's base point
               * @method privateKeyNegate
               * @param {Buffer} privateKey
               * @return {Buffer}
               */
              var privateKeyNegate = function privateKeyNegate(privateKey) {
                return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
              };

              /**
               * Compute the inverse of a privateKey (modulo the order of the curve's base point).
               * @method privateKeyModInverse
               * @param {Buffer} privateKey
               * @return {Buffer}
               */
              var privateKeyModInverse = function privateKeyModInverse(privateKey) {
                if (privateKey.length !== 32) {
                  throw new Error('private key length is invalid');
                }

                return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
              };

              /**
               * Tweak a privateKey by adding tweak to it.
               * @method privateKeyTweakAdd
               * @param {Buffer} privateKey
               * @param {Buffer} tweak
               * @return {Buffer}
               */
              var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
                return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
              };

              /**
               * Tweak a privateKey by multiplying it by a tweak.
               * @method privateKeyTweakMul
               * @param {Buffer} privateKey
               * @param {Buffer} tweak
               * @return {Buffer}
               */
              var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
                return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
              };

              /**
               * Compute the public key for a privateKey.
               * @method publicKeyCreate
               * @param {Buffer} privateKey
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
                return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
              };

              /**
               * Convert a publicKey to compressed or uncompressed form.
               * @method publicKeyConvert
               * @param {Buffer} publicKey
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
                return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
              };

              /**
               * Verify an ECDSA publicKey.
               * @method publicKeyVerify
               * @param {Buffer} publicKey
               * @return {boolean}
               */
              var publicKeyVerify = function publicKeyVerify(publicKey) {
                // secp256k1 v4 version throws when publicKey length is not 33 or 65
                if (publicKey.length !== 33 && publicKey.length !== 65) {
                  return false;
                }

                return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
              };

              /**
               * Tweak a publicKey by adding tweak times the generator to it.
               * @method publicKeyTweakAdd
               * @param {Buffer} publicKey
               * @param {Buffer} tweak
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
                return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
              };

              /**
               * Tweak a publicKey by multiplying it by a tweak value
               * @method publicKeyTweakMul
               * @param {Buffer} publicKey
               * @param {Buffer} tweak
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
                return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
              };

              /**
               * Add a given publicKeys together.
               * @method publicKeyCombine
               * @param {Array<Buffer>} publicKeys
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
                var keys = [];
                publicKeys.forEach(function (publicKey) {
                  keys.push(Uint8Array.from(publicKey));
                });

                return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
              };

              /**
               * Convert a signature to a normalized lower-S form.
               * @method signatureNormalize
               * @param {Buffer} signature
               * @return {Buffer}
               */
              var signatureNormalize = function signatureNormalize(signature) {
                return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
              };

              /**
               * Serialize an ECDSA signature in DER format.
               * @method signatureExport
               * @param {Buffer} signature
               * @return {Buffer}
               */
              var signatureExport = function signatureExport(signature) {
                return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
              };

              /**
               * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
               * @method signatureImport
               * @param {Buffer} signature
               * @return {Buffer}
               */
              var signatureImport = function signatureImport(signature) {
                return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
              };

              /**
               * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
               * @method signatureImportLax
               * @param {Buffer} signature
               * @return {Buffer}
               */
              var signatureImportLax = function signatureImportLax(signature) {
                // signatureImportLax method is not part of secp256k1 v4 package
                // this implementation is based on v3
                // ensure that signature is greater than 0
                if (signature.length === 0) {
                  throw new RangeError('signature length is invalid');
                }

                var sigObj = der.signatureImportLax(signature);
                if (sigObj === null) {
                  throw new Error("couldn't parse DER signature");
                }

                return secp256k1v3.signatureImport(sigObj);
              };

              /**
               * Create an ECDSA signature. Always return low-S signature.
               * @method sign
               * @param {Buffer} message
               * @param {Buffer} privateKey
               * @param {Object} options
               * @return {Buffer}
               */
              var sign = function sign(message, privateKey, options) {
                if (options === null) {
                  throw new TypeError('options should be an Object');
                }

                var signOptions = void 0;

                if (options) {
                  signOptions = {};

                  if (options.data === null) {
                    throw new TypeError('options.data should be a Buffer');
                  }

                  if (options.data) {
                    // validate option.data length
                    if (options.data.length !== 32) {
                      throw new RangeError('options.data length is invalid');
                    }

                    signOptions.data = new Uint8Array(options.data);
                  }

                  if (options.noncefn === null) {
                    throw new TypeError('options.noncefn should be a Function');
                  }

                  if (options.noncefn) {
                    //  convert option.noncefn function signature
                    signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                      var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                      var bufferData = data != null ? Buffer.from(data) : null;

                      var buffer = Buffer.from('');

                      if (options.noncefn) {
                        buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                      }

                      return Uint8Array.from(buffer);
                    };
                  }
                }

                var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

                return {
                  signature: Buffer.from(sig.signature),
                  recovery: sig.recid
                };
              };

              /**
               * Verify an ECDSA signature.
               * @method verify
               * @param {Buffer} message
               * @param {Buffer} signature
               * @param {Buffer} publicKey
               * @return {boolean}
               */
              var verify = function verify(message, signature, publicKey) {
                // note: secp256k1 v4 verify method has a different argument order
                return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
              };

              /**
               * Recover an ECDSA public key from a signature.
               * @method recover
               * @param {Buffer} message
               * @param {Buffer} signature
               * @param {Number} recid
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var recover = function recover(message, signature, recid, compressed) {
                // note: secp256k1 v4 recover method has a different argument order
                return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
              };

              /**
               * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
               * @method ecdh
               * @param {Buffer} publicKey
               * @param {Buffer} privateKey
               * @return {Buffer}
               */
              var ecdh = function ecdh(publicKey, privateKey) {
                // note: secp256k1 v3 doesn't allow optional parameter
                return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
              };

              /**
               * Compute an EC Diffie-Hellman secret and return public key as result
               * @method ecdhUnsafe
               * @param {Buffer} publicKey
               * @param {Buffer} privateKey
               * @param {boolean} compressed
               * @return {Buffer}
               */
              var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
                // ecdhUnsafe method is not part of secp256k1 v4 package
                // this implementation is based on v3
                // ensure valid publicKey length
                if (publicKey.length !== 33 && publicKey.length !== 65) {
                  throw new RangeError('public key length is invalid');
                }

                // ensure valid privateKey length
                if (privateKey.length !== 32) {
                  throw new RangeError('private key length is invalid');
                }

                return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
              };

              module.exports = {
                privateKeyVerify: privateKeyVerify,
                privateKeyExport: privateKeyExport,
                privateKeyImport: privateKeyImport,
                privateKeyNegate: privateKeyNegate,
                privateKeyModInverse: privateKeyModInverse,
                privateKeyTweakAdd: privateKeyTweakAdd,
                privateKeyTweakMul: privateKeyTweakMul,

                publicKeyCreate: publicKeyCreate,
                publicKeyConvert: publicKeyConvert,
                publicKeyVerify: publicKeyVerify,
                publicKeyTweakAdd: publicKeyTweakAdd,
                publicKeyTweakMul: publicKeyTweakMul,
                publicKeyCombine: publicKeyCombine,

                signatureNormalize: signatureNormalize,
                signatureExport: signatureExport,
                signatureImport: signatureImport,
                signatureImportLax: signatureImportLax,

                sign: sign,
                verify: verify,
                recover: recover,

                ecdh: ecdh,
                ecdhUnsafe: ecdhUnsafe
              };
            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>ethereumjs-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\der.js", { "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\ethereumjs-util\dist\secp256k1-lib\der.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              "use strict";

              // This file is imported from secp256k1 v3
              // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

              var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
                // begin
                0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
                // private key
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // middle
                0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
                // public key
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

              var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
                // begin
                0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
                // private key
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // middle
                0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
                // public key
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

              exports.privateKeyExport = function (privateKey, publicKey, compressed) {
                var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
                privateKey.copy(result, compressed ? 8 : 9);
                publicKey.copy(result, compressed ? 181 : 214);
                return result;
              };

              exports.privateKeyImport = function (privateKey) {
                var length = privateKey.length;

                // sequence header
                var index = 0;
                if (length < index + 1 || privateKey[index] !== 0x30) return null;
                index += 1;

                // sequence length constructor
                if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

                var lenb = privateKey[index] & 0x7f;
                index += 1;
                if (lenb < 1 || lenb > 2) return null;
                if (length < index + lenb) return null;

                // sequence length
                var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
                index += lenb;
                if (length < index + len) return null;

                // sequence element 0: version number (=1)
                if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
                  return null;
                }
                index += 3;

                // sequence element 1: octet string, up to 32 bytes
                if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
                  return null;
                }

                return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
              };

              exports.signatureImportLax = function (signature) {
                var r = Buffer.alloc(32, 0);
                var s = Buffer.alloc(32, 0);

                var length = signature.length;
                var index = 0;

                // sequence tag byte
                if (signature[index++] !== 0x30) {
                  return null;
                }

                // sequence length byte
                var lenbyte = signature[index++];
                if (lenbyte & 0x80) {
                  index += lenbyte - 0x80;
                  if (index > length) {
                    return null;
                  }
                }

                // sequence tag byte for r
                if (signature[index++] !== 0x02) {
                  return null;
                }

                // length for r
                var rlen = signature[index++];
                if (rlen & 0x80) {
                  lenbyte = rlen - 0x80;
                  if (index + lenbyte > length) {
                    return null;
                  }
                  for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) { }
                  for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
                    rlen = (rlen << 8) + signature[index];
                  }
                }
                if (rlen > length - index) {
                  return null;
                }
                var rindex = index;
                index += rlen;

                // sequence tag byte for s
                if (signature[index++] !== 0x02) {
                  return null;
                }

                // length for s
                var slen = signature[index++];
                if (slen & 0x80) {
                  lenbyte = slen - 0x80;
                  if (index + lenbyte > length) {
                    return null;
                  }
                  for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) { }
                  for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
                    slen = (slen << 8) + signature[index];
                  }
                }
                if (slen > length - index) {
                  return null;
                }
                var sindex = index;
                index += slen;

                // ignore leading zeros in r
                for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) { }
                // copy r value
                if (rlen > 32) {
                  return null;
                }
                var rvalue = signature.slice(rindex, rindex + rlen);
                rvalue.copy(r, 32 - rvalue.length);

                // ignore leading zeros in s
                for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) { }
                // copy s value
                if (slen > 32) {
                  return null;
                }
                var svalue = signature.slice(sindex, sindex + slen);
                svalue.copy(s, 32 - svalue.length);

                return { r: r, s: s };
              };
            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>ethereumjs-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\index.js", { "bn.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "elliptic": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\ethereumjs-util\dist\secp256k1-lib\index.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';

              // This file is imported from secp256k1 v3
              // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

              var BN = require('bn.js');
              var EC = require('elliptic').ec;

              var ec = new EC('secp256k1');
              var ecparams = ec.curve;

              exports.privateKeyExport = function (privateKey, compressed) {
                var d = new BN(privateKey);
                if (d.ucmp(ecparams.n) >= 0) {
                  throw new Error('couldn\'t export to DER format');
                }

                var point = ec.g.mul(d);
                return toPublicKey(point.getX(), point.getY(), compressed);
              };

              exports.privateKeyModInverse = function (privateKey) {
                var bn = new BN(privateKey);
                if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
                  throw new Error('private key range is invalid');
                }

                return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
              };

              exports.signatureImport = function (sigObj) {
                var r = new BN(sigObj.r);
                if (r.ucmp(ecparams.n) >= 0) {
                  r = new BN(0);
                }

                var s = new BN(sigObj.s);
                if (s.ucmp(ecparams.n) >= 0) {
                  s = new BN(0);
                }

                return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
              };

              exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
                var point = ec.keyFromPublic(publicKey);

                var scalar = new BN(privateKey);
                if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
                  throw new Error('scalar was invalid (zero or overflow)');
                }

                var shared = point.pub.mul(scalar);
                return toPublicKey(shared.getX(), shared.getY(), compressed);
              };

              var toPublicKey = function toPublicKey(x, y, compressed) {
                var publicKey = void 0;

                if (compressed) {
                  publicKey = Buffer.alloc(33);
                  publicKey[0] = y.isOdd() ? 0x03 : 0x02;
                  x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
                } else {
                  publicKey = Buffer.alloc(65);
                  publicKey[0] = 0x04;
                  x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
                  y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
                }

                return publicKey;
              };
            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>ethereumjs-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethjs-util\\lib\\index.js", { "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "is-hex-prefixed": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\is-hex-prefixed\\src\\index.js", "strip-hex-prefix": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\strip-hex-prefix\\src\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\ethjs-util\lib\index.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';

              var isHexPrefixed = require('is-hex-prefixed');
              var stripHexPrefix = require('strip-hex-prefix');

              /**
               * Pads a `String` to have an even length
               * @param {String} value
               * @return {String} output
               */
              function padToEven(value) {
                var a = value; // eslint-disable-line

                if (typeof a !== 'string') {
                  throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
                }

                if (a.length % 2) {
                  a = '0' + a;
                }

                return a;
              }

              /**
               * Converts a `Number` into a hex `String`
               * @param {Number} i
               * @return {String}
               */
              function intToHex(i) {
                var hex = i.toString(16); // eslint-disable-line

                return '0x' + hex;
              }

              /**
               * Converts an `Number` to a `Buffer`
               * @param {Number} i
               * @return {Buffer}
               */
              function intToBuffer(i) {
                var hex = intToHex(i);

                return new Buffer(padToEven(hex.slice(2)), 'hex');
              }

              /**
               * Get the binary size of a string
               * @param {String} str
               * @return {Number}
               */
              function getBinarySize(str) {
                if (typeof str !== 'string') {
                  throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
                }

                return Buffer.byteLength(str, 'utf8');
              }

              /**
               * Returns TRUE if the first specified array contains all elements
               * from the second one. FALSE otherwise.
               *
               * @param {array} superset
               * @param {array} subset
               *
               * @returns {boolean}
               */
              function arrayContainsArray(superset, subset, some) {
                if (Array.isArray(superset) !== true) {
                  throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
                }
                if (Array.isArray(subset) !== true) {
                  throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
                }

                return subset[Boolean(some) && 'some' || 'every'](function (value) {
                  return superset.indexOf(value) >= 0;
                });
              }

              /**
               * Should be called to get utf8 from it's hex representation
               *
               * @method toUtf8
               * @param {String} string in hex
               * @returns {String} ascii string representation of hex value
               */
              function toUtf8(hex) {
                var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

                return bufferValue.toString('utf8');
              }

              /**
               * Should be called to get ascii from it's hex representation
               *
               * @method toAscii
               * @param {String} string in hex
               * @returns {String} ascii string representation of hex value
               */
              function toAscii(hex) {
                var str = ''; // eslint-disable-line
                var i = 0,
                  l = hex.length; // eslint-disable-line

                if (hex.substring(0, 2) === '0x') {
                  i = 2;
                }

                for (; i < l; i += 2) {
                  var code = parseInt(hex.substr(i, 2), 16);
                  str += String.fromCharCode(code);
                }

                return str;
              }

              /**
               * Should be called to get hex representation (prefixed by 0x) of utf8 string
               *
               * @method fromUtf8
               * @param {String} string
               * @param {Number} optional padding
               * @returns {String} hex representation of input string
               */
              function fromUtf8(stringValue) {
                var str = new Buffer(stringValue, 'utf8');

                return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
              }

              /**
               * Should be called to get hex representation (prefixed by 0x) of ascii string
               *
               * @method fromAscii
               * @param {String} string
               * @param {Number} optional padding
               * @returns {String} hex representation of input string
               */
              function fromAscii(stringValue) {
                var hex = ''; // eslint-disable-line
                for (var i = 0; i < stringValue.length; i++) {
                  // eslint-disable-line
                  var code = stringValue.charCodeAt(i);
                  var n = code.toString(16);
                  hex += n.length < 2 ? '0' + n : n;
                }

                return '0x' + hex;
              }

              /**
               * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
               *
               * @method getKeys get specific key from inner object array of objects
               * @param {String} params
               * @param {String} key
               * @param {Boolean} allowEmpty
               * @returns {Array} output just a simple array of output keys
               */
              function getKeys(params, key, allowEmpty) {
                if (!Array.isArray(params)) {
                  throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
                }
                if (typeof key !== 'string') {
                  throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
                }

                var result = []; // eslint-disable-line

                for (var i = 0; i < params.length; i++) {
                  // eslint-disable-line
                  var value = params[i][key]; // eslint-disable-line
                  if (allowEmpty && !value) {
                    value = '';
                  } else if (typeof value !== 'string') {
                    throw new Error('invalid abi');
                  }
                  result.push(value);
                }

                return result;
              }

              /**
               * Is the string a hex string.
               *
               * @method check if string is hex string of specific length
               * @param {String} value
               * @param {Number} length
               * @returns {Boolean} output the string is a hex string
               */
              function isHexString(value, length) {
                if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                  return false;
                }

                if (length && value.length !== 2 + 2 * length) {
                  return false;
                }

                return true;
              }

              module.exports = {
                arrayContainsArray: arrayContainsArray,
                intToBuffer: intToBuffer,
                getBinarySize: getBinarySize,
                isHexPrefixed: isHexPrefixed,
                stripHexPrefix: stripHexPrefix,
                padToEven: padToEven,
                intToHex: intToHex,
                fromAscii: fromAscii,
                fromUtf8: fromUtf8,
                toAscii: toAscii,
                toUtf8: toUtf8,
                getKeys: getKeys,
                isHexString: isHexString
              };
            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>ethereumjs-util>ethjs-util", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\json-rpc-engine\\src\\createAsyncMiddleware.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\json-rpc-engine\src\createAsyncMiddleware.js
        return function (require, module, exports) {
          /**
           * JsonRpcEngine only accepts callback-based middleware directly.
           * createAsyncMiddleware exists to enable consumers to pass in async middleware
           * functions.
           *
           * Async middleware have no "end" function. Instead, they "end" if they return
           * without calling "next". Rather than passing in explicit return handlers,
           * async middleware can simply await "next", and perform operations on the
           * response object when execution resumes.
           *
           * To accomplish this, createAsyncMiddleware passes the async middleware a
           * wrapped "next" function. That function calls the internal JsonRpcEngine
           * "next" function with a return handler that resolves a promise when called.
           *
           * The return handler will always be called. Its resolution of the promise
           * enables the control flow described above.
           */

          module.exports = function createAsyncMiddleware(asyncMiddleware) {
            return (req, res, next, end) => {

              // nextPromise is the key to the implementation
              // it is resolved by the return handler passed to the
              // "next" function
              let resolveNextPromise
              const nextPromise = new Promise((resolve) => {
                resolveNextPromise = resolve
              })

              let returnHandlerCallback, nextWasCalled

              const asyncNext = async () => {

                nextWasCalled = true

                next((callback) => { // eslint-disable-line callback-return
                  returnHandlerCallback = callback
                  resolveNextPromise()
                })
                await nextPromise
              }

              asyncMiddleware(req, res, asyncNext)
                .then(async () => {
                  if (nextWasCalled) {
                    await nextPromise // we must wait until the return handler is called
                    returnHandlerCallback(null)
                  } else {
                    end(null)
                  }
                })
                .catch((error) => {
                  if (returnHandlerCallback) {
                    returnHandlerCallback(error)
                  } else {
                    end(error)
                  }
                })
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-json-rpc-middleware>json-rpc-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\pify\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\node_modules\pify\index.js
        return function (require, module, exports) {
          'use strict';

          const processFn = (fn, opts) => function () {
            const P = opts.promiseModule;
            const args = new Array(arguments.length);

            for (let i = 0; i < arguments.length; i++) {
              args[i] = arguments[i];
            }

            return new P((resolve, reject) => {
              if (opts.errorFirst) {
                args.push(function (err, result) {
                  if (opts.multiArgs) {
                    const results = new Array(arguments.length - 1);

                    for (let i = 1; i < arguments.length; i++) {
                      results[i - 1] = arguments[i];
                    }

                    if (err) {
                      results.unshift(err);
                      reject(results);
                    } else {
                      resolve(results);
                    }
                  } else if (err) {
                    reject(err);
                  } else {
                    resolve(result);
                  }
                });
              } else {
                args.push(function (result) {
                  if (opts.multiArgs) {
                    const results = new Array(arguments.length - 1);

                    for (let i = 0; i < arguments.length; i++) {
                      results[i] = arguments[i];
                    }

                    resolve(results);
                  } else {
                    resolve(result);
                  }
                });
              }

              fn.apply(this, args);
            });
          };

          module.exports = (obj, opts) => {
            opts = Object.assign({
              exclude: [/.+(Sync|Stream)$/],
              errorFirst: true,
              promiseModule: Promise
            }, opts);

            const filter = key => {
              const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
              return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
            };

            let ret;
            if (typeof obj === 'function') {
              ret = function () {
                if (opts.excludeMain) {
                  return obj.apply(this, arguments);
                }

                return processFn(obj, opts).apply(this, arguments);
              };
            } else {
              ret = Object.create(Object.getPrototypeOf(obj));
            }

            for (const key in obj) { // eslint-disable-line guard-for-in
              const x = obj[key];
              ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
            }

            return ret;
          };

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine>eth-block-tracker>pify", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\package.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\package.json
        return function (require, module, exports) {
          module.exports = {
            "name": "web3-provider-engine",
            "version": "16.0.3",
            "description": "A JavaScript library for composing Ethereum provider objects using middleware modules",
            "repository": "https://github.com/MetaMask/web3-provider-engine",
            "main": "index.js",
            "engines": {
              "node": ">=12.0.0"
            },
            "scripts": {
              "test": "node test/index.js && yarn lint",
              "prepublishOnly": "yarn build && yarn bundle",
              "build": "babel zero.js index.js -d dist/es5 && babel subproviders -d dist/es5/subproviders && babel util -d dist/es5/util",
              "bundle": "mkdir -p ./dist && yarn bundle-engine && yarn bundle-zero",
              "bundle-zero": "browserify -s ZeroClientProvider -e zero.js -t [ babelify --presets [ @babel/preset-env ] ] > dist/ZeroClientProvider.js",
              "bundle-engine": "browserify -s ProviderEngine -e index.js -t [ babelify --presets [ @babel/preset-env ] ] > dist/ProviderEngine.js",
              "lint": "eslint --quiet --ignore-path .gitignore ."
            },
            "files": [
              "*.js",
              "dist",
              "subproviders",
              "util"
            ],
            "license": "MIT",
            "resolutions": {
              "ganache-core/**/elliptic": "^6.5.2"
            },
            "dependencies": {
              "@ethereumjs/tx": "^3.3.0",
              "async": "^2.5.0",
              "backoff": "^2.5.0",
              "clone": "^2.0.0",
              "cross-fetch": "^2.1.0",
              "eth-block-tracker": "^4.4.2",
              "eth-json-rpc-filters": "^4.2.1",
              "eth-json-rpc-infura": "^5.1.0",
              "eth-json-rpc-middleware": "^6.0.0",
              "eth-rpc-errors": "^3.0.0",
              "eth-sig-util": "^1.4.2",
              "ethereumjs-block": "^1.2.2",
              "ethereumjs-util": "^5.1.5",
              "ethereumjs-vm": "^2.3.4",
              "json-stable-stringify": "^1.0.1",
              "promise-to-callback": "^1.0.0",
              "readable-stream": "^2.2.9",
              "request": "^2.85.0",
              "semaphore": "^1.0.3",
              "ws": "^5.1.1",
              "xhr": "^2.2.0",
              "xtend": "^4.0.1"
            },
            "devDependencies": {
              "@babel/cli": "^7.5.5",
              "@babel/core": "^7.5.5",
              "@babel/preset-env": "^7.5.5",
              "babelify": "^10.0.0",
              "browserify": "^16.5.0",
              "eslint": "^6.2.0",
              "ethjs": "^0.3.6",
              "ganache-core": "^2.7.0",
              "tape": "^4.4.0"
            },
            "browser": {
              "request": false,
              "ws": false
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\cache.js", { "./json-rpc-engine-middleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", "eth-json-rpc-middleware/block-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\block-cache.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\cache.js
        return function (require, module, exports) {
          const ProviderSubprovider = require('./json-rpc-engine-middleware')
          const createBlockCacheMiddleware = require('eth-json-rpc-middleware/block-cache')

          class BlockCacheSubprovider extends ProviderSubprovider {
            constructor(opts) {
              super(({ blockTracker }) => createBlockCacheMiddleware(Object.assign({ blockTracker }, opts)))
            }
          }

          module.exports = BlockCacheSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\default-fixture.js", { "../package.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\package.json", "./fixture.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\fixture.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js", "xtend": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xtend\\immutable.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\default-fixture.js
        return function (require, module, exports) {
          const inherits = require('util').inherits
          const extend = require('xtend')
          const FixtureProvider = require('./fixture.js')
          const version = require('../package.json').version

          module.exports = DefaultFixtures

          inherits(DefaultFixtures, FixtureProvider)

          function DefaultFixtures(opts) {
            const self = this
            opts = opts || {}
            var responses = extend({
              web3_clientVersion: 'ProviderEngine/v' + version + '/javascript',
              net_listening: true,
              eth_hashrate: '0x00',
              eth_mining: false,
            }, opts)
            FixtureProvider.call(self, responses)
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\fetch.js", { "./json-rpc-engine-middleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", "eth-json-rpc-middleware/fetch": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\fetch.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\fetch.js
        return function (require, module, exports) {
          const ProviderSubprovider = require('./json-rpc-engine-middleware')
          const createFetchMiddleware = require('eth-json-rpc-middleware/fetch')

          class FetchSubprovider extends ProviderSubprovider {
            constructor(opts) {
              super(({ blockTracker, provider, engine }) => {
                return createFetchMiddleware(opts)
              })
            }
          }

          module.exports = FetchSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\filters.js", { "./json-rpc-engine-middleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", "eth-json-rpc-filters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-json-rpc-filters\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\filters.js
        return function (require, module, exports) {
          const ProviderSubprovider = require('./json-rpc-engine-middleware')
          const createFilterMiddleware = require('eth-json-rpc-filters')

          class SubscriptionsSubprovider extends ProviderSubprovider {
            constructor() {
              super(({ blockTracker, provider, engine }) => {
                return createFilterMiddleware({ blockTracker, provider })
              })
            }
          }

          module.exports = SubscriptionsSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\fixture.js", { "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\fixture.js
        return function (require, module, exports) {
          const inherits = require('util').inherits
          const Subprovider = require('./subprovider.js')

          module.exports = FixtureProvider

          inherits(FixtureProvider, Subprovider)

          function FixtureProvider(staticResponses) {
            const self = this
            staticResponses = staticResponses || {}
            self.staticResponses = staticResponses
          }

          FixtureProvider.prototype.handleRequest = function (payload, next, end) {
            const self = this
            var staticResponse = self.staticResponses[payload.method]
            // async function
            if ('function' === typeof staticResponse) {
              staticResponse(payload, next, end)
              // static response - null is valid response
            } else if (staticResponse !== undefined) {
              // return result asynchronously
              setTimeout(() => end(null, staticResponse))
              // no prepared response - skip
            } else {
              next()
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\hooked-wallet.js", { "../util/estimate-gas.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\estimate-gas.js", "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "async/parallel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\async\\parallel.js", "async/waterfall": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\async\\waterfall.js", "eth-sig-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-sig-util\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js", "semaphore": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\semaphore\\lib\\semaphore.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js", "xtend": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xtend\\immutable.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\hooked-wallet.js
        return function (require, module, exports) {
          /*
           * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
           *
           * The two callbacks a user needs to implement are:
           * - getAccounts() -- array of addresses supported
           * - signTransaction(tx) -- sign a raw transaction object
           */

          const waterfall = require('async/waterfall')
          const parallel = require('async/parallel')
          const inherits = require('util').inherits
          const ethUtil = require('ethereumjs-util')
          const sigUtil = require('eth-sig-util')
          const extend = require('xtend')
          const Semaphore = require('semaphore')
          const Subprovider = require('./subprovider.js')
          const estimateGas = require('../util/estimate-gas.js')
          const hexRegex = /^[0-9A-Fa-f]+$/g

          module.exports = HookedWalletSubprovider

          // handles the following RPC methods:
          //   eth_coinbase
          //   eth_accounts
          //   eth_sendTransaction
          //   eth_sign
          //   eth_signTypedData
          //   eth_signTypedData_v3
          //   eth_signTypedData_v4
          //   personal_sign
          //   eth_decryptMessage
          //   encryption_public_key
          //   personal_ecRecover
          //   parity_postTransaction
          //   parity_checkRequest
          //   parity_defaultAccount

          //
          // Tx Signature Flow
          //
          // handleRequest: eth_sendTransaction
          //   validateTransaction (basic validity check)
          //     validateSender (checks that sender is in accounts)
          //   processTransaction (sign tx and submit to network)
          //     approveTransaction (UI approval hook)
          //     checkApproval
          //     finalizeAndSubmitTx (tx signing)
          //       nonceLock.take (bottle neck to ensure atomic nonce)
          //         fillInTxExtras (set fallback gasPrice, nonce, etc)
          //         signTransaction (perform the signature)
          //         publishTransaction (publish signed tx to network)
          //


          inherits(HookedWalletSubprovider, Subprovider)

          function HookedWalletSubprovider(opts) {
            const self = this
            // control flow
            self.nonceLock = Semaphore(1)

            // data lookup
            if (opts.getAccounts) self.getAccounts = opts.getAccounts
            // high level override
            if (opts.processTransaction) self.processTransaction = opts.processTransaction
            if (opts.processMessage) self.processMessage = opts.processMessage
            if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage
            if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage
            // approval hooks
            self.approveTransaction = opts.approveTransaction || self.autoApprove
            self.approveMessage = opts.approveMessage || self.autoApprove
            self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove
            self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove
            self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove
            self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove
            // actually perform the signature
            if (opts.signTransaction) self.signTransaction = opts.signTransaction || mustProvideInConstructor('signTransaction')
            if (opts.signMessage) self.signMessage = opts.signMessage || mustProvideInConstructor('signMessage')
            if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor('signPersonalMessage')
            if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage || mustProvideInConstructor('decryptMessage')
            if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor('encryptionPublicKey')
            if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor('signTypedMessage')
            if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature
            // publish to network
            if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction
            // gas options
            self.estimateGas = opts.estimateGas || self.estimateGas
            self.getGasPrice = opts.getGasPrice || self.getGasPrice
          }

          HookedWalletSubprovider.prototype.handleRequest = function (payload, next, end) {
            const self = this
            self._parityRequests = {}
            self._parityRequestCount = 0

            // switch statement is not block scoped
            // sp we cant repeat var declarations
            let txParams, msgParams, extraParams
            let message, address

            switch (payload.method) {

              case 'eth_coinbase':
                // process normally
                self.getAccounts(function (err, accounts) {
                  if (err) return end(err)
                  let result = accounts[0] || null
                  end(null, result)
                })
                return

              case 'eth_accounts':
                // process normally
                self.getAccounts(function (err, accounts) {
                  if (err) return end(err)
                  end(null, accounts)
                })
                return

              case 'eth_sendTransaction':
                txParams = payload.params[0]
                waterfall([
                  (cb) => self.validateTransaction(txParams, cb),
                  (cb) => self.processTransaction(txParams, cb),
                ], end)
                return

              case 'eth_signTransaction':
                txParams = payload.params[0]
                waterfall([
                  (cb) => self.validateTransaction(txParams, cb),
                  (cb) => self.processSignTransaction(txParams, cb),
                ], end)
                return

              case 'eth_sign':
                // process normally
                address = payload.params[0]
                message = payload.params[1]
                // non-standard "extraParams" to be appended to our "msgParams" obj
                // good place for metadata
                extraParams = payload.params[2] || {}
                msgParams = extend(extraParams, {
                  from: address,
                  data: message,
                })
                waterfall([
                  (cb) => self.validateMessage(msgParams, cb),
                  (cb) => self.processMessage(msgParams, cb),
                ], end)
                return

              case 'personal_sign':
                return (function () {
                  // process normally
                  const first = payload.params[0]
                  const second = payload.params[1]

                  // We initially incorrectly ordered these parameters.
                  // To gracefully respect users who adopted this API early,
                  // we are currently gracefully recovering from the wrong param order
                  // when it is clearly identifiable.
                  //
                  // That means when the first param is definitely an address,
                  // and the second param is definitely not, but is hex.
                  if (resemblesData(second) && resemblesAddress(first)) {
                    let warning = `The eth_personalSign method requires params ordered `
                    warning += `[message, address]. This was previously handled incorrectly, `
                    warning += `and has been corrected automatically. `
                    warning += `Please switch this param order for smooth behavior in the future.`
                    console.warn(warning)

                    address = payload.params[0]
                    message = payload.params[1]
                  } else {
                    message = payload.params[0]
                    address = payload.params[1]
                  }

                  // non-standard "extraParams" to be appended to our "msgParams" obj
                  // good place for metadata
                  extraParams = payload.params[2] || {}
                  msgParams = extend(extraParams, {
                    from: address,
                    data: message,
                  })
                  waterfall([
                    (cb) => self.validatePersonalMessage(msgParams, cb),
                    (cb) => self.processPersonalMessage(msgParams, cb),
                  ], end)
                })()

              case 'eth_decryptMessage':
                return (function () {
                  // process normally
                  const first = payload.params[0]
                  const second = payload.params[1]

                  // We initially incorrectly ordered these parameters.
                  // To gracefully respect users who adopted this API early,
                  // we are currently gracefully recovering from the wrong param order
                  // when it is clearly identifiable.
                  //
                  // That means when the first param is definitely an address,
                  // and the second param is definitely not, but is hex.
                  if (resemblesData(second) && resemblesAddress(first)) {
                    let warning = `The eth_decryptMessage method requires params ordered `
                    warning += `[message, address]. This was previously handled incorrectly, `
                    warning += `and has been corrected automatically. `
                    warning += `Please switch this param order for smooth behavior in the future.`
                    console.warn(warning)

                    address = payload.params[0]
                    message = payload.params[1]
                  } else {
                    message = payload.params[0]
                    address = payload.params[1]
                  }

                  // non-standard "extraParams" to be appended to our "msgParams" obj
                  // good place for metadata
                  extraParams = payload.params[2] || {}
                  msgParams = extend(extraParams, {
                    from: address,
                    data: message,
                  })
                  waterfall([
                    (cb) => self.validateDecryptMessage(msgParams, cb),
                    (cb) => self.processDecryptMessage(msgParams, cb),
                  ], end)
                })()

              case 'encryption_public_key':
                return (function () {
                  const address = payload.params[0]

                  waterfall([
                    (cb) => self.validateEncryptionPublicKey(address, cb),
                    (cb) => self.processEncryptionPublicKey(address, cb),
                  ], end)
                })()

              case 'personal_ecRecover':
                return (function () {
                  message = payload.params[0]
                  let signature = payload.params[1]
                  // non-standard "extraParams" to be appended to our "msgParams" obj
                  // good place for metadata
                  extraParams = payload.params[2] || {}
                  msgParams = extend(extraParams, {
                    sig: signature,
                    data: message,
                  })
                  self.recoverPersonalSignature(msgParams, end)
                })()

              case 'eth_signTypedData':
              case 'eth_signTypedData_v3':
              case 'eth_signTypedData_v4':
                return (function () {
                  // process normally

                  const first = payload.params[0]
                  const second = payload.params[1]

                  if (resemblesAddress(first)) {
                    address = first
                    message = second
                  } else {
                    message = first
                    address = second
                  }

                  extraParams = payload.params[2] || {}
                  msgParams = extend(extraParams, {
                    from: address,
                    data: message,
                  })
                  waterfall([
                    (cb) => self.validateTypedMessage(msgParams, cb),
                    (cb) => self.processTypedMessage(msgParams, cb),
                  ], end)
                })()

              case 'parity_postTransaction':
                txParams = payload.params[0]
                self.parityPostTransaction(txParams, end)
                return

              case 'parity_postSign':
                address = payload.params[0]
                message = payload.params[1]
                self.parityPostSign(address, message, end)
                return

              case 'parity_checkRequest':
                return (function () {
                  const requestId = payload.params[0]
                  self.parityCheckRequest(requestId, end)
                })()

              case 'parity_defaultAccount':
                self.getAccounts(function (err, accounts) {
                  if (err) return end(err)
                  const account = accounts[0] || null
                  end(null, account)
                })
                return

              default:
                next()
                return

            }
          }

          //
          // data lookup
          //

          HookedWalletSubprovider.prototype.getAccounts = function (cb) {
            cb(null, [])
          }


          //
          // "process" high level flow
          //

          HookedWalletSubprovider.prototype.processTransaction = function (txParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveTransaction(txParams, cb),
              (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
              (cb) => self.finalizeAndSubmitTx(txParams, cb),
            ], cb)
          }


          HookedWalletSubprovider.prototype.processSignTransaction = function (txParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveTransaction(txParams, cb),
              (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
              (cb) => self.finalizeTx(txParams, cb),
            ], cb)
          }

          HookedWalletSubprovider.prototype.processMessage = function (msgParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveMessage(msgParams, cb),
              (didApprove, cb) => self.checkApproval('message', didApprove, cb),
              (cb) => self.signMessage(msgParams, cb),
            ], cb)
          }

          HookedWalletSubprovider.prototype.processPersonalMessage = function (msgParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approvePersonalMessage(msgParams, cb),
              (didApprove, cb) => self.checkApproval('message', didApprove, cb),
              (cb) => self.signPersonalMessage(msgParams, cb),
            ], cb)
          }

          HookedWalletSubprovider.prototype.processDecryptMessage = function (msgParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveDecryptMessage(msgParams, cb),
              (didApprove, cb) => self.checkApproval('decryptMessage', didApprove, cb),
              (cb) => self.decryptMessage(msgParams, cb),
            ], cb)
          }

          HookedWalletSubprovider.prototype.processEncryptionPublicKey = function (msgParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveEncryptionPublicKey(msgParams, cb),
              (didApprove, cb) => self.checkApproval('encryptionPublicKey', didApprove, cb),
              (cb) => self.encryptionPublicKey(msgParams, cb),
            ], cb)
          }

          HookedWalletSubprovider.prototype.processTypedMessage = function (msgParams, cb) {
            const self = this
            waterfall([
              (cb) => self.approveTypedMessage(msgParams, cb),
              (didApprove, cb) => self.checkApproval('message', didApprove, cb),
              (cb) => self.signTypedMessage(msgParams, cb),
            ], cb)
          }

          //
          // approval
          //

          HookedWalletSubprovider.prototype.autoApprove = function (txParams, cb) {
            cb(null, true)
          }

          HookedWalletSubprovider.prototype.checkApproval = function (type, didApprove, cb) {
            cb(didApprove ? null : new Error('User denied ' + type + ' signature.'))
          }

          //
          // parity
          //

          HookedWalletSubprovider.prototype.parityPostTransaction = function (txParams, cb) {
            const self = this

            // get next id
            const count = self._parityRequestCount
            const reqId = `0x${count.toString(16)}`
            self._parityRequestCount++

            self.emitPayload({
              method: 'eth_sendTransaction',
              params: [txParams],
            }, function (error, res) {
              if (error) {
                self._parityRequests[reqId] = { error }
                return
              }
              const txHash = res.result
              self._parityRequests[reqId] = txHash
            })

            cb(null, reqId)
          }


          HookedWalletSubprovider.prototype.parityPostSign = function (address, message, cb) {
            const self = this

            // get next id
            const count = self._parityRequestCount
            const reqId = `0x${count.toString(16)}`
            self._parityRequestCount++

            self.emitPayload({
              method: 'eth_sign',
              params: [address, message],
            }, function (error, res) {
              if (error) {
                self._parityRequests[reqId] = { error }
                return
              }
              const result = res.result
              self._parityRequests[reqId] = result
            })

            cb(null, reqId)
          }

          HookedWalletSubprovider.prototype.parityCheckRequest = function (reqId, cb) {
            const self = this
            const result = self._parityRequests[reqId] || null
            // tx not handled yet
            if (!result) return cb(null, null)
            // tx was rejected (or other error)
            if (result.error) return cb(result.error)
            // tx sent
            cb(null, result)
          }

          //
          // signature and recovery
          //

          HookedWalletSubprovider.prototype.recoverPersonalSignature = function (msgParams, cb) {
            let senderHex
            try {
              senderHex = sigUtil.recoverPersonalSignature(msgParams)
            } catch (err) {
              return cb(err)
            }
            cb(null, senderHex)
          }

          //
          // validation
          //

          HookedWalletSubprovider.prototype.validateTransaction = function (txParams, cb) {
            const self = this
            // shortcut: undefined sender is invalid
            if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))
            self.validateSender(txParams.from, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validateMessage = function (msgParams, cb) {
            const self = this
            if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))
            self.validateSender(msgParams.from, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validatePersonalMessage = function (msgParams, cb) {
            const self = this
            if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`))
            if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`))
            if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`))
            self.validateSender(msgParams.from, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validateDecryptMessage = function (msgParams, cb) {
            const self = this
            if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`))
            if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`))
            if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`))
            self.validateSender(msgParams.from, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: "${msgParams.from}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validateEncryptionPublicKey = function (address, cb) {
            const self = this

            self.validateSender(address, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: "${address}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validateTypedMessage = function (msgParams, cb) {
            if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`))
            if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`))
            this.validateSender(msgParams.from, function (err, senderIsValid) {
              if (err) return cb(err)
              if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
              cb()
            })
          }

          HookedWalletSubprovider.prototype.validateSender = function (senderAddress, cb) {
            const self = this
            // shortcut: undefined sender is invalid
            if (!senderAddress) return cb(null, false)
            self.getAccounts(function (err, accounts) {
              if (err) return cb(err)
              const senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1)
              cb(null, senderIsValid)
            })
          }

          //
          // tx helpers
          //

          HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function (txParams, cb) {
            const self = this
            // can only allow one tx to pass through this flow at a time
            // so we can atomically consume a nonce
            self.nonceLock.take(function () {
              waterfall([
                self.fillInTxExtras.bind(self, txParams),
                self.signTransaction.bind(self),
                self.publishTransaction.bind(self),
              ], function (err, txHash) {
                self.nonceLock.leave()
                if (err) return cb(err)
                cb(null, txHash)
              })
            })
          }

          HookedWalletSubprovider.prototype.finalizeTx = function (txParams, cb) {
            const self = this
            // can only allow one tx to pass through this flow at a time
            // so we can atomically consume a nonce
            self.nonceLock.take(function () {
              waterfall([
                self.fillInTxExtras.bind(self, txParams),
                self.signTransaction.bind(self),
              ], function (err, signedTx) {
                self.nonceLock.leave()
                if (err) return cb(err)
                cb(null, { raw: signedTx, tx: txParams })
              })
            })
          }

          HookedWalletSubprovider.prototype.publishTransaction = function (rawTx, cb) {
            const self = this
            self.emitPayload({
              method: 'eth_sendRawTransaction',
              params: [rawTx],
            }, function (err, res) {
              if (err) return cb(err)
              cb(null, res.result)
            })
          }

          HookedWalletSubprovider.prototype.estimateGas = function (txParams, cb) {
            const self = this
            estimateGas(self.engine, txParams, cb)
          }

          HookedWalletSubprovider.prototype.getGasPrice = function (cb) {
            const self = this
            self.emitPayload({ method: 'eth_gasPrice', params: [] }, function (err, res) {
              if (err) return cb(err)
              cb(null, res.result)
            })
          }

          HookedWalletSubprovider.prototype.fillInTxExtras = function (txParams, cb) {
            const self = this
            const address = txParams.from
            // console.log('fillInTxExtras - address:', address)

            const tasks = {}

            if (txParams.gasPrice === undefined) {
              // console.log("need to get gasprice")
              tasks.gasPrice = self.getGasPrice.bind(self)
            }

            if (txParams.nonce === undefined) {
              // console.log("need to get nonce")
              tasks.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] })
            }

            if (txParams.gas === undefined) {
              // console.log("need to get gas")
              tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams))
            }

            parallel(tasks, function (err, taskResults) {
              if (err) return cb(err)

              const result = {}
              if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice
              if (taskResults.nonce) result.nonce = taskResults.nonce.result
              if (taskResults.gas) result.gas = taskResults.gas

              cb(null, extend(txParams, result))
            })
          }

          // util

          // we use this to clean any custom params from the txParams
          function cloneTxParams(txParams) {
            return {
              from: txParams.from,
              to: txParams.to,
              value: txParams.value,
              data: txParams.data,
              gas: txParams.gas,
              gasPrice: txParams.gasPrice,
              nonce: txParams.nonce,
            }
          }

          function toLowerCase(string) {
            return string.toLowerCase()
          }

          function resemblesAddress(string) {
            const fixed = ethUtil.addHexPrefix(string)
            const isValid = ethUtil.isValidAddress(fixed)
            return isValid
          }

          // Returns true if resembles hex data
          // but definitely not a valid address.
          function resemblesData(string) {
            const fixed = ethUtil.addHexPrefix(string)
            const isValidAddress = ethUtil.isValidAddress(fixed)
            return !isValidAddress && isValidHex(string)
          }

          function isValidHex(data) {
            const isString = typeof data === 'string'
            if (!isString) return false
            const isHexPrefixed = data.slice(0, 2) === '0x'
            if (!isHexPrefixed) return false
            const nonPrefixed = data.slice(2)
            const isValid = nonPrefixed.match(hexRegex)
            return isValid
          }

          function mustProvideInConstructor(methodName) {
            return function (params, cb) {
              cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'))
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\inflight-cache.js", { "./json-rpc-engine-middleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", "eth-json-rpc-middleware/inflight-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\eth-json-rpc-middleware\\inflight-cache.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\inflight-cache.js
        return function (require, module, exports) {
          const ProviderSubprovider = require('./json-rpc-engine-middleware')
          const createInflightCacheMiddleware = require('eth-json-rpc-middleware/inflight-cache')

          class InflightCacheSubprovider extends ProviderSubprovider {
            constructor(opts) {
              super(() => createInflightCacheMiddleware(opts))
            }
          }

          module.exports = InflightCacheSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\infura.js", { "./provider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\provider.js", "eth-json-rpc-infura/src/createProvider": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-json-rpc-infura\\src\\createProvider.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\infura.js
        return function (require, module, exports) {
          const createInfuraProvider = require('eth-json-rpc-infura/src/createProvider')
          const ProviderSubprovider = require('./provider.js')

          class InfuraSubprovider extends ProviderSubprovider {
            constructor(opts = {}) {
              const provider = createInfuraProvider(opts)
              super(provider)
            }
          }

          module.exports = InfuraSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", { "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\json-rpc-engine-middleware.js
        return function (require, module, exports) {
          const Subprovider = require('./subprovider.js')

          // wraps a json-rpc-engine middleware in a subprovider interface

          class JsonRpcEngineMiddlewareSubprovider extends Subprovider {

            // take a constructorFn to call once we have a reference to the engine
            constructor(constructorFn) {
              super()
              if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')
              this._constructorFn = constructorFn
            }

            // this is called once the subprovider has been added to the provider engine
            setEngine(engine) {
              if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')
              const blockTracker = engine._blockTracker
              const middleware = this._constructorFn({ engine, provider: engine, blockTracker })
              if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')
              if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')
              this.middleware = middleware
            }

            handleRequest(req, provEngNext, provEngEnd) {
              const res = { id: req.id }
              this.middleware(req, res, middlewareNext, middlewareEnd)

              function middlewareNext(handler) {
                provEngNext((err, result, cb) => {
                  // update response object with result or error
                  if (err) {
                    delete res.result
                    res.error = { message: err.message || err }
                  } else {
                    res.result = result
                  }
                  // call middleware's next handler (even if error)
                  if (handler) {
                    handler(cb)
                  } else {
                    cb()
                  }
                })
              }

              function middlewareEnd(err) {
                if (err) return provEngEnd(err)
                provEngEnd(null, res.result)
              }
            }

          }

          module.exports = JsonRpcEngineMiddlewareSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\nonce-tracker.js", { "../util/rpc-cache-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\rpc-cache-utils.js", "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "@ethereumjs/tx": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@ethereumjs\\tx\\dist.browser\\index.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\nonce-tracker.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              const inherits = require('util').inherits
              const { TransactionFactory } = require('@ethereumjs/tx')
              const ethUtil = require('ethereumjs-util')
              const Subprovider = require('./subprovider.js')
              const blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload

              module.exports = NonceTrackerSubprovider

              // handles the following RPC methods:
              //   eth_getTransactionCount (pending only)
              //
              // observes the following RPC methods:
              //   eth_sendRawTransaction
              //   evm_revert (to clear the nonce cache)

              inherits(NonceTrackerSubprovider, Subprovider)

              function NonceTrackerSubprovider() {
                const self = this

                self.nonceCache = {}
              }

              NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {
                const self = this

                switch (payload.method) {

                  case 'eth_getTransactionCount':
                    var blockTag = blockTagForPayload(payload)
                    var address = payload.params[0].toLowerCase()
                    var cachedResult = self.nonceCache[address]
                    // only handle requests against the 'pending' blockTag
                    if (blockTag === 'pending') {
                      // has a result
                      if (cachedResult) {
                        end(null, cachedResult)
                        // fallthrough then populate cache
                      } else {
                        next(function (err, result, cb) {
                          if (err) return cb()
                          if (self.nonceCache[address] === undefined) {
                            self.nonceCache[address] = result
                          }
                          cb()
                        })
                      }
                    } else {
                      next()
                    }
                    return

                  case 'eth_sendRawTransaction':
                    // allow the request to continue normally
                    next(function (err, result, cb) {
                      // only update local nonce if tx was submitted correctly
                      if (err) return cb()
                      // parse raw tx
                      var rawTx = payload.params[0]
                      var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')
                      const tx = TransactionFactory.fromSerializedData(rawData)
                      // extract address
                      var address = tx.getSenderAddress().toString('hex').toLowerCase()
                      // extract nonce and increment
                      var nonce = ethUtil.bufferToInt(tx.nonce)
                      nonce++
                      // hexify and normalize
                      var hexNonce = nonce.toString(16)
                      if (hexNonce.length % 2) hexNonce = '0' + hexNonce
                      hexNonce = '0x' + hexNonce
                      // dont update our record on the nonce until the submit was successful
                      // update cache
                      self.nonceCache[address] = hexNonce
                      cb()
                    })
                    return

                  // Clear cache on a testrpc revert
                  case 'evm_revert':
                    self.nonceCache = {}
                    next()
                    return

                  default:
                    next()
                    return

                }
              }

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\provider.js", { "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\provider.js
        return function (require, module, exports) {
          const inherits = require('util').inherits
          const Subprovider = require('./subprovider.js')

          // wraps a provider in a subprovider interface

          module.exports = ProviderSubprovider

          inherits(ProviderSubprovider, Subprovider)

          function ProviderSubprovider(provider) {
            if (!provider) throw new Error('ProviderSubprovider - no provider specified')
            if (!provider.sendAsync) throw new Error('ProviderSubprovider - specified provider does not have a sendAsync method')
            this.provider = provider
          }

          ProviderSubprovider.prototype.handleRequest = function (payload, next, end) {
            this.provider.sendAsync(payload, function (err, response) {
              if (err) return end(err)
              if (response.error) return end(new Error(response.error.message))
              end(null, response.result)
            })
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\sanitizer.js", { "./subprovider.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\node_modules\\ethereumjs-util\\dist\\index.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js", "xtend": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xtend\\immutable.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\sanitizer.js
        return function (require, module, exports) {
          /* Sanitization Subprovider
           * For Parity compatibility
           * removes irregular keys
           */

          const inherits = require('util').inherits
          const Subprovider = require('./subprovider.js')
          const extend = require('xtend')
          const ethUtil = require('ethereumjs-util')

          module.exports = SanitizerSubprovider

          inherits(SanitizerSubprovider, Subprovider)

          function SanitizerSubprovider(opts) {
            const self = this
          }

          SanitizerSubprovider.prototype.handleRequest = function (payload, next, end) {
            var txParams = payload.params[0]

            if (typeof txParams === 'object' && !Array.isArray(txParams)) {
              var sanitized = cloneTxParams(txParams)
              payload.params[0] = sanitized
            }

            next()
          }

          // we use this to clean any custom params from the txParams
          var permitted = [
            'from',
            'to',
            'value',
            'data',
            'gas',
            'gasPrice',
            'nonce',
            'fromBlock',
            'toBlock',
            'address',
            'topics',
          ]

          function cloneTxParams(txParams) {
            var sanitized = permitted.reduce(function (copy, permitted) {
              if (permitted in txParams) {
                if (Array.isArray(txParams[permitted])) {
                  copy[permitted] = txParams[permitted]
                    .map(function (item) {
                      return sanitize(item)
                    })
                } else {
                  copy[permitted] = sanitize(txParams[permitted])
                }
              }
              return copy
            }, {})

            return sanitized
          }

          function sanitize(value) {
            switch (value) {
              case 'latest':
                return value
              case 'pending':
                return value
              case 'earliest':
                return value
              default:
                if (typeof value === 'string') {
                  return ethUtil.addHexPrefix(value.toLowerCase())
                } else {
                  return value
                }
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", { "../util/create-payload.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\create-payload.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\subprovider.js
        return function (require, module, exports) {
          const createPayload = require('../util/create-payload.js')

          module.exports = SubProvider

          // this is the base class for a subprovider -- mostly helpers


          function SubProvider() {

          }

          SubProvider.prototype.setEngine = function (engine) {
            const self = this
            if (self.engine) return
            self.engine = engine
            engine.on('block', function (block) {
              self.currentBlock = block
            })

            engine.on('start', function () {
              self.start()
            })

            engine.on('stop', function () {
              self.stop()
            })
          }

          SubProvider.prototype.handleRequest = function (payload, next, end) {
            throw new Error('Subproviders should override `handleRequest`.')
          }

          SubProvider.prototype.emitPayload = function (payload, cb) {
            const self = this
            self.engine.sendAsync(createPayload(payload), cb)
          }

          // dummies for overriding

          SubProvider.prototype.stop = function () { }

          SubProvider.prototype.start = function () { }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subscriptions.js", { "./json-rpc-engine-middleware": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\json-rpc-engine-middleware.js", "eth-json-rpc-filters/subscriptionManager": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-json-rpc-filters\\subscriptionManager.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\subscriptions.js
        return function (require, module, exports) {
          const ProviderSubprovider = require('./json-rpc-engine-middleware')
          const createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager')

          class SubscriptionsSubprovider extends ProviderSubprovider {
            constructor() {
              super(({ blockTracker, provider, engine }) => {
                const { events, middleware } = createSubscriptionManager({ blockTracker, provider })
                // forward subscription events on the engine
                events.on('notification', (data) => engine.emit('data', null, data))
                // return the subscription install/remove middleware
                return middleware
              })
            }
          }

          module.exports = SubscriptionsSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\websocket.js", { "../util/create-payload": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\create-payload.js", "./subprovider": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subprovider.js", "backoff": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\backoff\\index.js", "events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js", "ws": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\browser-resolve\\empty.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\subproviders\websocket.js
        return function (require, module, exports) {
          const Backoff = require('backoff')
          const EventEmitter = require('events')
          const inherits = require('util').inherits
          const WebSocket = global.WebSocket || require('ws')
          const Subprovider = require('./subprovider')
          const createPayload = require('../util/create-payload')

          class WebsocketSubprovider
            extends Subprovider {
            constructor({ rpcUrl, debug, origin }) {
              super()

              // inherit from EventEmitter
              EventEmitter.call(this)

              Object.defineProperties(this, {
                _backoff: {
                  value: Backoff.exponential({
                    randomisationFactor: 0.2,
                    maxDelay: 5000
                  })
                },
                _connectTime: {
                  value: null,
                  writable: true
                },
                _log: {
                  value: debug
                    ? (...args) => console.info.apply(console, ['[WSProvider]', ...args])
                    : () => { }
                },
                _origin: {
                  value: origin
                },
                _pendingRequests: {
                  value: new Map()
                },
                _socket: {
                  value: null,
                  writable: true
                },
                _unhandledRequests: {
                  value: []
                },
                _url: {
                  value: rpcUrl
                }
              })

              this._handleSocketClose = this._handleSocketClose.bind(this)
              this._handleSocketMessage = this._handleSocketMessage.bind(this)
              this._handleSocketOpen = this._handleSocketOpen.bind(this)

              // Called when a backoff timeout has finished. Time to try reconnecting.
              this._backoff.on('ready', () => {
                this._openSocket()
              })

              this._openSocket()
            }

            handleRequest(payload, next, end) {
              if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {
                this._unhandledRequests.push(Array.from(arguments))
                this._log('Socket not open. Request queued.')
                return
              }

              this._pendingRequests.set(payload.id, [payload, end])

              const newPayload = createPayload(payload)
              delete newPayload.origin

              this._socket.send(JSON.stringify(newPayload))
              this._log(`Sent: ${newPayload.method} #${newPayload.id}`)
            }

            _handleSocketClose({ reason, code }) {
              this._log(`Socket closed, code ${code} (${reason || 'no reason'})`)
              // If the socket has been open for longer than 5 seconds, reset the backoff
              if (this._connectTime && Date.now() - this._connectTime > 5000) {
                this._backoff.reset()
              }

              this._socket.removeEventListener('close', this._handleSocketClose)
              this._socket.removeEventListener('message', this._handleSocketMessage)
              this._socket.removeEventListener('open', this._handleSocketOpen)

              this._socket = null
              this._backoff.backoff()
            }

            _handleSocketMessage(message) {
              let payload

              try {
                payload = JSON.parse(message.data)
              } catch (e) {
                this._log('Received a message that is not valid JSON:', payload)
                return
              }

              // check if server-sent notification
              if (payload.id === undefined) {
                return this.engine.emit('data', null, payload)
              }

              // ignore if missing
              if (!this._pendingRequests.has(payload.id)) {
                return
              }

              // retrieve payload + arguments
              const [originalReq, end] = this._pendingRequests.get(payload.id)
              this._pendingRequests.delete(payload.id)

              this._log(`Received: ${originalReq.method} #${payload.id}`)

              // forward response
              if (payload.error) {
                return end(new Error(payload.error.message))
              }
              end(null, payload.result)
            }

            _handleSocketOpen() {
              this._log('Socket open.')
              this._connectTime = Date.now()

              // Any pending requests need to be resent because our session was lost
              // and will not get responses for them in our new session.
              this._pendingRequests.forEach(([payload, end]) => {
                this._unhandledRequests.push([payload, null, end])
              })
              this._pendingRequests.clear()

              const unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length)
              unhandledRequests.forEach(request => {
                this.handleRequest.apply(this, request)
              })
            }

            _openSocket() {
              this._log('Opening socket...')
              this._socket = new WebSocket(this._url, [], this._origin ? { headers: { origin: this._origin } } : {})
              this._socket.addEventListener('close', this._handleSocketClose)
              this._socket.addEventListener('message', this._handleSocketMessage)
              this._socket.addEventListener('open', this._handleSocketOpen)
            }
          }

          // multiple inheritance
          Object.assign(WebsocketSubprovider.prototype, EventEmitter.prototype)

          module.exports = WebsocketSubprovider

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\create-payload.js", { "./random-id.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\random-id.js", "xtend": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xtend\\immutable.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\util\create-payload.js
        return function (require, module, exports) {
          const getRandomId = require('./random-id.js')
          const extend = require('xtend')

          module.exports = createPayload


          function createPayload(data) {
            return extend({
              // defaults
              id: getRandomId(),
              jsonrpc: '2.0',
              params: [],
              // user-specified
            }, data)
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\estimate-gas.js", { "./create-payload.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\create-payload.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\util\estimate-gas.js
        return function (require, module, exports) {
          const createPayload = require('./create-payload.js')

          module.exports = estimateGas

          /*
          
          This is a work around for https://github.com/ethereum/go-ethereum/issues/2577
          
          */


          function estimateGas(provider, txParams, cb) {
            provider.sendAsync(createPayload({
              method: 'eth_estimateGas',
              params: [txParams]
            }), function (err, res) {
              if (err) {
                // handle simple value transfer case
                if (err.message === 'no contract code at given address') {
                  return cb(null, '0xcf08')
                } else {
                  return cb(err)
                }
              }
              cb(null, res.result)
            })
          }
        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\random-id.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\util\random-id.js
        return function (require, module, exports) {
          module.exports = createRandomId


          function createRandomId() {
            // random id
            return Math.floor(Number.MAX_SAFE_INTEGER * Math.random())
          }
        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\rpc-cache-utils.js", { "json-stable-stringify": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\json-stable-stringify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\util\rpc-cache-utils.js
        return function (require, module, exports) {
          const stringify = require('json-stable-stringify')

          module.exports = {
            cacheIdentifierForPayload: cacheIdentifierForPayload,
            canCache: canCache,
            blockTagForPayload: blockTagForPayload,
            paramsWithoutBlockTag: paramsWithoutBlockTag,
            blockTagParamIndex: blockTagParamIndex,
            cacheTypeForPayload: cacheTypeForPayload,
          }

          function cacheIdentifierForPayload(payload, opts = {}) {
            if (!canCache(payload)) return null
            const { includeBlockRef } = opts
            const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload)
            return payload.method + ':' + stringify(params)
          }

          function canCache(payload) {
            return cacheTypeForPayload(payload) !== 'never'
          }

          function blockTagForPayload(payload) {
            var index = blockTagParamIndex(payload);

            // Block tag param not passed.
            if (index >= payload.params.length) {
              return null;
            }

            return payload.params[index];
          }

          function paramsWithoutBlockTag(payload) {
            var index = blockTagParamIndex(payload);

            // Block tag param not passed.
            if (index >= payload.params.length) {
              return payload.params;
            }

            // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
            if (payload.method === 'eth_getBlockByNumber') {
              return payload.params.slice(1);
            }

            return payload.params.slice(0, index);
          }

          function blockTagParamIndex(payload) {
            switch (payload.method) {
              // blockTag is third param
              case 'eth_getStorageAt':
                return 2
              // blockTag is second param
              case 'eth_getBalance':
              case 'eth_getCode':
              case 'eth_getTransactionCount':
              case 'eth_call':
              case 'eth_estimateGas':
                return 1
              // blockTag is first param
              case 'eth_getBlockByNumber':
                return 0
              // there is no blockTag
              default:
                return undefined
            }
          }

          function cacheTypeForPayload(payload) {
            switch (payload.method) {
              // cache permanently
              case 'web3_clientVersion':
              case 'web3_sha3':
              case 'eth_protocolVersion':
              case 'eth_getBlockTransactionCountByHash':
              case 'eth_getUncleCountByBlockHash':
              case 'eth_getCode':
              case 'eth_getBlockByHash':
              case 'eth_getTransactionByHash':
              case 'eth_getTransactionByBlockHashAndIndex':
              case 'eth_getTransactionReceipt':
              case 'eth_getUncleByBlockHashAndIndex':
              case 'eth_getCompilers':
              case 'eth_compileLLL':
              case 'eth_compileSolidity':
              case 'eth_compileSerpent':
              case 'shh_version':
                return 'perma'

              // cache until fork
              case 'eth_getBlockByNumber':
              case 'eth_getBlockTransactionCountByNumber':
              case 'eth_getUncleCountByBlockNumber':
              case 'eth_getTransactionByBlockNumberAndIndex':
              case 'eth_getUncleByBlockNumberAndIndex':
                return 'fork'

              // cache for block
              case 'eth_gasPrice':
              case 'eth_getBalance':
              case 'eth_getStorageAt':
              case 'eth_getTransactionCount':
              case 'eth_call':
              case 'eth_estimateGas':
              case 'eth_getFilterLogs':
              case 'eth_getLogs':
              case 'eth_blockNumber':
                return 'block'

              // never cache
              case 'net_version':
              case 'net_peerCount':
              case 'net_listening':
              case 'eth_syncing':
              case 'eth_sign':
              case 'eth_coinbase':
              case 'eth_mining':
              case 'eth_hashrate':
              case 'eth_accounts':
              case 'eth_sendTransaction':
              case 'eth_sendRawTransaction':
              case 'eth_newFilter':
              case 'eth_newBlockFilter':
              case 'eth_newPendingTransactionFilter':
              case 'eth_uninstallFilter':
              case 'eth_getFilterChanges':
              case 'eth_getWork':
              case 'eth_submitWork':
              case 'eth_submitHashrate':
              case 'db_putString':
              case 'db_getString':
              case 'db_putHex':
              case 'db_getHex':
              case 'shh_post':
              case 'shh_newIdentity':
              case 'shh_hasIdentity':
              case 'shh_newGroup':
              case 'shh_addToGroup':
              case 'shh_newFilter':
              case 'shh_uninstallFilter':
              case 'shh_getFilterChanges':
              case 'shh_getMessages':
                return 'never'
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\util\\stoplight.js", { "events": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js", "util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\util\\util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\util\stoplight.js
        return function (require, module, exports) {
          const EventEmitter = require('events').EventEmitter
          const inherits = require('util').inherits

          module.exports = Stoplight


          inherits(Stoplight, EventEmitter)

          function Stoplight() {
            const self = this
            EventEmitter.call(self)
            self.isLocked = true
          }

          Stoplight.prototype.go = function () {
            const self = this
            self.isLocked = false
            self.emit('unlock')
          }

          Stoplight.prototype.stop = function () {
            const self = this
            self.isLocked = true
            self.emit('lock')
          }

          Stoplight.prototype.await = function (fn) {
            const self = this
            if (self.isLocked) {
              self.once('unlock', fn)
            } else {
              setTimeout(fn)
            }
          }
        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\zero.js", { "./index.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\index.js", "./subproviders/cache.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\cache.js", "./subproviders/default-fixture.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\default-fixture.js", "./subproviders/fetch.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\fetch.js", "./subproviders/filters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\filters.js", "./subproviders/hooked-wallet.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\hooked-wallet.js", "./subproviders/inflight-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\inflight-cache.js", "./subproviders/infura.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\infura.js", "./subproviders/nonce-tracker.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\nonce-tracker.js", "./subproviders/sanitizer.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\sanitizer.js", "./subproviders/subscriptions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\subscriptions.js", "./subproviders/websocket.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-provider-engine\\subproviders\\websocket.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3-provider-engine\zero.js
        return function (require, module, exports) {
          const ProviderEngine = require('./index.js')
          const DefaultFixture = require('./subproviders/default-fixture.js')
          const NonceTrackerSubprovider = require('./subproviders/nonce-tracker.js')
          const CacheSubprovider = require('./subproviders/cache.js')
          const FilterSubprovider = require('./subproviders/filters')
          const SubscriptionSubprovider = require('./subproviders/subscriptions')
          const InflightCacheSubprovider = require('./subproviders/inflight-cache')
          const HookedWalletSubprovider = require('./subproviders/hooked-wallet.js')
          const SanitizingSubprovider = require('./subproviders/sanitizer.js')
          const InfuraSubprovider = require('./subproviders/infura.js')
          const FetchSubprovider = require('./subproviders/fetch.js')
          const WebSocketSubprovider = require('./subproviders/websocket.js')


          module.exports = ZeroClientProvider


          function ZeroClientProvider(opts = {}) {
            const connectionType = getConnectionType(opts)

            const engine = new ProviderEngine(opts.engineParams)

            // static
            const staticSubprovider = new DefaultFixture(opts.static)
            engine.addProvider(staticSubprovider)

            // nonce tracker
            engine.addProvider(new NonceTrackerSubprovider())

            // sanitization
            const sanitizer = new SanitizingSubprovider()
            engine.addProvider(sanitizer)

            // cache layer
            const cacheSubprovider = new CacheSubprovider()
            engine.addProvider(cacheSubprovider)

            // filters + subscriptions
            // only polyfill if not websockets
            if (connectionType !== 'ws') {
              engine.addProvider(new SubscriptionSubprovider())
              engine.addProvider(new FilterSubprovider())
            }

            // inflight cache
            const inflightCache = new InflightCacheSubprovider()
            engine.addProvider(inflightCache)

            // id mgmt
            const idmgmtSubprovider = new HookedWalletSubprovider({
              // accounts
              getAccounts: opts.getAccounts,
              // transactions
              processTransaction: opts.processTransaction,
              approveTransaction: opts.approveTransaction,
              signTransaction: opts.signTransaction,
              publishTransaction: opts.publishTransaction,
              // messages
              // old eth_sign
              processMessage: opts.processMessage,
              approveMessage: opts.approveMessage,
              signMessage: opts.signMessage,
              // new personal_sign
              processPersonalMessage: opts.processPersonalMessage,
              processTypedMessage: opts.processTypedMessage,
              approvePersonalMessage: opts.approvePersonalMessage,
              approveTypedMessage: opts.approveTypedMessage,
              signPersonalMessage: opts.signPersonalMessage,
              signTypedMessage: opts.signTypedMessage,
              personalRecoverSigner: opts.personalRecoverSigner,
            })
            engine.addProvider(idmgmtSubprovider)

            // data source
            const dataSubprovider = opts.dataSubprovider || createDataSubprovider(connectionType, opts)
            engine.addProvider(dataSubprovider)

            // start polling
            if (!opts.stopped) {
              engine.start()
            }

            return engine

          }

          function createDataSubprovider(connectionType, opts) {
            const { rpcUrl, debug } = opts

            // default to infura
            if (!connectionType) {
              return new InfuraSubprovider()
            }
            if (connectionType === 'http') {
              return new FetchSubprovider({ rpcUrl, debug })
            }
            if (connectionType === 'ws') {
              return new WebSocketSubprovider({ rpcUrl, debug })
            }

            throw new Error(`ProviderEngine - unrecognized connectionType "${connectionType}"`)
          }

          function getConnectionType({ rpcUrl }) {
            if (!rpcUrl) return undefined

            const protocol = rpcUrl.split(':')[0].toLowerCase()
            switch (protocol) {
              case 'http':
              case 'https':
                return 'http'
              case 'ws':
              case 'wss':
                return 'ws'
              default:
                throw new Error(`ProviderEngine - unrecognized protocol in "${rpcUrl}"`)
            }
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3-provider-engine", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\index.js", { "./lib/web3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\index.js
        return function (require, module, exports) {
          var Web3 = require('./lib/web3');

          // dont override global variable
          if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {
            window.Web3 = Web3;
          }

          module.exports = Web3;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\GlobalRegistrar.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\contracts\GlobalRegistrar.json
        return function (require, module, exports) {
          module.exports = [
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "name",
              "outputs": [
                {
                  "name": "o_name",
                  "type": "bytes32"
                }
              ],
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "content",
              "outputs": [
                {
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "reserve",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "subRegistrar",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_newOwner",
                  "type": "address"
                }
              ],
              "name": "transfer",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_registrar",
                  "type": "address"
                }
              ],
              "name": "setSubRegistrar",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "Registrar",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_a",
                  "type": "address"
                },
                {
                  "name": "_primary",
                  "type": "bool"
                }
              ],
              "name": "setAddress",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_content",
                  "type": "bytes32"
                }
              ],
              "name": "setContent",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "disown",
              "outputs": [],
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "name": "_winner",
                  "type": "address"
                }
              ],
              "name": "AuctionEnded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "name": "_bidder",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "NewBid",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "name",
                  "type": "bytes32"
                }
              ],
              "name": "Changed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "name",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "PrimaryChanged",
              "type": "event"
            }
          ]

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\ICAPRegistrar.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\contracts\ICAPRegistrar.json
        return function (require, module, exports) {
          module.exports = [
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_refund",
                  "type": "address"
                }
              ],
              "name": "disown",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                }
              ],
              "name": "reserve",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_newOwner",
                  "type": "address"
                }
              ],
              "name": "transfer",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_name",
                  "type": "bytes32"
                },
                {
                  "name": "_a",
                  "type": "address"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "name",
                  "type": "bytes32"
                }
              ],
              "name": "Changed",
              "type": "event"
            }
          ]

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\SmartExchange.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\contracts\SmartExchange.json
        return function (require, module, exports) {
          module.exports = [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "from",
                  "type": "bytes32"
                },
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "from",
                  "type": "bytes32"
                },
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "indirectId",
                  "type": "bytes32"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "icapTransfer",
              "outputs": [],
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "bytes32"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "payable": true,
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "AnonymousDeposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Deposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "indirectId",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "IcapTransfer",
              "type": "event"
            }
          ]

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\address.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\address.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeAddress is a prootype that represents address type
           * It matches:
           * address
           * address[]
           * address[4]
           * address[][]
           * address[3][]
           * address[][6][], ...
           */
          var SolidityTypeAddress = function () {
            this._inputFormatter = f.formatInputInt;
            this._outputFormatter = f.formatOutputAddress;
          };

          SolidityTypeAddress.prototype = new SolidityType({});
          SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

          SolidityTypeAddress.prototype.isType = function (name) {
            return !!name.match(/address(\[([0-9]*)\])?/);
          };

          module.exports = SolidityTypeAddress;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\bool.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\bool.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeBool is a prootype that represents bool type
           * It matches:
           * bool
           * bool[]
           * bool[4]
           * bool[][]
           * bool[3][]
           * bool[][6][], ...
           */
          var SolidityTypeBool = function () {
            this._inputFormatter = f.formatInputBool;
            this._outputFormatter = f.formatOutputBool;
          };

          SolidityTypeBool.prototype = new SolidityType({});
          SolidityTypeBool.prototype.constructor = SolidityTypeBool;

          SolidityTypeBool.prototype.isType = function (name) {
            return !!name.match(/^bool(\[([0-9]*)\])*$/);
          };

          module.exports = SolidityTypeBool;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\bytes.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\bytes.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeBytes is a prototype that represents the bytes type.
           * It matches:
           * bytes
           * bytes[]
           * bytes[4]
           * bytes[][]
           * bytes[3][]
           * bytes[][6][], ...
           * bytes32
           * bytes8[4]
           * bytes[3][]
           */
          var SolidityTypeBytes = function () {
            this._inputFormatter = f.formatInputBytes;
            this._outputFormatter = f.formatOutputBytes;
          };

          SolidityTypeBytes.prototype = new SolidityType({});
          SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

          SolidityTypeBytes.prototype.isType = function (name) {
            return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
          };

          module.exports = SolidityTypeBytes;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\coder.js", { "./address": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\address.js", "./bool": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\bool.js", "./bytes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\bytes.js", "./dynamicbytes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\dynamicbytes.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./int": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\int.js", "./real": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\real.js", "./string": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\string.js", "./uint": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\uint.js", "./ureal": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\ureal.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\coder.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file coder.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var f = require('./formatters');

          var SolidityTypeAddress = require('./address');
          var SolidityTypeBool = require('./bool');
          var SolidityTypeInt = require('./int');
          var SolidityTypeUInt = require('./uint');
          var SolidityTypeDynamicBytes = require('./dynamicbytes');
          var SolidityTypeString = require('./string');
          var SolidityTypeReal = require('./real');
          var SolidityTypeUReal = require('./ureal');
          var SolidityTypeBytes = require('./bytes');

          var isDynamic = function (solidityType, type) {
            return solidityType.isDynamicType(type) ||
              solidityType.isDynamicArray(type);
          };

          /**
           * SolidityCoder prototype should be used to encode/decode solidity params of any type
           */
          var SolidityCoder = function (types) {
            this._types = types;
          };

          /**
           * This method should be used to transform type to SolidityType
           *
           * @method _requireType
           * @param {String} type
           * @returns {SolidityType}
           * @throws {Error} throws if no matching type is found
           */
          SolidityCoder.prototype._requireType = function (type) {
            var solidityType = this._types.filter(function (t) {
              return t.isType(type);
            })[0];

            if (!solidityType) {
              throw Error('invalid solidity type!: ' + type);
            }

            return solidityType;
          };

          /**
           * Should be used to encode plain param
           *
           * @method encodeParam
           * @param {String} type
           * @param {Object} plain param
           * @return {String} encoded plain param
           */
          SolidityCoder.prototype.encodeParam = function (type, param) {
            return this.encodeParams([type], [param]);
          };

          /**
           * Should be used to encode list of params
           *
           * @method encodeParams
           * @param {Array} types
           * @param {Array} params
           * @return {String} encoded list of params
           */
          SolidityCoder.prototype.encodeParams = function (types, params) {
            var solidityTypes = this.getSolidityTypes(types);

            var encodeds = solidityTypes.map(function (solidityType, index) {
              return solidityType.encode(params[index], types[index]);
            });

            var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
              var staticPartLength = solidityType.staticPartLength(types[index]);
              var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

              return acc + (isDynamic(solidityTypes[index], types[index]) ?
                32 :
                roundedStaticPartLength);
            }, 0);

            var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);

            return result;
          };

          SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
            var result = "";
            var self = this;

            types.forEach(function (type, i) {
              if (isDynamic(solidityTypes[i], types[i])) {
                result += f.formatInputInt(dynamicOffset).encode();
                var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
                dynamicOffset += e.length / 2;
              } else {
                // don't add length to dynamicOffset. it's already counted
                result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              }

              // TODO: figure out nested arrays
            });

            types.forEach(function (type, i) {
              if (isDynamic(solidityTypes[i], types[i])) {
                var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
                dynamicOffset += e.length / 2;
                result += e;
              }
            });
            return result;
          };

          SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {
            /* jshint maxcomplexity: 17 */
            /* jshint maxdepth: 5 */

            var self = this;
            var encodingMode = { dynamic: 1, static: 2, other: 3 };

            var mode = (solidityType.isDynamicArray(type) ? encodingMode.dynamic : (solidityType.isStaticArray(type) ? encodingMode.static : encodingMode.other));

            if (mode !== encodingMode.other) {
              var nestedName = solidityType.nestedName(type);
              var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
              var result = (mode === encodingMode.dynamic ? encoded[0] : '');

              if (solidityType.isDynamicArray(nestedName)) {
                var previousLength = (mode === encodingMode.dynamic ? 2 : 0);

                for (var i = 0; i < encoded.length; i++) {
                  // calculate length of previous item
                  if (mode === encodingMode.dynamic) {
                    previousLength += +(encoded[i - 1])[0] || 0;
                  }
                  else if (mode === encodingMode.static) {
                    previousLength += +(encoded[i - 1] || [])[0] || 0;
                  }
                  result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                }
              }

              var len = (mode === encodingMode.dynamic ? encoded.length - 1 : encoded.length);
              for (var c = 0; c < len; c++) {
                var additionalOffset = result / 2;
                if (mode === encodingMode.dynamic) {
                  result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset + additionalOffset);
                }
                else if (mode === encodingMode.static) {
                  result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);
                }
              }

              return result;
            }

            return encoded;
          };


          /**
           * Should be used to decode bytes to plain param
           *
           * @method decodeParam
           * @param {String} type
           * @param {String} bytes
           * @return {Object} plain param
           */
          SolidityCoder.prototype.decodeParam = function (type, bytes) {
            return this.decodeParams([type], bytes)[0];
          };

          /**
           * Should be used to decode list of params
           *
           * @method decodeParam
           * @param {Array} types
           * @param {String} bytes
           * @return {Array} array of plain params
           */
          SolidityCoder.prototype.decodeParams = function (types, bytes) {
            var solidityTypes = this.getSolidityTypes(types);
            var offsets = this.getOffsets(types, solidityTypes);

            return solidityTypes.map(function (solidityType, index) {
              return solidityType.decode(bytes, offsets[index], types[index], index);
            });
          };

          SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {
            var lengths = solidityTypes.map(function (solidityType, index) {
              return solidityType.staticPartLength(types[index]);
            });

            for (var i = 1; i < lengths.length; i++) {
              // sum with length of previous element
              lengths[i] += lengths[i - 1];
            }

            return lengths.map(function (length, index) {
              // remove the current length, so the length is sum of previous elements
              var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
              return length - staticPartLength;
            });
          };

          SolidityCoder.prototype.getSolidityTypes = function (types) {
            var self = this;
            return types.map(function (type) {
              return self._requireType(type);
            });
          };

          var coder = new SolidityCoder([
            new SolidityTypeAddress(),
            new SolidityTypeBool(),
            new SolidityTypeInt(),
            new SolidityTypeUInt(),
            new SolidityTypeDynamicBytes(),
            new SolidityTypeBytes(),
            new SolidityTypeString(),
            new SolidityTypeReal(),
            new SolidityTypeUReal()
          ]);

          module.exports = coder;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\dynamicbytes.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\dynamicbytes.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          var SolidityTypeDynamicBytes = function () {
            this._inputFormatter = f.formatInputDynamicBytes;
            this._outputFormatter = f.formatOutputDynamicBytes;
          };

          SolidityTypeDynamicBytes.prototype = new SolidityType({});
          SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

          SolidityTypeDynamicBytes.prototype.isType = function (name) {
            return !!name.match(/^bytes(\[([0-9]*)\])*$/);
          };

          SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
            return true;
          };

          module.exports = SolidityTypeDynamicBytes;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", { "../utils/config": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\config.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./param": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\param.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\formatters.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file formatters.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var BigNumber = require('bignumber.js');
          var utils = require('../utils/utils');
          var c = require('../utils/config');
          var SolidityParam = require('./param');


          /**
           * Formats input value to byte representation of int
           * If value is negative, return it's two's complement
           * If the value is floating point, round it down
           *
           * @method formatInputInt
           * @param {String|Number|BigNumber} value that needs to be formatted
           * @returns {SolidityParam}
           */
          var formatInputInt = function (value) {
            BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);
            var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);
            return new SolidityParam(result);
          };

          /**
           * Formats input bytes
           *
           * @method formatInputBytes
           * @param {String}
           * @returns {SolidityParam}
           */
          var formatInputBytes = function (value) {
            var result = utils.toHex(value).substr(2);
            var l = Math.floor((result.length + 63) / 64);
            result = utils.padRight(result, l * 64);
            return new SolidityParam(result);
          };

          /**
           * Formats input bytes
           *
           * @method formatDynamicInputBytes
           * @param {String}
           * @returns {SolidityParam}
           */
          var formatInputDynamicBytes = function (value) {
            var result = utils.toHex(value).substr(2);
            var length = result.length / 2;
            var l = Math.floor((result.length + 63) / 64);
            result = utils.padRight(result, l * 64);
            return new SolidityParam(formatInputInt(length).value + result);
          };

          /**
           * Formats input value to byte representation of string
           *
           * @method formatInputString
           * @param {String}
           * @returns {SolidityParam}
           */
          var formatInputString = function (value) {
            var result = utils.fromUtf8(value).substr(2);
            var length = result.length / 2;
            var l = Math.floor((result.length + 63) / 64);
            result = utils.padRight(result, l * 64);
            return new SolidityParam(formatInputInt(length).value + result);
          };

          /**
           * Formats input value to byte representation of bool
           *
           * @method formatInputBool
           * @param {Boolean}
           * @returns {SolidityParam}
           */
          var formatInputBool = function (value) {
            var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ? '1' : '0');
            return new SolidityParam(result);
          };

          /**
           * Formats input value to byte representation of real
           * Values are multiplied by 2^m and encoded as integers
           *
           * @method formatInputReal
           * @param {String|Number|BigNumber}
           * @returns {SolidityParam}
           */
          var formatInputReal = function (value) {
            return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
          };

          /**
           * Check if input value is negative
           *
           * @method signedIsNegative
           * @param {String} value is hex format
           * @returns {Boolean} true if it is negative, otherwise false
           */
          var signedIsNegative = function (value) {
            return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
          };

          /**
           * Formats right-aligned output bytes to int
           *
           * @method formatOutputInt
           * @param {SolidityParam} param
           * @returns {BigNumber} right-aligned output bytes formatted to big number
           */
          var formatOutputInt = function (param) {
            var value = param.staticPart() || "0";

            // check if it's negative number
            // it it is, return two's complement
            if (signedIsNegative(value)) {
              return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
            }
            return new BigNumber(value, 16);
          };

          /**
           * Formats right-aligned output bytes to uint
           *
           * @method formatOutputUInt
           * @param {SolidityParam}
           * @returns {BigNumeber} right-aligned output bytes formatted to uint
           */
          var formatOutputUInt = function (param) {
            var value = param.staticPart() || "0";
            return new BigNumber(value, 16);
          };

          /**
           * Formats right-aligned output bytes to real
           *
           * @method formatOutputReal
           * @param {SolidityParam}
           * @returns {BigNumber} input bytes formatted to real
           */
          var formatOutputReal = function (param) {
            return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));
          };

          /**
           * Formats right-aligned output bytes to ureal
           *
           * @method formatOutputUReal
           * @param {SolidityParam}
           * @returns {BigNumber} input bytes formatted to ureal
           */
          var formatOutputUReal = function (param) {
            return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));
          };

          /**
           * Should be used to format output bool
           *
           * @method formatOutputBool
           * @param {SolidityParam}
           * @returns {Boolean} right-aligned input bytes formatted to bool
           */
          var formatOutputBool = function (param) {
            return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;
          };

          /**
           * Should be used to format output bytes
           *
           * @method formatOutputBytes
           * @param {SolidityParam} left-aligned hex representation of string
           * @param {String} name type name
           * @returns {String} hex string
           */
          var formatOutputBytes = function (param, name) {
            var matches = name.match(/^bytes([0-9]*)/);
            var size = parseInt(matches[1]);
            return '0x' + param.staticPart().slice(0, 2 * size);
          };

          /**
           * Should be used to format output bytes
           *
           * @method formatOutputDynamicBytes
           * @param {SolidityParam} left-aligned hex representation of string
           * @returns {String} hex string
           */
          var formatOutputDynamicBytes = function (param) {
            var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
            return '0x' + param.dynamicPart().substr(64, length);
          };

          /**
           * Should be used to format output string
           *
           * @method formatOutputString
           * @param {SolidityParam} left-aligned hex representation of string
           * @returns {String} ascii string
           */
          var formatOutputString = function (param) {
            var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
            return utils.toUtf8(param.dynamicPart().substr(64, length));
          };

          /**
           * Should be used to format output address
           *
           * @method formatOutputAddress
           * @param {SolidityParam} right-aligned input bytes
           * @returns {String} address
           */
          var formatOutputAddress = function (param) {
            var value = param.staticPart();
            return "0x" + value.slice(value.length - 40, value.length);
          };

          module.exports = {
            formatInputInt: formatInputInt,
            formatInputBytes: formatInputBytes,
            formatInputDynamicBytes: formatInputDynamicBytes,
            formatInputString: formatInputString,
            formatInputBool: formatInputBool,
            formatInputReal: formatInputReal,
            formatOutputInt: formatOutputInt,
            formatOutputUInt: formatOutputUInt,
            formatOutputReal: formatOutputReal,
            formatOutputUReal: formatOutputUReal,
            formatOutputBool: formatOutputBool,
            formatOutputBytes: formatOutputBytes,
            formatOutputDynamicBytes: formatOutputDynamicBytes,
            formatOutputString: formatOutputString,
            formatOutputAddress: formatOutputAddress
          };

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\int.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\int.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeInt is a prootype that represents int type
           * It matches:
           * int
           * int[]
           * int[4]
           * int[][]
           * int[3][]
           * int[][6][], ...
           * int32
           * int64[]
           * int8[4]
           * int256[][]
           * int[3][]
           * int64[][6][], ...
           */
          var SolidityTypeInt = function () {
            this._inputFormatter = f.formatInputInt;
            this._outputFormatter = f.formatOutputInt;
          };

          SolidityTypeInt.prototype = new SolidityType({});
          SolidityTypeInt.prototype.constructor = SolidityTypeInt;

          SolidityTypeInt.prototype.isType = function (name) {
            return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
          };

          module.exports = SolidityTypeInt;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\param.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\param.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file param.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var utils = require('../utils/utils');

          /**
           * SolidityParam object prototype.
           * Should be used when encoding, decoding solidity bytes
           */
          var SolidityParam = function (value, offset) {
            this.value = value || '';
            this.offset = offset; // offset in bytes
          };

          /**
           * This method should be used to get length of params's dynamic part
           * 
           * @method dynamicPartLength
           * @returns {Number} length of dynamic part (in bytes)
           */
          SolidityParam.prototype.dynamicPartLength = function () {
            return this.dynamicPart().length / 2;
          };

          /**
           * This method should be used to create copy of solidity param with different offset
           *
           * @method withOffset
           * @param {Number} offset length in bytes
           * @returns {SolidityParam} new solidity param with applied offset
           */
          SolidityParam.prototype.withOffset = function (offset) {
            return new SolidityParam(this.value, offset);
          };

          /**
           * This method should be used to combine solidity params together
           * eg. when appending an array
           *
           * @method combine
           * @param {SolidityParam} param with which we should combine
           * @param {SolidityParam} result of combination
           */
          SolidityParam.prototype.combine = function (param) {
            return new SolidityParam(this.value + param.value);
          };

          /**
           * This method should be called to check if param has dynamic size.
           * If it has, it returns true, otherwise false
           *
           * @method isDynamic
           * @returns {Boolean}
           */
          SolidityParam.prototype.isDynamic = function () {
            return this.offset !== undefined;
          };

          /**
           * This method should be called to transform offset to bytes
           *
           * @method offsetAsBytes
           * @returns {String} bytes representation of offset
           */
          SolidityParam.prototype.offsetAsBytes = function () {
            return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);
          };

          /**
           * This method should be called to get static part of param
           *
           * @method staticPart
           * @returns {String} offset if it is a dynamic param, otherwise value
           */
          SolidityParam.prototype.staticPart = function () {
            if (!this.isDynamic()) {
              return this.value;
            }
            return this.offsetAsBytes();
          };

          /**
           * This method should be called to get dynamic part of param
           *
           * @method dynamicPart
           * @returns {String} returns a value if it is a dynamic param, otherwise empty string
           */
          SolidityParam.prototype.dynamicPart = function () {
            return this.isDynamic() ? this.value : '';
          };

          /**
           * This method should be called to encode param
           *
           * @method encode
           * @returns {String}
           */
          SolidityParam.prototype.encode = function () {
            return this.staticPart() + this.dynamicPart();
          };

          /**
           * This method should be called to encode array of params
           *
           * @method encodeList
           * @param {Array[SolidityParam]} params
           * @returns {String}
           */
          SolidityParam.encodeList = function (params) {

            // updating offsets
            var totalOffset = params.length * 32;
            var offsetParams = params.map(function (param) {
              if (!param.isDynamic()) {
                return param;
              }
              var offset = totalOffset;
              totalOffset += param.dynamicPartLength();
              return param.withOffset(offset);
            });

            // encode everything!
            return offsetParams.reduce(function (result, param) {
              return result + param.dynamicPart();
            }, offsetParams.reduce(function (result, param) {
              return result + param.staticPart();
            }, ''));
          };



          module.exports = SolidityParam;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\real.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\real.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeReal is a prootype that represents real type
           * It matches:
           * real
           * real[]
           * real[4]
           * real[][]
           * real[3][]
           * real[][6][], ...
           * real32
           * real64[]
           * real8[4]
           * real256[][]
           * real[3][]
           * real64[][6][], ...
           */
          var SolidityTypeReal = function () {
            this._inputFormatter = f.formatInputReal;
            this._outputFormatter = f.formatOutputReal;
          };

          SolidityTypeReal.prototype = new SolidityType({});
          SolidityTypeReal.prototype.constructor = SolidityTypeReal;

          SolidityTypeReal.prototype.isType = function (name) {
            return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);
          };

          module.exports = SolidityTypeReal;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\string.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\string.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          var SolidityTypeString = function () {
            this._inputFormatter = f.formatInputString;
            this._outputFormatter = f.formatOutputString;
          };

          SolidityTypeString.prototype = new SolidityType({});
          SolidityTypeString.prototype.constructor = SolidityTypeString;

          SolidityTypeString.prototype.isType = function (name) {
            return !!name.match(/^string(\[([0-9]*)\])*$/);
          };

          SolidityTypeString.prototype.isDynamicType = function () {
            return true;
          };

          module.exports = SolidityTypeString;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./param": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\param.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\type.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityParam = require('./param');

          /**
           * SolidityType prototype is used to encode/decode solidity params of certain type
           */
          var SolidityType = function (config) {
            this._inputFormatter = config.inputFormatter;
            this._outputFormatter = config.outputFormatter;
          };

          /**
           * Should be used to determine if this SolidityType do match given name
           *
           * @method isType
           * @param {String} name
           * @return {Bool} true if type match this SolidityType, otherwise false
           */
          SolidityType.prototype.isType = function (name) {
            throw "this method should be overrwritten for type " + name;
          };

          /**
           * Should be used to determine what is the length of static part in given type
           *
           * @method staticPartLength
           * @param {String} name
           * @return {Number} length of static part in bytes
           */
          SolidityType.prototype.staticPartLength = function (name) {
            // If name isn't an array then treat it like a single element array.
            return (this.nestedTypes(name) || ['[1]'])
              .map(function (type) {
                // the length of the nested array
                return parseInt(type.slice(1, -1), 10) || 1;
              })
              .reduce(function (previous, current) {
                return previous * current;
                // all basic types are 32 bytes long
              }, 32);
          };

          /**
           * Should be used to determine if type is dynamic array
           * eg:
           * "type[]" => true
           * "type[4]" => false
           *
           * @method isDynamicArray
           * @param {String} name
           * @return {Bool} true if the type is dynamic array
           */
          SolidityType.prototype.isDynamicArray = function (name) {
            var nestedTypes = this.nestedTypes(name);
            return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
          };

          /**
           * Should be used to determine if type is static array
           * eg:
           * "type[]" => false
           * "type[4]" => true
           *
           * @method isStaticArray
           * @param {String} name
           * @return {Bool} true if the type is static array
           */
          SolidityType.prototype.isStaticArray = function (name) {
            var nestedTypes = this.nestedTypes(name);
            return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
          };

          /**
           * Should return length of static array
           * eg.
           * "int[32]" => 32
           * "int256[14]" => 14
           * "int[2][3]" => 3
           * "int" => 1
           * "int[1]" => 1
           * "int[]" => 1
           *
           * @method staticArrayLength
           * @param {String} name
           * @return {Number} static array length
           */
          SolidityType.prototype.staticArrayLength = function (name) {
            var nestedTypes = this.nestedTypes(name);
            if (nestedTypes) {
              return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
            }
            return 1;
          };

          /**
           * Should return nested type
           * eg.
           * "int[32]" => "int"
           * "int256[14]" => "int256"
           * "int[2][3]" => "int[2]"
           * "int" => "int"
           * "int[]" => "int"
           *
           * @method nestedName
           * @param {String} name
           * @return {String} nested name
           */
          SolidityType.prototype.nestedName = function (name) {
            // remove last [] in name
            var nestedTypes = this.nestedTypes(name);
            if (!nestedTypes) {
              return name;
            }

            return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
          };

          /**
           * Should return true if type has dynamic size by default
           * such types are "string", "bytes"
           *
           * @method isDynamicType
           * @param {String} name
           * @return {Bool} true if is dynamic, otherwise false
           */
          SolidityType.prototype.isDynamicType = function () {
            return false;
          };

          /**
           * Should return array of nested types
           * eg.
           * "int[2][3][]" => ["[2]", "[3]", "[]"]
           * "int[] => ["[]"]
           * "int" => null
           *
           * @method nestedTypes
           * @param {String} name
           * @return {Array} array of nested types
           */
          SolidityType.prototype.nestedTypes = function (name) {
            // return list of strings eg. "[]", "[3]", "[]", "[2]"
            return name.match(/(\[[0-9]*\])/g);
          };

          /**
           * Should be used to encode the value
           *
           * @method encode
           * @param {Object} value
           * @param {String} name
           * @return {String} encoded value
           */
          SolidityType.prototype.encode = function (value, name) {
            var self = this;
            if (this.isDynamicArray(name)) {

              return (function () {
                var length = value.length;                          // in int
                var nestedName = self.nestedName(name);

                var result = [];
                result.push(f.formatInputInt(length).encode());

                value.forEach(function (v) {
                  result.push(self.encode(v, nestedName));
                });

                return result;
              })();

            } else if (this.isStaticArray(name)) {

              return (function () {
                var length = self.staticArrayLength(name);          // in int
                var nestedName = self.nestedName(name);

                var result = [];
                for (var i = 0; i < length; i++) {
                  result.push(self.encode(value[i], nestedName));
                }

                return result;
              })();

            }

            return this._inputFormatter(value, name).encode();
          };

          /**
           * Should be used to decode value from bytes
           *
           * @method decode
           * @param {String} bytes
           * @param {Number} offset in bytes
           * @param {String} name type name
           * @returns {Object} decoded value
           */
          SolidityType.prototype.decode = function (bytes, offset, name) {
            var self = this;

            if (this.isDynamicArray(name)) {

              return (function () {
                var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
                var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
                var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

                var nestedName = self.nestedName(name);
                var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
                var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
                var result = [];

                for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
                }

                return result;
              })();

            } else if (this.isStaticArray(name)) {

              return (function () {
                var length = self.staticArrayLength(name);                      // in int
                var arrayStart = offset;                                        // in bytes

                var nestedName = self.nestedName(name);
                var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
                var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
                var result = [];

                for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
                }

                return result;
              })();
            } else if (this.isDynamicType(name)) {

              return (function () {
                var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
                var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
                var roundedLength = Math.floor((length + 31) / 32);                     // in int
                var param = new SolidityParam(bytes.substr(dynamicOffset * 2, (1 + roundedLength) * 64), 0);
                return self._outputFormatter(param, name);
              })();
            }

            var length = this.staticPartLength(name);
            var param = new SolidityParam(bytes.substr(offset * 2, length * 2));
            return this._outputFormatter(param, name);
          };

          module.exports = SolidityType;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\uint.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\uint.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeUInt is a prootype that represents uint type
           * It matches:
           * uint
           * uint[]
           * uint[4]
           * uint[][]
           * uint[3][]
           * uint[][6][], ...
           * uint32
           * uint64[]
           * uint8[4]
           * uint256[][]
           * uint[3][]
           * uint64[][6][], ...
           */
          var SolidityTypeUInt = function () {
            this._inputFormatter = f.formatInputInt;
            this._outputFormatter = f.formatOutputUInt;
          };

          SolidityTypeUInt.prototype = new SolidityType({});
          SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

          SolidityTypeUInt.prototype.isType = function (name) {
            return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
          };

          module.exports = SolidityTypeUInt;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\ureal.js", { "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\formatters.js", "./type": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\type.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\solidity\ureal.js
        return function (require, module, exports) {
          var f = require('./formatters');
          var SolidityType = require('./type');

          /**
           * SolidityTypeUReal is a prootype that represents ureal type
           * It matches:
           * ureal
           * ureal[]
           * ureal[4]
           * ureal[][]
           * ureal[3][]
           * ureal[][6][], ...
           * ureal32
           * ureal64[]
           * ureal8[4]
           * ureal256[][]
           * ureal[3][]
           * ureal64[][6][], ...
           */
          var SolidityTypeUReal = function () {
            this._inputFormatter = f.formatInputReal;
            this._outputFormatter = f.formatOutputUReal;
          };

          SolidityTypeUReal.prototype = new SolidityType({});
          SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;

          SolidityTypeUReal.prototype.isType = function (name) {
            return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);
          };

          module.exports = SolidityTypeUReal;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\browser-xhr.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\utils\browser-xhr.js
        return function (require, module, exports) {
          'use strict';

          // go env doesn't have and need XMLHttpRequest
          if (typeof XMLHttpRequest === 'undefined') {
            exports.XMLHttpRequest = {};
          } else {
            exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line
          }


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\config.js", { "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\utils\config.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file config.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          /**
           * Utils
           * 
           * @module utils
           */

          /**
           * Utility functions
           * 
           * @class [utils] config
           * @constructor
           */


          /// required to define ETH_BIGNUMBER_ROUNDING_MODE
          var BigNumber = require('bignumber.js');

          var ETH_UNITS = [
            'wei',
            'kwei',
            'Mwei',
            'Gwei',
            'szabo',
            'finney',
            'femtoether',
            'picoether',
            'nanoether',
            'microether',
            'milliether',
            'nano',
            'micro',
            'milli',
            'ether',
            'grand',
            'Mether',
            'Gether',
            'Tether',
            'Pether',
            'Eether',
            'Zether',
            'Yether',
            'Nether',
            'Dether',
            'Vether',
            'Uether'
          ];

          module.exports = {
            ETH_PADDING: 32,
            ETH_SIGNATURE_LENGTH: 4,
            ETH_UNITS: ETH_UNITS,
            ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },
            ETH_POLLING_TIMEOUT: 1000 / 2,
            defaultBlock: 'latest',
            defaultAccount: undefined
          };


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", { "crypto-js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\crypto-js\\index.js", "crypto-js/sha3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\crypto-js\\sha3.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\utils\sha3.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file sha3.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var CryptoJS = require('crypto-js');
          var sha3 = require('crypto-js/sha3');

          module.exports = function (value, options) {
            if (options && options.encoding === 'hex') {
              if (value.length > 2 && value.substr(0, 2) === '0x') {
                value = value.substr(2);
              }
              value = CryptoJS.enc.Hex.parse(value);
            }

            return sha3(value, {
              outputLength: 256
            }).toString();
          };


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", { "./sha3.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js", "utf8": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\utf8\\utf8.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\utils\utils.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file utils.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          /**
           * Utils
           *
           * @module utils
           */

          /**
           * Utility functions
           *
           * @class [utils] utils
           * @constructor
           */


          var BigNumber = require('bignumber.js');
          var sha3 = require('./sha3.js');
          var utf8 = require('utf8');

          var unitMap = {
            'noether': '0',
            'wei': '1',
            'kwei': '1000',
            'Kwei': '1000',
            'babbage': '1000',
            'femtoether': '1000',
            'mwei': '1000000',
            'Mwei': '1000000',
            'lovelace': '1000000',
            'picoether': '1000000',
            'gwei': '1000000000',
            'Gwei': '1000000000',
            'shannon': '1000000000',
            'nanoether': '1000000000',
            'nano': '1000000000',
            'szabo': '1000000000000',
            'microether': '1000000000000',
            'micro': '1000000000000',
            'finney': '1000000000000000',
            'milliether': '1000000000000000',
            'milli': '1000000000000000',
            'ether': '1000000000000000000',
            'kether': '1000000000000000000000',
            'grand': '1000000000000000000000',
            'mether': '1000000000000000000000000',
            'gether': '1000000000000000000000000000',
            'tether': '1000000000000000000000000000000'
          };

          /**
           * Should be called to pad string to expected length
           *
           * @method padLeft
           * @param {String} string to be padded
           * @param {Number} characters that result string should have
           * @param {String} sign, by default 0
           * @returns {String} right aligned string
           */
          var padLeft = function (string, chars, sign) {
            return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
          };

          /**
           * Should be called to pad string to expected length
           *
           * @method padRight
           * @param {String} string to be padded
           * @param {Number} characters that result string should have
           * @param {String} sign, by default 0
           * @returns {String} right aligned string
           */
          var padRight = function (string, chars, sign) {
            return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));
          };

          /**
           * Should be called to get utf8 from it's hex representation
           *
           * @method toUtf8
           * @param {String} string in hex
           * @returns {String} ascii string representation of hex value
           */
          var toUtf8 = function (hex) {
            // Find termination
            var str = "";
            var i = 0, l = hex.length;
            if (hex.substring(0, 2) === '0x') {
              i = 2;
            }
            for (; i < l; i += 2) {
              var code = parseInt(hex.substr(i, 2), 16);
              if (code === 0)
                break;
              str += String.fromCharCode(code);
            }

            return utf8.decode(str);
          };

          /**
           * Should be called to get ascii from it's hex representation
           *
           * @method toAscii
           * @param {String} string in hex
           * @returns {String} ascii string representation of hex value
           */
          var toAscii = function (hex) {
            // Find termination
            var str = "";
            var i = 0, l = hex.length;
            if (hex.substring(0, 2) === '0x') {
              i = 2;
            }
            for (; i < l; i += 2) {
              var code = parseInt(hex.substr(i, 2), 16);
              str += String.fromCharCode(code);
            }

            return str;
          };

          /**
           * Should be called to get hex representation (prefixed by 0x) of utf8 string
           *
           * @method fromUtf8
           * @param {String} string
           * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string
           * @returns {String} hex representation of input string
           */
          var fromUtf8 = function (str, allowZero) {
            str = utf8.encode(str);
            var hex = "";
            for (var i = 0; i < str.length; i++) {
              var code = str.charCodeAt(i);
              if (code === 0) {
                if (allowZero) {
                  hex += '00';
                } else {
                  break;
                }
              } else {
                var n = code.toString(16);
                hex += n.length < 2 ? '0' + n : n;
              }
            }

            return "0x" + hex;
          };

          /**
           * Should be called to get hex representation (prefixed by 0x) of ascii string
           *
           * @method fromAscii
           * @param {String} string
           * @param {Number} optional padding
           * @returns {String} hex representation of input string
           */
          var fromAscii = function (str, num) {
            var hex = "";
            for (var i = 0; i < str.length; i++) {
              var code = str.charCodeAt(i);
              var n = code.toString(16);
              hex += n.length < 2 ? '0' + n : n;
            }

            return "0x" + hex.padEnd(num, '0');
          };

          /**
           * Should be used to create full function/event name from json abi
           *
           * @method transformToFullName
           * @param {Object} json-abi
           * @return {String} full fnction/event name
           */
          var transformToFullName = function (json) {
            if (json.name.indexOf('(') !== -1) {
              return json.name;
            }

            var typeName = json.inputs.map(function (i) { return i.type; }).join();
            return json.name + '(' + typeName + ')';
          };

          /**
           * Should be called to get display name of contract function
           *
           * @method extractDisplayName
           * @param {String} name of function/event
           * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
           */
          var extractDisplayName = function (name) {
            var stBracket = name.indexOf('(');
            var endBracket = name.indexOf(')');
            return (stBracket !== -1 && endBracket !== -1) ? name.substr(0, stBracket) : name;
          };

          /**
           * Should be called to get type name of contract function
           *
           * @method extractTypeName
           * @param {String} name of function/event
           * @returns {String} type name for function/event eg. multiply(uint256) -> uint256
           */
          var extractTypeName = function (name) {
            var stBracket = name.indexOf('(');
            var endBracket = name.indexOf(')');
            return (stBracket !== -1 && endBracket !== -1) ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '') : "";
          };

          /**
           * Converts value to it's decimal representation in string
           *
           * @method toDecimal
           * @param {String|Number|BigNumber}
           * @return {String}
           */
          var toDecimal = function (value) {
            return toBigNumber(value).toNumber();
          };

          /**
           * Converts value to it's hex representation
           *
           * @method fromDecimal
           * @param {String|Number|BigNumber}
           * @return {String}
           */
          var fromDecimal = function (value) {
            var number = toBigNumber(value);
            var result = number.toString(16);

            return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
          };

          /**
           * Auto converts any given value into it's hex representation.
           *
           * And even stringifys objects before.
           *
           * @method toHex
           * @param {String|Number|BigNumber|Object}
           * @return {String}
           */
          var toHex = function (val) {
            /*jshint maxcomplexity: 8 */

            if (isBoolean(val))
              return fromDecimal(+val);

            if (isBigNumber(val))
              return fromDecimal(val);

            if (typeof val === 'object')
              return fromUtf8(JSON.stringify(val));

            // if its a negative number, pass it through fromDecimal
            if (isString(val)) {
              if (val.indexOf('-0x') === 0)
                return fromDecimal(val);
              else if (val.indexOf('0x') === 0)
                return val;
              else if (!isFinite(val))
                return fromUtf8(val, 1);
            }

            return fromDecimal(val);
          };

          /**
           * Returns value of unit in Wei
           *
           * @method getValueOfUnit
           * @param {String} unit the unit to convert to, default ether
           * @returns {BigNumber} value of the unit (in Wei)
           * @throws error if the unit is not correct:w
           */
          var getValueOfUnit = function (unit) {
            unit = unit ? unit.toLowerCase() : 'ether';
            var unitValue = unitMap[unit];
            if (unitValue === undefined) {
              throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
            }
            return new BigNumber(unitValue, 10);
          };

          /**
           * Takes a number of wei and converts it to any other ether unit.
           *
           * Possible units are:
           *   SI Short   SI Full        Effigy       Other
           * - kwei       femtoether     babbage
           * - mwei       picoether      lovelace
           * - gwei       nanoether      shannon      nano
           * - --         microether     szabo        micro
           * - --         milliether     finney       milli
           * - ether      --             --
           * - kether                    --           grand
           * - mether
           * - gether
           * - tether
           *
           * @method fromWei
           * @param {Number|String} number can be a number, number string or a HEX of a decimal
           * @param {String} unit the unit to convert to, default ether
           * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
          */
          var fromWei = function (number, unit) {
            var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

            return isBigNumber(number) ? returnValue : returnValue.toString(10);
          };

          /**
           * Takes a number of a unit and converts it to wei.
           *
           * Possible units are:
           *   SI Short   SI Full        Effigy       Other
           * - kwei       femtoether     babbage
           * - mwei       picoether      lovelace
           * - gwei       nanoether      shannon      nano
           * - --         microether     szabo        micro
           * - --         milliether     finney       milli
           * - ether      --             --
           * - kether                    --           grand
           * - mether
           * - gether
           * - tether
           *
           * @method toWei
           * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
           * @param {String} unit the unit to convert from, default ether
           * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
          */
          var toWei = function (number, unit) {
            var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

            return isBigNumber(number) ? returnValue : returnValue.toString(10);
          };

          /**
           * Takes an input and transforms it into an bignumber
           *
           * @method toBigNumber
           * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
           * @return {BigNumber} BigNumber
          */
          var toBigNumber = function (number) {
            /*jshint maxcomplexity:5 */
            number = number || 0;
            if (isBigNumber(number))
              return number;

            if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
              return new BigNumber(number.replace('0x', ''), 16);
            }

            return new BigNumber(number.toString(10), 10);
          };

          /**
           * Takes and input transforms it into bignumber and if it is negative value, into two's complement
           *
           * @method toTwosComplement
           * @param {Number|String|BigNumber}
           * @return {BigNumber}
           */
          var toTwosComplement = function (number) {
            var bigNumber = toBigNumber(number).round();
            if (bigNumber.lessThan(0)) {
              return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
            }
            return bigNumber;
          };

          /**
           * Checks if the given string is strictly an address
           *
           * @method isStrictAddress
           * @param {String} address the given HEX adress
           * @return {Boolean}
          */
          var isStrictAddress = function (address) {
            return /^0x[0-9a-f]{40}$/i.test(address);
          };

          /**
           * Checks if the given string is an address
           *
           * @method isAddress
           * @param {String} address the given HEX adress
           * @return {Boolean}
          */
          var isAddress = function (address) {
            if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
              // check if it has the basic requirements of an address
              return false;
            } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
              // If it's all small caps or all all caps, return true
              return true;
            } else {
              // Otherwise check each case
              return isChecksumAddress(address);
            }
          };

          /**
           * Checks if the given string is a checksummed address
           *
           * @method isChecksumAddress
           * @param {String} address the given HEX adress
           * @return {Boolean}
          */
          var isChecksumAddress = function (address) {
            // Check each case
            address = address.replace('0x', '');
            var addressHash = sha3(address.toLowerCase());

            for (var i = 0; i < 40; i++) {
              // the nth letter should be uppercase if the nth digit of casemap is 1
              if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
                return false;
              }
            }
            return true;
          };



          /**
           * Makes a checksum address
           *
           * @method toChecksumAddress
           * @param {String} address the given HEX adress
           * @return {String}
          */
          var toChecksumAddress = function (address) {
            if (typeof address === 'undefined') return '';

            address = address.toLowerCase().replace('0x', '');
            var addressHash = sha3(address);
            var checksumAddress = '0x';

            for (var i = 0; i < address.length; i++) {
              // If ith character is 9 to f then make it uppercase
              if (parseInt(addressHash[i], 16) > 7) {
                checksumAddress += address[i].toUpperCase();
              } else {
                checksumAddress += address[i];
              }
            }
            return checksumAddress;
          };

          /**
           * Transforms given string to valid 20 bytes-length addres with 0x prefix
           *
           * @method toAddress
           * @param {String} address
           * @return {String} formatted address
           */
          var toAddress = function (address) {
            if (isStrictAddress(address)) {
              return address;
            }

            if (/^[0-9a-f]{40}$/.test(address)) {
              return '0x' + address;
            }

            return '0x' + padLeft(toHex(address).substr(2), 40);
          };

          /**
           * Returns true if object is BigNumber, otherwise false
           *
           * @method isBigNumber
           * @param {Object}
           * @return {Boolean}
           */
          var isBigNumber = function (object) {
            return object instanceof BigNumber ||
              (object && object.constructor && object.constructor.name === 'BigNumber');
          };

          /**
           * Returns true if object is string, otherwise false
           *
           * @method isString
           * @param {Object}
           * @return {Boolean}
           */
          var isString = function (object) {
            return typeof object === 'string' ||
              (object && object.constructor && object.constructor.name === 'String');
          };

          /**
           * Returns true if object is function, otherwise false
           *
           * @method isFunction
           * @param {Object}
           * @return {Boolean}
           */
          var isFunction = function (object) {
            return typeof object === 'function';
          };

          /**
           * Returns true if object is Objet, otherwise false
           *
           * @method isObject
           * @param {Object}
           * @return {Boolean}
           */
          var isObject = function (object) {
            return object !== null && !(Array.isArray(object)) && typeof object === 'object';
          };

          /**
           * Returns true if object is boolean, otherwise false
           *
           * @method isBoolean
           * @param {Object}
           * @return {Boolean}
           */
          var isBoolean = function (object) {
            return typeof object === 'boolean';
          };

          /**
           * Returns true if object is array, otherwise false
           *
           * @method isArray
           * @param {Object}
           * @return {Boolean}
           */
          var isArray = function (object) {
            return Array.isArray(object);
          };

          /**
           * Returns true if given string is valid json object
           *
           * @method isJson
           * @param {String}
           * @return {Boolean}
           */
          var isJson = function (str) {
            try {
              return !!JSON.parse(str);
            } catch (e) {
              return false;
            }
          };

          /**
           * Returns true if given string is a valid Ethereum block header bloom.
           *
           * @method isBloom
           * @param {String} hex encoded bloom filter
           * @return {Boolean}
           */
          var isBloom = function (bloom) {
            if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
              return false;
            } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
              return true;
            }
            return false;
          };

          /**
           * Returns true if given string is a valid log topic.
           *
           * @method isTopic
           * @param {String} hex encoded topic
           * @return {Boolean}
           */
          var isTopic = function (topic) {
            if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
              return false;
            } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
              return true;
            }
            return false;
          };

          module.exports = {
            padLeft: padLeft,
            padRight: padRight,
            toHex: toHex,
            toDecimal: toDecimal,
            fromDecimal: fromDecimal,
            toUtf8: toUtf8,
            toAscii: toAscii,
            fromUtf8: fromUtf8,
            fromAscii: fromAscii,
            transformToFullName: transformToFullName,
            extractDisplayName: extractDisplayName,
            extractTypeName: extractTypeName,
            toWei: toWei,
            fromWei: fromWei,
            toBigNumber: toBigNumber,
            toTwosComplement: toTwosComplement,
            toAddress: toAddress,
            isBigNumber: isBigNumber,
            isStrictAddress: isStrictAddress,
            isAddress: isAddress,
            isChecksumAddress: isChecksumAddress,
            toChecksumAddress: toChecksumAddress,
            isFunction: isFunction,
            isString: isString,
            isObject: isObject,
            isBoolean: isBoolean,
            isArray: isArray,
            isJson: isJson,
            isBloom: isBloom,
            isTopic: isTopic,
          };

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\version.json", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\version.json
        return function (require, module, exports) {
          module.exports = {
            "version": "0.20.7"
          }

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3.js", { "./utils/sha3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", "./utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./version.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\version.json", "./web3/batch": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\batch.js", "./web3/extend": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\extend.js", "./web3/httpprovider": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\httpprovider.js", "./web3/iban": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\iban.js", "./web3/ipcprovider": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\ipcprovider.js", "./web3/methods/db": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\db.js", "./web3/methods/eth": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\eth.js", "./web3/methods/net": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\net.js", "./web3/methods/personal": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\personal.js", "./web3/methods/shh": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\shh.js", "./web3/methods/swarm": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\swarm.js", "./web3/property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js", "./web3/requestmanager": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\requestmanager.js", "./web3/settings": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\settings.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3.js
        return function (require, module, exports) {
          /*!
           * web3.js - Ethereum JavaScript API
           *
           * @license lgpl-3.0
           * @see https://github.com/ethereum/web3.js
          */

          /*
           * This file is part of web3.js.
           * 
           * web3.js is free software: you can redistribute it and/or modify
           * it under the terms of the GNU Lesser General Public License as published by
           * the Free Software Foundation, either version 3 of the License, or
           * (at your option) any later version.
           * 
           * web3.js is distributed in the hope that it will be useful,
           * but WITHOUT ANY WARRANTY; without even the implied warranty of
           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
           * GNU Lesser General Public License for more details.
           * 
           * You should have received a copy of the GNU Lesser General Public License
           * along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
           *
           * @file web3.js
           * @authors:
           *   Jeffrey Wilcke <jeff@ethdev.com>
           *   Marek Kotewicz <marek@ethdev.com>
           *   Marian Oancea <marian@ethdev.com>
           *   Fabian Vogelsteller <fabian@ethdev.com>
           *   Gav Wood <g@ethdev.com>
           * @date 2014
           */

          var RequestManager = require('./web3/requestmanager');
          var Iban = require('./web3/iban');
          var Eth = require('./web3/methods/eth');
          var DB = require('./web3/methods/db');
          var Shh = require('./web3/methods/shh');
          var Net = require('./web3/methods/net');
          var Personal = require('./web3/methods/personal');
          var Swarm = require('./web3/methods/swarm');
          var Settings = require('./web3/settings');
          var version = require('./version.json');
          var utils = require('./utils/utils');
          var sha3 = require('./utils/sha3');
          var extend = require('./web3/extend');
          var Batch = require('./web3/batch');
          var Property = require('./web3/property');
          var HttpProvider = require('./web3/httpprovider');
          var IpcProvider = require('./web3/ipcprovider');
          var BigNumber = require('bignumber.js');



          function Web3(provider) {
            this._requestManager = new RequestManager(provider);
            this.currentProvider = provider;
            this.eth = new Eth(this);
            this.db = new DB(this);
            this.shh = new Shh(this);
            this.net = new Net(this);
            this.personal = new Personal(this);
            this.bzz = new Swarm(this);
            this.settings = new Settings();
            this.version = {
              api: version.version
            };
            this.providers = {
              HttpProvider: HttpProvider,
              IpcProvider: IpcProvider
            };
            this._extend = extend(this);
            this._extend({
              properties: properties()
            });
          }

          // expose providers on the class
          Web3.providers = {
            HttpProvider: HttpProvider,
            IpcProvider: IpcProvider
          };

          Web3.prototype.setProvider = function (provider) {
            this._requestManager.setProvider(provider);
            this.currentProvider = provider;
          };

          Web3.prototype.reset = function (keepIsSyncing) {
            this._requestManager.reset(keepIsSyncing);
            this.settings = new Settings();
          };

          Web3.prototype.BigNumber = BigNumber;
          Web3.prototype.toHex = utils.toHex;
          Web3.prototype.toAscii = utils.toAscii;
          Web3.prototype.toUtf8 = utils.toUtf8;
          Web3.prototype.fromAscii = utils.fromAscii;
          Web3.prototype.fromUtf8 = utils.fromUtf8;
          Web3.prototype.toDecimal = utils.toDecimal;
          Web3.prototype.fromDecimal = utils.fromDecimal;
          Web3.prototype.toBigNumber = utils.toBigNumber;
          Web3.prototype.toWei = utils.toWei;
          Web3.prototype.fromWei = utils.fromWei;
          Web3.prototype.isAddress = utils.isAddress;
          Web3.prototype.isChecksumAddress = utils.isChecksumAddress;
          Web3.prototype.toChecksumAddress = utils.toChecksumAddress;
          Web3.prototype.isIBAN = utils.isIBAN;
          Web3.prototype.padLeft = utils.padLeft;
          Web3.prototype.padRight = utils.padRight;


          Web3.prototype.sha3 = function (string, options) {
            return '0x' + sha3(string, options);
          };

          /**
           * Transforms direct icap to address
           */
          Web3.prototype.fromICAP = function (icap) {
            var iban = new Iban(icap);
            return iban.address();
          };

          var properties = function () {
            return [
              new Property({
                name: 'version.node',
                getter: 'web3_clientVersion'
              }),
              new Property({
                name: 'version.network',
                getter: 'net_version',
                inputFormatter: utils.toDecimal
              }),
              new Property({
                name: 'version.ethereum',
                getter: 'eth_protocolVersion',
                inputFormatter: utils.toDecimal
              }),
              new Property({
                name: 'version.whisper',
                getter: 'shh_version',
                inputFormatter: utils.toDecimal
              })
            ];
          };

          Web3.prototype.isConnected = function () {
            return (this.currentProvider && this.currentProvider.isConnected());
          };

          Web3.prototype.createBatch = function () {
            return new Batch(this);
          };

          module.exports = Web3;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\allevents.js", { "../utils/sha3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./event": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\event.js", "./filter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\filter.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", "./methods/watches": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\watches.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\allevents.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file allevents.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2014
           */

          var sha3 = require('../utils/sha3');
          var SolidityEvent = require('./event');
          var formatters = require('./formatters');
          var utils = require('../utils/utils');
          var Filter = require('./filter');
          var watches = require('./methods/watches');

          var AllSolidityEvents = function (requestManager, json, address) {
            this._requestManager = requestManager;
            this._json = json;
            this._address = address;
          };

          AllSolidityEvents.prototype.encode = function (options) {
            options = options || {};
            var result = {};

            ['fromBlock', 'toBlock'].filter(function (f) {
              return options[f] !== undefined;
            }).forEach(function (f) {
              result[f] = formatters.inputBlockNumberFormatter(options[f]);
            });

            result.address = this._address;

            return result;
          };

          AllSolidityEvents.prototype.decode = function (data) {
            data.data = data.data || '';


            var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
            var match = this._json.filter(function (j) {
              return eventTopic === sha3(utils.transformToFullName(j));
            })[0];

            if (!match) { // cannot find matching event?
              return formatters.outputLogFormatter(data);
            }

            var event = new SolidityEvent(this._requestManager, match, this._address);
            return event.decode(data);
          };

          AllSolidityEvents.prototype.execute = function (options, callback) {

            if (utils.isFunction(arguments[arguments.length - 1])) {
              callback = arguments[arguments.length - 1];
              if (arguments.length === 1)
                options = null;
            }

            var o = this.encode(options);
            var formatter = this.decode.bind(this);
            return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
          };

          AllSolidityEvents.prototype.attachToContract = function (contract) {
            var execute = this.execute.bind(this);
            contract.allEvents = execute;
          };

          module.exports = AllSolidityEvents;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\batch.js", { "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js", "./jsonrpc": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\jsonrpc.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\batch.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file batch.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var Jsonrpc = require('./jsonrpc');
          var errors = require('./errors');

          var Batch = function (web3) {
            this.requestManager = web3._requestManager;
            this.requests = [];
          };

          /**
           * Should be called to add create new request to batch request
           *
           * @method add
           * @param {Object} jsonrpc requet object
           */
          Batch.prototype.add = function (request) {
            this.requests.push(request);
          };

          /**
           * Should be called to execute batch request
           *
           * @method execute
           */
          Batch.prototype.execute = function () {
            var requests = this.requests;
            this.requestManager.sendBatch(requests, function (err, results) {
              results = results || [];
              requests.map(function (request, index) {
                return results[index] || {};
              }).forEach(function (result, index) {
                if (requests[index].callback) {

                  if (!Jsonrpc.isValidResponse(result)) {
                    return requests[index].callback(errors.InvalidResponse(result));
                  }

                  requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
                }
              });
            });
          };

          module.exports = Batch;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\contract.js", { "../solidity/coder": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\coder.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./allevents": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\allevents.js", "./event": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\event.js", "./function": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\function.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\contract.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file contract.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2014
           */

          var utils = require('../utils/utils');
          var coder = require('../solidity/coder');
          var SolidityEvent = require('./event');
          var SolidityFunction = require('./function');
          var AllEvents = require('./allevents');

          /**
           * Should be called to encode constructor params
           *
           * @method encodeConstructorParams
           * @param {Array} abi
           * @param {Array} constructor params
           */
          var encodeConstructorParams = function (abi, params) {
            return abi.filter(function (json) {
              return json.type === 'constructor' && json.inputs.length === params.length;
            }).map(function (json) {
              return json.inputs.map(function (input) {
                return input.type;
              });
            }).map(function (types) {
              return coder.encodeParams(types, params);
            })[0] || '';
          };

          /**
           * Should be called to add functions to contract object
           *
           * @method addFunctionsToContract
           * @param {Contract} contract
           * @param {Array} abi
           */
          var addFunctionsToContract = function (contract) {
            contract.abi.filter(function (json) {
              return json.type === 'function';
            }).map(function (json) {
              return new SolidityFunction(contract._eth, json, contract.address);
            }).forEach(function (f) {
              f.attachToContract(contract);
            });
          };

          /**
           * Should be called to add events to contract object
           *
           * @method addEventsToContract
           * @param {Contract} contract
           * @param {Array} abi
           */
          var addEventsToContract = function (contract) {
            var events = contract.abi.filter(function (json) {
              return json.type === 'event';
            });

            var All = new AllEvents(contract._eth._requestManager, events, contract.address);
            All.attachToContract(contract);

            events.map(function (json) {
              return new SolidityEvent(contract._eth._requestManager, json, contract.address);
            }).forEach(function (e) {
              e.attachToContract(contract);
            });
          };


          /**
           * Should be called to check if the contract gets properly deployed on the blockchain.
           *
           * @method checkForContractAddress
           * @param {Object} contract
           * @param {Function} callback
           * @returns {Undefined}
           */
          var checkForContractAddress = function (contract, callback) {
            var count = 0,
              callbackFired = false;

            // wait for receipt
            var filter = contract._eth.filter('latest', function (e) {
              if (!e && !callbackFired) {
                count++;

                // stop watching after 50 blocks (timeout)
                if (count > 50) {

                  filter.stopWatching(function () { });
                  callbackFired = true;

                  if (callback)
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));
                  else
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');


                } else {

                  contract._eth.getTransactionReceipt(contract.transactionHash, function (e, receipt) {
                    if (receipt && receipt.blockHash && !callbackFired) {

                      contract._eth.getCode(receipt.contractAddress, function (e, code) {
                        /*jshint maxcomplexity: 6 */

                        if (callbackFired || !code)
                          return;

                        filter.stopWatching(function () { });
                        callbackFired = true;

                        if (code.length > 3) {

                          // console.log('Contract code deployed!');

                          contract.address = receipt.contractAddress;

                          // attach events and methods again after we have
                          addFunctionsToContract(contract);
                          addEventsToContract(contract);

                          // call callback for the second time
                          if (callback)
                            callback(null, contract);

                        } else {
                          if (callback)
                            callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                          else
                            throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                        }
                      });
                    }
                  });
                }
              }
            });
          };

          /**
           * Should be called to create new ContractFactory instance
           *
           * @method ContractFactory
           * @param {Array} abi
           */
          var ContractFactory = function (eth, abi) {
            this.eth = eth;
            this.abi = abi;

            /**
             * Should be called to create new contract on a blockchain
             *
             * @method new
             * @param {Any} contract constructor param1 (optional)
             * @param {Any} contract constructor param2 (optional)
             * @param {Object} contract transaction object (required)
             * @param {Function} callback
             * @returns {Contract} returns contract instance
             */
            this.new = function () {
              /*jshint maxcomplexity: 7 */

              var contract = new Contract(this.eth, this.abi);

              // parse arguments
              var options = {}; // required!
              var callback;

              var args = Array.prototype.slice.call(arguments);
              if (utils.isFunction(args[args.length - 1])) {
                callback = args.pop();
              }

              var last = args[args.length - 1];
              if (utils.isObject(last) && !utils.isArray(last)) {
                options = args.pop();
              }

              if (options.value > 0) {
                var constructorAbi = abi.filter(function (json) {
                  return json.type === 'constructor' && json.inputs.length === args.length;
                })[0] || {};

                if (!constructorAbi.payable) {
                  throw new Error('Cannot send value to non-payable constructor');
                }
              }

              var bytes = encodeConstructorParams(this.abi, args);
              options.data += bytes;

              if (callback) {

                // wait for the contract address and check if the code was deployed
                this.eth.sendTransaction(options, function (err, hash) {
                  if (err) {
                    callback(err);
                  } else {
                    // add the transaction hash
                    contract.transactionHash = hash;

                    // call callback for the first time
                    callback(null, contract);

                    checkForContractAddress(contract, callback);
                  }
                });
              } else {
                var hash = this.eth.sendTransaction(options);
                // add the transaction hash
                contract.transactionHash = hash;
                checkForContractAddress(contract);
              }

              return contract;
            };

            this.new.getData = this.getData.bind(this);
          };

          /**
           * Should be called to create new ContractFactory
           *
           * @method contract
           * @param {Array} abi
           * @returns {ContractFactory} new contract factory
           */
          //var contract = function (abi) {
          //return new ContractFactory(abi);
          //};



          /**
           * Should be called to get access to existing contract on a blockchain
           *
           * @method at
           * @param {Address} contract address (required)
           * @param {Function} callback {optional)
           * @returns {Contract} returns contract if no callback was passed,
           * otherwise calls callback function (err, contract)
           */
          ContractFactory.prototype.at = function (address, callback) {
            var contract = new Contract(this.eth, this.abi, address);

            // this functions are not part of prototype,
            // because we dont want to spoil the interface
            addFunctionsToContract(contract);
            addEventsToContract(contract);

            if (callback) {
              callback(null, contract);
            }
            return contract;
          };

          /**
           * Gets the data, which is data to deploy plus constructor params
           *
           * @method getData
           */
          ContractFactory.prototype.getData = function () {
            var options = {}; // required!
            var args = Array.prototype.slice.call(arguments);

            var last = args[args.length - 1];
            if (utils.isObject(last) && !utils.isArray(last)) {
              options = args.pop();
            }

            var bytes = encodeConstructorParams(this.abi, args);
            options.data += bytes;

            return options.data;
          };

          /**
           * Should be called to create new contract instance
           *
           * @method Contract
           * @param {Array} abi
           * @param {Address} contract address
           */
          var Contract = function (eth, abi, address) {
            this._eth = eth;
            this.transactionHash = null;
            this.address = address;
            this.abi = abi;
          };

          module.exports = ContractFactory;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\errors.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file errors.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          module.exports = {
            InvalidNumberOfSolidityArgs: function () {
              return new Error('Invalid number of arguments to Solidity function');
            },
            InvalidNumberOfRPCParams: function () {
              return new Error('Invalid number of input parameters to RPC method');
            },
            InvalidConnection: function (host) {
              return new Error('CONNECTION ERROR: Couldn\'t connect to node ' + host + '.');
            },
            InvalidProvider: function () {
              return new Error('Provider not set or invalid');
            },
            InvalidResponse: function (result) {
              var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
              return new Error(message);
            },
            ConnectionTimeout: function (ms) {
              return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
            }
          };

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\event.js", { "../solidity/coder": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\coder.js", "../utils/sha3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./filter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\filter.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", "./methods/watches": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\watches.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\event.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file event.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2014
           */

          var utils = require('../utils/utils');
          var coder = require('../solidity/coder');
          var formatters = require('./formatters');
          var sha3 = require('../utils/sha3');
          var Filter = require('./filter');
          var watches = require('./methods/watches');

          /**
           * This prototype should be used to create event filters
           */
          var SolidityEvent = function (requestManager, json, address) {
            this._requestManager = requestManager;
            this._params = json.inputs;
            this._name = utils.transformToFullName(json);
            this._address = address;
            this._anonymous = json.anonymous;
          };

          /**
           * Should be used to get filtered param types
           *
           * @method types
           * @param {Bool} decide if returned typed should be indexed
           * @return {Array} array of types
           */
          SolidityEvent.prototype.types = function (indexed) {
            return this._params.filter(function (i) {
              return i.indexed === indexed;
            }).map(function (i) {
              return i.type;
            });
          };

          /**
           * Should be used to get event display name
           *
           * @method displayName
           * @return {String} event display name
           */
          SolidityEvent.prototype.displayName = function () {
            return utils.extractDisplayName(this._name);
          };

          /**
           * Should be used to get event type name
           *
           * @method typeName
           * @return {String} event type name
           */
          SolidityEvent.prototype.typeName = function () {
            return utils.extractTypeName(this._name);
          };

          /**
           * Should be used to get event signature
           *
           * @method signature
           * @return {String} event signature
           */
          SolidityEvent.prototype.signature = function () {
            return sha3(this._name);
          };

          /**
           * Should be used to encode indexed params and options to one final object
           *
           * @method encode
           * @param {Object} indexed
           * @param {Object} options
           * @return {Object} everything combined together and encoded
           */
          SolidityEvent.prototype.encode = function (indexed, options) {
            indexed = indexed || {};
            options = options || {};
            var result = {};

            ['fromBlock', 'toBlock'].filter(function (f) {
              return options[f] !== undefined;
            }).forEach(function (f) {
              result[f] = formatters.inputBlockNumberFormatter(options[f]);
            });

            result.topics = [];

            result.address = this._address;
            if (!this._anonymous) {
              result.topics.push('0x' + this.signature());
            }

            var indexedTopics = this._params.filter(function (i) {
              return i.indexed === true;
            }).map(function (i) {
              var value = indexed[i.name];
              if (value === undefined || value === null) {
                return null;
              }

              if (utils.isArray(value)) {
                return value.map(function (v) {
                  return '0x' + coder.encodeParam(i.type, v);
                });
              }
              return '0x' + coder.encodeParam(i.type, value);
            });

            result.topics = result.topics.concat(indexedTopics);

            return result;
          };

          /**
           * Should be used to decode indexed params and options
           *
           * @method decode
           * @param {Object} data
           * @return {Object} result object with decoded indexed && not indexed params
           */
          SolidityEvent.prototype.decode = function (data) {

            data.data = data.data || '';
            data.topics = data.topics || [];


            var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
            var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
            var indexedParams = coder.decodeParams(this.types(true), indexedData);

            var notIndexedData = data.data.slice(2);
            var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

            var result = formatters.outputLogFormatter(data);
            result.event = this.displayName();
            result.address = data.address;

            result.args = this._params.reduce(function (acc, current) {
              acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
              return acc;
            }, {});

            delete result.data;
            delete result.topics;

            return result;
          };

          /**
           * Should be used to create new filter object from event
           *
           * @method execute
           * @param {Object} indexed
           * @param {Object} options
           * @return {Object} filter object
           */
          SolidityEvent.prototype.execute = function (indexed, options, callback) {

            if (utils.isFunction(arguments[arguments.length - 1])) {
              callback = arguments[arguments.length - 1];
              if (arguments.length === 2)
                options = null;
              if (arguments.length === 1) {
                options = null;
                indexed = {};
              }
            }

            var o = this.encode(indexed, options);
            var formatter = this.decode.bind(this);
            return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
          };

          /**
           * Should be used to attach event to contract object
           *
           * @method attachToContract
           * @param {Contract}
           */
          SolidityEvent.prototype.attachToContract = function (contract) {
            var execute = this.execute.bind(this);
            var displayName = this.displayName();
            if (!contract[displayName]) {
              contract[displayName] = execute;
            }
            contract[displayName][this.typeName()] = this.execute.bind(this, contract);
          };

          module.exports = SolidityEvent;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\extend.js", { "./../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", "./method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", "./property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\extend.js
        return function (require, module, exports) {
          var formatters = require('./formatters');
          var utils = require('./../utils/utils');
          var Method = require('./method');
          var Property = require('./property');

          // TODO: refactor, so the input params are not altered.
          // it's necessary to make same 'extension' work with multiple providers
          var extend = function (web3) {
            /* jshint maxcomplexity:5 */
            var ex = function (extension) {

              var extendedObject;
              if (extension.property) {
                if (!web3[extension.property]) {
                  web3[extension.property] = {};
                }
                extendedObject = web3[extension.property];
              } else {
                extendedObject = web3;
              }

              if (extension.methods) {
                extension.methods.forEach(function (method) {
                  method.attachToObject(extendedObject);
                  method.setRequestManager(web3._requestManager);
                });
              }

              if (extension.properties) {
                extension.properties.forEach(function (property) {
                  property.attachToObject(extendedObject);
                  property.setRequestManager(web3._requestManager);
                });
              }
            };

            ex.formatters = formatters;
            ex.utils = utils;
            ex.Method = Method;
            ex.Property = Property;

            return ex;
          };



          module.exports = extend;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\filter.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\filter.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file filter.js
           * @authors:
           *   Jeffrey Wilcke <jeff@ethdev.com>
           *   Marek Kotewicz <marek@ethdev.com>
           *   Marian Oancea <marian@ethdev.com>
           *   Fabian Vogelsteller <fabian@ethdev.com>
           *   Gav Wood <g@ethdev.com>
           * @date 2014
           */

          var formatters = require('./formatters');
          var utils = require('../utils/utils');

          /**
          * Converts a given topic to a hex string, but also allows null values.
          *
          * @param {Mixed} value
          * @return {String}
          */
          var toTopic = function (value) {

            if (value === null || typeof value === 'undefined')
              return null;

            value = String(value);

            if (value.indexOf('0x') === 0)
              return value;
            else
              return utils.fromUtf8(value);
          };

          /// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones
          /// @param should be string or object
          /// @returns options string or object
          var getOptions = function (options, type) {
            /*jshint maxcomplexity: 6 */

            if (utils.isString(options)) {
              return options;
            }

            options = options || {};


            switch (type) {
              case 'eth':

                // make sure topics, get converted to hex
                options.topics = options.topics || [];
                options.topics = options.topics.map(function (topic) {
                  return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
                });

                return {
                  topics: options.topics,
                  from: options.from,
                  to: options.to,
                  address: options.address,
                  fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),
                  toBlock: formatters.inputBlockNumberFormatter(options.toBlock)
                };
              case 'shh':
                return options;
            }
          };

          /**
          Adds the callback and sets up the methods, to iterate over the results.
          
          @method getLogsAtStart
          @param {Object} self
          @param {function} callback
          */
          var getLogsAtStart = function (self, callback) {
            // call getFilterLogs for the first watch callback start
            if (!utils.isString(self.options)) {
              self.get(function (err, messages) {
                // don't send all the responses to all the watches again... just to self one
                if (err) {
                  callback(err);
                }

                if (utils.isArray(messages)) {
                  messages.forEach(function (message) {
                    callback(null, message);
                  });
                }
              });
            }
          };

          /**
          Adds the callback and sets up the methods, to iterate over the results.
          
          @method pollFilter
          @param {Object} self
          */
          var pollFilter = function (self) {

            var onMessage = function (error, messages) {
              if (error) {
                return self.callbacks.forEach(function (callback) {
                  callback(error);
                });
              }

              if (utils.isArray(messages)) {
                messages.forEach(function (message) {
                  message = self.formatter ? self.formatter(message) : message;
                  self.callbacks.forEach(function (callback) {
                    callback(null, message);
                  });
                });
              }
            };

            self.requestManager.startPolling({
              method: self.implementation.poll.call,
              params: [self.filterId],
            }, self.filterId, onMessage, self.stopWatching.bind(self));

          };

          var Filter = function (options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {
            var self = this;
            var implementation = {};
            methods.forEach(function (method) {
              method.setRequestManager(requestManager);
              method.attachToObject(implementation);
            });
            this.requestManager = requestManager;
            this.options = getOptions(options, type);
            this.implementation = implementation;
            this.filterId = null;
            this.callbacks = [];
            this.getLogsCallbacks = [];
            this.pollFilters = [];
            this.formatter = formatter;
            this.implementation.newFilter(this.options, function (error, id) {
              if (error) {
                self.callbacks.forEach(function (cb) {
                  cb(error);
                });
                if (typeof filterCreationErrorCallback === 'function') {
                  filterCreationErrorCallback(error);
                }
              } else {
                self.filterId = id;

                // check if there are get pending callbacks as a consequence
                // of calling get() with filterId unassigned.
                self.getLogsCallbacks.forEach(function (cb) {
                  self.get(cb);
                });
                self.getLogsCallbacks = [];

                // get filter logs for the already existing watch calls
                self.callbacks.forEach(function (cb) {
                  getLogsAtStart(self, cb);
                });
                if (self.callbacks.length > 0)
                  pollFilter(self);

                // start to watch immediately
                if (typeof callback === 'function') {
                  return self.watch(callback);
                }
              }
            });

            return this;
          };

          Filter.prototype.watch = function (callback) {
            this.callbacks.push(callback);

            if (this.filterId) {
              getLogsAtStart(this, callback);
              pollFilter(this);
            }

            return this;
          };

          Filter.prototype.stopWatching = function (callback) {
            this.requestManager.stopPolling(this.filterId);
            this.callbacks = [];
            // remove filter async
            if (callback) {
              this.implementation.uninstallFilter(this.filterId, callback);
            } else {
              return this.implementation.uninstallFilter(this.filterId);
            }
          };

          Filter.prototype.get = function (callback) {
            var self = this;
            if (utils.isFunction(callback)) {
              if (this.filterId === null) {
                // If filterId is not set yet, call it back
                // when newFilter() assigns it.
                this.getLogsCallbacks.push(callback);
              } else {
                this.implementation.getLogs(this.filterId, function (err, res) {
                  if (err) {
                    callback(err);
                  } else {
                    callback(null, res.map(function (log) {
                      return self.formatter ? self.formatter(log) : log;
                    }));
                  }
                });
              }
            } else {
              if (this.filterId === null) {
                throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
              }
              var logs = this.implementation.getLogs(this.filterId);
              return logs.map(function (log) {
                return self.formatter ? self.formatter(log) : log;
              });
            }

            return this;
          };

          module.exports = Filter;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", { "../utils/config": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\config.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./iban": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\iban.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\formatters.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file formatters.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @author Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          'use strict';


          var utils = require('../utils/utils');
          var config = require('../utils/config');
          var Iban = require('./iban');

          /**
           * Should the format output to a big number
           *
           * @method outputBigNumberFormatter
           * @param {String|Number|BigNumber}
           * @returns {BigNumber} object
           */
          var outputBigNumberFormatter = function (number) {
            return utils.toBigNumber(number);
          };

          var isPredefinedBlockNumber = function (blockNumber) {
            return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
          };

          var inputDefaultBlockNumberFormatter = function (blockNumber) {
            if (blockNumber === undefined) {
              return config.defaultBlock;
            }
            return inputBlockNumberFormatter(blockNumber);
          };

          var inputBlockNumberFormatter = function (blockNumber) {
            if (blockNumber === undefined) {
              return undefined;
            } else if (isPredefinedBlockNumber(blockNumber)) {
              return blockNumber;
            }
            return utils.toHex(blockNumber);
          };

          /**
           * Formats the input of a transaction and converts all values to HEX
           *
           * @method inputCallFormatter
           * @param {Object} transaction options
           * @returns object
          */
          var inputCallFormatter = function (options) {

            options.from = options.from || config.defaultAccount;

            if (options.from) {
              options.from = inputAddressFormatter(options.from);
            }

            if (options.to) { // it might be contract creation
              options.to = inputAddressFormatter(options.to);
            }

            ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
              return options[key] !== undefined;
            }).forEach(function (key) {
              options[key] = utils.fromDecimal(options[key]);
            });

            return options;
          };

          /**
           * Formats the input of a transaction and converts all values to HEX
           *
           * @method inputTransactionFormatter
           * @param {Object} transaction options
           * @returns object
          */
          var inputTransactionFormatter = function (options) {

            options.from = options.from || config.defaultAccount;
            options.from = inputAddressFormatter(options.from);

            if (options.to) { // it might be contract creation
              options.to = inputAddressFormatter(options.to);
            }

            ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
              return options[key] !== undefined;
            }).forEach(function (key) {
              options[key] = utils.fromDecimal(options[key]);
            });

            return options;
          };

          /**
           * Formats the output of a transaction to its proper values
           *
           * @method outputTransactionFormatter
           * @param {Object} tx
           * @returns {Object}
          */
          var outputTransactionFormatter = function (tx) {
            if (tx.blockNumber !== null)
              tx.blockNumber = utils.toDecimal(tx.blockNumber);
            if (tx.transactionIndex !== null)
              tx.transactionIndex = utils.toDecimal(tx.transactionIndex);
            tx.nonce = utils.toDecimal(tx.nonce);
            tx.gas = utils.toDecimal(tx.gas);
            tx.gasPrice = utils.toBigNumber(tx.gasPrice);
            tx.value = utils.toBigNumber(tx.value);
            return tx;
          };

          /**
           * Formats the output of a transaction receipt to its proper values
           *
           * @method outputTransactionReceiptFormatter
           * @param {Object} receipt
           * @returns {Object}
          */
          var outputTransactionReceiptFormatter = function (receipt) {
            if (receipt.blockNumber !== null)
              receipt.blockNumber = utils.toDecimal(receipt.blockNumber);
            if (receipt.transactionIndex !== null)
              receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);
            receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);
            receipt.gasUsed = utils.toDecimal(receipt.gasUsed);

            if (utils.isArray(receipt.logs)) {
              receipt.logs = receipt.logs.map(function (log) {
                return outputLogFormatter(log);
              });
            }

            return receipt;
          };

          /**
           * Formats the output of a block to its proper values
           *
           * @method outputBlockFormatter
           * @param {Object} block
           * @returns {Object}
          */
          var outputBlockFormatter = function (block) {

            // transform to number
            block.gasLimit = utils.toDecimal(block.gasLimit);
            block.gasUsed = utils.toDecimal(block.gasUsed);
            block.size = utils.toDecimal(block.size);
            block.timestamp = utils.toDecimal(block.timestamp);
            if (block.number !== null)
              block.number = utils.toDecimal(block.number);

            block.difficulty = utils.toBigNumber(block.difficulty);
            block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);

            if (utils.isArray(block.transactions)) {
              block.transactions.forEach(function (item) {
                if (!utils.isString(item))
                  return outputTransactionFormatter(item);
              });
            }

            return block;
          };

          /**
           * Formats the output of a log
           *
           * @method outputLogFormatter
           * @param {Object} log object
           * @returns {Object} log
          */
          var outputLogFormatter = function (log) {
            if (log.blockNumber)
              log.blockNumber = utils.toDecimal(log.blockNumber);
            if (log.transactionIndex)
              log.transactionIndex = utils.toDecimal(log.transactionIndex);
            if (log.logIndex)
              log.logIndex = utils.toDecimal(log.logIndex);

            return log;
          };

          /**
           * Formats the input of a whisper post and converts all values to HEX
           *
           * @method inputPostFormatter
           * @param {Object} transaction object
           * @returns {Object}
          */
          var inputPostFormatter = function (post) {

            // post.payload = utils.toHex(post.payload);
            post.ttl = utils.fromDecimal(post.ttl);
            post.workToProve = utils.fromDecimal(post.workToProve);
            post.priority = utils.fromDecimal(post.priority);

            // fallback
            if (!utils.isArray(post.topics)) {
              post.topics = post.topics ? [post.topics] : [];
            }

            // format the following options
            post.topics = post.topics.map(function (topic) {
              // convert only if not hex
              return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
            });

            return post;
          };

          /**
           * Formats the output of a received post message
           *
           * @method outputPostFormatter
           * @param {Object}
           * @returns {Object}
           */
          var outputPostFormatter = function (post) {

            post.expiry = utils.toDecimal(post.expiry);
            post.sent = utils.toDecimal(post.sent);
            post.ttl = utils.toDecimal(post.ttl);
            post.workProved = utils.toDecimal(post.workProved);
            // post.payloadRaw = post.payload;
            // post.payload = utils.toAscii(post.payload);

            // if (utils.isJson(post.payload)) {
            //     post.payload = JSON.parse(post.payload);
            // }

            // format the following options
            if (!post.topics) {
              post.topics = [];
            }
            post.topics = post.topics.map(function (topic) {
              return utils.toAscii(topic);
            });

            return post;
          };

          var inputAddressFormatter = function (address) {
            var iban = new Iban(address);
            if (iban.isValid() && iban.isDirect()) {
              return '0x' + iban.address();
            } else if (utils.isStrictAddress(address)) {
              return address;
            } else if (utils.isAddress(address)) {
              return '0x' + address;
            }
            throw new Error('invalid address');
          };


          var outputSyncingFormatter = function (result) {
            if (!result) {
              return result;
            }

            result.startingBlock = utils.toDecimal(result.startingBlock);
            result.currentBlock = utils.toDecimal(result.currentBlock);
            result.highestBlock = utils.toDecimal(result.highestBlock);
            if (result.knownStates) {
              result.knownStates = utils.toDecimal(result.knownStates);
              result.pulledStates = utils.toDecimal(result.pulledStates);
            }

            return result;
          };

          module.exports = {
            inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
            inputBlockNumberFormatter: inputBlockNumberFormatter,
            inputCallFormatter: inputCallFormatter,
            inputTransactionFormatter: inputTransactionFormatter,
            inputAddressFormatter: inputAddressFormatter,
            inputPostFormatter: inputPostFormatter,
            outputBigNumberFormatter: outputBigNumberFormatter,
            outputTransactionFormatter: outputTransactionFormatter,
            outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
            outputBlockFormatter: outputBlockFormatter,
            outputLogFormatter: outputLogFormatter,
            outputPostFormatter: outputPostFormatter,
            outputSyncingFormatter: outputSyncingFormatter
          };


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\function.js", { "../solidity/coder": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\solidity\\coder.js", "../utils/sha3": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\sha3.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\function.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file function.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var coder = require('../solidity/coder');
          var utils = require('../utils/utils');
          var errors = require('./errors');
          var formatters = require('./formatters');
          var sha3 = require('../utils/sha3');

          /**
           * This prototype should be used to call/sendTransaction to solidity functions
           */
          var SolidityFunction = function (eth, json, address) {
            this._eth = eth;
            this._inputTypes = json.inputs.map(function (i) {
              return i.type;
            });
            this._outputTypes = json.outputs.map(function (i) {
              return i.type;
            });
            this._constant = (json.stateMutability === "view" || json.stateMutability === "pure" || json.constant);
            this._payable = (json.stateMutability === "payable" || json.payable);
            this._name = utils.transformToFullName(json);
            this._address = address;
          };

          SolidityFunction.prototype.extractCallback = function (args) {
            if (utils.isFunction(args[args.length - 1])) {
              return args.pop(); // modify the args array!
            }
          };

          SolidityFunction.prototype.extractDefaultBlock = function (args) {
            if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {
              return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
            }
          };

          /**
           * Should be called to check if the number of arguments is correct
           *
           * @method validateArgs
           * @param {Array} arguments
           * @throws {Error} if it is not
           */
          SolidityFunction.prototype.validateArgs = function (args) {
            var inputArgs = args.filter(function (a) {
              // filter the options object but not arguments that are arrays
              return !((utils.isObject(a) === true) &&
                (utils.isArray(a) === false) &&
                (utils.isBigNumber(a) === false)
              );
            });
            if (inputArgs.length !== this._inputTypes.length) {
              throw errors.InvalidNumberOfSolidityArgs();
            }
          };

          /**
           * Should be used to create payload from arguments
           *
           * @method toPayload
           * @param {Array} solidity function params
           * @param {Object} optional payload options
           */
          SolidityFunction.prototype.toPayload = function (args) {
            var options = {};
            if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {
              options = args[args.length - 1];
            }
            this.validateArgs(args);
            options.to = this._address;
            options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
            return options;
          };

          /**
           * Should be used to get function signature
           *
           * @method signature
           * @return {String} function signature
           */
          SolidityFunction.prototype.signature = function () {
            return sha3(this._name).slice(0, 8);
          };


          SolidityFunction.prototype.unpackOutput = function (output) {
            if (!output) {
              return;
            }

            output = output.length >= 2 ? output.slice(2) : output;
            var result = coder.decodeParams(this._outputTypes, output);
            return result.length === 1 ? result[0] : result;
          };

          /**
           * Calls a contract function.
           *
           * @method call
           * @param {...Object} Contract function arguments
           * @param {function} If the last argument is a function, the contract function
           *   call will be asynchronous, and the callback will be passed the
           *   error and result.
           * @return {String} output bytes
           */
          SolidityFunction.prototype.call = function () {
            var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
            var callback = this.extractCallback(args);
            var defaultBlock = this.extractDefaultBlock(args);
            var payload = this.toPayload(args);


            if (!callback) {
              var output = this._eth.call(payload, defaultBlock);
              return this.unpackOutput(output);
            }

            var self = this;
            this._eth.call(payload, defaultBlock, function (error, output) {
              if (error) return callback(error, null);

              var unpacked = null;
              try {
                unpacked = self.unpackOutput(output);
              }
              catch (e) {
                error = e;
              }

              callback(error, unpacked);
            });
          };

          /**
           * Should be used to sendTransaction to solidity function
           *
           * @method sendTransaction
           */
          SolidityFunction.prototype.sendTransaction = function () {
            var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
            var callback = this.extractCallback(args);
            var payload = this.toPayload(args);

            if (payload.value > 0 && !this._payable) {
              throw new Error('Cannot send value to non-payable function');
            }

            if (!callback) {
              return this._eth.sendTransaction(payload);
            }

            this._eth.sendTransaction(payload, callback);
          };

          /**
           * Should be used to estimateGas of solidity function
           *
           * @method estimateGas
           */
          SolidityFunction.prototype.estimateGas = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = this.extractCallback(args);
            var payload = this.toPayload(args);

            if (!callback) {
              return this._eth.estimateGas(payload);
            }

            this._eth.estimateGas(payload, callback);
          };

          /**
           * Return the encoded data of the call
           *
           * @method getData
           * @return {String} the encoded data
           */
          SolidityFunction.prototype.getData = function () {
            var args = Array.prototype.slice.call(arguments);
            var payload = this.toPayload(args);

            return payload.data;
          };

          /**
           * Should be used to get function display name
           *
           * @method displayName
           * @return {String} display name of the function
           */
          SolidityFunction.prototype.displayName = function () {
            return utils.extractDisplayName(this._name);
          };

          /**
           * Should be used to get function type name
           *
           * @method typeName
           * @return {String} type name of the function
           */
          SolidityFunction.prototype.typeName = function () {
            return utils.extractTypeName(this._name);
          };

          /**
           * Should be called to get rpc requests from solidity function
           *
           * @method request
           * @returns {Object}
           */
          SolidityFunction.prototype.request = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = this.extractCallback(args);
            var payload = this.toPayload(args);
            var format = this.unpackOutput.bind(this);

            return {
              method: this._constant ? 'eth_call' : 'eth_sendTransaction',
              callback: callback,
              params: [payload],
              format: format
            };
          };

          /**
           * Should be called to execute function
           *
           * @method execute
           */
          SolidityFunction.prototype.execute = function () {
            var transaction = !this._constant;

            // send transaction
            if (transaction) {
              return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
            }

            // call
            return this.call.apply(this, Array.prototype.slice.call(arguments));
          };

          /**
           * Should be called to attach function to contract
           *
           * @method attachToContract
           * @param {Contract}
           */
          SolidityFunction.prototype.attachToContract = function (contract) {
            var execute = this.execute.bind(this);
            execute.request = this.request.bind(this);
            Reflect.defineProperty(execute, 'call', this.call.bind(this));
            execute.sendTransaction = this.sendTransaction.bind(this);
            execute.estimateGas = this.estimateGas.bind(this);
            execute.getData = this.getData.bind(this);
            var displayName = this.displayName();
            if (!contract[displayName]) {
              contract[displayName] = execute;
            }
            contract[displayName][this.typeName()] = execute; // circular!!!!
          };

          module.exports = SolidityFunction;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\httpprovider.js", { "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "xhr2-cookies": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\index.js", "xmlhttprequest": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\browser-xhr.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\httpprovider.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              /*
                  This file is part of web3.js.
              
                  web3.js is free software: you can redistribute it and/or modify
                  it under the terms of the GNU Lesser General Public License as published by
                  the Free Software Foundation, either version 3 of the License, or
                  (at your option) any later version.
              
                  web3.js is distributed in the hope that it will be useful,
                  but WITHOUT ANY WARRANTY; without even the implied warranty of
                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                  GNU Lesser General Public License for more details.
              
                  You should have received a copy of the GNU Lesser General Public License
                  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
              */
              /** @file httpprovider.js
               * @authors:
               *   Marek Kotewicz <marek@ethdev.com>
               *   Marian Oancea <marian@ethdev.com>
               *   Fabian Vogelsteller <fabian@ethdev.com>
               * @date 2015
               */

              var errors = require('./errors');

              // workaround to use httpprovider in different envs

              // browser
              if (typeof window !== 'undefined' && window.XMLHttpRequest) {
                XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line
                // node
              } else {
                XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line
              }

              var XHR2 = require('xhr2-cookies').XMLHttpRequest; // jshint ignore: line

              /**
               * HttpProvider should be used to send rpc calls over http
               */
              var HttpProvider = function (host, timeout, user, password, headers) {
                this.host = host || 'http://localhost:8545';
                this.timeout = timeout || 0;
                this.user = user;
                this.password = password;
                this.headers = headers;
              };

              /**
               * Should be called to prepare new XMLHttpRequest
               *
               * @method prepareRequest
               * @param {Boolean} true if request should be async
               * @return {XMLHttpRequest} object
               */
              HttpProvider.prototype.prepareRequest = function (async) {
                var request;

                if (async) {
                  request = new XHR2();
                  request.timeout = this.timeout;
                } else {
                  request = new XMLHttpRequest();
                }
                request.withCredentials = true;

                request.open('POST', this.host, async);
                if (this.user && this.password) {
                  var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');
                  request.setRequestHeader('Authorization', auth);
                } request.setRequestHeader('Content-Type', 'application/json');
                if (this.headers) {
                  this.headers.forEach(function (header) {
                    request.setRequestHeader(header.name, header.value);
                  });
                }
                return request;
              };

              /**
               * Should be called to make sync request
               *
               * @method send
               * @param {Object} payload
               * @return {Object} result
               */
              HttpProvider.prototype.send = function (payload) {
                var request = this.prepareRequest(false);

                try {
                  request.send(JSON.stringify(payload));
                } catch (error) {
                  throw errors.InvalidConnection(this.host);
                }

                var result = request.responseText;

                try {
                  result = JSON.parse(result);
                } catch (e) {
                  throw errors.InvalidResponse(request.responseText);
                }

                return result;
              };

              /**
               * Should be used to make async request
               *
               * @method sendAsync
               * @param {Object} payload
               * @param {Function} callback triggered on end with (err, result)
               */
              HttpProvider.prototype.sendAsync = function (payload, callback) {
                var request = this.prepareRequest(true);

                request.onreadystatechange = function () {
                  if (request.readyState === 4 && request.timeout !== 1) {
                    var result = request.responseText;
                    var error = null;

                    try {
                      result = JSON.parse(result);
                    } catch (e) {
                      error = errors.InvalidResponse(request.responseText);
                    }

                    callback(error, result);
                  }
                };

                request.ontimeout = function () {
                  callback(errors.ConnectionTimeout(this.timeout));
                };

                try {
                  request.send(JSON.stringify(payload));
                } catch (error) {
                  callback(errors.InvalidConnection(this.host));
                }
              };

              /**
               * Synchronously tries to make Http request
               *
               * @method isConnected
               * @return {Boolean} returns true if request haven't failed. Otherwise false
               */
              HttpProvider.prototype.isConnected = function () {
                try {
                  this.send({
                    id: 9999999999,
                    jsonrpc: '2.0',
                    method: 'net_listening',
                    params: []
                  });
                  return true;
                } catch (e) {
                  return false;
                }
              };

              module.exports = HttpProvider;

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\iban.js", { "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\iban.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file iban.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var BigNumber = require('bignumber.js');

          var padLeft = function (string, bytes) {
            var result = string;
            while (result.length < bytes * 2) {
              result = '0' + result;
            }
            return result;
          };

          /**
           * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
           * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
           *
           * @method iso13616Prepare
           * @param {String} iban the IBAN
           * @returns {String} the prepared IBAN
           */
          var iso13616Prepare = function (iban) {
            var A = 'A'.charCodeAt(0);
            var Z = 'Z'.charCodeAt(0);

            iban = iban.toUpperCase();
            iban = iban.substr(4) + iban.substr(0, 4);

            return iban.split('').map(function (n) {
              var code = n.charCodeAt(0);
              if (code >= A && code <= Z) {
                // A = 10, B = 11, ... Z = 35
                return code - A + 10;
              } else {
                return n;
              }
            }).join('');
          };

          /**
           * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
           *
           * @method mod9710
           * @param {String} iban
           * @returns {Number}
           */
          var mod9710 = function (iban) {
            var remainder = iban,
              block;

            while (remainder.length > 2) {
              block = remainder.slice(0, 9);
              remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
            }

            return parseInt(remainder, 10) % 97;
          };

          /**
           * This prototype should be used to create iban object from iban correct string
           *
           * @param {String} iban
           */
          var Iban = function (iban) {
            this._iban = iban;
          };

          /**
           * This method should be used to create iban object from ethereum address
           *
           * @method fromAddress
           * @param {String} address
           * @return {Iban} the IBAN object
           */
          Iban.fromAddress = function (address) {
            var asBn = new BigNumber(address, 16);
            var base36 = asBn.toString(36);
            var padded = padLeft(base36, 15);
            return Iban.fromBban(padded.toUpperCase());
          };

          /**
           * Convert the passed BBAN to an IBAN for this country specification.
           * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
           * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
           *
           * @method fromBban
           * @param {String} bban the BBAN to convert to IBAN
           * @returns {Iban} the IBAN object
           */
          Iban.fromBban = function (bban) {
            var countryCode = 'XE';

            var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
            var checkDigit = ('0' + (98 - remainder)).slice(-2);

            return new Iban(countryCode + checkDigit + bban);
          };

          /**
           * Should be used to create IBAN object for given institution and identifier
           *
           * @method createIndirect
           * @param {Object} options, required options are "institution" and "identifier"
           * @return {Iban} the IBAN object
           */
          Iban.createIndirect = function (options) {
            return Iban.fromBban('ETH' + options.institution + options.identifier);
          };

          /**
           * Thos method should be used to check if given string is valid iban object
           *
           * @method isValid
           * @param {String} iban string
           * @return {Boolean} true if it is valid IBAN
           */
          Iban.isValid = function (iban) {
            var i = new Iban(iban);
            return i.isValid();
          };

          /**
           * Should be called to check if iban is correct
           *
           * @method isValid
           * @returns {Boolean} true if it is, otherwise false
           */
          Iban.prototype.isValid = function () {
            return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
              mod9710(iso13616Prepare(this._iban)) === 1;
          };

          /**
           * Should be called to check if iban number is direct
           *
           * @method isDirect
           * @returns {Boolean} true if it is, otherwise false
           */
          Iban.prototype.isDirect = function () {
            return this._iban.length === 34 || this._iban.length === 35;
          };

          /**
           * Should be called to check if iban number if indirect
           *
           * @method isIndirect
           * @returns {Boolean} true if it is, otherwise false
           */
          Iban.prototype.isIndirect = function () {
            return this._iban.length === 20;
          };

          /**
           * Should be called to get iban checksum
           * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
           *
           * @method checksum
           * @returns {String} checksum
           */
          Iban.prototype.checksum = function () {
            return this._iban.substr(2, 2);
          };

          /**
           * Should be called to get institution identifier
           * eg. XREG
           *
           * @method institution
           * @returns {String} institution identifier
           */
          Iban.prototype.institution = function () {
            return this.isIndirect() ? this._iban.substr(7, 4) : '';
          };

          /**
           * Should be called to get client identifier within institution
           * eg. GAVOFYORK
           *
           * @method client
           * @returns {String} client identifier
           */
          Iban.prototype.client = function () {
            return this.isIndirect() ? this._iban.substr(11) : '';
          };

          /**
           * Should be called to get client direct address
           *
           * @method address
           * @returns {String} client direct address
           */
          Iban.prototype.address = function () {
            if (this.isDirect()) {
              var base36 = this._iban.substr(4);
              var asBn = new BigNumber(base36, 36);
              return padLeft(asBn.toString(16), 20);
            }

            return '';
          };

          Iban.prototype.toString = function () {
            return this._iban;
          };

          module.exports = Iban;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\ipcprovider.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\ipcprovider.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file ipcprovider.js
           * @authors:
           *   Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          "use strict";

          var utils = require('../utils/utils');
          var errors = require('./errors');


          var IpcProvider = function (path, net) {
            var _this = this;
            this.responseCallbacks = {};
            this.path = path;

            this.connection = net.connect({ path: this.path });

            this.connection.on('error', function (e) {
              console.error('IPC Connection Error', e);
              _this._timeout();
            });

            this.connection.on('end', function () {
              _this._timeout();
            });


            // LISTEN FOR CONNECTION RESPONSES
            this.connection.on('data', function (data) {
              /*jshint maxcomplexity: 6 */

              _this._parseResponse(data.toString()).forEach(function (result) {

                var id = null;

                // get the id which matches the returned id
                if (utils.isArray(result)) {
                  result.forEach(function (load) {
                    if (_this.responseCallbacks[load.id])
                      id = load.id;
                  });
                } else {
                  id = result.id;
                }

                // fire the callback
                if (_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](null, result);
                  delete _this.responseCallbacks[id];
                }
              });
            });
          };

          /**
          Will parse the response and make an array out of it.
          
          @method _parseResponse
          @param {String} data
          */
          IpcProvider.prototype._parseResponse = function (data) {
            var _this = this,
              returnValues = [];

            // DE-CHUNKER
            var dechunkedData = data
              .replace(/\}[\n\r]?\{/g, '}|--|{') // }{
              .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
              .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
              .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
              .split('|--|');

            dechunkedData.forEach(function (data) {

              // prepend the last chunk
              if (_this.lastChunk)
                data = _this.lastChunk + data;

              var result = null;

              try {
                result = JSON.parse(data);

              } catch (e) {

                _this.lastChunk = data;

                // start timeout to cancel all requests
                clearTimeout(_this.lastChunkTimeout);
                _this.lastChunkTimeout = setTimeout(function () {
                  _this._timeout();
                  throw errors.InvalidResponse(data);
                }, 1000 * 15);

                return;
              }

              // cancel timeout and set chunk to null
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunk = null;

              if (result)
                returnValues.push(result);
            });

            return returnValues;
          };


          /**
          Get the adds a callback to the responseCallbacks object,
          which will be called if a response matching the response Id will arrive.
          
          @method _addResponseCallback
          */
          IpcProvider.prototype._addResponseCallback = function (payload, callback) {
            var id = payload.id || payload[0].id;
            var method = payload.method || payload[0].method;

            this.responseCallbacks[id] = callback;
            this.responseCallbacks[id].method = method;
          };

          /**
          Timeout all requests when the end/error event is fired
          
          @method _timeout
          */
          IpcProvider.prototype._timeout = function () {
            for (var key in this.responseCallbacks) {
              if (this.responseCallbacks.hasOwnProperty(key)) {
                this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
                delete this.responseCallbacks[key];
              }
            }
          };


          /**
          Check if the current connection is still valid.
          
          @method isConnected
          */
          IpcProvider.prototype.isConnected = function () {
            var _this = this;

            // try reconnect, when connection is gone
            if (!_this.connection.writable)
              _this.connection.connect({ path: _this.path });

            return !!this.connection.writable;
          };

          IpcProvider.prototype.send = function (payload) {

            if (this.connection.writeSync) {
              var result;

              // try reconnect, when connection is gone
              if (!this.connection.writable)
                this.connection.connect({ path: this.path });

              var data = this.connection.writeSync(JSON.stringify(payload));

              try {
                result = JSON.parse(data);
              } catch (e) {
                throw errors.InvalidResponse(data);
              }

              return result;

            } else {
              throw new Error('You tried to send "' + payload.method + '" synchronously. Synchronous requests are not supported by the IPC provider.');
            }
          };

          IpcProvider.prototype.sendAsync = function (payload, callback) {
            // try reconnect, when connection is gone
            if (!this.connection.writable)
              this.connection.connect({ path: this.path });


            this.connection.write(JSON.stringify(payload));
            this._addResponseCallback(payload, callback);
          };

          module.exports = IpcProvider;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\jsonrpc.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\jsonrpc.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file jsonrpc.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           *   Aaron Kumavis <aaron@kumavis.me>
           * @date 2015
           */

          // Initialize Jsonrpc as a simple object with utility functions.
          var Jsonrpc = {
            messageId: 0
          };

          /**
           * Should be called to valid json create payload object
           *
           * @method toPayload
           * @param {Function} method of jsonrpc call, required
           * @param {Array} params, an array of method params, optional
           * @returns {Object} valid jsonrpc payload object
           */
          Jsonrpc.toPayload = function (method, params) {
            if (!method)
              console.error('jsonrpc method should be specified!');

            // advance message ID
            Jsonrpc.messageId++;

            return {
              jsonrpc: '2.0',
              id: Jsonrpc.messageId,
              method: method,
              params: params || []
            };
          };

          /**
           * Should be called to check if jsonrpc response is valid
           *
           * @method isValidResponse
           * @param {Object}
           * @returns {Boolean} true if response is valid, otherwise false
           */
          Jsonrpc.isValidResponse = function (response) {
            return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

            function validateSingleMessage(message) {
              return !!message &&
                !message.error &&
                message.jsonrpc === '2.0' &&
                typeof message.id === 'number' &&
                message.result !== undefined; // only undefined is not valid json object
            }
          };

          /**
           * Should be called to create batch payload object
           *
           * @method toBatchPayload
           * @param {Array} messages, an array of objects with method (required) and params (optional) fields
           * @returns {Array} batch payload
           */
          Jsonrpc.toBatchPayload = function (messages) {
            return messages.map(function (message) {
              return Jsonrpc.toPayload(message.method, message.params);
            });
          };

          module.exports = Jsonrpc;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\method.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file method.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var utils = require('../utils/utils');
          var errors = require('./errors');

          var Method = function (options) {
            this.name = options.name;
            this.call = options.call;
            this.params = options.params || 0;
            this.inputFormatter = options.inputFormatter;
            this.outputFormatter = options.outputFormatter;
            this.requestManager = null;
          };

          Method.prototype.setRequestManager = function (rm) {
            this.requestManager = rm;
          };

          /**
           * Should be used to determine name of the jsonrpc method based on arguments
           *
           * @method getCall
           * @param {Array} arguments
           * @return {String} name of jsonrpc method
           */
          Method.prototype.getCall = function (args) {
            return utils.isFunction(this.call) ? this.call(args) : this.call;
          };

          /**
           * Should be used to extract callback from array of arguments. Modifies input param
           *
           * @method extractCallback
           * @param {Array} arguments
           * @return {Function|Null} callback, if exists
           */
          Method.prototype.extractCallback = function (args) {
            if (utils.isFunction(args[args.length - 1])) {
              return args.pop(); // modify the args array!
            }
          };

          /**
           * Should be called to check if the number of arguments is correct
           * 
           * @method validateArgs
           * @param {Array} arguments
           * @throws {Error} if it is not
           */
          Method.prototype.validateArgs = function (args) {
            if (args.length !== this.params) {
              throw errors.InvalidNumberOfRPCParams();
            }
          };

          /**
           * Should be called to format input args of method
           * 
           * @method formatInput
           * @param {Array}
           * @return {Array}
           */
          Method.prototype.formatInput = function (args) {
            if (!this.inputFormatter) {
              return args;
            }

            return this.inputFormatter.map(function (formatter, index) {
              return formatter ? formatter(args[index]) : args[index];
            });
          };

          /**
           * Should be called to format output(result) of method
           *
           * @method formatOutput
           * @param {Object}
           * @return {Object}
           */
          Method.prototype.formatOutput = function (result) {
            return this.outputFormatter && result ? this.outputFormatter(result) : result;
          };

          /**
           * Should create payload from given input args
           *
           * @method toPayload
           * @param {Array} args
           * @return {Object}
           */
          Method.prototype.toPayload = function (args) {
            var call = this.getCall(args);
            var callback = this.extractCallback(args);
            var params = this.formatInput(args);
            this.validateArgs(params);

            return {
              method: call,
              params: params,
              callback: callback
            };
          };

          Method.prototype.attachToObject = function (obj) {
            var func = this.buildCall();
            Reflect.defineProperty(func, 'call', { value: this.call })
            var name = this.name.split('.');
            if (name.length > 1) {
              obj[name[0]] = obj[name[0]] || {};
              obj[name[0]][name[1]] = func;
            } else {
              obj[name[0]] = func;
            }
          };

          Method.prototype.buildCall = function () {
            var method = this;
            var send = function () {
              var payload = method.toPayload(Array.prototype.slice.call(arguments));
              if (payload.callback) {
                return method.requestManager.sendAsync(payload, function (err, result) {
                  payload.callback(err, method.formatOutput(result));
                });
              }
              return method.formatOutput(method.requestManager.send(payload));
            };
            send.request = this.request.bind(this);
            return send;
          };

          /**
           * Should be called to create pure JSONRPC request which can be used in batch request
           *
           * @method request
           * @param {...} params
           * @return {Object} jsonrpc request
           */
          Method.prototype.request = function () {
            var payload = this.toPayload(Array.prototype.slice.call(arguments));
            payload.format = this.formatOutput.bind(this);
            return payload;
          };

          module.exports = Method;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\db.js", { "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\db.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file db.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var Method = require('../method');

          var DB = function (web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            methods().forEach(function (method) {
              method.attachToObject(self);
              method.setRequestManager(web3._requestManager);
            });
          };

          var methods = function () {
            var putString = new Method({
              name: 'putString',
              call: 'db_putString',
              params: 3
            });

            var getString = new Method({
              name: 'getString',
              call: 'db_getString',
              params: 2
            });

            var putHex = new Method({
              name: 'putHex',
              call: 'db_putHex',
              params: 3
            });

            var getHex = new Method({
              name: 'getHex',
              call: 'db_getHex',
              params: 2
            });

            return [
              putString, getString, putHex, getHex
            ];
          };

          module.exports = DB;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\eth.js", { "../../utils/config": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\config.js", "../../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "../contract": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\contract.js", "../filter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\filter.js", "../formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", "../iban": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\iban.js", "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", "../namereg": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\namereg.js", "../property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js", "../syncing": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\syncing.js", "../transfer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\transfer.js", "./watches": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\watches.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\eth.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file eth.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @author Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          "use strict";

          var formatters = require('../formatters');
          var utils = require('../../utils/utils');
          var Method = require('../method');
          var Property = require('../property');
          var c = require('../../utils/config');
          var Contract = require('../contract');
          var watches = require('./watches');
          var Filter = require('../filter');
          var IsSyncing = require('../syncing');
          var namereg = require('../namereg');
          var Iban = require('../iban');
          var transfer = require('../transfer');

          var blockCall = function (args) {
            return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
          };

          var transactionFromBlockCall = function (args) {
            return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
          };

          var uncleCall = function (args) {
            return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
          };

          var getBlockTransactionCountCall = function (args) {
            return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
          };

          var uncleCountCall = function (args) {
            return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
          };

          function Eth(web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            methods().forEach(function (method) {
              method.attachToObject(self);
              method.setRequestManager(self._requestManager);
            });

            properties().forEach(function (p) {
              p.attachToObject(self);
              p.setRequestManager(self._requestManager);
            });


            this.iban = Iban;
            this.sendIBANTransaction = transfer.bind(null, this);
          }

          Object.defineProperty(Eth.prototype, 'defaultBlock', {
            get: function () {
              return c.defaultBlock;
            },
            set: function (val) {
              c.defaultBlock = val;
              return val;
            }
          });

          Object.defineProperty(Eth.prototype, 'defaultAccount', {
            get: function () {
              return c.defaultAccount;
            },
            set: function (val) {
              c.defaultAccount = val;
              return val;
            }
          });

          var methods = function () {
            var getBalance = new Method({
              name: 'getBalance',
              call: 'eth_getBalance',
              params: 2,
              inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
              outputFormatter: formatters.outputBigNumberFormatter
            });

            var getStorageAt = new Method({
              name: 'getStorageAt',
              call: 'eth_getStorageAt',
              params: 3,
              inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
            });

            var getCode = new Method({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
            });

            var getBlock = new Method({
              name: 'getBlock',
              call: blockCall,
              params: 2,
              inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],
              outputFormatter: formatters.outputBlockFormatter
            });

            var getUncle = new Method({
              name: 'getUncle',
              call: uncleCall,
              params: 2,
              inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
              outputFormatter: formatters.outputBlockFormatter,

            });

            var getCompilers = new Method({
              name: 'getCompilers',
              call: 'eth_getCompilers',
              params: 0
            });

            var getBlockTransactionCount = new Method({
              name: 'getBlockTransactionCount',
              call: getBlockTransactionCountCall,
              params: 1,
              inputFormatter: [formatters.inputBlockNumberFormatter],
              outputFormatter: utils.toDecimal
            });

            var getBlockUncleCount = new Method({
              name: 'getBlockUncleCount',
              call: uncleCountCall,
              params: 1,
              inputFormatter: [formatters.inputBlockNumberFormatter],
              outputFormatter: utils.toDecimal
            });

            var getTransaction = new Method({
              name: 'getTransaction',
              call: 'eth_getTransactionByHash',
              params: 1,
              outputFormatter: formatters.outputTransactionFormatter
            });

            var getTransactionFromBlock = new Method({
              name: 'getTransactionFromBlock',
              call: transactionFromBlockCall,
              params: 2,
              inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
              outputFormatter: formatters.outputTransactionFormatter
            });

            var getTransactionReceipt = new Method({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              outputFormatter: formatters.outputTransactionReceiptFormatter
            });

            var getTransactionCount = new Method({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],
              outputFormatter: utils.toDecimal
            });

            var sendRawTransaction = new Method({
              name: 'sendRawTransaction',
              call: 'eth_sendRawTransaction',
              params: 1,
              inputFormatter: [null]
            });

            var sendTransaction = new Method({
              name: 'sendTransaction',
              call: 'eth_sendTransaction',
              params: 1,
              inputFormatter: [formatters.inputTransactionFormatter]
            });

            var signTransaction = new Method({
              name: 'signTransaction',
              call: 'eth_signTransaction',
              params: 1,
              inputFormatter: [formatters.inputTransactionFormatter]
            });

            var sign = new Method({
              name: 'sign',
              call: 'eth_sign',
              params: 2,
              inputFormatter: [formatters.inputAddressFormatter, null]
            });

            var call = new Method({
              name: 'call',
              call: 'eth_call',
              params: 2,
              inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
            });

            var estimateGas = new Method({
              name: 'estimateGas',
              call: 'eth_estimateGas',
              params: 1,
              inputFormatter: [formatters.inputCallFormatter],
              outputFormatter: utils.toDecimal
            });

            var compileSolidity = new Method({
              name: 'compile.solidity',
              call: 'eth_compileSolidity',
              params: 1
            });

            var compileLLL = new Method({
              name: 'compile.lll',
              call: 'eth_compileLLL',
              params: 1
            });

            var compileSerpent = new Method({
              name: 'compile.serpent',
              call: 'eth_compileSerpent',
              params: 1
            });

            var submitWork = new Method({
              name: 'submitWork',
              call: 'eth_submitWork',
              params: 3
            });

            var getWork = new Method({
              name: 'getWork',
              call: 'eth_getWork',
              params: 0
            });

            return [
              getBalance,
              getStorageAt,
              getCode,
              getBlock,
              getUncle,
              getCompilers,
              getBlockTransactionCount,
              getBlockUncleCount,
              getTransaction,
              getTransactionFromBlock,
              getTransactionReceipt,
              getTransactionCount,
              call,
              estimateGas,
              sendRawTransaction,
              signTransaction,
              sendTransaction,
              sign,
              compileSolidity,
              compileLLL,
              compileSerpent,
              submitWork,
              getWork
            ];
          };


          var properties = function () {
            return [
              new Property({
                name: 'coinbase',
                getter: 'eth_coinbase'
              }),
              new Property({
                name: 'mining',
                getter: 'eth_mining'
              }),
              new Property({
                name: 'hashrate',
                getter: 'eth_hashrate',
                outputFormatter: utils.toDecimal
              }),
              new Property({
                name: 'syncing',
                getter: 'eth_syncing',
                outputFormatter: formatters.outputSyncingFormatter
              }),
              new Property({
                name: 'gasPrice',
                getter: 'eth_gasPrice',
                outputFormatter: formatters.outputBigNumberFormatter
              }),
              new Property({
                name: 'accounts',
                getter: 'eth_accounts'
              }),
              new Property({
                name: 'blockNumber',
                getter: 'eth_blockNumber',
                outputFormatter: utils.toDecimal
              }),
              new Property({
                name: 'protocolVersion',
                getter: 'eth_protocolVersion'
              })
            ];
          };

          Eth.prototype.contract = function (abi) {
            var factory = new Contract(this, abi);
            return factory;
          };

          Eth.prototype.filter = function (options, callback, filterCreationErrorCallback) {
            return new Filter(options, 'eth', this._requestManager, watches.eth(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
          };

          Eth.prototype.namereg = function () {
            return this.contract(namereg.global.abi).at(namereg.global.address);
          };

          Eth.prototype.icapNamereg = function () {
            return this.contract(namereg.icap.abi).at(namereg.icap.address);
          };

          Eth.prototype.isSyncing = function (callback) {
            return new IsSyncing(this._requestManager, callback);
          };

          module.exports = Eth;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\net.js", { "../../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "../property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\net.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file eth.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var utils = require('../../utils/utils');
          var Property = require('../property');

          var Net = function (web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            properties().forEach(function (p) {
              p.attachToObject(self);
              p.setRequestManager(web3._requestManager);
            });
          };

          /// @returns an array of objects describing web3.eth api properties
          var properties = function () {
            return [
              new Property({
                name: 'listening',
                getter: 'net_listening'
              }),
              new Property({
                name: 'peerCount',
                getter: 'net_peerCount',
                outputFormatter: utils.toDecimal
              })
            ];
          };

          module.exports = Net;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\personal.js", { "../formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js", "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", "../property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\personal.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file eth.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @author Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          "use strict";

          var Method = require('../method');
          var Property = require('../property');
          var formatters = require('../formatters');

          function Personal(web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            methods().forEach(function (method) {
              method.attachToObject(self);
              method.setRequestManager(self._requestManager);
            });

            properties().forEach(function (p) {
              p.attachToObject(self);
              p.setRequestManager(self._requestManager);
            });
          }

          var methods = function () {
            var newAccount = new Method({
              name: 'newAccount',
              call: 'personal_newAccount',
              params: 1,
              inputFormatter: [null]
            });

            var importRawKey = new Method({
              name: 'importRawKey',
              call: 'personal_importRawKey',
              params: 2
            });

            var sign = new Method({
              name: 'sign',
              call: 'personal_sign',
              params: 3,
              inputFormatter: [null, formatters.inputAddressFormatter, null]
            });

            var ecRecover = new Method({
              name: 'ecRecover',
              call: 'personal_ecRecover',
              params: 2
            });

            var unlockAccount = new Method({
              name: 'unlockAccount',
              call: 'personal_unlockAccount',
              params: 3,
              inputFormatter: [formatters.inputAddressFormatter, null, null]
            });

            var sendTransaction = new Method({
              name: 'sendTransaction',
              call: 'personal_sendTransaction',
              params: 2,
              inputFormatter: [formatters.inputTransactionFormatter, null]
            });

            var lockAccount = new Method({
              name: 'lockAccount',
              call: 'personal_lockAccount',
              params: 1,
              inputFormatter: [formatters.inputAddressFormatter]
            });

            return [
              newAccount,
              importRawKey,
              unlockAccount,
              ecRecover,
              sign,
              sendTransaction,
              lockAccount
            ];
          };

          var properties = function () {
            return [
              new Property({
                name: 'listAccounts',
                getter: 'personal_listAccounts'
              })
            ];
          };


          module.exports = Personal;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\shh.js", { "../filter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\filter.js", "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", "./watches": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\watches.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\shh.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file shh.js
           * @authors:
           *   Fabian Vogelsteller <fabian@ethereum.org>
           *   Marek Kotewicz <marek@ethcore.io>
           * @date 2017
           */

          var Method = require('../method');
          var Filter = require('../filter');
          var watches = require('./watches');

          var Shh = function (web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            methods().forEach(function (method) {
              method.attachToObject(self);
              method.setRequestManager(self._requestManager);
            });
          };

          Shh.prototype.newMessageFilter = function (options, callback, filterCreationErrorCallback) {
            return new Filter(options, 'shh', this._requestManager, watches.shh(), null, callback, filterCreationErrorCallback);
          };

          var methods = function () {

            return [
              new Method({
                name: 'version',
                call: 'shh_version',
                params: 0
              }),
              new Method({
                name: 'info',
                call: 'shh_info',
                params: 0
              }),
              new Method({
                name: 'setMaxMessageSize',
                call: 'shh_setMaxMessageSize',
                params: 1
              }),
              new Method({
                name: 'setMinPoW',
                call: 'shh_setMinPoW',
                params: 1
              }),
              new Method({
                name: 'markTrustedPeer',
                call: 'shh_markTrustedPeer',
                params: 1
              }),
              new Method({
                name: 'newKeyPair',
                call: 'shh_newKeyPair',
                params: 0
              }),
              new Method({
                name: 'addPrivateKey',
                call: 'shh_addPrivateKey',
                params: 1
              }),
              new Method({
                name: 'deleteKeyPair',
                call: 'shh_deleteKeyPair',
                params: 1
              }),
              new Method({
                name: 'hasKeyPair',
                call: 'shh_hasKeyPair',
                params: 1
              }),
              new Method({
                name: 'getPublicKey',
                call: 'shh_getPublicKey',
                params: 1
              }),
              new Method({
                name: 'getPrivateKey',
                call: 'shh_getPrivateKey',
                params: 1
              }),
              new Method({
                name: 'newSymKey',
                call: 'shh_newSymKey',
                params: 0
              }),
              new Method({
                name: 'addSymKey',
                call: 'shh_addSymKey',
                params: 1
              }),
              new Method({
                name: 'generateSymKeyFromPassword',
                call: 'shh_generateSymKeyFromPassword',
                params: 1
              }),
              new Method({
                name: 'hasSymKey',
                call: 'shh_hasSymKey',
                params: 1
              }),
              new Method({
                name: 'getSymKey',
                call: 'shh_getSymKey',
                params: 1
              }),
              new Method({
                name: 'deleteSymKey',
                call: 'shh_deleteSymKey',
                params: 1
              }),

              // subscribe and unsubscribe missing

              new Method({
                name: 'post',
                call: 'shh_post',
                params: 1,
                inputFormatter: [null]
              })
            ];
          };

          module.exports = Shh;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\swarm.js", { "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js", "../property": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\swarm.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file bzz.js
           * @author Alex Beregszaszi <alex@rtfs.hu>
           * @date 2016
           *
           * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33
           */

          "use strict";

          var Method = require('../method');
          var Property = require('../property');

          function Swarm(web3) {
            this._requestManager = web3._requestManager;

            var self = this;

            methods().forEach(function (method) {
              method.attachToObject(self);
              method.setRequestManager(self._requestManager);
            });

            properties().forEach(function (p) {
              p.attachToObject(self);
              p.setRequestManager(self._requestManager);
            });
          }

          var methods = function () {
            var blockNetworkRead = new Method({
              name: 'blockNetworkRead',
              call: 'bzz_blockNetworkRead',
              params: 1,
              inputFormatter: [null]
            });

            var syncEnabled = new Method({
              name: 'syncEnabled',
              call: 'bzz_syncEnabled',
              params: 1,
              inputFormatter: [null]
            });

            var swapEnabled = new Method({
              name: 'swapEnabled',
              call: 'bzz_swapEnabled',
              params: 1,
              inputFormatter: [null]
            });

            var download = new Method({
              name: 'download',
              call: 'bzz_download',
              params: 2,
              inputFormatter: [null, null]
            });

            var upload = new Method({
              name: 'upload',
              call: 'bzz_upload',
              params: 2,
              inputFormatter: [null, null]
            });

            var retrieve = new Method({
              name: 'retrieve',
              call: 'bzz_retrieve',
              params: 1,
              inputFormatter: [null]
            });

            var store = new Method({
              name: 'store',
              call: 'bzz_store',
              params: 2,
              inputFormatter: [null, null]
            });

            var get = new Method({
              name: 'get',
              call: 'bzz_get',
              params: 1,
              inputFormatter: [null]
            });

            var put = new Method({
              name: 'put',
              call: 'bzz_put',
              params: 2,
              inputFormatter: [null, null]
            });

            var modify = new Method({
              name: 'modify',
              call: 'bzz_modify',
              params: 4,
              inputFormatter: [null, null, null, null]
            });

            return [
              blockNetworkRead,
              syncEnabled,
              swapEnabled,
              download,
              upload,
              retrieve,
              store,
              get,
              put,
              modify
            ];
          };

          var properties = function () {
            return [
              new Property({
                name: 'hive',
                getter: 'bzz_hive'
              }),
              new Property({
                name: 'info',
                getter: 'bzz_info'
              })
            ];
          };


          module.exports = Swarm;

        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\methods\\watches.js", { "../method": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\method.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\methods\watches.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file watches.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var Method = require('../method');

          /// @returns an array of objects describing web3.eth.filter api methods
          var eth = function () {
            var newFilterCall = function (args) {
              var type = args[0];

              switch (type) {
                case 'latest':
                  args.shift();
                  this.params = 0;
                  return 'eth_newBlockFilter';
                case 'pending':
                  args.shift();
                  this.params = 0;
                  return 'eth_newPendingTransactionFilter';
                default:
                  return 'eth_newFilter';
              }
            };

            var newFilter = new Method({
              name: 'newFilter',
              call: newFilterCall,
              params: 1
            });

            var uninstallFilter = new Method({
              name: 'uninstallFilter',
              call: 'eth_uninstallFilter',
              params: 1
            });

            var getLogs = new Method({
              name: 'getLogs',
              call: 'eth_getFilterLogs',
              params: 1
            });

            var poll = new Method({
              name: 'poll',
              call: 'eth_getFilterChanges',
              params: 1
            });

            return [
              newFilter,
              uninstallFilter,
              getLogs,
              poll
            ];
          };

          /// @returns an array of objects describing web3.shh.watch api methods
          var shh = function () {

            return [
              new Method({
                name: 'newFilter',
                call: 'shh_newMessageFilter',
                params: 1
              }),
              new Method({
                name: 'uninstallFilter',
                call: 'shh_deleteMessageFilter',
                params: 1
              }),
              new Method({
                name: 'getLogs',
                call: 'shh_getFilterMessages',
                params: 1
              }),
              new Method({
                name: 'poll',
                call: 'shh_getFilterMessages',
                params: 1
              })
            ];
          };

          module.exports = {
            eth: eth,
            shh: shh
          };


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\namereg.js", { "../contracts/GlobalRegistrar.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\GlobalRegistrar.json", "../contracts/ICAPRegistrar.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\ICAPRegistrar.json" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\namereg.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file namereg.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');
          var icapRegistrarAbi = require('../contracts/ICAPRegistrar.json');

          var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';
          var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';

          module.exports = {
            global: {
              abi: globalRegistrarAbi,
              address: globalNameregAddress
            },
            icap: {
              abi: icapRegistrarAbi,
              address: icapNameregAddress
            }
          };


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\property.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\property.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /**
           * @file property.js
           * @author Fabian Vogelsteller <fabian@frozeman.de>
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var utils = require('../utils/utils');

          var Property = function (options) {
            this.name = options.name;
            this.getter = options.getter;
            this.setter = options.setter;
            this.outputFormatter = options.outputFormatter;
            this.inputFormatter = options.inputFormatter;
            this.requestManager = null;
          };

          Property.prototype.setRequestManager = function (rm) {
            this.requestManager = rm;
          };

          /**
           * Should be called to format input args of method
           *
           * @method formatInput
           * @param {Array}
           * @return {Array}
           */
          Property.prototype.formatInput = function (arg) {
            return this.inputFormatter ? this.inputFormatter(arg) : arg;
          };

          /**
           * Should be called to format output(result) of method
           *
           * @method formatOutput
           * @param {Object}
           * @return {Object}
           */
          Property.prototype.formatOutput = function (result) {
            return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;
          };

          /**
           * Should be used to extract callback from array of arguments. Modifies input param
           *
           * @method extractCallback
           * @param {Array} arguments
           * @return {Function|Null} callback, if exists
           */
          Property.prototype.extractCallback = function (args) {
            if (utils.isFunction(args[args.length - 1])) {
              return args.pop(); // modify the args array!
            }
          };


          /**
           * Should attach function to method
           *
           * @method attachToObject
           * @param {Object}
           * @param {Function}
           */
          Property.prototype.attachToObject = function (obj) {
            var proto = {
              get: this.buildGet(),
              enumerable: true
            };

            var names = this.name.split('.');
            var name = names[0];
            if (names.length > 1) {
              obj[names[0]] = obj[names[0]] || {};
              obj = obj[names[0]];
              name = names[1];
            }

            Object.defineProperty(obj, name, proto);
            obj[asyncGetterName(name)] = this.buildAsyncGet();
          };

          var asyncGetterName = function (name) {
            return 'get' + name.charAt(0).toUpperCase() + name.slice(1);
          };

          Property.prototype.buildGet = function () {
            var property = this;
            return function get() {
              return property.formatOutput(property.requestManager.send({
                method: property.getter
              }));
            };
          };

          Property.prototype.buildAsyncGet = function () {
            var property = this;
            var get = function (callback) {
              property.requestManager.sendAsync({
                method: property.getter
              }, function (err, result) {
                callback(err, property.formatOutput(result));
              });
            };
            get.request = this.request.bind(this);
            return get;
          };

          /**
           * Should be called to create pure JSONRPC request which can be used in batch request
           *
           * @method request
           * @param {...} params
           * @return {Object} jsonrpc request
           */
          Property.prototype.request = function () {
            var payload = {
              method: this.getter,
              params: [],
              callback: this.extractCallback(Array.prototype.slice.call(arguments))
            };
            payload.format = this.formatOutput.bind(this);
            return payload;
          };

          module.exports = Property;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\requestmanager.js", { "../utils/config": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\config.js", "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\errors.js", "./jsonrpc": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\jsonrpc.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\requestmanager.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file requestmanager.js
           * @author Jeffrey Wilcke <jeff@ethdev.com>
           * @author Marek Kotewicz <marek@ethdev.com>
           * @author Marian Oancea <marian@ethdev.com>
           * @author Fabian Vogelsteller <fabian@ethdev.com>
           * @author Gav Wood <g@ethdev.com>
           * @date 2014
           */

          var Jsonrpc = require('./jsonrpc');
          var utils = require('../utils/utils');
          var c = require('../utils/config');
          var errors = require('./errors');

          /**
           * It's responsible for passing messages to providers
           * It's also responsible for polling the ethereum node for incoming messages
           * Default poll timeout is 1 second
           * Singleton
           */
          var RequestManager = function (provider) {
            this.provider = provider;
            this.polls = {};
            this.timeout = null;
          };

          /**
           * Should be used to synchronously send request
           *
           * @method send
           * @param {Object} data
           * @return {Object}
           */
          RequestManager.prototype.send = function (data) {
            if (!this.provider) {
              console.error(errors.InvalidProvider());
              return null;
            }

            var payload = Jsonrpc.toPayload(data.method, data.params);
            var result = this.provider.send(payload);

            if (!Jsonrpc.isValidResponse(result)) {
              throw errors.InvalidResponse(result);
            }

            return result.result;
          };

          /**
           * Should be used to asynchronously send request
           *
           * @method sendAsync
           * @param {Object} data
           * @param {Function} callback
           */
          RequestManager.prototype.sendAsync = function (data, callback) {
            if (!this.provider) {
              return callback(errors.InvalidProvider());
            }

            var payload = Jsonrpc.toPayload(data.method, data.params);
            this.provider.sendAsync(payload, function (err, result) {
              if (err) {
                return callback(err);
              }

              if (!Jsonrpc.isValidResponse(result)) {
                return callback(errors.InvalidResponse(result));
              }

              callback(null, result.result);
            });
          };

          /**
           * Should be called to asynchronously send batch request
           *
           * @method sendBatch
           * @param {Array} batch data
           * @param {Function} callback
           */
          RequestManager.prototype.sendBatch = function (data, callback) {
            if (!this.provider) {
              return callback(errors.InvalidProvider());
            }

            var payload = Jsonrpc.toBatchPayload(data);

            this.provider.sendAsync(payload, function (err, results) {
              if (err) {
                return callback(err);
              }

              if (!utils.isArray(results)) {
                return callback(errors.InvalidResponse(results));
              }

              callback(err, results);
            });
          };

          /**
           * Should be used to set provider of request manager
           *
           * @method setProvider
           * @param {Object}
           */
          RequestManager.prototype.setProvider = function (p) {
            this.provider = p;
          };

          /**
           * Should be used to start polling
           *
           * @method startPolling
           * @param {Object} data
           * @param {Number} pollId
           * @param {Function} callback
           * @param {Function} uninstall
           *
           * @todo cleanup number of params
           */
          RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {
            this.polls[pollId] = { data: data, id: pollId, callback: callback, uninstall: uninstall };


            // start polling
            if (!this.timeout) {
              this.poll();
            }
          };

          /**
           * Should be used to stop polling for filter with given id
           *
           * @method stopPolling
           * @param {Number} pollId
           */
          RequestManager.prototype.stopPolling = function (pollId) {
            delete this.polls[pollId];

            // stop polling
            if (Object.keys(this.polls).length === 0 && this.timeout) {
              clearTimeout(this.timeout);
              this.timeout = null;
            }
          };

          /**
           * Should be called to reset the polling mechanism of the request manager
           *
           * @method reset
           */
          RequestManager.prototype.reset = function (keepIsSyncing) {
            /*jshint maxcomplexity:5 */

            for (var key in this.polls) {
              // remove all polls, except sync polls,
              // they need to be removed manually by calling syncing.stopWatching()
              if (!keepIsSyncing || key.indexOf('syncPoll_') === -1) {
                this.polls[key].uninstall();
                delete this.polls[key];
              }
            }

            // stop polling
            if (Object.keys(this.polls).length === 0 && this.timeout) {
              clearTimeout(this.timeout);
              this.timeout = null;
            }
          };

          /**
           * Should be called to poll for changes on filter with given id
           *
           * @method poll
           */
          RequestManager.prototype.poll = function () {
            /*jshint maxcomplexity: 6 */
            this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);

            if (Object.keys(this.polls).length === 0) {
              return;
            }

            if (!this.provider) {
              console.error(errors.InvalidProvider());
              return;
            }

            var pollsData = [];
            var pollsIds = [];
            for (var key in this.polls) {
              pollsData.push(this.polls[key].data);
              pollsIds.push(key);
            }

            if (pollsData.length === 0) {
              return;
            }

            var payload = Jsonrpc.toBatchPayload(pollsData);

            // map the request id to they poll id
            var pollsIdMap = {};
            payload.forEach(function (load, index) {
              pollsIdMap[load.id] = pollsIds[index];
            });


            var self = this;
            this.provider.sendAsync(payload, function (error, results) {


              // TODO: console log?
              if (error) {
                return;
              }

              if (!utils.isArray(results)) {
                throw errors.InvalidResponse(results);
              }
              results.map(function (result) {
                var id = pollsIdMap[result.id];

                // make sure the filter is still installed after arrival of the request
                if (self.polls[id]) {
                  result.callback = self.polls[id].callback;
                  return result;
                } else
                  return false;
              }).filter(function (result) {
                return !!result;
              }).filter(function (result) {
                var valid = Jsonrpc.isValidResponse(result);
                if (!valid) {
                  result.callback(errors.InvalidResponse(result));
                }
                return valid;
              }).forEach(function (result) {
                result.callback(null, result.result);
              });
            });
          };

          module.exports = RequestManager;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\settings.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\settings.js
        return function (require, module, exports) {


          var Settings = function () {
            this.defaultBlock = 'latest';
            this.defaultAccount = undefined;
          };

          module.exports = Settings;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\syncing.js", { "../utils/utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\utils\\utils.js", "./formatters": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\formatters.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\syncing.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** @file syncing.js
           * @authors:
           *   Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          var formatters = require('./formatters');
          var utils = require('../utils/utils');

          var count = 1;

          /**
          Adds the callback and sets up the methods, to iterate over the results.
          
          @method pollSyncing
          @param {Object} self
          */
          var pollSyncing = function (self) {

            var onMessage = function (error, sync) {
              if (error) {
                return self.callbacks.forEach(function (callback) {
                  callback(error);
                });
              }

              if (utils.isObject(sync) && sync.startingBlock)
                sync = formatters.outputSyncingFormatter(sync);

              self.callbacks.forEach(function (callback) {
                if (self.lastSyncState !== sync) {

                  // call the callback with true first so the app can stop anything, before receiving the sync data
                  if (!self.lastSyncState && utils.isObject(sync))
                    callback(null, true);

                  // call on the next CPU cycle, so the actions of the sync stop can be processes first
                  setTimeout(function () {
                    callback(null, sync);
                  }, 0);

                  self.lastSyncState = sync;
                }
              });
            };

            self.requestManager.startPolling({
              method: 'eth_syncing',
              params: [],
            }, self.pollId, onMessage, self.stopWatching.bind(self));

          };

          var IsSyncing = function (requestManager, callback) {
            this.requestManager = requestManager;
            this.pollId = 'syncPoll_' + count++;
            this.callbacks = [];
            this.addCallback(callback);
            this.lastSyncState = false;
            pollSyncing(this);

            return this;
          };

          IsSyncing.prototype.addCallback = function (callback) {
            if (callback)
              this.callbacks.push(callback);
            return this;
          };

          IsSyncing.prototype.stopWatching = function () {
            this.requestManager.stopPolling(this.pollId);
            this.callbacks = [];
          };

          module.exports = IsSyncing;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\transfer.js", { "../contracts/SmartExchange.json": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\contracts\\SmartExchange.json", "./iban": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\lib\\web3\\iban.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\lib\web3\transfer.js
        return function (require, module, exports) {
          /*
              This file is part of web3.js.
          
              web3.js is free software: you can redistribute it and/or modify
              it under the terms of the GNU Lesser General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.
          
              web3.js is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU Lesser General Public License for more details.
          
              You should have received a copy of the GNU Lesser General Public License
              along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
          */
          /** 
           * @file transfer.js
           * @author Marek Kotewicz <marek@ethdev.com>
           * @date 2015
           */

          var Iban = require('./iban');
          var exchangeAbi = require('../contracts/SmartExchange.json');

          /**
           * Should be used to make Iban transfer
           *
           * @method transfer
           * @param {String} from
           * @param {String} to iban
           * @param {Value} value to be tranfered
           * @param {Function} callback, callback
           */
          var transfer = function (eth, from, to, value, callback) {
            var iban = new Iban(to);
            if (!iban.isValid()) {
              throw new Error('invalid iban address');
            }

            if (iban.isDirect()) {
              return transferToAddress(eth, from, iban.address(), value, callback);
            }

            if (!callback) {
              var address = eth.icapNamereg().addr(iban.institution());
              return deposit(eth, from, address, value, iban.client());
            }

            eth.icapNamereg().addr(iban.institution(), function (err, address) {
              return deposit(eth, from, address, value, iban.client(), callback);
            });

          };

          /**
           * Should be used to transfer funds to certain address
           *
           * @method transferToAddress
           * @param {String} from
           * @param {String} to
           * @param {Value} value to be tranfered
           * @param {Function} callback, callback
           */
          var transferToAddress = function (eth, from, to, value, callback) {
            return eth.sendTransaction({
              address: to,
              from: from,
              value: value
            }, callback);
          };

          /**
           * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)
           *
           * @method deposit
           * @param {String} from
           * @param {String} to
           * @param {Value} value to be transfered
           * @param {String} client unique identifier
           * @param {Function} callback, callback
           */
          var deposit = function (eth, from, to, value, client, callback) {
            var abi = exchangeAbi;
            return eth.contract(abi).at(to).deposit(client, {
              from: from,
              value: value
            }, callback);
          };

          module.exports = transfer;


        };
      };
    }
  }, { package: "@metamask/controllers>web3", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\bignumber.js\\bignumber.js", { "crypto": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\crypto-browserify\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\node_modules\bignumber.js\bignumber.js
        return function (require, module, exports) {
          /*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */

          ; (function (global) {
            'use strict';

            /*
              bignumber.js v2.0.7
              A JavaScript library for arbitrary-precision arithmetic.
              https://github.com/MikeMcl/bignumber.js
              Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
              MIT Expat Licence
            */


            var BigNumber, crypto, parseNumeric,
              isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
              mathceil = Math.ceil,
              mathfloor = Math.floor,
              notBool = ' not a boolean or binary digit',
              roundingMode = 'rounding mode',
              tooManyDigits = 'number type has more than 15 significant digits',
              ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
              BASE = 1e14,
              LOG_BASE = 14,
              MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
              // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
              POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
              SQRT_BASE = 1e7,

              /*
               * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
               * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
               * exception is thrown (if ERRORS is true).
               */
              MAX = 1E9;                                   // 0 to MAX_INT32


            /*
             * Create and return a BigNumber constructor.
             */
            function another(configObj) {
              var div,

                // id tracks the caller function, so its name can be included in error messages.
                id = 0,
                P = BigNumber.prototype,
                ONE = new BigNumber(1),


                /********************************* EDITABLE DEFAULTS **********************************/


                /*
                 * The default values below must be integers within the inclusive ranges stated.
                 * The values can also be changed at run-time using BigNumber.config.
                 */

                // The maximum number of decimal places for operations involving division.
                DECIMAL_PLACES = 20,                     // 0 to MAX

                /*
                 * The rounding mode used when rounding to the above decimal places, and when using
                 * toExponential, toFixed, toFormat and toPrecision, and round (default value).
                 * UP         0 Away from zero.
                 * DOWN       1 Towards zero.
                 * CEIL       2 Towards +Infinity.
                 * FLOOR      3 Towards -Infinity.
                 * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                 * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                 * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                 * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                 * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                 */
                ROUNDING_MODE = 4,                       // 0 to 8

                // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                // The exponent value at and beneath which toString returns exponential notation.
                // Number type: -7
                TO_EXP_NEG = -7,                         // 0 to -MAX

                // The exponent value at and above which toString returns exponential notation.
                // Number type: 21
                TO_EXP_POS = 21,                         // 0 to MAX

                // RANGE : [MIN_EXP, MAX_EXP]

                // The minimum exponent value, beneath which underflow to zero occurs.
                // Number type: -324  (5e-324)
                MIN_EXP = -1e7,                          // -1 to -MAX

                // The maximum exponent value, above which overflow to Infinity occurs.
                // Number type:  308  (1.7976931348623157e+308)
                // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
                MAX_EXP = 1e7,                           // 1 to MAX

                // Whether BigNumber Errors are ever thrown.
                ERRORS = true,                           // true or false

                // Change to intValidatorNoErrors if ERRORS is false.
                isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

                // Whether to use cryptographically-secure random number generation, if available.
                CRYPTO = false,                          // true or false

                /*
                 * The modulo mode used when calculating the modulus: a mod n.
                 * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                 * The remainder (r) is calculated as: r = a - n * q.
                 *
                 * UP        0 The remainder is positive if the dividend is negative, else is negative.
                 * DOWN      1 The remainder has the same sign as the dividend.
                 *             This modulo mode is commonly known as 'truncated division' and is
                 *             equivalent to (a % n) in JavaScript.
                 * FLOOR     3 The remainder has the same sign as the divisor (Python %).
                 * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                 * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                 *             The remainder is always positive.
                 *
                 * The truncated division, floored division, Euclidian division and IEEE 754 remainder
                 * modes are commonly used for the modulus operation.
                 * Although the other rounding modes can also be used, they may not give useful results.
                 */
                MODULO_MODE = 1,                         // 0 to 9

                // The maximum number of significant digits of the result of the toPower operation.
                // If POW_PRECISION is 0, there will be unlimited significant digits.
                POW_PRECISION = 100,                     // 0 to MAX

                // The format specification used by the BigNumber.prototype.toFormat method.
                FORMAT = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',      // non-breaking space
                  fractionGroupSize: 0
                };


              /******************************************************************************************/


              // CONSTRUCTOR


              /*
               * The BigNumber constructor and exported function.
               * Create and return a new instance of a BigNumber object.
               *
               * n {number|string|BigNumber} A numeric value.
               * [b] {number} The base of n. Integer, 2 to 64 inclusive.
               */
              function BigNumber(n, b) {
                var c, e, i, num, len, str,
                  x = this;

                // Enable constructor usage without new.
                if (!(x instanceof BigNumber)) {

                  // 'BigNumber() constructor call without new: {n}'
                  if (ERRORS) raise(26, 'constructor call without new', n);
                  return new BigNumber(n, b);
                }

                // 'new BigNumber() base not an integer: {b}'
                // 'new BigNumber() base out of range: {b}'
                if (b == null || !isValidInt(b, 2, 64, id, 'base')) {

                  // Duplicate.
                  if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    id = 0;
                    return;
                  }

                  if ((num = typeof n == 'number') && n * 0 == 0) {
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                    // Fast path for integers.
                    if (n === ~~n) {
                      for (e = 0, i = n; i >= 10; i /= 10, e++);
                      x.e = e;
                      x.c = [n];
                      id = 0;
                      return;
                    }

                    str = n + '';
                  } else {
                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                  }
                } else {
                  b = b | 0;
                  str = n + '';

                  // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                  // Allow exponential notation to be used with base 10 argument.
                  if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                  }

                  // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                  // Any number in exponential form will fail due to the [Ee][+-].
                  if ((num = typeof n == 'number') && n * 0 != 0 ||
                    !(new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') +
                      '(?:\\.' + c + ')?$', b < 37 ? 'i' : '')).test(str)) {
                    return parseNumeric(x, str, num, b);
                  }

                  if (num) {
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                    if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {

                      // 'new BigNumber() number type has more than 15 significant digits: {n}'
                      raise(id, tooManyDigits, n);
                    }

                    // Prevent later check for length on converted number.
                    num = false;
                  } else {
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                  }

                  str = convertBase(str, 10, b, x.s);
                }

                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {

                  // Determine exponent.
                  if (e < 0) e = i;
                  e += +str.slice(i + 1);
                  str = str.substring(0, i);
                } else if (e < 0) {

                  // Integer.
                  e = str.length;
                }

                // Determine leading zeros.
                for (i = 0; str.charCodeAt(i) === 48; i++);

                // Determine trailing zeros.
                for (len = str.length; str.charCodeAt(--len) === 48;);
                str = str.slice(i, len + 1);

                if (str) {
                  len = str.length;

                  // Disallow numbers with over 15 significant digits if number type.
                  // 'new BigNumber() number type has more than 15 significant digits: {n}'
                  if (num && ERRORS && len > 15) raise(id, tooManyDigits, x.s * n);

                  e = e - i - 1;

                  // Overflow?
                  if (e > MAX_EXP) {

                    // Infinity.
                    x.c = x.e = null;

                    // Underflow?
                  } else if (e < MIN_EXP) {

                    // Zero.
                    x.c = [x.e = 0];
                  } else {
                    x.e = e;
                    x.c = [];

                    // Transform base

                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;

                    if (i < len) {
                      if (i) x.c.push(+str.slice(0, i));

                      for (len -= LOG_BASE; i < len;) {
                        x.c.push(+str.slice(i, i += LOG_BASE));
                      }

                      str = str.slice(i);
                      i = LOG_BASE - str.length;
                    } else {
                      i -= len;
                    }

                    for (; i--; str += '0');
                    x.c.push(+str);
                  }
                } else {

                  // Zero.
                  x.c = [x.e = 0];
                }

                id = 0;
              }


              // CONSTRUCTOR PROPERTIES


              BigNumber.another = another;

              BigNumber.ROUND_UP = 0;
              BigNumber.ROUND_DOWN = 1;
              BigNumber.ROUND_CEIL = 2;
              BigNumber.ROUND_FLOOR = 3;
              BigNumber.ROUND_HALF_UP = 4;
              BigNumber.ROUND_HALF_DOWN = 5;
              BigNumber.ROUND_HALF_EVEN = 6;
              BigNumber.ROUND_HALF_CEIL = 7;
              BigNumber.ROUND_HALF_FLOOR = 8;
              BigNumber.EUCLID = 9;


              /*
               * Configure infrequently-changing library-wide settings.
               *
               * Accept an object or an argument list, with one or many of the following properties or
               * parameters respectively:
               *
               *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
               *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
               *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
               *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
               *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
               *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
               *   ERRORS          {boolean|number}   true, false, 1 or 0
               *   CRYPTO          {boolean|number}   true, false, 1 or 0
               *   MODULO_MODE     {number}           0 to 9 inclusive
               *   POW_PRECISION   {number}           0 to MAX inclusive
               *   FORMAT          {object}           See BigNumber.prototype.toFormat
               *      decimalSeparator       {string}
               *      groupSeparator         {string}
               *      groupSize              {number}
               *      secondaryGroupSize     {number}
               *      fractionGroupSeparator {string}
               *      fractionGroupSize      {number}
               *
               * (The values assigned to the above FORMAT object properties are not checked for validity.)
               *
               * E.g.
               * BigNumber.config(20, 4) is equivalent to
               * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
               *
               * Ignore properties/parameters set to null or undefined.
               * Return an object with the properties current values.
               */
              BigNumber.config = function () {
                var v, p,
                  i = 0,
                  r = {},
                  a = arguments,
                  o = a[0],
                  has = o && typeof o == 'object'
                    ? function () { if (o.hasOwnProperty(p)) return (v = o[p]) != null; }
                    : function () { if (a.length > i) return (v = a[i++]) != null; };

                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                // 'config() DECIMAL_PLACES not an integer: {v}'
                // 'config() DECIMAL_PLACES out of range: {v}'
                if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
                  DECIMAL_PLACES = v | 0;
                }
                r[p] = DECIMAL_PLACES;

                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                // 'config() ROUNDING_MODE not an integer: {v}'
                // 'config() ROUNDING_MODE out of range: {v}'
                if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
                  ROUNDING_MODE = v | 0;
                }
                r[p] = ROUNDING_MODE;

                // EXPONENTIAL_AT {number|number[]}
                // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                // 'config() EXPONENTIAL_AT not an integer: {v}'
                // 'config() EXPONENTIAL_AT out of range: {v}'
                if (has(p = 'EXPONENTIAL_AT')) {

                  if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                      TO_EXP_NEG = v[0] | 0;
                      TO_EXP_POS = v[1] | 0;
                    }
                  } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
                  }
                }
                r[p] = [TO_EXP_NEG, TO_EXP_POS];

                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                // 'config() RANGE not an integer: {v}'
                // 'config() RANGE cannot be zero: {v}'
                // 'config() RANGE out of range: {v}'
                if (has(p = 'RANGE')) {

                  if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                      MIN_EXP = v[0] | 0;
                      MAX_EXP = v[1] | 0;
                    }
                  } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);
                    else if (ERRORS) raise(2, p + ' cannot be zero', v);
                  }
                }
                r[p] = [MIN_EXP, MAX_EXP];

                // ERRORS {boolean|number} true, false, 1 or 0.
                // 'config() ERRORS not a boolean or binary digit: {v}'
                if (has(p = 'ERRORS')) {

                  if (v === !!v || v === 1 || v === 0) {
                    id = 0;
                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
                  } else if (ERRORS) {
                    raise(2, p + notBool, v);
                  }
                }
                r[p] = ERRORS;

                // CRYPTO {boolean|number} true, false, 1 or 0.
                // 'config() CRYPTO not a boolean or binary digit: {v}'
                // 'config() crypto unavailable: {crypto}'
                if (has(p = 'CRYPTO')) {

                  if (v === !!v || v === 1 || v === 0) {
                    CRYPTO = !!(v && crypto && typeof crypto == 'object');
                    if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', crypto);
                  } else if (ERRORS) {
                    raise(2, p + notBool, v);
                  }
                }
                r[p] = CRYPTO;

                // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                // 'config() MODULO_MODE not an integer: {v}'
                // 'config() MODULO_MODE out of range: {v}'
                if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
                  MODULO_MODE = v | 0;
                }
                r[p] = MODULO_MODE;

                // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                // 'config() POW_PRECISION not an integer: {v}'
                // 'config() POW_PRECISION out of range: {v}'
                if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
                  POW_PRECISION = v | 0;
                }
                r[p] = POW_PRECISION;

                // FORMAT {object}
                // 'config() FORMAT not an object: {v}'
                if (has(p = 'FORMAT')) {

                  if (typeof v == 'object') {
                    FORMAT = v;
                  } else if (ERRORS) {
                    raise(2, p + ' not an object', v);
                  }
                }
                r[p] = FORMAT;

                return r;
              };


              /*
               * Return a new BigNumber whose value is the maximum of the arguments.
               *
               * arguments {number|string|BigNumber}
               */
              BigNumber.max = function () { return maxOrMin(arguments, P.lt); };


              /*
               * Return a new BigNumber whose value is the minimum of the arguments.
               *
               * arguments {number|string|BigNumber}
               */
              BigNumber.min = function () { return maxOrMin(arguments, P.gt); };


              /*
               * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
               * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
               * zeros are produced).
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               *
               * 'random() decimal places not an integer: {dp}'
               * 'random() decimal places out of range: {dp}'
               * 'random() crypto unavailable: {crypto}'
               */
              BigNumber.random = (function () {
                var pow2_53 = 0x20000000000000;

                // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
                // Check if Math.random() produces more than 32 bits of randomness.
                // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
                // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
                var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                  ? function () { return mathfloor(Math.random() * pow2_53); }
                  : function () {
                    return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                      (Math.random() * 0x800000 | 0);
                  };

                return function (dp) {
                  var a, b, e, k, v,
                    i = 0,
                    c = [],
                    rand = new BigNumber(ONE);

                  dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
                  k = mathceil(dp / LOG_BASE);

                  if (CRYPTO) {

                    // Browsers supporting crypto.getRandomValues.
                    if (crypto && crypto.getRandomValues) {

                      a = crypto.getRandomValues(new Uint32Array(k *= 2));

                      for (; i < k;) {

                        // 53 bits:
                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                        //                                     11111 11111111 11111111
                        // 0x20000 is 2^21.
                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                        // Rejection sampling:
                        // 0 <= v < 9007199254740992
                        // Probability that v >= 9e15, is
                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                        if (v >= 9e15) {
                          b = crypto.getRandomValues(new Uint32Array(2));
                          a[i] = b[0];
                          a[i + 1] = b[1];
                        } else {

                          // 0 <= v <= 8999999999999999
                          // 0 <= (v % 1e14) <= 99999999999999
                          c.push(v % 1e14);
                          i += 2;
                        }
                      }
                      i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                    } else if (crypto && crypto.randomBytes) {

                      // buffer
                      a = crypto.randomBytes(k *= 7);

                      for (; i < k;) {

                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                        // 0x100000000 is 2^32, 0x1000000 is 2^24
                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                        // 0 <= v < 9007199254740992
                        v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                          (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                          (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                        if (v >= 9e15) {
                          crypto.randomBytes(7).copy(a, i);
                        } else {

                          // 0 <= (v % 1e14) <= 99999999999999
                          c.push(v % 1e14);
                          i += 7;
                        }
                      }
                      i = k / 7;
                    } else if (ERRORS) {
                      raise(14, 'crypto unavailable', crypto);
                    }
                  }

                  // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                  if (!i) {

                    for (; i < k;) {
                      v = random53bitInt();
                      if (v < 9e15) c[i++] = v % 1e14;
                    }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                  }

                  // Remove trailing elements which are zero.
                  for (; c[i] === 0; c.pop(), i--);

                  // Zero?
                  if (i < 0) {
                    c = [e = 0];
                  } else {

                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE);

                    // Count the digits of the first element of c to determine leading zeros, and...
                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
                };
              })();


              // PRIVATE FUNCTIONS


              // Convert a numeric string of baseIn to a numeric string of baseOut.
              function convertBase(str, baseOut, baseIn, sign) {
                var d, e, k, r, x, xc, y,
                  i = str.indexOf('.'),
                  dp = DECIMAL_PLACES,
                  rm = ROUNDING_MODE;

                if (baseIn < 37) str = str.toLowerCase();

                // Non-integer.
                if (i >= 0) {
                  k = POW_PRECISION;

                  // Unlimited precision.
                  POW_PRECISION = 0;
                  str = str.replace('.', '');
                  y = new BigNumber(baseIn);
                  x = y.pow(str.length - i);
                  POW_PRECISION = k;

                  // Convert str as if an integer, then restore the fraction part by dividing the
                  // result by its base raised to a power.
                  y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
                  y.e = y.c.length;
                }

                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut);
                e = k = xc.length;

                // Remove trailing zeros.
                for (; xc[--k] == 0; xc.pop());
                if (!xc[0]) return '0';

                if (i < 0) {
                  --e;
                } else {
                  x.c = xc;
                  x.e = e;

                  // sign is needed for correct rounding.
                  x.s = sign;
                  x = div(x, y, dp, rm, baseOut);
                  xc = x.c;
                  r = x.r;
                  e = x.e;
                }

                d = e + dp + 1;

                // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
                i = xc[d];
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;

                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                    rm == (x.s < 0 ? 8 : 7));

                if (d < 1 || !xc[0]) {

                  // 1^-dp or 0.
                  str = r ? toFixedPoint('1', -dp) : '0';
                } else {
                  xc.length = d;

                  if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--baseOut; ++xc[--d] > baseOut;) {
                      xc[d] = 0;

                      if (!d) {
                        ++e;
                        xc.unshift(1);
                      }
                    }
                  }

                  // Determine trailing zeros.
                  for (k = xc.length; !xc[--k];);

                  // E.g. [4, 11, 15] becomes 4bf.
                  for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));
                  str = toFixedPoint(str, e);
                }

                // The caller will add the sign.
                return str;
              }


              // Perform division in the specified base. Called by div and convertBase.
              div = (function () {

                // Assume non-zero x and k.
                function multiply(x, k, base) {
                  var m, temp, xlo, xhi,
                    carry = 0,
                    i = x.length,
                    klo = k % SQRT_BASE,
                    khi = k / SQRT_BASE | 0;

                  for (x = x.slice(); i--;) {
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                  }

                  if (carry) x.unshift(carry);

                  return x;
                }

                function compare(a, b, aL, bL) {
                  var i, cmp;

                  if (aL != bL) {
                    cmp = aL > bL ? 1 : -1;
                  } else {

                    for (i = cmp = 0; i < aL; i++) {

                      if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                      }
                    }
                  }
                  return cmp;
                }

                function subtract(a, b, aL, base) {
                  var i = 0;

                  // Subtract b from a.
                  for (; aL--;) {
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for (; !a[0] && a.length > 1; a.shift());
                }

                // x: dividend, y: divisor.
                return function (x, y, dp, rm, base) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                    yL, yz,
                    s = x.s == y.s ? 1 : -1,
                    xc = x.c,
                    yc = y.c;

                  // Either NaN, Infinity or 0?
                  if (!xc || !xc[0] || !yc || !yc[0]) {

                    return new BigNumber(

                      // Return NaN if either NaN, or both Infinity or 0.
                      !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                    );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for (i = 0; yc[i] == (xc[i] || 0); i++);
                  if (yc[i] > (xc[i] || 0)) e--;

                  if (s < 0) {
                    qc.push(1);
                    more = true;
                  } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;

                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

                    n = mathfloor(base / (yc[0] + 1));

                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if (n > 1) {
                      yc = multiply(yc, n, base);
                      xc = multiply(xc, n, base);
                      yL = yc.length;
                      xL = xc.length;
                    }

                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;

                    // Add zeros to make remainder as long as divisor.
                    for (; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz.unshift(0);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                    do {
                      n = 0;

                      // Compare divisor and remainder.
                      cmp = compare(yc, rem, yL, remL);

                      // If divisor < remainder.
                      if (cmp < 0) {

                        // Calculate trial digit, n.

                        rem0 = rem[0];
                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                        // n is how many times the divisor goes into the current remainder.
                        n = mathfloor(rem0 / yc0);

                        //  Algorithm:
                        //  1. product = divisor * trial digit (n)
                        //  2. if product > remainder: product -= divisor, n--
                        //  3. remainder -= product
                        //  4. if product was < remainder at 2:
                        //    5. compare new remainder and divisor
                        //    6. If remainder > divisor: remainder -= divisor, n++

                        if (n > 1) {

                          // n may be > base only when base is 3.
                          if (n >= base) n = base - 1;

                          // product = divisor * trial digit.
                          prod = multiply(yc, n, base);
                          prodL = prod.length;
                          remL = rem.length;

                          // Compare product and remainder.
                          // If product > remainder.
                          // Trial digit n too high.
                          // n is 1 too high about 5% of the time, and is not known to have
                          // ever been more than 1 too high.
                          while (compare(prod, rem, prodL, remL) == 1) {
                            n--;

                            // Subtract divisor from product.
                            subtract(prod, yL < prodL ? yz : yc, prodL, base);
                            prodL = prod.length;
                            cmp = 1;
                          }
                        } else {

                          // n is 0 or 1, cmp is -1.
                          // If n is 0, there is no need to compare yc and rem again below,
                          // so change cmp to 1 to avoid it.
                          // If n is 1, leave cmp as -1, so yc and rem are compared again.
                          if (n == 0) {

                            // divisor < remainder, so n must be at least 1.
                            cmp = n = 1;
                          }

                          // product = divisor
                          prod = yc.slice();
                          prodL = prod.length;
                        }

                        if (prodL < remL) prod.unshift(0);

                        // Subtract product from remainder.
                        subtract(rem, prod, remL, base);
                        remL = rem.length;

                        // If product was < remainder.
                        if (cmp == -1) {

                          // Compare divisor and new remainder.
                          // If divisor < new remainder, subtract divisor from remainder.
                          // Trial digit n too low.
                          // n is 1 too low about 5% of the time, and very rarely 2 too low.
                          while (compare(yc, rem, yL, remL) < 1) {
                            n++;

                            // Subtract divisor from remainder.
                            subtract(rem, yL < remL ? yz : yc, remL, base);
                            remL = rem.length;
                          }
                        }
                      } else if (cmp === 0) {
                        n++;
                        rem = [0];
                      } // else cmp === 1 and n will be 0

                      // Add the next digit, n, to the result array.
                      qc[i++] = n;

                      // Update the remainder.
                      if (rem[0]) {
                        rem[remL++] = xc[xi] || 0;
                      } else {
                        rem = [xc[xi]];
                        remL = 1;
                      }
                    } while ((xi++ < xL || rem[0] != null) && s--);

                    more = rem[0] != null;

                    // Leading zero?
                    if (!qc[0]) qc.shift();
                  }

                  if (base == BASE) {

                    // To calculate q.e, first get the number of digits of qc[0].
                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                    // Caller is convertBase.
                  } else {
                    q.e = e;
                    q.r = +more;
                  }

                  return q;
                };
              })();


              /*
               * Return a string representing the value of BigNumber n in fixed-point or exponential
               * notation rounded to the specified decimal places or significant digits.
               *
               * n is a BigNumber.
               * i is the index of the last digit required (i.e. the digit that may be rounded up).
               * rm is the rounding mode.
               * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
               */
              function format(n, i, rm, caller) {
                var c0, e, ne, len, str;

                rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode)
                  ? rm | 0 : ROUNDING_MODE;

                if (!n.c) return n.toString();
                c0 = n.c[0];
                ne = n.e;

                if (i == null) {
                  str = coeffToString(n.c);
                  str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
                    ? toExponential(str, ne)
                    : toFixedPoint(str, ne);
                } else {
                  n = round(new BigNumber(n), i, rm);

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString(n.c);
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {

                    // Append zeros?
                    for (; len < i; str += '0', len++);
                    str = toExponential(str, e);

                    // Fixed-point notation.
                  } else {
                    i -= ne;
                    str = toFixedPoint(str, e);

                    // Append zeros?
                    if (e + 1 > len) {
                      if (--i > 0) for (str += '.'; i--; str += '0');
                    } else {
                      i += e - len;
                      if (i > 0) {
                        if (e + 1 == len) str += '.';
                        for (; i--; str += '0');
                      }
                    }
                  }
                }

                return n.s < 0 && c0 ? '-' + str : str;
              }


              // Handle BigNumber.max and BigNumber.min.
              function maxOrMin(args, method) {
                var m, n,
                  i = 0;

                if (isArray(args[0])) args = args[0];
                m = new BigNumber(args[0]);

                for (; ++i < args.length;) {
                  n = new BigNumber(args[i]);

                  // If any number is NaN, return NaN.
                  if (!n.s) {
                    m = n;
                    break;
                  } else if (method.call(m, n)) {
                    m = n;
                  }
                }

                return m;
              }


              /*
               * Return true if n is an integer in range, otherwise throw.
               * Use for argument validation when ERRORS is true.
               */
              function intValidatorWithErrors(n, min, max, caller, name) {
                if (n < min || n > max || n != truncate(n)) {
                  raise(caller, (name || 'decimal places') +
                    (n < min || n > max ? ' out of range' : ' not an integer'), n);
                }

                return true;
              }


              /*
               * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
               * Called by minus, plus and times.
               */
              function normalise(n, c, e) {
                var i = 1,
                  j = c.length;

                // Remove trailing zeros.
                for (; !c[--j]; c.pop());

                // Calculate the base 10 exponent. First get the number of digits of c[0].
                for (j = c[0]; j >= 10; j /= 10, i++);

                // Overflow?
                if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                  // Infinity.
                  n.c = n.e = null;

                  // Underflow?
                } else if (e < MIN_EXP) {

                  // Zero.
                  n.c = [n.e = 0];
                } else {
                  n.e = e;
                  n.c = c;
                }

                return n;
              }


              // Handle values that fail the validity test in BigNumber.
              parseNumeric = (function () {
                var basePrefix = /^(-?)0([xbo])/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;

                return function (x, str, num, b) {
                  var base,
                    s = num ? str : str.replace(whitespaceOrPlus, '');

                  // No exception on ±Infinity or NaN.
                  if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                  } else {
                    if (!num) {

                      // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                      s = s.replace(basePrefix, function (m, p1, p2) {
                        base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                        return !b || b == base ? p1 : m;
                      });

                      if (b) {
                        base = b;

                        // E.g. '1.' to '1', '.1' to '0.1'
                        s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                      }

                      if (str != s) return new BigNumber(s, base);
                    }

                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
                    x.s = null;
                  }

                  x.c = x.e = null;
                  id = 0;
                }
              })();


              // Throw a BigNumber Error.
              function raise(caller, msg, val) {
                var error = new Error([
                  'new BigNumber',     // 0
                  'cmp',               // 1
                  'config',            // 2
                  'div',               // 3
                  'divToInt',          // 4
                  'eq',                // 5
                  'gt',                // 6
                  'gte',               // 7
                  'lt',                // 8
                  'lte',               // 9
                  'minus',             // 10
                  'mod',               // 11
                  'plus',              // 12
                  'precision',         // 13
                  'random',            // 14
                  'round',             // 15
                  'shift',             // 16
                  'times',             // 17
                  'toDigits',          // 18
                  'toExponential',     // 19
                  'toFixed',           // 20
                  'toFormat',          // 21
                  'toFraction',        // 22
                  'pow',               // 23
                  'toPrecision',       // 24
                  'toString',          // 25
                  'BigNumber'          // 26
                ][caller] + '() ' + msg + ': ' + val);

                error.name = 'BigNumber Error';
                id = 0;
                throw error;
              }


              /*
               * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
               * If r is truthy, it is known that there are more digits after the rounding digit.
               */
              function round(x, sd, rm, r) {
                var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

                // if x is not Infinity or NaN...
                if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                    // Get the number of digits of the first element of xc.
                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;

                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                      i += LOG_BASE;
                      j = sd;
                      n = xc[ni = 0];

                      // Get the rounding digit at index j of n.
                      rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                      ni = mathceil((i + 1) / LOG_BASE);

                      if (ni >= xc.length) {

                        if (r) {

                          // Needed by sqrt.
                          for (; xc.length <= ni; xc.push(0));
                          n = rd = 0;
                          d = 1;
                          i %= LOG_BASE;
                          j = i - LOG_BASE + 1;
                        } else {
                          break out;
                        }
                      } else {
                        n = k = xc[ni];

                        // Get the number of digits of n.
                        for (d = 1; k >= 10; k /= 10, d++);

                        // Get the index of rd within n.
                        i %= LOG_BASE;

                        // Get the index of rd within n, adjusted for leading zeros.
                        // The number of leading zeros of n is given by LOG_BASE - d.
                        j = i - LOG_BASE + d;

                        // Get the rounding digit at index j of n.
                        rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                      }
                    }

                    r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                      xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                    r = rm < 4
                      ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                      : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                        // Check whether the digit to the left of the rounding digit is odd.
                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                        rm == (x.s < 0 ? 8 : 7));

                    if (sd < 1 || !xc[0]) {
                      xc.length = 0;

                      if (r) {

                        // Convert sd to decimal places.
                        sd -= x.e + 1;

                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                        xc[0] = pows10[sd % LOG_BASE];
                        x.e = -sd || 0;
                      } else {

                        // Zero.
                        xc[0] = x.e = 0;
                      }

                      return x;
                    }

                    // Remove excess digits.
                    if (i == 0) {
                      xc.length = ni;
                      k = 1;
                      ni--;
                    } else {
                      xc.length = ni + 1;
                      k = pows10[LOG_BASE - i];

                      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                      // j > 0 means i > number of leading zeros of n.
                      xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }

                    // Round up?
                    if (r) {

                      for (; ;) {

                        // If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {

                          // i will be the length of xc[0] before k is added.
                          for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                          j = xc[0] += k;
                          for (k = 1; j >= 10; j /= 10, k++);

                          // if i != k the length has increased.
                          if (i != k) {
                            x.e++;
                            if (xc[0] == BASE) xc[0] = 1;
                          }

                          break;
                        } else {
                          xc[ni] += k;
                          if (xc[ni] != BASE) break;
                          xc[ni--] = 0;
                          k = 1;
                        }
                      }
                    }

                    // Remove trailing zeros.
                    for (i = xc.length; xc[--i] === 0; xc.pop());
                  }

                  // Overflow? Infinity.
                  if (x.e > MAX_EXP) {
                    x.c = x.e = null;

                    // Underflow? Zero.
                  } else if (x.e < MIN_EXP) {
                    x.c = [x.e = 0];
                  }
                }

                return x;
              }


              // PROTOTYPE/INSTANCE METHODS


              /*
               * Return a new BigNumber whose value is the absolute value of this BigNumber.
               */
              P.absoluteValue = P.abs = function () {
                var x = new BigNumber(this);
                if (x.s < 0) x.s = 1;
                return x;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
               * number in the direction of Infinity.
               */
              P.ceil = function () {
                return round(new BigNumber(this), this.e + 1, 2);
              };


              /*
               * Return
               * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
               * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
               * 0 if they have the same value,
               * or null if the value of either is NaN.
               */
              P.comparedTo = P.cmp = function (y, b) {
                id = 1;
                return compare(this, new BigNumber(y, b));
              };


              /*
               * Return the number of decimal places of the value of this BigNumber, or null if the value
               * of this BigNumber is ±Infinity or NaN.
               */
              P.decimalPlaces = P.dp = function () {
                var n, v,
                  c = this.c;

                if (!c) return null;
                n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

                // Subtract the number of trailing zeros of the last number.
                if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
                if (n < 0) n = 0;

                return n;
              };


              /*
               *  n / 0 = I
               *  n / N = N
               *  n / I = 0
               *  0 / n = 0
               *  0 / 0 = N
               *  0 / N = N
               *  0 / I = 0
               *  N / n = N
               *  N / 0 = N
               *  N / N = N
               *  N / I = N
               *  I / n = I
               *  I / 0 = I
               *  I / N = N
               *  I / I = N
               *
               * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
               * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
               */
              P.dividedBy = P.div = function (y, b) {
                id = 3;
                return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
              };


              /*
               * Return a new BigNumber whose value is the integer part of dividing the value of this
               * BigNumber by the value of BigNumber(y, b).
               */
              P.dividedToIntegerBy = P.divToInt = function (y, b) {
                id = 4;
                return div(this, new BigNumber(y, b), 0, 1);
              };


              /*
               * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
               * otherwise returns false.
               */
              P.equals = P.eq = function (y, b) {
                id = 5;
                return compare(this, new BigNumber(y, b)) === 0;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
               * number in the direction of -Infinity.
               */
              P.floor = function () {
                return round(new BigNumber(this), this.e + 1, 3);
              };


              /*
               * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
               * otherwise returns false.
               */
              P.greaterThan = P.gt = function (y, b) {
                id = 6;
                return compare(this, new BigNumber(y, b)) > 0;
              };


              /*
               * Return true if the value of this BigNumber is greater than or equal to the value of
               * BigNumber(y, b), otherwise returns false.
               */
              P.greaterThanOrEqualTo = P.gte = function (y, b) {
                id = 7;
                return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

              };


              /*
               * Return true if the value of this BigNumber is a finite number, otherwise returns false.
               */
              P.isFinite = function () {
                return !!this.c;
              };


              /*
               * Return true if the value of this BigNumber is an integer, otherwise return false.
               */
              P.isInteger = P.isInt = function () {
                return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
              };


              /*
               * Return true if the value of this BigNumber is NaN, otherwise returns false.
               */
              P.isNaN = function () {
                return !this.s;
              };


              /*
               * Return true if the value of this BigNumber is negative, otherwise returns false.
               */
              P.isNegative = P.isNeg = function () {
                return this.s < 0;
              };


              /*
               * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
               */
              P.isZero = function () {
                return !!this.c && this.c[0] == 0;
              };


              /*
               * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
               * otherwise returns false.
               */
              P.lessThan = P.lt = function (y, b) {
                id = 8;
                return compare(this, new BigNumber(y, b)) < 0;
              };


              /*
               * Return true if the value of this BigNumber is less than or equal to the value of
               * BigNumber(y, b), otherwise returns false.
               */
              P.lessThanOrEqualTo = P.lte = function (y, b) {
                id = 9;
                return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
              };


              /*
               *  n - 0 = n
               *  n - N = N
               *  n - I = -I
               *  0 - n = -n
               *  0 - 0 = 0
               *  0 - N = N
               *  0 - I = -I
               *  N - n = N
               *  N - 0 = N
               *  N - N = N
               *  N - I = N
               *  I - n = I
               *  I - 0 = I
               *  I - N = N
               *  I - I = N
               *
               * Return a new BigNumber whose value is the value of this BigNumber minus the value of
               * BigNumber(y, b).
               */
              P.minus = P.sub = function (y, b) {
                var i, j, t, xLTy,
                  x = this,
                  a = x.s;

                id = 10;
                y = new BigNumber(y, b);
                b = y.s;

                // Either NaN?
                if (!a || !b) return new BigNumber(NaN);

                // Signs differ?
                if (a != b) {
                  y.s = -b;
                  return x.plus(y);
                }

                var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

                if (!xe || !ye) {

                  // Either Infinity?
                  if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                  // Either zero?
                  if (!xc[0] || !yc[0]) {

                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                      ROUNDING_MODE == 3 ? -0 : 0);
                  }
                }

                xe = bitFloor(xe);
                ye = bitFloor(ye);
                xc = xc.slice();

                // Determine which is the bigger number.
                if (a = xe - ye) {

                  if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                  } else {
                    ye = xe;
                    t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for (b = a; b--; t.push(0));
                  t.reverse();
                } else {

                  // Exponents equal. Check digit by digit.
                  j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                  for (a = b = 0; b < j; b++) {

                    if (xc[b] != yc[b]) {
                      xLTy = xc[b] < yc[b];
                      break;
                    }
                  }
                }

                // x < y? Point xc to the array of the bigger number.
                if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

                b = (j = yc.length) - (i = xc.length);

                // Append zeros to xc if shorter.
                // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
                if (b > 0) for (; b--; xc[i++] = 0);
                b = BASE - 1;

                // Subtract yc from xc.
                for (; j > a;) {

                  if (xc[--j] < yc[j]) {
                    for (i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
                }

                // Remove leading zeros and adjust exponent accordingly.
                for (; xc[0] == 0; xc.shift(), --ye);

                // Zero?
                if (!xc[0]) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [y.e = 0];
                  return y;
                }

                // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                // for finite x and y.
                return normalise(y, xc, ye);
              };


              /*
               *   n % 0 =  N
               *   n % N =  N
               *   n % I =  n
               *   0 % n =  0
               *  -0 % n = -0
               *   0 % 0 =  N
               *   0 % N =  N
               *   0 % I =  0
               *   N % n =  N
               *   N % 0 =  N
               *   N % N =  N
               *   N % I =  N
               *   I % n =  N
               *   I % 0 =  N
               *   I % N =  N
               *   I % I =  N
               *
               * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
               * BigNumber(y, b). The result depends on the value of MODULO_MODE.
               */
              P.modulo = P.mod = function (y, b) {
                var q, s,
                  x = this;

                id = 11;
                y = new BigNumber(y, b);

                // Return NaN if x is Infinity or NaN, or y is NaN or zero.
                if (!x.c || !y.s || y.c && !y.c[0]) {
                  return new BigNumber(NaN);

                  // Return x if y is Infinity or x is zero.
                } else if (!y.c || x.c && !x.c[0]) {
                  return new BigNumber(x);
                }

                if (MODULO_MODE == 9) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div(x, y, 0, 3);
                  y.s = s;
                  q.s *= s;
                } else {
                  q = div(x, y, 0, MODULO_MODE);
                }

                return x.minus(q.times(y));
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber negated,
               * i.e. multiplied by -1.
               */
              P.negated = P.neg = function () {
                var x = new BigNumber(this);
                x.s = -x.s || null;
                return x;
              };


              /*
               *  n + 0 = n
               *  n + N = N
               *  n + I = I
               *  0 + n = n
               *  0 + 0 = 0
               *  0 + N = N
               *  0 + I = I
               *  N + n = N
               *  N + 0 = N
               *  N + N = N
               *  N + I = N
               *  I + n = I
               *  I + 0 = I
               *  I + N = N
               *  I + I = I
               *
               * Return a new BigNumber whose value is the value of this BigNumber plus the value of
               * BigNumber(y, b).
               */
              P.plus = P.add = function (y, b) {
                var t,
                  x = this,
                  a = x.s;

                id = 12;
                y = new BigNumber(y, b);
                b = y.s;

                // Either NaN?
                if (!a || !b) return new BigNumber(NaN);

                // Signs differ?
                if (a != b) {
                  y.s = -b;
                  return x.minus(y);
                }

                var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

                if (!xe || !ye) {

                  // Return ±Infinity if either ±Infinity.
                  if (!xc || !yc) return new BigNumber(a / 0);

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
                }

                xe = bitFloor(xe);
                ye = bitFloor(ye);
                xc = xc.slice();

                // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
                if (a = xe - ye) {
                  if (a > 0) {
                    ye = xe;
                    t = yc;
                  } else {
                    a = -a;
                    t = xc;
                  }

                  t.reverse();
                  for (; a--; t.push(0));
                  t.reverse();
                }

                a = xc.length;
                b = yc.length;

                // Point xc to the longer array, and b to the shorter length.
                if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

                // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
                for (a = 0; b;) {
                  a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                  xc[b] %= BASE;
                }

                if (a) {
                  xc.unshift(a);
                  ++ye;
                }

                // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                // ye = MAX_EXP + 1 possible
                return normalise(y, xc, ye);
              };


              /*
               * Return the number of significant digits of the value of this BigNumber.
               *
               * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
               */
              P.precision = P.sd = function (z) {
                var n, v,
                  x = this,
                  c = x.c;

                // 'precision() argument not a boolean or binary digit: {z}'
                if (z != null && z !== !!z && z !== 1 && z !== 0) {
                  if (ERRORS) raise(13, 'argument' + notBool, z);
                  if (z != !!z) z = null;
                }

                if (!c) return null;
                v = c.length - 1;
                n = v * LOG_BASE + 1;

                if (v = c[v]) {

                  // Subtract the number of trailing zeros of the last element.
                  for (; v % 10 == 0; v /= 10, n--);

                  // Add the number of digits of the first element.
                  for (v = c[0]; v >= 10; v /= 10, n++);
                }

                if (z && x.e + 1 > n) n = x.e + 1;

                return n;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
               * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
               * omitted.
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'round() decimal places out of range: {dp}'
               * 'round() decimal places not an integer: {dp}'
               * 'round() rounding mode not an integer: {rm}'
               * 'round() rounding mode out of range: {rm}'
               */
              P.round = function (dp, rm) {
                var n = new BigNumber(this);

                if (dp == null || isValidInt(dp, 0, MAX, 15)) {
                  round(n, ~~dp + this.e + 1, rm == null ||
                    !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
                }

                return n;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
               * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
               *
               * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
               *
               * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
               * otherwise.
               *
               * 'shift() argument not an integer: {k}'
               * 'shift() argument out of range: {k}'
               */
              P.shift = function (k) {
                var n = this;
                return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')

                  // k < 1e+21, or truncate(k) will produce exponential notation.
                  ? n.times('1e' + truncate(k))
                  : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER)
                    ? n.s * (k < 0 ? 0 : 1 / 0)
                    : n);
              };


              /*
               *  sqrt(-n) =  N
               *  sqrt( N) =  N
               *  sqrt(-I) =  N
               *  sqrt( I) =  I
               *  sqrt( 0) =  0
               *  sqrt(-0) = -0
               *
               * Return a new BigNumber whose value is the square root of the value of this BigNumber,
               * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
               */
              P.squareRoot = P.sqrt = function () {
                var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

                // Negative/NaN/Infinity/zero?
                if (s !== 1 || !c || !c[0]) {
                  return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
                }

                // Initial estimate.
                s = Math.sqrt(+x);

                // Math.sqrt underflow/overflow?
                // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                if (s == 0 || s == 1 / 0) {
                  n = coeffToString(c);
                  if ((n.length + e) % 2 == 0) n += '0';
                  s = Math.sqrt(n);
                  e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                  if (s == 1 / 0) {
                    n = '1e' + e;
                  } else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                  }

                  r = new BigNumber(n);
                } else {
                  r = new BigNumber(s + '');
                }

                // Check for zero.
                // r could be zero if MIN_EXP is changed after the this value was created.
                // This would cause a division by zero (x/t) and hence Infinity below, which would cause
                // coeffToString to throw.
                if (r.c[0]) {
                  e = r.e;
                  s = e + dp;
                  if (s < 3) s = 0;

                  // Newton-Raphson iteration.
                  for (; ;) {
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));

                    if (coeffToString(t.c).slice(0, s) === (n =
                      coeffToString(r.c)).slice(0, s)) {

                      // The exponent of r may here be one less than the final result exponent,
                      // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits
                      // are indexed correctly.
                      if (r.e < e) --s;
                      n = n.slice(s - 3, s + 1);

                      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                      // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                      // iteration.
                      if (n == '9999' || !rep && n == '4999') {

                        // On the first iteration only, check to see if rounding up gives the
                        // exact result as the nines may infinitely repeat.
                        if (!rep) {
                          round(t, t.e + DECIMAL_PLACES + 2, 0);

                          if (t.times(t).eq(x)) {
                            r = t;
                            break;
                          }
                        }

                        dp += 4;
                        s += 4;
                        rep = 1;
                      } else {

                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                        // result. If not, then there are further digits and m will be truthy.
                        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                          // Truncate to the first rounding digit.
                          round(r, r.e + DECIMAL_PLACES + 2, 1);
                          m = !r.times(r).eq(x);
                        }

                        break;
                      }
                    }
                  }
                }

                return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
              };


              /*
               *  n * 0 = 0
               *  n * N = N
               *  n * I = I
               *  0 * n = 0
               *  0 * 0 = 0
               *  0 * N = N
               *  0 * I = N
               *  N * n = N
               *  N * 0 = N
               *  N * N = N
               *  N * I = N
               *  I * n = I
               *  I * 0 = N
               *  I * N = N
               *  I * I = I
               *
               * Return a new BigNumber whose value is the value of this BigNumber times the value of
               * BigNumber(y, b).
               */
              P.times = P.mul = function (y, b) {
                var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = (id = 17, y = new BigNumber(y, b)).c;

                // Either NaN, ±Infinity or ±0?
                if (!xc || !yc || !xc[0] || !yc[0]) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                    y.c = y.e = y.s = null;
                  } else {
                    y.s *= x.s;

                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) {
                      y.c = y.e = null;

                      // Return ±0 if either is ±0.
                    } else {
                      y.c = [0];
                      y.e = 0;
                    }
                  }

                  return y;
                }

                e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
                y.s *= x.s;
                xcL = xc.length;
                ycL = yc.length;

                // Ensure xc points to longer array and xcL to its length.
                if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

                // Initialise the result array with zeros.
                for (i = xcL + ycL, zc = []; i--; zc.push(0));

                base = BASE;
                sqrtBase = SQRT_BASE;

                for (i = ycL; --i >= 0;) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for (k = xcL, j = i + k; j > i;) {
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                  }

                  zc[j] = c;
                }

                if (c) {
                  ++e;
                } else {
                  zc.shift();
                }

                return normalise(y, zc, e);
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
               * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
               *
               * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'toDigits() precision out of range: {sd}'
               * 'toDigits() precision not an integer: {sd}'
               * 'toDigits() rounding mode not an integer: {rm}'
               * 'toDigits() rounding mode out of range: {rm}'
               */
              P.toDigits = function (sd, rm) {
                var n = new BigNumber(this);
                sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
                rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
                return sd ? round(n, sd, rm) : n;
              };


              /*
               * Return a string representing the value of this BigNumber in exponential notation and
               * rounded using ROUNDING_MODE to dp fixed decimal places.
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'toExponential() decimal places not an integer: {dp}'
               * 'toExponential() decimal places out of range: {dp}'
               * 'toExponential() rounding mode not an integer: {rm}'
               * 'toExponential() rounding mode out of range: {rm}'
               */
              P.toExponential = function (dp, rm) {
                return format(this,
                  dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
              };


              /*
               * Return a string representing the value of this BigNumber in fixed-point notation rounding
               * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
               *
               * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
               * but e.g. (-0.00001).toFixed(0) is '-0'.
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'toFixed() decimal places not an integer: {dp}'
               * 'toFixed() decimal places out of range: {dp}'
               * 'toFixed() rounding mode not an integer: {rm}'
               * 'toFixed() rounding mode out of range: {rm}'
               */
              P.toFixed = function (dp, rm) {
                return format(this, dp != null && isValidInt(dp, 0, MAX, 20)
                  ? ~~dp + this.e + 1 : null, rm, 20);
              };


              /*
               * Return a string representing the value of this BigNumber in fixed-point notation rounded
               * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
               * of the FORMAT object (see BigNumber.config).
               *
               * FORMAT = {
               *      decimalSeparator : '.',
               *      groupSeparator : ',',
               *      groupSize : 3,
               *      secondaryGroupSize : 0,
               *      fractionGroupSeparator : '\xA0',    // non-breaking space
               *      fractionGroupSize : 0
               * };
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'toFormat() decimal places not an integer: {dp}'
               * 'toFormat() decimal places out of range: {dp}'
               * 'toFormat() rounding mode not an integer: {rm}'
               * 'toFormat() rounding mode out of range: {rm}'
               */
              P.toFormat = function (dp, rm) {
                var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21)
                  ? ~~dp + this.e + 1 : null, rm, 21);

                if (this.c) {
                  var i,
                    arr = str.split('.'),
                    g1 = +FORMAT.groupSize,
                    g2 = +FORMAT.secondaryGroupSize,
                    groupSeparator = FORMAT.groupSeparator,
                    intPart = arr[0],
                    fractionPart = arr[1],
                    isNeg = this.s < 0,
                    intDigits = isNeg ? intPart.slice(1) : intPart,
                    len = intDigits.length;

                  if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                  if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);

                    for (; i < len; i += g1) {
                      intPart += groupSeparator + intDigits.substr(i, g1);
                    }

                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                      ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                        '$&' + FORMAT.fractionGroupSeparator)
                      : fractionPart)
                    : intPart;
                }

                return str;
              };


              /*
               * Return a string array representing the value of this BigNumber as a simple fraction with
               * an integer numerator and an integer denominator. The denominator will be a positive
               * non-zero value less than or equal to the specified maximum denominator. If a maximum
               * denominator is not specified, the denominator will be the lowest value necessary to
               * represent the number exactly.
               *
               * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
               *
               * 'toFraction() max denominator not an integer: {md}'
               * 'toFraction() max denominator out of range: {md}'
               */
              P.toFraction = function (md) {
                var arr, d0, d2, e, exp, n, n0, q, s,
                  k = ERRORS,
                  x = this,
                  xc = x.c,
                  d = new BigNumber(ONE),
                  n1 = d0 = new BigNumber(ONE),
                  d1 = n0 = new BigNumber(ONE);

                if (md != null) {
                  ERRORS = false;
                  n = new BigNumber(md);
                  ERRORS = k;

                  if (!(k = n.isInt()) || n.lt(ONE)) {

                    if (ERRORS) {
                      raise(22,
                        'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
                    }

                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
                  }
                }

                if (!xc) return x.toString();
                s = coeffToString(xc);

                // Determine initial denominator.
                // d is a power of 10 and the minimum max denominator that specifies the value exactly.
                e = d.e = s.length - x.e - 1;
                d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
                md = !md || n.cmp(d) > 0 ? (e > 0 ? d : n1) : n;

                exp = MAX_EXP;
                MAX_EXP = 1 / 0;
                n = new BigNumber(s);

                // n0 = d1 = 0
                n0.c[0] = 0;

                for (; ;) {
                  q = div(n, d, 0, 1);
                  d2 = d0.plus(q.times(d1));
                  if (d2.cmp(md) == 1) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus(q.times(d2 = n1));
                  n0 = d2;
                  d = n.minus(q.times(d2 = d));
                  n = d2;
                }

                d2 = div(md.minus(d0), d1, 0, 1);
                n0 = n0.plus(d2.times(n1));
                d0 = d0.plus(d2.times(d1));
                n0.s = n1.s = x.s;
                e *= 2;

                // Determine which fraction is closer to x, n0/d0 or n1/d1
                arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(
                  div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
                  ? [n1.toString(), d1.toString()]
                  : [n0.toString(), d0.toString()];

                MAX_EXP = exp;
                return arr;
              };


              /*
               * Return the value of this BigNumber converted to a number primitive.
               */
              P.toNumber = function () {
                var x = this;

                // Ensure zero has correct sign.
                return +x || (x.s ? x.s * 0 : NaN);
              };


              /*
               * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
               * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
               * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
               *
               * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
               * (Performs 54 loop iterations for n of 9007199254740992.)
               *
               * 'pow() exponent not an integer: {n}'
               * 'pow() exponent out of range: {n}'
               */
              P.toPower = P.pow = function (n) {
                var k, y,
                  i = mathfloor(n < 0 ? -n : +n),
                  x = this;

                // Pass ±Infinity to Math.pow if exponent is out of range.
                if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') &&
                  (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) ||
                    parseFloat(n) != n && !(n = NaN))) {
                  return new BigNumber(Math.pow(+x, n));
                }

                // Truncating each coefficient array to a length of k after each multiplication equates
                // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
                // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
                k = POW_PRECISION ? mathceil(POW_PRECISION / LOG_BASE + 2) : 0;
                y = new BigNumber(ONE);

                for (; ;) {

                  if (i % 2) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k && y.c.length > k) y.c.length = k;
                  }

                  i = mathfloor(i / 2);
                  if (!i) break;

                  x = x.times(x);
                  if (k && x.c && x.c.length > k) x.c.length = k;
                }

                if (n < 0) y = ONE.div(y);
                return k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
              };


              /*
               * Return a string representing the value of this BigNumber rounded to sd significant digits
               * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
               * necessary to represent the integer part of the value in fixed-point notation, then use
               * exponential notation.
               *
               * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * 'toPrecision() precision not an integer: {sd}'
               * 'toPrecision() precision out of range: {sd}'
               * 'toPrecision() rounding mode not an integer: {rm}'
               * 'toPrecision() rounding mode out of range: {rm}'
               */
              P.toPrecision = function (sd, rm) {
                return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision')
                  ? sd | 0 : null, rm, 24);
              };


              /*
               * Return a string representing the value of this BigNumber in base b, or base 10 if b is
               * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
               * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
               * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
               * TO_EXP_NEG, return exponential notation.
               *
               * [b] {number} Integer, 2 to 64 inclusive.
               *
               * 'toString() base not an integer: {b}'
               * 'toString() base out of range: {b}'
               */
              P.toString = function (b) {
                var str,
                  n = this,
                  s = n.s,
                  e = n.e;

                // Infinity or NaN?
                if (e === null) {

                  if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                  } else {
                    str = 'NaN';
                  }
                } else {
                  str = coeffToString(n.c);

                  if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                      ? toExponential(str, e)
                      : toFixedPoint(str, e);
                  } else {
                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
                  }

                  if (s < 0 && n.c[0]) str = '-' + str;
                }

                return str;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
               * number.
               */
              P.truncated = P.trunc = function () {
                return round(new BigNumber(this), this.e + 1, 1);
              };



              /*
               * Return as toString, but do not accept a base argument.
               */
              P.valueOf = P.toJSON = function () {
                return this.toString();
              };


              // Aliases for BigDecimal methods.
              //P.add = P.plus;         // P.add included above
              //P.subtract = P.minus;   // P.sub included above
              //P.multiply = P.times;   // P.mul included above
              //P.divide = P.div;
              //P.remainder = P.mod;
              //P.compareTo = P.cmp;
              //P.negate = P.neg;


              if (configObj != null) BigNumber.config(configObj);

              return BigNumber;
            }


            // PRIVATE HELPER FUNCTIONS


            function bitFloor(n) {
              var i = n | 0;
              return n > 0 || n === i ? i : i - 1;
            }


            // Return a coefficient array as a string of base 10 digits.
            function coeffToString(a) {
              var s, z,
                i = 1,
                j = a.length,
                r = a[0] + '';

              for (; i < j;) {
                s = a[i++] + '';
                z = LOG_BASE - s.length;
                for (; z--; s = '0' + s);
                r += s;
              }

              // Determine trailing zeros.
              for (j = r.length; r.charCodeAt(--j) === 48;);
              return r.slice(0, j + 1 || 1);
            }


            // Compare the value of BigNumbers x and y.
            function compare(x, y) {
              var a, b,
                xc = x.c,
                yc = y.c,
                i = x.s,
                j = y.s,
                k = x.e,
                l = y.e;

              // Either NaN?
              if (!i || !j) return null;

              a = xc && !xc[0];
              b = yc && !yc[0];

              // Either zero?
              if (a || b) return a ? b ? 0 : -j : i;

              // Signs differ?
              if (i != j) return i;

              a = i < 0;
              b = k == l;

              // Either Infinity?
              if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

              // Compare exponents.
              if (!b) return k > l ^ a ? 1 : -1;

              j = (k = xc.length) < (l = yc.length) ? k : l;

              // Compare digit by digit.
              for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

              // Compare lengths.
              return k == l ? 0 : k > l ^ a ? 1 : -1;
            }


            /*
             * Return true if n is a valid number in range, otherwise false.
             * Use for argument validation when ERRORS is false.
             * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
             */
            function intValidatorNoErrors(n, min, max) {
              return (n = truncate(n)) >= min && n <= max;
            }


            function isArray(obj) {
              return Object.prototype.toString.call(obj) == '[object Array]';
            }


            /*
             * Convert string of baseIn to an array of numbers of baseOut.
             * Eg. convertBase('255', 10, 16) returns [15, 15].
             * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
             */
            function toBaseOut(str, baseIn, baseOut) {
              var j,
                arr = [0],
                arrL,
                i = 0,
                len = str.length;

              for (; i < len;) {
                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));

                for (; j < arr.length; j++) {

                  if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null) arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                  }
                }
              }

              return arr.reverse();
            }


            function toExponential(str, e) {
              return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
                (e < 0 ? 'e' : 'e+') + e;
            }


            function toFixedPoint(str, e) {
              var len, z;

              // Negative exponent?
              if (e < 0) {

                // Prepend zeros.
                for (z = '0.'; ++e; z += '0');
                str = z + str;

                // Positive exponent
              } else {
                len = str.length;

                // Append zeros.
                if (++e > len) {
                  for (z = '0', e -= len; --e; z += '0');
                  str += z;
                } else if (e < len) {
                  str = str.slice(0, e) + '.' + str.slice(e);
                }
              }

              return str;
            }


            function truncate(n) {
              n = parseFloat(n);
              return n < 0 ? mathceil(n) : mathfloor(n);
            }


            // EXPORT


            BigNumber = another();

            // AMD.
            if (typeof define == 'function' && define.amd) {
              define(function () { return BigNumber; });

              // Node and other environments that support module.exports.
            } else if (typeof module != 'undefined' && module.exports) {
              module.exports = BigNumber;
              if (!crypto) try { crypto = require('crypto'); } catch (e) { }

              // Browser.
            } else {
              global.BigNumber = BigNumber;
            }
          })(this);

        };
      };
    }
  }, { package: "@metamask/controllers>web3>bignumber.js", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3\\node_modules\\utf8\\utf8.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\web3\node_modules\utf8\utf8.js
        return function (require, module, exports) {
          /*! https://mths.be/utf8js v2.1.2 by @mathias */
          ; (function (root) {

            // Detect free variables `exports`
            var freeExports = typeof exports == 'object' && exports;

            // Detect free variable `module`
            var freeModule = typeof module == 'object' && module &&
              module.exports == freeExports && module;

            // Detect free variable `global`, from Node.js or Browserified code,
            // and use it as `root`
            var freeGlobal = typeof global == 'object' && global;
            if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
              root = freeGlobal;
            }

            /*--------------------------------------------------------------------------*/

            var stringFromCharCode = String.fromCharCode;

            // Taken from https://mths.be/punycode
            function ucs2decode(string) {
              var output = [];
              var counter = 0;
              var length = string.length;
              var value;
              var extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            // Taken from https://mths.be/punycode
            function ucs2encode(array) {
              var length = array.length;
              var index = -1;
              var value;
              var output = '';
              while (++index < length) {
                value = array[index];
                if (value > 0xFFFF) {
                  value -= 0x10000;
                  output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                  value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
              }
              return output;
            }

            function checkScalarValue(codePoint) {
              if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
                throw Error(
                  'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
                  ' is not a scalar value'
                );
              }
            }
            /*--------------------------------------------------------------------------*/

            function createByte(codePoint, shift) {
              return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
            }

            function encodeCodePoint(codePoint) {
              if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
                return stringFromCharCode(codePoint);
              }
              var symbol = '';
              if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
                symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
              }
              else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
                checkScalarValue(codePoint);
                symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
                symbol += createByte(codePoint, 6);
              }
              else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
                symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
                symbol += createByte(codePoint, 12);
                symbol += createByte(codePoint, 6);
              }
              symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
              return symbol;
            }

            function utf8encode(string) {
              var codePoints = ucs2decode(string);
              var length = codePoints.length;
              var index = -1;
              var codePoint;
              var byteString = '';
              while (++index < length) {
                codePoint = codePoints[index];
                byteString += encodeCodePoint(codePoint);
              }
              return byteString;
            }

            /*--------------------------------------------------------------------------*/

            function readContinuationByte() {
              if (byteIndex >= byteCount) {
                throw Error('Invalid byte index');
              }

              var continuationByte = byteArray[byteIndex] & 0xFF;
              byteIndex++;

              if ((continuationByte & 0xC0) == 0x80) {
                return continuationByte & 0x3F;
              }

              // If we end up here, it’s not a continuation byte
              throw Error('Invalid continuation byte');
            }

            function decodeSymbol() {
              var byte1;
              var byte2;
              var byte3;
              var byte4;
              var codePoint;

              if (byteIndex > byteCount) {
                throw Error('Invalid byte index');
              }

              if (byteIndex == byteCount) {
                return false;
              }

              // Read first byte
              byte1 = byteArray[byteIndex] & 0xFF;
              byteIndex++;

              // 1-byte sequence (no continuation bytes)
              if ((byte1 & 0x80) == 0) {
                return byte1;
              }

              // 2-byte sequence
              if ((byte1 & 0xE0) == 0xC0) {
                byte2 = readContinuationByte();
                codePoint = ((byte1 & 0x1F) << 6) | byte2;
                if (codePoint >= 0x80) {
                  return codePoint;
                } else {
                  throw Error('Invalid continuation byte');
                }
              }

              // 3-byte sequence (may include unpaired surrogates)
              if ((byte1 & 0xF0) == 0xE0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
                if (codePoint >= 0x0800) {
                  checkScalarValue(codePoint);
                  return codePoint;
                } else {
                  throw Error('Invalid continuation byte');
                }
              }

              // 4-byte sequence
              if ((byte1 & 0xF8) == 0xF0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                byte4 = readContinuationByte();
                codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
                  (byte3 << 0x06) | byte4;
                if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                  return codePoint;
                }
              }

              throw Error('Invalid UTF-8 detected');
            }

            var byteArray;
            var byteCount;
            var byteIndex;
            function utf8decode(byteString) {
              byteArray = ucs2decode(byteString);
              byteCount = byteArray.length;
              byteIndex = 0;
              var codePoints = [];
              var tmp;
              while ((tmp = decodeSymbol()) !== false) {
                codePoints.push(tmp);
              }
              return ucs2encode(codePoints);
            }

            /*--------------------------------------------------------------------------*/

            var utf8 = {
              'version': '2.1.2',
              'encode': utf8encode,
              'decode': utf8decode
            };

            // Some AMD build optimizers, like r.js, check for specific condition patterns
            // like the following:
            if (
              typeof define == 'function' &&
              typeof define.amd == 'object' &&
              define.amd
            ) {
              define(function () {
                return utf8;
              });
            } else if (freeExports && !freeExports.nodeType) {
              if (freeModule) { // in Node.js or RingoJS v0.8.0+
                freeModule.exports = utf8;
              } else { // in Narwhal or RingoJS v0.7.0-
                var object = {};
                var hasOwnProperty = object.hasOwnProperty;
                for (var key in utf8) {
                  hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
                }
              }
            } else { // in Rhino or a web browser
              root.utf8 = utf8;
            }

          }(this));

        };
      };
    }
  }, { package: "@metamask/controllers>web3>utf8", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\webextension-polyfill\dist\browser-polyfill.js
        return function (require, module, exports) {
          (function (global, factory) {
            if (typeof define === "function" && define.amd) {
              define("webextension-polyfill", ["module"], factory);
            } else if (typeof exports !== "undefined") {
              factory(module);
            } else {
              var mod = {
                exports: {}
              };
              factory(mod);
              global.browser = mod.exports;
            }
          })(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (module) {
            /* webextension-polyfill - v0.8.0 - Tue Apr 20 2021 11:27:38 */

            /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */

            /* vim: set sts=2 sw=2 et tw=80: */

            /* This Source Code Form is subject to the terms of the Mozilla Public
             * License, v. 2.0. If a copy of the MPL was not distributed with this
             * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
            "use strict";

            if (typeof browser === "undefined" || Object.getPrototypeOf(browser) !== Object.prototype) {
              const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received.";
              const SEND_RESPONSE_DEPRECATION_WARNING = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)"; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
              // optimization for Firefox. Since Spidermonkey does not fully parse the
              // contents of a function until the first time it's called, and since it will
              // never actually need to be called, this allows the polyfill to be included
              // in Firefox nearly for free.

              const wrapAPIs = extensionAPIs => {
                // NOTE: apiMetadata is associated to the content of the api-metadata.json file
                // at build time by replacing the following "include" with the content of the
                // JSON file.
                const apiMetadata = {
                  "alarms": {
                    "clear": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "clearAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "get": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "bookmarks": {
                    "create": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "get": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getChildren": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getRecent": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getSubTree": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getTree": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "move": {
                      "minArgs": 2,
                      "maxArgs": 2
                    },
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeTree": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "search": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "update": {
                      "minArgs": 2,
                      "maxArgs": 2
                    }
                  },
                  "browserAction": {
                    "disable": {
                      "minArgs": 0,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "enable": {
                      "minArgs": 0,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "getBadgeBackgroundColor": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getBadgeText": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getPopup": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getTitle": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "openPopup": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "setBadgeBackgroundColor": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "setBadgeText": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "setIcon": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "setPopup": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "setTitle": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    }
                  },
                  "browsingData": {
                    "remove": {
                      "minArgs": 2,
                      "maxArgs": 2
                    },
                    "removeCache": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeCookies": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeDownloads": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeFormData": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeHistory": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeLocalStorage": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removePasswords": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removePluginData": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "settings": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "commands": {
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "contextMenus": {
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "update": {
                      "minArgs": 2,
                      "maxArgs": 2
                    }
                  },
                  "cookies": {
                    "get": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getAll": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getAllCookieStores": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "set": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "devtools": {
                    "inspectedWindow": {
                      "eval": {
                        "minArgs": 1,
                        "maxArgs": 2,
                        "singleCallbackArg": false
                      }
                    },
                    "panels": {
                      "create": {
                        "minArgs": 3,
                        "maxArgs": 3,
                        "singleCallbackArg": true
                      },
                      "elements": {
                        "createSidebarPane": {
                          "minArgs": 1,
                          "maxArgs": 1
                        }
                      }
                    }
                  },
                  "downloads": {
                    "cancel": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "download": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "erase": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getFileIcon": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "open": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "pause": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeFile": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "resume": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "search": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "show": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    }
                  },
                  "extension": {
                    "isAllowedFileSchemeAccess": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "isAllowedIncognitoAccess": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "history": {
                    "addUrl": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "deleteAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "deleteRange": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "deleteUrl": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getVisits": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "search": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "i18n": {
                    "detectLanguage": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getAcceptLanguages": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "identity": {
                    "launchWebAuthFlow": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "idle": {
                    "queryState": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "management": {
                    "get": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "getSelf": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "setEnabled": {
                      "minArgs": 2,
                      "maxArgs": 2
                    },
                    "uninstallSelf": {
                      "minArgs": 0,
                      "maxArgs": 1
                    }
                  },
                  "notifications": {
                    "clear": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "create": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "getPermissionLevel": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "update": {
                      "minArgs": 2,
                      "maxArgs": 2
                    }
                  },
                  "pageAction": {
                    "getPopup": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getTitle": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "hide": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "setIcon": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "setPopup": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "setTitle": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    },
                    "show": {
                      "minArgs": 1,
                      "maxArgs": 1,
                      "fallbackToNoCallback": true
                    }
                  },
                  "permissions": {
                    "contains": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "request": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "runtime": {
                    "getBackgroundPage": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "getPlatformInfo": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "openOptionsPage": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "requestUpdateCheck": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "sendMessage": {
                      "minArgs": 1,
                      "maxArgs": 3
                    },
                    "sendNativeMessage": {
                      "minArgs": 2,
                      "maxArgs": 2
                    },
                    "setUninstallURL": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "sessions": {
                    "getDevices": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "getRecentlyClosed": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "restore": {
                      "minArgs": 0,
                      "maxArgs": 1
                    }
                  },
                  "storage": {
                    "local": {
                      "clear": {
                        "minArgs": 0,
                        "maxArgs": 0
                      },
                      "get": {
                        "minArgs": 0,
                        "maxArgs": 1
                      },
                      "getBytesInUse": {
                        "minArgs": 0,
                        "maxArgs": 1
                      },
                      "remove": {
                        "minArgs": 1,
                        "maxArgs": 1
                      },
                      "set": {
                        "minArgs": 1,
                        "maxArgs": 1
                      }
                    },
                    "managed": {
                      "get": {
                        "minArgs": 0,
                        "maxArgs": 1
                      },
                      "getBytesInUse": {
                        "minArgs": 0,
                        "maxArgs": 1
                      }
                    },
                    "sync": {
                      "clear": {
                        "minArgs": 0,
                        "maxArgs": 0
                      },
                      "get": {
                        "minArgs": 0,
                        "maxArgs": 1
                      },
                      "getBytesInUse": {
                        "minArgs": 0,
                        "maxArgs": 1
                      },
                      "remove": {
                        "minArgs": 1,
                        "maxArgs": 1
                      },
                      "set": {
                        "minArgs": 1,
                        "maxArgs": 1
                      }
                    }
                  },
                  "tabs": {
                    "captureVisibleTab": {
                      "minArgs": 0,
                      "maxArgs": 2
                    },
                    "create": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "detectLanguage": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "discard": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "duplicate": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "executeScript": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "get": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getCurrent": {
                      "minArgs": 0,
                      "maxArgs": 0
                    },
                    "getZoom": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "getZoomSettings": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "goBack": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "goForward": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "highlight": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "insertCSS": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "move": {
                      "minArgs": 2,
                      "maxArgs": 2
                    },
                    "query": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "reload": {
                      "minArgs": 0,
                      "maxArgs": 2
                    },
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "removeCSS": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "sendMessage": {
                      "minArgs": 2,
                      "maxArgs": 3
                    },
                    "setZoom": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "setZoomSettings": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "update": {
                      "minArgs": 1,
                      "maxArgs": 2
                    }
                  },
                  "topSites": {
                    "get": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "webNavigation": {
                    "getAllFrames": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "getFrame": {
                      "minArgs": 1,
                      "maxArgs": 1
                    }
                  },
                  "webRequest": {
                    "handlerBehaviorChanged": {
                      "minArgs": 0,
                      "maxArgs": 0
                    }
                  },
                  "windows": {
                    "create": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "get": {
                      "minArgs": 1,
                      "maxArgs": 2
                    },
                    "getAll": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "getCurrent": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "getLastFocused": {
                      "minArgs": 0,
                      "maxArgs": 1
                    },
                    "remove": {
                      "minArgs": 1,
                      "maxArgs": 1
                    },
                    "update": {
                      "minArgs": 2,
                      "maxArgs": 2
                    }
                  }
                };

                if (Object.keys(apiMetadata).length === 0) {
                  throw new Error("api-metadata.json has not been included in browser-polyfill");
                }
                /**
                 * A WeakMap subclass which creates and stores a value for any key which does
                 * not exist when accessed, but behaves exactly as an ordinary WeakMap
                 * otherwise.
                 *
                 * @param {function} createItem
                 *        A function which will be called in order to create the value for any
                 *        key which does not exist, the first time it is accessed. The
                 *        function receives, as its only argument, the key being created.
                 */


                class DefaultWeakMap extends WeakMap {
                  constructor(createItem, items = undefined) {
                    super(items);
                    this.createItem = createItem;
                  }

                  get(key) {
                    if (!this.has(key)) {
                      this.set(key, this.createItem(key));
                    }

                    return super.get(key);
                  }

                }
                /**
                 * Returns true if the given object is an object with a `then` method, and can
                 * therefore be assumed to behave as a Promise.
                 *
                 * @param {*} value The value to test.
                 * @returns {boolean} True if the value is thenable.
                 */


                const isThenable = value => {
                  return value && typeof value === "object" && typeof value.then === "function";
                };
                /**
                 * Creates and returns a function which, when called, will resolve or reject
                 * the given promise based on how it is called:
                 *
                 * - If, when called, `chrome.runtime.lastError` contains a non-null object,
                 *   the promise is rejected with that value.
                 * - If the function is called with exactly one argument, the promise is
                 *   resolved to that value.
                 * - Otherwise, the promise is resolved to an array containing all of the
                 *   function's arguments.
                 *
                 * @param {object} promise
                 *        An object containing the resolution and rejection functions of a
                 *        promise.
                 * @param {function} promise.resolve
                 *        The promise's resolution function.
                 * @param {function} promise.reject
                 *        The promise's rejection function.
                 * @param {object} metadata
                 *        Metadata about the wrapped method which has created the callback.
                 * @param {boolean} metadata.singleCallbackArg
                 *        Whether or not the promise is resolved with only the first
                 *        argument of the callback, alternatively an array of all the
                 *        callback arguments is resolved. By default, if the callback
                 *        function is invoked with only a single argument, that will be
                 *        resolved to the promise, while all arguments will be resolved as
                 *        an array if multiple are given.
                 *
                 * @returns {function}
                 *        The generated callback function.
                 */


                const makeCallback = (promise, metadata) => {
                  return (...callbackArgs) => {
                    if (extensionAPIs.runtime.lastError) {
                      promise.reject(new Error(extensionAPIs.runtime.lastError.message));
                    } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
                      promise.resolve(callbackArgs[0]);
                    } else {
                      promise.resolve(callbackArgs);
                    }
                  };
                };

                const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
                /**
                 * Creates a wrapper function for a method with the given name and metadata.
                 *
                 * @param {string} name
                 *        The name of the method which is being wrapped.
                 * @param {object} metadata
                 *        Metadata about the method being wrapped.
                 * @param {integer} metadata.minArgs
                 *        The minimum number of arguments which must be passed to the
                 *        function. If called with fewer than this number of arguments, the
                 *        wrapper will raise an exception.
                 * @param {integer} metadata.maxArgs
                 *        The maximum number of arguments which may be passed to the
                 *        function. If called with more than this number of arguments, the
                 *        wrapper will raise an exception.
                 * @param {boolean} metadata.singleCallbackArg
                 *        Whether or not the promise is resolved with only the first
                 *        argument of the callback, alternatively an array of all the
                 *        callback arguments is resolved. By default, if the callback
                 *        function is invoked with only a single argument, that will be
                 *        resolved to the promise, while all arguments will be resolved as
                 *        an array if multiple are given.
                 *
                 * @returns {function(object, ...*)}
                 *       The generated wrapper function.
                 */


                const wrapAsyncFunction = (name, metadata) => {
                  return function asyncFunctionWrapper(target, ...args) {
                    if (args.length < metadata.minArgs) {
                      throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
                    }

                    if (args.length > metadata.maxArgs) {
                      throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
                    }

                    return new Promise((resolve, reject) => {
                      if (metadata.fallbackToNoCallback) {
                        // This API method has currently no callback on Chrome, but it return a promise on Firefox,
                        // and so the polyfill will try to call it with a callback first, and it will fallback
                        // to not passing the callback if the first call fails.
                        try {
                          target[name](...args, makeCallback({
                            resolve,
                            reject
                          }, metadata));
                        } catch (cbError) {
                          console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
                          target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                          // use the unsupported callback anymore.

                          metadata.fallbackToNoCallback = false;
                          metadata.noCallback = true;
                          resolve();
                        }
                      } else if (metadata.noCallback) {
                        target[name](...args);
                        resolve();
                      } else {
                        target[name](...args, makeCallback({
                          resolve,
                          reject
                        }, metadata));
                      }
                    });
                  };
                };
                /**
                 * Wraps an existing method of the target object, so that calls to it are
                 * intercepted by the given wrapper function. The wrapper function receives,
                 * as its first argument, the original `target` object, followed by each of
                 * the arguments passed to the original method.
                 *
                 * @param {object} target
                 *        The original target object that the wrapped method belongs to.
                 * @param {function} method
                 *        The method being wrapped. This is used as the target of the Proxy
                 *        object which is created to wrap the method.
                 * @param {function} wrapper
                 *        The wrapper function which is called in place of a direct invocation
                 *        of the wrapped method.
                 *
                 * @returns {Proxy<function>}
                 *        A Proxy object for the given method, which invokes the given wrapper
                 *        method in its place.
                 */


                const wrapMethod = (target, method, wrapper) => {
                  return new Proxy(method, {
                    apply(targetMethod, thisObj, args) {
                      return wrapper.call(thisObj, target, ...args);
                    }

                  });
                };

                let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
                /**
                 * Wraps an object in a Proxy which intercepts and wraps certain methods
                 * based on the given `wrappers` and `metadata` objects.
                 *
                 * @param {object} target
                 *        The target object to wrap.
                 *
                 * @param {object} [wrappers = {}]
                 *        An object tree containing wrapper functions for special cases. Any
                 *        function present in this object tree is called in place of the
                 *        method in the same location in the `target` object tree. These
                 *        wrapper methods are invoked as described in {@see wrapMethod}.
                 *
                 * @param {object} [metadata = {}]
                 *        An object tree containing metadata used to automatically generate
                 *        Promise-based wrapper functions for asynchronous. Any function in
                 *        the `target` object tree which has a corresponding metadata object
                 *        in the same location in the `metadata` tree is replaced with an
                 *        automatically-generated wrapper function, as described in
                 *        {@see wrapAsyncFunction}
                 *
                 * @returns {Proxy<object>}
                 */

                const wrapObject = (target, wrappers = {}, metadata = {}) => {
                  console.log('wrapping object ', target)
                  let cache = Object.create(null);
                  let handlers = {
                    has(proxyTarget, prop) {
                      return prop in target || prop in cache;
                    },

                    get(proxyTarget, prop, receiver) {
                      if (prop in cache) {
                        return cache[prop];
                      }

                      if (!(prop in target)) {
                        return undefined;
                      }

                      let value = target[prop];

                      if (typeof value === "function") {
                        // This is a method on the underlying object. Check if we need to do
                        // any wrapping.
                        if (typeof wrappers[prop] === "function") {
                          // We have a special-case wrapper for this method.
                          value = wrapMethod(target, target[prop], wrappers[prop]);
                        } else if (hasOwnProperty(metadata, prop)) {
                          // This is an async method that we have metadata for. Create a
                          // Promise wrapper for it.
                          let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                          value = wrapMethod(target, target[prop], wrapper);
                        } else {
                          // This is a method that we don't know or care about. Return the
                          // original method, bound to the underlying object.
                          value = value.bind(target);
                        }
                      } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
                        // This is an object that we need to do some wrapping for the children
                        // of. Create a sub-object wrapper for it with the appropriate child
                        // metadata.
                        value = wrapObject(value, wrappers[prop], metadata[prop]);
                      } else if (hasOwnProperty(metadata, "*")) {
                        // Wrap all properties in * namespace.
                        value = wrapObject(value, wrappers[prop], metadata["*"]);
                      } else {
                        // We don't need to do any wrapping for this property,
                        // so just forward all access to the underlying object.
                        Object.defineProperty(cache, prop, {
                          configurable: true,
                          enumerable: true,

                          get() {
                            return target[prop];
                          },

                          set(value) {
                            target[prop] = value;
                          }

                        });
                        return value;
                      }

                      cache[prop] = value;
                      return value;
                    },

                    set(proxyTarget, prop, value, receiver) {
                      if (prop in cache) {
                        cache[prop] = value;
                      } else {
                        target[prop] = value;
                      }

                      return true;
                    },

                    defineProperty(proxyTarget, prop, desc) {
                      return Reflect.defineProperty(cache, prop, desc);
                    },

                    deleteProperty(proxyTarget, prop) {
                      return Reflect.deleteProperty(cache, prop);
                    }

                  }; // Per contract of the Proxy API, the "get" proxy handler must return the
                  // original value of the target if that value is declared read-only and
                  // non-configurable. For this reason, we create an object with the
                  // prototype set to `target` instead of using `target` directly.
                  // Otherwise we cannot return a custom object for APIs that
                  // are declared read-only and non-configurable, such as `chrome.devtools`.
                  //
                  // The proxy handlers themselves will still use the original `target`
                  // instead of the `proxyTarget`, so that the methods and properties are
                  // dereferenced via the original targets.

                  let proxyTarget = Object.create(target);
                  return new Proxy(proxyTarget, handlers);
                };
                /**
                 * Creates a set of wrapper functions for an event object, which handles
                 * wrapping of listener functions that those messages are passed.
                 *
                 * A single wrapper is created for each listener function, and stored in a
                 * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
                 * retrieve the original wrapper, so that  attempts to remove a
                 * previously-added listener work as expected.
                 *
                 * @param {DefaultWeakMap<function, function>} wrapperMap
                 *        A DefaultWeakMap object which will create the appropriate wrapper
                 *        for a given listener function when one does not exist, and retrieve
                 *        an existing one when it does.
                 *
                 * @returns {object}
                 */


                const wrapEvent = wrapperMap => ({
                  addListener(target, listener, ...args) {
                    target.addListener(wrapperMap.get(listener), ...args);
                  },

                  hasListener(target, listener) {
                    return target.hasListener(wrapperMap.get(listener));
                  },

                  removeListener(target, listener) {
                    target.removeListener(wrapperMap.get(listener));
                  }

                });

                const onRequestFinishedWrappers = new DefaultWeakMap(listener => {
                  if (typeof listener !== "function") {
                    return listener;
                  }
                  /**
                   * Wraps an onRequestFinished listener function so that it will return a
                   * `getContent()` property which returns a `Promise` rather than using a
                   * callback API.
                   *
                   * @param {object} req
                   *        The HAR entry object representing the network request.
                   */


                  return function onRequestFinished(req) {
                    const wrappedReq = wrapObject(req, {}
                      /* wrappers */
                      , {
                        getContent: {
                          minArgs: 0,
                          maxArgs: 0
                        }
                      });
                    listener(wrappedReq);
                  };
                }); // Keep track if the deprecation warning has been logged at least once.

                let loggedSendResponseDeprecationWarning = false;
                const onMessageWrappers = new DefaultWeakMap(listener => {
                  if (typeof listener !== "function") {
                    return listener;
                  }
                  /**
                   * Wraps a message listener function so that it may send responses based on
                   * its return value, rather than by returning a sentinel value and calling a
                   * callback. If the listener function returns a Promise, the response is
                   * sent when the promise either resolves or rejects.
                   *
                   * @param {*} message
                   *        The message sent by the other end of the channel.
                   * @param {object} sender
                   *        Details about the sender of the message.
                   * @param {function(*)} sendResponse
                   *        A callback which, when called with an arbitrary argument, sends
                   *        that value as a response.
                   * @returns {boolean}
                   *        True if the wrapped listener returned a Promise, which will later
                   *        yield a response. False otherwise.
                   */


                  return function onMessage(message, sender, sendResponse) {
                    let didCallSendResponse = false;
                    let wrappedSendResponse;
                    let sendResponsePromise = new Promise(resolve => {
                      wrappedSendResponse = function (response) {
                        if (!loggedSendResponseDeprecationWarning) {
                          console.warn(SEND_RESPONSE_DEPRECATION_WARNING, new Error().stack);
                          loggedSendResponseDeprecationWarning = true;
                        }

                        didCallSendResponse = true;
                        resolve(response);
                      };
                    });
                    let result;

                    try {
                      result = listener(message, sender, wrappedSendResponse);
                    } catch (err) {
                      result = Promise.reject(err);
                    }

                    const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
                    // wrappedSendResponse synchronously, we can exit earlier
                    // because there will be no response sent from this listener.

                    if (result !== true && !isResultThenable && !didCallSendResponse) {
                      return false;
                    } // A small helper to send the message if the promise resolves
                    // and an error if the promise rejects (a wrapped sendMessage has
                    // to translate the message into a resolved promise or a rejected
                    // promise).


                    const sendPromisedResult = promise => {
                      promise.then(msg => {
                        // send the message value.
                        sendResponse(msg);
                      }, error => {
                        // Send a JSON representation of the error if the rejected value
                        // is an instance of error, or the object itself otherwise.
                        let message;

                        if (error && (error instanceof Error || typeof error.message === "string")) {
                          message = error.message;
                        } else {
                          message = "An unexpected error occurred";
                        }

                        sendResponse({
                          __mozWebExtensionPolyfillReject__: true,
                          message
                        });
                      }).catch(err => {
                        // Print an error on the console if unable to send the response.
                        console.error("Failed to send onMessage rejected reply", err);
                      });
                    }; // If the listener returned a Promise, send the resolved value as a
                    // result, otherwise wait the promise related to the wrappedSendResponse
                    // callback to resolve and send it as a response.


                    if (isResultThenable) {
                      sendPromisedResult(result);
                    } else {
                      sendPromisedResult(sendResponsePromise);
                    } // Let Chrome know that the listener is replying.


                    return true;
                  };
                });

                const wrappedSendMessageCallback = ({
                  reject,
                  resolve
                }, reply) => {
                  if (extensionAPIs.runtime.lastError) {
                    // Detect when none of the listeners replied to the sendMessage call and resolve
                    // the promise to undefined as in Firefox.
                    // See https://github.com/mozilla/webextension-polyfill/issues/130
                    if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
                      resolve();
                    } else {
                      reject(new Error(extensionAPIs.runtime.lastError.message));
                    }
                  } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
                    // Convert back the JSON representation of the error into
                    // an Error instance.
                    reject(new Error(reply.message));
                  } else {
                    resolve(reply);
                  }
                };

                const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
                  if (args.length < metadata.minArgs) {
                    throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
                  }

                  if (args.length > metadata.maxArgs) {
                    throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
                  }

                  return new Promise((resolve, reject) => {
                    const wrappedCb = wrappedSendMessageCallback.bind(null, {
                      resolve,
                      reject
                    });
                    args.push(wrappedCb);
                    apiNamespaceObj.sendMessage(...args);
                  });
                };

                const staticWrappers = {
                  devtools: {
                    network: {
                      onRequestFinished: wrapEvent(onRequestFinishedWrappers)
                    }
                  },
                  runtime: {
                    onMessage: wrapEvent(onMessageWrappers),
                    onMessageExternal: wrapEvent(onMessageWrappers),
                    sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
                      minArgs: 1,
                      maxArgs: 3
                    })
                  },
                  tabs: {
                    sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
                      minArgs: 2,
                      maxArgs: 3
                    })
                  }
                };
                const settingMetadata = {
                  clear: {
                    minArgs: 1,
                    maxArgs: 1
                  },
                  get: {
                    minArgs: 1,
                    maxArgs: 1
                  },
                  set: {
                    minArgs: 1,
                    maxArgs: 1
                  }
                };
                apiMetadata.privacy = {
                  network: {
                    "*": settingMetadata
                  },
                  services: {
                    "*": settingMetadata
                  },
                  websites: {
                    "*": settingMetadata
                  }
                };
                return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
              };

              if (typeof chrome != "object" || !chrome || !chrome.runtime || !chrome.runtime.id) {
                throw new Error("This script should only be loaded in a browser extension.");
              } // The build process adds a UMD wrapper around this file, which makes the
              // `module` variable available.


              console.log('wrapping chrome = ', chrome)
              module.exports = wrapAPIs(chrome);
            } else {
              module.exports = browser;
            }
          });
          //# sourceMappingURL=browser-polyfill.js.map

        };
      };
    }
  }, { package: "webextension-polyfill", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\whatwg-fetch\\dist\\fetch.umd.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\whatwg-fetch\dist\fetch.umd.js
        return function (require, module, exports) {
          (function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
              typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.WHATWGFetch = {})));
          }(this, (function (exports) {
            'use strict';

            var global =
              (typeof globalThis !== 'undefined' && globalThis) ||
              (typeof self !== 'undefined' && self) ||
              (typeof global !== 'undefined' && global);

            var support = {
              searchParams: 'URLSearchParams' in global,
              iterable: 'Symbol' in global && 'iterator' in Symbol,
              blob:
                'FileReader' in global &&
                'Blob' in global &&
                (function () {
                  try {
                    new Blob();
                    return true
                  } catch (e) {
                    return false
                  }
                })(),
              formData: 'FormData' in global,
              arrayBuffer: 'ArrayBuffer' in global
            };

            function isDataView(obj) {
              return obj && DataView.prototype.isPrototypeOf(obj)
            }

            if (support.arrayBuffer) {
              var viewClasses = [
                '[object Int8Array]',
                '[object Uint8Array]',
                '[object Uint8ClampedArray]',
                '[object Int16Array]',
                '[object Uint16Array]',
                '[object Int32Array]',
                '[object Uint32Array]',
                '[object Float32Array]',
                '[object Float64Array]'
              ];

              var isArrayBufferView =
                ArrayBuffer.isView ||
                function (obj) {
                  return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
                };
            }

            function normalizeName(name) {
              if (typeof name !== 'string') {
                name = String(name);
              }
              if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
                throw new TypeError('Invalid character in header field name: "' + name + '"')
              }
              return name.toLowerCase()
            }

            function normalizeValue(value) {
              if (typeof value !== 'string') {
                value = String(value);
              }
              return value
            }

            // Build a destructive iterator for the value list
            function iteratorFor(items) {
              var iterator = {
                next: function () {
                  var value = items.shift();
                  return { done: value === undefined, value: value }
                }
              };

              if (support.iterable) {
                iterator[Symbol.iterator] = function () {
                  return iterator
                };
              }

              return iterator
            }

            function Headers(headers) {
              this.map = {};

              if (headers instanceof Headers) {
                headers.forEach(function (value, name) {
                  this.append(name, value);
                }, this);
              } else if (Array.isArray(headers)) {
                headers.forEach(function (header) {
                  this.append(header[0], header[1]);
                }, this);
              } else if (headers) {
                Object.getOwnPropertyNames(headers).forEach(function (name) {
                  this.append(name, headers[name]);
                }, this);
              }
            }

            Headers.prototype.append = function (name, value) {
              name = normalizeName(name);
              value = normalizeValue(value);
              var oldValue = this.map[name];
              this.map[name] = oldValue ? oldValue + ', ' + value : value;
            };

            Headers.prototype['delete'] = function (name) {
              delete this.map[normalizeName(name)];
            };

            Headers.prototype.get = function (name) {
              name = normalizeName(name);
              return this.has(name) ? this.map[name] : null
            };

            Headers.prototype.has = function (name) {
              return this.map.hasOwnProperty(normalizeName(name))
            };

            Headers.prototype.set = function (name, value) {
              this.map[normalizeName(name)] = normalizeValue(value);
            };

            Headers.prototype.forEach = function (callback, thisArg) {
              for (var name in this.map) {
                if (this.map.hasOwnProperty(name)) {
                  callback.call(thisArg, this.map[name], name, this);
                }
              }
            };

            Headers.prototype.keys = function () {
              var items = [];
              this.forEach(function (value, name) {
                items.push(name);
              });
              return iteratorFor(items)
            };

            Headers.prototype.values = function () {
              var items = [];
              this.forEach(function (value) {
                items.push(value);
              });
              return iteratorFor(items)
            };

            Headers.prototype.entries = function () {
              var items = [];
              this.forEach(function (value, name) {
                items.push([name, value]);
              });
              return iteratorFor(items)
            };

            if (support.iterable) {
              Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
            }

            function consumed(body) {
              if (body.bodyUsed) {
                return Promise.reject(new TypeError('Already read'))
              }
              body.bodyUsed = true;
            }

            function fileReaderReady(reader) {
              return new Promise(function (resolve, reject) {
                reader.onload = function () {
                  resolve(reader.result);
                };
                reader.onerror = function () {
                  reject(reader.error);
                };
              })
            }

            function readBlobAsArrayBuffer(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsArrayBuffer(blob);
              return promise
            }

            function readBlobAsText(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsText(blob);
              return promise
            }

            function readArrayBufferAsText(buf) {
              var view = new Uint8Array(buf);
              var chars = new Array(view.length);

              for (var i = 0; i < view.length; i++) {
                chars[i] = String.fromCharCode(view[i]);
              }
              return chars.join('')
            }

            function bufferClone(buf) {
              if (buf.slice) {
                return buf.slice(0)
              } else {
                var view = new Uint8Array(buf.byteLength);
                view.set(new Uint8Array(buf));
                return view.buffer
              }
            }

            function Body() {
              this.bodyUsed = false;

              this._initBody = function (body) {
                /*
                  fetch-mock wraps the Response object in an ES6 Proxy to
                  provide useful test harness features such as flush. However, on
                  ES5 browsers without fetch or Proxy support pollyfills must be used;
                  the proxy-pollyfill is unable to proxy an attribute unless it exists
                  on the object before the Proxy is created. This change ensures
                  Response.bodyUsed exists on the instance, while maintaining the
                  semantic of setting Request.bodyUsed in the constructor before
                  _initBody is called.
                */
                this.bodyUsed = this.bodyUsed;
                this._bodyInit = body;
                if (!body) {
                  this._bodyText = '';
                } else if (typeof body === 'string') {
                  this._bodyText = body;
                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                  this._bodyBlob = body;
                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                  this._bodyFormData = body;
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this._bodyText = body.toString();
                } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                  this._bodyArrayBuffer = bufferClone(body.buffer);
                  // IE 10-11 can't handle a DataView body.
                  this._bodyInit = new Blob([this._bodyArrayBuffer]);
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                  this._bodyArrayBuffer = bufferClone(body);
                } else {
                  this._bodyText = body = Object.prototype.toString.call(body);
                }

                if (!this.headers.get('content-type')) {
                  if (typeof body === 'string') {
                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                  } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set('content-type', this._bodyBlob.type);
                  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                  }
                }
              };

              if (support.blob) {
                this.blob = function () {
                  var rejected = consumed(this);
                  if (rejected) {
                    return rejected
                  }

                  if (this._bodyBlob) {
                    return Promise.resolve(this._bodyBlob)
                  } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]))
                  } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as blob')
                  } else {
                    return Promise.resolve(new Blob([this._bodyText]))
                  }
                };

                this.arrayBuffer = function () {
                  if (this._bodyArrayBuffer) {
                    var isConsumed = consumed(this);
                    if (isConsumed) {
                      return isConsumed
                    }
                    if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                      return Promise.resolve(
                        this._bodyArrayBuffer.buffer.slice(
                          this._bodyArrayBuffer.byteOffset,
                          this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                        )
                      )
                    } else {
                      return Promise.resolve(this._bodyArrayBuffer)
                    }
                  } else {
                    return this.blob().then(readBlobAsArrayBuffer)
                  }
                };
              }

              this.text = function () {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected
                }

                if (this._bodyBlob) {
                  return readBlobAsText(this._bodyBlob)
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
                } else if (this._bodyFormData) {
                  throw new Error('could not read FormData body as text')
                } else {
                  return Promise.resolve(this._bodyText)
                }
              };

              if (support.formData) {
                this.formData = function () {
                  return this.text().then(decode)
                };
              }

              this.json = function () {
                return this.text().then(JSON.parse)
              };

              return this
            }

            // HTTP methods whose capitalization should be normalized
            var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

            function normalizeMethod(method) {
              var upcased = method.toUpperCase();
              return methods.indexOf(upcased) > -1 ? upcased : method
            }

            function Request(input, options) {
              if (!(this instanceof Request)) {
                throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
              }

              options = options || {};
              var body = options.body;

              if (input instanceof Request) {
                if (input.bodyUsed) {
                  throw new TypeError('Already read')
                }
                this.url = input.url;
                this.credentials = input.credentials;
                if (!options.headers) {
                  this.headers = new Headers(input.headers);
                }
                this.method = input.method;
                this.mode = input.mode;
                this.signal = input.signal;
                if (!body && input._bodyInit != null) {
                  body = input._bodyInit;
                  input.bodyUsed = true;
                }
              } else {
                this.url = String(input);
              }

              this.credentials = options.credentials || this.credentials || 'same-origin';
              if (options.headers || !this.headers) {
                this.headers = new Headers(options.headers);
              }
              this.method = normalizeMethod(options.method || this.method || 'GET');
              this.mode = options.mode || this.mode || null;
              this.signal = options.signal || this.signal;
              this.referrer = null;

              if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                throw new TypeError('Body not allowed for GET or HEAD requests')
              }
              this._initBody(body);

              if (this.method === 'GET' || this.method === 'HEAD') {
                if (options.cache === 'no-store' || options.cache === 'no-cache') {
                  // Search for a '_' parameter in the query string
                  var reParamSearch = /([?&])_=[^&]*/;
                  if (reParamSearch.test(this.url)) {
                    // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                  } else {
                    // Otherwise add a new '_' parameter to the end with the current time
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                  }
                }
              }
            }

            Request.prototype.clone = function () {
              return new Request(this, { body: this._bodyInit })
            };

            function decode(body) {
              var form = new FormData();
              body
                .trim()
                .split('&')
                .forEach(function (bytes) {
                  if (bytes) {
                    var split = bytes.split('=');
                    var name = split.shift().replace(/\+/g, ' ');
                    var value = split.join('=').replace(/\+/g, ' ');
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                  }
                });
              return form
            }

            function parseHeaders(rawHeaders) {
              var headers = new Headers();
              // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
              // https://tools.ietf.org/html/rfc7230#section-3.2
              var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
              // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
              // https://github.com/github/fetch/issues/748
              // https://github.com/zloirock/core-js/issues/751
              preProcessedHeaders
                .split('\r')
                .map(function (header) {
                  return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
                })
                .forEach(function (line) {
                  var parts = line.split(':');
                  var key = parts.shift().trim();
                  if (key) {
                    var value = parts.join(':').trim();
                    headers.append(key, value);
                  }
                });
              return headers
            }

            Body.call(Request.prototype);

            function Response(bodyInit, options) {
              if (!(this instanceof Response)) {
                throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
              }
              if (!options) {
                options = {};
              }

              this.type = 'default';
              this.status = options.status === undefined ? 200 : options.status;
              this.ok = this.status >= 200 && this.status < 300;
              this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
              this.headers = new Headers(options.headers);
              this.url = options.url || '';
              this._initBody(bodyInit);
            }

            Body.call(Response.prototype);

            Response.prototype.clone = function () {
              return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
              })
            };

            Response.error = function () {
              var response = new Response(null, { status: 0, statusText: '' });
              response.type = 'error';
              return response
            };

            var redirectStatuses = [301, 302, 303, 307, 308];

            Response.redirect = function (url, status) {
              if (redirectStatuses.indexOf(status) === -1) {
                throw new RangeError('Invalid status code')
              }

              return new Response(null, { status: status, headers: { location: url } })
            };

            exports.DOMException = global.DOMException;
            try {
              new exports.DOMException();
            } catch (err) {
              exports.DOMException = function (message, name) {
                this.message = message;
                this.name = name;
                var error = Error(message);
                this.stack = error.stack;
              };
              exports.DOMException.prototype = Object.create(Error.prototype);
              exports.DOMException.prototype.constructor = exports.DOMException;
            }

            function fetch(input, init) {
              return new Promise(function (resolve, reject) {
                var request = new Request(input, init);

                if (request.signal && request.signal.aborted) {
                  return reject(new exports.DOMException('Aborted', 'AbortError'))
                }

                var xhr = new XMLHttpRequest();

                function abortXhr() {
                  xhr.abort();
                }

                xhr.onload = function () {
                  var options = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                  };
                  options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                  var body = 'response' in xhr ? xhr.response : xhr.responseText;
                  setTimeout(function () {
                    resolve(new Response(body, options));
                  }, 0);
                };

                xhr.onerror = function () {
                  setTimeout(function () {
                    reject(new TypeError('Network request failed'));
                  }, 0);
                };

                xhr.ontimeout = function () {
                  setTimeout(function () {
                    reject(new TypeError('Network request failed'));
                  }, 0);
                };

                xhr.onabort = function () {
                  setTimeout(function () {
                    reject(new exports.DOMException('Aborted', 'AbortError'));
                  }, 0);
                };

                function fixUrl(url) {
                  try {
                    return url === '' && global.location.href ? global.location.href : url
                  } catch (e) {
                    return url
                  }
                }

                xhr.open(request.method, fixUrl(request.url), true);

                if (request.credentials === 'include') {
                  xhr.withCredentials = true;
                } else if (request.credentials === 'omit') {
                  xhr.withCredentials = false;
                }

                if ('responseType' in xhr) {
                  if (support.blob) {
                    xhr.responseType = 'blob';
                  } else if (
                    support.arrayBuffer &&
                    request.headers.get('Content-Type') &&
                    request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
                  ) {
                    xhr.responseType = 'arraybuffer';
                  }
                }

                if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
                  Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                  });
                } else {
                  request.headers.forEach(function (value, name) {
                    xhr.setRequestHeader(name, value);
                  });
                }

                if (request.signal) {
                  request.signal.addEventListener('abort', abortXhr);

                  xhr.onreadystatechange = function () {
                    // DONE (success or failure)
                    if (xhr.readyState === 4) {
                      request.signal.removeEventListener('abort', abortXhr);
                    }
                  };
                }

                xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
              })
            }

            fetch.polyfill = true;

            if (!global.fetch) {
              global.fetch = fetch;
              global.Headers = Headers;
              global.Request = Request;
              global.Response = Response;
            }

            exports.Headers = Headers;
            exports.Request = Request;
            exports.Response = Response;
            exports.fetch = fetch;

            Object.defineProperty(exports, '__esModule', { value: true });

          })));

        };
      };
    }
  }, { package: "@metamask/controllers>isomorphic-fetch>whatwg-fetch", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\wrappy\\wrappy.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\wrappy\wrappy.js
        return function (require, module, exports) {
          // Returns a wrapper function that returns a wrapped callback
          // The wrapper function should do some stuff, and return a
          // presumably different callback function.
          // This makes sure that own properties are retained, so that
          // decorations and such are not lost along the way.
          module.exports = wrappy
          function wrappy(fn, cb) {
            if (fn && cb) return wrappy(fn)(cb)

            if (typeof fn !== 'function')
              throw new TypeError('need wrapper function')

            Object.keys(fn).forEach(function (k) {
              wrapper[k] = fn[k]
            })

            return wrapper

            function wrapper() {
              var args = new Array(arguments.length)
              for (var i = 0; i < args.length; i++) {
                args[i] = arguments[i]
              }
              var ret = fn.apply(this, args)
              var cb = args[args.length - 1]
              if (typeof ret === 'function' && ret !== cb) {
                Object.keys(cb).forEach(function (k) {
                  ret[k] = cb[k]
                })
              }
              return ret
            }
          }

        };
      };
    }
  }, { package: "pump>once>wrappy", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\errors.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\errors.js
        return function (require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return function (d, b) {
              extendStatics(d, b);
              function __() { this.constructor = d; }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var SecurityError = /** @class */ (function (_super) {
            __extends(SecurityError, _super);
            function SecurityError() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            return SecurityError;
          }(Error));
          exports.SecurityError = SecurityError;
          var InvalidStateError = /** @class */ (function (_super) {
            __extends(InvalidStateError, _super);
            function InvalidStateError() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            return InvalidStateError;
          }(Error));
          exports.InvalidStateError = InvalidStateError;
          var NetworkError = /** @class */ (function (_super) {
            __extends(NetworkError, _super);
            function NetworkError() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            return NetworkError;
          }(Error));
          exports.NetworkError = NetworkError;
          var SyntaxError = /** @class */ (function (_super) {
            __extends(SyntaxError, _super);
            function SyntaxError() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            return SyntaxError;
          }(Error));
          exports.SyntaxError = SyntaxError;
          //# sourceMappingURL=errors.js.map
        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\index.js", { "./xml-http-request": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js", "./xml-http-request-event-target": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\index.js
        return function (require, module, exports) {
          "use strict";
          function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(require("./xml-http-request"));
          var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
          exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;
          //# sourceMappingURL=index.js.map
        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\progress-event.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\progress-event.js
        return function (require, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", { value: true });
          var ProgressEvent = /** @class */ (function () {
            function ProgressEvent(type) {
              this.type = type;
              this.bubbles = false;
              this.cancelable = false;
              this.loaded = 0;
              this.lengthComputable = false;
              this.total = 0;
            }
            return ProgressEvent;
          }());
          exports.ProgressEvent = ProgressEvent;
          //# sourceMappingURL=progress-event.js.map
        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\xml-http-request-event-target.js
        return function (require, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", { value: true });
          var XMLHttpRequestEventTarget = /** @class */ (function () {
            function XMLHttpRequestEventTarget() {
              this.listeners = {};
            }
            XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
              eventType = eventType.toLowerCase();
              this.listeners[eventType] = this.listeners[eventType] || [];
              this.listeners[eventType].push(listener.handleEvent || listener);
            };
            XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
              eventType = eventType.toLowerCase();
              if (!this.listeners[eventType]) {
                return;
              }
              var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
              if (index < 0) {
                return;
              }
              this.listeners[eventType].splice(index, 1);
            };
            XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
              var eventType = event.type.toLowerCase();
              event.target = this; // TODO: set event.currentTarget?
              if (this.listeners[eventType]) {
                for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                  var listener_1 = _a[_i];
                  listener_1.call(this, event);
                }
              }
              var listener = this["on" + eventType];
              if (listener) {
                listener.call(this, event);
              }
              return true;
            };
            return XMLHttpRequestEventTarget;
          }());
          exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
          //# sourceMappingURL=xml-http-request-event-target.js.map
        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-upload.js", { "./xml-http-request-event-target": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\xml-http-request-upload.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              "use strict";
              var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
              })();
              Object.defineProperty(exports, "__esModule", { value: true });
              var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
              var XMLHttpRequestUpload = /** @class */ (function (_super) {
                __extends(XMLHttpRequestUpload, _super);
                function XMLHttpRequestUpload() {
                  var _this = _super.call(this) || this;
                  _this._contentType = null;
                  _this._body = null;
                  _this._reset();
                  return _this;
                }
                XMLHttpRequestUpload.prototype._reset = function () {
                  this._contentType = null;
                  this._body = null;
                };
                XMLHttpRequestUpload.prototype._setData = function (data) {
                  if (data == null) {
                    return;
                  }
                  if (typeof data === 'string') {
                    if (data.length !== 0) {
                      this._contentType = 'text/plain;charset=UTF-8';
                    }
                    this._body = new Buffer(data, 'utf-8');
                  }
                  else if (Buffer.isBuffer(data)) {
                    this._body = data;
                  }
                  else if (data instanceof ArrayBuffer) {
                    var body = new Buffer(data.byteLength);
                    var view = new Uint8Array(data);
                    for (var i = 0; i < data.byteLength; i++) {
                      body[i] = view[i];
                    }
                    this._body = body;
                  }
                  else if (data.buffer && data.buffer instanceof ArrayBuffer) {
                    var body = new Buffer(data.byteLength);
                    var offset = data.byteOffset;
                    var view = new Uint8Array(data.buffer);
                    for (var i = 0; i < data.byteLength; i++) {
                      body[i] = view[i + offset];
                    }
                    this._body = body;
                  }
                  else {
                    throw new Error("Unsupported send() data " + data);
                  }
                };
                XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
                  if (this._contentType && !loweredHeaders['content-type']) {
                    headers['Content-Type'] = this._contentType;
                  }
                  if (this._body) {
                    headers['Content-Length'] = this._body.length.toString();
                  }
                };
                XMLHttpRequestUpload.prototype._startUpload = function (request) {
                  if (this._body) {
                    request.write(this._body);
                  }
                  request.end();
                };
                return XMLHttpRequestUpload;
              }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
              exports.XMLHttpRequestUpload = XMLHttpRequestUpload;

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js", { "./errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\errors.js", "./progress-event": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\progress-event.js", "./xml-http-request-event-target": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js", "./xml-http-request-upload": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2-cookies\\dist\\xml-http-request-upload.js", "_process": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\process\\browser.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "cookiejar": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\cookiejar\\cookiejar.js", "http": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\stream-http\\index.js", "https": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\https-browserify\\index.js", "os": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\os-browserify\\browser.js", "url": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\url\\url.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2-cookies\dist\xml-http-request.js
        return function (require, module, exports) {
          (function (process, Buffer) {
            (function () {
              "use strict";
              var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
              })();
              var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];
                  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
                }
                return t;
              };
              Object.defineProperty(exports, "__esModule", { value: true });
              var http = require("http");
              var https = require("https");
              var os = require("os");
              var url = require("url");
              var progress_event_1 = require("./progress-event");
              var errors_1 = require("./errors");
              var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
              var xml_http_request_upload_1 = require("./xml-http-request-upload");
              var Cookie = require("cookiejar");
              var XMLHttpRequest = /** @class */ (function (_super) {
                __extends(XMLHttpRequest, _super);
                function XMLHttpRequest(options) {
                  if (options === void 0) { options = {}; }
                  var _this = _super.call(this) || this;
                  _this.UNSENT = XMLHttpRequest.UNSENT;
                  _this.OPENED = XMLHttpRequest.OPENED;
                  _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
                  _this.LOADING = XMLHttpRequest.LOADING;
                  _this.DONE = XMLHttpRequest.DONE;
                  _this.onreadystatechange = null;
                  _this.readyState = XMLHttpRequest.UNSENT;
                  _this.response = null;
                  _this.responseText = '';
                  _this.responseType = '';
                  _this.status = 0; // TODO: UNSENT?
                  _this.statusText = '';
                  _this.timeout = 0;
                  _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
                  _this.responseUrl = '';
                  _this.withCredentials = false;
                  _this._method = null;
                  _this._url = null;
                  _this._sync = false;
                  _this._headers = {};
                  _this._loweredHeaders = {};
                  _this._mimeOverride = null; // TODO: is type right?
                  _this._request = null;
                  _this._response = null;
                  _this._responseParts = null;
                  _this._responseHeaders = null;
                  _this._aborting = null; // TODO: type?
                  _this._error = null; // TODO: type?
                  _this._loadedBytes = 0;
                  _this._totalBytes = 0;
                  _this._lengthComputable = false;
                  _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
                  _this._restrictedHeaders = {
                    'accept-charset': true,
                    'accept-encoding': true,
                    'access-control-request-headers': true,
                    'access-control-request-method': true,
                    connection: true,
                    'content-length': true,
                    cookie: true,
                    cookie2: true,
                    date: true,
                    dnt: true,
                    expect: true,
                    host: true,
                    'keep-alive': true,
                    origin: true,
                    referer: true,
                    te: true,
                    trailer: true,
                    'transfer-encoding': true,
                    upgrade: true,
                    'user-agent': true,
                    via: true
                  };
                  _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
                  _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
                  _this._anonymous = options.anon || false;
                  return _this;
                }
                XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
                  if (async === void 0) { async = true; }
                  method = method.toUpperCase();
                  if (this._restrictedMethods[method]) {
                    throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
                  }
                  ;
                  var xhrUrl = this._parseUrl(url, user, password);
                  if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {
                    // TODO(pwnall): terminate abort(), terminate send()
                  }
                  this._method = method;
                  this._url = xhrUrl;
                  this._sync = !async;
                  this._headers = {};
                  this._loweredHeaders = {};
                  this._mimeOverride = null;
                  this._setReadyState(XMLHttpRequest.OPENED);
                  this._request = null;
                  this._response = null;
                  this.status = 0;
                  this.statusText = '';
                  this._responseParts = [];
                  this._responseHeaders = null;
                  this._loadedBytes = 0;
                  this._totalBytes = 0;
                  this._lengthComputable = false;
                };
                XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
                  if (this.readyState !== XMLHttpRequest.OPENED) {
                    throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
                  }
                  var loweredName = name.toLowerCase();
                  if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
                    console.warn("Refused to set unsafe header \"" + name + "\"");
                    return;
                  }
                  value = value.toString();
                  if (this._loweredHeaders[loweredName] != null) {
                    name = this._loweredHeaders[loweredName];
                    this._headers[name] = this._headers[name] + ", " + value;
                  }
                  else {
                    this._loweredHeaders[loweredName] = name;
                    this._headers[name] = value;
                  }
                };
                XMLHttpRequest.prototype.send = function (data) {
                  if (this.readyState !== XMLHttpRequest.OPENED) {
                    throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
                  }
                  if (this._request) {
                    throw new XMLHttpRequest.InvalidStateError('send() already called');
                  }
                  switch (this._url.protocol) {
                    case 'file:':
                      return this._sendFile(data);
                    case 'http:':
                    case 'https:':
                      return this._sendHttp(data);
                    default:
                      throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
                  }
                };
                XMLHttpRequest.prototype.abort = function () {
                  if (this._request == null) {
                    return;
                  }
                  this._request.abort();
                  this._setError();
                  this._dispatchProgress('abort');
                  this._dispatchProgress('loadend');
                };
                XMLHttpRequest.prototype.getResponseHeader = function (name) {
                  if (this._responseHeaders == null || name == null) {
                    return null;
                  }
                  var loweredName = name.toLowerCase();
                  return this._responseHeaders.hasOwnProperty(loweredName)
                    ? this._responseHeaders[name.toLowerCase()]
                    : null;
                };
                XMLHttpRequest.prototype.getAllResponseHeaders = function () {
                  var _this = this;
                  if (this._responseHeaders == null) {
                    return '';
                  }
                  return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
                };
                XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
                  if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
                    throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
                  }
                  this._mimeOverride = mimeType.toLowerCase();
                };
                XMLHttpRequest.prototype.nodejsSet = function (options) {
                  this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
                  this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
                  if (options.hasOwnProperty('baseUrl')) {
                    if (options.baseUrl != null) {
                      var parsedUrl = url.parse(options.baseUrl, false, true);
                      if (!parsedUrl.protocol) {
                        throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                      }
                    }
                    this.nodejsBaseUrl = options.baseUrl;
                  }
                };
                XMLHttpRequest.nodejsSet = function (options) {
                  XMLHttpRequest.prototype.nodejsSet(options);
                };
                XMLHttpRequest.prototype._setReadyState = function (readyState) {
                  this.readyState = readyState;
                  this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
                };
                XMLHttpRequest.prototype._sendFile = function (data) {
                  // TODO
                  throw new Error('Protocol file: not implemented');
                };
                XMLHttpRequest.prototype._sendHttp = function (data) {
                  if (this._sync) {
                    throw new Error('Synchronous XHR processing not implemented');
                  }
                  if (data && (this._method === 'GET' || this._method === 'HEAD')) {
                    console.warn("Discarding entity body for " + this._method + " requests");
                    data = null;
                  }
                  else {
                    data = data || '';
                  }
                  this.upload._setData(data);
                  this._finalizeHeaders();
                  this._sendHxxpRequest();
                };
                XMLHttpRequest.prototype._sendHxxpRequest = function () {
                  var _this = this;
                  if (this.withCredentials) {
                    var cookie = XMLHttpRequest.cookieJar
                      .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
                    this._headers.cookie = this._headers.cookie2 = cookie;
                  }
                  var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
                  var requestMethod = hxxp.request.bind(hxxp);
                  var request = requestMethod({
                    hostname: this._url.hostname,
                    port: +this._url.port,
                    path: this._url.path,
                    auth: this._url.auth,
                    method: this._method,
                    headers: this._headers,
                    agent: agent
                  });
                  this._request = request;
                  if (this.timeout) {
                    request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
                  }
                  request.on('response', function (response) { return _this._onHttpResponse(request, response); });
                  request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
                  this.upload._startUpload(request);
                  if (this._request === request) {
                    this._dispatchProgress('loadstart');
                  }
                };
                XMLHttpRequest.prototype._finalizeHeaders = function () {
                  this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
                  this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
                };
                XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
                  var _this = this;
                  if (this._request !== request) {
                    return;
                  }
                  if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
                    XMLHttpRequest.cookieJar
                      .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
                  }
                  if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
                    this._url = this._parseUrl(response.headers.location);
                    this._method = 'GET';
                    if (this._loweredHeaders['content-type']) {
                      delete this._headers[this._loweredHeaders['content-type']];
                      delete this._loweredHeaders['content-type'];
                    }
                    if (this._headers['Content-Type'] != null) {
                      delete this._headers['Content-Type'];
                    }
                    delete this._headers['Content-Length'];
                    this.upload._reset();
                    this._finalizeHeaders();
                    this._sendHxxpRequest();
                    return;
                  }
                  this._response = response;
                  this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
                  this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
                  this._response.on('close', function () { return _this._onHttpResponseClose(response); });
                  this.responseUrl = this._url.href.split('#')[0];
                  this.status = response.statusCode;
                  this.statusText = http.STATUS_CODES[this.status];
                  this._parseResponseHeaders(response);
                  var lengthString = this._responseHeaders['content-length'] || '';
                  this._totalBytes = +lengthString;
                  this._lengthComputable = !!lengthString;
                  this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
                };
                XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
                  if (this._response !== response) {
                    return;
                  }
                  this._responseParts.push(new Buffer(data));
                  this._loadedBytes += data.length;
                  if (this.readyState !== XMLHttpRequest.LOADING) {
                    this._setReadyState(XMLHttpRequest.LOADING);
                  }
                  this._dispatchProgress('progress');
                };
                XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
                  if (this._response !== response) {
                    return;
                  }
                  this._parseResponse();
                  this._request = null;
                  this._response = null;
                  this._setReadyState(XMLHttpRequest.DONE);
                  this._dispatchProgress('load');
                  this._dispatchProgress('loadend');
                };
                XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
                  if (this._response !== response) {
                    return;
                  }
                  var request = this._request;
                  this._setError();
                  request.abort();
                  this._setReadyState(XMLHttpRequest.DONE);
                  this._dispatchProgress('error');
                  this._dispatchProgress('loadend');
                };
                XMLHttpRequest.prototype._onHttpTimeout = function (request) {
                  if (this._request !== request) {
                    return;
                  }
                  this._setError();
                  request.abort();
                  this._setReadyState(XMLHttpRequest.DONE);
                  this._dispatchProgress('timeout');
                  this._dispatchProgress('loadend');
                };
                XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
                  if (this._request !== request) {
                    return;
                  }
                  this._setError();
                  request.abort();
                  this._setReadyState(XMLHttpRequest.DONE);
                  this._dispatchProgress('error');
                  this._dispatchProgress('loadend');
                };
                XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
                  var event = new XMLHttpRequest.ProgressEvent(eventType);
                  event.lengthComputable = this._lengthComputable;
                  event.loaded = this._loadedBytes;
                  event.total = this._totalBytes;
                  this.dispatchEvent(event);
                };
                XMLHttpRequest.prototype._setError = function () {
                  this._request = null;
                  this._response = null;
                  this._responseHeaders = null;
                  this._responseParts = null;
                };
                XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
                  var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
                  var xhrUrl = url.parse(absoluteUrl, false, true);
                  xhrUrl.hash = null;
                  var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
                  if (xhrUser || xhrPassword || user || password) {
                    xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
                  }
                  return xhrUrl;
                };
                XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
                  this._responseHeaders = {};
                  for (var name_1 in response.headers) {
                    var loweredName = name_1.toLowerCase();
                    if (this._privateHeaders[loweredName]) {
                      continue;
                    }
                    this._responseHeaders[loweredName] = response.headers[name_1];
                  }
                  if (this._mimeOverride != null) {
                    this._responseHeaders['content-type'] = this._mimeOverride;
                  }
                };
                XMLHttpRequest.prototype._parseResponse = function () {
                  var buffer = Buffer.concat(this._responseParts);
                  this._responseParts = null;
                  switch (this.responseType) {
                    case 'json':
                      this.responseText = null;
                      try {
                        this.response = JSON.parse(buffer.toString('utf-8'));
                      }
                      catch (_a) {
                        this.response = null;
                      }
                      return;
                    case 'buffer':
                      this.responseText = null;
                      this.response = buffer;
                      return;
                    case 'arraybuffer':
                      this.responseText = null;
                      var arrayBuffer = new ArrayBuffer(buffer.length);
                      var view = new Uint8Array(arrayBuffer);
                      for (var i = 0; i < buffer.length; i++) {
                        view[i] = buffer[i];
                      }
                      this.response = arrayBuffer;
                      return;
                    case 'text':
                    default:
                      try {
                        this.responseText = buffer.toString(this._parseResponseEncoding());
                      }
                      catch (_b) {
                        this.responseText = buffer.toString('binary');
                      }
                      this.response = this.responseText;
                  }
                };
                XMLHttpRequest.prototype._parseResponseEncoding = function () {
                  return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
                };
                XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
                XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
                XMLHttpRequest.NetworkError = errors_1.NetworkError;
                XMLHttpRequest.SecurityError = errors_1.SecurityError;
                XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
                XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
                XMLHttpRequest.UNSENT = 0;
                XMLHttpRequest.OPENED = 1;
                XMLHttpRequest.HEADERS_RECEIVED = 2;
                XMLHttpRequest.LOADING = 3;
                XMLHttpRequest.DONE = 4;
                XMLHttpRequest.cookieJar = Cookie.CookieJar();
                return XMLHttpRequest;
              }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
              exports.XMLHttpRequest = XMLHttpRequest;
              XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
              XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
              XMLHttpRequest.prototype.nodejsBaseUrl = null;

            }).call(this)
          }).call(this, require('_process'), require("buffer").Buffer)

        };
      };
    }
  }, { package: "@metamask/controllers>web3>xhr2-cookies", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xhr2\\lib\\browser.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xhr2\lib\browser.js
        return function (require, module, exports) {
          module.exports = XMLHttpRequest;

        };
      };
    }
  }, { package: "ethjs>ethjs-provider-http>xhr2", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\xtend\\immutable.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\node_modules\xtend\immutable.js
        return function (require, module, exports) {
          module.exports = extend

          var hasOwnProperty = Object.prototype.hasOwnProperty;

          function extend() {
            var target = {}

            for (var i = 0; i < arguments.length; i++) {
              var source = arguments[i]

              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
                }
              }
            }

            return target
          }

        };
      };
    }
  }, { package: "watchify>xtend", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\alerts.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WEB3_SHIM_USAGE_ALERT_STATES = exports.TOGGLEABLE_ALERT_TYPES = exports.ALERT_TYPES = void 0;
          const ALERT_TYPES = {
            unconnectedAccount: 'unconnectedAccount',
            web3ShimUsage: 'web3ShimUsage',
            invalidCustomNetwork: 'invalidCustomNetwork'
          };
          /**
           * Alerts that can be enabled or disabled by the user.
           */

          exports.ALERT_TYPES = ALERT_TYPES;
          const TOGGLEABLE_ALERT_TYPES = [ALERT_TYPES.unconnectedAccount, ALERT_TYPES.web3ShimUsage];
          exports.TOGGLEABLE_ALERT_TYPES = TOGGLEABLE_ALERT_TYPES;
          const WEB3_SHIM_USAGE_ALERT_STATES = {
            RECORDED: 1,
            DISMISSED: 2
          };
          exports.WEB3_SHIM_USAGE_ALERT_STATES = WEB3_SHIM_USAGE_ALERT_STATES;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts", { "./permissions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\permissions.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\app.ts
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.UNKNOWN_TICKER_SYMBOL = exports.SUBJECT_TYPES = exports.POLLING_TOKEN_ENVIRONMENT_TYPES = exports.PLATFORM_OPERA = exports.PLATFORM_FIREFOX = exports.PLATFORM_EDGE = exports.PLATFORM_CHROME = exports.PLATFORM_BRAVE = exports.ORIGIN_METAMASK = exports.METAMASK_PROD_CHROME_ID = exports.METAMASK_FLASK_CHROME_ID = exports.METAMASK_BETA_CHROME_ID = exports.MESSAGE_TYPE = exports.FIREFOX_BUILD_IDS = exports.ENVIRONMENT_TYPE_POPUP = exports.ENVIRONMENT_TYPE_NOTIFICATION = exports.ENVIRONMENT_TYPE_FULLSCREEN = exports.ENVIRONMENT_TYPE_BACKGROUND = exports.CHROME_BUILD_IDS = exports.BuildType = void 0;

          var _permissions = require("./permissions");

          const ENVIRONMENT_TYPE_POPUP = 'popup';
          exports.ENVIRONMENT_TYPE_POPUP = ENVIRONMENT_TYPE_POPUP;
          const ENVIRONMENT_TYPE_NOTIFICATION = 'notification';
          exports.ENVIRONMENT_TYPE_NOTIFICATION = ENVIRONMENT_TYPE_NOTIFICATION;
          const ENVIRONMENT_TYPE_FULLSCREEN = 'fullscreen';
          exports.ENVIRONMENT_TYPE_FULLSCREEN = ENVIRONMENT_TYPE_FULLSCREEN;
          const ENVIRONMENT_TYPE_BACKGROUND = 'background';
          /**
           * The distribution this build is intended for.
           *
           * This should be kept in-sync with the `BuildType` map in `development/build/utils.js`.
           */

          exports.ENVIRONMENT_TYPE_BACKGROUND = ENVIRONMENT_TYPE_BACKGROUND;
          const BuildType = {
            beta: 'beta',
            flask: 'flask',
            main: 'main'
          };
          exports.BuildType = BuildType;
          const PLATFORM_BRAVE = 'Brave';
          exports.PLATFORM_BRAVE = PLATFORM_BRAVE;
          const PLATFORM_CHROME = 'Chrome';
          exports.PLATFORM_CHROME = PLATFORM_CHROME;
          const PLATFORM_EDGE = 'Edge';
          exports.PLATFORM_EDGE = PLATFORM_EDGE;
          const PLATFORM_FIREFOX = 'Firefox';
          exports.PLATFORM_FIREFOX = PLATFORM_FIREFOX;
          const PLATFORM_OPERA = 'Opera';
          exports.PLATFORM_OPERA = PLATFORM_OPERA;
          const MESSAGE_TYPE = {
            ADD_ETHEREUM_CHAIN: 'wallet_addEthereumChain',
            ETH_ACCOUNTS: _permissions.RestrictedMethods.eth_accounts,
            ETH_DECRYPT: 'eth_decrypt',
            ETH_GET_ENCRYPTION_PUBLIC_KEY: 'eth_getEncryptionPublicKey',
            ETH_REQUEST_ACCOUNTS: 'eth_requestAccounts',
            ETH_SIGN: 'eth_sign',
            ETH_SIGN_TYPED_DATA: 'eth_signTypedData',
            ETH_SIGN_TYPED_DATA_V3: 'eth_signTypedData_v3',
            ETH_SIGN_TYPED_DATA_V4: 'eth_signTypedData_v4',
            GET_PROVIDER_STATE: 'metamask_getProviderState',
            LOG_WEB3_SHIM_USAGE: 'metamask_logWeb3ShimUsage',
            PERSONAL_SIGN: 'personal_sign',
            SEND_METADATA: 'metamask_sendDomainMetadata',
            SWITCH_ETHEREUM_CHAIN: 'wallet_switchEthereumChain',
            WALLET_REQUEST_PERMISSIONS: 'wallet_requestPermissions',
            WATCH_ASSET: 'wallet_watchAsset',
            WATCH_ASSET_LEGACY: 'metamask_watchAsset',
            ///: BEGIN:ONLY_INCLUDE_IN(flask)
            SNAP_CONFIRM: _permissions.RestrictedMethods.snap_confirm ///: END:ONLY_INCLUDE_IN

          };
          /**
           * The different kinds of subjects that MetaMask may interact with, including
           * third parties and itself (e.g. when the background communicated with the UI).
           */

          exports.MESSAGE_TYPE = MESSAGE_TYPE;
          const SUBJECT_TYPES = {
            EXTENSION: 'extension',
            INTERNAL: 'internal',
            UNKNOWN: 'unknown',
            WEBSITE: 'website',
            ///: BEGIN:ONLY_INCLUDE_IN(flask)
            SNAP: 'snap' ///: END:ONLY_INCLUDE_IN

          };
          exports.SUBJECT_TYPES = SUBJECT_TYPES;
          const POLLING_TOKEN_ENVIRONMENT_TYPES = {
            [ENVIRONMENT_TYPE_POPUP]: 'popupGasPollTokens',
            [ENVIRONMENT_TYPE_NOTIFICATION]: 'notificationGasPollTokens',
            [ENVIRONMENT_TYPE_FULLSCREEN]: 'fullScreenGasPollTokens'
          };
          exports.POLLING_TOKEN_ENVIRONMENT_TYPES = POLLING_TOKEN_ENVIRONMENT_TYPES;
          const ORIGIN_METAMASK = 'metamask';
          exports.ORIGIN_METAMASK = ORIGIN_METAMASK;
          const METAMASK_BETA_CHROME_ID = 'pbbkamfgmaedccnfkmjcofcecjhfgldn';
          exports.METAMASK_BETA_CHROME_ID = METAMASK_BETA_CHROME_ID;
          const METAMASK_PROD_CHROME_ID = 'nkbihfbeogaeaoehlefnkodbefgpgknn';
          exports.METAMASK_PROD_CHROME_ID = METAMASK_PROD_CHROME_ID;
          const METAMASK_FLASK_CHROME_ID = 'ljfoeinjpaedjfecbmggjgodbgkmjkjk';
          exports.METAMASK_FLASK_CHROME_ID = METAMASK_FLASK_CHROME_ID;
          const CHROME_BUILD_IDS = [METAMASK_BETA_CHROME_ID, METAMASK_PROD_CHROME_ID, METAMASK_FLASK_CHROME_ID];
          exports.CHROME_BUILD_IDS = CHROME_BUILD_IDS;
          const METAMASK_BETA_FIREFOX_ID = 'webextension-beta@metamask.io';
          const METAMASK_PROD_FIREFOX_ID = 'webextension@metamask.io';
          const METAMASK_FLASK_FIREFOX_ID = 'webextension-flask@metamask.io';
          const FIREFOX_BUILD_IDS = [METAMASK_BETA_FIREFOX_ID, METAMASK_PROD_FIREFOX_ID, METAMASK_FLASK_FIREFOX_ID];
          exports.FIREFOX_BUILD_IDS = FIREFOX_BUILD_IDS;
          const UNKNOWN_TICKER_SYMBOL = 'UNKNOWN';
          exports.UNKNOWN_TICKER_SYMBOL = UNKNOWN_TICKER_SYMBOL;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js", { "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\gas.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.PRIORITY_LEVELS = exports.NETWORK_CONGESTION_THRESHOLDS = exports.MIN_GAS_LIMIT_HEX = exports.GAS_RECOMMENDATIONS = exports.GAS_LIMITS = exports.GAS_ESTIMATE_TYPES = exports.EDIT_GAS_MODES = exports.CUSTOM_GAS_ESTIMATE = void 0;

          var _ethereumjsUtil = require("ethereumjs-util");

          const ONE_HUNDRED_THOUSAND = 100000;
          const MIN_GAS_LIMIT_DEC = '21000';
          const MIN_GAS_LIMIT_HEX = parseInt(MIN_GAS_LIMIT_DEC, 10).toString(16);
          exports.MIN_GAS_LIMIT_HEX = MIN_GAS_LIMIT_HEX;
          const GAS_LIMITS = {
            // maximum gasLimit of a simple send
            SIMPLE: (0, _ethereumjsUtil.addHexPrefix)(MIN_GAS_LIMIT_HEX),
            // a base estimate for token transfers.
            BASE_TOKEN_ESTIMATE: (0, _ethereumjsUtil.addHexPrefix)(ONE_HUNDRED_THOUSAND.toString(16))
          };
          /**
           * @typedef {object} GasEstimateTypes
           * @property {'fee-market'} FEE_MARKET - A gas estimate for a fee market
           *  transaction generated by our gas estimation API.
           * @property {'legacy'} LEGACY - A gas estimate for a legacy Transaction
           *  generated by our gas estimation API.
           * @property {'eth_gasPrice'} ETH_GAS_PRICE - A gas estimate provided by the
           *  Ethereum node via eth_gasPrice.
           * @property {'none'} NONE - No gas estimate available.
           */

          /**
           * These are already declared in @metamask/controllers but importing them from
           * that module and re-exporting causes the UI bundle size to expand beyond 4MB
           *
           * @type {GasEstimateTypes}
           */

          exports.GAS_LIMITS = GAS_LIMITS;
          const GAS_ESTIMATE_TYPES = {
            FEE_MARKET: 'fee-market',
            LEGACY: 'legacy',
            ETH_GASPRICE: 'eth_gasPrice',
            NONE: 'none'
          };
          /**
           * These represent gas recommendation levels presented in the UI
           */

          exports.GAS_ESTIMATE_TYPES = GAS_ESTIMATE_TYPES;
          const GAS_RECOMMENDATIONS = {
            LOW: 'low',
            MEDIUM: 'medium',
            HIGH: 'high'
          };
          /**
           * These represent types of gas estimation
           */

          exports.GAS_RECOMMENDATIONS = GAS_RECOMMENDATIONS;
          const PRIORITY_LEVELS = {
            TEN_PERCENT_INCREASED: 'tenPercentIncreased',
            LOW: 'low',
            MEDIUM: 'medium',
            HIGH: 'high',
            CUSTOM: 'custom',
            DAPP_SUGGESTED: 'dappSuggested'
          };
          /**
           * Represents the user customizing their gas preference
           */

          exports.PRIORITY_LEVELS = PRIORITY_LEVELS;
          const CUSTOM_GAS_ESTIMATE = 'custom';
          /**
           * These represent the different edit modes presented in the UI
           */

          exports.CUSTOM_GAS_ESTIMATE = CUSTOM_GAS_ESTIMATE;
          const EDIT_GAS_MODES = {
            SPEED_UP: 'speed-up',
            CANCEL: 'cancel',
            MODIFY_IN_PLACE: 'modify-in-place',
            SWAPS: 'swaps'
          };
          /**
           * Represents levels for `networkCongestion` (calculated along with gas fee
           * estimates; represents a number between 0 and 1) that we use to render the
           * network status slider on the send transaction screen and inform users when
           * gas fees are high
           */

          exports.EDIT_GAS_MODES = EDIT_GAS_MODES;
          const NETWORK_CONGESTION_THRESHOLDS = {
            NOT_BUSY: 0,
            STABLE: 0.33,
            BUSY: 0.66
          };
          exports.NETWORK_CONGESTION_THRESHOLDS = NETWORK_CONGESTION_THRESHOLDS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\hardware-wallets.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WEBHID_CONNECTED_STATUSES = exports.TRANSPORT_STATES = exports.LEDGER_USB_VENDOR_ID = exports.LEDGER_TRANSPORT_TYPES = exports.KEYRING_TYPES = exports.KEYRING_NAMES = exports.DEVICE_NAMES = exports.AFFILIATE_TUTORIAL_LINKS = exports.AFFILIATE_LINKS = void 0;

          /**
           * Accounts can be instantiated from simple, HD or the multiple hardware wallet
           * keyring types. Both simple and HD are treated as default but we do special
           * case accounts managed by a hardware wallet.
           */
          const KEYRING_TYPES = {
            LEDGER: 'Ledger Hardware',
            TREZOR: 'Trezor Hardware',
            LATTICE: 'Lattice Hardware',
            QR: 'QR Hardware Wallet Device',
            IMPORTED: 'Simple Key Pair'
          };
          exports.KEYRING_TYPES = KEYRING_TYPES;
          const DEVICE_NAMES = {
            LEDGER: 'ledger',
            TREZOR: 'trezor',
            QR: 'QR Hardware',
            LATTICE: 'lattice'
          };
          exports.DEVICE_NAMES = DEVICE_NAMES;
          const KEYRING_NAMES = {
            LEDGER: 'Ledger',
            TREZOR: 'Trezor',
            QR: 'QR',
            LATTICE: 'Lattice1'
          };
          /**
           * Used for setting the users preference for ledger transport type
           */

          exports.KEYRING_NAMES = KEYRING_NAMES;
          const LEDGER_TRANSPORT_TYPES = {
            LIVE: 'ledgerLive',
            WEBHID: 'webhid',
            U2F: 'u2f'
          };
          exports.LEDGER_TRANSPORT_TYPES = LEDGER_TRANSPORT_TYPES;
          const LEDGER_USB_VENDOR_ID = '0x2c97';
          exports.LEDGER_USB_VENDOR_ID = LEDGER_USB_VENDOR_ID;
          const WEBHID_CONNECTED_STATUSES = {
            CONNECTED: 'connected',
            NOT_CONNECTED: 'notConnected',
            UNKNOWN: 'unknown'
          };
          exports.WEBHID_CONNECTED_STATUSES = WEBHID_CONNECTED_STATUSES;
          const TRANSPORT_STATES = {
            NONE: 'NONE',
            VERIFIED: 'VERIFIED',
            DEVICE_OPEN_FAILURE: 'DEVICE_OPEN_FAILURE',
            UNKNOWN_FAILURE: 'UNKNOWN_FAILURE'
          };
          exports.TRANSPORT_STATES = TRANSPORT_STATES;
          const AFFILIATE_LINKS = {
            LEDGER: 'https://shop.ledger.com/?r=17c4991a03fa',
            GRIDPLUS: 'https://gridplus.io/?afmc=7p',
            TREZOR: 'https://shop.trezor.io/product/trezor-one-black?offer_id=35&aff_id=11009',
            KEYSTONE: 'https://shop.keyst.one/?rfsn=6088257.656b3e9&utm_source=refersion&utm_medium=affiliate&utm_campaign=6088257.656b3e9',
            AIRGAP: 'https://airgap.it/',
            COOLWALLET: 'https://www.coolwallet.io/',
            DCENT: 'https://dcentwallet.com/'
          };
          exports.AFFILIATE_LINKS = AFFILIATE_LINKS;
          const AFFILIATE_TUTORIAL_LINKS = {
            LEDGER: 'https://support.ledger.com/hc/en-us/articles/4404366864657-Set-up-and-use-MetaMask-to-access-your-Ledger-Ethereum-ETH-account?docs=true',
            GRIDPLUS: 'https://docs.gridplus.io/setup/metamask',
            TREZOR: 'https://wiki.trezor.io/Apps:MetaMask',
            KEYSTONE: 'https://support.keyst.one/3rd-party-wallets/eth-and-web3-wallets-keystone/bind-metamask-with-keystone',
            AIRGAP: 'https://support.airgap.it/guides/metamask/',
            COOLWALLET: 'https://www.coolwallet.io/metamask-step-by-step-guides/',
            DCENT: 'https://medium.com/dcentwallet/dcent-wallet-now-supports-qr-based-protocol-to-link-with-metamask-57555f02603f'
          };
          exports.AFFILIATE_TUTORIAL_LINKS = AFFILIATE_TUTORIAL_LINKS;


        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\labels.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\labels.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TRUNCATED_NAME_CHAR_LIMIT = exports.TRUNCATED_ADDRESS_START_CHARS = exports.TRUNCATED_ADDRESS_END_CHARS = void 0;
          // The character limit on ENS names, nicknames and addresses before we truncate
          const TRUNCATED_NAME_CHAR_LIMIT = 11; // The number of characters to slice from the beginning of an address for truncated format:
          // `${TRUNCATED_ADDRESS_START_CHARS}...${TRUNCATED_ADDRESS_END_CHARS}`

          exports.TRUNCATED_NAME_CHAR_LIMIT = TRUNCATED_NAME_CHAR_LIMIT;
          const TRUNCATED_ADDRESS_START_CHARS = 5; // The number of characters to slice from the end of an address for truncated format:
          // `${TRUNCATED_ADDRESS_START_CHARS}...${TRUNCATED_ADDRESS_END_CHARS}`

          exports.TRUNCATED_ADDRESS_START_CHARS = TRUNCATED_ADDRESS_START_CHARS;
          const TRUNCATED_ADDRESS_END_CHARS = 4;
          exports.TRUNCATED_ADDRESS_END_CHARS = TRUNCATED_ADDRESS_END_CHARS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\metametrics.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TRAITS = exports.REJECT_NOTFICIATION_CLOSE_SIG = exports.REJECT_NOTFICIATION_CLOSE = exports.METAMETRICS_BACKGROUND_PAGE_OBJECT = exports.METAMETRICS_ANONYMOUS_ID = exports.EVENT_NAMES = exports.EVENT = exports.CONTEXT_PROPS = void 0;
          // Type Imports

          /**
           * @typedef {__import__('../../shared/constants/app').EnvironmentType} EnvironmentType
           */
          // Type Declarations

          /**
           * Used to attach context of where the user was at in the application when the
           * event was triggered. Also included as full details of the current page in
           * page events.
           *
           * @typedef {object} MetaMetricsPageObject
           * @property {string} [path] - the path of the current page (e.g /home)
           * @property {string} [title] - the title of the current page (e.g 'home')
           * @property {string} [url] - the fully qualified url of the current page
           */

          /**
           * For metamask, this is the dapp that triggered an interaction
           *
           * @typedef {object} MetaMetricsReferrerObject
           * @property {string} [url] - the origin of the dapp issuing the
           *  notification
           */

          /**
           * We attach context to every meta metrics event that help to qualify our
           * analytics. This type has all optional values because it represents a
           * returned object from a method call. Ideally app and userAgent are
           * defined on every event. This is confirmed in the getTrackMetaMetricsEvent
           * function, but still provides the consumer a way to override these values if
           * necessary.
           *
           * @typedef {object} MetaMetricsContext
           * @property {object} app - Application metadata.
           * @property {string} app.name - the name of the application tracking the event
           * @property {string} app.version - the version of the application
           * @property {string} userAgent - the useragent string of the user
           * @property {MetaMetricsPageObject} [page] - an object representing details of
           *  the current page
           * @property {MetaMetricsReferrerObject} [referrer] - for metamask, this is the
           *  dapp that triggered an interaction
           */

          /**
           * @typedef {object} MetaMetricsEventPayload
           * @property {string} event - event name to track
           * @property {string} category - category to associate event to
           * @property {string} [environmentType] - The type of environment this event
           *  occurred in. Defaults to the background process type
           * @property {object} [properties] - object of custom values to track, keys
           *  in this object must be in snake_case
           * @property {object} [sensitiveProperties] - Object of sensitive values to
           *  track. Keys in this object must be in snake_case. These properties will be
           *  sent in an additional event that excludes the user's metaMetricsId
           * @property {number} [revenue] - amount of currency that event creates in
           *  revenue for MetaMask
           * @property {string} [currency] - ISO 4127 format currency for events with
           *  revenue, defaults to US dollars
           * @property {number} [value] - Abstract business "value" attributable to
           *  customers who trigger this event
           * @property {MetaMetricsPageObject} [page] - the page/route that the event
           *  occurred on
           * @property {MetaMetricsReferrerObject} [referrer] - the origin of the dapp
           *  that triggered the event
           */

          /**
           * @typedef {object} MetaMetricsEventOptions
           * @property {boolean} [isOptIn] - happened during opt in/out workflow
           * @property {boolean} [flushImmediately] - When true will automatically flush
           *  the segment queue after tracking the event. Recommended if the result of
           *  tracking the event must be known before UI transition or update
           * @property {boolean} [excludeMetaMetricsId] - whether to exclude the user's
           *  metametrics id for anonymity
           * @property {string} [metaMetricsId] - an override for the metaMetricsId in
           *  the event one is created as part of an asynchronous workflow, such as
           *  awaiting the result of the metametrics opt-in function that generates the
           *  user's metametrics id
           * @property {boolean} [matomoEvent] - is this event a holdover from matomo
           *  that needs further migration? when true, sends the data to a special
           *  segment source that marks the event data as not conforming to our schema
           */

          /**
           * @typedef {object} MetaMetricsEventFragment
           * @property {string} successEvent - The event name to fire when the fragment
           *  is closed in an affirmative action.
           * @property {string} [failureEvent] - The event name to fire when the fragment
           *  is closed with a rejection.
           * @property {string} [initialEvent] - An event name to fire immediately upon
           *  fragment creation. This is useful for building funnels in mixpanel and for
           *  reduction of code duplication.
           * @property {string} category - the event category to use for both the success
           *  and failure events
           * @property {boolean} [persist] - Should this fragment be persisted in
           *  state and progressed after the extension is locked and unlocked.
           * @property {number} [timeout] - Time in seconds the event should be persisted
           *  for. After the timeout the fragment will be closed as abandoned. if not
           *  supplied the fragment is stored indefinitely.
           * @property {number} [lastUpdated] - Date.now() when the fragment was last
           *  updated. Used to determine if the timeout has expired and the fragment
           *  should be closed.
           * @property {object} [properties] - Object of custom values to track, keys in
           *  this object must be in snake_case.
           * @property {object} [sensitiveProperties] - Object of sensitive values to
           *  track. Keys in this object must be in snake_case. These properties will be
           *  sent in an additional event that excludes the user's metaMetricsId
           * @property {number} [revenue] - amount of currency that event creates in
           *  revenue for MetaMask if fragment is successful.
           * @property {string} [currency] - ISO 4127 format currency for events with
           *  revenue, defaults to US dollars
           * @property {number} [value] - Abstract business "value" attributable to
           *  customers who successfully complete this fragment
           * @property {MetaMetricsPageObject} [page] - the page/route that the event
           *  occurred on
           * @property {MetaMetricsReferrerObject} [referrer] - the origin of the dapp
           *  that initiated the event fragment.
           * @property {string} [uniqueIdentifier] - optional argument to override the
           *  automatic generation of UUID for the event fragment. This is useful when
           *  tracking events for subsystems that already generate UUIDs so to avoid
           *  unnecessary lookups and reduce accidental duplication.
           */

          /**
           * Represents the shape of data sent to the segment.track method.
           *
           * @typedef {object} SegmentEventPayload
           * @property {string} [userId] - The metametrics id for the user
           * @property {string} [anonymousId] - An anonymousId that is used to track
           *  sensitive data while preserving anonymity.
           * @property {string} event - name of the event to track
           * @property {object} properties - properties to attach to the event
           * @property {MetaMetricsContext} context - the context the event occurred in
           */

          /**
           * @typedef {object} MetaMetricsPagePayload
           * @property {string} name - The name of the page that was viewed
           * @property {object} [params] - The variadic parts of the page url
           *  example (route: `/asset/:asset`, path: `/asset/ETH`)
           *  params: { asset: 'ETH' }
           * @property {EnvironmentType} environmentType - the environment type that the
           *  page was viewed in
           * @property {MetaMetricsPageObject} [page] - the details of the page
           * @property {MetaMetricsReferrerObject} [referrer] - dapp that triggered the page
           *  view
           */

          /**
           * @typedef {object} MetaMetricsPageOptions
           * @property {boolean} [isOptInPath] - is the current path one of the pages in
           *  the onboarding workflow? If true and participateInMetaMetrics is null track
           *  the page view
           */

          /**
           * @typedef {object} Traits
           * @property {'address_book_entries'} ADDRESS_BOOK_ENTRIES - When the user
           *  adds or modifies addresses in address book the address_book_entries trait
           *  is identified.
           * @property {'ledger_connection_type'} LEDGER_CONNECTION_TYPE - when ledger
           *  live connnection type is changed we identify the ledger_connection_type
           *  trait
           * @property {'networks_added'} NETWORKS_ADDED - when user modifies networks
           *  we identify the networks_added trait
           * @property {'networks_without_ticker'} NETWORKS_WITHOUT_TICKER - when user
           *  modifies networks we identify the networks_without_ticker trait for
           *  networks without a ticker.
           * @property {'nft_autodetection_enabled'} NFT_AUTODETECTION_ENABLED - when Autodetect NFTs
           * feature is toggled we identify the nft_autodetection_enabled trait
           * @property {'number_of_accounts'} NUMBER_OF_ACCOUNTS - when identities
           *  change, we identify the new number_of_accounts trait
           * @property {'number_of_nft_collections'} NUMBER_OF_NFT_COLLECTIONS - user
           *  trait for number of unique NFT addresses
           * @property {'number_of_nfts'} NUMBER_OF_NFTS - user trait for number of all NFT addresses
           * @property {'number_of_tokens'} NUMBER_OF_TOKENS - when the number of tokens change, we
           * identify the new number_of_tokens trait
           * @property {'opensea_api_enabled'} OPENSEA_API_ENABLED - when the OpenSea API is enabled
           * we identify the opensea_api_enabled trait
           * @property {'three_box_enabled'} THREE_BOX_ENABLED - When 3Box feature is
           *  toggled we identify the 3box_enabled trait. This trait has been deprecated.
           * @property {'theme'} THEME - when the user's theme changes we identify the theme trait
           * @property {'token_detection_enabled'} TOKEN_DETECTION_ENABLED - when token detection feature is toggled we
           * identify the token_detection_enabled trait
           * @property {'install_date_ext'} INSTALL_DATE_EXT - when the user installed the extension
           */

          /**
           *
           * @type {Traits}
           */
          const TRAITS = {
            ADDRESS_BOOK_ENTRIES: 'address_book_entries',
            INSTALL_DATE_EXT: 'install_date_ext',
            LEDGER_CONNECTION_TYPE: 'ledger_connection_type',
            NETWORKS_ADDED: 'networks_added',
            NETWORKS_WITHOUT_TICKER: 'networks_without_ticker',
            NFT_AUTODETECTION_ENABLED: 'nft_autodetection_enabled',
            NUMBER_OF_ACCOUNTS: 'number_of_accounts',
            NUMBER_OF_NFT_COLLECTIONS: 'number_of_nft_collections',
            NUMBER_OF_NFTS: 'number_of_nfts',
            NUMBER_OF_TOKENS: 'number_of_tokens',
            OPENSEA_API_ENABLED: 'opensea_api_enabled',
            THEME: 'theme',
            THREE_BOX_ENABLED: 'three_box_enabled',
            TOKEN_DETECTION_ENABLED: 'token_detection_enabled'
          };
          /**
           * @typedef {object} MetaMetricsTraits
           * @property {number} [address_book_entries] - The number of entries in the
           *  user's address book.
           * @property {'ledgerLive' | 'webhid' | 'u2f'} [ledger_connection_type] - the
           *  type of ledger connection set by user preference.
           * @property {Array<string>} [networks_added] - An array consisting of chainIds
           *  that indicate the networks a user has added to their MetaMask.
           * @property {Array<string>} [networks_without_ticker] - An array consisting of
           *  chainIds that indicate the networks added by the user that do not have a
           *  ticker.
           * @property {number} [nft_autodetection_enabled] - does the user have the
           * use collection/nft detection enabled?
           * @property {number} [number_of_accounts] - A number representing the number
           *  of identities(accounts) added to the user's MetaMask.
           * @property {number} [number_of_nft_collections] - A number representing the
           *  amount of different NFT collections the user possesses an NFT from.
           * @property {number} [number_of_nfts] - A number representing the
           *  amount of all NFTs the user possesses across all networks and accounts.
           * @property {number} [number_of_tokens] - The total number of token contracts
           *  the user has across all networks and accounts.
           * @property {boolean} [opensea_api_enabled] - does the user have the OpenSea
           *  API enabled?
           * @property {boolean} [three_box_enabled] - Does the user have 3box sync
           *  enabled? (deprecated)
           * @property {string} [theme] - which theme the user has selected
           * @property {boolean} [token_detection_enabled] - does the user have token detection is enabled?
           */
          // Mixpanel converts the zero address value to a truly anonymous event, which
          // speeds up reporting

          exports.TRAITS = TRAITS;
          const METAMETRICS_ANONYMOUS_ID = '0x0000000000000000';
          /**
           * This object is used to identify events that are triggered by the background
           * process.
           *
           * @type {MetaMetricsPageObject}
           */

          exports.METAMETRICS_ANONYMOUS_ID = METAMETRICS_ANONYMOUS_ID;
          const METAMETRICS_BACKGROUND_PAGE_OBJECT = {
            path: '/background-process',
            title: 'Background Process',
            url: '/background-process'
          };
          /**
           * @typedef {object} SegmentInterface
           * @property {SegmentEventPayload[]} queue - A queue of events to be sent when
           *  the flushAt limit has been reached, or flushInterval occurs
           * @property {() => void} flush - Immediately flush the queue, resetting it to
           *  an empty array and sending the pending events to Segment
           * @property {(
           *  payload: SegmentEventPayload,
           *  callback: (err?: Error) => void
           * ) => void} track - Track an event with Segment, using the internal batching
           *  mechanism to optimize network requests
           * @property {(payload: object) => void} page - Track a page view with Segment
           * @property {() => void} identify - Identify an anonymous user. We do not
           *  currently use this method.
           */

          exports.METAMETRICS_BACKGROUND_PAGE_OBJECT = METAMETRICS_BACKGROUND_PAGE_OBJECT;
          const REJECT_NOTFICIATION_CLOSE = 'Cancel Via Notification Close';
          exports.REJECT_NOTFICIATION_CLOSE = REJECT_NOTFICIATION_CLOSE;
          const REJECT_NOTFICIATION_CLOSE_SIG = 'Cancel Sig Request Via Notification Close';
          /**
           * EVENTS
           */

          exports.REJECT_NOTFICIATION_CLOSE_SIG = REJECT_NOTFICIATION_CLOSE_SIG;
          const EVENT_NAMES = {
            ACCOUNT_ADDED: 'Account Added',
            ACCOUNT_ADD_SELECTED: 'Account Add Selected',
            ACCOUNT_ADD_FAILED: 'Account Add Failed',
            ACCOUNT_PASSWORD_CREATED: 'Wallet Password Created',
            ACCOUNT_RESET: 'Account Reset',
            APP_INSTALLED: 'App Installed',
            APP_UNLOCKED: 'App Unlocked',
            APP_UNLOCKED_FAILED: 'App Unlocked Failed',
            APP_WINDOW_EXPANDED: 'App Window Expanded',
            DECRYPTION_APPROVED: 'Decryption Approved',
            DECRYPTION_REJECTED: 'Decryption Rejected',
            DECRYPTION_REQUESTED: 'Decryption Requested',
            ENCRYPTION_PUBLIC_KEY_APPROVED: 'Encryption Approved',
            ENCRYPTION_PUBLIC_KEY_REJECTED: 'Encryption Rejected',
            ENCRYPTION_PUBLIC_KEY_REQUESTED: 'Encryption Requested',
            EXTERNAL_LINK_CLICKED: 'External Link Clicked',
            KEY_EXPORT_SELECTED: 'Key Export Selected',
            KEY_EXPORT_REQUESTED: 'Key Export Requested',
            KEY_EXPORT_FAILED: 'Key Export Failed',
            KEY_EXPORT_CANCELED: 'Key Export Canceled',
            KEY_EXPORT_REVEALED: 'Key Material Revealed',
            KEY_EXPORT_COPIED: 'Key Material Copied',
            METRICS_OPT_IN: 'Metrics Opt In',
            METRICS_OPT_OUT: 'Metrics Opt Out',
            NAV_ACCOUNT_MENU_OPENED: 'Account Menu Opened',
            NAV_ACCOUNT_DETAILS_OPENED: 'Account Details Opened',
            NAV_CONNECTED_SITES_OPENED: 'Connected Sites Opened',
            NAV_MAIN_MENU_OPENED: 'Main Menu Opened',
            NAV_NETWORK_MENU_OPENED: 'Network Menu Opened',
            NAV_SETTINGS_OPENED: 'Settings Opened',
            NAV_ACCOUNT_SWITCHED: 'Account Switched',
            NAV_NETWORK_SWITCHED: 'Network Switched',
            NAV_BUY_BUTTON_CLICKED: 'Buy Button Clicked',
            NAV_SEND_BUTTON_CLICKED: 'Send Button Clicked',
            NAV_SWAP_BUTTON_CLICKED: 'Swap Button Clicked',
            SRP_TO_CONFIRM_BACKUP: 'SRP Backup Confirm Displayed',
            WALLET_SETUP_STARTED: 'Wallet Setup Selected',
            WALLET_SETUP_CANCELED: 'Wallet Setup Canceled',
            WALLET_SETUP_FAILED: 'Wallet Setup Failed',
            WALLET_CREATED: 'Wallet Created',
            NFT_ADDED: 'NFT Added',
            ONRAMP_PROVIDER_SELECTED: 'On-ramp Provider Selected',
            PERMISSIONS_APPROVED: 'Permissions Approved',
            PERMISSIONS_REJECTED: 'Permissions Rejected',
            PERMISSIONS_REQUESTED: 'Permissions Requested',
            PORTFOLIO_LINK_CLICKED: 'Portfolio Link Clicked',
            PUBLIC_ADDRESS_COPIED: 'Public Address Copied',
            PROVIDER_METHOD_CALLED: 'Provider Method Called',
            SIGNATURE_APPROVED: 'Signature Approved',
            SIGNATURE_REJECTED: 'Signature Rejected',
            SIGNATURE_REQUESTED: 'Signature Requested',
            TOKEN_IMPORT_BUTTON_CLICKED: 'Import Token Button Clicked',
            TOKEN_SCREEN_OPENED: 'Token Screen Opened',
            SUPPORT_LINK_CLICKED: 'Support Link Clicked',
            TOKEN_ADDED: 'Token Added',
            TOKEN_DETECTED: 'Token Detected',
            TOKEN_HIDDEN: 'Token Hidden',
            TOKEN_IMPORT_CANCELED: 'Token Import Canceled',
            TOKEN_IMPORT_CLICKED: 'Token Import Clicked'
          };
          exports.EVENT_NAMES = EVENT_NAMES;
          const EVENT = {
            ACCOUNT_TYPES: {
              DEFAULT: 'metamask',
              IMPORTED: 'imported',
              HARDWARE: 'hardware'
            },
            ACCOUNT_IMPORT_TYPES: {
              JSON: 'json',
              PRIVATE_KEY: 'private_key',
              SRP: 'srp'
            },
            CATEGORIES: {
              ACCOUNTS: 'Accounts',
              APP: 'App',
              AUTH: 'Auth',
              BACKGROUND: 'Background',
              ERROR: 'Error',
              FOOTER: 'Footer',
              HOME: 'Home',
              INPAGE_PROVIDER: 'inpage_provider',
              KEYS: 'Keys',
              MESSAGES: 'Messages',
              NAVIGATION: 'Navigation',
              NETWORK: 'Network',
              ONBOARDING: 'Onboarding',
              RETENTION: 'Retention',
              SETTINGS: 'Settings',
              SNAPS: 'Snaps',
              SWAPS: 'Swaps',
              TRANSACTIONS: 'Transactions',
              WALLET: 'Wallet'
            },
            EXTERNAL_LINK_TYPES: {
              TRANSACTION_BLOCK_EXPLORER: 'Transaction Block Explorer',
              BLOCK_EXPLORER: 'Block Explorer',
              ACCOUNT_TRACKER: 'Account Tracker',
              TOKEN_TRACKER: 'Token Tracker'
            },
            KEY_TYPES: {
              PKEY: 'private_key',
              SRP: 'srp'
            },
            ONRAMP_PROVIDER_TYPES: {
              COINBASE: 'coinbase',
              MOONPAY: 'moonpay',
              WYRE: 'wyre',
              TRANSAK: 'transak',
              SELF_DEPOSIT: 'direct_deposit'
            },
            SOURCE: {
              NETWORK: {
                CUSTOM_NETWORK_FORM: 'custom_network_form',
                POPULAR_NETWORK_LIST: 'popular_network_list'
              },
              SWAPS: {
                MAIN_VIEW: 'Main View',
                TOKEN_VIEW: 'Token View'
              },
              TOKEN: {
                CUSTOM: 'custom',
                DAPP: 'dapp',
                DETECTED: 'detected',
                LIST: 'list'
              },
              TRANSACTION: {
                DAPP: 'dapp',
                USER: 'user'
              }
            },
            LOCATION: {
              TOKEN_DETAILS: 'token_details',
              TOKEN_DETECTION: 'token_detection',
              TOKEN_MENU: 'token_menu'
            }
          }; // Values below (e.g. 'location') can be used in the "properties"
          // tracking object as keys, e.g. { location: 'Home' }

          exports.EVENT = EVENT;
          const CONTEXT_PROPS = {
            PAGE_TITLE: 'location'
          };
          exports.CONTEXT_PROPS = CONTEXT_PROPS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", { "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\network.ts
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.infuraProjectId = exports.getRpcUrl = exports.UNSUPPORTED_RPC_METHODS = exports.TEST_NETWORK_TICKER_MAP = exports.TEST_ETH_TOKEN_IMAGE_URL = exports.TEST_CHAINS = exports.SEPOLIA_RPC_URL = exports.SEPOLIA_DISPLAY_NAME = exports.POLYGON_DISPLAY_NAME = exports.PALM_TOKEN_IMAGE_URL = exports.PALM_DISPLAY_NAME = exports.OPTIMISM_TOKEN_IMAGE_URL = exports.OPTIMISM_DISPLAY_NAME = exports.NETWORK_TYPES = exports.NETWORK_TO_NAME_MAP = exports.NETWORK_NAMES = exports.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP = exports.NETWORK_IDS = exports.NATIVE_CURRENCY_TOKEN_IMAGE_MAP = exports.MAX_SAFE_CHAIN_ID = exports.MATIC_TOKEN_IMAGE_URL = exports.MAINNET_RPC_URL = exports.MAINNET_DISPLAY_NAME = exports.LOCALHOST_RPC_URL = exports.LOCALHOST_DISPLAY_NAME = exports.IPFS_DEFAULT_GATEWAY_URL = exports.INFURA_PROVIDER_TYPES = exports.INFURA_BLOCKED_KEY = exports.HARMONY_ONE_TOKEN_IMAGE_URL = exports.HARMONY_DISPLAY_NAME = exports.HARDFORKS = exports.GOERLI_RPC_URL = exports.GOERLI_DISPLAY_NAME = exports.FTM_TOKEN_IMAGE_URL = exports.FEATURED_RPCS = exports.FANTOM_DISPLAY_NAME = exports.ETH_TOKEN_IMAGE_URL = exports.CURRENCY_SYMBOLS = exports.CHAIN_ID_TO_TYPE_MAP = exports.CHAIN_ID_TO_RPC_URL_MAP = exports.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP = exports.CHAIN_ID_TO_NETWORK_ID_MAP = exports.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP = exports.CHAIN_IDS = exports.BUYABLE_CHAINS_MAP = exports.BUILT_IN_NETWORKS = exports.BSC_DISPLAY_NAME = exports.BNB_TOKEN_IMAGE_URL = exports.BNB_DISPLAY_NAME = exports.AVAX_TOKEN_IMAGE_URL = exports.AVALANCHE_DISPLAY_NAME = exports.AURORA_TOKEN_IMAGE_URL = exports.AURORA_DISPLAY_NAME = exports.ARBITRUM_DISPLAY_NAME = exports.AETH_TOKEN_IMAGE_URL = void 0;

          var _lodash = require("lodash");

          /**
           * Throughout the extension we set the current provider by referencing its
           * "type", which can be any of the values in the below object. These values
           * represent the built-in networks of MetaMask, including test nets, as well
           * as "rpc" which is the "type" of a custom network added by the user or via
           * wallet_addEthereumChain.
           */
          const NETWORK_TYPES = {
            GOERLI: 'goerli',
            LOCALHOST: 'localhost',
            MAINNET: 'mainnet',
            RPC: 'rpc',
            SEPOLIA: 'sepolia'
          };
          /**
           * An object containing shortcut names for any non-builtin network. We need
           * this to be able to differentiate between networks that require custom
           * sections of code for our various features, such as swaps or token lists.
           */

          exports.NETWORK_TYPES = NETWORK_TYPES;
          const NETWORK_NAMES = {
            HOMESTEAD: 'homestead'
          };
          /**
           * The Network ID for our builtin networks. This is the decimal equivalent of
           * the chain id for the network, but is expresssed as a string. Many moons ago
           * the decision was made on the extension team to expressly use chainId with
           * hex encoding over network id. Consider that when accessing this object. Note
           * for cross product purposes: alignment with mobile on this matter has not
           * been fully achieved, thus it is possible for some dependencies to still
           * ask for or require network id.
           */

          exports.NETWORK_NAMES = NETWORK_NAMES;
          const NETWORK_IDS = {
            MAINNET: '1',
            GOERLI: '5',
            LOCALHOST: '1337',
            SEPOLIA: '11155111'
          };
          /**
           * An object containing all of the chain ids for networks both built in and
           * those that we have added custom code to support our feature set.
           */

          exports.NETWORK_IDS = NETWORK_IDS;
          const CHAIN_IDS = {
            MAINNET: '0x1',
            GOERLI: '0x5',
            LOCALHOST: '0x539',
            BSC: '0x38',
            OPTIMISM: '0xa',
            OPTIMISM_TESTNET: '0x1a4',
            POLYGON: '0x89',
            AVALANCHE: '0xa86a',
            FANTOM: '0xfa',
            CELO: '0xa4ec',
            ARBITRUM: '0xa4b1',
            HARMONY: '0x63564c40',
            PALM: '0x2a15c308d',
            SEPOLIA: '0xaa36a7',
            AURORA: '0x4e454152'
          };
          /**
           * The largest possible chain ID we can handle.
           * Explanation: https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553
           */

          exports.CHAIN_IDS = CHAIN_IDS;
          const MAX_SAFE_CHAIN_ID = 4503599627370476;
          exports.MAX_SAFE_CHAIN_ID = MAX_SAFE_CHAIN_ID;
          const MAINNET_DISPLAY_NAME = 'Ethereum Mainnet';
          exports.MAINNET_DISPLAY_NAME = MAINNET_DISPLAY_NAME;
          const GOERLI_DISPLAY_NAME = 'Goerli';
          exports.GOERLI_DISPLAY_NAME = GOERLI_DISPLAY_NAME;
          const SEPOLIA_DISPLAY_NAME = 'Sepolia';
          exports.SEPOLIA_DISPLAY_NAME = SEPOLIA_DISPLAY_NAME;
          const LOCALHOST_DISPLAY_NAME = 'Localhost 8545';
          exports.LOCALHOST_DISPLAY_NAME = LOCALHOST_DISPLAY_NAME;
          const BSC_DISPLAY_NAME = 'Binance Smart Chain';
          exports.BSC_DISPLAY_NAME = BSC_DISPLAY_NAME;
          const POLYGON_DISPLAY_NAME = 'Polygon';
          exports.POLYGON_DISPLAY_NAME = POLYGON_DISPLAY_NAME;
          const AVALANCHE_DISPLAY_NAME = 'Avalanche Network C-Chain';
          exports.AVALANCHE_DISPLAY_NAME = AVALANCHE_DISPLAY_NAME;
          const ARBITRUM_DISPLAY_NAME = 'Arbitrum One';
          exports.ARBITRUM_DISPLAY_NAME = ARBITRUM_DISPLAY_NAME;
          const BNB_DISPLAY_NAME = 'BNB Smart Chain (previously Binance Smart Chain Mainnet)';
          exports.BNB_DISPLAY_NAME = BNB_DISPLAY_NAME;
          const OPTIMISM_DISPLAY_NAME = 'Optimism';
          exports.OPTIMISM_DISPLAY_NAME = OPTIMISM_DISPLAY_NAME;
          const FANTOM_DISPLAY_NAME = 'Fantom Opera';
          exports.FANTOM_DISPLAY_NAME = FANTOM_DISPLAY_NAME;
          const HARMONY_DISPLAY_NAME = 'Harmony Mainnet Shard 0';
          exports.HARMONY_DISPLAY_NAME = HARMONY_DISPLAY_NAME;
          const PALM_DISPLAY_NAME = 'Palm';
          exports.PALM_DISPLAY_NAME = PALM_DISPLAY_NAME;
          const AURORA_DISPLAY_NAME = 'Aurora Mainnet';
          exports.AURORA_DISPLAY_NAME = AURORA_DISPLAY_NAME;
          const infuraProjectId = "bde1e349aa3c4803a5c3a71f5623ecce";
          exports.infuraProjectId = infuraProjectId;

          const getRpcUrl = ({
            network,
            excludeProjectId = false
          }) => `https://${network}.infura.io/v3/${excludeProjectId ? '' : infuraProjectId}`;

          exports.getRpcUrl = getRpcUrl;
          const MAINNET_RPC_URL = getRpcUrl({
            network: NETWORK_TYPES.MAINNET
          });
          exports.MAINNET_RPC_URL = MAINNET_RPC_URL;
          const GOERLI_RPC_URL = getRpcUrl({
            network: NETWORK_TYPES.GOERLI
          });
          exports.GOERLI_RPC_URL = GOERLI_RPC_URL;
          const SEPOLIA_RPC_URL = getRpcUrl({
            network: NETWORK_TYPES.SEPOLIA
          });
          exports.SEPOLIA_RPC_URL = SEPOLIA_RPC_URL;
          const LOCALHOST_RPC_URL = 'http://localhost:8545';
          /**
           * An object containing the token symbols for various tokens that are either
           * native currencies or those that have been special cased by the extension
           * for supporting our feature set.
           */

          exports.LOCALHOST_RPC_URL = LOCALHOST_RPC_URL;
          const CURRENCY_SYMBOLS = {
            ARBITRUM: 'ETH',
            AURORA: 'Aurora ETH',
            AVALANCHE: 'AVAX',
            BNB: 'BNB',
            BUSD: 'BUSD',
            CELO: 'CELO',
            DAI: 'DAI',
            ETH: 'ETH',
            FANTOM: 'FTM',
            HARMONY: 'ONE',
            PALM: 'PALM',
            MATIC: 'MATIC',
            TEST_ETH: 'TESTETH',
            USDC: 'USDC',
            USDT: 'USDT',
            WETH: 'WETH',
            OPTIMISM: 'OP'
          };
          /**
           * An object containing the token symbols for various tokens that are supported
           * on different on ramp providers. This object is meant for internal consumption,
           * hence why it is not exported.
           */

          exports.CURRENCY_SYMBOLS = CURRENCY_SYMBOLS;
          const SUPPORTED_CURRENCY_SYMBOLS = {
            ...CURRENCY_SYMBOLS,
            '1INCH': '1INCH',
            AAVE: 'AAVE',
            ABT: 'ABT',
            ACH: 'ACH',
            AGEUR: 'AGEUR',
            AGLD: 'AGLD',
            AMP: 'AMP',
            ANKR: 'ANKR',
            APE: 'APE',
            ARPA: 'ARPA',
            ASM: 'ASM',
            AUCTION: 'AUCTION',
            AXS: 'AXS',
            AVAX: 'AVAX',
            AVAXC: 'AVAXC',
            AVAXCUSDC: 'AVAXCUSDC',
            BADGER: 'BADGER',
            BAL: 'BAL',
            BAND: 'BAND',
            BAT: 'BAT',
            BNT: 'BNT',
            BOBA: 'BOBA',
            BOND: 'BOND',
            BTRST: 'BTRST',
            CHAIN: 'CHAIN',
            CHZ: 'CHZ',
            CLV: 'CLV',
            COMP: 'COMP',
            COTI: 'COTI',
            CRO: 'CRO',
            CRV: 'CRV',
            CTSI: 'CTSI',
            CVC: 'CVC',
            DAO: 'DAO',
            DDX: 'DDX',
            DNT: 'DNT',
            ENJ: 'ENJ',
            ENS: 'ENS',
            EURT: 'EURT',
            FARM: 'FARM',
            FET: 'FET',
            FORTH: 'FORTH',
            FX: 'FX',
            GNO: 'GNO',
            GRT: 'GRT',
            GTC: 'GTC',
            GTH: 'GTH',
            GUSD: 'GUSD',
            GYEN: 'GYEN',
            HEX: 'HEX',
            IOTX: 'IOTX',
            IMX: 'IMX',
            JASMY: 'JASMY',
            KEEP: 'KEEP',
            KNC: 'KNC',
            KRL: 'KRL',
            LCX: 'LCX',
            LINK: 'LINK',
            LPT: 'LPT',
            LRC: 'LRC',
            MANA: 'MANA',
            MASK: 'MASK',
            MINDS: 'MINDS',
            MIR: 'MIR',
            MKR: 'MKR',
            MLN: 'MLN',
            MTL: 'MTL',
            MUSDC: 'mUSDC',
            NKN: 'NKN',
            NMR: 'NMR',
            NU: 'NU',
            OGN: 'OGN',
            OMG: 'OMG',
            ORN: 'ORN',
            OXT: 'OXT',
            PAX: 'PAX',
            PERP: 'PERP',
            PLA: 'PLA',
            POLS: 'POLS',
            POLY: 'POLY',
            QNT: 'QNT',
            QUICK: 'QUICK',
            RAD: 'RAD',
            RAI: 'RAI',
            RARI: 'RARI',
            REN: 'REN',
            REP: 'REP',
            REQ: 'REQ',
            RLC: 'RLC',
            RLY: 'RLY',
            SAND: 'SAND',
            SHIB: 'SHIB',
            SKL: 'SKL',
            SNX: 'SNX',
            SPA: 'SPA',
            STETH: 'STETH',
            STORJ: 'STORJ',
            SUKU: 'SUKU',
            SUSHI: 'SUSHI',
            SWAP: 'SWAP',
            SWFTC: 'SWFTC',
            TRAC: 'TRAC',
            TRB: 'TRB',
            TRIBE: 'TRIBE',
            TRU: 'TRU',
            TXL: 'TXL',
            UMA: 'UMA',
            UNI: 'UNI',
            USDS: 'USDS',
            VRA: 'VRA',
            WBTC: 'WBTC',
            WCFG: 'WCFG',
            XYO: 'XYO',
            YFII: 'YFII',
            YFI: 'YFI',
            YLD: 'YLD',
            ZRX: 'ZRX',
            ZUSD: 'ZUSD'
          };
          const ETH_TOKEN_IMAGE_URL = './images/eth_logo.svg';
          exports.ETH_TOKEN_IMAGE_URL = ETH_TOKEN_IMAGE_URL;
          const TEST_ETH_TOKEN_IMAGE_URL = './images/black-eth-logo.svg';
          exports.TEST_ETH_TOKEN_IMAGE_URL = TEST_ETH_TOKEN_IMAGE_URL;
          const BNB_TOKEN_IMAGE_URL = './images/bnb.png';
          exports.BNB_TOKEN_IMAGE_URL = BNB_TOKEN_IMAGE_URL;
          const MATIC_TOKEN_IMAGE_URL = './images/matic-token.png';
          exports.MATIC_TOKEN_IMAGE_URL = MATIC_TOKEN_IMAGE_URL;
          const AVAX_TOKEN_IMAGE_URL = './images/avax-token.png';
          exports.AVAX_TOKEN_IMAGE_URL = AVAX_TOKEN_IMAGE_URL;
          const AETH_TOKEN_IMAGE_URL = './images/arbitrum.svg';
          exports.AETH_TOKEN_IMAGE_URL = AETH_TOKEN_IMAGE_URL;
          const FTM_TOKEN_IMAGE_URL = './images/fantom-opera.svg';
          exports.FTM_TOKEN_IMAGE_URL = FTM_TOKEN_IMAGE_URL;
          const HARMONY_ONE_TOKEN_IMAGE_URL = './images/harmony-one.svg';
          exports.HARMONY_ONE_TOKEN_IMAGE_URL = HARMONY_ONE_TOKEN_IMAGE_URL;
          const OPTIMISM_TOKEN_IMAGE_URL = './images/optimism.svg';
          exports.OPTIMISM_TOKEN_IMAGE_URL = OPTIMISM_TOKEN_IMAGE_URL;
          const PALM_TOKEN_IMAGE_URL = './images/palm.svg';
          exports.PALM_TOKEN_IMAGE_URL = PALM_TOKEN_IMAGE_URL;
          const AURORA_TOKEN_IMAGE_URL = './images/aurora.png';
          exports.AURORA_TOKEN_IMAGE_URL = AURORA_TOKEN_IMAGE_URL;
          const INFURA_PROVIDER_TYPES = [NETWORK_TYPES.MAINNET, NETWORK_TYPES.GOERLI, NETWORK_TYPES.SEPOLIA];
          exports.INFURA_PROVIDER_TYPES = INFURA_PROVIDER_TYPES;
          const TEST_CHAINS = [CHAIN_IDS.GOERLI, CHAIN_IDS.SEPOLIA, CHAIN_IDS.LOCALHOST];
          exports.TEST_CHAINS = TEST_CHAINS;

          const typedCapitalize = k => (0, _lodash.capitalize)(k);

          const TEST_NETWORK_TICKER_MAP = {
            [NETWORK_TYPES.GOERLI]: `${typedCapitalize(NETWORK_TYPES.GOERLI)}${CURRENCY_SYMBOLS.ETH}`,
            [NETWORK_TYPES.SEPOLIA]: `${typedCapitalize(NETWORK_TYPES.SEPOLIA)}${CURRENCY_SYMBOLS.ETH}`
          };
          /**
           * Map of all build-in Infura networks to their network, ticker and chain IDs.
           */

          exports.TEST_NETWORK_TICKER_MAP = TEST_NETWORK_TICKER_MAP;
          const BUILT_IN_NETWORKS = {
            [NETWORK_TYPES.GOERLI]: {
              networkId: NETWORK_IDS.GOERLI,
              chainId: CHAIN_IDS.GOERLI,
              ticker: TEST_NETWORK_TICKER_MAP[NETWORK_TYPES.GOERLI]
            },
            [NETWORK_TYPES.SEPOLIA]: {
              networkId: NETWORK_IDS.SEPOLIA,
              chainId: CHAIN_IDS.SEPOLIA,
              ticker: TEST_NETWORK_TICKER_MAP[NETWORK_TYPES.SEPOLIA]
            },
            [NETWORK_TYPES.MAINNET]: {
              networkId: NETWORK_IDS.MAINNET,
              chainId: CHAIN_IDS.MAINNET
            },
            [NETWORK_TYPES.LOCALHOST]: {
              networkId: NETWORK_IDS.LOCALHOST,
              chainId: CHAIN_IDS.LOCALHOST
            }
          };
          exports.BUILT_IN_NETWORKS = BUILT_IN_NETWORKS;
          const NETWORK_TO_NAME_MAP = {
            [NETWORK_TYPES.MAINNET]: MAINNET_DISPLAY_NAME,
            [NETWORK_TYPES.GOERLI]: GOERLI_DISPLAY_NAME,
            [NETWORK_TYPES.SEPOLIA]: SEPOLIA_DISPLAY_NAME,
            [NETWORK_TYPES.LOCALHOST]: LOCALHOST_DISPLAY_NAME,
            [NETWORK_IDS.GOERLI]: GOERLI_DISPLAY_NAME,
            [NETWORK_IDS.SEPOLIA]: SEPOLIA_DISPLAY_NAME,
            [NETWORK_IDS.MAINNET]: MAINNET_DISPLAY_NAME,
            [NETWORK_IDS.LOCALHOST]: LOCALHOST_DISPLAY_NAME,
            [CHAIN_IDS.GOERLI]: GOERLI_DISPLAY_NAME,
            [CHAIN_IDS.SEPOLIA]: SEPOLIA_DISPLAY_NAME,
            [CHAIN_IDS.MAINNET]: MAINNET_DISPLAY_NAME,
            [CHAIN_IDS.LOCALHOST]: LOCALHOST_DISPLAY_NAME
          };
          exports.NETWORK_TO_NAME_MAP = NETWORK_TO_NAME_MAP;
          const CHAIN_ID_TO_TYPE_MAP = {
            [CHAIN_IDS.MAINNET]: NETWORK_TYPES.MAINNET,
            [CHAIN_IDS.GOERLI]: NETWORK_TYPES.GOERLI,
            [CHAIN_IDS.SEPOLIA]: NETWORK_TYPES.SEPOLIA,
            [CHAIN_IDS.LOCALHOST]: NETWORK_TYPES.LOCALHOST
          };
          exports.CHAIN_ID_TO_TYPE_MAP = CHAIN_ID_TO_TYPE_MAP;
          const CHAIN_ID_TO_RPC_URL_MAP = {
            [CHAIN_IDS.GOERLI]: GOERLI_RPC_URL,
            [CHAIN_IDS.SEPOLIA]: SEPOLIA_RPC_URL,
            [CHAIN_IDS.MAINNET]: MAINNET_RPC_URL,
            [CHAIN_IDS.LOCALHOST]: LOCALHOST_RPC_URL
          };
          exports.CHAIN_ID_TO_RPC_URL_MAP = CHAIN_ID_TO_RPC_URL_MAP;
          const CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP = {
            [CHAIN_IDS.MAINNET]: ETH_TOKEN_IMAGE_URL,
            [CHAIN_IDS.AVALANCHE]: AVAX_TOKEN_IMAGE_URL,
            [CHAIN_IDS.BSC]: BNB_TOKEN_IMAGE_URL,
            [CHAIN_IDS.POLYGON]: MATIC_TOKEN_IMAGE_URL,
            [CHAIN_IDS.ARBITRUM]: AETH_TOKEN_IMAGE_URL,
            [CHAIN_IDS.FANTOM]: FTM_TOKEN_IMAGE_URL,
            [CHAIN_IDS.HARMONY]: HARMONY_ONE_TOKEN_IMAGE_URL,
            [CHAIN_IDS.OPTIMISM]: OPTIMISM_TOKEN_IMAGE_URL,
            [CHAIN_IDS.PALM]: PALM_TOKEN_IMAGE_URL,
            [CHAIN_IDS.AURORA]: AURORA_TOKEN_IMAGE_URL
          };
          exports.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP = CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP;
          const NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP = {
            [NETWORK_IDS.GOERLI]: NETWORK_TYPES.GOERLI,
            [NETWORK_IDS.SEPOLIA]: NETWORK_TYPES.SEPOLIA,
            [NETWORK_IDS.MAINNET]: NETWORK_NAMES.HOMESTEAD
          };
          exports.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP = NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP;
          const CHAIN_ID_TO_NETWORK_ID_MAP = {
            [CHAIN_IDS.MAINNET]: NETWORK_IDS.MAINNET,
            [CHAIN_IDS.GOERLI]: NETWORK_IDS.GOERLI,
            [CHAIN_IDS.SEPOLIA]: NETWORK_IDS.SEPOLIA,
            [CHAIN_IDS.LOCALHOST]: NETWORK_IDS.LOCALHOST
          };
          exports.CHAIN_ID_TO_NETWORK_ID_MAP = CHAIN_ID_TO_NETWORK_ID_MAP;
          const NATIVE_CURRENCY_TOKEN_IMAGE_MAP = {
            [CURRENCY_SYMBOLS.ETH]: ETH_TOKEN_IMAGE_URL,
            [CURRENCY_SYMBOLS.TEST_ETH]: TEST_ETH_TOKEN_IMAGE_URL,
            [CURRENCY_SYMBOLS.BNB]: BNB_TOKEN_IMAGE_URL,
            [CURRENCY_SYMBOLS.MATIC]: MATIC_TOKEN_IMAGE_URL,
            [CURRENCY_SYMBOLS.AVALANCHE]: AVAX_TOKEN_IMAGE_URL,
            [CURRENCY_SYMBOLS.OPTIMISM]: OPTIMISM_TOKEN_IMAGE_URL
          };
          exports.NATIVE_CURRENCY_TOKEN_IMAGE_MAP = NATIVE_CURRENCY_TOKEN_IMAGE_MAP;
          const INFURA_BLOCKED_KEY = 'countryBlocked';
          /**
           * Hardforks are points in the chain where logic is changed significantly
           * enough where there is a fork and the new fork becomes the active chain.
           * These constants are presented in chronological order starting with BERLIN
           * because when we first needed to track the hardfork we had launched support
           * for EIP-2718 (where transactions can have types and different shapes) and
           * EIP-2930 (optional access lists), which were included in BERLIN.
           *
           * BERLIN - forked at block number 12,244,000, included typed transactions and
           * optional access lists
           * LONDON - future, upcoming fork that introduces the baseFeePerGas, an amount
           * of the ETH transaction fees that will be burned instead of given to the
           * miner. This change necessitated the third type of transaction envelope to
           * specify maxFeePerGas and maxPriorityFeePerGas moving the fee bidding system
           * to a second price auction model.
           */

          exports.INFURA_BLOCKED_KEY = INFURA_BLOCKED_KEY;
          const HARDFORKS = {
            BERLIN: 'berlin',
            LONDON: 'london'
          };
          exports.HARDFORKS = HARDFORKS;
          const CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP = {
            [CHAIN_IDS.OPTIMISM]: 1,
            [CHAIN_IDS.OPTIMISM_TESTNET]: 1
          };
          /**
           * Ethereum JSON-RPC methods that are known to exist but that we intentionally
           * do not support.
           */

          exports.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP = CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP;
          const UNSUPPORTED_RPC_METHODS = new Set([// This is implemented later in our middleware stack – specifically, in
            // eth-json-rpc-middleware – but our UI does not support it.
            'eth_signTransaction']);
          exports.UNSUPPORTED_RPC_METHODS = UNSUPPORTED_RPC_METHODS;
          const IPFS_DEFAULT_GATEWAY_URL = 'dweb.link'; // The first item in transakCurrencies must be the
          // default crypto currency for the network

          exports.IPFS_DEFAULT_GATEWAY_URL = IPFS_DEFAULT_GATEWAY_URL;
          const BUYABLE_CHAIN_ETHEREUM_NETWORK_NAME = 'ethereum';
          const BUYABLE_CHAINS_MAP = {
            [CHAIN_IDS.MAINNET]: {
              nativeCurrency: CURRENCY_SYMBOLS.ETH,
              network: BUYABLE_CHAIN_ETHEREUM_NETWORK_NAME,
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.ETH, SUPPORTED_CURRENCY_SYMBOLS['1INCH'], SUPPORTED_CURRENCY_SYMBOLS.AAVE, SUPPORTED_CURRENCY_SYMBOLS.AGEUR, SUPPORTED_CURRENCY_SYMBOLS.BUSD, SUPPORTED_CURRENCY_SYMBOLS.CHAIN, SUPPORTED_CURRENCY_SYMBOLS.CLV, SUPPORTED_CURRENCY_SYMBOLS.COMP, SUPPORTED_CURRENCY_SYMBOLS.CTSI, SUPPORTED_CURRENCY_SYMBOLS.DAI, SUPPORTED_CURRENCY_SYMBOLS.DAO, SUPPORTED_CURRENCY_SYMBOLS.ENJ, SUPPORTED_CURRENCY_SYMBOLS.EURT, SUPPORTED_CURRENCY_SYMBOLS.GTH, SUPPORTED_CURRENCY_SYMBOLS.HEX, SUPPORTED_CURRENCY_SYMBOLS.LINK, SUPPORTED_CURRENCY_SYMBOLS.MANA, SUPPORTED_CURRENCY_SYMBOLS.MASK, SUPPORTED_CURRENCY_SYMBOLS.MINDS, SUPPORTED_CURRENCY_SYMBOLS.MKR, SUPPORTED_CURRENCY_SYMBOLS.PLA, SUPPORTED_CURRENCY_SYMBOLS.POLS, SUPPORTED_CURRENCY_SYMBOLS.SAND, SUPPORTED_CURRENCY_SYMBOLS.STETH, SUPPORTED_CURRENCY_SYMBOLS.SUSHI, SUPPORTED_CURRENCY_SYMBOLS.SWAP, SUPPORTED_CURRENCY_SYMBOLS.TXL, SUPPORTED_CURRENCY_SYMBOLS.UNI, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.USDT, SUPPORTED_CURRENCY_SYMBOLS.VRA, SUPPORTED_CURRENCY_SYMBOLS.WBTC, SUPPORTED_CURRENCY_SYMBOLS.YLD],
              moonPay: {
                defaultCurrencyCode: SUPPORTED_CURRENCY_SYMBOLS.ETH,
                showOnlyCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.ETH, SUPPORTED_CURRENCY_SYMBOLS.USDT, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.DAI, SUPPORTED_CURRENCY_SYMBOLS.MATIC, SUPPORTED_CURRENCY_SYMBOLS.ORN, SUPPORTED_CURRENCY_SYMBOLS.WETH, SUPPORTED_CURRENCY_SYMBOLS.IMX]
              },
              wyre: {
                srn: 'ethereum',
                currencyCode: CURRENCY_SYMBOLS.ETH,
                currencies: [SUPPORTED_CURRENCY_SYMBOLS.ETH, SUPPORTED_CURRENCY_SYMBOLS.AAVE, SUPPORTED_CURRENCY_SYMBOLS.BAT, SUPPORTED_CURRENCY_SYMBOLS.BUSD, SUPPORTED_CURRENCY_SYMBOLS.COMP, SUPPORTED_CURRENCY_SYMBOLS.CRV, SUPPORTED_CURRENCY_SYMBOLS.DAI, SUPPORTED_CURRENCY_SYMBOLS.GUSD, SUPPORTED_CURRENCY_SYMBOLS.GYEN, SUPPORTED_CURRENCY_SYMBOLS.LINK, SUPPORTED_CURRENCY_SYMBOLS.MKR, SUPPORTED_CURRENCY_SYMBOLS.PAX, SUPPORTED_CURRENCY_SYMBOLS.RAI, SUPPORTED_CURRENCY_SYMBOLS.SNX, SUPPORTED_CURRENCY_SYMBOLS.UMA, SUPPORTED_CURRENCY_SYMBOLS.UNI, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.USDS, SUPPORTED_CURRENCY_SYMBOLS.USDT, SUPPORTED_CURRENCY_SYMBOLS.WBTC, SUPPORTED_CURRENCY_SYMBOLS.WETH, SUPPORTED_CURRENCY_SYMBOLS.YFI, SUPPORTED_CURRENCY_SYMBOLS.ZUSD]
              },
              coinbasePayCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.ETH, SUPPORTED_CURRENCY_SYMBOLS['1INCH'], SUPPORTED_CURRENCY_SYMBOLS.AAVE, SUPPORTED_CURRENCY_SYMBOLS.ABT, SUPPORTED_CURRENCY_SYMBOLS.ACH, SUPPORTED_CURRENCY_SYMBOLS.AGLD, SUPPORTED_CURRENCY_SYMBOLS.AMP, SUPPORTED_CURRENCY_SYMBOLS.ANKR, SUPPORTED_CURRENCY_SYMBOLS.APE, SUPPORTED_CURRENCY_SYMBOLS.ARPA, SUPPORTED_CURRENCY_SYMBOLS.ASM, SUPPORTED_CURRENCY_SYMBOLS.AUCTION, SUPPORTED_CURRENCY_SYMBOLS.AXS, SUPPORTED_CURRENCY_SYMBOLS.BADGER, SUPPORTED_CURRENCY_SYMBOLS.BAL, SUPPORTED_CURRENCY_SYMBOLS.BAND, SUPPORTED_CURRENCY_SYMBOLS.BAT, SUPPORTED_CURRENCY_SYMBOLS.BNT, SUPPORTED_CURRENCY_SYMBOLS.BOBA, SUPPORTED_CURRENCY_SYMBOLS.BOND, SUPPORTED_CURRENCY_SYMBOLS.BTRST, SUPPORTED_CURRENCY_SYMBOLS.CHZ, SUPPORTED_CURRENCY_SYMBOLS.CLV, SUPPORTED_CURRENCY_SYMBOLS.COMP, SUPPORTED_CURRENCY_SYMBOLS.COTI, SUPPORTED_CURRENCY_SYMBOLS.CRO, SUPPORTED_CURRENCY_SYMBOLS.CRV, SUPPORTED_CURRENCY_SYMBOLS.CTSI, SUPPORTED_CURRENCY_SYMBOLS.CVC, SUPPORTED_CURRENCY_SYMBOLS.DAI, SUPPORTED_CURRENCY_SYMBOLS.DDX, SUPPORTED_CURRENCY_SYMBOLS.DNT, SUPPORTED_CURRENCY_SYMBOLS.ENJ, SUPPORTED_CURRENCY_SYMBOLS.ENS, SUPPORTED_CURRENCY_SYMBOLS.FARM, SUPPORTED_CURRENCY_SYMBOLS.FET, SUPPORTED_CURRENCY_SYMBOLS.FORTH, SUPPORTED_CURRENCY_SYMBOLS.FX, SUPPORTED_CURRENCY_SYMBOLS.GNO, SUPPORTED_CURRENCY_SYMBOLS.GRT, SUPPORTED_CURRENCY_SYMBOLS.GTC, SUPPORTED_CURRENCY_SYMBOLS.IOTX, SUPPORTED_CURRENCY_SYMBOLS.JASMY, SUPPORTED_CURRENCY_SYMBOLS.KEEP, SUPPORTED_CURRENCY_SYMBOLS.KNC, SUPPORTED_CURRENCY_SYMBOLS.KRL, SUPPORTED_CURRENCY_SYMBOLS.LCX, SUPPORTED_CURRENCY_SYMBOLS.LINK, SUPPORTED_CURRENCY_SYMBOLS.LPT, SUPPORTED_CURRENCY_SYMBOLS.LRC, SUPPORTED_CURRENCY_SYMBOLS.MANA, SUPPORTED_CURRENCY_SYMBOLS.MASK, SUPPORTED_CURRENCY_SYMBOLS.MATIC, SUPPORTED_CURRENCY_SYMBOLS.MIR, SUPPORTED_CURRENCY_SYMBOLS.MKR, SUPPORTED_CURRENCY_SYMBOLS.MLN, SUPPORTED_CURRENCY_SYMBOLS.MTL, SUPPORTED_CURRENCY_SYMBOLS.NKN, SUPPORTED_CURRENCY_SYMBOLS.NMR, SUPPORTED_CURRENCY_SYMBOLS.NU, SUPPORTED_CURRENCY_SYMBOLS.OGN, SUPPORTED_CURRENCY_SYMBOLS.OMG, SUPPORTED_CURRENCY_SYMBOLS.OXT, SUPPORTED_CURRENCY_SYMBOLS.PAX, SUPPORTED_CURRENCY_SYMBOLS.PERP, SUPPORTED_CURRENCY_SYMBOLS.PLA, SUPPORTED_CURRENCY_SYMBOLS.POLY, SUPPORTED_CURRENCY_SYMBOLS.QNT, SUPPORTED_CURRENCY_SYMBOLS.QUICK, SUPPORTED_CURRENCY_SYMBOLS.RAD, SUPPORTED_CURRENCY_SYMBOLS.RAI, SUPPORTED_CURRENCY_SYMBOLS.RARI, SUPPORTED_CURRENCY_SYMBOLS.REN, SUPPORTED_CURRENCY_SYMBOLS.REP, SUPPORTED_CURRENCY_SYMBOLS.REQ, SUPPORTED_CURRENCY_SYMBOLS.RLC, SUPPORTED_CURRENCY_SYMBOLS.RLY, SUPPORTED_CURRENCY_SYMBOLS.SAND, SUPPORTED_CURRENCY_SYMBOLS.SHIB, SUPPORTED_CURRENCY_SYMBOLS.SKL, SUPPORTED_CURRENCY_SYMBOLS.SNX, SUPPORTED_CURRENCY_SYMBOLS.STORJ, SUPPORTED_CURRENCY_SYMBOLS.SUKU, SUPPORTED_CURRENCY_SYMBOLS.SUSHI, SUPPORTED_CURRENCY_SYMBOLS.SWFTC, SUPPORTED_CURRENCY_SYMBOLS.TRAC, SUPPORTED_CURRENCY_SYMBOLS.TRB, SUPPORTED_CURRENCY_SYMBOLS.TRIBE, SUPPORTED_CURRENCY_SYMBOLS.TRU, SUPPORTED_CURRENCY_SYMBOLS.UMA, SUPPORTED_CURRENCY_SYMBOLS.UNI, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.USDT, SUPPORTED_CURRENCY_SYMBOLS.WBTC, SUPPORTED_CURRENCY_SYMBOLS.WCFG, SUPPORTED_CURRENCY_SYMBOLS.XYO, SUPPORTED_CURRENCY_SYMBOLS.YFII, SUPPORTED_CURRENCY_SYMBOLS.ZRX]
            },
            [CHAIN_IDS.GOERLI]: {
              nativeCurrency: TEST_NETWORK_TICKER_MAP[NETWORK_TYPES.GOERLI],
              network: BUYABLE_CHAIN_ETHEREUM_NETWORK_NAME
            },
            [CHAIN_IDS.SEPOLIA]: {
              nativeCurrency: TEST_NETWORK_TICKER_MAP[NETWORK_TYPES.SEPOLIA],
              network: BUYABLE_CHAIN_ETHEREUM_NETWORK_NAME
            },
            [CHAIN_IDS.BSC]: {
              nativeCurrency: CURRENCY_SYMBOLS.BNB,
              network: 'bsc',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.BNB, SUPPORTED_CURRENCY_SYMBOLS.BUSD],
              moonPay: {
                defaultCurrencyCode: `${SUPPORTED_CURRENCY_SYMBOLS.BNB}_BSC`,
                showOnlyCurrencies: [`${SUPPORTED_CURRENCY_SYMBOLS.BNB}_BSC`, `${SUPPORTED_CURRENCY_SYMBOLS.BUSD}_BSC`]
              }
            },
            [CHAIN_IDS.POLYGON]: {
              nativeCurrency: CURRENCY_SYMBOLS.MATIC,
              network: 'polygon',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.MATIC, SUPPORTED_CURRENCY_SYMBOLS.USDT, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.DAI],
              moonPay: {
                defaultCurrencyCode: `${SUPPORTED_CURRENCY_SYMBOLS.BNB}_POLYGON`,
                showOnlyCurrencies: [`${SUPPORTED_CURRENCY_SYMBOLS.MATIC}_POLYGON`, `${SUPPORTED_CURRENCY_SYMBOLS.USDC}_POLYGON`]
              },
              wyre: {
                srn: 'matic',
                currencyCode: CURRENCY_SYMBOLS.MATIC,
                currencies: [SUPPORTED_CURRENCY_SYMBOLS.MATIC, SUPPORTED_CURRENCY_SYMBOLS.MUSDC]
              }
            },
            [CHAIN_IDS.AVALANCHE]: {
              nativeCurrency: CURRENCY_SYMBOLS.AVALANCHE,
              network: 'avaxcchain',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.AVALANCHE],
              moonPay: {
                defaultCurrencyCode: `${SUPPORTED_CURRENCY_SYMBOLS.AVAX}_CCHAIN`,
                showOnlyCurrencies: [`${SUPPORTED_CURRENCY_SYMBOLS.AVAX}_CCHAIN`]
              },
              wyre: {
                srn: 'avalanche',
                currencyCode: CURRENCY_SYMBOLS.AVALANCHE,
                currencies: [SUPPORTED_CURRENCY_SYMBOLS.AVALANCHE, SUPPORTED_CURRENCY_SYMBOLS.AVAXC, SUPPORTED_CURRENCY_SYMBOLS.AVAXCUSDC]
              },
              coinbasePayCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.AVALANCHE]
            },
            [CHAIN_IDS.FANTOM]: {
              nativeCurrency: CURRENCY_SYMBOLS.FANTOM,
              network: 'fantom',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.FANTOM]
            },
            [CHAIN_IDS.CELO]: {
              nativeCurrency: CURRENCY_SYMBOLS.CELO,
              network: 'celo',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.CELO],
              moonPay: {
                defaultCurrencyCode: SUPPORTED_CURRENCY_SYMBOLS.CELO,
                showOnlyCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.CELO]
              }
            },
            [CHAIN_IDS.OPTIMISM]: {
              nativeCurrency: CURRENCY_SYMBOLS.ETH,
              network: 'optimism',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.ETH, SUPPORTED_CURRENCY_SYMBOLS.USDC]
            },
            [CHAIN_IDS.ARBITRUM]: {
              nativeCurrency: CURRENCY_SYMBOLS.ARBITRUM,
              network: 'arbitrum',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.ARBITRUM, SUPPORTED_CURRENCY_SYMBOLS.SPA, SUPPORTED_CURRENCY_SYMBOLS.USDC, SUPPORTED_CURRENCY_SYMBOLS.USDS]
            },
            [CHAIN_IDS.AURORA]: {
              nativeCurrency: CURRENCY_SYMBOLS.AURORA,
              network: 'aurora',
              transakCurrencies: [SUPPORTED_CURRENCY_SYMBOLS.AURORA]
            }
          };
          exports.BUYABLE_CHAINS_MAP = BUYABLE_CHAINS_MAP;
          const FEATURED_RPCS = [{
            chainId: CHAIN_IDS.ARBITRUM,
            nickname: ARBITRUM_DISPLAY_NAME,
            rpcUrl: `https://arbitrum-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.ARBITRUM,
            rpcPrefs: {
              blockExplorerUrl: 'https://explorer.arbitrum.io',
              imageUrl: AETH_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.AURORA,
            nickname: AURORA_DISPLAY_NAME,
            rpcUrl: `https://aurora-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.AURORA,
            rpcPrefs: {
              blockExplorerUrl: 'https://aurorascan.dev/',
              imageUrl: AURORA_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.AVALANCHE,
            nickname: AVALANCHE_DISPLAY_NAME,
            rpcUrl: `https://avalanche-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.AVALANCHE,
            rpcPrefs: {
              blockExplorerUrl: 'https://snowtrace.io/',
              imageUrl: AVAX_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.BSC,
            nickname: BNB_DISPLAY_NAME,
            rpcUrl: 'https://bsc-dataseed.binance.org/',
            ticker: CURRENCY_SYMBOLS.BNB,
            rpcPrefs: {
              blockExplorerUrl: 'https://bscscan.com/',
              imageUrl: BNB_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.FANTOM,
            nickname: FANTOM_DISPLAY_NAME,
            rpcUrl: 'https://rpc.ftm.tools/',
            ticker: CURRENCY_SYMBOLS.FANTOM,
            rpcPrefs: {
              blockExplorerUrl: 'https://ftmscan.com/',
              imageUrl: FTM_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.HARMONY,
            nickname: HARMONY_DISPLAY_NAME,
            rpcUrl: 'https://api.harmony.one/',
            ticker: CURRENCY_SYMBOLS.HARMONY,
            rpcPrefs: {
              blockExplorerUrl: 'https://explorer.harmony.one/',
              imageUrl: HARMONY_ONE_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.OPTIMISM,
            nickname: OPTIMISM_DISPLAY_NAME,
            rpcUrl: `https://optimism-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.ETH,
            rpcPrefs: {
              blockExplorerUrl: 'https://optimistic.etherscan.io/',
              imageUrl: OPTIMISM_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.PALM,
            nickname: PALM_DISPLAY_NAME,
            rpcUrl: `https://palm-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.PALM,
            rpcPrefs: {
              blockExplorerUrl: 'https://explorer.palm.io/',
              imageUrl: PALM_TOKEN_IMAGE_URL
            }
          }, {
            chainId: CHAIN_IDS.POLYGON,
            nickname: `${POLYGON_DISPLAY_NAME} ${(0, _lodash.capitalize)(NETWORK_TYPES.MAINNET)}`,
            rpcUrl: `https://polygon-mainnet.infura.io/v3/${infuraProjectId}`,
            ticker: CURRENCY_SYMBOLS.MATIC,
            rpcPrefs: {
              blockExplorerUrl: 'https://polygonscan.com/',
              imageUrl: MATIC_TOKEN_IMAGE_URL
            }
          }];
          exports.FEATURED_RPCS = FEATURED_RPCS;


        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\permissions.ts", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\permissions.ts
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.RestrictedMethods = exports.PermissionNamespaces = exports.ExcludedSnapPermissions = exports.ExcludedSnapEndowments = exports.EndowmentPermissions = exports.CaveatTypes = void 0;
          const CaveatTypes = Object.freeze({
            restrictReturnedAccounts: 'restrictReturnedAccounts'
          });
          exports.CaveatTypes = CaveatTypes;
          const RestrictedMethods = Object.freeze({
            eth_accounts: 'eth_accounts',
            ///: BEGIN:ONLY_INCLUDE_IN(flask)
            snap_confirm: 'snap_confirm',
            snap_notify: 'snap_notify',
            snap_manageState: 'snap_manageState',
            snap_getBip32PublicKey: 'snap_getBip32PublicKey',
            snap_getBip32Entropy: 'snap_getBip32Entropy',
            snap_getBip44Entropy: 'snap_getBip44Entropy',
            'wallet_snap_*': 'wallet_snap_*' ///: END:ONLY_INCLUDE_IN

          }); ///: BEGIN:ONLY_INCLUDE_IN(flask)

          exports.RestrictedMethods = RestrictedMethods;
          const PermissionNamespaces = Object.freeze({
            wallet_snap_: 'wallet_snap_*'
          });
          exports.PermissionNamespaces = PermissionNamespaces;
          const EndowmentPermissions = Object.freeze({
            'endowment:network-access': 'endowment:network-access',
            'endowment:long-running': 'endowment:long-running',
            'endowment:transaction-insight': 'endowment:transaction-insight',
            'endowment:cronjob': 'endowment:cronjob'
          }); // Methods / permissions in external packages that we are temporarily excluding.

          exports.EndowmentPermissions = EndowmentPermissions;
          const ExcludedSnapPermissions = new Set(['snap_dialog']);
          exports.ExcludedSnapPermissions = ExcludedSnapPermissions;
          const ExcludedSnapEndowments = new Set(['endowment:keyring']); ///: END:ONLY_INCLUDE_IN

          exports.ExcludedSnapEndowments = ExcludedSnapEndowments;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js", { "./network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\swaps.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WMATIC_CONTRACT_ADDRESS = exports.WETH_OPTIMISM_CONTRACT_ADDRESS = exports.WETH_GOERLI_CONTRACT_ADDRESS = exports.WETH_CONTRACT_ADDRESS = exports.WETH_ARBITRUM_CONTRACT_ADDRESS = exports.WBNB_CONTRACT_ADDRESS = exports.WAVAX_CONTRACT_ADDRESS = exports.TOKEN_BUCKET_PRIORITY = exports.TEST_ETH_SWAPS_TOKEN_OBJECT = exports.SWAP_FAILED_ERROR = exports.SWAPS_WRAPPED_TOKENS_ADDRESSES = exports.SWAPS_FETCH_ORDER_CONFLICT = exports.SWAPS_DEV_API_V2_BASE_URL = exports.SWAPS_CLIENT_ID = exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = exports.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP = exports.SWAPS_CHAINID_CONTRACT_ADDRESS_MAP = exports.SWAPS_API_V2_BASE_URL = exports.SLIPPAGE = exports.QUOTES_NOT_AVAILABLE_ERROR = exports.QUOTES_EXPIRED_ERROR = exports.POLYGON = exports.OPTIMISM_SWAPS_TOKEN_OBJECT = exports.OPTIMISM = exports.OFFLINE_FOR_MAINTENANCE = exports.MATIC_SWAPS_TOKEN_OBJECT = exports.GOERLI_SWAPS_TOKEN_OBJECT = exports.GOERLI = exports.GAS_DEV_API_BASE_URL = exports.GAS_API_BASE_URL = exports.ETH_SWAPS_TOKEN_OBJECT = exports.ETHEREUM = exports.ERROR_FETCHING_QUOTES = exports.DEFAULT_ERC20_APPROVE_GAS = exports.CONTRACT_DATA_DISABLED_ERROR = exports.BSC = exports.BNB_SWAPS_TOKEN_OBJECT = exports.AVAX_SWAPS_TOKEN_OBJECT = exports.AVALANCHE = exports.ARBITRUM_SWAPS_TOKEN_OBJECT = exports.ARBITRUM = exports.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS = exports.ALLOWED_PROD_SWAPS_CHAIN_IDS = exports.ALLOWED_DEV_SWAPS_CHAIN_IDS = exports.ALLOWED_CONTRACT_ADDRESSES = void 0;

          var _network = require("./network");

          const QUOTES_EXPIRED_ERROR = 'quotes-expired';
          exports.QUOTES_EXPIRED_ERROR = QUOTES_EXPIRED_ERROR;
          const SWAP_FAILED_ERROR = 'swap-failed-error';
          exports.SWAP_FAILED_ERROR = SWAP_FAILED_ERROR;
          const ERROR_FETCHING_QUOTES = 'error-fetching-quotes';
          exports.ERROR_FETCHING_QUOTES = ERROR_FETCHING_QUOTES;
          const QUOTES_NOT_AVAILABLE_ERROR = 'quotes-not-avilable';
          exports.QUOTES_NOT_AVAILABLE_ERROR = QUOTES_NOT_AVAILABLE_ERROR;
          const CONTRACT_DATA_DISABLED_ERROR = 'contract-data-disabled';
          exports.CONTRACT_DATA_DISABLED_ERROR = CONTRACT_DATA_DISABLED_ERROR;
          const OFFLINE_FOR_MAINTENANCE = 'offline-for-maintenance';
          exports.OFFLINE_FOR_MAINTENANCE = OFFLINE_FOR_MAINTENANCE;
          const SWAPS_FETCH_ORDER_CONFLICT = 'swaps-fetch-order-conflict'; // An address that the metaswap-api recognizes as the default token for the current network, in place of the token address that ERC-20 tokens have

          exports.SWAPS_FETCH_ORDER_CONFLICT = SWAPS_FETCH_ORDER_CONFLICT;
          const DEFAULT_TOKEN_ADDRESS = '0x0000000000000000000000000000000000000000';
          const ETH_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.ETH,
            name: 'Ether',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.ETH_TOKEN_IMAGE_URL
          };
          exports.ETH_SWAPS_TOKEN_OBJECT = ETH_SWAPS_TOKEN_OBJECT;
          const BNB_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.BNB,
            name: 'Binance Coin',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.BNB_TOKEN_IMAGE_URL
          };
          exports.BNB_SWAPS_TOKEN_OBJECT = BNB_SWAPS_TOKEN_OBJECT;
          const MATIC_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.MATIC,
            name: 'Matic',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.MATIC_TOKEN_IMAGE_URL
          };
          exports.MATIC_SWAPS_TOKEN_OBJECT = MATIC_SWAPS_TOKEN_OBJECT;
          const AVAX_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.AVALANCHE,
            name: 'Avalanche',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.AVAX_TOKEN_IMAGE_URL
          };
          exports.AVAX_SWAPS_TOKEN_OBJECT = AVAX_SWAPS_TOKEN_OBJECT;
          const TEST_ETH_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.TEST_ETH,
            name: 'Test Ether',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.TEST_ETH_TOKEN_IMAGE_URL
          };
          exports.TEST_ETH_SWAPS_TOKEN_OBJECT = TEST_ETH_SWAPS_TOKEN_OBJECT;
          const GOERLI_SWAPS_TOKEN_OBJECT = {
            symbol: _network.CURRENCY_SYMBOLS.ETH,
            name: 'Ether',
            address: DEFAULT_TOKEN_ADDRESS,
            decimals: 18,
            iconUrl: _network.TEST_ETH_TOKEN_IMAGE_URL
          };
          exports.GOERLI_SWAPS_TOKEN_OBJECT = GOERLI_SWAPS_TOKEN_OBJECT;
          const ARBITRUM_SWAPS_TOKEN_OBJECT = {
            ...ETH_SWAPS_TOKEN_OBJECT
          };
          exports.ARBITRUM_SWAPS_TOKEN_OBJECT = ARBITRUM_SWAPS_TOKEN_OBJECT;
          const OPTIMISM_SWAPS_TOKEN_OBJECT = {
            ...ETH_SWAPS_TOKEN_OBJECT
          }; // A gas value for ERC20 approve calls that should be sufficient for all ERC20 approve implementations

          exports.OPTIMISM_SWAPS_TOKEN_OBJECT = OPTIMISM_SWAPS_TOKEN_OBJECT;
          const DEFAULT_ERC20_APPROVE_GAS = '0x1d4c0';
          exports.DEFAULT_ERC20_APPROVE_GAS = DEFAULT_ERC20_APPROVE_GAS;
          const MAINNET_CONTRACT_ADDRESS = '0x881d40237659c251811cec9c364ef91dc08d300c';
          const TESTNET_CONTRACT_ADDRESS = '0x881d40237659c251811cec9c364ef91dc08d300c';
          const BSC_CONTRACT_ADDRESS = '0x1a1ec25dc08e98e5e93f1104b5e5cdd298707d31'; // It's the same as we use for BSC.

          const POLYGON_CONTRACT_ADDRESS = '0x1a1ec25dc08e98e5e93f1104b5e5cdd298707d31';
          const AVALANCHE_CONTRACT_ADDRESS = '0x1a1ec25dc08e98e5e93f1104b5e5cdd298707d31';
          const OPTIMISM_CONTRACT_ADDRESS = '0x9dDA6Ef3D919c9bC8885D5560999A3640431e8e6';
          const ARBITRUM_CONTRACT_ADDRESS = '0x9dDA6Ef3D919c9bC8885D5560999A3640431e8e6';
          const WETH_CONTRACT_ADDRESS = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
          exports.WETH_CONTRACT_ADDRESS = WETH_CONTRACT_ADDRESS;
          const WETH_GOERLI_CONTRACT_ADDRESS = '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6';
          exports.WETH_GOERLI_CONTRACT_ADDRESS = WETH_GOERLI_CONTRACT_ADDRESS;
          const WBNB_CONTRACT_ADDRESS = '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c';
          exports.WBNB_CONTRACT_ADDRESS = WBNB_CONTRACT_ADDRESS;
          const WMATIC_CONTRACT_ADDRESS = '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270';
          exports.WMATIC_CONTRACT_ADDRESS = WMATIC_CONTRACT_ADDRESS;
          const WAVAX_CONTRACT_ADDRESS = '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7';
          exports.WAVAX_CONTRACT_ADDRESS = WAVAX_CONTRACT_ADDRESS;
          const WETH_OPTIMISM_CONTRACT_ADDRESS = '0x4200000000000000000000000000000000000006';
          exports.WETH_OPTIMISM_CONTRACT_ADDRESS = WETH_OPTIMISM_CONTRACT_ADDRESS;
          const WETH_ARBITRUM_CONTRACT_ADDRESS = '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1';
          exports.WETH_ARBITRUM_CONTRACT_ADDRESS = WETH_ARBITRUM_CONTRACT_ADDRESS;
          const SWAPS_TESTNET_CHAIN_ID = '0x539';
          const SWAPS_API_V2_BASE_URL = 'https://swap.metaswap.codefi.network';
          exports.SWAPS_API_V2_BASE_URL = SWAPS_API_V2_BASE_URL;
          const SWAPS_DEV_API_V2_BASE_URL = 'https://swap.metaswap-dev.codefi.network';
          exports.SWAPS_DEV_API_V2_BASE_URL = SWAPS_DEV_API_V2_BASE_URL;
          const GAS_API_BASE_URL = 'https://gas-api.metaswap.codefi.network';
          exports.GAS_API_BASE_URL = GAS_API_BASE_URL;
          const GAS_DEV_API_BASE_URL = 'https://gas-api.metaswap-dev.codefi.network';
          exports.GAS_DEV_API_BASE_URL = GAS_DEV_API_BASE_URL;
          const BSC_DEFAULT_BLOCK_EXPLORER_URL = 'https://bscscan.com/';
          const MAINNET_DEFAULT_BLOCK_EXPLORER_URL = 'https://etherscan.io/';
          const GOERLI_DEFAULT_BLOCK_EXPLORER_URL = 'https://goerli.etherscan.io/';
          const POLYGON_DEFAULT_BLOCK_EXPLORER_URL = 'https://polygonscan.com/';
          const AVALANCHE_DEFAULT_BLOCK_EXPLORER_URL = 'https://snowtrace.io/';
          const OPTIMISM_DEFAULT_BLOCK_EXPLORER_URL = 'https://optimistic.etherscan.io/';
          const ARBITRUM_DEFAULT_BLOCK_EXPLORER_URL = 'https://arbiscan.io/';
          const ALLOWED_PROD_SWAPS_CHAIN_IDS = [_network.CHAIN_IDS.MAINNET, SWAPS_TESTNET_CHAIN_ID, _network.CHAIN_IDS.BSC, _network.CHAIN_IDS.POLYGON, _network.CHAIN_IDS.AVALANCHE, _network.CHAIN_IDS.OPTIMISM, _network.CHAIN_IDS.ARBITRUM];
          exports.ALLOWED_PROD_SWAPS_CHAIN_IDS = ALLOWED_PROD_SWAPS_CHAIN_IDS;
          const ALLOWED_DEV_SWAPS_CHAIN_IDS = [...ALLOWED_PROD_SWAPS_CHAIN_IDS, _network.CHAIN_IDS.GOERLI];
          exports.ALLOWED_DEV_SWAPS_CHAIN_IDS = ALLOWED_DEV_SWAPS_CHAIN_IDS;
          const ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS = [_network.CHAIN_IDS.MAINNET, _network.CHAIN_IDS.GOERLI];
          exports.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS = ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS;
          const SWAPS_CHAINID_CONTRACT_ADDRESS_MAP = {
            [_network.CHAIN_IDS.MAINNET]: MAINNET_CONTRACT_ADDRESS,
            [SWAPS_TESTNET_CHAIN_ID]: TESTNET_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.BSC]: BSC_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.POLYGON]: POLYGON_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.GOERLI]: TESTNET_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.AVALANCHE]: AVALANCHE_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.OPTIMISM]: OPTIMISM_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.ARBITRUM]: ARBITRUM_CONTRACT_ADDRESS
          };
          exports.SWAPS_CHAINID_CONTRACT_ADDRESS_MAP = SWAPS_CHAINID_CONTRACT_ADDRESS_MAP;
          const SWAPS_WRAPPED_TOKENS_ADDRESSES = {
            [_network.CHAIN_IDS.MAINNET]: WETH_CONTRACT_ADDRESS,
            [SWAPS_TESTNET_CHAIN_ID]: WETH_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.BSC]: WBNB_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.POLYGON]: WMATIC_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.GOERLI]: WETH_GOERLI_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.AVALANCHE]: WAVAX_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.OPTIMISM]: WETH_OPTIMISM_CONTRACT_ADDRESS,
            [_network.CHAIN_IDS.ARBITRUM]: WETH_ARBITRUM_CONTRACT_ADDRESS
          };
          exports.SWAPS_WRAPPED_TOKENS_ADDRESSES = SWAPS_WRAPPED_TOKENS_ADDRESSES;
          const ALLOWED_CONTRACT_ADDRESSES = {
            [_network.CHAIN_IDS.MAINNET]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.MAINNET], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.MAINNET]],
            [SWAPS_TESTNET_CHAIN_ID]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[SWAPS_TESTNET_CHAIN_ID], SWAPS_WRAPPED_TOKENS_ADDRESSES[SWAPS_TESTNET_CHAIN_ID]],
            [_network.CHAIN_IDS.GOERLI]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.GOERLI], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.GOERLI]],
            [_network.CHAIN_IDS.BSC]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.BSC], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.BSC]],
            [_network.CHAIN_IDS.POLYGON]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.POLYGON], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.POLYGON]],
            [_network.CHAIN_IDS.AVALANCHE]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.AVALANCHE], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.AVALANCHE]],
            [_network.CHAIN_IDS.OPTIMISM]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.OPTIMISM], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.OPTIMISM]],
            [_network.CHAIN_IDS.ARBITRUM]: [SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[_network.CHAIN_IDS.ARBITRUM], SWAPS_WRAPPED_TOKENS_ADDRESSES[_network.CHAIN_IDS.ARBITRUM]]
          };
          exports.ALLOWED_CONTRACT_ADDRESSES = ALLOWED_CONTRACT_ADDRESSES;
          const SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {
            [_network.CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,
            [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,
            [_network.CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT
          };
          exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = SWAPS_CHAINID_DEFAULT_TOKEN_MAP;
          const SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP = {
            [_network.CHAIN_IDS.BSC]: BSC_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.MAINNET]: MAINNET_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.POLYGON]: POLYGON_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.GOERLI]: GOERLI_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.AVALANCHE]: AVALANCHE_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.OPTIMISM]: OPTIMISM_DEFAULT_BLOCK_EXPLORER_URL,
            [_network.CHAIN_IDS.ARBITRUM]: ARBITRUM_DEFAULT_BLOCK_EXPLORER_URL
          };
          exports.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP = SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP;
          const ETHEREUM = 'ethereum';
          exports.ETHEREUM = ETHEREUM;
          const POLYGON = 'polygon';
          exports.POLYGON = POLYGON;
          const BSC = 'bsc';
          exports.BSC = BSC;
          const GOERLI = 'goerli';
          exports.GOERLI = GOERLI;
          const AVALANCHE = 'avalanche';
          exports.AVALANCHE = AVALANCHE;
          const OPTIMISM = 'optimism';
          exports.OPTIMISM = OPTIMISM;
          const ARBITRUM = 'arbitrum';
          exports.ARBITRUM = ARBITRUM;
          const SWAPS_CLIENT_ID = 'extension';
          exports.SWAPS_CLIENT_ID = SWAPS_CLIENT_ID;
          const TOKEN_BUCKET_PRIORITY = {
            OWNED: 'owned',
            TOP: 'top'
          };
          exports.TOKEN_BUCKET_PRIORITY = TOKEN_BUCKET_PRIORITY;
          const SLIPPAGE = {
            DEFAULT: 2,
            HIGH: 3
          };
          exports.SLIPPAGE = SLIPPAGE;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\time.ts
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SECOND = exports.MINUTE = exports.MILLISECOND = exports.HOUR = exports.DAY = void 0;
          const MILLISECOND = 1;
          exports.MILLISECOND = MILLISECOND;
          const SECOND = MILLISECOND * 1000;
          exports.SECOND = SECOND;
          const MINUTE = SECOND * 60;
          exports.MINUTE = MINUTE;
          const HOUR = MINUTE * 60;
          exports.HOUR = HOUR;
          const DAY = HOUR * 24;
          exports.DAY = DAY;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\tokens.js", { "@metamask/contract-metadata": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\contract-metadata\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\tokens.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TOKEN_API_METASWAP_CODEFI_URL = exports.STATIC_MAINNET_TOKEN_LIST = exports.LISTED_CONTRACT_ADDRESSES = void 0;

          var _contractMetadata = _interopRequireDefault(require("@metamask/contract-metadata"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          /**
           * A normalized list of addresses exported as part of the contractMap in
           * `@metamask/contract-metadata`. Used primarily to validate if manually entered
           * contract addresses do not match one of our listed tokens
           */
          const LISTED_CONTRACT_ADDRESSES = Object.keys(_contractMetadata.default).map(address => address.toLowerCase());
          /**
           * @typedef {object} TokenDetails
           * @property {string} address - The address of the selected 'TOKEN' or
           *  'COLLECTIBLE' contract.
           * @property {string} [symbol] - The symbol of the token.
           * @property {number} [decimals] - The number of decimals of the selected
           *  'ERC20' asset.
           * @property {number} [tokenId] - The id of the selected 'COLLECTIBLE' asset.
           * @property {TokenStandardStrings} [standard] - The standard of the selected
           *  asset.
           * @property {boolean} [isERC721] - True when the asset is a ERC721 token.
           */

          exports.LISTED_CONTRACT_ADDRESSES = LISTED_CONTRACT_ADDRESSES;
          const STATIC_MAINNET_TOKEN_LIST = Object.keys(_contractMetadata.default).reduce((acc, base) => {
            const {
              logo,
              ...tokenMetadata
            } = _contractMetadata.default[base];
            return {
              ...acc,
              [base.toLowerCase()]: {
                ...tokenMetadata,
                address: base.toLowerCase(),
                iconUrl: `images/contract/${logo}`,
                aggregators: []
              }
            };
          }, {});
          exports.STATIC_MAINNET_TOKEN_LIST = STATIC_MAINNET_TOKEN_LIST;
          const TOKEN_API_METASWAP_CODEFI_URL = 'https://token-api.metaswap.codefi.network/tokens/';
          exports.TOKEN_API_METASWAP_CODEFI_URL = TOKEN_API_METASWAP_CODEFI_URL;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", { "./app": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\constants\transaction.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TRANSACTION_TYPES = exports.TRANSACTION_STATUSES = exports.TRANSACTION_GROUP_STATUSES = exports.TRANSACTION_GROUP_CATEGORIES = exports.TRANSACTION_EVENTS = exports.TRANSACTION_ENVELOPE_TYPES = exports.TRANSACTION_APPROVAL_AMOUNT_TYPE = exports.TOKEN_STANDARDS = exports.SMART_TRANSACTION_STATUSES = exports.IN_PROGRESS_TRANSACTION_STATUSES = exports.ERC721 = exports.ERC20 = exports.ERC1155 = exports.ASSET_TYPES = void 0;

          var _app = require("./app");

          /**
           * Transaction Type is a MetaMask construct used internally
           *
           * @typedef {object} TransactionTypes
           * @property {'transfer'} TOKEN_METHOD_TRANSFER - A token transaction where the user
           *  is sending tokens that they own to another address
           * @property {'transferfrom'} TOKEN_METHOD_TRANSFER_FROM - A token transaction
           *  transferring tokens from an account that the sender has an allowance of.
           *  For more information on allowances, see the approve type.
           * @property {'safetransferfrom'} TOKEN_METHOD_SAFE_TRANSFER_FROM - A token transaction
           *  transferring tokens from an account that the sender has an allowance of.
           *  The method is prefixed with safe because when calling this method the contract checks
           *  to ensure that the receiver is an address capable of handling with the token being sent.
           * @property {'approve'} TOKEN_METHOD_APPROVE - A token transaction requesting an
           *  allowance of the token to spend on behalf of the user
           * @property {'setapprovalforall'} TOKEN_METHOD_SET_APPROVAL_FOR_ALL - A token transaction requesting an
           *  allowance of all of a user's token to spend on behalf of the user
           * @property {'incoming'} INCOMING - An incoming (deposit) transaction
           * @property {'simpleSend'} SIMPLE_SEND - A transaction sending a network's native asset to a recipient
           * @property {'contractInteraction'} CONTRACT_INTERACTION - A transaction that is
           *  interacting with a smart contract's methods that we have not treated as a special
           *  case, such as approve, transfer, and transferfrom
           * @property {'contractDeployment'} DEPLOY_CONTRACT - A transaction that deployed
           *  a smart contract
           * @property {'swap'} SWAP - A transaction swapping one token for another through
           *  MetaMask Swaps
           * @property {'swapApproval'} SWAP_APPROVAL - Similar to the approve type, a swap
           *  approval is a special case of ERC20 approve method that requests an allowance of
           *  the token to spend on behalf of the user for the MetaMask Swaps contract. The first
           *  swap for any token will have an accompanying swapApproval transaction.
           * @property {'cancel'} CANCEL - A transaction submitted with the same nonce as a
           *  previous transaction, a higher gas price and a zeroed out send amount. Useful
           *  for users who accidentally send to erroneous addresses or if they send too much.
           * @property {'retry'} RETRY - When a transaction is failed it can be retried by
           *  resubmitting the same transaction with a higher gas fee. This type is also used
           *  to speed up pending transactions. This is accomplished by creating a new tx with
           *  the same nonce and higher gas fees.
           */

          /**
           * This type will work anywhere you expect a string that can be one of the
           * above transaction types.
           *
           * @typedef {TransactionTypes[keyof TransactionTypes]} TransactionTypeString
           */

          /**
           * @type {TransactionTypes}
           */
          const TRANSACTION_TYPES = {
            CANCEL: 'cancel',
            CONTRACT_INTERACTION: 'contractInteraction',
            DEPLOY_CONTRACT: 'contractDeployment',
            ETH_DECRYPT: _app.MESSAGE_TYPE.ETH_DECRYPT,
            ETH_GET_ENCRYPTION_PUBLIC_KEY: _app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY,
            INCOMING: 'incoming',
            PERSONAL_SIGN: _app.MESSAGE_TYPE.PERSONAL_SIGN,
            RETRY: 'retry',
            SIGN: _app.MESSAGE_TYPE.ETH_SIGN,
            SIGN_TYPED_DATA: _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA,
            SIMPLE_SEND: 'simpleSend',
            SMART: 'smart',
            SWAP: 'swap',
            SWAP_APPROVAL: 'swapApproval',
            TOKEN_METHOD_APPROVE: 'approve',
            TOKEN_METHOD_SAFE_TRANSFER_FROM: 'safetransferfrom',
            TOKEN_METHOD_TRANSFER: 'transfer',
            TOKEN_METHOD_TRANSFER_FROM: 'transferfrom',
            TOKEN_METHOD_SET_APPROVAL_FOR_ALL: 'setapprovalforall'
          };
          /**
           * In EIP-2718 typed transaction envelopes were specified, with the very first
           * typed envelope being 'legacy' and describing the shape of the base
           * transaction params that were hitherto the only transaction type sent on
           * Ethereum.
           *
           * @typedef {object} TransactionEnvelopeTypes
           * @property {'0x0'} LEGACY - A legacy transaction, the very first type.
           * @property {'0x1'} ACCESS_LIST - EIP-2930 defined the access list transaction
           *  type that allowed for specifying the state that a transaction would act
           *  upon in advance and theoretically save on gas fees.
           * @property {'0x2'} FEE_MARKET - The type introduced comes from EIP-1559,
           *  Fee Market describes the addition of a baseFee to blocks that will be
           *  burned instead of distributed to miners. Transactions of this type have
           *  both a maxFeePerGas (maximum total amount in gwei per gas to spend on the
           *  transaction) which is inclusive of the maxPriorityFeePerGas (maximum amount
           *  of gwei per gas from the transaction fee to distribute to miner).
           */

          /**
           * @type {TransactionEnvelopeTypes}
           */

          exports.TRANSACTION_TYPES = TRANSACTION_TYPES;
          const TRANSACTION_ENVELOPE_TYPES = {
            LEGACY: '0x0',
            ACCESS_LIST: '0x1',
            FEE_MARKET: '0x2'
          };
          /**
           * Transaction Status is a mix of Ethereum and MetaMask terminology, used internally
           * for transaction processing.
           *
           * @typedef {object} TransactionStatuses
           * @property {'unapproved'} UNAPPROVED - A new transaction that the user has not
           *  approved or rejected
           * @property {'approved'} APPROVED - The user has approved the transaction in the
           *  MetaMask UI
           * @property {'rejected'} REJECTED - The user has rejected the transaction in the
           *  MetaMask UI
           * @property {'signed'} SIGNED - The transaction has been signed
           * @property {'submitted'} SUBMITTED - The transaction has been submitted to network
           * @property {'failed'} FAILED - The transaction has failed for some reason
           * @property {'dropped'} DROPPED - The transaction was dropped due to a tx with same
           *  nonce being accepted
           * @property {'confirmed'} CONFIRMED - The transaction was confirmed by the network
           */

          /**
           * This type will work anywhere you expect a string that can be one of the
           * above transaction statuses.
           *
           * @typedef {TransactionStatuses[keyof TransactionStatuses]} TransactionStatusString
           */

          /**
           * @type {TransactionStatuses}
           */

          exports.TRANSACTION_ENVELOPE_TYPES = TRANSACTION_ENVELOPE_TYPES;
          const TRANSACTION_STATUSES = {
            UNAPPROVED: 'unapproved',
            APPROVED: 'approved',
            REJECTED: 'rejected',
            SIGNED: 'signed',
            SUBMITTED: 'submitted',
            FAILED: 'failed',
            DROPPED: 'dropped',
            CONFIRMED: 'confirmed',
            PENDING: 'pending'
          };
          /**
           * With this list we can detect if a transaction is still in progress.
           */

          exports.TRANSACTION_STATUSES = TRANSACTION_STATUSES;
          const IN_PROGRESS_TRANSACTION_STATUSES = [TRANSACTION_STATUSES.UNAPPROVED, TRANSACTION_STATUSES.APPROVED, TRANSACTION_STATUSES.SIGNED, TRANSACTION_STATUSES.SUBMITTED, TRANSACTION_STATUSES.PENDING];
          /**
           * Transaction Group Status is a MetaMask construct to track the status of groups
           * of transactions.
           *
           * @typedef {object} TransactionGroupStatuses
           * @property {'cancelled'} CANCELLED - A cancel type transaction in the group was
           *  confirmed
           * @property {'pending'} PENDING - The primaryTransaction of the group has a status
           *  that is one of TRANSACTION_STATUSES.APPROVED, TRANSACTION_STATUSES.UNAPPROVED
           *  or TRANSACTION_STATUSES.SUBMITTED
           */

          /**
           * @type {TransactionGroupStatuses}
           */

          exports.IN_PROGRESS_TRANSACTION_STATUSES = IN_PROGRESS_TRANSACTION_STATUSES;
          const TRANSACTION_GROUP_STATUSES = {
            CANCELLED: 'cancelled',
            PENDING: 'pending'
          };
          /**
           * Statuses that are specific to Smart Transactions.
           *
           * @typedef {object} SmartTransactionStatuses
           * @property {'cancelled'} CANCELLED - It can be cancelled for various reasons.
           * @property {'pending'} PENDING - Smart transaction is being processed.
           * @property {'success'} SUCCESS - Smart transaction was successfully mined.
           */

          /**
           * @type {SmartTransactionStatuses}
           */

          exports.TRANSACTION_GROUP_STATUSES = TRANSACTION_GROUP_STATUSES;
          const SMART_TRANSACTION_STATUSES = {
            CANCELLED: 'cancelled',
            PENDING: 'pending',
            SUCCESS: 'success'
          };
          /**
           * Types that are specific to the transaction approval amount.
           *
           * @typedef {object} TransactionApprovalAmountType
           * @property {'custom'} CUSTOM - The user has edited the token amount.
           * @property {'revoke'} REVOKE - The selected amount (either CUSTOM or DAPP_PROPOSED) is 0.
           * @property {'dapp_proposed'} DAPP_PROPOSED - The dapp proposed token amount.
           */

          /**
           * @type {TransactionApprovalAmountType}
           */

          exports.SMART_TRANSACTION_STATUSES = SMART_TRANSACTION_STATUSES;
          const TRANSACTION_APPROVAL_AMOUNT_TYPE = {
            CUSTOM: 'custom',
            REVOKE: 'revoke',
            DAPP_PROPOSED: 'dapp_proposed'
          };
          /**
           * Transaction Group Category is a MetaMask construct to categorize the intent
           * of a group of transactions for purposes of displaying in the UI
           *
           * @typedef {object} TransactionGroupCategories
           * @property {'send'} SEND - Transaction group representing ether being sent from
           *  the user.
           * @property {'receive'} RECEIVE - Transaction group representing a deposit/incoming
           *  transaction. This category maps 1:1 with TRANSACTION_CATEGORIES.INCOMING.
           * @property {'interaction'} INTERACTION - Transaction group representing
           *  an interaction with a smart contract's methods.
           * @property {'approval'} APPROVAL - Transaction group representing a request for an
           *  allowance of a token to spend on the user's behalf.
           * @property {'signature-request'} SIGNATURE_REQUEST - Transaction group representing
           *  a signature request This currently only shows up in the UI when its pending user
           *  approval in the UI. Once the user approves or rejects it will no longer show in
           *  activity.
           * @property {'swap'} SWAP - Transaction group representing a token swap through
           *  MetaMask Swaps. This transaction group's primary currency changes depending
           *  on context. If the user is viewing an asset page for a token received from a swap,
           *  the primary currency will be the received token. Otherwise the token exchanged
           *  will be shown.
           */

          /**
           * @type {TransactionGroupCategories}
           */

          exports.TRANSACTION_APPROVAL_AMOUNT_TYPE = TRANSACTION_APPROVAL_AMOUNT_TYPE;
          const TRANSACTION_GROUP_CATEGORIES = {
            APPROVAL: 'approval',
            INTERACTION: 'interaction',
            RECEIVE: 'receive',
            SEND: 'send',
            SIGNATURE_REQUEST: 'signature-request',
            SWAP: 'swap'
          };
          /**
           * @typedef {object} TxParams
           * @property {string} from - The address the transaction is sent from
           * @property {string} to - The address the transaction is sent to
           * @property {string} value - The amount of wei, in hexadecimal, to send
           * @property {number} nonce - The transaction count for the current account/network
           * @property {string} gasPrice - The amount of gwei, in hexadecimal, per unit of gas
           * @property {string} gas - The max amount of gwei, in hexadecimal, the user is willing to pay
           * @property {string} [data] - Hexadecimal encoded string representing calls to the EVM's ABI
           */

          /**
           * @typedef {object} TxError
           * @property {string} message - The message from the encountered error.
           * @property {any} rpc - The "value" of the error.
           * @property {string} [stack] - the stack trace from the error, if available.
           */

          /**
           * An object representing a transaction, in whatever state it is in.
           *
           * @typedef {object} TransactionMeta
           * @property {string} [blockNumber] - The block number this transaction was
           *  included in. Currently only present on incoming transactions!
           * @property {number} id - An internally unique tx identifier.
           * @property {number} time - Time the transaction was first suggested, in unix
           *  epoch time (ms).
           * @property {string} contractMethodName - A string representing a name of
           * transaction contract method.
           * @property {string} customTokenAmount - The custom token amount is the amount
           * set by the user
           * @property {string} dappProposedTokenAmount - The dapp proposed token amount
           * @property {string} currentTokenBalance - The balance of the token that is
           * being send
           * @property {string} originalApprovalAmount - The original approval amount
           * is the originally dapp proposed token amount
           * @property {string} finalApprovalAmount - The chosen amount which will be the
           * same as the originally proposed token amount if the user does not edit the
           * amount or will be a custom token amount set by the user
           * @property {TransactionTypeString} type - The type of transaction this txMeta
           *  represents.
           * @property {string} originalType - When we speed up a transaction,
           *  we set the type as Retry and we lose information about type of transaction
           *  that is being set up, so we use original type to track that information.
           * @property {TransactionStatusString} status - The current status of the
           *  transaction.
           * @property {string} metamaskNetworkId - The transaction's network ID, used
           *  for EIP-155 compliance.
           * @property {boolean} loadingDefaults - TODO: Document
           * @property {TxParams} txParams - The transaction params as passed to the
           *  network provider.
           * @property {object[]} history - A history of mutations to this
           *  TransactionMeta object.
           * @property {string} origin - A string representing the interface that
           *  suggested the transaction.
           * @property {string} originalGasEstimate - A string representing the original
           * gas estimation on the transaction metadata.
           * @property {boolean} userEditedGasLimit - A boolean representing when the
           * user manually edited the gas limit.
           * @property {object} nonceDetails - A metadata object containing information
           *  used to derive the suggested nonce, useful for debugging nonce issues.
           * @property {string} rawTx - A hex string of the final signed transaction,
           *  ready to submit to the network.
           * @property {string} hash - A hex string of the transaction hash, used to
           *  identify the transaction on the network.
           * @property {number} [submittedTime] - The time the transaction was submitted to
           *  the network, in Unix epoch time (ms).
           * @property {TxError} [err] - The error encountered during the transaction
           */

          /**
           * Defines the possible types
           *
           * @typedef {object} TransactionMetaMetricsEvents
           * @property {'Transaction Added'} ADDED - All transactions, except incoming
           *  ones, are added to the controller state in an unapproved status. When this
           *  happens we fire the Transaction Added event to show that the transaction
           *  has been added to the user's MetaMask.
           * @property {'Transaction Approved'} APPROVED - When an unapproved transaction
           *  is in the controller state, MetaMask will render a confirmation screen for
           *  that transaction. If the user approves the transaction we fire this event
           *  to indicate that the user has approved the transaction for submission to
           *  the network.
           * @property {'Transaction Rejected'} REJECTED - When an unapproved transaction
           *  is in the controller state, MetaMask will render a confirmation screen for
           *  that transaction. If the user rejects the transaction we fire this event
           *  to indicate that the user has rejected the transaction. It will be removed
           *  from state as a result.
           * @property {'Transaction Submitted'} SUBMITTED - After a transaction is
           *  approved by the user, it is then submitted to the network for inclusion in
           *  a block. When this happens we fire the Transaction Submitted event to
           *  indicate that MetaMask is submitting a transaction at the user's request.
           * @property {'Transaction Finalized'} FINALIZED - All transactions that are
           *  submitted will finalized (eventually) by either being dropped, failing
           *  or being confirmed. When this happens we track this event, along with the
           *  status.
           */

          /**
           * This type will work anywhere you expect a string that can be one of the
           * above transaction event types.
           *
           * @typedef {TransactionMetaMetricsEvents[keyof TransactionMetaMetricsEvents]} TransactionMetaMetricsEventString
           */

          /**
           * @type {TransactionMetaMetricsEvents}
           */

          exports.TRANSACTION_GROUP_CATEGORIES = TRANSACTION_GROUP_CATEGORIES;
          const TRANSACTION_EVENTS = {
            ADDED: 'Transaction Added',
            APPROVED: 'Transaction Approved',
            FINALIZED: 'Transaction Finalized',
            REJECTED: 'Transaction Rejected',
            SUBMITTED: 'Transaction Submitted'
          };
          /**
           * @typedef {object} AssetTypes
           * @property {'NATIVE'} NATIVE - The native asset for the current network, such
           *  as ETH
           * @property {'TOKEN'} TOKEN - An ERC20 token.
           * @property {'COLLECTIBLE'} COLLECTIBLE - An ERC721 or ERC1155 token.
           * @property {'UNKNOWN'} UNKNOWN - A transaction interacting with a contract
           *  that isn't a token method interaction will be marked as dealing with an
           *  unknown asset type.
           */

          /**
           * This type will work anywhere you expect a string that can be one of the
           * above asset types
           *
           * @typedef {AssetTypes[keyof AssetTypes]} AssetTypesString
           */

          /**
           * The types of assets that a user can send
           *
           * @type {AssetTypes}
           */

          exports.TRANSACTION_EVENTS = TRANSACTION_EVENTS;
          const ASSET_TYPES = {
            NATIVE: 'NATIVE',
            TOKEN: 'TOKEN',
            COLLECTIBLE: 'COLLECTIBLE',
            UNKNOWN: 'UNKNOWN'
          };
          exports.ASSET_TYPES = ASSET_TYPES;
          const ERC20 = 'ERC20';
          exports.ERC20 = ERC20;
          const ERC721 = 'ERC721';
          exports.ERC721 = ERC721;
          const ERC1155 = 'ERC1155';
          /**
           * @typedef {object} TokenStandards
           * @property {'ERC20'} ERC20 - A token that conforms to the ERC20 standard.
           * @property {'ERC721'} ERC721 - A token that conforms to the ERC721 standard.
           * @property {'ERC1155'} ERC1155 - A token that conforms to the ERC1155
           *  standard.
           * @property {'NONE'} NONE - Not a token, but rather the base asset of the
           *  selected chain.
           */

          /**
           * This type will work anywhere you expect a string that can be one of the
           * above statuses
           *
           * @typedef {TokenStandards[keyof TokenStandards]} TokenStandardStrings
           */

          /**
           * Describes the standard which a token conforms to.
           *
           * @type {TokenStandards}
           */

          exports.ERC1155 = ERC1155;
          const TOKEN_STANDARDS = {
            ERC20,
            ERC721,
            ERC1155,
            NONE: 'NONE'
          };
          exports.TOKEN_STANDARDS = TOKEN_STANDARDS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js", { "../constants/time": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts", "../modules/fetch-with-timeout": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\fetch-with-timeout.js", "./storage-helpers": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\storage-helpers.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\fetch-with-cache.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _time = require("../constants/time");

          var _fetchWithTimeout = _interopRequireDefault(require("../modules/fetch-with-timeout"));

          var _storageHelpers = require("./storage-helpers");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const fetchWithCache = async (url, fetchOptions = {}, {
            cacheRefreshTime = _time.MINUTE * 6,
            timeout = _time.SECOND * 30
          } = {}) => {
            if (fetchOptions.body || fetchOptions.method && fetchOptions.method !== 'GET') {
              throw new Error('fetchWithCache only supports GET requests');
            }

            if (!(fetchOptions.headers instanceof window.Headers)) {
              fetchOptions.headers = new window.Headers(fetchOptions.headers);
            }

            if (fetchOptions.headers.has('Content-Type') && fetchOptions.headers.get('Content-Type') !== 'application/json') {
              throw new Error('fetchWithCache only supports JSON responses');
            }

            const currentTime = Date.now();
            const cacheKey = `cachedFetch:${url}`;
            const {
              cachedResponse,
              cachedTime
            } = (await (0, _storageHelpers.getStorageItem)(cacheKey)) || {};

            if (cachedResponse && currentTime - cachedTime < cacheRefreshTime) {
              return cachedResponse;
            }

            fetchOptions.headers.set('Content-Type', 'application/json');
            const fetchWithTimeout = (0, _fetchWithTimeout.default)(timeout);
            const response = await fetchWithTimeout(url, {
              referrerPolicy: 'no-referrer-when-downgrade',
              body: null,
              method: 'GET',
              mode: 'cors',
              ...fetchOptions
            });

            if (!response.ok) {
              throw new Error(`Fetch failed with status '${response.status}': '${response.statusText}'`);
            }

            const responseJson = await response.json();
            const cacheEntry = {
              cachedResponse: responseJson,
              cachedTime: currentTime
            };
            await (0, _storageHelpers.setStorageItem)(cacheKey, cacheEntry);
            return responseJson;
          };

          var _default = fetchWithCache;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js", { "../modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\metamask-controller-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getTokenValueParam = getTokenValueParam;
          exports.hexToDecimal = hexToDecimal;

          var _conversion = require("../modules/conversion.utils");

          function hexToDecimal(hexValue) {
            return (0, _conversion.conversionUtil)(hexValue, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec'
            });
          }

          function getTokenValueParam(tokenData = {}) {
            var _tokenData$args, _tokenData$args$_valu;

            return tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args = tokenData.args) === null || _tokenData$args === void 0 ? void 0 : (_tokenData$args$_valu = _tokenData$args._value) === null || _tokenData$args$_valu === void 0 ? void 0 : _tokenData$args$_valu.toString();
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\storage-helpers.js", { "localforage": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\localforage\\dist\\localforage.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\storage-helpers.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getStorageItem = getStorageItem;
          exports.setStorageItem = setStorageItem;

          var _localforage = _interopRequireDefault(require("localforage"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          async function getStorageItem(key) {
            try {
              const serializedData = await _localforage.default.getItem(key);

              if (serializedData === null) {
                return undefined;
              }

              return JSON.parse(serializedData);
            } catch (err) {
              return undefined;
            }
          }

          async function setStorageItem(key, value) {
            try {
              const serializedData = JSON.stringify(value);
              await _localforage.default.setItem(key, serializedData);
            } catch (err) {
              console.warn(err);
            }
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\swaps-utils.js", { "../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../constants/swaps": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js", "../constants/time": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts", "../modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "./fetch-with-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js", "./transactions-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\swaps-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.QUOTE_VALIDATORS = void 0;
          exports.addHexPrefixToObjectValues = addHexPrefixToObjectValues;
          exports.calcTokenValue = calcTokenValue;
          exports.constructTxParams = constructTxParams;
          exports.fetchTradesInfo = fetchTradesInfo;
          exports.validHex = exports.truthyString = exports.truthyDigitString = exports.shouldEnableDirectWrapping = exports.getBaseApi = void 0;
          exports.validateData = validateData;

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _network = require("../constants/network");

          var _swaps = require("../constants/swaps");

          var _time = require("../constants/time");

          var _hexstringUtils = require("../modules/hexstring-utils");

          var _util = require("../../app/scripts/lib/util");

          var _fetchWithCache = _interopRequireDefault(require("./fetch-with-cache"));

          var _transactionsControllerUtils = require("./transactions-controller-utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const TEST_CHAIN_IDS = [_network.CHAIN_IDS.GOERLI, _network.CHAIN_IDS.LOCALHOST];
          const clientIdHeader = {
            'X-Client-Id': _swaps.SWAPS_CLIENT_ID
          };

          const validHex = string => Boolean(string === null || string === void 0 ? void 0 : string.match(/^0x[a-f0-9]+$/u));

          exports.validHex = validHex;

          const truthyString = string => Boolean(string === null || string === void 0 ? void 0 : string.length);

          exports.truthyString = truthyString;

          const truthyDigitString = string => truthyString(string) && Boolean(string.match(/^\d+$/u));

          exports.truthyDigitString = truthyDigitString;

          function validateData(validators, object, urlUsed, logError = true) {
            return validators.every(({
              property,
              type,
              validator
            }) => {
              const types = type.split('|');
              const valid = types.some(_type => typeof object[property] === _type) && (!validator || validator(object[property]));

              if (!valid && logError) {
                _loglevel.default.error(`response to GET ${urlUsed} invalid for property ${property}; value was:`, object[property], '| type was: ', typeof object[property]);
              }

              return valid;
            });
          }

          const QUOTE_VALIDATORS = [{
            property: 'trade',
            type: 'object',
            validator: trade => trade && validHex(trade.data) && (0, _hexstringUtils.isValidHexAddress)(trade.to, {
              allowNonPrefixed: false
            }) && (0, _hexstringUtils.isValidHexAddress)(trade.from, {
              allowNonPrefixed: false
            }) && truthyString(trade.value)
          }, {
            property: 'approvalNeeded',
            type: 'object',
            validator: approvalTx => approvalTx === null || approvalTx && validHex(approvalTx.data) && (0, _hexstringUtils.isValidHexAddress)(approvalTx.to, {
              allowNonPrefixed: false
            }) && (0, _hexstringUtils.isValidHexAddress)(approvalTx.from, {
              allowNonPrefixed: false
            })
          }, {
            property: 'sourceAmount',
            type: 'string',
            validator: truthyDigitString
          }, {
            property: 'destinationAmount',
            type: 'string',
            validator: truthyDigitString
          }, {
            property: 'sourceToken',
            type: 'string',
            validator: input => (0, _hexstringUtils.isValidHexAddress)(input, {
              allowNonPrefixed: false
            })
          }, {
            property: 'destinationToken',
            type: 'string',
            validator: input => (0, _hexstringUtils.isValidHexAddress)(input, {
              allowNonPrefixed: false
            })
          }, {
            property: 'aggregator',
            type: 'string',
            validator: truthyString
          }, {
            property: 'aggType',
            type: 'string',
            validator: truthyString
          }, {
            property: 'error',
            type: 'object',
            validator: error => error === null || typeof error === 'object'
          }, {
            property: 'averageGas',
            type: 'number'
          }, {
            property: 'maxGas',
            type: 'number'
          }, {
            property: 'gasEstimate',
            type: 'number|undefined',
            validator: gasEstimate => gasEstimate === undefined || gasEstimate > 0
          }, {
            property: 'fee',
            type: 'number'
          }];
          /**
           * @param {string} type - Type of an API call, e.g. "tokens"
           * @param {string} chainId
           * @returns string
           */

          exports.QUOTE_VALIDATORS = QUOTE_VALIDATORS;

          const getBaseUrlForNewSwapsApi = (type, chainId) => {
            const useDevApis = false;
            const v2ApiBaseUrl = useDevApis ? _swaps.SWAPS_DEV_API_V2_BASE_URL : _swaps.SWAPS_API_V2_BASE_URL;
            const gasApiBaseUrl = useDevApis ? _swaps.GAS_DEV_API_BASE_URL : _swaps.GAS_API_BASE_URL;
            const noNetworkSpecificTypes = ['refreshTime']; // These types don't need network info in the URL.

            if (noNetworkSpecificTypes.includes(type)) {
              return v2ApiBaseUrl;
            }

            const chainIdDecimal = chainId && parseInt(chainId, 16);
            const gasApiTypes = ['gasPrices'];

            if (gasApiTypes.includes(type)) {
              return `${gasApiBaseUrl}/networks/${chainIdDecimal}`; // Gas calculations are in its own repo.
            }

            return `${v2ApiBaseUrl}/networks/${chainIdDecimal}`;
          };

          const getBaseApi = function (type, chainId = _network.CHAIN_IDS.MAINNET) {
            // eslint-disable-next-line no-param-reassign
            chainId = TEST_CHAIN_IDS.includes(chainId) ? _network.CHAIN_IDS.MAINNET : chainId;
            const baseUrl = getBaseUrlForNewSwapsApi(type, chainId);

            if (!baseUrl) {
              throw new Error(`Swaps API calls are disabled for chainId: ${chainId}`);
            }

            switch (type) {
              case 'trade':
                return `${baseUrl}/trades?`;

              case 'tokens':
                return `${baseUrl}/tokens`;

              case 'token':
                return `${baseUrl}/token`;

              case 'topAssets':
                return `${baseUrl}/topAssets`;

              case 'aggregatorMetadata':
                return `${baseUrl}/aggregatorMetadata`;

              case 'gasPrices':
                return `${baseUrl}/gasPrices`;

              case 'network':
                return baseUrl;

              default:
                throw new Error('getBaseApi requires an api call type');
            }
          };

          exports.getBaseApi = getBaseApi;

          function calcTokenValue(value, decimals) {
            const multiplier = Math.pow(10, Number(decimals || 0));
            return new _bignumber.default(String(value)).times(multiplier);
          }

          const shouldEnableDirectWrapping = (chainId, sourceToken, destinationToken) => {
            var _SWAPS_CHAINID_DEFAUL;

            if (!sourceToken || !destinationToken) {
              return false;
            }

            const wrappedToken = _swaps.SWAPS_WRAPPED_TOKENS_ADDRESSES[chainId];
            const nativeToken = (_SWAPS_CHAINID_DEFAUL = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL.address;
            const sourceTokenLowerCase = sourceToken.toLowerCase();
            const destinationTokenLowerCase = destinationToken.toLowerCase();
            return sourceTokenLowerCase === wrappedToken && destinationTokenLowerCase === nativeToken || sourceTokenLowerCase === nativeToken && destinationTokenLowerCase === wrappedToken;
          };
          /**
           * Given and object where all values are strings, returns the same object with all values
           * now prefixed with '0x'
           *
           * @param obj
           */


          exports.shouldEnableDirectWrapping = shouldEnableDirectWrapping;

          function addHexPrefixToObjectValues(obj) {
            return Object.keys(obj).reduce((newObj, key) => {
              return {
                ...newObj,
                [key]: (0, _util.addHexPrefix)(obj[key])
              };
            }, {});
          }
          /**
           * Given the standard set of information about a transaction, returns a transaction properly formatted for
           * publishing via JSON RPC and web3
           *
           * @param {object} options
           * @param {boolean} [options.sendToken] - Indicates whether or not the transaciton is a token transaction
           * @param {string} options.data - A hex string containing the data to include in the transaction
           * @param {string} options.to - A hex address of the tx recipient address
           * @param options.amount
           * @param {string} options.from - A hex address of the tx sender address
           * @param {string} options.gas - A hex representation of the gas value for the transaction
           * @param {string} options.gasPrice - A hex representation of the gas price for the transaction
           * @returns {object} An object ready for submission to the blockchain, with all values appropriately hex prefixed
           */


          function constructTxParams({
            sendToken,
            data,
            to,
            amount,
            from,
            gas,
            gasPrice
          }) {
            const txParams = {
              data,
              from,
              value: '0',
              gas,
              gasPrice
            };

            if (!sendToken) {
              txParams.value = amount;
              txParams.to = to;
            }

            return addHexPrefixToObjectValues(txParams);
          }

          async function fetchTradesInfo({
            slippage,
            sourceToken,
            sourceDecimals,
            destinationToken,
            value,
            fromAddress,
            exchangeList
          }, {
            chainId
          }) {
            const urlParams = {
              destinationToken,
              sourceToken,
              sourceAmount: calcTokenValue(value, sourceDecimals).toString(10),
              slippage,
              timeout: _time.SECOND * 10,
              walletAddress: fromAddress
            };

            if (exchangeList) {
              urlParams.exchangeList = exchangeList;
            }

            if (shouldEnableDirectWrapping(chainId, sourceToken, destinationToken)) {
              urlParams.enableDirectWrapping = true;
            }

            const queryString = new URLSearchParams(urlParams).toString();
            const tradeURL = `${getBaseApi('trade', chainId)}${queryString}`;
            const tradesResponse = await (0, _fetchWithCache.default)(tradeURL, {
              method: 'GET',
              headers: clientIdHeader
            }, {
              cacheRefreshTime: 0,
              timeout: _time.SECOND * 15
            });
            const newQuotes = tradesResponse.reduce((aggIdTradeMap, quote) => {
              if (quote.trade && !quote.error && validateData(QUOTE_VALIDATORS, quote, tradeURL)) {
                const constructedTrade = constructTxParams({
                  to: quote.trade.to,
                  from: quote.trade.from,
                  data: quote.trade.data,
                  amount: (0, _transactionsControllerUtils.decimalToHex)(quote.trade.value),
                  gas: (0, _transactionsControllerUtils.decimalToHex)(quote.maxGas)
                });
                let {
                  approvalNeeded
                } = quote;

                if (approvalNeeded) {
                  approvalNeeded = constructTxParams({
                    ...approvalNeeded
                  });
                }

                return {
                  ...aggIdTradeMap,
                  [quote.aggregator]: {
                    ...quote,
                    slippage,
                    trade: constructedTrade,
                    approvalNeeded
                  }
                };
              }

              return aggIdTradeMap;
            }, {});
            return newQuotes;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\switch-direction.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\switch-direction.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          /**
           * Switch the CSS stylesheet used between 'rtl' and 'ltr'
           *
           * @param {('ltr' | 'rtl' | 'auto')} direction - Text direction, either left-to-right (ltr) or right-to-left (rtl)
           * @returns {Promise<void>}
           */
          const switchDirection = async direction => {
            if (direction === 'auto') {
              // eslint-disable-next-line no-param-reassign
              direction = 'ltr';
            }

            let updatedLink;
            [...document.querySelectorAll('link[rel=stylesheet]')].forEach(link => {
              if (link.title === direction && link.disabled) {
                link.disabled = false;
                updatedLink = link;
              } else if (link.title !== direction && !link.disabled) {
                link.disabled = true;
              }
            });

            if (updatedLink) {
              return new Promise((resolve, reject) => {
                updatedLink.onload = () => {
                  resolve();
                };

                updatedLink.onerror = () => reject(new Error(`Failed to load '${direction}' stylesheet`));
              });
            }

            return undefined;
          };

          var _default = switchDirection;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", { "../constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../modules/swaps.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\swaps.utils.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\lib\transactions-controller-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TRANSACTION_NO_CONTRACT_ERROR_KEY = exports.TRANSACTION_ENVELOPE_TYPE_NAMES = exports.TEN_SECONDS_IN_MILLISECONDS = void 0;
          exports.calcGasTotal = calcGasTotal;
          exports.calcTokenAmount = calcTokenAmount;
          exports.decimalToHex = decimalToHex;
          exports.getSwapsTokensReceivedFromTxMeta = getSwapsTokensReceivedFromTxMeta;
          exports.hexWEIToDecETH = hexWEIToDecETH;
          exports.hexWEIToDecGWEI = hexWEIToDecGWEI;
          exports.toPrecisionWithoutTrailingZeros = toPrecisionWithoutTrailingZeros;

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var _transaction = require("../constants/transaction");

          var _conversion = require("../modules/conversion.utils");

          var _swaps = require("../modules/swaps.utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const TOKEN_TRANSFER_LOG_TOPIC_HASH = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';
          const TRANSACTION_NO_CONTRACT_ERROR_KEY = 'transactionErrorNoContract';
          exports.TRANSACTION_NO_CONTRACT_ERROR_KEY = TRANSACTION_NO_CONTRACT_ERROR_KEY;
          const TEN_SECONDS_IN_MILLISECONDS = 10000;
          exports.TEN_SECONDS_IN_MILLISECONDS = TEN_SECONDS_IN_MILLISECONDS;

          function calcGasTotal(gasLimit = '0', gasPrice = '0') {
            return (0, _conversion.multiplyCurrencies)(gasLimit, gasPrice, {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 16
            });
          }
          /**
           * Given a number and specified precision, returns that number in base 10 with a maximum of precision
           * significant digits, but without any trailing zeros after the decimal point To be used when wishing
           * to display only as much digits to the user as necessary
           *
           * @param {string | number | BigNumber} n - The number to format
           * @param {number} precision - The maximum number of significant digits in the return value
           * @returns {string} The number in decimal form, with <= precision significant digits and no decimal trailing zeros
           */


          function toPrecisionWithoutTrailingZeros(n, precision) {
            return new _bignumber.default(n).toPrecision(precision).replace(/(\.[0-9]*[1-9])0*|(\.0*)/u, '$1');
          }

          function calcTokenAmount(value, decimals) {
            const multiplier = Math.pow(10, Number(decimals || 0));
            return new _bignumber.default(String(value)).div(multiplier);
          }

          function getSwapsTokensReceivedFromTxMeta(tokenSymbol, txMeta, tokenAddress, accountAddress, tokenDecimals, approvalTxMeta, chainId) {
            var _txMeta$txReceipt;

            const txReceipt = txMeta === null || txMeta === void 0 ? void 0 : txMeta.txReceipt;
            const networkAndAccountSupports1559 = (txMeta === null || txMeta === void 0 ? void 0 : (_txMeta$txReceipt = txMeta.txReceipt) === null || _txMeta$txReceipt === void 0 ? void 0 : _txMeta$txReceipt.type) === _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET;

            if ((0, _swaps.isSwapsDefaultTokenSymbol)(tokenSymbol, chainId)) {
              if (!txReceipt || !txMeta || !txMeta.postTxBalance || !txMeta.preTxBalance) {
                return null;
              }

              if (txMeta.swapMetaData && txMeta.preTxBalance === txMeta.postTxBalance) {
                // If preTxBalance and postTxBalance are equal, postTxBalance hasn't been updated on time
                // because of the RPC provider delay, so we return an estimated receiving amount instead.
                return txMeta.swapMetaData.token_to_amount;
              }

              let approvalTxGasCost = '0x0';

              if (approvalTxMeta && approvalTxMeta.txReceipt) {
                approvalTxGasCost = calcGasTotal(approvalTxMeta.txReceipt.gasUsed, networkAndAccountSupports1559 ? approvalTxMeta.txReceipt.effectiveGasPrice // Base fee + priority fee.
                  : approvalTxMeta.txParams.gasPrice);
              }

              const gasCost = calcGasTotal(txReceipt.gasUsed, networkAndAccountSupports1559 ? txReceipt.effectiveGasPrice : txMeta.txParams.gasPrice);
              const totalGasCost = new _bignumber.default(gasCost, 16).plus(approvalTxGasCost, 16).toString(16);
              const preTxBalanceLessGasCost = (0, _conversion.subtractCurrencies)(txMeta.preTxBalance, totalGasCost, {
                aBase: 16,
                bBase: 16,
                toNumericBase: 'hex'
              });
              const ethReceived = (0, _conversion.subtractCurrencies)(txMeta.postTxBalance, preTxBalanceLessGasCost, {
                aBase: 16,
                bBase: 16,
                fromDenomination: 'WEI',
                toDenomination: 'ETH',
                toNumericBase: 'dec',
                numberOfDecimals: 6
              });
              return ethReceived;
            }

            const txReceiptLogs = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.logs;

            if (txReceiptLogs && (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) !== '0x0') {
              const tokenTransferLog = txReceiptLogs.find(txReceiptLog => {
                const isTokenTransfer = txReceiptLog.topics && txReceiptLog.topics[0] === TOKEN_TRANSFER_LOG_TOPIC_HASH;
                const isTransferFromGivenToken = txReceiptLog.address === tokenAddress;
                const isTransferFromGivenAddress = txReceiptLog.topics && txReceiptLog.topics[2] && txReceiptLog.topics[2].match(accountAddress.slice(2));
                return isTokenTransfer && isTransferFromGivenToken && isTransferFromGivenAddress;
              });
              return tokenTransferLog ? toPrecisionWithoutTrailingZeros(calcTokenAmount(tokenTransferLog.data, tokenDecimals).toString(10), 6) : '';
            }

            return null;
          }

          const TRANSACTION_ENVELOPE_TYPE_NAMES = {
            FEE_MARKET: 'fee-market',
            LEGACY: 'legacy'
          };
          exports.TRANSACTION_ENVELOPE_TYPE_NAMES = TRANSACTION_ENVELOPE_TYPE_NAMES;

          function hexWEIToDecGWEI(decGWEI) {
            return (0, _conversion.conversionUtil)(decGWEI, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec',
              fromDenomination: 'WEI',
              toDenomination: 'GWEI'
            });
          }

          function decimalToHex(decimal) {
            return (0, _conversion.conversionUtil)(decimal, {
              fromNumericBase: 'dec',
              toNumericBase: 'hex'
            });
          }

          function hexWEIToDecETH(hexWEI) {
            return (0, _conversion.conversionUtil)(hexWEI, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec',
              fromDenomination: 'WEI',
              toDenomination: 'ETH'
            });
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\contract-utils.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\contract-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.readAddressAsContract = void 0;

          const readAddressAsContract = async (ethQuery, address) => {
            let contractCode;

            try {
              contractCode = await ethQuery.getCode(address);
            } catch (e) {
              contractCode = null;
            }

            const isContractAddress = contractCode && contractCode !== '0x' && contractCode !== '0x0';
            return {
              contractCode,
              isContractAddress
            };
          };

          exports.readAddressAsContract = readAddressAsContract;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", { "./hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\conversion.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.conversionUtil = exports.conversionMax = exports.conversionLessThan = exports.conversionLTE = exports.conversionGreaterThan = exports.conversionGTE = exports.addCurrencies = void 0;
          exports.decGWEIToHexWEI = decGWEIToHexWEI;
          exports.toNormalizedDenomination = exports.toNegative = exports.toBigNumber = exports.subtractCurrencies = exports.multiplyCurrencies = exports.divideCurrencies = void 0;

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var _ethereumjsUtil = require("ethereumjs-util");

          var _hexstringUtils = require("./hexstring-utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          /**
           * Currency Conversion Utility
           * This utility function can be used for converting currency related values within metamask.
           * The caller should be able to pass it a value, along with information about the value's
           * numeric base, denomination and currency, and the desired numeric base, denomination and
           * currency. It should return a single value.
           *
           * @param {(number | string | BN)} value - The value to convert.
           * @param {object} [options] - Options to specify details of the conversion
           * @param {string} [options.fromCurrency = 'ETH' | 'USD'] - The currency of the passed value
           * @param {string} [options.toCurrency = 'ETH' | 'USD'] - The desired currency of the result
           * @param {string} [options.fromNumericBase = 'hex' | 'dec' | 'BN'] - The numeric basic of the passed value.
           * @param {string} [options.toNumericBase = 'hex' | 'dec' | 'BN'] - The desired numeric basic of the result.
           * @param {string} [options.fromDenomination = 'WEI'] - The denomination of the passed value
           * @param {string} [options.numberOfDecimals] - The desired number of decimals in the result
           * @param {string} [options.roundDown] - The desired number of decimals to round down to
           * @param {number} [options.conversionRate] - The rate to use to make the fromCurrency -> toCurrency conversion
           * @returns {(number | string | BN)}
           *
           * The utility passes value along with the options as a single object to the `converter` function.
           * `converter` conditional modifies the supplied `value` property, depending
           * on the accompanying options.
           */
          // Big Number Constants
          const BIG_NUMBER_WEI_MULTIPLIER = new _bignumber.default('1000000000000000000');
          const BIG_NUMBER_GWEI_MULTIPLIER = new _bignumber.default('1000000000');
          const BIG_NUMBER_ETH_MULTIPLIER = new _bignumber.default('1'); // Setter Maps

          const toBigNumber = {
            hex: n => new _bignumber.default((0, _hexstringUtils.stripHexPrefix)(n), 16),
            dec: n => new _bignumber.default(String(n), 10),
            BN: n => new _bignumber.default(n.toString(16), 16)
          };
          exports.toBigNumber = toBigNumber;
          const toNormalizedDenomination = {
            WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),
            GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),
            ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)
          };
          exports.toNormalizedDenomination = toNormalizedDenomination;
          const toSpecifiedDenomination = {
            WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).round(),
            GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).round(9),
            ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).round(9)
          };
          const baseChange = {
            hex: n => n.toString(16),
            dec: n => new _bignumber.default(n).toString(10),
            BN: n => new _ethereumjsUtil.BN(n.toString(16))
          }; // Utility function for checking base types

          const isValidBase = base => {
            return Number.isInteger(base) && base > 1;
          };
          /**
           * Defines the base type of numeric value
           *
           * @typedef {('hex' | 'dec' | 'BN')} NumericBase
           */

          /**
           * Defines which type of denomination a value is in
           *
           * @typedef {('WEI' | 'GWEI' | 'ETH')} EthDenomination
           */

          /**
           * Utility method to convert a value between denominations, formats and currencies.
           *
           * @param {object} input
           * @param {string | BigNumber} input.value
           * @param {NumericBase} input.fromNumericBase
           * @param {EthDenomination} [input.fromDenomination]
           * @param {string} [input.fromCurrency]
           * @param {NumericBase} input.toNumericBase
           * @param {EthDenomination} [input.toDenomination]
           * @param {string} [input.toCurrency]
           * @param {number} [input.numberOfDecimals]
           * @param {number} [input.conversionRate]
           * @param {boolean} [input.invertConversionRate]
           * @param {string} [input.roundDown]
           */


          const converter = ({
            value,
            fromNumericBase,
            fromDenomination,
            fromCurrency,
            toNumericBase,
            toDenomination,
            toCurrency,
            numberOfDecimals,
            conversionRate,
            invertConversionRate,
            roundDown
          }) => {
            let convertedValue = fromNumericBase ? toBigNumber[fromNumericBase](value) : value;

            if (fromDenomination) {
              convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);
            }

            if (fromCurrency !== toCurrency) {
              if (conversionRate === null || conversionRate === undefined) {
                throw new Error(`Converting from ${fromCurrency} to ${toCurrency} requires a conversionRate, but one was not provided`);
              }

              let rate = toBigNumber.dec(conversionRate);

              if (invertConversionRate) {
                rate = new _bignumber.default(1.0).div(conversionRate);
              }

              convertedValue = convertedValue.times(rate);
            }

            if (toDenomination) {
              convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);
            }

            if (numberOfDecimals !== undefined && numberOfDecimals !== null) {
              convertedValue = convertedValue.round(numberOfDecimals, _bignumber.default.ROUND_HALF_DOWN);
            }

            if (roundDown) {
              convertedValue = convertedValue.round(roundDown, _bignumber.default.ROUND_DOWN);
            }

            if (toNumericBase) {
              convertedValue = baseChange[toNumericBase](convertedValue);
            }

            return convertedValue;
          };

          const conversionUtil = (value, {
            fromCurrency = null,
            toCurrency = fromCurrency,
            fromNumericBase,
            toNumericBase,
            fromDenomination,
            toDenomination,
            numberOfDecimals,
            conversionRate,
            invertConversionRate
          }) => {
            if (fromCurrency !== toCurrency && !conversionRate) {
              return 0;
            }

            return converter({
              fromCurrency,
              toCurrency,
              fromNumericBase,
              toNumericBase,
              fromDenomination,
              toDenomination,
              numberOfDecimals,
              conversionRate,
              invertConversionRate,
              value: value || '0'
            });
          };

          exports.conversionUtil = conversionUtil;

          const getBigNumber = (value, base) => {
            if (!isValidBase(base)) {
              throw new Error('Must specify valid base');
            } // We don't include 'number' here, because BigNumber will throw if passed
            // a number primitive it considers unsafe.


            if (typeof value === 'string' || value instanceof _bignumber.default) {
              return new _bignumber.default(value, base);
            }

            return new _bignumber.default(String(value), base);
          };

          const addCurrencies = (a, b, options = {}) => {
            const {
              aBase,
              bBase,
              ...conversionOptions
            } = options;

            if (!isValidBase(aBase) || !isValidBase(bBase)) {
              throw new Error('Must specify valid aBase and bBase');
            }

            const value = getBigNumber(a, aBase).add(getBigNumber(b, bBase));
            return converter({
              value,
              ...conversionOptions
            });
          };

          exports.addCurrencies = addCurrencies;

          const subtractCurrencies = (a, b, options = {}) => {
            const {
              aBase,
              bBase,
              ...conversionOptions
            } = options;

            if (!isValidBase(aBase) || !isValidBase(bBase)) {
              throw new Error('Must specify valid aBase and bBase');
            }

            const value = getBigNumber(a, aBase).minus(getBigNumber(b, bBase));
            return converter({
              value,
              ...conversionOptions
            });
          };

          exports.subtractCurrencies = subtractCurrencies;

          const multiplyCurrencies = (a, b, options = {}) => {
            const {
              multiplicandBase,
              multiplierBase,
              ...conversionOptions
            } = options;

            if (!isValidBase(multiplicandBase) || !isValidBase(multiplierBase)) {
              throw new Error('Must specify valid multiplicandBase and multiplierBase');
            }

            const value = getBigNumber(a, multiplicandBase).times(getBigNumber(b, multiplierBase));
            return converter({
              value,
              ...conversionOptions
            });
          };

          exports.multiplyCurrencies = multiplyCurrencies;

          const divideCurrencies = (a, b, options = {}) => {
            const {
              dividendBase,
              divisorBase,
              ...conversionOptions
            } = options;

            if (!isValidBase(dividendBase) || !isValidBase(divisorBase)) {
              throw new Error('Must specify valid dividendBase and divisorBase');
            }

            const value = getBigNumber(a, dividendBase).div(getBigNumber(b, divisorBase));
            return converter({
              value,
              ...conversionOptions
            });
          };

          exports.divideCurrencies = divideCurrencies;

          const conversionGreaterThan = ({ ...firstProps
          }, { ...secondProps
          }) => {
            const firstValue = converter({
              ...firstProps
            });
            const secondValue = converter({
              ...secondProps
            });
            return firstValue.gt(secondValue);
          };

          exports.conversionGreaterThan = conversionGreaterThan;

          const conversionLessThan = ({ ...firstProps
          }, { ...secondProps
          }) => {
            const firstValue = converter({
              ...firstProps
            });
            const secondValue = converter({
              ...secondProps
            });
            return firstValue.lt(secondValue);
          };

          exports.conversionLessThan = conversionLessThan;

          const conversionMax = ({ ...firstProps
          }, { ...secondProps
          }) => {
            const firstIsGreater = conversionGreaterThan({
              ...firstProps
            }, {
              ...secondProps
            });
            return firstIsGreater ? firstProps.value : secondProps.value;
          };

          exports.conversionMax = conversionMax;

          const conversionGTE = ({ ...firstProps
          }, { ...secondProps
          }) => {
            const firstValue = converter({
              ...firstProps
            });
            const secondValue = converter({
              ...secondProps
            });
            return firstValue.greaterThanOrEqualTo(secondValue);
          };

          exports.conversionGTE = conversionGTE;

          const conversionLTE = ({ ...firstProps
          }, { ...secondProps
          }) => {
            const firstValue = converter({
              ...firstProps
            });
            const secondValue = converter({
              ...secondProps
            });
            return firstValue.lessThanOrEqualTo(secondValue);
          };

          exports.conversionLTE = conversionLTE;

          const toNegative = (n, options = {}) => {
            return multiplyCurrencies(n, -1, options);
          };

          exports.toNegative = toNegative;

          function decGWEIToHexWEI(decGWEI) {
            return conversionUtil(decGWEI, {
              fromNumericBase: 'dec',
              toNumericBase: 'hex',
              fromDenomination: 'GWEI',
              toDenomination: 'WEI'
            });
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\fetch-with-timeout.js", { "../constants/time": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts", "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\fetch-with-timeout.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _lodash = require("lodash");

          var _time = require("../constants/time");

          const getFetchWithTimeout = (0, _lodash.memoize)((timeout = _time.SECOND * 30) => {
            if (!Number.isInteger(timeout) || timeout < 1) {
              throw new Error('Must specify positive integer timeout.');
            }

            return async function _fetch(url, opts) {
              const abortController = new window.AbortController();
              const {
                signal
              } = abortController;
              const f = window.fetch(url, {
                ...opts,
                signal
              });
              const timer = setTimeout(() => abortController.abort(), timeout);

              try {
                const res = await f;
                clearTimeout(timer);
                return res;
              } catch (e) {
                clearTimeout(timer);
                throw e;
              }
            };
          });
          var _default = getFetchWithTimeout;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\gas.utils.js", { "./conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\gas.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getMaximumGasTotalInHexWei = getMaximumGasTotalInHexWei;
          exports.getMinimumGasTotalInHexWei = getMinimumGasTotalInHexWei;

          var _ethereumjsUtil = require("ethereumjs-util");

          var _conversion = require("./conversion.utils");

          /**
           * Accepts an options bag containing gas fee parameters in hex format and
           * returns a gasTotal parameter representing the maximum amount of wei the
           * transaction will cost.
           *
           * @param {object} options - gas fee parameters object
           * @param {string} [options.gasLimit] - the maximum amount of gas to allow this
           *  transaction to consume. Value is a hex string
           * @param {string} [options.gasPrice] - The fee in wei to pay per gas used.
           *  gasPrice is only set on Legacy type transactions. Value is hex string
           * @param {string} [options.maxFeePerGas] - The maximum fee in wei to pay per
           *  gas used. maxFeePerGas is introduced in EIP 1559 and represents the max
           *  total a user will pay per gas. Actual cost is determined by baseFeePerGas
           *  on the block + maxPriorityFeePerGas. Value is hex string
           * @returns {string} The maximum total cost of transaction in hex wei string
           */
          function getMaximumGasTotalInHexWei({
            gasLimit = '0x0',
            gasPrice,
            maxFeePerGas
          } = {}) {
            if (maxFeePerGas) {
              return (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(gasLimit, maxFeePerGas, {
                toNumericBase: 'hex',
                multiplicandBase: 16,
                multiplierBase: 16
              }));
            }

            if (!gasPrice) {
              throw new Error('getMaximumGasTotalInHexWei requires gasPrice be provided to calculate legacy gas total');
            }

            return (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(gasLimit, gasPrice, {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 16
            }));
          }
          /**
           * Accepts an options bag containing gas fee parameters in hex format and
           * returns a gasTotal parameter representing the minimum amount of wei the
           * transaction will cost. For gasPrice types this is the same as max.
           *
           * @param {object} options - gas fee parameters object
           * @param {string} [options.gasLimit] - the maximum amount of gas to allow this
           *  transaction to consume. Value is a hex string
           * @param {string} [options.gasPrice] - The fee in wei to pay per gas used.
           *  gasPrice is only set on Legacy type transactions. Value is hex string
           * @param {string} [options.maxFeePerGas] - The maximum fee in wei to pay per
           *  gas used. maxFeePerGas is introduced in EIP 1559 and represents the max
           *  total a user will pay per gas. Actual cost is determined by baseFeePerGas
           *  on the block + maxPriorityFeePerGas. Value is hex string
           * @param {string} [options.maxPriorityFeePerGas] - The maximum fee in wei to
           *  pay a miner to include this transaction.
           * @param {string} [options.baseFeePerGas] - The estimated block baseFeePerGas
           *  that will be burned. Introduced in EIP 1559. Value in hex wei.
           * @returns {string} The minimum total cost of transaction in hex wei string
           */


          function getMinimumGasTotalInHexWei({
            gasLimit = '0x0',
            gasPrice,
            maxPriorityFeePerGas,
            maxFeePerGas,
            baseFeePerGas
          } = {}) {
            const isEIP1559Estimate = Boolean(maxFeePerGas || maxPriorityFeePerGas || baseFeePerGas);

            if (isEIP1559Estimate && gasPrice) {
              throw new Error(`getMinimumGasTotalInHexWei expects either gasPrice OR the EIP-1559 gas fields, but both were provided`);
            }

            if (isEIP1559Estimate === false && !gasPrice) {
              throw new Error(`getMinimumGasTotalInHexWei expects either gasPrice OR the EIP-1559 gas fields, but neither were provided`);
            }

            if (isEIP1559Estimate && !baseFeePerGas) {
              throw new Error(`getMinimumGasTotalInHexWei requires baseFeePerGas be provided when calculating EIP-1559 totals`);
            }

            if (isEIP1559Estimate && (!maxFeePerGas || !maxPriorityFeePerGas)) {
              throw new Error(`getMinimumGasTotalInHexWei requires maxFeePerGas and maxPriorityFeePerGas be provided when calculating EIP-1559 totals`);
            }

            if (isEIP1559Estimate === false) {
              return getMaximumGasTotalInHexWei({
                gasLimit,
                gasPrice
              });
            }

            const minimumFeePerGas = (0, _conversion.addCurrencies)(baseFeePerGas, maxPriorityFeePerGas, {
              toNumericBase: 'hex',
              aBase: 16,
              bBase: 16
            });

            if ((0, _conversion.conversionGreaterThan)({
              value: minimumFeePerGas,
              fromNumericBase: 'hex'
            }, {
              value: maxFeePerGas,
              fromNumericBase: 'hex'
            })) {
              return getMaximumGasTotalInHexWei({
                gasLimit,
                maxFeePerGas
              });
            }

            return (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(gasLimit, minimumFeePerGas, {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 16
            }));
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", { "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\hexstring-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BURN_ADDRESS = void 0;
          exports.isBurnAddress = isBurnAddress;
          exports.isValidHexAddress = isValidHexAddress;
          exports.stripHexPrefix = stripHexPrefix;
          exports.toChecksumHexAddress = toChecksumHexAddress;

          var _ethereumjsUtil = require("ethereumjs-util");

          const BURN_ADDRESS = (0, _ethereumjsUtil.zeroAddress)();
          exports.BURN_ADDRESS = BURN_ADDRESS;

          function isBurnAddress(address) {
            return address === BURN_ADDRESS;
          }
          /**
           * Validates that the input is a hex address. This utility method is a thin
           * wrapper around ethereumjs-util.isValidAddress, with the exception that it
           * does not throw an error when provided values that are not hex strings. In
           * addition, and by default, this method will return true for hex strings that
           * meet the length requirement of a hex address, but are not prefixed with `0x`
           * Finally, if the mixedCaseUseChecksum flag is true and a mixed case string is
           * provided this method will validate it has the proper checksum formatting.
           *
           * @param {string} possibleAddress - Input parameter to check against
           * @param {object} [options] - options bag
           * @param {boolean} [options.allowNonPrefixed] - If true will first ensure '0x'
           *  is prepended to the string
           * @param {boolean} [options.mixedCaseUseChecksum] - If true will treat mixed
           *  case addresses as checksum addresses and validate that proper checksum
           *  format is used
           * @returns {boolean} whether or not the input is a valid hex address
           */


          function isValidHexAddress(possibleAddress, {
            allowNonPrefixed = true,
            mixedCaseUseChecksum = false
          } = {}) {
            const addressToCheck = allowNonPrefixed ? (0, _ethereumjsUtil.addHexPrefix)(possibleAddress) : possibleAddress;

            if (!(0, _ethereumjsUtil.isHexString)(addressToCheck)) {
              return false;
            }

            if (mixedCaseUseChecksum) {
              const prefixRemoved = addressToCheck.slice(2);
              const lower = prefixRemoved.toLowerCase();
              const upper = prefixRemoved.toUpperCase();
              const allOneCase = prefixRemoved === lower || prefixRemoved === upper;

              if (!allOneCase) {
                return (0, _ethereumjsUtil.isValidChecksumAddress)(addressToCheck);
              }
            }

            return (0, _ethereumjsUtil.isValidAddress)(addressToCheck);
          }

          function toChecksumHexAddress(address) {
            if (!address) {
              // our internal checksumAddress function that this method replaces would
              // return an empty string for nullish input. If any direct usages of
              // ethereumjs-util.toChecksumAddress were called with nullish input it
              // would have resulted in an error on version 5.1.
              return '';
            }

            const hexPrefixed = (0, _ethereumjsUtil.addHexPrefix)(address);

            if (!(0, _ethereumjsUtil.isHexString)(hexPrefixed)) {
              // Version 5.1 of ethereumjs-utils would have returned '0xY' for input 'y'
              // but we shouldn't waste effort trying to change case on a clearly invalid
              // string. Instead just return the hex prefixed original string which most
              // closely mimics the original behavior.
              return hexPrefixed;
            }

            return (0, _ethereumjsUtil.toChecksumAddress)(hexPrefixed);
          }

          function stripHexPrefix(str) {
            if (typeof str !== 'string') {
              return str;
            }

            return (0, _ethereumjsUtil.isHexPrefixed)(str) ? str.slice(2) : str;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\mv3.utils.js", { "webextension-polyfill": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\mv3.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.isManifestV3 = void 0;

          var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const isManifestV3 = _webextensionPolyfill.default.runtime.getManifest().manifest_version === 3;
          exports.isManifestV3 = isManifestV3;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\network.utils.js", { "../constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\network.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.isPrefixedFormattedHexString = isPrefixedFormattedHexString;
          exports.isSafeChainId = isSafeChainId;
          exports.isTokenDetectionEnabledForNetwork = isTokenDetectionEnabledForNetwork;

          var _network = require("../constants/network");

          /**
           * Checks whether the given number primitive chain ID is safe.
           * Because some cryptographic libraries we use expect the chain ID to be a
           * number primitive, it must not exceed a certain size.
           *
           * @param {number} chainId - The chain ID to check for safety.
           * @returns {boolean} Whether the given chain ID is safe.
           */
          function isSafeChainId(chainId) {
            return Number.isSafeInteger(chainId) && chainId > 0 && chainId <= _network.MAX_SAFE_CHAIN_ID;
          }
          /**
           * Checks whether the given value is a 0x-prefixed, non-zero, non-zero-padded,
           * hexadecimal string.
           *
           * @param {any} value - The value to check.
           * @returns {boolean} True if the value is a correctly formatted hex string,
           * false otherwise.
           */


          function isPrefixedFormattedHexString(value) {
            if (typeof value !== 'string') {
              return false;
            }

            return /^0x[1-9a-f]+[0-9a-f]*$/iu.test(value);
          }
          /**
           * Check if token detection is enabled for certain networks
           *
           * @param chainId - ChainID of network
           * @returns Whether the current network supports token detection
           */


          function isTokenDetectionEnabledForNetwork(chainId) {
            switch (chainId) {
              case _network.CHAIN_IDS.MAINNET:
              case _network.CHAIN_IDS.BSC:
              case _network.CHAIN_IDS.POLYGON:
              case _network.CHAIN_IDS.AVALANCHE:
                return true;

              default:
                return false;
            }
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\object.utils.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\object.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.maskObject = maskObject;

          /**
           * Return a "masked" copy of the given object.
           *
           * The returned object includes only the properties present in the mask. The
           * mask is an object that mirrors the structure of the given object, except
           * the only values are `true` or a sub-mask. `true` implies the property
           * should be included, and a sub-mask implies the property should be further
           * masked according to that sub-mask.
           *
           * @param {object} object - The object to mask
           * @param {Object<object | boolean>} mask - The mask to apply to the object
           */
          function maskObject(object, mask) {
            return Object.keys(object).reduce((state, key) => {
              if (mask[key] === true) {
                state[key] = object[key];
              } else if (mask[key]) {
                state[key] = maskObject(object[key], mask[key]);
              }

              return state;
            }, {});
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\random-id.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\random-id.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = createRandomId;
          const MAX = Number.MAX_SAFE_INTEGER;
          let idCounter = Math.round(Math.random() * MAX);

          function createRandomId() {
            idCounter %= MAX; // eslint-disable-next-line no-plusplus

            return idCounter++;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\rpc.utils.js", { "./fetch-with-timeout": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\fetch-with-timeout.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\rpc.utils.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              "use strict";

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.jsonRpcRequest = jsonRpcRequest;

              var _fetchWithTimeout = _interopRequireDefault(require("./fetch-with-timeout"));

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

              const fetchWithTimeout = (0, _fetchWithTimeout.default)();
              /**
               * Makes a JSON RPC request to the given URL, with the given RPC method and params.
               *
               * @param {string} rpcUrl - The RPC endpoint URL to target.
               * @param {string} rpcMethod - The RPC method to request.
               * @param {Array<unknown>} [rpcParams] - The RPC method params.
               * @returns {Promise<unknown|undefined>} Returns the result of the RPC method call,
               * or throws an error in case of failure.
               */

              async function jsonRpcRequest(rpcUrl, rpcMethod, rpcParams = []) {
                let fetchUrl = rpcUrl;
                const headers = {
                  'Content-Type': 'application/json'
                }; // Convert basic auth URL component to Authorization header

                const {
                  origin,
                  pathname,
                  username,
                  password,
                  search
                } = new URL(rpcUrl); // URLs containing username and password needs special processing

                if (username && password) {
                  const encodedAuth = Buffer.from(`${username}:${password}`).toString('base64');
                  headers.Authorization = `Basic ${encodedAuth}`;
                  fetchUrl = `${origin}${pathname}${search}`;
                }

                const jsonRpcResponse = await fetchWithTimeout(fetchUrl, {
                  method: 'POST',
                  body: JSON.stringify({
                    id: Date.now().toString(),
                    jsonrpc: '2.0',
                    method: rpcMethod,
                    params: rpcParams
                  }),
                  headers,
                  cache: 'default'
                }).then(httpResponse => httpResponse.json());

                if (!jsonRpcResponse || Array.isArray(jsonRpcResponse) || typeof jsonRpcResponse !== 'object') {
                  throw new Error(`RPC endpoint ${rpcUrl} returned non-object response.`);
                }

                const {
                  error,
                  result
                } = jsonRpcResponse;

                if (error) {
                  throw new Error((error === null || error === void 0 ? void 0 : error.message) || error);
                }

                return result;
              }

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\siwe.js", { "./hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "@spruceid/siwe-parser": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@spruceid\\siwe-parser\\dist\\parsers.js", "buffer": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\siwe.js
        return function (require, module, exports) {
          (function (Buffer) {
            (function () {
              "use strict";

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.formatMessageParams = exports.detectSIWE = void 0;

              var _siweParser = require("@spruceid/siwe-parser");

              var _loglevel = _interopRequireDefault(require("loglevel"));

              var _hexstringUtils = require("./hexstring-utils");

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

              const msgHexToText = hex => {
                try {
                  const stripped = (0, _hexstringUtils.stripHexPrefix)(hex);
                  const buff = Buffer.from(stripped, 'hex');
                  return buff.length === 32 ? hex : buff.toString('utf8');
                } catch (e) {
                  _loglevel.default.error(e);

                  return hex;
                }
              };
              /**
               * A locally defined object used to provide data to identify a Sign-In With Ethereum (SIWE)(EIP-4361) message and provide the parsed message
               *
               * @typedef localSIWEObject
               * @param {boolean} isSIWEMessage - Does the intercepted message conform to the SIWE specification?
               * @param {ParsedMessage} parsedMessage - The data parsed out of the message
               */

              /**
               * This function intercepts a sign message, detects if it's a
               * Sign-In With Ethereum (SIWE)(EIP-4361) message, and returns an object with
               * relevant SIWE data.
               *
               * {@see {@link https://eips.ethereum.org/EIPS/eip-4361}}
               *
               * @param {object} msgParams - The params of the message to sign
               * @returns {localSIWEObject}
               */


              const detectSIWE = msgParams => {
                try {
                  const {
                    data
                  } = msgParams;
                  const message = msgHexToText(data);
                  const parsedMessage = new _siweParser.ParsedMessage(message);
                  return {
                    isSIWEMessage: true,
                    parsedMessage
                  };
                } catch (error) {
                  // ignore error, it's not a valid SIWE message
                  return {
                    isSIWEMessage: false,
                    parsedMessage: null
                  };
                }
              };
              /**
               * Takes in a parsed Sign-In with Ethereum Message (EIP-4361)
               * and generates an array of label-value pairs
               *
               * @param {object} parsedMessage - A parsed SIWE message with message contents
               * @param {Function} t - i18n function
               * @returns {Array} An array of label-value pairs with the type of the value as the label
               */


              exports.detectSIWE = detectSIWE;

              const formatMessageParams = (parsedMessage, t) => {
                const output = [];
                const {
                  statement,
                  uri,
                  version,
                  chainId,
                  nonce,
                  issuedAt,
                  expirationTime,
                  notBefore,
                  requestId,
                  resources
                } = parsedMessage;

                if (statement) {
                  output.push({
                    label: t('SIWELabelMessage'),
                    value: statement
                  });
                }

                if (uri) {
                  output.push({
                    label: t('SIWELabelURI'),
                    value: uri
                  });
                }

                if (version) {
                  output.push({
                    label: t('SIWELabelVersion'),
                    value: version
                  });
                }

                if (chainId) {
                  output.push({
                    label: t('SIWELabelChainID'),
                    value: chainId
                  });
                }

                if (nonce) {
                  output.push({
                    label: t('SIWELabelNonce'),
                    value: nonce
                  });
                }

                if (issuedAt) {
                  output.push({
                    label: t('SIWELabelIssuedAt'),
                    value: issuedAt
                  });
                }

                if (expirationTime) {
                  output.push({
                    label: t('SIWELabelExpirationTime'),
                    value: expirationTime
                  });
                }

                if (notBefore) {
                  output.push({
                    label: t('SIWELabelNotBefore'),
                    value: notBefore
                  });
                }

                if (requestId) {
                  output.push({
                    label: t('SIWELabelRequestID'),
                    value: requestId
                  });
                }

                if (resources && resources.length > 0) {
                  output.push({
                    label: t('SIWELabelResources', [resources.length]),
                    value: resources.reduce((previous, resource) => `${previous}${resource}\n`, '').trim()
                  });
                }

                return output;
              };

              exports.formatMessageParams = formatMessageParams;

            }).call(this)
          }).call(this, require("buffer").Buffer)

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\string-utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.isEqualCaseInsensitive = isEqualCaseInsensitive;
          exports.prependZero = prependZero;

          function isEqualCaseInsensitive(value1, value2) {
            if (typeof value1 !== 'string' || typeof value2 !== 'string') {
              return false;
            }

            return value1.toLowerCase() === value2.toLowerCase();
          }

          function prependZero(num, maxLength) {
            return num.toString().padStart(maxLength, '0');
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\swaps.utils.js", { "../constants/swaps": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\swaps.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.isSwapsDefaultTokenAddress = isSwapsDefaultTokenAddress;
          exports.isSwapsDefaultTokenSymbol = isSwapsDefaultTokenSymbol;

          var _swaps = require("../constants/swaps");

          /**
           * Checks whether the provided address is strictly equal to the address for
           * the default swaps token of the provided chain.
           *
           * @param {string} address - The string to compare to the default token address
           * @param {string} chainId - The hex encoded chain ID of the default swaps token to check
           * @returns {boolean} Whether the address is the provided chain's default token address
           */
          function isSwapsDefaultTokenAddress(address, chainId) {
            var _SWAPS_CHAINID_DEFAUL;

            if (!address || !chainId) {
              return false;
            }

            return address === ((_SWAPS_CHAINID_DEFAUL = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL.address);
          }
          /**
           * Checks whether the provided symbol is strictly equal to the symbol for
           * the default swaps token of the provided chain.
           *
           * @param {string} symbol - The string to compare to the default token symbol
           * @param {string} chainId - The hex encoded chain ID of the default swaps token to check
           * @returns {boolean} Whether the symbl is the provided chain's default token symbol
           */


          function isSwapsDefaultTokenSymbol(symbol, chainId) {
            var _SWAPS_CHAINID_DEFAUL2;

            if (!symbol || !chainId) {
              return false;
            }

            return symbol === ((_SWAPS_CHAINID_DEFAUL2 = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL2 === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL2.symbol);
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js", { "../constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "./contract-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\contract-utils.js", "./string-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js", "@metamask/metamask-eth-abis": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\metamask-eth-abis\\dist\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "ethers": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethers\\lib\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\modules\transaction.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.determineTransactionAssetType = determineTransactionAssetType;
          exports.determineTransactionContractCode = determineTransactionContractCode;
          exports.determineTransactionType = determineTransactionType;
          exports.isEIP1559Transaction = isEIP1559Transaction;
          exports.isLegacyTransaction = isLegacyTransaction;
          exports.parseStandardTokenTransactionData = parseStandardTokenTransactionData;
          exports.transactionMatchesNetwork = transactionMatchesNetwork;
          exports.txParamsAreDappSuggested = txParamsAreDappSuggested;

          var _ethereumjsUtil = require("ethereumjs-util");

          var _ethers = require("ethers");

          var _metamaskEthAbis = require("@metamask/metamask-eth-abis");

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _transaction = require("../constants/transaction");

          var _contractUtils = require("./contract-utils");

          var _stringUtils = require("./string-utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          /**
           * @typedef { 'transfer' | 'approve' | 'setapprovalforall' | 'transferfrom' | 'contractInteraction'| 'simpleSend' } InferrableTransactionTypes
           */

          /**
           * @typedef {object} InferTransactionTypeResult
           * @property {InferrableTransactionTypes} type - The type of transaction
           * @property {string} getCodeResponse - The contract code, in hex format if
           *  it exists. '0x0' or '0x' are also indicators of non-existent contract
           *  code
           */

          /**
           * @typedef EthersContractCall
           * @type object
           * @property {any[]} args - The args/params to the function call.
           * An array-like object with numerical and string indices.
           * @property {string} name - The name of the function.
           * @property {string} signature - The function signature.
           * @property {string} sighash - The function signature hash.
           * @property {EthersBigNumber} value - The ETH value associated with the call.
           * @property {FunctionFragment} functionFragment - The Ethers function fragment
           * representation of the function.
           */
          const erc20Interface = new _ethers.ethers.utils.Interface(_metamaskEthAbis.abiERC20);
          const erc721Interface = new _ethers.ethers.utils.Interface(_metamaskEthAbis.abiERC721);
          const erc1155Interface = new _ethers.ethers.utils.Interface(_metamaskEthAbis.abiERC1155);

          function transactionMatchesNetwork(transaction, chainId, networkId) {
            if (typeof transaction.chainId !== 'undefined') {
              return transaction.chainId === chainId;
            }

            return transaction.metamaskNetworkId === networkId;
          }
          /**
           * Determines if the maxFeePerGas and maxPriorityFeePerGas fields are supplied
           * and valid inputs. This will return false for non hex string inputs.
           *
           * @param {__import__("../constants/transaction").TransactionMeta} transaction -
           *  the transaction to check
           * @returns {boolean} true if transaction uses valid EIP1559 fields
           */


          function isEIP1559Transaction(transaction) {
            var _transaction$txParams, _transaction$txParams2;

            return (0, _ethereumjsUtil.isHexString)(transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.maxFeePerGas) && (0, _ethereumjsUtil.isHexString)(transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.maxPriorityFeePerGas);
          }
          /**
           * Determine if the maxFeePerGas and maxPriorityFeePerGas fields are not
           * supplied and that the gasPrice field is valid if it is provided. This will
           * return false if gasPrice is a non hex string.
           *
           * @param {__import__("../constants/transaction").TransactionMeta} transaction -
           *  the transaction to check
           * @returns {boolean} true if transaction uses valid Legacy fields OR lacks
           *  EIP1559 fields
           */


          function isLegacyTransaction(transaction) {
            return typeof transaction.txParams.maxFeePerGas === 'undefined' && typeof transaction.txParams.maxPriorityFeePerGas === 'undefined' && (typeof transaction.txParams.gasPrice === 'undefined' || (0, _ethereumjsUtil.isHexString)(transaction.txParams.gasPrice));
          }
          /**
           * Determine if a transactions gas fees in txParams match those in its dappSuggestedGasFees property
           *
           * @param {__import__("../constants/transaction").TransactionMeta} transaction -
           *  the transaction to check
           * @returns {boolean} true if both the txParams and dappSuggestedGasFees are objects with truthy gas fee properties,
           *   and those properties are strictly equal
           */


          function txParamsAreDappSuggested(transaction) {
            var _transaction$dappSugg, _transaction$dappSugg2, _transaction$dappSugg3;

            const {
              gasPrice,
              maxPriorityFeePerGas,
              maxFeePerGas
            } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
            return gasPrice && gasPrice === (transaction === null || transaction === void 0 ? void 0 : (_transaction$dappSugg = transaction.dappSuggestedGasFees) === null || _transaction$dappSugg === void 0 ? void 0 : _transaction$dappSugg.gasPrice) || maxPriorityFeePerGas && maxFeePerGas && (transaction === null || transaction === void 0 ? void 0 : (_transaction$dappSugg2 = transaction.dappSuggestedGasFees) === null || _transaction$dappSugg2 === void 0 ? void 0 : _transaction$dappSugg2.maxPriorityFeePerGas) === maxPriorityFeePerGas && (transaction === null || transaction === void 0 ? void 0 : (_transaction$dappSugg3 = transaction.dappSuggestedGasFees) === null || _transaction$dappSugg3 === void 0 ? void 0 : _transaction$dappSugg3.maxFeePerGas) === maxFeePerGas;
          }
          /**
           * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.
           * The data will decode correctly if the transaction is an interaction with a contract that matches one of these
           * contract standards
           *
           * @param data - encoded transaction data
           * @returns {EthersContractCall | undefined}
           */


          function parseStandardTokenTransactionData(data) {
            try {
              return erc20Interface.parseTransaction({
                data
              });
            } catch {// ignore and next try to parse with erc721 ABI
            }

            try {
              return erc721Interface.parseTransaction({
                data
              });
            } catch {// ignore and next try to parse with erc1155 ABI
            }

            try {
              return erc1155Interface.parseTransaction({
                data
              });
            } catch {// ignore and return undefined
            }

            return undefined;
          }
          /**
           * Determines the contractCode of the transaction by analyzing the txParams.
           *
           * @param {object} txParams - Parameters for the transaction
           * @param {EthQuery} query - EthQuery instance
           * @returns {InferTransactionTypeResult}
           */


          async function determineTransactionContractCode(txParams, query) {
            const {
              to
            } = txParams;
            const {
              contractCode
            } = await (0, _contractUtils.readAddressAsContract)(query, to);
            return contractCode;
          }
          /**
           * Determines the type of the transaction by analyzing the txParams.
           * This method will return one of the types defined in shared/constants/transactions
           * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these
           * represent specific events that we control from the extension and are added manually
           * at transaction creation.
           *
           * @param {object} txParams - Parameters for the transaction
           * @param {EthQuery} query - EthQuery instance
           * @returns {InferTransactionTypeResult}
           */


          async function determineTransactionType(txParams, query) {
            const {
              data,
              to
            } = txParams;
            let name;

            try {
              ({
                name
              } = data && parseStandardTokenTransactionData(data));
            } catch (error) {
              _loglevel.default.debug('Failed to parse transaction data.', error, data);
            }

            let result;
            let contractCode;

            if (data && !to) {
              result = _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT;
            } else {
              const {
                contractCode: resultCode,
                isContractAddress
              } = await (0, _contractUtils.readAddressAsContract)(query, to);
              contractCode = resultCode;

              if (isContractAddress) {
                const tokenMethodName = [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM].find(methodName => (0, _stringUtils.isEqualCaseInsensitive)(methodName, name));
                result = data && tokenMethodName ? tokenMethodName : _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION;
              } else {
                result = _transaction.TRANSACTION_TYPES.SIMPLE_SEND;
              }
            }

            return {
              type: result,
              getCodeResponse: contractCode
            };
          }

          const INFERRABLE_TRANSACTION_TYPES = [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM, _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION, _transaction.TRANSACTION_TYPES.SIMPLE_SEND];
          /**
           * Given a transaction meta object, determine the asset type that the
           * transaction is dealing with, as well as the standard for the token if it
           * is a token transaction.
           *
           * @param {__import__('../constants/transaction').TransactionMeta} txMeta -
           *  transaction meta object
           * @param {EthQuery} query - EthQuery instance
           * @param {Function} getTokenStandardAndDetails - function to get token
           *  standards and details.
           * @returns {{ assetType: string, tokenStandard: string}}
           */

          async function determineTransactionAssetType(txMeta, query, getTokenStandardAndDetails) {
            // If the transaction type is already one of the inferrable types, then we do
            // not need to re-establish the type.
            let inferrableType = txMeta.type;

            if (INFERRABLE_TRANSACTION_TYPES.includes(txMeta.type) === false) {
              // Because we will deal with all types of transactions (including swaps)
              // we want to get an inferrable type of transaction that isn't special cased
              // that way we can narrow the number of logic gates required.
              const result = await determineTransactionType(txMeta.txParams, query);
              inferrableType = result.type;
            } // If the inferred type of the transaction is one of those that are part of
            // the token contract standards, we can use the getTokenStandardAndDetails
            // method to get the asset type.


            const isTokenMethod = [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM].find(methodName => methodName === inferrableType);

            if (isTokenMethod || // We can also check any contract interaction type to see if the to address
              // is a token contract. If it isn't, then the method will throw and we can
              // fall through to the other checks.
              inferrableType === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION) {
              try {
                // We don't need a balance check, so the second parameter to
                // getTokenStandardAndDetails is omitted.
                const details = await getTokenStandardAndDetails(txMeta.txParams.to);

                if (details.standard) {
                  return {
                    assetType: details.standard === _transaction.TOKEN_STANDARDS.ERC20 ? _transaction.ASSET_TYPES.TOKEN : _transaction.ASSET_TYPES.COLLECTIBLE,
                    tokenStandard: details.standard
                  };
                }
              } catch {// noop, We expect errors here but we don't need to report them or do
                // anything in response.
              }
            } // If the transaction is interacting with a contract but isn't a token method
            // we use the 'UNKNOWN' value to show that it isn't a transaction sending any
            // particular asset.


            if (inferrableType === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION) {
              return {
                assetType: _transaction.ASSET_TYPES.UNKNOWN,
                tokenStandard: _transaction.TOKEN_STANDARDS.NONE
              };
            }

            return {
              assetType: _transaction.ASSET_TYPES.NATIVE,
              tokenStandard: _transaction.TOKEN_STANDARDS.NONE
            };
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\notifications\\index.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\shared\notifications\index.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getTranslatedUINotifications = exports.UI_NOTIFICATIONS = void 0;
          // Messages and descriptions for these locale keys are in app/_locales/en/messages.json
          const UI_NOTIFICATIONS = {
            1: {
              id: 1,
              date: '2021-03-17',
              image: {
                src: 'images/mobile-link-qr.svg',
                height: '230px',
                width: '230px',
                placeImageBelowDescription: true
              }
            },
            3: {
              id: 3,
              date: '2021-03-08'
            },
            4: {
              id: 4,
              date: '2021-05-11',
              image: {
                src: 'images/source-logos-bsc.svg',
                width: '100%'
              }
            },
            5: {
              id: 5,
              date: '2021-06-09'
            },
            6: {
              id: 6,
              date: '2021-05-26'
            },
            7: {
              id: 7,
              date: '2021-09-17'
            },
            8: {
              id: 8,
              date: '2021-11-01'
            },
            9: {
              id: 9,
              date: '2021-12-07',
              image: {
                src: 'images/txinsights.png',
                width: '80%'
              }
            },
            10: {
              id: 10,
              date: '2022-09-15',
              image: {
                src: 'images/token-detection.svg',
                width: '100%'
              }
            },
            11: {
              id: 11,
              date: '2022-09-15'
            },
            12: {
              id: 12,
              date: '2022-05-18',
              image: {
                src: 'images/darkmode-banner.png',
                width: '100%'
              }
            },
            13: {
              id: 13,
              date: '2022-09-15'
            },
            14: {
              id: 14,
              date: '2022-09-15'
            },
            15: {
              id: 15,
              date: '2022-09-15'
            },
            16: {
              id: 16,
              date: null
            }
          };
          exports.UI_NOTIFICATIONS = UI_NOTIFICATIONS;

          const getTranslatedUINotifications = (t, locale) => {
            const formattedLocale = locale.replace('_', '-');
            return {
              1: {
                ...UI_NOTIFICATIONS[1],
                title: t('notifications1Title'),
                description: t('notifications1Description'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[1].date))
              },
              3: {
                ...UI_NOTIFICATIONS[3],
                title: t('notifications3Title'),
                description: t('notifications3Description'),
                actionText: t('notifications3ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[3].date))
              },
              4: {
                ...UI_NOTIFICATIONS[4],
                title: t('notifications4Title'),
                description: t('notifications4Description'),
                actionText: t('notifications4ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[4].date))
              },
              5: {
                ...UI_NOTIFICATIONS[5],
                title: t('secretRecoveryPhrase'),
                description: t('notifications5Description'),
                actionText: t('notifications3ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[5].date))
              },
              6: {
                ...UI_NOTIFICATIONS[6],
                title: t('notifications6Title'),
                description: [t('notifications6DescriptionOne'), t('notifications6DescriptionTwo'), t('notifications6DescriptionThree')],
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[6].date))
              },
              7: {
                ...UI_NOTIFICATIONS[7],
                title: t('notifications7Title'),
                description: [t('notifications7DescriptionOne'), t('notifications7DescriptionTwo')],
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[7].date))
              },
              8: {
                ...UI_NOTIFICATIONS[8],
                title: t('notifications8Title'),
                description: [t('notifications8DescriptionOne'), t('notifications8DescriptionTwo')],
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[8].date)),
                actionText: t('notifications8ActionText')
              },
              9: {
                ...UI_NOTIFICATIONS[9],
                title: t('notifications9Title'),
                description: [t('notifications9DescriptionOne'), t('notifications9DescriptionTwo')],
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[9].date))
              },
              10: {
                ...UI_NOTIFICATIONS[10],
                title: t('notifications10Title'),
                description: [t('notifications10DescriptionOne'), t('notifications10DescriptionTwo'), t('notifications10DescriptionThree')],
                actionText: t('notifications10ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[10].date))
              },
              11: {
                ...UI_NOTIFICATIONS[11],
                title: t('notifications11Title'),
                description: t('notifications11Description'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[11].date))
              },
              12: {
                ...UI_NOTIFICATIONS[12],
                title: t('notifications12Title'),
                description: t('notifications12Description'),
                actionText: t('notifications12ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[12].date))
              },
              13: {
                ...UI_NOTIFICATIONS[13],
                title: t('notifications13Title'),
                description: t('notifications13Description'),
                actionText: t('notifications13ActionText'),
                date: new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[13].date))
              },
              14: {
                ...UI_NOTIFICATIONS[14],
                title: t('notifications14Title'),
                description: t('notifications14Description'),
                actionText: t('notifications14ActionText'),
                date: UI_NOTIFICATIONS[14].date ? new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[14].date)) : ''
              },
              15: {
                ...UI_NOTIFICATIONS[15],
                title: t('notifications15Title'),
                description: t('notifications15Description'),
                date: UI_NOTIFICATIONS[15].date ? new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[15].date)) : ''
              },
              16: {
                ...UI_NOTIFICATIONS[16],
                title: t('notifications16Title'),
                description: t('notifications16Description'),
                actionText: t('notifications16ActionText'),
                date: UI_NOTIFICATIONS[16].date ? new Intl.DateTimeFormat(formattedLocale).format(new Date(UI_NOTIFICATIONS[16].date)) : ''
              }
            };
          };

          exports.getTranslatedUINotifications = getTranslatedUINotifications;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\enums.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\alerts\enums.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ALERT_STATE = void 0;
          const ALERT_STATE = {
            CLOSED: 'CLOSED',
            ERROR: 'ERROR',
            LOADING: 'LOADING',
            OPEN: 'OPEN'
          };
          exports.ALERT_STATE = ALERT_STATE;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\unconnected-account.js", { "../../../shared/constants/alerts": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js", "../../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "../../store/actionConstants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js", "../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "./enums": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\enums.js", "@reduxjs/toolkit": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js", "@sentry/browser": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\alerts\unconnected-account.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.switchedToUnconnectedAccount = exports.switchToAccount = exports.getAlertState = exports.dismissAndDisableAlert = exports.dismissAlert = exports.default = exports.connectAccount = exports.alertIsOpen = void 0;

          var _toolkit = require("@reduxjs/toolkit");

          var _browser = require("@sentry/browser");

          var _alerts = require("../../../shared/constants/alerts");

          var actionConstants = _interopRequireWildcard(require("../../store/actionConstants"));

          var _actions = require("../../store/actions");

          var _selectors = require("../../selectors");

          var _enums = require("./enums");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          // Constants
          const name = _alerts.ALERT_TYPES.unconnectedAccount;
          const initialState = {
            state: _enums.ALERT_STATE.CLOSED
          }; // Slice (reducer plus auto-generated actions and action creators)

          const slice = (0, _toolkit.createSlice)({
            name,
            initialState,
            reducers: {
              connectAccountFailed: state => {
                state.state = _enums.ALERT_STATE.ERROR;
              },
              connectAccountRequested: state => {
                state.state = _enums.ALERT_STATE.LOADING;
              },
              connectAccountSucceeded: state => {
                state.state = _enums.ALERT_STATE.CLOSED;
              },
              disableAlertFailed: state => {
                state.state = _enums.ALERT_STATE.ERROR;
              },
              disableAlertRequested: state => {
                state.state = _enums.ALERT_STATE.LOADING;
              },
              disableAlertSucceeded: state => {
                state.state = _enums.ALERT_STATE.CLOSED;
              },
              dismissAlert: state => {
                state.state = _enums.ALERT_STATE.CLOSED;
              },
              switchAccountFailed: state => {
                state.state = _enums.ALERT_STATE.ERROR;
              },
              switchAccountRequested: state => {
                state.state = _enums.ALERT_STATE.LOADING;
              },
              switchAccountSucceeded: state => {
                state.state = _enums.ALERT_STATE.CLOSED;
              },
              switchedToUnconnectedAccount: state => {
                state.state = _enums.ALERT_STATE.OPEN;
              }
            },
            extraReducers: {
              [actionConstants.SELECTED_ADDRESS_CHANGED]: state => {
                // close the alert if the account is switched while it's open
                if (state.state === _enums.ALERT_STATE.OPEN) {
                  state.state = _enums.ALERT_STATE.CLOSED;
                }
              }
            }
          });
          const {
            actions,
            reducer
          } = slice;
          var _default = reducer; // Selectors

          exports.default = _default;

          const getAlertState = state => state[name].state;

          exports.getAlertState = getAlertState;

          const alertIsOpen = state => state[name].state !== _enums.ALERT_STATE.CLOSED; // Actions / action-creators


          exports.alertIsOpen = alertIsOpen;
          const {
            connectAccountFailed,
            connectAccountRequested,
            connectAccountSucceeded,
            disableAlertFailed,
            disableAlertRequested,
            disableAlertSucceeded,
            dismissAlert,
            switchAccountFailed,
            switchAccountRequested,
            switchAccountSucceeded,
            switchedToUnconnectedAccount
          } = actions;
          exports.switchedToUnconnectedAccount = switchedToUnconnectedAccount;
          exports.dismissAlert = dismissAlert;

          const dismissAndDisableAlert = () => {
            return async dispatch => {
              try {
                await dispatch(disableAlertRequested());
                await (0, _actions.setAlertEnabledness)(name, false);
                await dispatch(disableAlertSucceeded());
              } catch (error) {
                console.error(error);
                (0, _browser.captureException)(error);
                await dispatch(disableAlertFailed());
              }
            };
          };

          exports.dismissAndDisableAlert = dismissAndDisableAlert;

          const switchToAccount = address => {
            return async dispatch => {
              try {
                await dispatch(switchAccountRequested());
                await dispatch((0, _actions.setSelectedAddress)(address));
                await dispatch(switchAccountSucceeded());
              } catch (error) {
                console.error(error);
                (0, _browser.captureException)(error);
                await dispatch(switchAccountFailed());
              }
            };
          };

          exports.switchToAccount = switchToAccount;

          const connectAccount = () => {
            return async (dispatch, getState) => {
              const state = getState();
              const selectedAddress = (0, _selectors.getSelectedAddress)(state);
              const origin = (0, _selectors.getOriginOfCurrentTab)(state);

              try {
                await dispatch(connectAccountRequested());
                await dispatch((0, _actions.addPermittedAccount)(origin, selectedAddress));
                await dispatch(connectAccountSucceeded());
              } catch (error) {
                console.error(error);
                (0, _browser.captureException)(error);
                await dispatch(connectAccountFailed());
              }
            };
          };

          exports.connectAccount = connectAccount;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js", { "../../../shared/constants/hardware-wallets": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js", "../../store/actionConstants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\app\app.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = reduceApp;
          exports.getGasLoadingAnimationIsShowing = getGasLoadingAnimationIsShowing;
          exports.getLedgerTransportStatus = getLedgerTransportStatus;
          exports.getLedgerWebHidConnectedStatus = getLedgerWebHidConnectedStatus;
          exports.getPortfolioTooltipWasShownInThisSession = getPortfolioTooltipWasShownInThisSession;
          exports.getQrCodeData = getQrCodeData;
          exports.hideWhatsNewPopup = hideWhatsNewPopup;
          exports.setCustomTokenAmount = setCustomTokenAmount;
          exports.setLedgerTransportStatus = setLedgerTransportStatus;
          exports.setLedgerWebHidConnectedStatus = setLedgerWebHidConnectedStatus;
          exports.setNewCustomNetworkAdded = setNewCustomNetworkAdded;
          exports.setOnBoardedInThisUISession = setOnBoardedInThisUISession;
          exports.setPortfolioTooltipWasShownInThisSession = setPortfolioTooltipWasShownInThisSession;
          exports.toggleCurrencySwitch = toggleCurrencySwitch;
          exports.toggleGasLoadingAnimation = toggleGasLoadingAnimation;

          var _hardwareWallets = require("../../../shared/constants/hardware-wallets");

          var actionConstants = _interopRequireWildcard(require("../../store/actionConstants"));

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function reduceApp(state = {}, action) {
            // default state
            const appState = {
              shouldClose: false,
              menuOpen: false,
              modal: {
                open: false,
                modalState: {
                  name: null,
                  props: {}
                },
                previousModalState: {
                  name: null
                }
              },
              alertOpen: false,
              alertMessage: null,
              qrCodeData: null,
              networkDropdownOpen: false,
              accountDetail: {
                subview: 'transactions'
              },
              // Used to display loading indicator
              isLoading: false,
              // Used to display error text
              warning: null,
              buyView: {},
              isMouseUser: false,
              defaultHdPaths: {
                trezor: `m/44'/60'/0'/0`,
                ledger: `m/44'/60'/0'/0/0`,
                lattice: `m/44'/60'/0'/0`
              },
              networksTabSelectedRpcUrl: '',
              loadingMethodData: false,
              requestAccountTabs: {},
              openMetaMaskTabs: {},
              currentWindowTab: {},
              showWhatsNewPopup: true,
              singleExceptions: {
                testKey: null
              },
              gasLoadingAnimationIsShowing: false,
              smartTransactionsError: null,
              smartTransactionsErrorMessageDismissed: false,
              ledgerWebHidConnectedStatus: _hardwareWallets.WEBHID_CONNECTED_STATUSES.UNKNOWN,
              ledgerTransportStatus: _hardwareWallets.TRANSPORT_STATES.NONE,
              newNetworkAdded: '',
              newCollectibleAddedMessage: '',
              portfolioTooltipWasShownInThisSession: false,
              sendInputCurrencySwitched: false,
              newTokensImported: '',
              newCustomNetworkAdded: {},
              onboardedInThisUISession: false,
              customTokenAmount: '',
              ...state
            };

            switch (action.type) {
              // dropdown methods
              case actionConstants.NETWORK_DROPDOWN_OPEN:
                return {
                  ...appState,
                  networkDropdownOpen: true
                };

              case actionConstants.NETWORK_DROPDOWN_CLOSE:
                return {
                  ...appState,
                  networkDropdownOpen: false
                };
              // alert methods

              case actionConstants.ALERT_OPEN:
                return {
                  ...appState,
                  alertOpen: true,
                  alertMessage: action.value
                };

              case actionConstants.ALERT_CLOSE:
                return {
                  ...appState,
                  alertOpen: false,
                  alertMessage: null
                };
              // qr scanner methods

              case actionConstants.QR_CODE_DETECTED:
                return {
                  ...appState,
                  qrCodeData: action.value
                };
              // Smart Transactions errors.

              case actionConstants.SET_SMART_TRANSACTIONS_ERROR:
                return {
                  ...appState,
                  smartTransactionsError: action.payload
                };

              case actionConstants.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE:
                return {
                  ...appState,
                  smartTransactionsErrorMessageDismissed: true
                };
              // modal methods:

              case actionConstants.MODAL_OPEN:
                {
                  const {
                    name,
                    ...modalProps
                  } = action.payload;
                  return {
                    ...appState,
                    modal: {
                      open: true,
                      modalState: {
                        name,
                        props: {
                          ...modalProps
                        }
                      },
                      previousModalState: {
                        ...appState.modal.modalState
                      }
                    }
                  };
                }

              case actionConstants.MODAL_CLOSE:
                return {
                  ...appState,
                  modal: Object.assign(appState.modal, {
                    open: false
                  }, {
                    modalState: {
                      name: null,
                      props: {}
                    }
                  }, {
                    previousModalState: appState.modal.modalState
                  })
                };

              case actionConstants.CLEAR_ACCOUNT_DETAILS:
                return {
                  ...appState,
                  accountDetail: {}
                };

              case actionConstants.FORGOT_PASSWORD:
                return {
                  ...appState,
                  forgottenPassword: action.value
                };

              case actionConstants.SHOW_SEND_TOKEN_PAGE:
                return {
                  ...appState,
                  warning: null
                };

              case actionConstants.LOCK_METAMASK:
                return {
                  ...appState,
                  warning: null
                };
              // accounts

              case actionConstants.GO_HOME:
                return {
                  ...appState,
                  accountDetail: {
                    subview: 'transactions',
                    accountExport: 'none',
                    privateKey: ''
                  },
                  warning: null
                };

              case actionConstants.SHOW_ACCOUNT_DETAIL:
                return {
                  ...appState,
                  forgottenPassword: appState.forgottenPassword ? !appState.forgottenPassword : null,
                  accountDetail: {
                    subview: 'transactions',
                    accountExport: 'none',
                    privateKey: ''
                  }
                };

              case actionConstants.SHOW_ACCOUNTS_PAGE:
                return {
                  ...appState,
                  isLoading: false,
                  warning: null,
                  scrollToBottom: false,
                  forgottenPassword: false
                };

              case actionConstants.SHOW_CONF_TX_PAGE:
                return {
                  ...appState,
                  txId: action.id,
                  warning: null,
                  isLoading: false
                };

              case actionConstants.COMPLETED_TX:
                if (action.value.unconfirmedActionsCount > 0) {
                  return {
                    ...appState,
                    txId: null,
                    warning: null
                  };
                }

                return {
                  ...appState,
                  // indicate notification should close
                  shouldClose: true,
                  warning: null,
                  txId: null,
                  accountDetail: {
                    subview: 'transactions'
                  }
                };

              case actionConstants.TRANSACTION_ERROR:
                return {
                  ...appState
                };

              case actionConstants.UNLOCK_FAILED:
                return {
                  ...appState,
                  warning: action.value || 'Incorrect password. Try again.'
                };

              case actionConstants.UNLOCK_SUCCEEDED:
                return {
                  ...appState,
                  warning: ''
                };

              case actionConstants.SET_HARDWARE_WALLET_DEFAULT_HD_PATH:
                {
                  const {
                    device,
                    path
                  } = action.value;
                  const newDefaults = {
                    ...appState.defaultHdPaths
                  };
                  newDefaults[device] = path;
                  return {
                    ...appState,
                    defaultHdPaths: newDefaults
                  };
                }

              case actionConstants.SHOW_LOADING:
                return {
                  ...appState,
                  isLoading: true,
                  loadingMessage: action.value
                };

              case actionConstants.HIDE_LOADING:
                return {
                  ...appState,
                  isLoading: false
                };

              case actionConstants.DISPLAY_WARNING:
                return {
                  ...appState,
                  warning: action.value,
                  isLoading: false
                };

              case actionConstants.HIDE_WARNING:
                return {
                  ...appState,
                  warning: undefined
                };

              case actionConstants.SHOW_PRIVATE_KEY:
                return {
                  ...appState,
                  accountDetail: {
                    subview: 'export',
                    accountExport: 'completed',
                    privateKey: action.value
                  }
                };

              case actionConstants.SET_MOUSE_USER_STATE:
                return {
                  ...appState,
                  isMouseUser: action.value
                };

              case actionConstants.SET_SELECTED_SETTINGS_RPC_URL:
                return {
                  ...appState,
                  networksTabSelectedRpcUrl: action.value
                };

              case actionConstants.SET_NEW_NETWORK_ADDED:
                return {
                  ...appState,
                  newNetworkAdded: action.value
                };

              case actionConstants.SET_NEW_TOKENS_IMPORTED:
                return {
                  ...appState,
                  newTokensImported: action.value
                };

              case actionConstants.SET_NEW_COLLECTIBLE_ADDED_MESSAGE:
                return {
                  ...appState,
                  newCollectibleAddedMessage: action.value
                };

              case actionConstants.PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION:
                return {
                  ...appState,
                  portfolioTooltipWasShownInThisSession: true
                };

              case actionConstants.LOADING_METHOD_DATA_STARTED:
                return {
                  ...appState,
                  loadingMethodData: true
                };

              case actionConstants.LOADING_METHOD_DATA_FINISHED:
                return {
                  ...appState,
                  loadingMethodData: false
                };

              case actionConstants.SET_REQUEST_ACCOUNT_TABS:
                return {
                  ...appState,
                  requestAccountTabs: action.value
                };

              case actionConstants.SET_OPEN_METAMASK_TAB_IDS:
                return {
                  ...appState,
                  openMetaMaskTabs: action.value
                };

              case actionConstants.SET_CURRENT_WINDOW_TAB:
                return {
                  ...appState,
                  currentWindowTab: action.value
                };

              case actionConstants.HIDE_WHATS_NEW_POPUP:
                return {
                  ...appState,
                  showWhatsNewPopup: false
                };

              case actionConstants.CAPTURE_SINGLE_EXCEPTION:
                return {
                  ...appState,
                  singleExceptions: {
                    ...appState.singleExceptions,
                    [action.value]: null
                  }
                };

              case actionConstants.TOGGLE_GAS_LOADING_ANIMATION:
                return {
                  ...appState,
                  gasLoadingAnimationIsShowing: action.value
                };

              case actionConstants.SET_WEBHID_CONNECTED_STATUS:
                return {
                  ...appState,
                  ledgerWebHidConnectedStatus: action.value
                };

              case actionConstants.SET_LEDGER_TRANSPORT_STATUS:
                return {
                  ...appState,
                  ledgerTransportStatus: action.value
                };

              case actionConstants.TOGGLE_CURRENCY_INPUT_SWITCH:
                return {
                  ...appState,
                  sendInputCurrencySwitched: !appState.sendInputCurrencySwitched
                };

              case actionConstants.SET_NEW_CUSTOM_NETWORK_ADDED:
                return {
                  ...appState,
                  newCustomNetworkAdded: action.value
                };

              case actionConstants.ONBOARDED_IN_THIS_UI_SESSION:
                return {
                  ...appState,
                  onboardedInThisUISession: action.value
                };

              case actionConstants.SET_CUSTOM_TOKEN_AMOUNT:
                return {
                  ...appState,
                  customTokenAmount: action.value
                };

              default:
                return appState;
            }
          } // Action Creators


          function hideWhatsNewPopup() {
            return {
              type: actionConstants.HIDE_WHATS_NEW_POPUP
            };
          }

          function setPortfolioTooltipWasShownInThisSession() {
            return {
              type: actionConstants.PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION
            };
          }

          function toggleGasLoadingAnimation(value) {
            return {
              type: actionConstants.TOGGLE_GAS_LOADING_ANIMATION,
              value
            };
          }

          function setLedgerWebHidConnectedStatus(value) {
            return {
              type: actionConstants.SET_WEBHID_CONNECTED_STATUS,
              value
            };
          }

          function setLedgerTransportStatus(value) {
            return {
              type: actionConstants.SET_LEDGER_TRANSPORT_STATUS,
              value
            };
          } // Selectors


          function getQrCodeData(state) {
            return state.appState.qrCodeData;
          }

          function getGasLoadingAnimationIsShowing(state) {
            return state.appState.gasLoadingAnimationIsShowing;
          }

          function getLedgerWebHidConnectedStatus(state) {
            return state.appState.ledgerWebHidConnectedStatus;
          }

          function getLedgerTransportStatus(state) {
            return state.appState.ledgerTransportStatus;
          }

          function getPortfolioTooltipWasShownInThisSession(state) {
            return state.appState.portfolioTooltipWasShownInThisSession;
          }

          function toggleCurrencySwitch() {
            return {
              type: actionConstants.TOGGLE_CURRENCY_INPUT_SWITCH
            };
          }

          function setNewCustomNetworkAdded(value) {
            return {
              type: actionConstants.SET_NEW_CUSTOM_NETWORK_ADDED,
              value
            };
          }

          function setOnBoardedInThisUISession(value) {
            return {
              type: actionConstants.ONBOARDED_IN_THIS_UI_SESSION,
              value
            };
          }

          function setCustomTokenAmount(value) {
            return {
              type: actionConstants.SET_CUSTOM_TOKEN_AMOUNT,
              value
            };
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\ens.js", { "../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../../shared/modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "../helpers/utils/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js", "../pages/send/send.constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.constants.js", "../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "../store/actionConstants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js", "@reduxjs/toolkit": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js", "ethereum-ens-network-map": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereum-ens-network-map\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "ethers": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethers\\lib\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js", "unicode-confusables": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\unicode-confusables\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\ens.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ensInitialState = exports.default = void 0;
          exports.getEnsError = getEnsError;
          exports.getEnsResolution = getEnsResolution;
          exports.getEnsWarning = getEnsWarning;
          exports.initializeEnsSlice = initializeEnsSlice;
          exports.lookupEnsName = lookupEnsName;
          exports.resetEnsResolution = void 0;

          var _toolkit = require("@reduxjs/toolkit");

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _ethereumEnsNetworkMap = _interopRequireDefault(require("ethereum-ens-network-map"));

          var _unicodeConfusables = require("unicode-confusables");

          var _ethereumjsUtil = require("ethereumjs-util");

          var _ethers = require("ethers");

          var _selectors = require("../selectors");

          var _network = require("../../shared/constants/network");

          var _send = require("../pages/send/send.constants");

          var _util = require("../helpers/utils/util");

          var _actionConstants = require("../store/actionConstants");

          var _hexstringUtils = require("../../shared/modules/hexstring-utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          // Local Constants
          const ZERO_X_ERROR_ADDRESS = '0x';
          const initialState = {
            stage: 'UNINITIALIZED',
            resolution: null,
            error: null,
            warning: null,
            network: null
          };
          const ensInitialState = initialState;
          exports.ensInitialState = ensInitialState;
          const name = 'ENS';
          let web3Provider = null;
          const slice = (0, _toolkit.createSlice)({
            name,
            initialState,
            reducers: {
              ensLookup: (state, action) => {
                // first clear out the previous state
                state.resolution = null;
                state.error = null;
                state.warning = null;
                const {
                  address,
                  ensName,
                  error,
                  network
                } = action.payload;

                if (error) {
                  if ((0, _util.isValidDomainName)(ensName) && error.message === 'ENS name not defined.') {
                    state.error = network === _network.NETWORK_IDS.MAINNET ? _send.ENS_NO_ADDRESS_FOR_NAME : _send.ENS_NOT_FOUND_ON_NETWORK;
                  } else if (error.message === 'Illegal character for ENS.') {
                    state.error = _send.ENS_ILLEGAL_CHARACTER;
                  } else {
                    _loglevel.default.error(error);

                    state.error = _send.ENS_UNKNOWN_ERROR;
                  }
                } else if (address) {
                  if (address === _hexstringUtils.BURN_ADDRESS) {
                    state.error = _send.ENS_NO_ADDRESS_FOR_NAME;
                  } else if (address === ZERO_X_ERROR_ADDRESS) {
                    state.error = _send.ENS_REGISTRATION_ERROR;
                  } else {
                    state.resolution = address;
                  }

                  if ((0, _util.isValidDomainName)(address) && (0, _unicodeConfusables.isConfusing)(address)) {
                    state.warning = _send.CONFUSING_ENS_ERROR;
                  }
                } else {
                  state.error = _send.ENS_NO_ADDRESS_FOR_NAME;
                }
              },
              enableEnsLookup: (state, action) => {
                state.stage = 'INITIALIZED';
                state.error = null;
                state.resolution = null;
                state.warning = null;
                state.network = action.payload;
              },
              disableEnsLookup: state => {
                state.stage = 'NO_NETWORK_SUPPORT';
                state.error = null;
                state.warning = null;
                state.resolution = null;
                state.network = null;
              },
              ensNotSupported: state => {
                state.resolution = null;
                state.warning = null;
                state.error = _send.ENS_NOT_SUPPORTED_ON_NETWORK;
              },
              resetEnsResolution: state => {
                state.resolution = null;
                state.warning = null;
                state.error = null;
              }
            },
            extraReducers: builder => {
              builder.addCase(_actionConstants.CHAIN_CHANGED, (state, action) => {
                if (action.payload !== state.currentChainId) {
                  state.stage = 'UNINITIALIZED';
                  web3Provider = null;
                }
              });
            }
          });
          const {
            reducer,
            actions
          } = slice;
          var _default = reducer;
          exports.default = _default;
          const {
            disableEnsLookup,
            ensLookup,
            enableEnsLookup,
            ensNotSupported,
            resetEnsResolution
          } = actions;
          exports.resetEnsResolution = resetEnsResolution;

          function initializeEnsSlice() {
            return (dispatch, getState) => {
              const state = getState();
              const chainId = (0, _selectors.getCurrentChainId)(state);
              const network = _network.CHAIN_ID_TO_NETWORK_ID_MAP[chainId];
              const networkName = _network.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP[network];
              const ensAddress = _ethereumEnsNetworkMap.default[network];
              const networkIsSupported = Boolean(ensAddress);

              if (networkIsSupported) {
                web3Provider = new _ethers.ethers.providers.Web3Provider(global.ethereumProvider, {
                  chainId: parseInt(network, 10),
                  name: networkName,
                  ensAddress
                });
                dispatch(enableEnsLookup(network));
              } else {
                web3Provider = null;
                dispatch(disableEnsLookup());
              }
            };
          }

          function lookupEnsName(ensName) {
            return async (dispatch, getState) => {
              const trimmedEnsName = ensName.trim();
              let state = getState();

              if (state[name].stage === 'UNINITIALIZED') {
                await dispatch(initializeEnsSlice());
              }

              state = getState();

              if (state[name].stage === 'NO_NETWORK_SUPPORT' && !((0, _hexstringUtils.isBurnAddress)(trimmedEnsName) === false && (0, _hexstringUtils.isValidHexAddress)(trimmedEnsName, {
                mixedCaseUseChecksum: true
              })) && !(0, _ethereumjsUtil.isHexString)(trimmedEnsName)) {
                await dispatch(ensNotSupported());
              } else {
                _loglevel.default.info(`ENS attempting to resolve name: ${trimmedEnsName}`);

                let address;
                let error;

                try {
                  var _web3Provider$provide;

                  // the writable property on the 'provider' object on the 'web3Provider' flips to false when stale
                  // This helps handle the case where the provider is becomes unresponsive if/when, in MV3, the service worker dies after the ENS slice is instantiated
                  const isProviderActive = (_web3Provider$provide = web3Provider.provider) === null || _web3Provider$provide === void 0 ? void 0 : _web3Provider$provide.writable;

                  if (!isProviderActive) {
                    await dispatch(initializeEnsSlice());
                  }

                  address = await web3Provider.resolveName(trimmedEnsName);
                } catch (err) {
                  error = err;
                }

                const chainId = (0, _selectors.getCurrentChainId)(state);
                const network = _network.CHAIN_ID_TO_NETWORK_ID_MAP[chainId];
                await dispatch(ensLookup({
                  ensName: trimmedEnsName,
                  address,
                  error,
                  chainId,
                  network
                }));
              }
            };
          }

          function getEnsResolution(state) {
            return state[name].resolution;
          }

          function getEnsError(state) {
            return state[name].error;
          }

          function getEnsWarning(state) {
            return state[name].warning;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas-action-constants.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\gas\gas-action-constants.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SET_CUSTOM_GAS_PRICE = exports.SET_CUSTOM_GAS_LIMIT = exports.RESET_CUSTOM_DATA = void 0;
          // This file has been separated because it is required in both the gas and send
          // slices. This created a circular dependency problem as both slices also
          // import from the actions and selectors files. This easiest path for
          // untangling is having the constants separate.
          // Actions
          const RESET_CUSTOM_DATA = 'metamask/gas/RESET_CUSTOM_DATA';
          exports.RESET_CUSTOM_DATA = RESET_CUSTOM_DATA;
          const SET_CUSTOM_GAS_LIMIT = 'metamask/gas/SET_CUSTOM_GAS_LIMIT';
          exports.SET_CUSTOM_GAS_LIMIT = SET_CUSTOM_GAS_LIMIT;
          const SET_CUSTOM_GAS_PRICE = 'metamask/gas/SET_CUSTOM_GAS_PRICE';
          exports.SET_CUSTOM_GAS_PRICE = SET_CUSTOM_GAS_PRICE;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas.duck.js", { "./gas-action-constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas-action-constants.js", "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\gas\gas.duck.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = reducer;
          exports.setCustomGasLimit = setCustomGasLimit;
          exports.setCustomGasPrice = setCustomGasPrice;

          var _lodash = require("lodash");

          var _gasActionConstants = require("./gas-action-constants");

          const initState = {
            customData: {
              price: null,
              limit: null
            }
          }; // Reducer

          function reducer(state = initState, action) {
            switch (action.type) {
              case _gasActionConstants.SET_CUSTOM_GAS_PRICE:
                return {
                  ...state,
                  customData: {
                    ...state.customData,
                    price: action.value
                  }
                };

              case _gasActionConstants.SET_CUSTOM_GAS_LIMIT:
                return {
                  ...state,
                  customData: {
                    ...state.customData,
                    limit: action.value
                  }
                };

              case _gasActionConstants.RESET_CUSTOM_DATA:
                return {
                  ...state,
                  customData: (0, _lodash.cloneDeep)(initState.customData)
                };

              default:
                return state;
            }
          }

          function setCustomGasPrice(newPrice) {
            return {
              type: _gasActionConstants.SET_CUSTOM_GAS_PRICE,
              value: newPrice
            };
          }

          function setCustomGasLimit(newLimit) {
            return {
              type: _gasActionConstants.SET_CUSTOM_GAS_LIMIT,
              value: newLimit
            };
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js", { "../../../shared/constants/alerts": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js", "../../../shared/constants/gas": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js", "../../../shared/constants/hardware-wallets": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js", "../../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../../../shared/modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "../../../shared/modules/string-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js", "../../helpers/utils/conversions.util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js", "../../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "../../store/actionConstants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js", "../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "../gas/gas.duck": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas.duck.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\metamask\metamask.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = reduceMetamask;
          exports.doesUserHaveALedgerAccount = doesUserHaveALedgerAccount;
          exports.findKeyringForAddress = findKeyringForAddress;
          exports.getAlertEnabledness = void 0;
          exports.getBlockGasLimit = getBlockGasLimit;
          exports.getCollectibles = exports.getCollectibleContracts = void 0;
          exports.getCollectiblesDetectionNoticeDismissed = getCollectiblesDetectionNoticeDismissed;
          exports.getCollectiblesDropdownState = getCollectiblesDropdownState;
          exports.getCompletedOnboarding = getCompletedOnboarding;
          exports.getConversionRate = getConversionRate;
          exports.getCurrentLocale = void 0;
          exports.getEnableEIP1559V2NoticeDismissed = getEnableEIP1559V2NoticeDismissed;
          exports.getEstimatedGasFeeTimeBounds = getEstimatedGasFeeTimeBounds;
          exports.getGasEstimateType = getGasEstimateType;
          exports.getGasFeeEstimates = getGasFeeEstimates;
          exports.getIsGasEstimatesLoading = getIsGasEstimatesLoading;
          exports.getIsInitialized = getIsInitialized;
          exports.getIsNetworkBusy = getIsNetworkBusy;
          exports.getIsUnlocked = getIsUnlocked;
          exports.getLedgerTransportType = getLedgerTransportType;
          exports.getNativeCurrency = getNativeCurrency;
          exports.getPendingTokens = void 0;
          exports.getSeedPhraseBackedUp = getSeedPhraseBackedUp;
          exports.getSendHexDataFeatureFlagState = getSendHexDataFeatureFlagState;
          exports.getSendToAccounts = getSendToAccounts;
          exports.getTokens = void 0;
          exports.getUnapprovedTxs = getUnapprovedTxs;
          exports.getWeb3ShimUsageAlertEnabledness = exports.getUnconnectedAccountAlertShown = exports.getUnconnectedAccountAlertEnabledness = void 0;
          exports.isAddressLedger = isAddressLedger;
          exports.isEIP1559Network = isEIP1559Network;
          exports.isNotEIP1559Network = isNotEIP1559Network;
          exports.updateGasFees = updateGasFees;

          var _ethereumjsUtil = require("ethereumjs-util");

          var actionConstants = _interopRequireWildcard(require("../../store/actionConstants"));

          var _alerts = require("../../../shared/constants/alerts");

          var _gas = require("../../../shared/constants/gas");

          var _network = require("../../../shared/constants/network");

          var _selectors = require("../../selectors");

          var _actions = require("../../store/actions");

          var _gas2 = require("../gas/gas.duck");

          var _conversions = require("../../helpers/utils/conversions.util");

          var _hardwareWallets = require("../../../shared/constants/hardware-wallets");

          var _stringUtils = require("../../../shared/modules/string-utils");

          var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function reduceMetamask(state = {}, action) {
            const metamaskState = {
              isInitialized: false,
              isUnlocked: false,
              isAccountMenuOpen: false,
              identities: {},
              unapprovedTxs: {},
              frequentRpcList: [],
              addressBook: [],
              contractExchangeRates: {},
              pendingTokens: {},
              customNonceValue: '',
              useBlockie: false,
              featureFlags: {},
              welcomeScreenSeen: false,
              currentLocale: '',
              currentBlockGasLimit: '',
              preferences: {
                autoLockTimeLimit: undefined,
                showFiatInTestnets: false,
                showTestNetworks: false,
                useNativeCurrencyAsPrimaryCurrency: true
              },
              firstTimeFlowType: null,
              completedOnboarding: false,
              knownMethodData: {},
              participateInMetaMetrics: null,
              nextNonce: null,
              conversionRate: null,
              nativeCurrency: 'ETH',
              ...state
            };

            switch (action.type) {
              case actionConstants.UPDATE_METAMASK_STATE:
                return {
                  ...metamaskState,
                  ...action.value
                };

              case actionConstants.LOCK_METAMASK:
                return {
                  ...metamaskState,
                  isUnlocked: false
                };

              case actionConstants.SET_RPC_TARGET:
                return {
                  ...metamaskState,
                  provider: {
                    type: _network.NETWORK_TYPES.RPC,
                    rpcUrl: action.value
                  }
                };

              case actionConstants.SET_PROVIDER_TYPE:
                return {
                  ...metamaskState,
                  provider: {
                    type: action.value
                  }
                };

              case actionConstants.SHOW_ACCOUNT_DETAIL:
                return {
                  ...metamaskState,
                  isUnlocked: true,
                  isInitialized: true,
                  selectedAddress: action.value
                };

              case actionConstants.SET_ACCOUNT_LABEL:
                {
                  const {
                    account
                  } = action.value;
                  const name = action.value.label;
                  const id = {};
                  id[account] = {
                    ...metamaskState.identities[account],
                    name
                  };
                  const identities = {
                    ...metamaskState.identities,
                    ...id
                  };
                  return Object.assign(metamaskState, {
                    identities
                  });
                }

              case actionConstants.UPDATE_CUSTOM_NONCE:
                return {
                  ...metamaskState,
                  customNonceValue: action.value
                };

              case actionConstants.TOGGLE_ACCOUNT_MENU:
                return {
                  ...metamaskState,
                  isAccountMenuOpen: !metamaskState.isAccountMenuOpen
                };

              case actionConstants.UPDATE_TRANSACTION_PARAMS:
                {
                  const {
                    id: txId,
                    value
                  } = action;
                  let {
                    currentNetworkTxList
                  } = metamaskState;
                  currentNetworkTxList = currentNetworkTxList.map(tx => {
                    if (tx.id === txId) {
                      const newTx = {
                        ...tx
                      };
                      newTx.txParams = value;
                      return newTx;
                    }

                    return tx;
                  });
                  return {
                    ...metamaskState,
                    currentNetworkTxList
                  };
                }

              case actionConstants.SET_PARTICIPATE_IN_METAMETRICS:
                return {
                  ...metamaskState,
                  participateInMetaMetrics: action.value
                };

              case actionConstants.SET_USE_BLOCKIE:
                return {
                  ...metamaskState,
                  useBlockie: action.value
                };

              case actionConstants.UPDATE_FEATURE_FLAGS:
                return {
                  ...metamaskState,
                  featureFlags: action.value
                };

              case actionConstants.CLOSE_WELCOME_SCREEN:
                return {
                  ...metamaskState,
                  welcomeScreenSeen: true
                };

              case actionConstants.SET_CURRENT_LOCALE:
                return {
                  ...metamaskState,
                  currentLocale: action.value.locale
                };

              case actionConstants.SET_PENDING_TOKENS:
                return {
                  ...metamaskState,
                  pendingTokens: {
                    ...action.payload
                  }
                };

              case actionConstants.CLEAR_PENDING_TOKENS:
                {
                  return {
                    ...metamaskState,
                    pendingTokens: {}
                  };
                }

              case actionConstants.UPDATE_PREFERENCES:
                {
                  return {
                    ...metamaskState,
                    preferences: {
                      ...metamaskState.preferences,
                      ...action.payload
                    }
                  };
                }

              case actionConstants.COMPLETE_ONBOARDING:
                {
                  return {
                    ...metamaskState,
                    completedOnboarding: true
                  };
                }

              case actionConstants.SET_FIRST_TIME_FLOW_TYPE:
                {
                  return {
                    ...metamaskState,
                    firstTimeFlowType: action.value
                  };
                }

              case actionConstants.SET_NEXT_NONCE:
                {
                  return {
                    ...metamaskState,
                    nextNonce: action.value
                  };
                }

              default:
                return metamaskState;
            }
          }

          const toHexWei = (value, expectHexWei) => {
            return (0, _ethereumjsUtil.addHexPrefix)(expectHexWei ? value : (0, _conversions.decGWEIToHexWEI)(value));
          }; // Action Creators


          function updateGasFees({
            gasPrice,
            gasLimit,
            maxPriorityFeePerGas,
            maxFeePerGas,
            transaction,
            expectHexWei = false
          }) {
            return async dispatch => {
              const txParamsCopy = {
                ...transaction.txParams,
                gas: gasLimit
              };

              if (gasPrice) {
                dispatch((0, _gas2.setCustomGasPrice)(toHexWei(txParamsCopy.gasPrice, expectHexWei)));
                txParamsCopy.gasPrice = toHexWei(gasPrice, expectHexWei);
              } else if (maxFeePerGas && maxPriorityFeePerGas) {
                txParamsCopy.maxFeePerGas = toHexWei(maxFeePerGas, expectHexWei);
                txParamsCopy.maxPriorityFeePerGas = (0, _ethereumjsUtil.addHexPrefix)((0, _conversions.decGWEIToHexWEI)(maxPriorityFeePerGas));
              }

              const updatedTx = {
                ...transaction,
                txParams: txParamsCopy
              };
              const customGasLimit = (0, _ethereumjsUtil.isHexString)((0, _ethereumjsUtil.addHexPrefix)(gasLimit)) ? (0, _ethereumjsUtil.addHexPrefix)(gasLimit) : (0, _ethereumjsUtil.addHexPrefix)(gasLimit.toString(16));
              dispatch((0, _gas2.setCustomGasLimit)(customGasLimit));
              await dispatch((0, _actions.updateTransactionGasFees)(updatedTx.id, updatedTx));
            };
          } // Selectors


          const getCurrentLocale = state => state.metamask.currentLocale;

          exports.getCurrentLocale = getCurrentLocale;

          const getAlertEnabledness = state => state.metamask.alertEnabledness;

          exports.getAlertEnabledness = getAlertEnabledness;

          const getUnconnectedAccountAlertEnabledness = state => getAlertEnabledness(state)[_alerts.ALERT_TYPES.unconnectedAccount];

          exports.getUnconnectedAccountAlertEnabledness = getUnconnectedAccountAlertEnabledness;

          const getWeb3ShimUsageAlertEnabledness = state => getAlertEnabledness(state)[_alerts.ALERT_TYPES.web3ShimUsage];

          exports.getWeb3ShimUsageAlertEnabledness = getWeb3ShimUsageAlertEnabledness;

          const getUnconnectedAccountAlertShown = state => state.metamask.unconnectedAccountAlertShownOrigins;

          exports.getUnconnectedAccountAlertShown = getUnconnectedAccountAlertShown;

          const getPendingTokens = state => state.metamask.pendingTokens;

          exports.getPendingTokens = getPendingTokens;

          const getTokens = state => state.metamask.tokens;

          exports.getTokens = getTokens;

          function getCollectiblesDetectionNoticeDismissed(state) {
            return state.metamask.collectiblesDetectionNoticeDismissed;
          }

          function getCollectiblesDropdownState(state) {
            return state.metamask.collectiblesDropdownState;
          }

          function getEnableEIP1559V2NoticeDismissed(state) {
            return state.metamask.enableEIP1559V2NoticeDismissed;
          }

          const getCollectibles = state => {
            var _allCollectibles$sele, _allCollectibles$sele2;

            const {
              metamask: {
                allCollectibles,
                provider: {
                  chainId
                },
                selectedAddress
              }
            } = state;
            return (_allCollectibles$sele = allCollectibles === null || allCollectibles === void 0 ? void 0 : (_allCollectibles$sele2 = allCollectibles[selectedAddress]) === null || _allCollectibles$sele2 === void 0 ? void 0 : _allCollectibles$sele2[chainId]) !== null && _allCollectibles$sele !== void 0 ? _allCollectibles$sele : [];
          };

          exports.getCollectibles = getCollectibles;

          const getCollectibleContracts = state => {
            var _allCollectibleContra, _allCollectibleContra2;

            const {
              metamask: {
                allCollectibleContracts,
                provider: {
                  chainId
                },
                selectedAddress
              }
            } = state;
            return (_allCollectibleContra = allCollectibleContracts === null || allCollectibleContracts === void 0 ? void 0 : (_allCollectibleContra2 = allCollectibleContracts[selectedAddress]) === null || _allCollectibleContra2 === void 0 ? void 0 : _allCollectibleContra2[chainId]) !== null && _allCollectibleContra !== void 0 ? _allCollectibleContra : [];
          };

          exports.getCollectibleContracts = getCollectibleContracts;

          function getBlockGasLimit(state) {
            return state.metamask.currentBlockGasLimit;
          }

          function getConversionRate(state) {
            return state.metamask.conversionRate;
          }

          function getNativeCurrency(state) {
            return state.metamask.nativeCurrency;
          }

          function getSendHexDataFeatureFlagState(state) {
            return state.metamask.featureFlags.sendHexData;
          }

          function getSendToAccounts(state) {
            const fromAccounts = (0, _selectors.accountsWithSendEtherInfoSelector)(state);
            const addressBookAccounts = (0, _selectors.getAddressBook)(state);
            return [...fromAccounts, ...addressBookAccounts];
          }

          function getUnapprovedTxs(state) {
            return state.metamask.unapprovedTxs;
          }
          /**
           * Function returns true if network details are fetched and it is found to not support EIP-1559
           *
           * @param state
           */


          function isNotEIP1559Network(state) {
            var _state$metamask$netwo;

            return ((_state$metamask$netwo = state.metamask.networkDetails) === null || _state$metamask$netwo === void 0 ? void 0 : _state$metamask$netwo.EIPS[1559]) === false;
          }
          /**
           * Function returns true if network details are fetched and it is found to support EIP-1559
           *
           * @param state
           */


          function isEIP1559Network(state) {
            var _state$metamask$netwo2;

            return ((_state$metamask$netwo2 = state.metamask.networkDetails) === null || _state$metamask$netwo2 === void 0 ? void 0 : _state$metamask$netwo2.EIPS[1559]) === true;
          }

          function getGasEstimateType(state) {
            return state.metamask.gasEstimateType;
          }

          function getGasFeeEstimates(state) {
            return state.metamask.gasFeeEstimates;
          }

          function getEstimatedGasFeeTimeBounds(state) {
            return state.metamask.estimatedGasFeeTimeBounds;
          }

          function getIsGasEstimatesLoading(state) {
            const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
            const gasEstimateType = getGasEstimateType(state); // We consider the gas estimate to be loading if the gasEstimateType is
            // 'NONE' or if the current gasEstimateType cannot be supported by the current
            // network

            const isEIP1559TolerableEstimateType = gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET || gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE;
            const isGasEstimatesLoading = gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE || networkAndAccountSupports1559 && !isEIP1559TolerableEstimateType || !networkAndAccountSupports1559 && gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET;
            return isGasEstimatesLoading;
          }

          function getIsNetworkBusy(state) {
            const gasFeeEstimates = getGasFeeEstimates(state);
            return (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.networkCongestion) >= _gas.NETWORK_CONGESTION_THRESHOLDS.BUSY;
          }

          function getCompletedOnboarding(state) {
            return state.metamask.completedOnboarding;
          }

          function getIsInitialized(state) {
            return state.metamask.isInitialized;
          }

          function getIsUnlocked(state) {
            return state.metamask.isUnlocked;
          }

          function getSeedPhraseBackedUp(state) {
            return state.metamask.seedPhraseBackedUp;
          }
          /**
           * Given the redux state object and an address, finds a keyring that contains that address, if one exists
           *
           * @param {object} state - the redux state object
           * @param {string} address - the address to search for among the keyring addresses
           * @returns {object | undefined} The keyring which contains the passed address, or undefined
           */


          function findKeyringForAddress(state, address) {
            const keyring = state.metamask.keyrings.find(kr => {
              return kr.accounts.some(account => {
                return (0, _stringUtils.isEqualCaseInsensitive)(account, (0, _ethereumjsUtil.addHexPrefix)(address)) || (0, _stringUtils.isEqualCaseInsensitive)(account, (0, _hexstringUtils.stripHexPrefix)(address));
              });
            });
            return keyring;
          }
          /**
           * Given the redux state object, returns the users preferred ledger transport type
           *
           * @param {object} state - the redux state object
           * @returns {string} The users preferred ledger transport type. One of'ledgerLive', 'webhid' or 'u2f'
           */


          function getLedgerTransportType(state) {
            return state.metamask.ledgerTransportType;
          }
          /**
           * Given the redux state object and an address, returns a boolean indicating whether the passed address is part of a Ledger keyring
           *
           * @param {object} state - the redux state object
           * @param {string} address - the address to search for among all keyring addresses
           * @returns {boolean} true if the passed address is part of a ledger keyring, and false otherwise
           */


          function isAddressLedger(state, address) {
            const keyring = findKeyringForAddress(state, address);
            return (keyring === null || keyring === void 0 ? void 0 : keyring.type) === _hardwareWallets.KEYRING_TYPES.LEDGER;
          }
          /**
           * Given the redux state object, returns a boolean indicating whether the user has any Ledger accounts added to MetaMask (i.e. Ledger keyrings
           * in state)
           *
           * @param {object} state - the redux state object
           * @returns {boolean} true if the user has a Ledger account and false otherwise
           */


          function doesUserHaveALedgerAccount(state) {
            return state.metamask.keyrings.some(kr => {
              return kr.type === _hardwareWallets.KEYRING_TYPES.LEDGER;
            });
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\helpers.js", { "../../../shared/constants/gas": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js", "../../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../../../shared/lib/transactions-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", "../../../shared/modules/contract-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\contract-utils.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../../helpers/constants/common": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js", "../../pages/send/send.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js", "../../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "human-standard-token-abi": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\human-standard-token-abi\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\send\helpers.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.estimateGasLimitForSend = estimateGasLimitForSend;
          exports.generateTransactionParams = generateTransactionParams;
          exports.getERC20Balance = getERC20Balance;
          exports.getRoundedGasPrice = getRoundedGasPrice;

          var _ethereumjsUtil = require("ethereumjs-util");

          var _humanStandardTokenAbi = _interopRequireDefault(require("human-standard-token-abi"));

          var _gas = require("../../../shared/constants/gas");

          var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

          var _network = require("../../../shared/constants/network");

          var _transaction = require("../../../shared/constants/transaction");

          var _contractUtils = require("../../../shared/modules/contract-utils");

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _common = require("../../helpers/constants/common");

          var _send = require("../../pages/send/send.utils");

          var _selectors = require("../../selectors");

          var _actions = require("../../store/actions");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          async function estimateGasLimitForSend({
            selectedAddress,
            value,
            gasPrice,
            sendToken,
            to,
            data,
            isNonStandardEthChain,
            chainId,
            gasLimit,
            ...options
          }) {
            let isSimpleSendOnNonStandardNetwork = false; // blockGasLimit may be a falsy, but defined, value when we receive it from
            // state, so we use logical or to fall back to MIN_GAS_LIMIT_HEX. Some
            // network implementations check the gas parameter supplied to
            // eth_estimateGas for validity. For this reason, we set token sends
            // blockGasLimit default to a higher number. Note that the current gasLimit
            // on a BLOCK is 15,000,000 and will be 30,000,000 on mainnet after London.
            // Meanwhile, MIN_GAS_LIMIT_HEX is 0x5208.

            let blockGasLimit = _gas.MIN_GAS_LIMIT_HEX;

            if (options.blockGasLimit) {
              blockGasLimit = options.blockGasLimit;
            } else if (sendToken) {
              blockGasLimit = _gas.GAS_LIMITS.BASE_TOKEN_ESTIMATE;
            } // The parameters below will be sent to our background process to estimate
            // how much gas will be used for a transaction. That background process is
            // located in tx-gas-utils.js in the transaction controller folder.


            const paramsForGasEstimate = {
              from: selectedAddress,
              value,
              gasPrice
            };

            if (sendToken) {
              if (!to) {
                // If no to address is provided, we cannot generate the token transfer
                // hexData. hexData in a transaction largely dictates how much gas will
                // be consumed by a transaction. We must use our best guess, which is
                // represented in the gas shared constants.
                return _gas.GAS_LIMITS.BASE_TOKEN_ESTIMATE;
              }

              paramsForGasEstimate.value = '0x0'; // We have to generate the erc20/erc721 contract call to transfer tokens in
              // order to get a proper estimate for gasLimit.

              paramsForGasEstimate.data = (0, _send.getAssetTransferData)({
                sendToken,
                fromAddress: selectedAddress,
                toAddress: to,
                amount: value
              });
              paramsForGasEstimate.to = sendToken.address;
            } else {
              if (!data) {
                // eth.getCode will return the compiled smart contract code at the
                // address. If this returns 0x, 0x0 or a nullish value then the address
                // is an externally owned account (NOT a contract account). For these
                // types of transactions the gasLimit will always be 21,000 or 0x5208
                const {
                  isContractAddress
                } = to ? await (0, _contractUtils.readAddressAsContract)(global.eth, to) : {};

                if (!isContractAddress && !isNonStandardEthChain) {
                  return _gas.GAS_LIMITS.SIMPLE;
                } else if (!isContractAddress && isNonStandardEthChain) {
                  isSimpleSendOnNonStandardNetwork = true;
                }
              }

              paramsForGasEstimate.data = data;

              if (to) {
                paramsForGasEstimate.to = to;
              }

              if (!value || value === '0') {
                // TODO: Figure out what's going on here. According to eth_estimateGas
                // docs this value can be zero, or undefined, yet we are setting it to a
                // value here when the value is undefined or zero. For more context:
                // https://github.com/MetaMask/metamask-extension/pull/6195
                paramsForGasEstimate.value = '0xff';
              }
            }

            if (!isSimpleSendOnNonStandardNetwork) {
              // If we do not yet have a gasLimit, we must call into our background
              // process to get an estimate for gasLimit based on known parameters.
              paramsForGasEstimate.gas = (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(blockGasLimit, 0.95, {
                multiplicandBase: 16,
                multiplierBase: 10,
                roundDown: '0',
                toNumericBase: 'hex'
              }));
            } // The buffer multipler reduces transaction failures by ensuring that the
            // estimated gas is always sufficient. Without the multiplier, estimates
            // for contract interactions can become inaccurate over time. This is because
            // gas estimation is non-deterministic. The gas required for the exact same
            // transaction call can change based on state of a contract or changes in the
            // contracts environment (blockchain data or contracts it interacts with).
            // Applying the 1.5 buffer has proven to be a useful guard against this non-
            // deterministic behaviour.
            //
            // Gas estimation of simple sends should, however, be deterministic. As such
            // no buffer is needed in those cases.


            let bufferMultiplier = 1.5;

            if (isSimpleSendOnNonStandardNetwork) {
              bufferMultiplier = 1;
            } else if (_network.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId]) {
              bufferMultiplier = _network.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId];
            }

            try {
              // Call into the background process that will simulate transaction
              // execution on the node and return an estimate of gasLimit
              const estimatedGasLimit = await (0, _actions.estimateGas)(paramsForGasEstimate);
              const estimateWithBuffer = (0, _send.addGasBuffer)(estimatedGasLimit, blockGasLimit, bufferMultiplier);
              return (0, _ethereumjsUtil.addHexPrefix)(estimateWithBuffer);
            } catch (error) {
              const simulationFailed = error.message.includes('Transaction execution error.') || error.message.includes('gas required exceeds allowance or always failing transaction') || _network.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId] && error.message.includes('gas required exceeds allowance');

              if (simulationFailed) {
                var _paramsForGasEstimate;

                const estimateWithBuffer = (0, _send.addGasBuffer)((_paramsForGasEstimate = paramsForGasEstimate === null || paramsForGasEstimate === void 0 ? void 0 : paramsForGasEstimate.gas) !== null && _paramsForGasEstimate !== void 0 ? _paramsForGasEstimate : gasLimit, blockGasLimit, bufferMultiplier);
                return (0, _ethereumjsUtil.addHexPrefix)(estimateWithBuffer);
              }

              throw error;
            }
          }
          /**
           * Generates a txParams from the send slice.
           *
           * @param {__import__('.').SendState} sendState - the state of the send slice
           * @returns {__import__(
           *  '../../../shared/constants/transaction'
           * ).TxParams} A txParams object that can be used to create a transaction or
           *  update an existing transaction.
           */


          function generateTransactionParams(sendState) {
            var _draftTransaction$fro, _draftTransaction$fro2, _draftTransaction$fro3, _draftTransaction$use;

            const draftTransaction = sendState.draftTransactions[sendState.currentTransactionUUID];
            const txParams = {
              // If the fromAccount has been specified we use that, if not we use the
              // selected account.
              from: ((_draftTransaction$fro = draftTransaction.fromAccount) === null || _draftTransaction$fro === void 0 ? void 0 : _draftTransaction$fro.address) || sendState.selectedAccount.address,
              // gasLimit always needs to be set regardless of the asset being sent
              // or the type of transaction.
              gas: draftTransaction.gas.gasLimit
            };

            switch (draftTransaction.asset.type) {
              case _transaction.ASSET_TYPES.TOKEN:
                // When sending a token the to address is the contract address of
                // the token being sent. The value is set to '0x0' and the data
                // is generated from the recipient address, token being sent and
                // amount.
                txParams.to = draftTransaction.asset.details.address;
                txParams.value = '0x0';
                txParams.data = (0, _send.generateERC20TransferData)({
                  toAddress: draftTransaction.recipient.address,
                  amount: draftTransaction.amount.value,
                  sendToken: draftTransaction.asset.details
                });
                break;

              case _transaction.ASSET_TYPES.COLLECTIBLE:
                // When sending a token the to address is the contract address of
                // the token being sent. The value is set to '0x0' and the data
                // is generated from the recipient address, token being sent and
                // amount.
                txParams.to = draftTransaction.asset.details.address;
                txParams.value = '0x0';
                txParams.data = (0, _send.generateERC721TransferData)({
                  toAddress: draftTransaction.recipient.address,
                  fromAddress: (_draftTransaction$fro2 = (_draftTransaction$fro3 = draftTransaction.fromAccount) === null || _draftTransaction$fro3 === void 0 ? void 0 : _draftTransaction$fro3.address) !== null && _draftTransaction$fro2 !== void 0 ? _draftTransaction$fro2 : sendState.selectedAccount.address,
                  tokenId: draftTransaction.asset.details.tokenId
                });
                break;

              case _transaction.ASSET_TYPES.NATIVE:
              default:
                // When sending native currency the to and value fields use the
                // recipient and amount values and the data key is either null or
                // populated with the user input provided in hex field.
                txParams.to = draftTransaction.recipient.address;
                txParams.value = draftTransaction.amount.value;
                txParams.data = (_draftTransaction$use = draftTransaction.userInputHexData) !== null && _draftTransaction$use !== void 0 ? _draftTransaction$use : undefined;
            } // We need to make sure that we only include the right gas fee fields
            // based on the type of transaction the network supports. We will also set
            // the type param here.


            if (sendState.eip1559support) {
              txParams.type = _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET;
              txParams.maxFeePerGas = draftTransaction.gas.maxFeePerGas;
              txParams.maxPriorityFeePerGas = draftTransaction.gas.maxPriorityFeePerGas;

              if (!txParams.maxFeePerGas || txParams.maxFeePerGas === '0x0') {
                txParams.maxFeePerGas = draftTransaction.gas.gasPrice;
              }

              if (!txParams.maxPriorityFeePerGas || txParams.maxPriorityFeePerGas === '0x0') {
                txParams.maxPriorityFeePerGas = txParams.maxFeePerGas;
              }
            } else {
              txParams.gasPrice = draftTransaction.gas.gasPrice;
              txParams.type = _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY;
            }

            return txParams;
          }
          /**
           * This method is used to keep the original logic from the gas.duck.js file
           * after receiving a gasPrice from eth_gasPrice. First, the returned gasPrice
           * was converted to GWEI, then it was converted to a Number, then in the send
           * duck (here) we would use getGasPriceInHexWei to get back to hexWei. Now that
           * we receive a GWEI estimate from the controller, we still need to do this
           * weird conversion to get the proper rounding.
           *
           * @param {string} gasPriceEstimate
           * @returns {string}
           */


          function getRoundedGasPrice(gasPriceEstimate) {
            const gasPriceInDecGwei = (0, _conversion.conversionUtil)(gasPriceEstimate, {
              numberOfDecimals: 9,
              toDenomination: _common.GWEI,
              fromNumericBase: 'dec',
              toNumericBase: 'dec',
              fromCurrency: _common.ETH,
              fromDenomination: _common.GWEI
            });
            const gasPriceAsNumber = Number(gasPriceInDecGwei);
            return (0, _selectors.getGasPriceInHexWei)(gasPriceAsNumber);
          }

          async function getERC20Balance(token, accountAddress) {
            var _await$contract$balan;

            const contract = global.eth.contract(_humanStandardTokenAbi.default).at(token.address);
            const usersToken = (_await$contract$balan = await contract.balanceOf(accountAddress)) !== null && _await$contract$balan !== void 0 ? _await$contract$balan : null;

            if (!usersToken) {
              return '0x0';
            }

            const amount = (0, _transactionsControllerUtils.calcTokenAmount)(usersToken.balance.toString(), token.decimals).toString(16);
            return (0, _ethereumjsUtil.addHexPrefix)(amount);
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js", { "./send": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\send.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\send\index.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _send = require("./send");

          Object.keys(_send).forEach(function (key) {
            if (key === "default" || key === "__esModule") return;
            if (key in exports && exports[key] === _send[key]) return;
            Object.defineProperty(exports, key, {
              enumerable: true,
              get: function () {
                return _send[key];
              }
            });
          });

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\send.js", { "../../../shared/constants/gas": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js", "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../../../shared/lib/metamask-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js", "../../../shared/lib/transactions-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../../../shared/modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "../../../shared/modules/string-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js", "../../../shared/modules/transaction.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js", "../../helpers/constants/common": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js", "../../helpers/constants/error-keys": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\error-keys.js", "../../helpers/utils/confirm-tx.util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js", "../../helpers/utils/optimism/fetchEstimatedL1Fee": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js", "../../helpers/utils/token-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js", "../../helpers/utils/transactions.util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js", "../../helpers/utils/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js", "../../pages/send/send.constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.constants.js", "../../pages/send/send.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js", "../../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "../../store/actionConstants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js", "../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "../ens": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\ens.js", "../gas/gas.duck": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas.duck.js", "../metamask/metamask": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js", "./helpers": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\helpers.js", "@reduxjs/toolkit": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js", "uuid": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\send\send.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.draftTransactionInitialState = exports.default = exports.computeEstimatedGasLimit = exports.addHistoryEntry = exports.acknowledgeRecipientWarning = exports.SEND_STATUSES = exports.SEND_STAGES = exports.RECIPIENT_SEARCH_MODES = exports.GAS_INPUT_MODES = exports.AMOUNT_MODES = void 0;
          exports.editExistingTransaction = editExistingTransaction;
          exports.gasFeeIsInError = gasFeeIsInError;
          exports.getAssetError = getAssetError;
          exports.getCurrentDraftTransaction = getCurrentDraftTransaction;
          exports.getCurrentTransactionUUID = getCurrentTransactionUUID;
          exports.getDraftTransactionExists = getDraftTransactionExists;
          exports.getDraftTransactionID = getDraftTransactionID;
          exports.getGasInputMode = getGasInputMode;
          exports.getGasLimit = getGasLimit;
          exports.getGasPrice = getGasPrice;
          exports.getGasTotal = getGasTotal;
          exports.getIsAssetSendable = getIsAssetSendable;
          exports.getIsBalanceInsufficient = getIsBalanceInsufficient;
          exports.getIsUsingMyAccountForRecipientSearch = getIsUsingMyAccountForRecipientSearch;
          exports.getMinimumGasLimitForSend = getMinimumGasLimitForSend;
          exports.getRecipient = getRecipient;
          exports.getRecipientUserInput = getRecipientUserInput;
          exports.getRecipientWarningAcknowledgement = getRecipientWarningAcknowledgement;
          exports.getSendAmount = getSendAmount;
          exports.getSendAsset = getSendAsset;
          exports.getSendAssetAddress = getSendAssetAddress;
          exports.getSendErrors = getSendErrors;
          exports.getSendHexData = getSendHexData;
          exports.getSendMaxModeState = getSendMaxModeState;
          exports.getSendStage = getSendStage;
          exports.getSendTo = getSendTo;
          exports.initializeSendState = exports.initialState = void 0;
          exports.isSendFormInvalid = isSendFormInvalid;
          exports.isSendStateInitialized = isSendStateInitialized;
          exports.resetRecipientInput = resetRecipientInput;
          exports.resetSendState = resetSendState;
          exports.sendAmountIsInError = sendAmountIsInError;
          exports.signTransaction = signTransaction;
          exports.startNewDraftTransaction = startNewDraftTransaction;
          exports.toggleSendMaxMode = toggleSendMaxMode;
          exports.updateGasLimit = void 0;
          exports.updateGasPrice = updateGasPrice;
          exports.updateRecipient = updateRecipient;
          exports.updateRecipientUserInput = updateRecipientUserInput;
          exports.updateSendAmount = updateSendAmount;
          exports.updateSendAsset = updateSendAsset;
          exports.updateSendHexData = updateSendHexData;
          exports.useContactListForRecipientSearch = useContactListForRecipientSearch;
          exports.useDefaultGas = exports.useCustomGas = void 0;
          exports.useMyAccountsForRecipientSearch = useMyAccountsForRecipientSearch;

          var _toolkit = require("@reduxjs/toolkit");

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var _ethereumjsUtil = require("ethereumjs-util");

          var _lodash = require("lodash");

          var _uuid = require("uuid");

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _gas = require("../../../shared/constants/gas");

          var _send = require("../../pages/send/send.constants");

          var _send2 = require("../../pages/send/send.utils");

          var _selectors = require("../../selectors");

          var _actions = require("../../store/actions");

          var _gas2 = require("../gas/gas.duck");

          var _actionConstants = require("../../store/actionConstants");

          var _tokenUtil = require("../../helpers/utils/token-util");

          var _util = require("../../helpers/utils/util");

          var _metamask = require("../metamask/metamask");

          var _ens = require("../ens");

          var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

          var _transactions = require("../../helpers/utils/transactions.util");

          var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../helpers/utils/optimism/fetchEstimatedL1Fee"));

          var _common = require("../../helpers/constants/common");

          var _transaction = require("../../../shared/constants/transaction");

          var _errorKeys = require("../../helpers/constants/error-keys");

          var _stringUtils = require("../../../shared/modules/string-utils");

          var _confirmTx = require("../../helpers/utils/confirm-tx.util");

          var _transaction2 = require("../../../shared/modules/transaction.utils");

          var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");

          var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

          var _helpers = require("./helpers");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          // typedef import statements

          /**
           * @typedef {(
           *  __import__('immer/dist/internal').WritableDraft<SendState>
           * )} SendStateDraft
           * @typedef {(
           *  __import__('../../../shared/constants/transaction').AssetTypesString
           * )} AssetTypesString
           * @typedef {(
           *  __import__( '../../helpers/constants/common').TokenStandardStrings
           * )} TokenStandardStrings
           * @typedef {(
           *  __import__( '../../../shared/constants/tokens').TokenDetails
           * )} TokenDetails
           * @typedef {(
           *  __import__('../../../shared/constants/transaction').TransactionTypeString
           * )} TransactionTypeString
           * @typedef {(
           *  __import__('@metamask/controllers').LegacyGasPriceEstimate
           * )} LegacyGasPriceEstimate
           * @typedef {(
           *  __import__('@metamask/controllers').GasFeeEstimates
           * )} GasFeeEstimates
           * @typedef {(
           *  __import__('@metamask/controllers').EthGasPriceEstimate
           * )} EthGasPriceEstimate
           * @typedef {(
           *  __import__('@metamask/controllers').GasEstimateType
           * )} GasEstimateType
           * @typedef {(
           *  __import__('redux').AnyAction
           * )} AnyAction
           */

          /**
           * @template R - Return type of the async function
           * @typedef {(
           *  __import__('redux-thunk').ThunkAction<R, MetaMaskState, unknown, AnyAction>
           * )} ThunkAction<R>
           */

          /**
           * This type will take a typical constant string mapped object and turn it into
           * a union type of the values.
           *
           * @template O - The object to make strings out of
           * @typedef {O[keyof O]} MapValuesToUnion<O>
           */

          /**
           * @typedef {object} SendStateStages
           * @property {'ADD_RECIPIENT'} ADD_RECIPIENT - The user is selecting which
           *  address to send an asset to.
           * @property {'DRAFT'} DRAFT - The send form is shown for a transaction yet to
           *  be sent to the Transaction Controller.
           * @property {'EDIT'} EDIT - The send form is shown for a transaction already
           *  submitted to the Transaction Controller but not yet confirmed. This happens
           *  when a confirmation is shown for a transaction and the 'edit' button in the
           *  header is clicked.
           * @property {'INACTIVE'} INACTIVE - The send state is idle, and hasn't yet
           *  fetched required data for gasPrice and gasLimit estimations, etc.
           */

          /**
           * The Stages that the send slice can be in
           *
           * @type {SendStateStages}
           */
          const SEND_STAGES = {
            ADD_RECIPIENT: 'ADD_RECIPIENT',
            DRAFT: 'DRAFT',
            EDIT: 'EDIT',
            INACTIVE: 'INACTIVE'
          };
          /**
           * @typedef {object} DraftTxStatus
           * @property {'INVALID'} INVALID - The transaction is invalid and cannot be
           *  submitted. There are a number of cases that would result in an invalid
           *  send state:
           *  1. The recipient is not yet defined
           *  2. The amount + gasTotal is greater than the user's balance when sending
           *     native currency
           *  3. The gasTotal is greater than the user's *native* balance
           *  4. The amount of sent asset is greater than the user's *asset* balance
           *  5. Gas price estimates failed to load entirely
           *  6. The gasLimit is less than 21000 (0x5208)
           * @property {'VALID'} VALID - The transaction is valid and can be submitted.
           */

          /**
           * The status of the send slice
           *
           * @type {DraftTxStatus}
           */

          exports.SEND_STAGES = SEND_STAGES;
          const SEND_STATUSES = {
            INVALID: 'INVALID',
            VALID: 'VALID'
          };
          /**
           * @typedef {object} SendStateGasModes
           * @property {'BASIC'} BASIC - Shows the basic estimate slow/avg/fast buttons
           *  when on mainnet and the metaswaps API request is successful.
           * @property {'CUSTOM'} CUSTOM - Shows GasFeeDisplay component that is a read
           *  only display of the values the user has set in the advanced gas modal
           *  (stored in the gas duck under the customData key).
           * @property {'INLINE'} INLINE - Shows inline gasLimit/gasPrice fields when on
           *  any other network or metaswaps API fails and we use eth_gasPrice.
           */

          /**
           * Controls what is displayed in the send-gas-row component.
           *
           * @type {SendStateGasModes}
           */

          exports.SEND_STATUSES = SEND_STATUSES;
          const GAS_INPUT_MODES = {
            BASIC: 'BASIC',
            CUSTOM: 'CUSTOM',
            INLINE: 'INLINE'
          };
          /**
           * @typedef {object} SendStateAmountModes
           * @property {'INPUT'} INPUT - the user provides the amount by typing in the
           *  field.
           * @property {'MAX'} MAX - The user selects the MAX button and amount is
           *  calculated based on balance - (amount + gasTotal).
           */

          /**
           * The modes that the amount field can be set by
           *
           * @type {SendStateAmountModes}
           */

          exports.GAS_INPUT_MODES = GAS_INPUT_MODES;
          const AMOUNT_MODES = {
            INPUT: 'INPUT',
            MAX: 'MAX'
          };
          /**
           * @typedef {object} SendStateRecipientModes
           * @property {'CONTACT_LIST'} CONTACT_LIST - The user is displayed a list of
           *  their contacts and addresses they have recently send to.
           * @property {'MY_ACCOUNTS'} MY_ACCOUNTS - the user is displayed a list of
           *  their own accounts to send to.
           */

          /**
           * The type of recipient list that is displayed to user
           *
           * @type {SendStateRecipientModes}
           */

          exports.AMOUNT_MODES = AMOUNT_MODES;
          const RECIPIENT_SEARCH_MODES = {
            CONTACT_LIST: 'CONTACT_LIST',
            MY_ACCOUNTS: 'MY_ACCOUNTS'
          };
          /**
           * @typedef {object} Account
           * @property {string} address - The hex address of the account.
           * @property {string} balance - Hex string representing the native asset
           *  balance of the account the transaction will be sent from.
           */

          /**
           * @typedef {object} Amount
           * @property {string} [error] - Error to display for the amount field.
           * @property {string} value - A hex string representing the amount of the
           *  selected currency to send.
           */

          /**
           * @typedef {object} Asset
           * @property {string} balance - A hex string representing the balance
           *  that the user holds of the asset that they are attempting to send.
           * @property {TokenDetails} [details] - An object that describes the
           *  selected asset in the case that the user is sending a token or collectibe.
           *  Will be null when asset.type is 'NATIVE'.
           * @property {string} [error] - Error to display when there is an issue
           *  with the asset.
           * @property {AssetTypesString} type - The type of asset that the user
           *  is attempting to send. Defaults to 'NATIVE' which represents the native
           *  asset of the chain. Can also be 'TOKEN' or 'COLLECTIBLE'.
           */

          /**
           * @typedef {object} GasFees
           * @property {string} [error] - error to display for gas fields.
           * @property {string} gasLimit - maximum gas needed for tx.
           * @property {string} gasPrice - price in wei to pay per gas.
           * @property {string} gasTotal - maximum total price in wei to pay.
           * @property {string} maxFeePerGas - Maximum price in wei to pay per gas.
           * @property {string} maxPriorityFeePerGas - Maximum priority fee in wei to pay
           *  per gas.
           */

          /**
           * An object that describes the intended recipient of a transaction.
           *
           * @typedef {object} Recipient
           * @property {string} address - The fully qualified address of the recipient.
           *  This is set after the recipient.userInput is validated, the userInput field
           *  is quickly updated to avoid delay between keystrokes and seeing the input
           *  field updated. After a debounce the address typed is validated and then the
           *  address field is updated. The address field is also set when the user
           *  selects a contact or account from the list, or an ENS resolution when
           *  typing ENS names.
           * @property {string} [error] - Error to display on the address field.
           * @property {string} nickname - The nickname that the user has added to their
           *  address book for the recipient.address.
           * @property {string} [warning] - Warning to display on the address field.
           */

          /**
           * @typedef {object} DraftTransaction
           * @property {Amount} amount - An object containing information about the
           *  amount of currency to send.
           * @property {Asset} asset - An object that describes the asset that the user
           *  has selected to send.
           * @property {Account} [fromAccount] - The send flow is usually only relative to
           *  the currently selected account. When editing a transaction, however, the
           *  account may differ. In that case, the details of that account will be
           *  stored in this object within the draftTransaction.
           * @property {GasFees} gas - Details about the current gas settings
           * @property {Array<{event: string, timestamp: number}>} history - An array of
           *  entries that describe the user's journey through the send flow. This is
           *  sent to the controller for attaching to state logs for troubleshooting and
           *  support.
           * @property {string} [id] - If the transaction has already been added to the
           *  TransactionController this field will be populated with its id from the
           *  TransactionController state. This is required to be able to update the
           *  transaction in the controller.
           * @property {Recipient} recipient - An object that describes the intended
           *  recipient of the transaction.
           * @property {MapValuesToUnion<DraftTxStatus>} status - Describes the
           *  validity of the draft transaction, which will be either 'VALID' or
           *  'INVALID', depending on our ability to generate a valid txParams object for
           *  submission.
           * @property {string} transactionType - Determines type of transaction being
           *  sent, defaulted to 0x0 (legacy).
           * @property {string} [userInputHexData] - When a user has enabled custom hex
           *  data field in advanced options, they can supply data to the field which is
           *  stored under this key.
           */

          /**
           * @type {DraftTransaction}
           */

          exports.RECIPIENT_SEARCH_MODES = RECIPIENT_SEARCH_MODES;
          const draftTransactionInitialState = {
            amount: {
              error: null,
              value: '0x0'
            },
            asset: {
              balance: '0x0',
              details: null,
              error: null,
              type: _transaction.ASSET_TYPES.NATIVE
            },
            fromAccount: null,
            gas: {
              error: null,
              gasLimit: '0x0',
              gasPrice: '0x0',
              gasTotal: '0x0',
              maxFeePerGas: '0x0',
              maxPriorityFeePerGas: '0x0',
              wasManuallyEdited: false
            },
            history: [],
            id: null,
            recipient: {
              address: '',
              error: null,
              nickname: '',
              warning: null,
              type: '',
              recipientWarningAcknowledged: false
            },
            status: SEND_STATUSES.VALID,
            transactionType: _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY,
            userInputHexData: null
          };
          /**
           * Describes the state tree of the send slice
           *
           * @typedef {object} SendState
           * @property {MapValuesToUnion<SendStateAmountModes>} amountMode - Describe
           *  whether the user has manually input an amount or if they have selected max
           *  to send the maximum amount of the selected currency.
           * @property {string} currentTransactionUUID - The UUID of the transaction
           *  currently being modified by the send flow. This UUID is generated upon
           *  initialization of the send flow, any previous UUIDs are discarded at
           *  clean up AND during initialization. When a transaction is edited a new UUID
           *  is generated for it and the state of that transaction is copied into a new
           *  entry in the draftTransactions object.
           * @property {Object<string, DraftTransaction>} draftTransactions - An object keyed
           *  by UUID with draftTransactions as the values.
           * @property {boolean} eip1559support - tracks whether the current network
           *  supports EIP 1559 transactions.
           * @property {boolean} gasEstimateIsLoading - Indicates whether the gas
           *  estimate is loading.
           * @property {string} [gasEstimatePollToken] - String token identifying a
           *  listener for polling on the gasFeeController
           * @property {boolean} gasIsSetInModal - true if the user set custom gas in the
           *  custom gas modal
           * @property {string} gasLimitMinimum - minimum supported gasLimit.
           * @property {string} gasPriceEstimate - Expected price in wei necessary to
           *  pay per gas used for a transaction to be included in a reasonable timeframe.
           *  Comes from the GasFeeController.
           * @property {string} gasTotalForLayer1 -  Layer 1 gas fee total on multi-layer
           *  fee networks
           * @property {string} recipientInput - The user input of the recipient
           *  which is updated quickly to avoid delays in the UI reflecting manual entry
           *  of addresses.
           * @property {MapValuesToUnion<SendStateRecipientModes>} recipientMode -
           *  Describes which list of recipients the user is shown on the add recipient
           *  screen. When this key is set to 'MY_ACCOUNTS' the user is shown the list of
           *  accounts they own. When it is 'CONTACT_LIST' the user is shown the list of
           *  contacts they have saved in MetaMask and any addresses they have recently
           *  sent to.
           * @property {Account} selectedAccount - The currently selected account in
           *  MetaMask. Native balance and address will be pulled from this account if a
           *  fromAccount is not specified in the draftTransaction object. During an edit
           *  the fromAccount is specified.
           * @property {MapValuesToUnion<SendStateStages>} stage - The stage of the
           *  send flow that the user has progressed to. Defaults to 'INACTIVE' which
           *  results in the send screen not being shown.
           */

          /**
           * @type {SendState}
           */

          exports.draftTransactionInitialState = draftTransactionInitialState;
          const initialState = {
            amountMode: AMOUNT_MODES.INPUT,
            currentTransactionUUID: null,
            draftTransactions: {},
            eip1559support: false,
            gasEstimateIsLoading: true,
            gasEstimatePollToken: null,
            gasIsSetInModal: false,
            gasPriceEstimate: '0x0',
            gasLimitMinimum: _gas.GAS_LIMITS.SIMPLE,
            gasTotalForLayer1: '0x0',
            recipientMode: RECIPIENT_SEARCH_MODES.CONTACT_LIST,
            recipientInput: '',
            selectedAccount: {
              address: null,
              balance: '0x0'
            },
            stage: SEND_STAGES.INACTIVE
          };
          /**
           * TODO: We really need to start creating the metamask state type, and the
           * entire state tree of redux. Would be *extremely* valuable in future
           * typescript conversions. The metamask key is typed as an object on purpose
           * here because I cannot go so far in this work as to type that entire object.
           *
           * @typedef {object} MetaMaskState
           * @property {SendState} send - The state of the send flow.
           * @property {object} metamask - The state of the metamask store.
           */

          exports.initialState = initialState;
          const name = 'send'; // After modification of specific fields in specific circumstances we must
          // recompute the gasLimit estimate to be as accurate as possible. the cases
          // that necessitate this logic are listed below:
          // 1. when the amount sent changes when sending a token due to the amount being
          //    part of the hex encoded data property of the transaction.
          // 2. when updating the data property while sending NATIVE currency (ex: ETH)
          //    because the data parameter defines function calls that the EVM will have
          //    to execute which is where a large chunk of gas is potentially consumed.
          // 3. when the recipient changes while sending a token due to the recipient's
          //    address being included in the hex encoded data property of the
          //    transaction
          // 4. when the asset being sent changes due to the contract address and details
          //    of the token being included in the hex encoded data property of the
          //    transaction. If switching to NATIVE currency (ex: ETH), the gasLimit will
          //    change due to hex data being removed (unless supplied by user).
          // This method computes the gasLimit estimate which is written to state in an
          // action handler in extraReducers.

          const computeEstimatedGasLimit = (0, _toolkit.createAsyncThunk)('send/computeEstimatedGasLimit', async (_, thunkApi) => {
            var _transaction$dappSugg;

            const state = thunkApi.getState();
            const {
              send,
              metamask
            } = state;
            const draftTransaction = send.draftTransactions[send.currentTransactionUUID];
            const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
            const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state);
            const transaction = unapprovedTxs[draftTransaction.id];
            const isNonStandardEthChain = (0, _selectors.getIsNonStandardEthChain)(state);
            const chainId = (0, _selectors.getCurrentChainId)(state);
            let gasTotalForLayer1;

            if (isMultiLayerFeeNetwork) {
              var _draftTransaction$rec;

              gasTotalForLayer1 = await (0, _fetchEstimatedL1Fee.default)(global.eth, {
                txParams: {
                  gasPrice: draftTransaction.gas.gasPrice,
                  gas: draftTransaction.gas.gasLimit,
                  to: (_draftTransaction$rec = draftTransaction.recipient.address) === null || _draftTransaction$rec === void 0 ? void 0 : _draftTransaction$rec.toLowerCase(),
                  value: send.amountMode === AMOUNT_MODES.MAX ? send.selectedAccount.balance : draftTransaction.amount.value,
                  from: send.selectedAccount.address,
                  data: draftTransaction.userInputHexData,
                  type: '0x0'
                }
              });
            }

            if (send.stage !== SEND_STAGES.EDIT || !((_transaction$dappSugg = transaction.dappSuggestedGasFees) !== null && _transaction$dappSugg !== void 0 && _transaction$dappSugg.gas) || !transaction.userEditedGasLimit) {
              var _draftTransaction$rec2;

              const gasLimit = await (0, _helpers.estimateGasLimitForSend)({
                gasPrice: draftTransaction.gas.gasPrice,
                blockGasLimit: metamask.currentBlockGasLimit,
                selectedAddress: metamask.selectedAddress,
                sendToken: draftTransaction.asset.details,
                to: (_draftTransaction$rec2 = draftTransaction.recipient.address) === null || _draftTransaction$rec2 === void 0 ? void 0 : _draftTransaction$rec2.toLowerCase(),
                value: draftTransaction.amount.value,
                data: draftTransaction.userInputHexData,
                isNonStandardEthChain,
                chainId,
                gasLimit: draftTransaction.gas.gasLimit
              });
              await thunkApi.dispatch((0, _gas2.setCustomGasLimit)(gasLimit));
              return {
                gasLimit,
                gasTotalForLayer1
              };
            }

            return null;
          });
          /**
           * @typedef {object} Asset
           * @property {AssetTypesString} type - The type of asset that the user
           *  is attempting to send. Defaults to 'NATIVE' which represents the native
           *  asset of the chain. Can also be 'TOKEN' or 'COLLECTIBLE'.
           * @property {string} balance - A hex string representing the balance
           *  that the user holds of the asset that they are attempting to send.
           * @property {TokenDetails} [details] - An object that describes the
           *  selected asset in the case that the user is sending a token or collectibe.
           *  Will be null when asset.type is 'NATIVE'.
           * @property {string} [error] - Error to display when there is an issue
           *  with the asset.
           */

          /**
           * Responsible for initializing required state for the send slice.
           * This method is dispatched from the send page in the componentDidMount
           * method. It is also dispatched anytime the network changes to ensure that
           * the slice remains valid with changing token and account balances. To do so
           * it keys into state to get necessary values and computes a starting point for
           * the send slice. It returns the values that might change from this action and
           * those values are written to the slice in the `initializeSendState.fulfilled`
           * action handler.
           */

          exports.computeEstimatedGasLimit = computeEstimatedGasLimit;
          const initializeSendState = (0, _toolkit.createAsyncThunk)('send/initializeSendState', async ({
            chainHasChanged = false
          } = {}, thunkApi) => {
            /**
             * @typedef {object} ReduxState
             * @property {object} metamask - Half baked type for the MetaMask object
             * @property {SendState} send - the send state
             */

            /**
             * @type {ReduxState}
             */
            const state = thunkApi.getState();
            const isNonStandardEthChain = (0, _selectors.getIsNonStandardEthChain)(state);
            const chainId = (0, _selectors.getCurrentChainId)(state);
            const eip1559support = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
            const account = (0, _selectors.getSelectedAccount)(state);
            const {
              send: sendState,
              metamask
            } = state;
            const draftTransaction = sendState.draftTransactions[sendState.currentTransactionUUID]; // If the draft transaction is not present, then this action has been
            // dispatched out of sync with the intended flow. This is not always a bug.
            // For instance, in the actions.js file we dispatch this action anytime the
            // chain changes.

            if (!draftTransaction) {
              return thunkApi.rejectWithValue('draftTransaction not found, possibly not on send flow');
            } // Default gasPrice to 1 gwei if all estimation fails, this is only used
            // for gasLimit estimation and won't be set directly in state. Instead, we
            // will return the gasFeeEstimates and gasEstimateType so that the reducer
            // can set the appropriate gas fees in state.


            let gasPrice = sendState.stage === SEND_STAGES.EDIT ? draftTransaction.gas.gasPrice : '0x1';
            let gasEstimatePollToken = null; // Instruct the background process that polling for gas prices should begin

            gasEstimatePollToken = await (0, _actions.getGasFeeEstimatesAndStartPolling)();
            (0, _actions.addPollingTokenToAppState)(gasEstimatePollToken);
            const {
              metamask: {
                gasFeeEstimates,
                gasEstimateType
              }
            } = thunkApi.getState();

            if (sendState.stage !== SEND_STAGES.EDIT) {
              // Because we are only interested in getting a gasLimit estimation we only
              // need to worry about gasPrice. So we use maxFeePerGas as gasPrice if we
              // have a fee market estimation.
              if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY) {
                gasPrice = (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium);
              } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
                gasPrice = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice);
              } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET) {
                gasPrice = (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxFeePerGas);
              } else {
                gasPrice = gasFeeEstimates.gasPrice ? (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice) : '0x0';
              }
            } // Set a basic gasLimit in the event that other estimation fails


            let {
              gasLimit
            } = draftTransaction.gas;

            if (gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.NONE && sendState.stage !== SEND_STAGES.EDIT && draftTransaction.recipient.address) {
              var _draftTransaction$fro, _draftTransaction$fro2;

              gasLimit = draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN || draftTransaction.asset.type === _transaction.ASSET_TYPES.COLLECTIBLE ? _gas.GAS_LIMITS.BASE_TOKEN_ESTIMATE : _gas.GAS_LIMITS.SIMPLE; // Run our estimateGasLimit logic to get a more accurate estimation of
              // required gas. If this value isn't nullish, set it as the new gasLimit

              const estimatedGasLimit = await (0, _helpers.estimateGasLimitForSend)({
                gasPrice,
                blockGasLimit: metamask.currentBlockGasLimit,
                selectedAddress: (_draftTransaction$fro = (_draftTransaction$fro2 = draftTransaction.fromAccount) === null || _draftTransaction$fro2 === void 0 ? void 0 : _draftTransaction$fro2.address) !== null && _draftTransaction$fro !== void 0 ? _draftTransaction$fro : sendState.selectedAccount.address,
                sendToken: draftTransaction.asset.details,
                to: draftTransaction.recipient.address.toLowerCase(),
                value: draftTransaction.amount.value,
                data: draftTransaction.userInputHexData,
                isNonStandardEthChain,
                chainId
              });
              gasLimit = estimatedGasLimit || gasLimit;
            } // We have to keep the gas slice in sync with the send slice state
            // so that it'll be initialized correctly if the gas modal is opened.


            await thunkApi.dispatch((0, _gas2.setCustomGasLimit)(gasLimit)); // There may be a case where the send has been canceled by the user while
            // the gas estimate is being computed. So we check again to make sure that
            // a currentTransactionUUID exists and matches the previous tx.

            const newState = thunkApi.getState();

            if (newState.send.currentTransactionUUID !== sendState.currentTransactionUUID) {
              return thunkApi.rejectWithValue(`draftTransaction changed during initialization.
        A new initializeSendState action must be dispatched.`);
            }

            return {
              account,
              chainId: (0, _selectors.getCurrentChainId)(state),
              tokens: (0, _metamask.getTokens)(state),
              chainHasChanged,
              gasFeeEstimates,
              gasEstimateType,
              gasLimit,
              gasTotal: (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(gasLimit, gasPrice)),
              gasEstimatePollToken,
              eip1559support,
              useTokenDetection: (0, _selectors.getUseTokenDetection)(state),
              tokenAddressList: Object.keys((0, _selectors.getTokenList)(state))
            };
          }); // Action Payload Typedefs

          /**
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<string>
           * )} SimpleStringPayload
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<MapValuesToUnion<SendStateAmountModes>>
           * )} SendStateAmountModePayload
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction['asset']>
           * )} UpdateAssetPayload
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<Partial<
           *   Pick<DraftTransaction['recipient'], 'address' | 'nickname'>>
           *  >
           * )} updateRecipientPayload
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<SendState['recipientMode']>
           * )} UpdateRecipientModePayload
           */

          /**
           * @typedef {object} GasFeeUpdateParams
           * @property {TransactionTypeString} transactionType - The transaction type
           * @property {string} [maxFeePerGas] - The maximum amount in hex wei to pay
           *  per gas on a FEE_MARKET transaction.
           * @property {string} [maxPriorityFeePerGas] - The maximum amount in hex
           *  wei to pay per gas as an incentive to miners on a FEE_MARKET
           *  transaction.
           * @property {string} [gasPrice] - The amount in hex wei to pay per gas on
           *  a LEGACY transaction.
           * @property {boolean} [isAutomaticUpdate] - true if the update is the
           *  result of a gas estimate update from the controller.
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<GasFeeUpdateParams>
           * )} GasFeeUpdatePayload
           */

          /**
           * @typedef {object} GasEstimateUpdateParams
           * @property {GasEstimateType} gasEstimateType - The type of gas estimation
           *  provided by the controller.
           * @property {(
           *  EthGasPriceEstimate | LegacyGasPriceEstimate | GasFeeEstimates
           * )} gasFeeEstimates - The gas fee estimates provided by the controller.
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<GasEstimateUpdateParams>
           * )} GasEstimateUpdatePayload
           */

          /**
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction['asset']>
           * )} UpdateAssetPayload
           * @typedef {(
           *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction>
           * )} DraftTransactionPayload
           */

          exports.initializeSendState = initializeSendState;
          const slice = (0, _toolkit.createSlice)({
            name,
            initialState,
            reducers: {
              /**
               * Adds a new draft transaction to state, first generating a new UUID for
               * the transaction and setting that as the currentTransactionUUID. If the
               * draft has an id property set, the stage is set to EDIT.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {DraftTransactionPayload} action - An action with payload that is
               *  a new draft transaction that will be added to state.
               * @returns {void}
               */
              addNewDraft: (state, action) => {
                state.currentTransactionUUID = (0, _uuid.v4)();
                state.draftTransactions[state.currentTransactionUUID] = action.payload;

                if (action.payload.id) {
                  state.stage = SEND_STAGES.EDIT;
                } else {
                  state.stage = SEND_STAGES.ADD_RECIPIENT;
                }
              },

              /**
               * Adds an entry, with timestamp, to the draftTransaction history.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - An action with payload that is
               *  a string to be added to the history of the draftTransaction
               * @returns {void}
               */
              addHistoryEntry: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  draftTransaction.history.push({
                    entry: action.payload,
                    timestamp: Date.now()
                  });
                }
              },

              /**
               * gasTotal is computed based on gasPrice and gasLimit and set in state
               * recomputes the maximum amount if the current amount mode is 'MAX' and
               * sending the native token. ERC20 assets max amount is unaffected by
               * gasTotal so does not need to be recomputed. Finally, validates the gas
               * field and send state.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              calculateGasTotal: state => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID]; // use maxFeePerGas as the multiplier if working with a FEE_MARKET transaction
                // otherwise use gasPrice

                if (draftTransaction.transactionType === _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET) {
                  draftTransaction.gas.gasTotal = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(draftTransaction.gas.gasLimit, draftTransaction.gas.maxFeePerGas));
                } else {
                  draftTransaction.gas.gasTotal = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(draftTransaction.gas.gasLimit, draftTransaction.gas.gasPrice));
                }

                if (state.amountMode === AMOUNT_MODES.MAX && draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE) {
                  slice.caseReducers.updateAmountToMax(state);
                }

                slice.caseReducers.validateAmountField(state);
                slice.caseReducers.validateGasField(state); // validate send state

                slice.caseReducers.validateSendState(state);
              },

              /**
               * Clears all drafts from send state and drops the currentTransactionUUID.
               * This is an important first step before adding a new draft transaction to
               * avoid possible collision.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              clearPreviousDrafts: state => {
                state.currentTransactionUUID = null;
                state.draftTransactions = {};
              },

              /**
               * Clears the send state by setting it to the initial value
               *
               * @returns {SendState}
               */
              resetSendState: () => initialState,

              /**
               * sets the amount mode to the provided value as long as it is one of the
               * supported modes (MAX|INPUT)
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SendStateAmountModePayload} action - The amount mode
               *  to set the state to.
               * @returns {void}
               */
              updateAmountMode: (state, action) => {
                if (Object.values(AMOUNT_MODES).includes(action.payload)) {
                  state.amountMode = action.payload;
                }
              },

              /**
               * computes the maximum amount of asset that can be sent and then calls
               * the updateSendAmount action above with the computed value, which will
               * revalidate the field and form.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              updateAmountToMax: state => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                let amount = '0x0';

                if (draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN) {
                  var _draftTransaction$ass, _draftTransaction$ass2;

                  const decimals = (_draftTransaction$ass = (_draftTransaction$ass2 = draftTransaction.asset.details) === null || _draftTransaction$ass2 === void 0 ? void 0 : _draftTransaction$ass2.decimals) !== null && _draftTransaction$ass !== void 0 ? _draftTransaction$ass : 0;
                  const multiplier = Math.pow(10, Number(decimals));
                  amount = (0, _conversion.multiplyCurrencies)(draftTransaction.asset.balance, multiplier, {
                    toNumericBase: 'hex',
                    multiplicandBase: 16,
                    multiplierBase: 10
                  });
                } else {
                  const _gasTotal = (0, _transactions.sumHexes)(draftTransaction.gas.gasTotal || '0x0', state.gasTotalForLayer1 || '0x0');

                  amount = (0, _conversion.subtractCurrencies)((0, _ethereumjsUtil.addHexPrefix)(draftTransaction.asset.balance), (0, _ethereumjsUtil.addHexPrefix)(_gasTotal), {
                    toNumericBase: 'hex',
                    aBase: 16,
                    bBase: 16
                  });
                }

                slice.caseReducers.updateSendAmount(state, {
                  payload: amount
                });
              },

              /**
               * Updates the currently selected asset
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {UpdateAssetPayload} action - The asset to set in the
               *  draftTransaction.
               * @returns {void}
               */
              updateAsset: (state, action) => {
                const {
                  asset,
                  initialAssetSet
                } = action.payload;
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.asset.type = asset.type;
                draftTransaction.asset.balance = asset.balance;
                draftTransaction.asset.error = asset.error;

                if (draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN || draftTransaction.asset.type === _transaction.ASSET_TYPES.COLLECTIBLE) {
                  draftTransaction.asset.details = asset.details;
                } else {
                  // clear the details object when sending native currency
                  draftTransaction.asset.details = null;

                  if (draftTransaction.recipient.error === _send.CONTRACT_ADDRESS_ERROR) {
                    // Errors related to sending tokens to their own contract address
                    // are no longer valid when sending native currency.
                    draftTransaction.recipient.error = null;
                  }
                } // if amount mode is MAX update amount to max of new asset, otherwise set
                // to zero. This will revalidate the send amount field.


                if (state.amountMode === AMOUNT_MODES.MAX) {
                  slice.caseReducers.updateAmountToMax(state);
                } else if (initialAssetSet === false) {
                  slice.caseReducers.updateSendAmount(state, {
                    payload: '0x0'
                  });
                } // validate send state


                slice.caseReducers.validateSendState(state);
              },

              /**
               * Sets the appropriate gas fees in state after receiving new estimates.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {GasEstimateUpdatePayload)} action - The gas fee update payload
               * @returns {void}
               */
              updateGasFeeEstimates: (state, action) => {
                const {
                  gasFeeEstimates,
                  gasEstimateType
                } = action.payload;
                let gasPriceEstimate = '0x0';

                switch (gasEstimateType) {
                  case _gas.GAS_ESTIMATE_TYPES.FEE_MARKET:
                    slice.caseReducers.updateGasFees(state, {
                      payload: {
                        transactionType: _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET,
                        maxFeePerGas: (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxFeePerGas),
                        maxPriorityFeePerGas: (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxPriorityFeePerGas)
                      }
                    });
                    break;

                  case _gas.GAS_ESTIMATE_TYPES.LEGACY:
                    gasPriceEstimate = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.medium);
                    slice.caseReducers.updateGasFees(state, {
                      payload: {
                        gasPrice: gasPriceEstimate,
                        type: _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY,
                        isAutomaticUpdate: true
                      }
                    });
                    break;

                  case _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE:
                    gasPriceEstimate = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice);
                    slice.caseReducers.updateGasFees(state, {
                      payload: {
                        gasPrice: (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice),
                        type: _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY,
                        isAutomaticUpdate: true
                      }
                    });
                    break;

                  case _gas.GAS_ESTIMATE_TYPES.NONE:
                  default:
                    break;
                } // Record the latest gasPriceEstimate for future comparisons


                state.gasPriceEstimate = (0, _ethereumjsUtil.addHexPrefix)(gasPriceEstimate);
              },

              /**
               * Sets the appropriate gas fees in state and determines and sets the
               * appropriate transactionType based on gas fee fields received.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {GasFeeUpdatePayload} action - The gas fees to update with
               * @returns {void}
               */
              updateGasFees: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  if (action.payload.transactionType === _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET) {
                    draftTransaction.gas.maxFeePerGas = (0, _ethereumjsUtil.addHexPrefix)(action.payload.maxFeePerGas);
                    draftTransaction.gas.maxPriorityFeePerGas = (0, _ethereumjsUtil.addHexPrefix)(action.payload.maxPriorityFeePerGas);
                    draftTransaction.transactionType = _transaction.TRANSACTION_ENVELOPE_TYPES.FEE_MARKET;
                  } else {
                    if (action.payload.manuallyEdited) {
                      draftTransaction.gas.wasManuallyEdited = true;
                    } // Update the gas price if it has not been manually edited,
                    // or if this current action is a manual edit.


                    if (!draftTransaction.gas.wasManuallyEdited || action.payload.manuallyEdited) {
                      draftTransaction.gas.gasPrice = (0, _ethereumjsUtil.addHexPrefix)(action.payload.gasPrice);
                    }

                    draftTransaction.transactionType = _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY;
                  }

                  slice.caseReducers.calculateGasTotal(state);
                }
              },

              /**
               * sets the provided gasLimit in state and then recomputes the gasTotal.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - The
               *  gasLimit in hex to set in state.
               * @returns {void}
               */
              updateGasLimit: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  draftTransaction.gas.gasLimit = (0, _ethereumjsUtil.addHexPrefix)(action.payload);
                  slice.caseReducers.calculateGasTotal(state);
                }
              },

              /**
               * sets the layer 1 fees total (for a multi-layer fee network)
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - the
               *  gasTotalForLayer1 to set in hex wei.
               * @returns {void}
               */
              updateLayer1Fees: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                state.gasTotalForLayer1 = action.payload;

                if (state.amountMode === AMOUNT_MODES.MAX && draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE) {
                  slice.caseReducers.updateAmountToMax(state);
                }
              },

              /**
               * Updates the recipient of the draftTransaction
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {updateRecipientPayload} action - The recipient to set in the
               *  draftTransaction.
               * @returns {void}
               */
              updateRecipient: (state, action) => {
                var _action$payload$addre, _action$payload$nickn;

                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.recipient.error = null;
                state.recipientInput = '';
                draftTransaction.recipient.address = (_action$payload$addre = action.payload.address) !== null && _action$payload$addre !== void 0 ? _action$payload$addre : '';
                draftTransaction.recipient.nickname = (_action$payload$nickn = action.payload.nickname) !== null && _action$payload$nickn !== void 0 ? _action$payload$nickn : '';

                if (draftTransaction.recipient.address === '') {
                  // If address is null we are clearing the recipient and must return
                  // to the ADD_RECIPIENT stage.
                  state.stage = SEND_STAGES.ADD_RECIPIENT;
                } else {
                  // if an address is provided and an id exists, we progress to the EDIT
                  // stage, otherwise we progress to the DRAFT stage. We also reset the
                  // search mode for recipient search.
                  state.stage = draftTransaction.id === null ? SEND_STAGES.DRAFT : SEND_STAGES.EDIT;
                  state.recipientMode = RECIPIENT_SEARCH_MODES.CONTACT_LIST;
                } // validate send state


                slice.caseReducers.validateSendState(state);
              },

              /**
               * Clears the user input and changes the recipient search mode to the
               * specified value
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {UpdateRecipientModePayload} action - The mode to set the
               *  recipient search to
               * @returns {void}
               */
              updateRecipientSearchMode: (state, action) => {
                state.recipientInput = '';
                state.recipientMode = action.payload;
              },
              updateRecipientWarning: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.recipient.warning = action.payload;
              },
              updateRecipientType: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.recipient.type = action.payload;
              },
              updateDraftTransactionStatus: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.status = action.payload;
              },
              acknowledgeRecipientWarning: state => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.recipient.recipientWarningAcknowledged = true;
                slice.caseReducers.validateSendState(state);
              },

              /**
               * Updates the value of the recipientInput key with what the user has
               * typed into the recipient input field in the UI.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - the value the user has typed into
               *  the recipient field.
               * @returns {void}
               */
              updateRecipientUserInput: (state, action) => {
                // Update the value in state to match what the user is typing into the
                // input field
                state.recipientInput = action.payload;
              },

              /**
               * update current amount.value in state and run post update validation of
               * the amount field and the send state.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - The hex string to be set as the
               *  amount value.
               * @returns {void}
               */
              updateSendAmount: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.amount.value = (0, _ethereumjsUtil.addHexPrefix)(action.payload); // Once amount has changed, validate the field

                slice.caseReducers.validateAmountField(state);

                if (draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE) {
                  // if sending the native asset the amount being sent will impact the
                  // gas field as well because the gas validation takes into
                  // consideration the available balance minus amount sent before
                  // checking if there is enough left to cover the gas fee.
                  slice.caseReducers.validateGasField(state);
                } // validate send state


                slice.caseReducers.validateSendState(state);
              },

              /**
               * updates the userInputHexData state key
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @param {SimpleStringPayload} action - The hex string to be set as the
               *  userInputHexData value.
               * @returns {void}
               */
              updateUserInputHexData: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                draftTransaction.userInputHexData = action.payload;
              },

              /**
               * Updates the gasIsSetInModal property to true which results in showing
               * the gas fees from the custom gas modal in the send page.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              useCustomGas: state => {
                state.gasIsSetInModal = true;
              },

              /**
               * Updates the gasIsSetInModal property to false which results in showing
               * the default gas price/limit fields in the send page.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              useDefaultGas: state => {
                state.gasIsSetInModal = false;
              },

              /**
               * Checks for the validity of the draftTransactions selected amount to send
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              validateAmountField: state => {
                var _draftTransaction$gas, _draftTransaction$ass3;

                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                switch (true) {
                  // set error to INSUFFICIENT_FUNDS_ERROR if the account balance is lower
                  // than the total price of the transaction inclusive of gas fees.
                  case draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE && !(0, _send2.isBalanceSufficient)({
                    amount: draftTransaction.amount.value,
                    balance: draftTransaction.asset.balance,
                    gasTotal: (_draftTransaction$gas = draftTransaction.gas.gasTotal) !== null && _draftTransaction$gas !== void 0 ? _draftTransaction$gas : '0x0'
                  }):
                    draftTransaction.amount.error = _send.INSUFFICIENT_FUNDS_ERROR;
                    break;
                  // set error to INSUFFICIENT_FUNDS_ERROR if the token balance is lower
                  // than the amount of token the user is attempting to send.

                  case draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN && !(0, _send2.isTokenBalanceSufficient)({
                    tokenBalance: (_draftTransaction$ass3 = draftTransaction.asset.balance) !== null && _draftTransaction$ass3 !== void 0 ? _draftTransaction$ass3 : '0x0',
                    amount: draftTransaction.amount.value,
                    decimals: draftTransaction.asset.details.decimals
                  }):
                    draftTransaction.amount.error = _send.INSUFFICIENT_TOKENS_ERROR;
                    break;
                  // if the amount is negative, set error to NEGATIVE_ETH_ERROR
                  // TODO: change this to NEGATIVE_ERROR and remove the currency bias.

                  case (0, _conversion.conversionGreaterThan)({
                    value: 0,
                    fromNumericBase: 'dec'
                  }, {
                    value: draftTransaction.amount.value,
                    fromNumericBase: 'hex'
                  }):
                    draftTransaction.amount.error = _send.NEGATIVE_ETH_ERROR;
                    break;
                  // If none of the above are true, set error to null

                  default:
                    draftTransaction.amount.error = null;
                }
              },

              /**
               * Checks if the user has enough funds to cover the cost of gas, always
               * uses the native currency and does not take into account the amount
               * being sent. If the user has enough to cover cost of gas but not gas
               * + amount then the error will be displayed on the amount field.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              validateGasField: state => {
                var _draftTransaction$fro3, _draftTransaction$fro4, _draftTransaction$gas2;

                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
                const insufficientFunds = !(0, _send2.isBalanceSufficient)({
                  amount: draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE ? draftTransaction.amount.value : '0x0',
                  balance: (_draftTransaction$fro3 = (_draftTransaction$fro4 = draftTransaction.fromAccount) === null || _draftTransaction$fro4 === void 0 ? void 0 : _draftTransaction$fro4.balance) !== null && _draftTransaction$fro3 !== void 0 ? _draftTransaction$fro3 : state.selectedAccount.balance,
                  gasTotal: (_draftTransaction$gas2 = draftTransaction.gas.gasTotal) !== null && _draftTransaction$gas2 !== void 0 ? _draftTransaction$gas2 : '0x0'
                });
                draftTransaction.gas.error = insufficientFunds ? _send.INSUFFICIENT_FUNDS_ERROR : null;
              },
              validateRecipientUserInput: (state, action) => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  if (state.recipientMode === RECIPIENT_SEARCH_MODES.MY_ACCOUNTS || state.recipientInput === '' || state.recipientInput === null) {
                    draftTransaction.recipient.error = null;
                    draftTransaction.recipient.warning = null;
                  } else {
                    var _draftTransaction$ass4, _draftTransaction$ass5;

                    const {
                      chainId,
                      tokens,
                      tokenAddressList,
                      isProbablyAnAssetContract
                    } = action.payload;

                    if ((0, _hexstringUtils.isBurnAddress)(state.recipientInput) || !(0, _hexstringUtils.isValidHexAddress)(state.recipientInput, {
                      mixedCaseUseChecksum: true
                    }) && !(0, _util.isValidDomainName)(state.recipientInput)) {
                      draftTransaction.recipient.error = (0, _util.isDefaultMetaMaskChain)(chainId) ? _send.INVALID_RECIPIENT_ADDRESS_ERROR : _send.INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR;
                    } else if ((0, _util.isOriginContractAddress)(state.recipientInput, (_draftTransaction$ass4 = draftTransaction.asset) === null || _draftTransaction$ass4 === void 0 ? void 0 : (_draftTransaction$ass5 = _draftTransaction$ass4.details) === null || _draftTransaction$ass5 === void 0 ? void 0 : _draftTransaction$ass5.address)) {
                      draftTransaction.recipient.error = _send.CONTRACT_ADDRESS_ERROR;
                    } else {
                      draftTransaction.recipient.error = null;
                    }

                    if ((0, _hexstringUtils.isValidHexAddress)(state.recipientInput) && (tokenAddressList.find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, state.recipientInput)) || (0, _util.checkExistingAddresses)(state.recipientInput, tokens)) || isProbablyAnAssetContract) {
                      draftTransaction.recipient.warning = _send.KNOWN_RECIPIENT_ADDRESS_WARNING;
                    } else {
                      draftTransaction.recipient.warning = null;
                    }
                  }
                }

                slice.caseReducers.validateSendState(state);
              },

              /**
               * Checks if the draftTransaction is currently valid. The following list of
               * cases from the switch statement in this function describe when the
               * transaction is invalid. Please keep this comment updated.
               *
               * case 1: State is invalid when amount field has an error.
               * case 2: State is invalid when gas field has an error.
               * case 3: State is invalid when asset field has an error.
               * case 4: State is invalid if asset type is a token and the token details
               *  are unknown.
               * case 5: State is invalid if no recipient has been added.
               * case 6: State is invalid if the send state is uninitialized.
               * case 7: State is invalid if gas estimates are loading.
               * case 8: State is invalid if gasLimit is less than the gasLimitMinimum.
               *
               * @param {SendStateDraft} state - A writable draft of the send state to be
               *  updated.
               * @returns {void}
               */
              validateSendState: state => {
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  switch (true) {
                    case Boolean(draftTransaction.amount.error):
                    case Boolean(draftTransaction.gas.error):
                    case Boolean(draftTransaction.asset.error):
                    case draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN && draftTransaction.asset.details === null:
                    case state.stage === SEND_STAGES.ADD_RECIPIENT:
                    case state.stage === SEND_STAGES.INACTIVE:
                    case state.gasEstimateIsLoading:
                    case new _bignumber.default(draftTransaction.gas.gasLimit, 16).lessThan(new _bignumber.default(state.gasLimitMinimum)):
                      draftTransaction.status = SEND_STATUSES.INVALID;
                      break;

                    case draftTransaction.recipient.warning === 'loading':
                    case draftTransaction.recipient.warning === _send.KNOWN_RECIPIENT_ADDRESS_WARNING && draftTransaction.recipient.recipientWarningAcknowledged === false:
                      draftTransaction.status = SEND_STATUSES.INVALID;
                      break;

                    default:
                      draftTransaction.status = SEND_STATUSES.VALID;
                  }
                }
              }
            },
            extraReducers: builder => {
              builder.addCase(_actionConstants.ACCOUNT_CHANGED, (state, action) => {
                // This event occurs when the user's account details update due to
                // background state changes. If the account that is being updated is
                // the current from account on the edit flow we need to update
                // the balance for the account and revalidate the send state.
                if (state.stage === SEND_STAGES.EDIT && action.payload.account) {
                  const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                  if (draftTransaction && draftTransaction.fromAccount && draftTransaction.fromAccount.address === action.payload.account.address) {
                    draftTransaction.fromAccount.balance = action.payload.account.balance; // We need to update the asset balance if the asset is the native
                    // network asset. Once we update the balance we recompute error state.

                    if (draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE) {
                      draftTransaction.asset.balance = action.payload.account.balance;
                    }

                    slice.caseReducers.validateAmountField(state);
                    slice.caseReducers.validateGasField(state);
                    slice.caseReducers.validateSendState(state);
                  }
                }
              }).addCase(_actionConstants.ADDRESS_BOOK_UPDATED, (state, action) => {
                var _addressBook$draftTra;

                // When the address book updates from background state changes we need
                // to check to see if an entry exists for the current address or if the
                // entry changed.
                const {
                  addressBook
                } = action.payload;
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction && (_addressBook$draftTra = addressBook[draftTransaction.recipient.address]) !== null && _addressBook$draftTra !== void 0 && _addressBook$draftTra.name) {
                  draftTransaction.recipient.nickname = addressBook[draftTransaction.recipient.address].name;
                }
              }).addCase(computeEstimatedGasLimit.pending, state => {
                // When we begin to fetch gasLimit we should indicate we are loading
                // a gas estimate.
                state.gasEstimateIsLoading = true;
              }).addCase(computeEstimatedGasLimit.fulfilled, (state, action) => {
                var _action$payload, _action$payload2;

                // When we receive a new gasLimit from the computeEstimatedGasLimit
                // thunk we need to update our gasLimit in the slice. We call into the
                // caseReducer updateGasLimit to tap into the appropriate follow up
                // checks and gasTotal calculation. First set gasEstimateIsLoading to
                // false.
                state.gasEstimateIsLoading = false;

                if ((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.gasLimit) {
                  slice.caseReducers.updateGasLimit(state, {
                    payload: action.payload.gasLimit
                  });
                }

                if ((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.gasTotalForLayer1) {
                  slice.caseReducers.updateLayer1Fees(state, {
                    payload: action.payload.gasTotalForLayer1
                  });
                }
              }).addCase(computeEstimatedGasLimit.rejected, state => {
                // If gas estimation fails, we should set the loading state to false,
                // because it is no longer loading
                state.gasEstimateIsLoading = false;
              }).addCase(_actionConstants.GAS_FEE_ESTIMATES_UPDATED, (state, action) => {
                // When the gasFeeController updates its gas fee estimates we need to
                // update and validate state based on those new values
                slice.caseReducers.updateGasFeeEstimates(state, {
                  payload: action.payload
                });
              }).addCase(initializeSendState.pending, state => {
                // when we begin initializing state, which can happen when switching
                // chains even after loading the send flow, we set gasEstimateIsLoading
                // as initialization will trigger a fetch for gasPrice estimates.
                state.gasEstimateIsLoading = true;
              }).addCase(initializeSendState.fulfilled, (state, action) => {
                // writes the computed initialized state values into the slice and then
                // calculates slice validity using the caseReducers.
                state.eip1559support = action.payload.eip1559support;
                state.selectedAccount.address = action.payload.account.address;
                state.selectedAccount.balance = action.payload.account.balance;
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (draftTransaction) {
                  draftTransaction.gas.gasLimit = action.payload.gasLimit;
                  draftTransaction.gas.gasTotal = action.payload.gasTotal;

                  if (action.payload.chainHasChanged) {
                    var _draftTransaction$fro5, _draftTransaction$fro6;

                    // If the state was reinitialized as a result of the user changing
                    // the network from the network dropdown, then the selected asset is
                    // no longer valid and should be set to the native asset for the
                    // network.
                    draftTransaction.asset.type = _transaction.ASSET_TYPES.NATIVE;
                    draftTransaction.asset.balance = (_draftTransaction$fro5 = (_draftTransaction$fro6 = draftTransaction.fromAccount) === null || _draftTransaction$fro6 === void 0 ? void 0 : _draftTransaction$fro6.balance) !== null && _draftTransaction$fro5 !== void 0 ? _draftTransaction$fro5 : state.selectedAccount.balance;
                    draftTransaction.asset.details = null;
                  }
                }

                slice.caseReducers.updateGasFeeEstimates(state, {
                  payload: {
                    gasFeeEstimates: action.payload.gasFeeEstimates,
                    gasEstimateType: action.payload.gasEstimateType
                  }
                });
                state.gasEstimatePollToken = action.payload.gasEstimatePollToken;

                if (action.payload.gasEstimatePollToken) {
                  state.gasEstimateIsLoading = false;
                }

                if (state.stage !== SEND_STAGES.INACTIVE) {
                  slice.caseReducers.validateRecipientUserInput(state, {
                    payload: {
                      chainId: action.payload.chainId,
                      tokens: action.payload.tokens,
                      useTokenDetection: action.payload.useTokenDetection,
                      tokenAddressList: action.payload.tokenAddressList
                    }
                  });
                }

                if (state.amountMode === AMOUNT_MODES.MAX) {
                  slice.caseReducers.updateAmountToMax(state);
                }

                slice.caseReducers.validateAmountField(state);
                slice.caseReducers.validateGasField(state);
                slice.caseReducers.validateSendState(state);
              }).addCase(_actionConstants.SELECTED_ACCOUNT_CHANGED, (state, action) => {
                // This event occurs when the user selects a new account from the
                // account menu, or the currently active account's balance updates.
                // We only care about new transactions, not edits, here, because we use
                // the fromAccount and ACCOUNT_CHANGED action for that.
                if (state.stage !== SEND_STAGES.EDIT && action.payload.account) {
                  state.selectedAccount.balance = action.payload.account.balance;
                  state.selectedAccount.address = action.payload.account.address;
                  const draftTransaction = state.draftTransactions[state.currentTransactionUUID]; // This action will occur even when we aren't on the send flow, which
                  // is okay as it keeps the selectedAccount details up to date. We do
                  // not need to validate anything if there isn't a current draft
                  // transaction. If there is, we need to update the asset balance if
                  // the asset is set to the native network asset, and then validate
                  // the transaction.

                  if (draftTransaction) {
                    if ((draftTransaction === null || draftTransaction === void 0 ? void 0 : draftTransaction.asset.type) === _transaction.ASSET_TYPES.NATIVE) {
                      draftTransaction.asset.balance = action.payload.account.balance;
                    }

                    slice.caseReducers.validateAmountField(state);
                    slice.caseReducers.validateGasField(state);
                    slice.caseReducers.validateSendState(state);
                  }
                }
              }).addCase(_actionConstants.QR_CODE_DETECTED, (state, action) => {
                // When data is received from the QR Code Scanner we set the recipient
                // as long as a valid address can be pulled from the data. If an
                // address is pulled but it is invalid, we display an error.
                const qrCodeData = action.value;
                const draftTransaction = state.draftTransactions[state.currentTransactionUUID];

                if (qrCodeData && draftTransaction) {
                  if (qrCodeData.type === 'address') {
                    const scannedAddress = qrCodeData.values.address.toLowerCase();

                    if ((0, _hexstringUtils.isValidHexAddress)(scannedAddress, {
                      allowNonPrefixed: false
                    })) {
                      if (draftTransaction.recipient.address !== scannedAddress) {
                        slice.caseReducers.updateRecipient(state, {
                          payload: {
                            address: scannedAddress
                          }
                        });
                      }
                    } else {
                      draftTransaction.recipient.error = _send.INVALID_RECIPIENT_ADDRESS_ERROR;
                    }
                  }
                }
              });
            }
          });
          const {
            actions,
            reducer
          } = slice;
          var _default = reducer;
          exports.default = _default;
          const {
            useDefaultGas,
            useCustomGas,
            updateGasLimit,
            validateRecipientUserInput,
            updateRecipientSearchMode,
            addHistoryEntry,
            acknowledgeRecipientWarning
          } = actions;
          exports.acknowledgeRecipientWarning = acknowledgeRecipientWarning;
          exports.addHistoryEntry = addHistoryEntry;
          exports.updateGasLimit = updateGasLimit;
          exports.useCustomGas = useCustomGas;
          exports.useDefaultGas = useDefaultGas;
          // Action Creators

          /**
           * This method is for usage when validating user input so that validation
           * is only run after a delay in typing of 300ms. Usage at callsites requires
           * passing in both the dispatch method and the payload to dispatch, which makes
           * it only applicable for use within action creators.
           */
          const debouncedValidateRecipientUserInput = (0, _lodash.debounce)((dispatch, payload, resolve) => {
            dispatch(addHistoryEntry(`sendFlow - user typed ${payload.userInput} into recipient input field`));
            dispatch(validateRecipientUserInput(payload));
            resolve();
          }, 300);
          /**
           * Begins a new draft transaction, derived from the txParams of an existing
           * transaction in the TransactionController. This action will first clear out
           * the previous draft transactions and currentTransactionUUID from state. This
           * action is one of the two entry points into the send flow. NOTE: You must
           * route to the send page *after* dispatching this action resolves to ensure
           * that the draftTransaction is properly created.
           *
           * @param {AssetTypesString} assetType - The type of asset the transaction
           *  being edited was sending. The details of the asset will be retrieved from
           *  the transaction data in state.
           * @param {string} transactionId - The id of the transaction being edited.
           * @returns {ThunkAction<void>}
           */

          function editExistingTransaction(assetType, transactionId) {
            return async (dispatch, getState) => {
              await dispatch(actions.clearPreviousDrafts());
              const state = getState();
              const unapprovedTransactions = (0, _metamask.getUnapprovedTxs)(state);
              const transaction = unapprovedTransactions[transactionId];
              const account = (0, _selectors.getTargetAccount)(state, transaction.txParams.from);

              if (assetType === _transaction.ASSET_TYPES.NATIVE) {
                var _getAddressBookEntryO;

                await dispatch(actions.addNewDraft({
                  ...draftTransactionInitialState,
                  id: transactionId,
                  fromAccount: account,
                  gas: {
                    ...draftTransactionInitialState.gas,
                    gasLimit: transaction.txParams.gas,
                    gasPrice: transaction.txParams.gasPrice
                  },
                  userInputHexData: transaction.txParams.data,
                  recipient: {
                    ...draftTransactionInitialState.recipient,
                    address: transaction.txParams.to,
                    nickname: (_getAddressBookEntryO = (0, _selectors.getAddressBookEntryOrAccountName)(state, transaction.txParams.to)) !== null && _getAddressBookEntryO !== void 0 ? _getAddressBookEntryO : ''
                  },
                  amount: {
                    ...draftTransactionInitialState.amount,
                    value: transaction.txParams.value
                  },
                  history: [`sendFlow - user clicked edit on transaction with id ${transactionId}`]
                }));
                await dispatch(updateSendAsset({
                  type: _transaction.ASSET_TYPES.NATIVE
                }, {
                  initialAssetSet: true
                }));
              } else {
                var _getAddressBookEntryO2, _getTokenIdParam;

                const tokenData = (0, _transaction2.parseStandardTokenTransactionData)(transaction.txParams.data);
                const tokenAmountInDec = assetType === _transaction.ASSET_TYPES.TOKEN ? (0, _metamaskControllerUtils.getTokenValueParam)(tokenData) : '1';
                const address = (0, _tokenUtil.getTokenAddressParam)(tokenData);
                const nickname = (_getAddressBookEntryO2 = (0, _selectors.getAddressBookEntryOrAccountName)(state, address)) !== null && _getAddressBookEntryO2 !== void 0 ? _getAddressBookEntryO2 : '';
                const tokenAmountInHex = (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.conversionUtil)(tokenAmountInDec, {
                  fromNumericBase: 'dec',
                  toNumericBase: 'hex'
                }));
                await dispatch(actions.addNewDraft({
                  ...draftTransactionInitialState,
                  id: transactionId,
                  fromAccount: account,
                  gas: {
                    ...draftTransactionInitialState.gas,
                    gasLimit: transaction.txParams.gas,
                    gasPrice: transaction.txParams.gasPrice
                  },
                  userInputHexData: transaction.txParams.data,
                  recipient: {
                    ...draftTransactionInitialState.recipient,
                    address,
                    nickname
                  },
                  amount: {
                    ...draftTransactionInitialState.amount,
                    value: tokenAmountInHex
                  },
                  history: [`sendFlow - user clicked edit on transaction with id ${transactionId}`]
                }));
                await dispatch(updateSendAsset({
                  type: assetType,
                  details: {
                    address: transaction.txParams.to,
                    ...(assetType === _transaction.ASSET_TYPES.COLLECTIBLE ? {
                      tokenId: (_getTokenIdParam = (0, _tokenUtil.getTokenIdParam)(tokenData)) !== null && _getTokenIdParam !== void 0 ? _getTokenIdParam : (0, _metamaskControllerUtils.getTokenValueParam)(tokenData)
                    } : {})
                  }
                }, {
                  initialAssetSet: true
                }));
              }

              await dispatch(initializeSendState());
            };
          }
          /**
           * This method is a temporary placeholder to support the old UI in both the
           * gas modal and the send flow. Soon we won't need to modify gasPrice from the
           * send flow based on user input, it'll just be a shallow copy of the current
           * estimate. This method is necessary because the internal structure of this
           * slice has been changed such that it is agnostic to transaction envelope
           * type, and this method calls into the new structure in the appropriate way.
           *
           * @deprecated - don't extend the usage of this temporary method
           * @param {string} gasPrice - new gas price in hex wei
           * @returns {ThunkAction<void>}
           */


          function updateGasPrice(gasPrice) {
            return dispatch => {
              dispatch(addHistoryEntry(`sendFlow - user set legacy gasPrice to ${gasPrice}`));
              dispatch(actions.updateGasFees({
                gasPrice,
                transactionType: _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY,
                manuallyEdited: true
              }));
            };
          }
          /**
           * Updates the recipient in state based on the input provided, and then will
           * recompute gas limit when sending a TOKEN asset type. Changing the recipient
           * address results in hex data changing because the recipient address is
           * encoded in the data instead of being in the 'to' field. The to field in a
           * token send will always be the token contract address.
           * If no nickname is provided, the address book state will be checked to see if
           * a nickname for the passed address has already been saved. This ensures the
           * (temporary) send state recipient nickname is consistent with the address book
           * nickname which has already been persisted to state.
           *
           * @param {object} recipient - Recipient information
           * @param {string} recipient.address - hex address to send the transaction to
           * @param {string} [recipient.nickname] - Alias for the address to display
           *  to the user
           * @returns {ThunkAction<void>}
           */


          function updateRecipient({
            address,
            nickname
          }) {
            return async (dispatch, getState) => {
              var _getAddressBookEntryO3;

              // Do not addHistoryEntry here as this is called from a number of places
              // each with significance to the user and transaction history.
              const state = getState();
              const nicknameFromAddressBookEntryOrAccountName = (_getAddressBookEntryO3 = (0, _selectors.getAddressBookEntryOrAccountName)(state, address)) !== null && _getAddressBookEntryO3 !== void 0 ? _getAddressBookEntryO3 : '';
              await dispatch(actions.updateRecipient({
                address,
                nickname: nickname || nicknameFromAddressBookEntryOrAccountName
              }));
              await dispatch(computeEstimatedGasLimit());
            };
          }
          /**
           * This method is called to update the user's input into the ENS input field.
           * Once the field is updated, the field will be validated using a debounced
           * version of the validateRecipientUserInput action. This way validation only
           * occurs once the user has stopped typing.
           *
           * @param {string} userInput - the value that the user is typing into the field
           */


          function updateRecipientUserInput(userInput) {
            return async (dispatch, getState) => {
              var _ref, _draftTransaction$fro7, _draftTransaction$fro8;

              dispatch(actions.updateRecipientWarning('loading'));
              dispatch(actions.updateDraftTransactionStatus(SEND_STATUSES.INVALID));
              await dispatch(actions.updateRecipientUserInput(userInput));
              const state = getState();
              const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
              const sendingAddress = (_ref = (_draftTransaction$fro7 = (_draftTransaction$fro8 = draftTransaction.fromAccount) === null || _draftTransaction$fro8 === void 0 ? void 0 : _draftTransaction$fro8.address) !== null && _draftTransaction$fro7 !== void 0 ? _draftTransaction$fro7 : state[name].selectedAccount.address) !== null && _ref !== void 0 ? _ref : (0, _selectors.getSelectedAddress)(state);
              const chainId = (0, _selectors.getCurrentChainId)(state);
              const tokens = (0, _metamask.getTokens)(state);
              const useTokenDetection = (0, _selectors.getUseTokenDetection)(state);
              const tokenMap = (0, _selectors.getTokenList)(state);
              const tokenAddressList = Object.keys(tokenMap);
              const inputIsValidHexAddress = (0, _hexstringUtils.isValidHexAddress)(userInput);
              let isProbablyAnAssetContract = false;

              if (inputIsValidHexAddress) {
                const smartContractAddress = await (0, _transactions.isSmartContractAddress)(userInput);

                if (smartContractAddress) {
                  dispatch(actions.updateRecipientType(_send.RECIPIENT_TYPES.SMART_CONTRACT));
                  const {
                    symbol,
                    decimals
                  } = (0, _tokenUtil.getTokenMetadata)(userInput, tokenMap) || {};
                  isProbablyAnAssetContract = symbol && decimals !== undefined;

                  if (!isProbablyAnAssetContract) {
                    try {
                      const {
                        standard
                      } = await (0, _actions.getTokenStandardAndDetails)(userInput, sendingAddress);
                      isProbablyAnAssetContract = Boolean(standard);
                    } catch (e) {
                      console.log(e);
                    }
                  }
                }
              }

              return new Promise(resolve => {
                debouncedValidateRecipientUserInput(dispatch, {
                  userInput,
                  chainId,
                  tokens,
                  useTokenDetection,
                  tokenAddressList,
                  isProbablyAnAssetContract
                }, resolve);
              });
            };
          }
          /**
           * Updates the amount the user intends to send and performs side effects.
           * 1. If the current mode is MAX change to INPUT
           * 2. If sending a token, recompute the gasLimit estimate
           *
           * @param {string} amount - hex string representing value
           * @returns {ThunkAction<void>}
           */


          function updateSendAmount(amount) {
            return async (dispatch, getState) => {
              const state = getState();
              const {
                metamask
              } = state;
              const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
              let logAmount = amount;

              if (draftTransaction.asset.type === _transaction.ASSET_TYPES.TOKEN) {
                var _draftTransaction$ass6, _draftTransaction$ass7, _draftTransaction$ass8;

                const multiplier = Math.pow(10, Number(((_draftTransaction$ass6 = draftTransaction.asset.details) === null || _draftTransaction$ass6 === void 0 ? void 0 : _draftTransaction$ass6.decimals) || 0));
                const decimalValueString = (0, _conversion.conversionUtil)((0, _ethereumjsUtil.addHexPrefix)(amount), {
                  fromNumericBase: 'hex',
                  toNumericBase: 'dec',
                  toCurrency: (_draftTransaction$ass7 = draftTransaction.asset.details) === null || _draftTransaction$ass7 === void 0 ? void 0 : _draftTransaction$ass7.symbol,
                  conversionRate: multiplier,
                  invertConversionRate: true
                });
                logAmount = `${Number(decimalValueString) ? decimalValueString : ''} ${(_draftTransaction$ass8 = draftTransaction.asset.details) === null || _draftTransaction$ass8 === void 0 ? void 0 : _draftTransaction$ass8.symbol}`;
              } else {
                var _metamask$provider;

                const ethValue = (0, _confirmTx.getValueFromWeiHex)({
                  value: amount,
                  toCurrency: _common.ETH,
                  numberOfDecimals: 8
                });
                logAmount = `${ethValue} ${(metamask === null || metamask === void 0 ? void 0 : (_metamask$provider = metamask.provider) === null || _metamask$provider === void 0 ? void 0 : _metamask$provider.ticker) || _common.ETH}`;
              }

              await dispatch(addHistoryEntry(`sendFlow - user set amount to ${logAmount}`));
              await dispatch(actions.updateSendAmount(amount));

              if (state[name].amountMode === AMOUNT_MODES.MAX) {
                await dispatch(actions.updateAmountMode(AMOUNT_MODES.INPUT));
              }

              await dispatch(computeEstimatedGasLimit());
            };
          }
          /**
           * updates the asset to send to one of NATIVE or TOKEN and ensures that the
           * asset balance is set. If sending a TOKEN also updates the asset details
           * object with the appropriate ERC20 details including address, symbol and
           * decimals.
           *
           * @param {object} payload - action payload
           * @param {string} payload.type - type of asset to send
           * @param {TokenDetails} [payload.details] - ERC20 details if sending TOKEN asset
           * @returns {ThunkAction<void>}
           */


          function updateSendAsset({
            type,
            details: providedDetails
          }, {
            initialAssetSet = false
          } = {}) {
            return async (dispatch, getState) => {
              var _ref2, _draftTransaction$fro9, _draftTransaction$fro10;

              const state = getState();
              const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
              const sendingAddress = (_ref2 = (_draftTransaction$fro9 = (_draftTransaction$fro10 = draftTransaction.fromAccount) === null || _draftTransaction$fro10 === void 0 ? void 0 : _draftTransaction$fro10.address) !== null && _draftTransaction$fro9 !== void 0 ? _draftTransaction$fro9 : state[name].selectedAccount.address) !== null && _ref2 !== void 0 ? _ref2 : (0, _selectors.getSelectedAddress)(state);
              const account = (0, _selectors.getTargetAccount)(state, sendingAddress);

              if (type === _transaction.ASSET_TYPES.NATIVE) {
                var _state$metamask$provi, _state$metamask$provi2;

                const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
                const unapprovedTx = unapprovedTxs === null || unapprovedTxs === void 0 ? void 0 : unapprovedTxs[draftTransaction.id];
                await dispatch(addHistoryEntry(`sendFlow - user set asset of type ${_transaction.ASSET_TYPES.NATIVE} with symbol ${(_state$metamask$provi = (_state$metamask$provi2 = state.metamask.provider) === null || _state$metamask$provi2 === void 0 ? void 0 : _state$metamask$provi2.ticker) !== null && _state$metamask$provi !== void 0 ? _state$metamask$provi : _common.ETH}`));
                await dispatch(actions.updateAsset({
                  asset: {
                    type,
                    details: null,
                    balance: account.balance,
                    error: null
                  },
                  initialAssetSet
                })); // This is meant to handle cases where we are editing an unapprovedTx from the background state
                // and its type is a token method. In such a case, the hex data will be the necessary hex data
                // for calling the contract transfer method.
                // Now that we are updating the transaction to be a send of a native asset type, we should
                // set the hex data of the transaction being editing to be empty.
                // then the user will not want to send any hex data now that they have change the

                if ((unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM || (unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER || (unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM) {
                  await dispatch(actions.updateUserInputHexData(''));
                }
              } else {
                await dispatch((0, _actions.showLoadingIndication)());
                const details = {
                  ...providedDetails,
                  ...(await (0, _actions.getTokenStandardAndDetails)(providedDetails.address, sendingAddress, providedDetails.tokenId))
                };
                await dispatch((0, _actions.hideLoadingIndication)());
                const asset = {
                  type,
                  details,
                  error: null
                };

                if (details.standard === _transaction.TOKEN_STANDARDS.ERC20) {
                  asset.balance = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcTokenAmount)(details.balance, details.decimals).toString(16));
                  await dispatch(addHistoryEntry(`sendFlow - user set asset to ERC20 token with symbol ${details.symbol} and address ${details.address}`));
                } else if (details.standard === _transaction.TOKEN_STANDARDS.ERC1155 && type === _transaction.ASSET_TYPES.COLLECTIBLE) {
                  throw new Error('Sends of ERC1155 tokens are not currently supported');
                } else if (details.standard === _transaction.TOKEN_STANDARDS.ERC1155 || details.standard === _transaction.TOKEN_STANDARDS.ERC721) {
                  if (type === _transaction.ASSET_TYPES.TOKEN && false) {
                    dispatch((0, _actions.showModal)({
                      name: 'CONVERT_TOKEN_TO_NFT',
                      tokenAddress: details.address
                    }));
                    asset.error = _errorKeys.INVALID_ASSET_TYPE;
                    throw new Error(_errorKeys.INVALID_ASSET_TYPE);
                  } else {
                    let isCurrentOwner = true;

                    try {
                      isCurrentOwner = await (0, _actions.isCollectibleOwner)(sendingAddress, details.address, details.tokenId);
                    } catch (err) {
                      if (err.message.includes('Unable to verify ownership.')) {// this would indicate that either our attempts to verify ownership failed because of network issues,
                        // or, somehow a token has been added to collectibles state with an incorrect chainId.
                      } else {
                        // Any other error is unexpected and should be surfaced.
                        dispatch((0, _actions.displayWarning)(err.message));
                      }
                    }

                    if (isCurrentOwner) {
                      asset.error = null;
                      asset.balance = '0x1';
                    } else {
                      throw new Error('Send slice initialized as collectible send with a collectible not currently owned by the select account');
                    }

                    await dispatch(addHistoryEntry(`sendFlow - user set asset to NFT with tokenId ${details.tokenId} and address ${details.address}`));
                  }
                }

                await dispatch(actions.updateAsset({
                  asset,
                  initialAssetSet
                }));
              }

              if (initialAssetSet === false) {
                await dispatch(computeEstimatedGasLimit());
              }
            };
          }
          /**
           * When a user has enabled hex data field in advanced settings they will be
           * able to supply hex data on a transaction. This method updates the user
           * supplied data. Note, when sending native assets this will result in
           * recomputing estimated gasLimit. When sending a ERC20 asset this is not done
           * because the data sent in the transaction will be determined by the asset,
           * recipient and value, NOT what the user has supplied.
           *
           * @param {string} hexData - hex encoded string representing transaction data.
           * @returns {ThunkAction<void>}
           */


          function updateSendHexData(hexData) {
            return async (dispatch, getState) => {
              await dispatch(addHistoryEntry(`sendFlow - user added custom hexData ${hexData}`));
              await dispatch(actions.updateUserInputHexData(hexData));
              const state = getState();
              const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];

              if (draftTransaction.asset.type === _transaction.ASSET_TYPES.NATIVE) {
                await dispatch(computeEstimatedGasLimit());
              }
            };
          }
          /**
           * Sets the recipient search mode to show a list of the user's contacts and
           * recently interacted with addresses.
           *
           * @returns {ThunkAction<void>}
           */


          function useContactListForRecipientSearch() {
            return dispatch => {
              dispatch(addHistoryEntry(`sendFlow - user selected back to all on recipient screen`));
              dispatch(updateRecipientSearchMode(RECIPIENT_SEARCH_MODES.CONTACT_LIST));
            };
          }
          /**
           * Sets the recipient search mode to show a list of the user's own accounts.
           *
           * @returns {ThunkAction<void>}
           */


          function useMyAccountsForRecipientSearch() {
            return dispatch => {
              dispatch(addHistoryEntry(`sendFlow - user selected transfer to my accounts on recipient screen`));
              dispatch(updateRecipientSearchMode(RECIPIENT_SEARCH_MODES.MY_ACCOUNTS));
            };
          }
          /**
           * Clears out the recipient user input, ENS resolution and recipient validation.
           *
           * @returns {ThunkAction<void>}
           */


          function resetRecipientInput() {
            return async (dispatch, getState) => {
              const state = getState();
              const chainId = (0, _selectors.getCurrentChainId)(state);
              await dispatch(addHistoryEntry(`sendFlow - user cleared recipient input`));
              await dispatch(updateRecipientUserInput(''));
              await dispatch(updateRecipient({
                address: '',
                nickname: ''
              }));
              await dispatch((0, _ens.resetEnsResolution)());
              await dispatch(validateRecipientUserInput({
                chainId
              }));
            };
          }
          /**
           * Resets the entire send state tree to the initial state. It also disconnects
           * polling from the gas controller if the token is present in state.
           *
           * @returns {ThunkAction<void>}
           */


          function resetSendState() {
            return async (dispatch, getState) => {
              const state = getState();
              dispatch(actions.resetSendState());

              if (state[name].gasEstimatePollToken) {
                await (0, _actions.disconnectGasFeeEstimatePoller)(state[name].gasEstimatePollToken);
                (0, _actions.removePollingTokenFromAppState)(state[name].gasEstimatePollToken);
              }
            };
          }
          /**
           * Signs a transaction or updates a transaction in state if editing.
           * This method is called when a user clicks the next button in the footer of
           * the send page, signaling that a transaction should be executed. This method
           * will create the transaction in state (by way of the various global provider
           * constructs) which will eventually (and fairly quickly from user perspective)
           * result in a confirmation window being displayed for the transaction.
           *
           * @returns {ThunkAction<void>}
           */


          function signTransaction() {
            return async (dispatch, getState) => {
              const state = getState();
              const {
                stage,
                eip1559support
              } = state[name];
              const txParams = (0, _helpers.generateTransactionParams)(state[name]);
              const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];

              if (stage === SEND_STAGES.EDIT) {
                var _unapprovedTx$sendFlo;

                // When dealing with the edit flow there is already a transaction in
                // state that we must update, this branch is responsible for that logic.
                // We first must grab the previous transaction object from state and then
                // merge in the modified txParams. Once the transaction has been modified
                // we can send that to the background to update the transaction in state.
                const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
                const unapprovedTx = unapprovedTxs[draftTransaction.id]; // We only update the tx params that can be changed via the edit flow UX

                const eip1559OnlyTxParamsToUpdate = {
                  data: txParams.data,
                  from: txParams.from,
                  to: txParams.to,
                  value: txParams.value,
                  gas: unapprovedTx.userEditedGasLimit ? unapprovedTx.txParams.gas : txParams.gas
                };
                unapprovedTx.originalGasEstimate = eip1559OnlyTxParamsToUpdate.gas;
                const editingTx = {
                  ...unapprovedTx,
                  txParams: Object.assign(unapprovedTx.txParams, eip1559support ? eip1559OnlyTxParamsToUpdate : txParams)
                };
                await dispatch(addHistoryEntry(`sendFlow - user clicked next and transaction should be updated in controller`));
                await dispatch((0, _actions.updateTransactionSendFlowHistory)(draftTransaction.id, ((_unapprovedTx$sendFlo = unapprovedTx.sendFlowHistory) === null || _unapprovedTx$sendFlo === void 0 ? void 0 : _unapprovedTx$sendFlo.length) || 0, draftTransaction.history));
                await dispatch((0, _actions.updateEditableParams)(draftTransaction.id, editingTx.txParams));
                await dispatch((0, _actions.updateTransactionGasFees)(draftTransaction.id, editingTx.txParams));
              } else {
                let transactionType = draftTransaction.recipient.type === _send.RECIPIENT_TYPES.SMART_CONTRACT ? _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION : _transaction.TRANSACTION_TYPES.SIMPLE_SEND;

                if (draftTransaction.asset.type !== _transaction.ASSET_TYPES.NATIVE) {
                  transactionType = draftTransaction.asset.type === _transaction.ASSET_TYPES.COLLECTIBLE ? _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM : _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER;
                }

                await dispatch(addHistoryEntry(`sendFlow - user clicked next and transaction should be added to controller`));
                dispatch((0, _actions.addUnapprovedTransactionAndRouteToConfirmationPage)(txParams, transactionType, draftTransaction.history));
              }
            };
          }
          /**
           * Toggles the amount.mode between INPUT and MAX modes.
           * As a result, the amount.value will change to either '0x0' when moving from
           * MAX to INPUT, or to the maximum allowable amount based on current asset when
           * moving from INPUT to MAX.
           *
           * @returns {ThunkAction<void>}
           */


          function toggleSendMaxMode() {
            return async (dispatch, getState) => {
              const state = getState();

              if (state[name].amountMode === AMOUNT_MODES.MAX) {
                await dispatch(actions.updateAmountMode(AMOUNT_MODES.INPUT));
                await dispatch(actions.updateSendAmount('0x0'));
                await dispatch(addHistoryEntry(`sendFlow - user toggled max mode off`));
              } else {
                await dispatch(actions.updateAmountMode(AMOUNT_MODES.MAX));
                await dispatch(actions.updateAmountToMax());
                await dispatch(addHistoryEntry(`sendFlow - user toggled max mode on`));
              }

              await dispatch(computeEstimatedGasLimit());
            };
          }
          /**
           * Begins a new draft transaction, clearing out the previous draft transactions
           * from state, and clearing the currentTransactionUUID. This action is one of
           * the two entry points into the send flow. NOTE: You must route to the send
           * page *after* dispatching this action resolves to ensure that the
           * draftTransaction is properly created.
           *
           * @param {Pick<Asset, 'type' | 'details'>} asset - A partial asset
           *  object containing at least the asset type. If specifying a non-native asset
           *  then the asset details must be included with at least the address.
           * @returns {ThunkAction<void>}
           */


          function startNewDraftTransaction(asset) {
            return async dispatch => {
              var _asset$type;

              await dispatch(actions.clearPreviousDrafts());
              await dispatch(actions.addNewDraft({
                ...draftTransactionInitialState,
                history: [`sendFlow - User started new draft transaction`]
              }));
              await dispatch(updateSendAsset({
                type: (_asset$type = asset.type) !== null && _asset$type !== void 0 ? _asset$type : _transaction.ASSET_TYPES.NATIVE,
                details: asset.details
              }));
              await dispatch(initializeSendState());
            };
          } // Selectors

          /**
           * The following typedef is a shortcut for typing selectors below. It uses a
           * generic type, T, so that each selector can specify it's return type.
           *
           * @template T
           * @typedef {(state: MetaMaskState) => T} Selector
           */

          /**
           * Selector that returns the current draft transaction's UUID.
           *
           * @type {Selector<string>}
           */


          function getCurrentTransactionUUID(state) {
            return state[name].currentTransactionUUID;
          }
          /**
           * Selector that returns the current draft transaction.
           *
           * @type {Selector<DraftTransaction>}
           */


          function getCurrentDraftTransaction(state) {
            var _state$name$draftTran;

            return (_state$name$draftTran = state[name].draftTransactions[getCurrentTransactionUUID(state)]) !== null && _state$name$draftTran !== void 0 ? _state$name$draftTran : {};
          }
          /**
           * Selector that returns true if a draft transaction exists.
           *
           * @type {Selector<boolean>}
           */


          function getDraftTransactionExists(state) {
            const draftTransaction = getCurrentDraftTransaction(state);

            if (Object.keys(draftTransaction).length === 0) {
              return false;
            }

            return true;
          } // Gas selectors

          /**
           * Selector that returns the current draft transaction's gasLimit.
           *
           * @type {Selector<?string>}
           */


          function getGasLimit(state) {
            var _getCurrentDraftTrans;

            return (_getCurrentDraftTrans = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans === void 0 ? void 0 : _getCurrentDraftTrans.gasLimit;
          }
          /**
           * Selector that returns the current draft transaction's gasPrice.
           *
           * @type {Selector<?string>}
           */


          function getGasPrice(state) {
            var _getCurrentDraftTrans2;

            return (_getCurrentDraftTrans2 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans2 === void 0 ? void 0 : _getCurrentDraftTrans2.gasPrice;
          }
          /**
           * Selector that returns the current draft transaction's gasTotal.
           *
           * @type {Selector<?string>}
           */


          function getGasTotal(state) {
            var _getCurrentDraftTrans3;

            return (_getCurrentDraftTrans3 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans3 === void 0 ? void 0 : _getCurrentDraftTrans3.gasTotal;
          }
          /**
           * Selector that returns the error, if present, for the gas fields.
           *
           * @type {Selector<?string>}
           */


          function gasFeeIsInError(state) {
            var _getCurrentDraftTrans4;

            return Boolean((_getCurrentDraftTrans4 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans4 === void 0 ? void 0 : _getCurrentDraftTrans4.error);
          }
          /**
           * Selector that returns the minimum gasLimit for the current network.
           *
           * @type {Selector<string>}
           */


          function getMinimumGasLimitForSend(state) {
            return state[name].gasLimitMinimum;
          }
          /**
           * Selector that returns the current draft transaction's gasLimit.
           *
           * @type {Selector<MapValuesToUnion<SendStateGasModes>>}
           */


          function getGasInputMode(state) {
            const isMainnet = (0, _selectors.getIsMainnet)(state);
            const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
            const showAdvancedGasFields = (0, _selectors.getAdvancedInlineGasShown)(state);

            if (state[name].gasIsSetInModal) {
              return GAS_INPUT_MODES.CUSTOM;
            }

            if (!isMainnet && !false || showAdvancedGasFields) {
              return GAS_INPUT_MODES.INLINE;
            } // We get eth_gasPrice estimation if the legacy API fails but we need to
            // instruct the UI to render the INLINE inputs in this case, only on
            // mainnet or IN_TEST.


            if ((isMainnet || false) && gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
              return GAS_INPUT_MODES.INLINE;
            }

            return GAS_INPUT_MODES.BASIC;
          } // Asset Selectors

          /**
           * Selector that returns the asset the current draft transaction is sending.
           *
           * @type {Selector<?Asset>}
           */


          function getSendAsset(state) {
            return getCurrentDraftTransaction(state).asset;
          }
          /**
           * Selector that returns the contract address of the non-native asset that
           * the current transaction is sending, if it exists.
           *
           * @type {Selector<?string>}
           */


          function getSendAssetAddress(state) {
            var _getSendAsset, _getSendAsset$details;

            return (_getSendAsset = getSendAsset(state)) === null || _getSendAsset === void 0 ? void 0 : (_getSendAsset$details = _getSendAsset.details) === null || _getSendAsset$details === void 0 ? void 0 : _getSendAsset$details.address;
          }
          /**
           * Selector that returns a boolean value describing whether the currently
           * selected asset is sendable, based upon the standard of the token.
           *
           * @type {Selector<boolean>}
           */


          function getIsAssetSendable(state) {
            var _getSendAsset2, _getSendAsset3, _getSendAsset3$detail;

            if (((_getSendAsset2 = getSendAsset(state)) === null || _getSendAsset2 === void 0 ? void 0 : _getSendAsset2.type) === _transaction.ASSET_TYPES.NATIVE) {
              return true;
            }

            return ((_getSendAsset3 = getSendAsset(state)) === null || _getSendAsset3 === void 0 ? void 0 : (_getSendAsset3$detail = _getSendAsset3.details) === null || _getSendAsset3$detail === void 0 ? void 0 : _getSendAsset3$detail.isERC721) === false;
          }
          /**
           * Selector that returns the asset error if it exists.
           *
           * @type {Selector<?string>}
           */


          function getAssetError(state) {
            return getSendAsset(state).error;
          } // Amount Selectors

          /**
           * Selector that returns the amount that current draft transaction is sending.
           *
           * @type {Selector<?string>}
           */


          function getSendAmount(state) {
            var _getCurrentDraftTrans5;

            return (_getCurrentDraftTrans5 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans5 === void 0 ? void 0 : _getCurrentDraftTrans5.value;
          }
          /**
           * Selector that returns true if the user has enough native asset balance to
           * cover the cost of the transaction.
           *
           * @type {Selector<boolean>}
           */


          function getIsBalanceInsufficient(state) {
            var _getCurrentDraftTrans6;

            return ((_getCurrentDraftTrans6 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans6 === void 0 ? void 0 : _getCurrentDraftTrans6.error) === _send.INSUFFICIENT_FUNDS_ERROR;
          }
          /**
           * Selector that returns the amoung send mode, either MAX or INPUT.
           *
           * @type {Selector<boolean>}
           */


          function getSendMaxModeState(state) {
            return state[name].amountMode === AMOUNT_MODES.MAX;
          }
          /**
           * Selector that returns the current draft transaction's data field.
           *
           * @type {Selector<?string>}
           */


          function getSendHexData(state) {
            return getCurrentDraftTransaction(state).userInputHexData;
          }
          /**
           * Selector that returns the current draft transaction's id, if present.
           *
           * @type {Selector<?string>}
           */


          function getDraftTransactionID(state) {
            return getCurrentDraftTransaction(state).id;
          }
          /**
           * Selector that returns true if there is an error on the amount field.
           *
           * @type {Selector<boolean>}
           */


          function sendAmountIsInError(state) {
            var _getCurrentDraftTrans7;

            return Boolean((_getCurrentDraftTrans7 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans7 === void 0 ? void 0 : _getCurrentDraftTrans7.error);
          } // Recipient Selectors

          /**
           * Selector that returns the current draft transaction's recipient.
           *
           * @type {Selector<DraftTransaction['recipient']>}
           */


          function getRecipient(state) {
            const draft = getCurrentDraftTransaction(state);

            if (!draft.recipient) {
              return {
                address: '',
                nickname: '',
                error: null,
                warning: null
              };
            }

            const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(draft.recipient.address);

            if (state.metamask.ensResolutionsByAddress) {
              return {
                ...draft.recipient,
                nickname: draft.recipient.nickname || (0, _selectors.getEnsResolutionByAddress)(state, checksummedAddress)
              };
            }

            return draft.recipient;
          }
          /**
           * Selector that returns the addres of the current draft transaction's
           * recipient.
           *
           * @type {Selector<?string>}
           */


          function getSendTo(state) {
            var _getRecipient;

            return (_getRecipient = getRecipient(state)) === null || _getRecipient === void 0 ? void 0 : _getRecipient.address;
          }
          /**
           * Selector that returns true if the current recipientMode is MY_ACCOUNTS
           *
           * @type {Selector<boolean>}
           */


          function getIsUsingMyAccountForRecipientSearch(state) {
            return state[name].recipientMode === RECIPIENT_SEARCH_MODES.MY_ACCOUNTS;
          }
          /**
           * Selector that returns the value that the user has typed into the recipient
           * input field.
           *
           * @type {Selector<?string>}
           */


          function getRecipientUserInput(state) {
            return state[name].recipientInput;
          }

          function getRecipientWarningAcknowledgement(state) {
            var _getCurrentDraftTrans8, _getCurrentDraftTrans9;

            return (_getCurrentDraftTrans8 = (_getCurrentDraftTrans9 = getCurrentDraftTransaction(state).recipient) === null || _getCurrentDraftTrans9 === void 0 ? void 0 : _getCurrentDraftTrans9.recipientWarningAcknowledged) !== null && _getCurrentDraftTrans8 !== void 0 ? _getCurrentDraftTrans8 : false;
          } // Overall validity and stage selectors

          /**
           * Selector that returns the gasFee and amount errors, if they exist.
           *
           * @type {Selector<{ gasFee?: string, amount?: string}>}
           */


          function getSendErrors(state) {
            var _getCurrentDraftTrans10, _getCurrentDraftTrans11;

            return {
              gasFee: (_getCurrentDraftTrans10 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans10 === void 0 ? void 0 : _getCurrentDraftTrans10.error,
              amount: (_getCurrentDraftTrans11 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans11 === void 0 ? void 0 : _getCurrentDraftTrans11.error
            };
          }
          /**
           * Selector that returns true if the stage is anything except INACTIVE
           *
           * @type {Selector<boolean>}
           */


          function isSendStateInitialized(state) {
            return state[name].stage !== SEND_STAGES.INACTIVE;
          }
          /**
           * Selector that returns true if the current draft transaction is valid and in
           * a sendable state.
           *
           * @type {Selector<boolean>}
           */


          function isSendFormInvalid(state) {
            const draftTransaction = getCurrentDraftTransaction(state);

            if (!draftTransaction) {
              return true;
            }

            return draftTransaction.status === SEND_STATUSES.INVALID;
          }
          /**
           * Selector that returns the current stage of the send flow
           *
           * @type {Selector<MapValuesToUnion<SendStateStages>>}
           */


          function getSendStage(state) {
            return state[name].stage;
          }


        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\common.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WEI = exports.SUPPORT_REQUEST_LINK = exports.SECONDARY = exports.PRIMARY = exports.GWEI = exports.GAS_ESTIMATE_TYPES = exports.ETH = exports.CONTRACT_ADDRESS_LINK = void 0;
          const ETH = 'ETH';
          exports.ETH = ETH;
          const GWEI = 'GWEI';
          exports.GWEI = GWEI;
          const WEI = 'WEI';
          exports.WEI = WEI;
          const PRIMARY = 'PRIMARY';
          exports.PRIMARY = PRIMARY;
          const SECONDARY = 'SECONDARY';
          exports.SECONDARY = SECONDARY;
          const GAS_ESTIMATE_TYPES = {
            SLOW: 'SLOW',
            AVERAGE: 'AVERAGE',
            FAST: 'FAST',
            FASTEST: 'FASTEST'
          };
          exports.GAS_ESTIMATE_TYPES = GAS_ESTIMATE_TYPES;
          let _supportRequestLink = 'https://metamask.zendesk.com/hc/en-us';
          const _contractAddressLink = 'https://metamask.zendesk.com/hc/en-us/articles/360020028092-What-is-the-known-contract-address-warning-';
          const SUPPORT_REQUEST_LINK = _supportRequestLink;
          exports.SUPPORT_REQUEST_LINK = SUPPORT_REQUEST_LINK;
          const CONTRACT_ADDRESS_LINK = _contractAddressLink;
          exports.CONTRACT_ADDRESS_LINK = CONTRACT_ADDRESS_LINK;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js", { "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\design-system.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TYPOGRAPHY = exports.TEXT_TRANSFORM = exports.TEXT_COLORS = exports.TEXT_ALIGN = exports.TEXT = exports.SIZES = exports.SEVERITIES = exports.RESIZE = exports.OVERFLOW_WRAP = exports.JUSTIFY_CONTENT = exports.ICON_COLORS = exports.FRACTIONS = exports.FONT_WEIGHT = exports.FONT_STYLE = exports.FLEX_WRAP = exports.FLEX_DIRECTION = exports.DISPLAY = exports.COLORS = exports.BREAKPOINTS = exports.BORDER_STYLE = exports.BORDER_RADIUS = exports.BORDER_COLORS = exports.BLOCK_SIZES = exports.BACKGROUND_COLORS = exports.ALIGN_ITEMS = void 0;

          var _lodash = require("lodash");

          /**
           * A note about the existence of both singular and plural variable names here:
           * When dealing with a literal property name, e.g. ALIGN_ITEMS, the constant
           * should match the property. When detailing a collection of things, it should
           * match the plural form of the thing. e.g. COLORS, TYPOGRAPHY
           */
          const COLORS = {
            BACKGROUND_DEFAULT: 'background-default',
            BACKGROUND_ALTERNATIVE: 'background-alternative',
            TEXT_DEFAULT: 'text-default',
            TEXT_ALTERNATIVE: 'text-alternative',
            TEXT_MUTED: 'text-muted',
            ICON_DEFAULT: 'icon-default',
            ICON_ALTERNATIVE: 'icon-alternative',
            ICON_MUTED: 'icon-muted',
            BORDER_DEFAULT: 'border-default',
            BORDER_MUTED: 'border-muted',
            OVERLAY_DEFAULT: 'overlay-default',
            OVERLAY_INVERSE: 'overlay-inverse',
            PRIMARY_DEFAULT: 'primary-default',
            PRIMARY_ALTERNATIVE: 'primary-alternative',
            PRIMARY_MUTED: 'primary-muted',
            PRIMARY_INVERSE: 'primary-inverse',
            PRIMARY_DISABLED: 'primary-disabled',
            ERROR_DEFAULT: 'error-default',
            ERROR_ALTERNATIVE: 'error-alternative',
            ERROR_MUTED: 'error-muted',
            ERROR_INVERSE: 'error-inverse',
            ERROR_DISABLED: 'error-disabled',
            WARNING_DEFAULT: 'warning-default',
            WARNING_ALTERNATIVE: 'warning-alternative',
            WARNING_MUTED: 'warning-muted',
            WARNING_INVERSE: 'warning-inverse',
            WARNING_DISABLED: 'warning-disabled',
            SUCCESS_DEFAULT: 'success-default',
            SUCCESS_ALTERNATIVE: 'success-alternative',
            SUCCESS_MUTED: 'success-muted',
            SUCCESS_INVERSE: 'success-inverse',
            SUCCESS_DISABLED: 'success-disabled',
            INFO_DEFAULT: 'info-default',
            INFO_ALTERNATIVE: 'info-alternative',
            INFO_MUTED: 'info-muted',
            INFO_INVERSE: 'info-inverse',
            INFO_DISABLED: 'info-disabled',
            MAINNET: 'mainnet',
            GOERLI: 'goerli',
            SEPOLIA: 'sepolia',
            LOCALHOST: 'localhost',
            TRANSPARENT: 'transparent',
            INHERIT: 'inherit'
          };
          exports.COLORS = COLORS;
          const BACKGROUND_COLORS = (0, _lodash.pick)(COLORS, ['BACKGROUND_DEFAULT', 'BACKGROUND_ALTERNATIVE', 'OVERLAY_DEFAULT', 'PRIMARY_DEFAULT', 'PRIMARY_ALTERNATIVE', 'PRIMARY_MUTED', 'ERROR_DEFAULT', 'ERROR_ALTERNATIVE', 'ERROR_MUTED', 'WARNING_DEFAULT', 'WARNING_ALTERNATIVE', 'WARNING_MUTED', 'SUCCESS_DEFAULT', 'SUCCESS_ALTERNATIVE', 'SUCCESS_MUTED', 'INFO_DEFAULT', 'INFO_ALTERNATIVE', 'INFO_MUTED', 'MAINNET', 'GOERLI', 'SEPOLIA', 'TRANSPARENT', 'LOCALHOST']);
          exports.BACKGROUND_COLORS = BACKGROUND_COLORS;
          const BORDER_COLORS = (0, _lodash.pick)(COLORS, ['BORDER_DEFAULT', 'BORDER_MUTED', 'PRIMARY_DEFAULT', 'PRIMARY_ALTERNATIVE', 'PRIMARY_MUTED', 'ERROR_DEFAULT', 'ERROR_ALTERNATIVE', 'ERROR_MUTED', 'WARNING_DEFAULT', 'WARNING_ALTERNATIVE', 'WARNING_MUTED', 'SUCCESS_DEFAULT', 'SUCCESS_ALTERNATIVE', 'SUCCESS_MUTED', 'INFO_DEFAULT', 'INFO_ALTERNATIVE', 'INFO_MUTED', 'MAINNET', 'GOERLI', 'SEPOLIA', 'TRANSPARENT', 'LOCALHOST']);
          exports.BORDER_COLORS = BORDER_COLORS;
          const TEXT_COLORS = (0, _lodash.pick)(COLORS, ['TEXT_DEFAULT', 'TEXT_ALTERNATIVE', 'TEXT_MUTED', 'OVERLAY_INVERSE', 'PRIMARY_DEFAULT', 'PRIMARY_INVERSE', 'ERROR_DEFAULT', 'ERROR_INVERSE', 'SUCCESS_DEFAULT', 'SUCCESS_INVERSE', 'WARNING_DEFAULT', 'WARNING_INVERSE', 'INFO_DEFAULT', 'INFO_INVERSE', 'INHERIT']);
          exports.TEXT_COLORS = TEXT_COLORS;
          const ICON_COLORS = (0, _lodash.pick)(COLORS, ['ICON_DEFAULT', 'ICON_ALTERNATIVE', 'ICON_MUTED', 'OVERLAY_INVERSE', 'PRIMARY_DEFAULT', 'PRIMARY_INVERSE', 'ERROR_DEFAULT', 'ERROR_INVERSE', 'SUCCESS_DEFAULT', 'SUCCESS_INVERSE', 'WARNING_DEFAULT', 'WARNING_INVERSE', 'INFO_DEFAULT', 'INFO_INVERSE', 'INHERIT']);
          exports.ICON_COLORS = ICON_COLORS;
          const TYPOGRAPHY = {
            H1: 'h1',
            H2: 'h2',
            H3: 'h3',
            H4: 'h4',
            H5: 'h5',
            H6: 'h6',
            H7: 'h7',
            H8: 'h8',
            H9: 'h9',
            Paragraph: 'p'
          };
          exports.TYPOGRAPHY = TYPOGRAPHY;
          const TEXT = {
            DISPLAY_MD: 'display-md',
            HEADING_LG: 'heading-lg',
            HEADING_MD: 'heading-md',
            HEADING_SM: 'heading-sm',
            BODY_LG: 'body-lg-medium',
            BODY_MD: 'body-md',
            BODY_SM: 'body-sm',
            BODY_XS: 'body-xs',
            INHERIT: 'inherit'
          };
          exports.TEXT = TEXT;
          const NONE = 'none';
          const SIZES = {
            XXS: 'xxs',
            XS: 'xs',
            SM: 'sm',
            MD: 'md',
            LG: 'lg',
            XL: 'xl',
            AUTO: 'auto',
            // Used for Text, Icon, and Button components to inherit the parent elements font-size
            NONE
          };
          exports.SIZES = SIZES;
          const BORDER_STYLE = {
            DASHED: 'dashed',
            SOLID: 'solid',
            DOTTED: 'dotted',
            DOUBLE: 'double',
            NONE
          };
          exports.BORDER_STYLE = BORDER_STYLE;
          const BORDER_RADIUS = {
            XS: SIZES.XS,
            SM: SIZES.SM,
            MD: SIZES.MD,
            LG: SIZES.LG,
            XL: SIZES.XL,
            NONE,
            PILL: 'pill'
          };
          exports.BORDER_RADIUS = BORDER_RADIUS;
          const FLEX_END = 'flex-end';
          const FLEX_START = 'flex-start';
          const CENTER = 'center';
          const ALIGN_ITEMS = {
            FLEX_START,
            FLEX_END,
            CENTER,
            BASELINE: 'baseline',
            STRETCH: 'stretch'
          };
          exports.ALIGN_ITEMS = ALIGN_ITEMS;
          const JUSTIFY_CONTENT = {
            FLEX_START,
            FLEX_END,
            CENTER,
            SPACE_AROUND: 'space-around',
            SPACE_BETWEEN: 'space-between',
            SPACE_EVENLY: 'space-evenly'
          };
          exports.JUSTIFY_CONTENT = JUSTIFY_CONTENT;
          const FLEX_DIRECTION = {
            ROW: 'row',
            ROW_REVERSE: 'row-reverse',
            COLUMN: 'column',
            COLUMN_REVERSE: 'column-reverse'
          };
          exports.FLEX_DIRECTION = FLEX_DIRECTION;
          const FLEX_WRAP = {
            WRAP: 'wrap',
            WRAP_REVERSE: 'wrap-reverse',
            NO_WRAP: 'nowrap'
          };
          exports.FLEX_WRAP = FLEX_WRAP;
          const DISPLAY = {
            BLOCK: 'block',
            FLEX: 'flex',
            GRID: 'grid',
            INLINE_BLOCK: 'inline-block',
            INLINE: 'inline',
            INLINE_FLEX: 'inline-flex',
            INLINE_GRID: 'inline-grid',
            LIST_ITEM: 'list-item',
            NONE: 'none'
          };
          exports.DISPLAY = DISPLAY;
          const FRACTIONS = {
            HALF: '1/2',
            ONE_THIRD: '1/3',
            TWO_THIRDS: '2/3',
            ONE_FOURTH: '1/4',
            TWO_FOURTHS: '2/4',
            THREE_FOURTHS: '3/4',
            ONE_FIFTH: '1/5',
            TWO_FIFTHS: '2/5',
            THREE_FIFTHS: '3/5',
            FOUR_FIFTHS: '4/5',
            ONE_SIXTH: '1/6',
            TWO_SIXTHS: '2/6',
            THREE_SIXTHS: '3/6',
            FOUR_SIXTHS: '4/6',
            FIVE_SIXTHS: '5/6',
            ONE_TWELFTH: '1/12',
            TWO_TWELFTHS: '2/12',
            THREE_TWELFTHS: '3/12',
            FOUR_TWELFTHS: '4/12',
            FIVE_TWELFTHS: '5/12',
            SIX_TWELFTHS: '6/12',
            SEVEN_TWELFTHS: '7/12',
            EIGHT_TWELFTHS: '8/12',
            NINE_TWELFTHS: '9/12',
            TEN_TWELFTHS: '10/12',
            ELEVEN_TWELFTHS: '11/12'
          };
          exports.FRACTIONS = FRACTIONS;
          const BLOCK_SIZES = {
            ...FRACTIONS,
            SCREEN: 'screen',
            MAX: 'max',
            MIN: 'min',
            FULL: 'full'
          };
          exports.BLOCK_SIZES = BLOCK_SIZES;
          const TEXT_ALIGN = {
            LEFT: 'left',
            CENTER: 'center',
            RIGHT: 'right',
            JUSTIFY: 'justify',
            END: 'end'
          };
          exports.TEXT_ALIGN = TEXT_ALIGN;
          const TEXT_TRANSFORM = {
            UPPERCASE: 'uppercase',
            LOWERCASE: 'lowercase',
            CAPITALIZE: 'capitalize'
          };
          exports.TEXT_TRANSFORM = TEXT_TRANSFORM;
          const FONT_WEIGHT = {
            BOLD: 'bold',
            MEDIUM: 'medium',
            NORMAL: 'normal'
          };
          exports.FONT_WEIGHT = FONT_WEIGHT;
          const OVERFLOW_WRAP = {
            BREAK_WORD: 'break-word',
            NORMAL: 'normal'
          };
          exports.OVERFLOW_WRAP = OVERFLOW_WRAP;
          const FONT_STYLE = {
            ITALIC: 'italic',
            NORMAL: 'normal'
          };
          exports.FONT_STYLE = FONT_STYLE;
          const SEVERITIES = {
            DANGER: 'danger',
            WARNING: 'warning',
            INFO: 'info',
            SUCCESS: 'success'
          };
          exports.SEVERITIES = SEVERITIES;
          const RESIZE = {
            NONE: 'none',
            BOTH: 'both',
            HORIZONTAL: 'horizontal',
            VERTICAL: 'vertical',
            INITIAL: 'initial',
            INHERIT: 'inherit'
          };
          exports.RESIZE = RESIZE;
          const BREAKPOINTS = ['base', 'sm', 'md', 'lg'];
          exports.BREAKPOINTS = BREAKPOINTS;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\error-keys.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\error-keys.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.UNSENDABLE_ASSET_ERROR_KEY = exports.TRANSACTION_ERROR_KEY = exports.INVALID_ASSET_TYPE = exports.INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = exports.INSUFFICIENT_FUNDS_ERROR_KEY = exports.GAS_PRICE_FETCH_FAILURE_ERROR_KEY = exports.GAS_PRICE_EXCESSIVE_ERROR_KEY = exports.GAS_LIMIT_TOO_LOW_ERROR_KEY = exports.ETH_GAS_PRICE_FETCH_WARNING_KEY = void 0;
          const INSUFFICIENT_FUNDS_ERROR_KEY = 'insufficientFunds';
          exports.INSUFFICIENT_FUNDS_ERROR_KEY = INSUFFICIENT_FUNDS_ERROR_KEY;
          const GAS_LIMIT_TOO_LOW_ERROR_KEY = 'gasLimitTooLow';
          exports.GAS_LIMIT_TOO_LOW_ERROR_KEY = GAS_LIMIT_TOO_LOW_ERROR_KEY;
          const TRANSACTION_ERROR_KEY = 'transactionError';
          exports.TRANSACTION_ERROR_KEY = TRANSACTION_ERROR_KEY;
          const ETH_GAS_PRICE_FETCH_WARNING_KEY = 'ethGasPriceFetchWarning';
          exports.ETH_GAS_PRICE_FETCH_WARNING_KEY = ETH_GAS_PRICE_FETCH_WARNING_KEY;
          const GAS_PRICE_FETCH_FAILURE_ERROR_KEY = 'gasPriceFetchFailed';
          exports.GAS_PRICE_FETCH_FAILURE_ERROR_KEY = GAS_PRICE_FETCH_FAILURE_ERROR_KEY;
          const GAS_PRICE_EXCESSIVE_ERROR_KEY = 'gasPriceExcessive';
          exports.GAS_PRICE_EXCESSIVE_ERROR_KEY = GAS_PRICE_EXCESSIVE_ERROR_KEY;
          const UNSENDABLE_ASSET_ERROR_KEY = 'unsendableAsset';
          exports.UNSENDABLE_ASSET_ERROR_KEY = UNSENDABLE_ASSET_ERROR_KEY;
          const INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = 'insufficientFundsForGas';
          exports.INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY;
          const INVALID_ASSET_TYPE = 'invalidAssetType';
          exports.INVALID_ASSET_TYPE = INVALID_ASSET_TYPE;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\routes.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.VIEW_QUOTE_ROUTE = exports.UNLOCK_ROUTE = exports.TOKEN_DETAILS = exports.SWAPS_ROUTE = exports.SWAPS_MAINTENANCE_ROUTE = exports.SWAPS_ERROR_ROUTE = exports.SNAPS_VIEW_ROUTE = exports.SNAPS_LIST_ROUTE = exports.SMART_TRANSACTION_STATUS_ROUTE = exports.SIGNATURE_REQUEST_PATH = exports.SETTINGS_ROUTE = exports.SEND_ROUTE = exports.SECURITY_ROUTE = exports.REVEAL_SEED_ROUTE = exports.RESTORE_VAULT_ROUTE = exports.PATH_NAME_MAP = exports.ONBOARDING_WELCOME_ROUTE = exports.ONBOARDING_UNLOCK_ROUTE = exports.ONBOARDING_SECURE_YOUR_WALLET_ROUTE = exports.ONBOARDING_ROUTE = exports.ONBOARDING_REVIEW_SRP_ROUTE = exports.ONBOARDING_PRIVACY_SETTINGS_ROUTE = exports.ONBOARDING_PIN_EXTENSION_ROUTE = exports.ONBOARDING_METAMETRICS = exports.ONBOARDING_IMPORT_WITH_SRP_ROUTE = exports.ONBOARDING_IMPORT_MOBILE_ROUTE = exports.ONBOARDING_HELP_US_IMPROVE_ROUTE = exports.ONBOARDING_CREATE_PASSWORD_ROUTE = exports.ONBOARDING_CONFIRM_SRP_ROUTE = exports.ONBOARDING_COMPLETION_ROUTE = exports.NEW_ACCOUNT_ROUTE = exports.NETWORKS_ROUTE = exports.NETWORKS_FORM_ROUTE = exports.MOBILE_SYNC_ROUTE = exports.LOCK_ROUTE = exports.LOADING_QUOTES_ROUTE = exports.INITIALIZE_WELCOME_ROUTE = exports.INITIALIZE_UNLOCK_ROUTE = exports.INITIALIZE_SELECT_ACTION_ROUTE = exports.INITIALIZE_SEED_PHRASE_ROUTE = exports.INITIALIZE_SEED_PHRASE_INTRO_ROUTE = exports.INITIALIZE_ROUTE = exports.INITIALIZE_METAMETRICS_OPT_IN_ROUTE = exports.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE = exports.INITIALIZE_END_OF_FLOW_ROUTE = exports.INITIALIZE_CREATE_PASSWORD_ROUTE = exports.INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE = exports.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE = exports.IMPORT_TOKEN_ROUTE = exports.IMPORT_ACCOUNT_ROUTE = exports.GENERAL_ROUTE = exports.EXPERIMENTAL_ROUTE = exports.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = exports.DEFAULT_ROUTE = exports.DECRYPT_MESSAGE_REQUEST_PATH = exports.CONTACT_VIEW_ROUTE = exports.CONTACT_LIST_ROUTE = exports.CONTACT_EDIT_ROUTE = exports.CONTACT_ADD_ROUTE = exports.CONNECT_ROUTE = exports.CONNECT_HARDWARE_ROUTE = exports.CONNECT_CONFIRM_PERMISSIONS_ROUTE = exports.CONNECTED_ROUTE = exports.CONNECTED_ACCOUNTS_ROUTE = exports.CONFIRM_TRANSFER_FROM_PATH = exports.CONFIRM_TRANSACTION_ROUTE = exports.CONFIRM_TOKEN_METHOD_PATH = exports.CONFIRM_SET_APPROVAL_FOR_ALL_PATH = exports.CONFIRM_SEND_TOKEN_PATH = exports.CONFIRM_SEND_ETHER_PATH = exports.CONFIRM_SAFE_TRANSFER_FROM_PATH = exports.CONFIRM_IMPORT_TOKEN_ROUTE = exports.CONFIRM_DEPLOY_CONTRACT_PATH = exports.CONFIRM_APPROVE_PATH = exports.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = exports.CONFIRMATION_V_NEXT_ROUTE = exports.BUILD_QUOTE_ROUTE = exports.AWAITING_SWAP_ROUTE = exports.AWAITING_SIGNATURES_ROUTE = exports.ASSET_ROUTE = exports.ALERTS_ROUTE = exports.ADVANCED_ROUTE = exports.ADD_POPULAR_CUSTOM_NETWORK = exports.ADD_NETWORK_ROUTE = exports.ADD_COLLECTIBLE_ROUTE = exports.ABOUT_US_ROUTE = void 0;
          const DEFAULT_ROUTE = '/';
          exports.DEFAULT_ROUTE = DEFAULT_ROUTE;
          const UNLOCK_ROUTE = '/unlock';
          exports.UNLOCK_ROUTE = UNLOCK_ROUTE;
          const LOCK_ROUTE = '/lock';
          exports.LOCK_ROUTE = LOCK_ROUTE;
          const ASSET_ROUTE = '/asset';
          exports.ASSET_ROUTE = ASSET_ROUTE;
          const SETTINGS_ROUTE = '/settings';
          exports.SETTINGS_ROUTE = SETTINGS_ROUTE;
          const GENERAL_ROUTE = '/settings/general';
          exports.GENERAL_ROUTE = GENERAL_ROUTE;
          const ADVANCED_ROUTE = '/settings/advanced';
          exports.ADVANCED_ROUTE = ADVANCED_ROUTE;
          const EXPERIMENTAL_ROUTE = '/settings/experimental';
          exports.EXPERIMENTAL_ROUTE = EXPERIMENTAL_ROUTE;
          const SECURITY_ROUTE = '/settings/security';
          exports.SECURITY_ROUTE = SECURITY_ROUTE;
          const ABOUT_US_ROUTE = '/settings/about-us';
          exports.ABOUT_US_ROUTE = ABOUT_US_ROUTE;
          const ALERTS_ROUTE = '/settings/alerts';
          exports.ALERTS_ROUTE = ALERTS_ROUTE;
          const NETWORKS_ROUTE = '/settings/networks';
          exports.NETWORKS_ROUTE = NETWORKS_ROUTE;
          const NETWORKS_FORM_ROUTE = '/settings/networks/form';
          exports.NETWORKS_FORM_ROUTE = NETWORKS_FORM_ROUTE;
          const ADD_NETWORK_ROUTE = '/settings/networks/add-network';
          exports.ADD_NETWORK_ROUTE = ADD_NETWORK_ROUTE;
          const ADD_POPULAR_CUSTOM_NETWORK = '/settings/networks/add-popular-custom-network';
          exports.ADD_POPULAR_CUSTOM_NETWORK = ADD_POPULAR_CUSTOM_NETWORK;
          const SNAPS_LIST_ROUTE = '/settings/snaps-list';
          exports.SNAPS_LIST_ROUTE = SNAPS_LIST_ROUTE;
          const SNAPS_VIEW_ROUTE = '/settings/snaps-view';
          exports.SNAPS_VIEW_ROUTE = SNAPS_VIEW_ROUTE;
          const CONTACT_LIST_ROUTE = '/settings/contact-list';
          exports.CONTACT_LIST_ROUTE = CONTACT_LIST_ROUTE;
          const CONTACT_EDIT_ROUTE = '/settings/contact-list/edit-contact';
          exports.CONTACT_EDIT_ROUTE = CONTACT_EDIT_ROUTE;
          const CONTACT_ADD_ROUTE = '/settings/contact-list/add-contact';
          exports.CONTACT_ADD_ROUTE = CONTACT_ADD_ROUTE;
          const CONTACT_VIEW_ROUTE = '/settings/contact-list/view-contact';
          exports.CONTACT_VIEW_ROUTE = CONTACT_VIEW_ROUTE;
          const REVEAL_SEED_ROUTE = '/seed';
          exports.REVEAL_SEED_ROUTE = REVEAL_SEED_ROUTE;
          const MOBILE_SYNC_ROUTE = '/mobile-sync';
          exports.MOBILE_SYNC_ROUTE = MOBILE_SYNC_ROUTE;
          const RESTORE_VAULT_ROUTE = '/restore-vault';
          exports.RESTORE_VAULT_ROUTE = RESTORE_VAULT_ROUTE;
          const IMPORT_TOKEN_ROUTE = '/import-token';
          exports.IMPORT_TOKEN_ROUTE = IMPORT_TOKEN_ROUTE;
          const CONFIRM_IMPORT_TOKEN_ROUTE = '/confirm-import-token';
          exports.CONFIRM_IMPORT_TOKEN_ROUTE = CONFIRM_IMPORT_TOKEN_ROUTE;
          const CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = '/confirm-add-suggested-token';
          exports.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE;
          const NEW_ACCOUNT_ROUTE = '/new-account';
          exports.NEW_ACCOUNT_ROUTE = NEW_ACCOUNT_ROUTE;
          const IMPORT_ACCOUNT_ROUTE = '/new-account/import';
          exports.IMPORT_ACCOUNT_ROUTE = IMPORT_ACCOUNT_ROUTE;
          const CONNECT_HARDWARE_ROUTE = '/new-account/connect';
          exports.CONNECT_HARDWARE_ROUTE = CONNECT_HARDWARE_ROUTE;
          const SEND_ROUTE = '/send';
          exports.SEND_ROUTE = SEND_ROUTE;
          const TOKEN_DETAILS = '/token-details';
          exports.TOKEN_DETAILS = TOKEN_DETAILS;
          const CONNECT_ROUTE = '/connect';
          exports.CONNECT_ROUTE = CONNECT_ROUTE;
          const CONNECT_CONFIRM_PERMISSIONS_ROUTE = '/confirm-permissions';
          exports.CONNECT_CONFIRM_PERMISSIONS_ROUTE = CONNECT_CONFIRM_PERMISSIONS_ROUTE;
          const CONNECTED_ROUTE = '/connected';
          exports.CONNECTED_ROUTE = CONNECTED_ROUTE;
          const CONNECTED_ACCOUNTS_ROUTE = '/connected/accounts';
          exports.CONNECTED_ACCOUNTS_ROUTE = CONNECTED_ACCOUNTS_ROUTE;
          const SWAPS_ROUTE = '/swaps';
          exports.SWAPS_ROUTE = SWAPS_ROUTE;
          const BUILD_QUOTE_ROUTE = '/swaps/build-quote';
          exports.BUILD_QUOTE_ROUTE = BUILD_QUOTE_ROUTE;
          const VIEW_QUOTE_ROUTE = '/swaps/view-quote';
          exports.VIEW_QUOTE_ROUTE = VIEW_QUOTE_ROUTE;
          const LOADING_QUOTES_ROUTE = '/swaps/loading-quotes';
          exports.LOADING_QUOTES_ROUTE = LOADING_QUOTES_ROUTE;
          const AWAITING_SIGNATURES_ROUTE = '/swaps/awaiting-signatures';
          exports.AWAITING_SIGNATURES_ROUTE = AWAITING_SIGNATURES_ROUTE;
          const SMART_TRANSACTION_STATUS_ROUTE = '/swaps/smart-transaction-status';
          exports.SMART_TRANSACTION_STATUS_ROUTE = SMART_TRANSACTION_STATUS_ROUTE;
          const AWAITING_SWAP_ROUTE = '/swaps/awaiting-swap';
          exports.AWAITING_SWAP_ROUTE = AWAITING_SWAP_ROUTE;
          const SWAPS_ERROR_ROUTE = '/swaps/swaps-error';
          exports.SWAPS_ERROR_ROUTE = SWAPS_ERROR_ROUTE;
          const SWAPS_MAINTENANCE_ROUTE = '/swaps/maintenance';
          exports.SWAPS_MAINTENANCE_ROUTE = SWAPS_MAINTENANCE_ROUTE;
          const ADD_COLLECTIBLE_ROUTE = '/add-collectible';
          exports.ADD_COLLECTIBLE_ROUTE = ADD_COLLECTIBLE_ROUTE;
          const INITIALIZE_ROUTE = '/initialize';
          exports.INITIALIZE_ROUTE = INITIALIZE_ROUTE;
          const INITIALIZE_WELCOME_ROUTE = '/initialize/welcome';
          exports.INITIALIZE_WELCOME_ROUTE = INITIALIZE_WELCOME_ROUTE;
          const INITIALIZE_UNLOCK_ROUTE = '/initialize/unlock';
          exports.INITIALIZE_UNLOCK_ROUTE = INITIALIZE_UNLOCK_ROUTE;
          const INITIALIZE_CREATE_PASSWORD_ROUTE = '/initialize/create-password';
          exports.INITIALIZE_CREATE_PASSWORD_ROUTE = INITIALIZE_CREATE_PASSWORD_ROUTE;
          const INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE = '/initialize/create-password/import-with-seed-phrase';
          exports.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE = INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE;
          const INITIALIZE_SELECT_ACTION_ROUTE = '/initialize/select-action';
          exports.INITIALIZE_SELECT_ACTION_ROUTE = INITIALIZE_SELECT_ACTION_ROUTE;
          const INITIALIZE_SEED_PHRASE_ROUTE = '/initialize/seed-phrase';
          exports.INITIALIZE_SEED_PHRASE_ROUTE = INITIALIZE_SEED_PHRASE_ROUTE;
          const INITIALIZE_BACKUP_SEED_PHRASE_ROUTE = '/initialize/backup-seed-phrase';
          exports.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE = INITIALIZE_BACKUP_SEED_PHRASE_ROUTE;
          const INITIALIZE_SEED_PHRASE_INTRO_ROUTE = '/initialize/seed-phrase-intro';
          exports.INITIALIZE_SEED_PHRASE_INTRO_ROUTE = INITIALIZE_SEED_PHRASE_INTRO_ROUTE;
          const INITIALIZE_END_OF_FLOW_ROUTE = '/initialize/end-of-flow';
          exports.INITIALIZE_END_OF_FLOW_ROUTE = INITIALIZE_END_OF_FLOW_ROUTE;
          const INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE = '/initialize/seed-phrase/confirm';
          exports.INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE = INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE;
          const INITIALIZE_METAMETRICS_OPT_IN_ROUTE = '/initialize/metametrics-opt-in';
          exports.INITIALIZE_METAMETRICS_OPT_IN_ROUTE = INITIALIZE_METAMETRICS_OPT_IN_ROUTE;
          const ONBOARDING_ROUTE = '/onboarding';
          exports.ONBOARDING_ROUTE = ONBOARDING_ROUTE;
          const ONBOARDING_REVIEW_SRP_ROUTE = '/onboarding/review-recovery-phrase';
          exports.ONBOARDING_REVIEW_SRP_ROUTE = ONBOARDING_REVIEW_SRP_ROUTE;
          const ONBOARDING_CONFIRM_SRP_ROUTE = '/onboarding/confirm-recovery-phrase';
          exports.ONBOARDING_CONFIRM_SRP_ROUTE = ONBOARDING_CONFIRM_SRP_ROUTE;
          const ONBOARDING_CREATE_PASSWORD_ROUTE = '/onboarding/create-password';
          exports.ONBOARDING_CREATE_PASSWORD_ROUTE = ONBOARDING_CREATE_PASSWORD_ROUTE;
          const ONBOARDING_COMPLETION_ROUTE = '/onboarding/completion';
          exports.ONBOARDING_COMPLETION_ROUTE = ONBOARDING_COMPLETION_ROUTE;
          const ONBOARDING_UNLOCK_ROUTE = '/onboarding/unlock';
          exports.ONBOARDING_UNLOCK_ROUTE = ONBOARDING_UNLOCK_ROUTE;
          const ONBOARDING_HELP_US_IMPROVE_ROUTE = '/onboarding/help-us-improve';
          exports.ONBOARDING_HELP_US_IMPROVE_ROUTE = ONBOARDING_HELP_US_IMPROVE_ROUTE;
          const ONBOARDING_IMPORT_WITH_SRP_ROUTE = '/onboarding/import-with-recovery-phrase';
          exports.ONBOARDING_IMPORT_WITH_SRP_ROUTE = ONBOARDING_IMPORT_WITH_SRP_ROUTE;
          const ONBOARDING_IMPORT_MOBILE_ROUTE = '/onboarding/import-mobile';
          exports.ONBOARDING_IMPORT_MOBILE_ROUTE = ONBOARDING_IMPORT_MOBILE_ROUTE;
          const ONBOARDING_SECURE_YOUR_WALLET_ROUTE = '/onboarding/secure-your-wallet';
          exports.ONBOARDING_SECURE_YOUR_WALLET_ROUTE = ONBOARDING_SECURE_YOUR_WALLET_ROUTE;
          const ONBOARDING_PRIVACY_SETTINGS_ROUTE = '/onboarding/privacy-settings';
          exports.ONBOARDING_PRIVACY_SETTINGS_ROUTE = ONBOARDING_PRIVACY_SETTINGS_ROUTE;
          const ONBOARDING_PIN_EXTENSION_ROUTE = '/onboarding/pin-extension';
          exports.ONBOARDING_PIN_EXTENSION_ROUTE = ONBOARDING_PIN_EXTENSION_ROUTE;
          const ONBOARDING_WELCOME_ROUTE = '/onboarding/welcome';
          exports.ONBOARDING_WELCOME_ROUTE = ONBOARDING_WELCOME_ROUTE;
          const ONBOARDING_METAMETRICS = '/onboarding/metametrics';
          exports.ONBOARDING_METAMETRICS = ONBOARDING_METAMETRICS;
          const CONFIRM_TRANSACTION_ROUTE = '/confirm-transaction';
          exports.CONFIRM_TRANSACTION_ROUTE = CONFIRM_TRANSACTION_ROUTE;
          const CONFIRM_SEND_ETHER_PATH = '/send-ether';
          exports.CONFIRM_SEND_ETHER_PATH = CONFIRM_SEND_ETHER_PATH;
          const CONFIRM_SEND_TOKEN_PATH = '/send-token';
          exports.CONFIRM_SEND_TOKEN_PATH = CONFIRM_SEND_TOKEN_PATH;
          const CONFIRM_DEPLOY_CONTRACT_PATH = '/deploy-contract';
          exports.CONFIRM_DEPLOY_CONTRACT_PATH = CONFIRM_DEPLOY_CONTRACT_PATH;
          const CONFIRM_APPROVE_PATH = '/approve';
          exports.CONFIRM_APPROVE_PATH = CONFIRM_APPROVE_PATH;
          const CONFIRM_SET_APPROVAL_FOR_ALL_PATH = '/set-approval-for-all';
          exports.CONFIRM_SET_APPROVAL_FOR_ALL_PATH = CONFIRM_SET_APPROVAL_FOR_ALL_PATH;
          const CONFIRM_TRANSFER_FROM_PATH = '/transfer-from';
          exports.CONFIRM_TRANSFER_FROM_PATH = CONFIRM_TRANSFER_FROM_PATH;
          const CONFIRM_SAFE_TRANSFER_FROM_PATH = '/safe-transfer-from';
          exports.CONFIRM_SAFE_TRANSFER_FROM_PATH = CONFIRM_SAFE_TRANSFER_FROM_PATH;
          const CONFIRM_TOKEN_METHOD_PATH = '/token-method';
          exports.CONFIRM_TOKEN_METHOD_PATH = CONFIRM_TOKEN_METHOD_PATH;
          const SIGNATURE_REQUEST_PATH = '/signature-request';
          exports.SIGNATURE_REQUEST_PATH = SIGNATURE_REQUEST_PATH;
          const DECRYPT_MESSAGE_REQUEST_PATH = '/decrypt-message-request';
          exports.DECRYPT_MESSAGE_REQUEST_PATH = DECRYPT_MESSAGE_REQUEST_PATH;
          const ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = '/encryption-public-key-request';
          exports.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = ENCRYPTION_PUBLIC_KEY_REQUEST_PATH;
          const CONFIRMATION_V_NEXT_ROUTE = '/confirmation'; // Used to pull a convenient name for analytics tracking events. The key must
          // be react-router ready path, and can include params such as :id for popup windows

          exports.CONFIRMATION_V_NEXT_ROUTE = CONFIRMATION_V_NEXT_ROUTE;
          const PATH_NAME_MAP = {
            [DEFAULT_ROUTE]: 'Home',
            [UNLOCK_ROUTE]: 'Unlock Page',
            [LOCK_ROUTE]: 'Lock Page',
            [`${ASSET_ROUTE}/:asset/:id`]: `Asset Page`,
            [SETTINGS_ROUTE]: 'Settings Page',
            [GENERAL_ROUTE]: 'General Settings Page',
            [ADVANCED_ROUTE]: 'Advanced Settings Page',
            [EXPERIMENTAL_ROUTE]: 'Experimental Settings Page',
            [SECURITY_ROUTE]: 'Security Settings Page',
            [ABOUT_US_ROUTE]: 'About Us Page',
            [ALERTS_ROUTE]: 'Alerts Settings Page',
            [NETWORKS_ROUTE]: 'Network Settings Page',
            [NETWORKS_FORM_ROUTE]: 'Network Settings Page Form',
            [ADD_NETWORK_ROUTE]: 'Add Network From Settings Page Form',
            [ADD_POPULAR_CUSTOM_NETWORK]: 'Add Network From A List Of Popular Custom Networks',
            [CONTACT_LIST_ROUTE]: 'Contact List Settings Page',
            [`${CONTACT_EDIT_ROUTE}/:address`]: 'Edit Contact Settings Page',
            [CONTACT_ADD_ROUTE]: 'Add Contact Settings Page',
            [`${CONTACT_VIEW_ROUTE}/:address`]: 'View Contact Settings Page',
            [REVEAL_SEED_ROUTE]: 'Reveal Secret Recovery Phrase Page',
            [MOBILE_SYNC_ROUTE]: 'Sync With Mobile Page',
            [RESTORE_VAULT_ROUTE]: 'Restore Vault Page',
            [IMPORT_TOKEN_ROUTE]: 'Import Token Page',
            [CONFIRM_IMPORT_TOKEN_ROUTE]: 'Confirm Import Token Page',
            [CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE]: 'Confirm Add Suggested Token Page',
            [NEW_ACCOUNT_ROUTE]: 'New Account Page',
            [IMPORT_ACCOUNT_ROUTE]: 'Import Account Page',
            [CONNECT_HARDWARE_ROUTE]: 'Connect Hardware Wallet Page',
            [SEND_ROUTE]: 'Send Page',
            [`${TOKEN_DETAILS}/:address`]: 'Token Details Page',
            [`${CONNECT_ROUTE}/:id`]: 'Connect To Site Confirmation Page',
            [`${CONNECT_ROUTE}/:id${CONNECT_CONFIRM_PERMISSIONS_ROUTE}`]: 'Grant Connected Site Permissions Confirmation Page',
            [CONNECTED_ROUTE]: 'Sites Connected To This Account Page',
            [CONNECTED_ACCOUNTS_ROUTE]: 'Accounts Connected To This Site Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id`]: 'Confirmation Root Page',
            [CONFIRM_TRANSACTION_ROUTE]: 'Confirmation Root Page',
            // TODO: rename when this is the only confirmation page
            [CONFIRMATION_V_NEXT_ROUTE]: 'New Confirmation Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_TOKEN_METHOD_PATH}`]: 'Confirm Token Method Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SEND_ETHER_PATH}`]: 'Confirm Send Ether Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SEND_TOKEN_PATH}`]: 'Confirm Send Token Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_DEPLOY_CONTRACT_PATH}`]: 'Confirm Deploy Contract Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_APPROVE_PATH}`]: 'Confirm Approve Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`]: 'Confirm Set Approval For All Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_TRANSFER_FROM_PATH}`]: 'Confirm Transfer From Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SAFE_TRANSFER_FROM_PATH}`]: 'Confirm Safe Transfer From Transaction Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${SIGNATURE_REQUEST_PATH}`]: 'Signature Request Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${DECRYPT_MESSAGE_REQUEST_PATH}`]: 'Decrypt Message Request Page',
            [`${CONFIRM_TRANSACTION_ROUTE}/:id${ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`]: 'Encryption Public Key Request Page',
            [INITIALIZE_ROUTE]: 'Initialization Page',
            [INITIALIZE_WELCOME_ROUTE]: 'Install Welcome Page',
            [INITIALIZE_UNLOCK_ROUTE]: 'Initialization Unlock page',
            [INITIALIZE_CREATE_PASSWORD_ROUTE]: 'Initialization Create Password Page',
            [INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE]: 'Initialization Import Account With Secret Recovery Phrase Page',
            [INITIALIZE_SELECT_ACTION_ROUTE]: 'Initialization Choose Restore or New Account Page',
            [INITIALIZE_SEED_PHRASE_ROUTE]: 'Initialization Secret Recovery Phrase Page',
            [INITIALIZE_BACKUP_SEED_PHRASE_ROUTE]: 'Initialization Backup Secret Recovery Phrase Page',
            [INITIALIZE_SEED_PHRASE_INTRO_ROUTE]: 'Initialization Secret Recovery Phrase Intro Page',
            [INITIALIZE_END_OF_FLOW_ROUTE]: 'End of Initialization Page',
            [INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE]: 'Initialization Confirm Secret Recovery Phrase Page',
            [INITIALIZE_METAMETRICS_OPT_IN_ROUTE]: 'MetaMetrics Opt In Page',
            [BUILD_QUOTE_ROUTE]: 'Swaps Build Quote Page',
            [VIEW_QUOTE_ROUTE]: 'Swaps View Quotes Page',
            [LOADING_QUOTES_ROUTE]: 'Swaps Loading Quotes Page',
            [AWAITING_SWAP_ROUTE]: 'Swaps Awaiting Swaps Page',
            [SWAPS_ERROR_ROUTE]: 'Swaps Error Page'
          };
          exports.PATH_NAME_MAP = PATH_NAME_MAP;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\transactions.js", { "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\transactions.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TOKEN_CATEGORY_HASH = exports.PRIORITY_STATUS_HASH = exports.PENDING_STATUS_HASH = void 0;

          var _transaction = require("../../../shared/constants/transaction");

          const PENDING_STATUS_HASH = {
            [_transaction.TRANSACTION_STATUSES.UNAPPROVED]: true,
            [_transaction.TRANSACTION_STATUSES.APPROVED]: true,
            [_transaction.TRANSACTION_STATUSES.SUBMITTED]: true,
            [_transaction.TRANSACTION_STATUSES.PENDING]: true
          };
          exports.PENDING_STATUS_HASH = PENDING_STATUS_HASH;
          const PRIORITY_STATUS_HASH = {
            ...PENDING_STATUS_HASH,
            [_transaction.TRANSACTION_STATUSES.CONFIRMED]: true
          };
          exports.PRIORITY_STATUS_HASH = PRIORITY_STATUS_HASH;
          const TOKEN_CATEGORY_HASH = {
            [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE]: true,
            [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL]: true,
            [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER]: true,
            [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM]: true
          };
          exports.TOKEN_CATEGORY_HASH = TOKEN_CATEGORY_HASH;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\zendesk-url.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;
          const ZENDESK_URLS = {
            ADD_CUSTOM_TOKENS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489031',
            ADD_MISSING_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489271',
            BASIC_SAFETY: 'https://metamask.zendesk.com/hc/en-us/articles/360015489591-Basic-Safety-Tips',
            CUSTOMIZE_NONCE: 'https://metamask.zendesk.com/hc/en-us/articles/7417499333531-How-to-customize-a-transaction-nonce',
            HARDWARE_CONNECTION: 'https://metamask.zendesk.com/hc/en-us/articles/360020394612-How-to-connect-a-Trezor-or-Ledger-Hardware-Wallet',
            IMPORT_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489331',
            IMPORTED_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015289932',
            INFURA_BLOCKAGE: 'https://metamask.zendesk.com/hc/en-us/articles/360059386712',
            LEGACY_WEB3: 'https://metamask.zendesk.com/hc/en-us/articles/360053147012',
            NFT_TOKENS: 'https://metamask.zendesk.com/hc/en-us/articles/360058238591-NFT-tokens-in-MetaMask-wallet',
            PASSWORD_ARTICLE: 'https://metamask.zendesk.com/hc/en-us/articles/4404722782107',
            SECRET_RECOVERY_PHRASE: 'https://metamask.zendesk.com/hc/en-us/articles/360060826432-What-is-a-Secret-Recovery-Phrase-and-how-to-keep-your-crypto-wallet-secure',
            SPEEDUP_CANCEL: 'https://metamask.zendesk.com/hc/en-us/articles/360015489251-How-to-speed-up-or-cancel-a-pending-transaction',
            TOKEN_SAFETY_PRACTICES: 'https://metamask.zendesk.com/hc/en-us/articles/4403988839451',
            UNKNOWN_NETWORK: 'https://metamask.zendesk.com/hc/en-us/articles/4417500466971',
            USER_GUIDE_CUSTOM_NETWORKS: 'https://metamask.zendesk.com/hc/en-us/articles/4404424659995',
            USER_GUIDE_DAPPS: 'https://metamask.zendesk.com/hc/en-us/articles/4405506066331-User-guide-Dapps',
            USER_GUIDE_GAS: 'https://metamask.zendesk.com/hc/en-us/articles/4404600179227-User-Guide-Gas',
            VERIFY_CUSTOM_NETWORK: 'https://metamask.zendesk.com/hc/en-us/articles/360057142392'
          };
          var _default = ZENDESK_URLS;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js", { "../../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../../selectors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js", "currency-formatter": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\currency-formatter\\index.js", "currency-formatter/currencies": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\currency-formatter\\currencies.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\confirm-tx.util.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addEth = addEth;
          exports.addFiat = addFiat;
          exports.areDappSuggestedAndTxParamGasFeesTheSame = areDappSuggestedAndTxParamGasFeesTheSame;
          exports.convertTokenToFiat = convertTokenToFiat;
          exports.formatCurrency = formatCurrency;
          exports.getHexGasTotal = getHexGasTotal;
          exports.getTransactionFee = getTransactionFee;
          exports.getValueFromWeiHex = getValueFromWeiHex;
          exports.hasUnconfirmedTransactions = hasUnconfirmedTransactions;
          exports.hexGreaterThan = hexGreaterThan;
          exports.increaseLastGasPrice = increaseLastGasPrice;
          exports.roundExponential = roundExponential;

          var _currencyFormatter = _interopRequireDefault(require("currency-formatter"));

          var _currencies = _interopRequireDefault(require("currency-formatter/currencies"));

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var _util = require("../../../app/scripts/lib/util");

          var _selectors = require("../../selectors");

          var _conversion = require("../../../shared/modules/conversion.utils");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function increaseLastGasPrice(lastGasPrice) {
            return (0, _util.addHexPrefix)((0, _conversion.multiplyCurrencies)(lastGasPrice || '0x0', 1.1, {
              multiplicandBase: 16,
              multiplierBase: 10,
              toNumericBase: 'hex'
            }));
          }

          function hexGreaterThan(a, b) {
            return (0, _conversion.conversionGreaterThan)({
              value: a,
              fromNumericBase: 'hex'
            }, {
              value: b,
              fromNumericBase: 'hex'
            });
          }

          function getHexGasTotal({
            gasLimit,
            gasPrice
          }) {
            return (0, _util.addHexPrefix)((0, _conversion.multiplyCurrencies)(gasLimit || '0x0', gasPrice || '0x0', {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 16
            }));
          }

          function addEth(...args) {
            return args.reduce((acc, ethAmount) => {
              return (0, _conversion.addCurrencies)(acc, ethAmount, {
                toNumericBase: 'dec',
                numberOfDecimals: 6,
                aBase: 10,
                bBase: 10
              });
            });
          }

          function addFiat(...args) {
            return args.reduce((acc, fiatAmount) => {
              return (0, _conversion.addCurrencies)(acc, fiatAmount, {
                toNumericBase: 'dec',
                numberOfDecimals: 2,
                aBase: 10,
                bBase: 10
              });
            });
          }

          function getValueFromWeiHex({
            value,
            fromCurrency = 'ETH',
            toCurrency,
            conversionRate,
            numberOfDecimals,
            toDenomination
          }) {
            return (0, _conversion.conversionUtil)(value, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec',
              fromCurrency,
              toCurrency,
              numberOfDecimals,
              fromDenomination: 'WEI',
              toDenomination,
              conversionRate
            });
          }

          function getTransactionFee({
            value,
            fromCurrency = 'ETH',
            toCurrency,
            conversionRate,
            numberOfDecimals
          }) {
            return (0, _conversion.conversionUtil)(value, {
              fromNumericBase: 'BN',
              toNumericBase: 'dec',
              fromDenomination: 'WEI',
              fromCurrency,
              toCurrency,
              numberOfDecimals,
              conversionRate
            });
          }

          function formatCurrency(value, currencyCode) {
            const upperCaseCurrencyCode = currencyCode.toUpperCase();
            return _currencies.default.find(currency => currency.code === upperCaseCurrencyCode) ? _currencyFormatter.default.format(Number(value), {
              code: upperCaseCurrencyCode,
              style: 'currency'
            }) : value;
          }

          function convertTokenToFiat({
            value,
            fromCurrency = 'ETH',
            toCurrency,
            conversionRate,
            contractExchangeRate
          }) {
            const totalExchangeRate = conversionRate * contractExchangeRate;
            return (0, _conversion.conversionUtil)(value, {
              fromNumericBase: 'dec',
              toNumericBase: 'dec',
              fromCurrency,
              toCurrency,
              numberOfDecimals: 2,
              conversionRate: totalExchangeRate
            });
          }

          function hasUnconfirmedTransactions(state) {
            return (0, _selectors.unconfirmedTransactionsCountSelector)(state) > 0;
          }
          /**
           * Rounds the given decimal string to 4 significant digits.
           *
           * @param {string} decimalString - The base-ten number to round.
           * @returns {string} The rounded number, or the original number if no
           * rounding was necessary.
           */


          function roundExponential(decimalString) {
            const PRECISION = 4;
            const bigNumberValue = new _bignumber.default(decimalString); // In JS, numbers with exponentials greater than 20 get displayed as an exponential.

            return bigNumberValue.e > 20 ? bigNumberValue.toPrecision(PRECISION) : decimalString;
          }

          function areDappSuggestedAndTxParamGasFeesTheSame(txData = {}) {
            const {
              txParams,
              dappSuggestedGasFees
            } = txData;
            const {
              gasPrice: txParamsGasPrice,
              maxFeePerGas: txParamsMaxFeePerGas,
              maxPriorityFeePerGas: txParamsMaxPriorityFeePerGas
            } = txParams || {};
            const {
              gasPrice: dappGasPrice,
              maxFeePerGas: dappMaxFeePerGas,
              maxPriorityFeePerGas: dappMaxPriorityFeePerGas
            } = dappSuggestedGasFees || {};
            const txParamsDoesNotHaveFeeProperties = !txParamsGasPrice && !txParamsMaxFeePerGas && !txParamsMaxPriorityFeePerGas;
            const dappDidNotSuggestFeeProperties = !dappGasPrice && !dappMaxFeePerGas && !dappMaxPriorityFeePerGas;

            if (txParamsDoesNotHaveFeeProperties || dappDidNotSuggestFeeProperties) {
              return false;
            }

            const txParamsGasPriceMatchesDappSuggestedGasPrice = txParamsGasPrice && txParamsGasPrice === dappGasPrice;
            const txParamsEIP1559FeesMatchDappSuggestedGasPrice = [txParamsMaxFeePerGas, txParamsMaxPriorityFeePerGas].every(fee => fee === dappGasPrice);
            const txParamsEIP1559FeesMatchDappSuggestedEIP1559Fees = txParamsMaxFeePerGas && txParamsMaxFeePerGas === dappMaxFeePerGas && txParamsMaxPriorityFeePerGas === dappMaxPriorityFeePerGas;
            return txParamsGasPriceMatchesDappSuggestedGasPrice || txParamsEIP1559FeesMatchDappSuggestedGasPrice || txParamsEIP1559FeesMatchDappSuggestedEIP1559Fees;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js", { "../../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../constants/common": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js", "./confirm-tx.util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\conversions.util.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addHexWEIsToDec = addHexWEIsToDec;
          exports.addHexes = addHexes;
          exports.bnToHex = bnToHex;
          exports.decETHToDecWEI = decETHToDecWEI;
          exports.decEthToConvertedCurrency = decEthToConvertedCurrency;
          exports.decGWEIToHexWEI = decGWEIToHexWEI;
          exports.decWEIToDecETH = decWEIToDecETH;
          exports.getEthConversionFromWeiHex = getEthConversionFromWeiHex;
          exports.getValueFromWeiHex = getValueFromWeiHex;
          exports.getWeiHexFromDecimalValue = getWeiHexFromDecimalValue;
          exports.hexWEIToDecETH = hexWEIToDecETH;
          exports.subtractHexWEIsToDec = subtractHexWEIsToDec;
          exports.subtractHexes = subtractHexes;
          exports.sumHexWEIs = sumHexWEIs;
          exports.sumHexWEIsToRenderableFiat = sumHexWEIsToRenderableFiat;
          exports.sumHexWEIsToUnformattedFiat = sumHexWEIsToUnformattedFiat;

          var _common = require("../constants/common");

          var _util = require("../../../app/scripts/lib/util");

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _confirmTx = require("./confirm-tx.util");

          function bnToHex(inputBn) {
            return (0, _util.addHexPrefix)(inputBn.toString(16));
          }

          function getEthConversionFromWeiHex({
            value,
            fromCurrency = _common.ETH,
            conversionRate,
            numberOfDecimals = 6
          }) {
            const denominations = [fromCurrency, _common.GWEI, _common.WEI];
            let nonZeroDenomination;

            for (let i = 0; i < denominations.length; i++) {
              const convertedValue = getValueFromWeiHex({
                value,
                conversionRate,
                fromCurrency,
                toCurrency: fromCurrency,
                numberOfDecimals,
                toDenomination: denominations[i]
              });

              if (convertedValue !== '0' || i === denominations.length - 1) {
                nonZeroDenomination = `${convertedValue} ${denominations[i]}`;
                break;
              }
            }

            return nonZeroDenomination;
          }

          function getValueFromWeiHex({
            value,
            fromCurrency = _common.ETH,
            toCurrency,
            conversionRate,
            numberOfDecimals,
            toDenomination
          }) {
            return (0, _conversion.conversionUtil)(value, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec',
              fromCurrency,
              toCurrency,
              numberOfDecimals,
              fromDenomination: _common.WEI,
              toDenomination,
              conversionRate
            });
          }

          function getWeiHexFromDecimalValue({
            value,
            fromCurrency,
            conversionRate,
            fromDenomination,
            invertConversionRate
          }) {
            return (0, _conversion.conversionUtil)(value, {
              fromNumericBase: 'dec',
              toNumericBase: 'hex',
              toCurrency: _common.ETH,
              fromCurrency,
              conversionRate,
              invertConversionRate,
              fromDenomination,
              toDenomination: _common.WEI
            });
          }

          function addHexWEIsToDec(aHexWEI, bHexWEI) {
            return (0, _conversion.addCurrencies)(aHexWEI, bHexWEI, {
              aBase: 16,
              bBase: 16,
              fromDenomination: 'WEI',
              numberOfDecimals: 6
            });
          }

          function subtractHexWEIsToDec(aHexWEI, bHexWEI) {
            return (0, _conversion.subtractCurrencies)(aHexWEI, bHexWEI, {
              aBase: 16,
              bBase: 16,
              fromDenomination: 'WEI',
              numberOfDecimals: 6
            });
          }

          function decEthToConvertedCurrency(ethTotal, convertedCurrency, conversionRate) {
            return (0, _conversion.conversionUtil)(ethTotal, {
              fromNumericBase: 'dec',
              toNumericBase: 'dec',
              fromCurrency: 'ETH',
              toCurrency: convertedCurrency,
              numberOfDecimals: 2,
              conversionRate
            });
          }

          function decGWEIToHexWEI(decGWEI) {
            return (0, _conversion.conversionUtil)(decGWEI, {
              fromNumericBase: 'dec',
              toNumericBase: 'hex',
              fromDenomination: 'GWEI',
              toDenomination: 'WEI'
            });
          }

          function decETHToDecWEI(decEth) {
            return (0, _conversion.conversionUtil)(decEth, {
              fromNumericBase: 'dec',
              toNumericBase: 'dec',
              fromDenomination: 'ETH',
              toDenomination: 'WEI'
            });
          }

          function hexWEIToDecETH(hexWEI) {
            return (0, _conversion.conversionUtil)(hexWEI, {
              fromNumericBase: 'hex',
              toNumericBase: 'dec',
              fromDenomination: 'WEI',
              toDenomination: 'ETH'
            });
          }

          function decWEIToDecETH(hexWEI) {
            return (0, _conversion.conversionUtil)(hexWEI, {
              fromNumericBase: 'dec',
              toNumericBase: 'dec',
              fromDenomination: 'WEI',
              toDenomination: 'ETH'
            });
          }

          function addHexes(aHexWEI, bHexWEI) {
            return (0, _conversion.addCurrencies)(aHexWEI, bHexWEI, {
              aBase: 16,
              bBase: 16,
              toNumericBase: 'hex',
              numberOfDecimals: 6
            });
          }

          function subtractHexes(aHexWEI, bHexWEI) {
            return (0, _conversion.subtractCurrencies)(aHexWEI, bHexWEI, {
              aBase: 16,
              bBase: 16,
              toNumericBase: 'hex',
              numberOfDecimals: 6
            });
          }

          function sumHexWEIs(hexWEIs) {
            return hexWEIs.filter(Boolean).reduce(addHexes);
          }

          function sumHexWEIsToUnformattedFiat(hexWEIs, convertedCurrency, conversionRate) {
            const hexWEIsSum = sumHexWEIs(hexWEIs);
            const convertedTotal = decEthToConvertedCurrency(getValueFromWeiHex({
              value: hexWEIsSum,
              toCurrency: 'ETH',
              numberOfDecimals: 4
            }), convertedCurrency, conversionRate);
            return convertedTotal;
          }

          function sumHexWEIsToRenderableFiat(hexWEIs, convertedCurrency, conversionRate) {
            const convertedTotal = sumHexWEIsToUnformattedFiat(hexWEIs, convertedCurrency, conversionRate);
            return (0, _confirmTx.formatCurrency)(convertedTotal, convertedCurrency);
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\formatters.js", {}, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\formatters.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.formatETHFee = formatETHFee;

          // TODO: Rename to reflect that this function is used for more cases than ETH, and update all uses.
          function formatETHFee(ethFee, currencySymbol = 'ETH') {
            return `${ethFee} ${currencySymbol}`;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.js", { "../../../shared/modules/fetch-with-timeout": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\fetch-with-timeout.js", "@sentry/browser": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js", "react": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\i18n-helper.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.fetchLocale = fetchLocale;
          exports.getMessage = void 0;
          exports.loadRelativeTimeFormatLocaleData = loadRelativeTimeFormatLocaleData;

          var _react = _interopRequireDefault(require("react"));

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var Sentry = _interopRequireWildcard(require("@sentry/browser"));

          var _fetchWithTimeout = _interopRequireDefault(require("../../../shared/modules/fetch-with-timeout"));

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          // cross-browser connection to extension i18n API
          const fetchWithTimeout = (0, _fetchWithTimeout.default)();
          const warned = {};
          const missingMessageErrors = {};
          const missingSubstitutionErrors = {};
          /**
           * Returns a localized message for the given key
           *
           * @param {string} localeCode - The code for the current locale
           * @param {object} localeMessages - The map of messages for the current locale
           * @param {string} key - The message key
           * @param {string[]} substitutions - A list of message substitution replacements
           * @returns {null|string} The localized message
           */

          const getMessage = (localeCode, localeMessages, key, substitutions) => {
            if (!localeMessages) {
              return null;
            }

            if (!localeMessages[key]) {
              if (localeCode === 'en') {
                if (!missingMessageErrors[key]) {
                  missingMessageErrors[key] = new Error(`Unable to find value of key "${key}" for locale "${localeCode}"`);
                  Sentry.captureException(missingMessageErrors[key]);

                  _loglevel.default.error(missingMessageErrors[key]);

                  if (false) {
                    throw missingMessageErrors[key];
                  }
                }
              } else if (!warned[localeCode] || !warned[localeCode][key]) {
                if (!warned[localeCode]) {
                  warned[localeCode] = {};
                }

                warned[localeCode][key] = true;

                _loglevel.default.warn(`Translator - Unable to find value of key "${key}" for locale "${localeCode}"`);
              }

              return null;
            }

            const entry = localeMessages[key];
            let phrase = entry.message;
            const hasSubstitutions = Boolean(substitutions && substitutions.length);
            const hasReactSubstitutions = hasSubstitutions && substitutions.some(element => element !== null && (typeof element === 'function' || typeof element === 'object')); // perform substitutions

            if (hasSubstitutions) {
              const parts = phrase.split(/(\$\d)/gu);
              const substitutedParts = parts.map(part => {
                var _missingSubstitutionE;

                const subMatch = part.match(/\$(\d)/u);

                if (!subMatch) {
                  return part;
                }

                const substituteIndex = Number(subMatch[1]) - 1;

                if ((substitutions[substituteIndex] === null || substitutions[substituteIndex] === undefined) && !((_missingSubstitutionE = missingSubstitutionErrors[localeCode]) !== null && _missingSubstitutionE !== void 0 && _missingSubstitutionE[key])) {
                  if (!missingSubstitutionErrors[localeCode]) {
                    missingSubstitutionErrors[localeCode] = {};
                  }

                  missingSubstitutionErrors[localeCode][key] = true;
                  const error = new Error(`Insufficient number of substitutions for key "${key}" with locale "${localeCode}"`);

                  _loglevel.default.error(error);

                  Sentry.captureException(error);
                }

                return substitutions[substituteIndex];
              });
              phrase = hasReactSubstitutions ? /*#__PURE__*/_react.default.createElement("span", null, " ", substitutedParts, " ") : substitutedParts.join('');
            }

            return phrase;
          };

          exports.getMessage = getMessage;

          async function fetchLocale(localeCode) {
            try {
              const response = await fetchWithTimeout(`./_locales/${localeCode}/messages.json`);
              return await response.json();
            } catch (error) {
              _loglevel.default.error(`failed to fetch ${localeCode} locale because of ${error}`);

              return {};
            }
          }

          const relativeTimeFormatLocaleData = new Set();

          async function loadRelativeTimeFormatLocaleData(localeCode) {
            const languageTag = localeCode.split('_')[0];

            if (Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat.__addLocaleData === 'function' && !relativeTimeFormatLocaleData.has(languageTag)) {
              const localeData = await fetchRelativeTimeFormatData(languageTag);

              Intl.RelativeTimeFormat.__addLocaleData(localeData);
            }
          }

          async function fetchRelativeTimeFormatData(languageTag) {
            const response = await fetchWithTimeout(`./intl/${languageTag}/relative-time-format-data.json`);
            return await response.json();
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\moonpay.js", { "../../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\moonpay.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.formatMoonpaySymbol = void 0;

          var _network = require("../../../shared/constants/network");

          const formatMoonpaySymbol = (symbol, chainId = _network.CHAIN_IDS.MAINNET) => {
            if (!symbol) {
              return symbol;
            }

            let _symbol = symbol;

            if (chainId === _network.CHAIN_IDS.POLYGON || chainId === _network.CHAIN_IDS.BSC) {
              var _BUYABLE_CHAINS_MAP$c;

              _symbol = `${_symbol}_${_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c.network.toUpperCase()}`;
            } else if (chainId === _network.CHAIN_IDS.AVALANCHE) {
              _symbol = `${_symbol}_CCHAIN`;
            }

            return _symbol;
          };

          exports.formatMoonpaySymbol = formatMoonpaySymbol;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\buildUnserializedTransaction.js", { "../../../../shared/modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "@ethereumjs/common": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@ethereumjs\\common\\dist.browser\\index.js", "@ethereumjs/tx": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@ethereumjs\\tx\\dist.browser\\index.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\optimism\buildUnserializedTransaction.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = buildUnserializedTransaction;

          var _lodash = require("lodash");

          var _ethereumjsUtil = require("ethereumjs-util");

          var _common = _interopRequireWildcard(require("@ethereumjs/common"));

          var _tx = require("@ethereumjs/tx");

          var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function buildTxParams(txMeta) {
            return {
              ...(0, _lodash.omit)(txMeta.txParams, 'gas'),
              gasLimit: txMeta.txParams.gas
            };
          }

          function buildTransactionCommon(txMeta) {
            // This produces a transaction whose information does not completely match an
            // Optimism transaction — for instance, DEFAULT_CHAIN is still 'mainnet' and
            // genesis points to the mainnet genesis, not the Optimism genesis — but
            // considering that all we want to do is serialize a transaction, this works
            // fine for our use case.
            return _common.default.forCustomChain(_common.Chain.Mainnet, {
              chainId: new _ethereumjsUtil.BN((0, _hexstringUtils.stripHexPrefix)(txMeta.chainId), 16),
              networkId: new _ethereumjsUtil.BN(txMeta.metamaskNetworkId, 10),
              // Optimism only supports type-0 transactions; it does not support any of
              // the newer EIPs since EIP-155. Source:
              // <https://github.com/ethereum-optimism/optimism/blob/develop/specs/l2geth/transaction-types.md>
              defaultHardfork: _common.Hardfork.SpuriousDragon
            });
          }

          function buildUnserializedTransaction(txMeta) {
            const txParams = buildTxParams(txMeta);
            const common = buildTransactionCommon(txMeta);
            return _tx.TransactionFactory.fromTxData(txParams, {
              common
            });
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js", { "./buildUnserializedTransaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\buildUnserializedTransaction.js", "@eth-optimism/contracts/dist/contract-defs": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@eth-optimism\\contracts\\dist\\contract-defs.js", "@eth-optimism/contracts/dist/predeploys": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@eth-optimism\\contracts\\dist\\predeploys.js", "ethers": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethers\\lib\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\optimism\fetchEstimatedL1Fee.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = fetchEstimatedL1Fee;

          var ethers = _interopRequireWildcard(require("ethers"));

          var _contractDefs = require("@eth-optimism/contracts/dist/contract-defs");

          var _predeploys = require("@eth-optimism/contracts/dist/predeploys");

          var _buildUnserializedTransaction = _interopRequireDefault(require("./buildUnserializedTransaction"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          // The code in this file is largely drawn from https://community.optimism.io/docs/developers/l2/new-fees.html#for-frontend-and-wallet-developers
          function buildOVMGasPriceOracleContract(eth) {
            const OVMGasPriceOracle = (0, _contractDefs.getContractFactory)('OVM_GasPriceOracle').attach(_predeploys.predeploys.OVM_GasPriceOracle);
            const abi = JSON.parse(OVMGasPriceOracle.interface.format(ethers.utils.FormatTypes.json));
            return eth.contract(abi).at(OVMGasPriceOracle.address);
          }

          async function fetchEstimatedL1Fee(eth, txMeta) {
            var _result$;

            const contract = buildOVMGasPriceOracleContract(eth);
            const serializedTransaction = (0, _buildUnserializedTransaction.default)(txMeta).serialize();
            const result = await contract.getL1Fee(serializedTransaction);
            return result === null || result === void 0 ? void 0 : (_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.toString(16);
          }


        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js", { "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../../../shared/lib/metamask-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js", "../../../shared/lib/transactions-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../../../shared/modules/string-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js", "../../../shared/modules/transaction.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js", "../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "./confirm-tx.util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\token-util.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getAssetDetails = getAssetDetails;
          exports.getSymbolAndDecimals = getSymbolAndDecimals;
          exports.getTokenAddressParam = getTokenAddressParam;
          exports.getTokenApprovedParam = getTokenApprovedParam;
          exports.getTokenFiatAmount = getTokenFiatAmount;
          exports.getTokenIdParam = getTokenIdParam;
          exports.getTokenMetadata = getTokenMetadata;
          exports.tokenInfoGetter = tokenInfoGetter;

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _actions = require("../../store/actions");

          var _stringUtils = require("../../../shared/modules/string-utils");

          var _transaction = require("../../../shared/modules/transaction.utils");

          var _transaction2 = require("../../../shared/constants/transaction");

          var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");

          var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

          var util = _interopRequireWildcard(require("./util"));

          var _confirmTx = require("./confirm-tx.util");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const DEFAULT_SYMBOL = '';

          async function getSymbolFromContract(tokenAddress) {
            const token = util.getContractAtAddress(tokenAddress);

            try {
              const result = await token.symbol();
              return result[0];
            } catch (error) {
              _loglevel.default.warn(`symbol() call for token at address ${tokenAddress} resulted in error:`, error);

              return undefined;
            }
          }

          async function getDecimalsFromContract(tokenAddress) {
            const token = util.getContractAtAddress(tokenAddress);

            try {
              const result = await token.decimals();
              const decimalsBN = result[0];
              return decimalsBN === null || decimalsBN === void 0 ? void 0 : decimalsBN.toString();
            } catch (error) {
              _loglevel.default.warn(`decimals() call for token at address ${tokenAddress} resulted in error:`, error);

              return undefined;
            }
          }

          function getTokenMetadata(tokenAddress, tokenList) {
            return tokenAddress && tokenList[tokenAddress.toLowerCase()];
          }

          async function getSymbol(tokenAddress, tokenList) {
            let symbol = await getSymbolFromContract(tokenAddress);

            if (!symbol) {
              const contractMetadataInfo = getTokenMetadata(tokenAddress, tokenList);

              if (contractMetadataInfo) {
                symbol = contractMetadataInfo.symbol;
              }
            }

            return symbol;
          }

          async function getDecimals(tokenAddress, tokenList) {
            let decimals = await getDecimalsFromContract(tokenAddress);

            if (!decimals || decimals === '0') {
              const contractMetadataInfo = getTokenMetadata(tokenAddress, tokenList);

              if (contractMetadataInfo) {
                var _contractMetadataInfo;

                decimals = (_contractMetadataInfo = contractMetadataInfo.decimals) === null || _contractMetadataInfo === void 0 ? void 0 : _contractMetadataInfo.toString();
              }
            }

            return decimals;
          }

          async function getSymbolAndDecimals(tokenAddress, tokenList) {
            let symbol, decimals;

            try {
              symbol = await getSymbol(tokenAddress, tokenList);
              decimals = await getDecimals(tokenAddress, tokenList);
            } catch (error) {
              _loglevel.default.warn(`symbol() and decimal() calls for token at address ${tokenAddress} resulted in error:`, error);
            }

            return {
              symbol: symbol || DEFAULT_SYMBOL,
              decimals
            };
          }

          function tokenInfoGetter() {
            const tokens = {};
            return async (address, tokenList) => {
              if (tokens[address]) {
                return tokens[address];
              }

              tokens[address] = await getSymbolAndDecimals(address, tokenList);
              return tokens[address];
            };
          }
          /**
           * Attempts to get the address parameter of the given token transaction data
           * (i.e. function call) per the Human Standard Token ABI, in the following
           * order:
           *   - The '_to' parameter, if present
           *   - The first parameter, if present
           *
           * @param {object} tokenData - ethers Interface token data.
           * @returns {string | undefined} A lowercase address string.
           */


          function getTokenAddressParam(tokenData = {}) {
            var _tokenData$args, _tokenData$args2, _tokenData$args3;

            const value = (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args = tokenData.args) === null || _tokenData$args === void 0 ? void 0 : _tokenData$args._to) || (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args2 = tokenData.args) === null || _tokenData$args2 === void 0 ? void 0 : _tokenData$args2.to) || (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args3 = tokenData.args) === null || _tokenData$args3 === void 0 ? void 0 : _tokenData$args3[0]);
            return value === null || value === void 0 ? void 0 : value.toString().toLowerCase();
          }
          /**
           * Gets the '_value' parameter of the given token transaction data
           * (i.e function call) per the Human Standard Token ABI, if present.
           *
           * @param {object} tokenData - ethers Interface token data.
           * @returns {string | undefined} A decimal string value.
           */

          /**
           * Gets either the '_tokenId' parameter or the 'id' param of the passed token transaction data.,
           * These are the parsed tokenId values returned by `parseStandardTokenTransactionData` as defined
           * in the ERC721 and ERC1155 ABIs from metamask-eth-abis (https://github.com/MetaMask/metamask-eth-abis/tree/main/src/abis)
           *
           * @param {object} tokenData - ethers Interface token data.
           * @returns {string | undefined} A decimal string value.
           */


          function getTokenIdParam(tokenData = {}) {
            var _tokenData$args$_toke, _tokenData$args4, _tokenData$args4$_tok, _tokenData$args5, _tokenData$args5$id;

            return (_tokenData$args$_toke = tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args4 = tokenData.args) === null || _tokenData$args4 === void 0 ? void 0 : (_tokenData$args4$_tok = _tokenData$args4._tokenId) === null || _tokenData$args4$_tok === void 0 ? void 0 : _tokenData$args4$_tok.toString()) !== null && _tokenData$args$_toke !== void 0 ? _tokenData$args$_toke : tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args5 = tokenData.args) === null || _tokenData$args5 === void 0 ? void 0 : (_tokenData$args5$id = _tokenData$args5.id) === null || _tokenData$args5$id === void 0 ? void 0 : _tokenData$args5$id.toString();
          }
          /**
           * Gets the '_approved' parameter of the given token transaction data
           * (i.e function call) per the Human Standard Token ABI, if present.
           *
           * @param {object} tokenData - ethers Interface token data.
           * @returns {boolean | undefined} A boolean indicating whether the function is being called to approve or revoke access.
           */


          function getTokenApprovedParam(tokenData = {}) {
            var _tokenData$args6;

            return tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args6 = tokenData.args) === null || _tokenData$args6 === void 0 ? void 0 : _tokenData$args6._approved;
          }
          /**
           * Get the token balance converted to fiat and optionally formatted for display
           *
           * @param {number} [contractExchangeRate] - The exchange rate between the current token and the native currency
           * @param {number} conversionRate - The exchange rate between the current fiat currency and the native currency
           * @param {string} currentCurrency - The currency code for the user's chosen fiat currency
           * @param {string} [tokenAmount] - The current token balance
           * @param {string} [tokenSymbol] - The token symbol
           * @param {boolean} [formatted] - Whether the return value should be formatted or not
           * @param {boolean} [hideCurrencySymbol] - excludes the currency symbol in the result if true
           * @returns {string|undefined} The token amount in the user's chosen fiat currency, optionally formatted and localize
           */


          function getTokenFiatAmount(contractExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, formatted = true, hideCurrencySymbol = false) {
            // If the conversionRate is 0 (i.e. unknown) or the contract exchange rate
            // is currently unknown, the fiat amount cannot be calculated so it is not
            // shown to the user
            if (conversionRate <= 0 || !contractExchangeRate || tokenAmount === undefined) {
              return undefined;
            }

            const currentTokenToFiatRate = (0, _conversion.multiplyCurrencies)(contractExchangeRate, conversionRate, {
              multiplicandBase: 10,
              multiplierBase: 10
            });
            const currentTokenInFiat = (0, _conversion.conversionUtil)(tokenAmount, {
              fromNumericBase: 'dec',
              fromCurrency: tokenSymbol,
              toCurrency: currentCurrency.toUpperCase(),
              numberOfDecimals: 2,
              conversionRate: currentTokenToFiatRate
            });
            let result;

            if (hideCurrencySymbol) {
              result = (0, _confirmTx.formatCurrency)(currentTokenInFiat, currentCurrency);
            } else if (formatted) {
              result = `${(0, _confirmTx.formatCurrency)(currentTokenInFiat, currentCurrency)} ${currentCurrency.toUpperCase()}`;
            } else {
              result = currentTokenInFiat;
            }

            return result;
          }

          async function getAssetDetails(tokenAddress, currentUserAddress, transactionData, existingCollectibles) {
            var _getTokenIdParam$toSt, _getTokenIdParam, _tokenDetails, _tokenDetails2, _tokenDetails3, _tokenDetails$decimal, _tokenDetails4;

            const tokenData = (0, _transaction.parseStandardTokenTransactionData)(transactionData);

            if (!tokenData) {
              throw new Error('Unable to detect valid token data');
            } // Sometimes the tokenId value is parsed as "_value" param. Not seeing this often any more, but still occasionally:
            // i.e. call approve() on BAYC contract - https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#writeContract, and tokenId shows up as _value,
            // not sure why since it doesn't match the ERC721 ABI spec we use to parse these transactions - https://github.com/MetaMask/metamask-eth-abis/blob/d0474308a288f9252597b7c93a3a8deaad19e1b2/src/abis/abiERC721.ts#L62.


            let tokenId = (_getTokenIdParam$toSt = (_getTokenIdParam = getTokenIdParam(tokenData)) === null || _getTokenIdParam === void 0 ? void 0 : _getTokenIdParam.toString()) !== null && _getTokenIdParam$toSt !== void 0 ? _getTokenIdParam$toSt : (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
            const toAddress = getTokenAddressParam(tokenData);
            let tokenDetails; // if a tokenId is present check if there is a collectible in state matching the address/tokenId
            // and avoid unnecessary network requests to query token details we already have

            if (existingCollectibles !== null && existingCollectibles !== void 0 && existingCollectibles.length && tokenId) {
              const existingCollectible = existingCollectibles.find(({
                address,
                tokenId: _tokenId
              }) => (0, _stringUtils.isEqualCaseInsensitive)(tokenAddress, address) && _tokenId === tokenId);

              if (existingCollectible) {
                return {
                  toAddress,
                  ...existingCollectible
                };
              }
            }

            try {
              tokenDetails = await (0, _actions.getTokenStandardAndDetails)(tokenAddress, currentUserAddress, tokenId);
            } catch (error) {
              _loglevel.default.warn(error); // if we can't determine any token standard or details return the data we can extract purely from the parsed transaction data


              return {
                toAddress,
                tokenId
              };
            }

            const tokenAmount = tokenData && ((_tokenDetails = tokenDetails) === null || _tokenDetails === void 0 ? void 0 : _tokenDetails.decimals) && (0, _transactionsControllerUtils.calcTokenAmount)((0, _metamaskControllerUtils.getTokenValueParam)(tokenData), (_tokenDetails2 = tokenDetails) === null || _tokenDetails2 === void 0 ? void 0 : _tokenDetails2.decimals).toString(10);
            const decimals = ((_tokenDetails3 = tokenDetails) === null || _tokenDetails3 === void 0 ? void 0 : _tokenDetails3.decimals) && Number((_tokenDetails$decimal = tokenDetails.decimals) === null || _tokenDetails$decimal === void 0 ? void 0 : _tokenDetails$decimal.toString(10));

            if (((_tokenDetails4 = tokenDetails) === null || _tokenDetails4 === void 0 ? void 0 : _tokenDetails4.standard) === _transaction2.ERC20) {
              tokenId = undefined;
            } // else if not a collectible already in state or standard === ERC20 return tokenDetails and tokenId


            return {
              tokenAmount,
              toAddress,
              decimals,
              tokenId,
              ...tokenDetails
            };
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js", { "../../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../../../shared/lib/fetch-with-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js", "../../../shared/modules/contract-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\contract-utils.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "eth-method-registry": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-method-registry\\dist\\index.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\transactions.util.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getFourBytePrefix = getFourBytePrefix;
          exports.getLatestSubmittedTxWithNonce = getLatestSubmittedTxWithNonce;
          exports.getMethodDataAsync = getMethodDataAsync;
          exports.getStatusKey = getStatusKey;
          exports.getTransactionTypeTitle = getTransactionTypeTitle;
          exports.isLegacyTransaction = isLegacyTransaction;
          exports.isSmartContractAddress = isSmartContractAddress;
          exports.isTokenMethodAction = isTokenMethodAction;
          exports.sumHexes = sumHexes;

          var _ethMethodRegistry = require("eth-method-registry");

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _util = require("../../../app/scripts/lib/util");

          var _transaction = require("../../../shared/constants/transaction");

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _contractUtils = require("../../../shared/modules/contract-utils");

          var _fetchWithCache = _interopRequireDefault(require("../../../shared/lib/fetch-with-cache"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          /**
           * @typedef EthersContractCall
           * @type object
           * @property {any[]} args - The args/params to the function call.
           * An array-like object with numerical and string indices.
           * @property {string} name - The name of the function.
           * @property {string} signature - The function signature.
           * @property {string} sighash - The function signature hash.
           * @property {EthersBigNumber} value - The ETH value associated with the call.
           * @property {FunctionFragment} functionFragment - The Ethers function fragment
           * representation of the function.
           */
          async function getMethodFrom4Byte(fourBytePrefix) {
            const fourByteResponse = await (0, _fetchWithCache.default)(`https://www.4byte.directory/api/v1/signatures/?hex_signature=${fourBytePrefix}`, {
              referrerPolicy: 'no-referrer-when-downgrade',
              body: null,
              method: 'GET',
              mode: 'cors'
            });
            fourByteResponse.results.sort((a, b) => {
              return new Date(a.created_at).getTime() < new Date(b.created_at).getTime() ? -1 : 1;
            });
            return fourByteResponse.results[0].text_signature;
          }

          let registry;
          /**
           * Attempts to return the method data from the MethodRegistry library, the message registry library and the token abi, in that order of preference
           *
           * @param {string} fourBytePrefix - The prefix from the method code associated with the data
           * @returns {object}
           */

          async function getMethodDataAsync(fourBytePrefix) {
            try {
              const fourByteSig = await getMethodFrom4Byte(fourBytePrefix).catch(e => {
                _loglevel.default.error(e);

                return null;
              });

              if (!registry) {
                registry = new _ethMethodRegistry.MethodRegistry({
                  provider: global.ethereumProvider
                });
              }

              if (!fourByteSig) {
                return {};
              }

              const parsedResult = registry.parse(fourByteSig);
              return {
                name: parsedResult.name,
                params: parsedResult.args
              };
            } catch (error) {
              _loglevel.default.error(error);

              return {};
            }
          }
          /**
           * Returns four-byte method signature from data
           *
           * @param {string} data - The hex data (@code txParams.data) of a transaction
           * @returns {string} The four-byte method signature
           */


          function getFourBytePrefix(data = '') {
            const prefixedData = (0, _util.addHexPrefix)(data);
            const fourBytePrefix = prefixedData.slice(0, 10);
            return fourBytePrefix;
          }
          /**
           * Given an transaction category, returns a boolean which indicates whether the transaction is calling an erc20 token method
           *
           * @param {TRANSACTION_TYPES[keyof TRANSACTION_TYPES]} type - The type of transaction being evaluated
           * @returns {boolean} whether the transaction is calling an erc20 token method
           */


          function isTokenMethodAction(type) {
            return [_transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM, _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM].includes(type);
          }

          function getLatestSubmittedTxWithNonce(transactions = [], nonce = '0x0') {
            if (!transactions.length) {
              return {};
            }

            return transactions.reduce((acc, current) => {
              const {
                submittedTime,
                txParams: {
                  nonce: currentNonce
                } = {}
              } = current;

              if (currentNonce === nonce) {
                if (!acc.submittedTime) {
                  return current;
                }

                return submittedTime > acc.submittedTime ? current : acc;
              }

              return acc;
            }, {});
          }

          async function isSmartContractAddress(address) {
            const {
              isContractAddress
            } = await (0, _contractUtils.readAddressAsContract)(global.eth, address);
            return isContractAddress;
          }

          function sumHexes(...args) {
            const total = args.reduce((acc, hexAmount) => {
              return (0, _conversion.addCurrencies)(acc, hexAmount, {
                toNumericBase: 'hex',
                aBase: 16,
                bBase: 16
              });
            });
            return (0, _util.addHexPrefix)(total);
          }

          function isLegacyTransaction(txParams) {
            return (txParams === null || txParams === void 0 ? void 0 : txParams.type) === _transaction.TRANSACTION_ENVELOPE_TYPES.LEGACY;
          }
          /**
           * Returns a status key for a transaction. Requires parsing the txMeta.txReceipt on top of
           * txMeta.status because txMeta.status does not reflect on-chain errors.
           *
           * @param {object} transaction - The txMeta object of a transaction.
           * @param {object} transaction.txReceipt - The transaction receipt.
           * @returns {string}
           */


          function getStatusKey(transaction) {
            const {
              txReceipt: {
                status: receiptStatus
              } = {},
              type,
              status
            } = transaction; // There was an on-chain failure

            if (receiptStatus === '0x0') {
              return _transaction.TRANSACTION_STATUSES.FAILED;
            }

            if (status === _transaction.TRANSACTION_STATUSES.CONFIRMED && type === _transaction.TRANSACTION_TYPES.CANCEL) {
              return _transaction.TRANSACTION_GROUP_STATUSES.CANCELLED;
            }

            return transaction.status;
          }
          /**
           * Returns a title for the given transaction category.
           *
           * This will throw an error if the transaction category is unrecognized and no default is provided.
           *
           * @param {Function} t - The translation function
           * @param {TRANSACTION_TYPES[keyof TRANSACTION_TYPES]} type - The transaction type constant
           * @param {string} nativeCurrency - The native currency of the currently selected network
           * @returns {string} The transaction category title
           */


          function getTransactionTypeTitle(t, type, nativeCurrency = 'ETH') {
            switch (type) {
              case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER:
                {
                  return t('transfer');
                }

              case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM:
                {
                  return t('transferFrom');
                }

              case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM:
                {
                  return t('safeTransferFrom');
                }

              case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE:
                {
                  return t('approve');
                }

              case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL:
                {
                  return t('setApprovalForAll');
                }

              case _transaction.TRANSACTION_TYPES.SIMPLE_SEND:
                {
                  return t('sendingNativeAsset', [nativeCurrency]);
                }

              case _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION:
                {
                  return t('contractInteraction');
                }

              case _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT:
                {
                  return t('contractDeployment');
                }

              case _transaction.TRANSACTION_TYPES.SWAP:
                {
                  return t('swap');
                }

              case _transaction.TRANSACTION_TYPES.SWAP_APPROVAL:
                {
                  return t('swapApproval');
                }

              default:
                {
                  throw new Error(`Unrecognized transaction type: ${type}`);
                }
            }
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js", { "../../../shared/modules/transaction.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js", "./util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js", "loglevel": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\tx-helper.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = txHelper;

          var _loglevel = _interopRequireDefault(require("loglevel"));

          var _transaction = require("../../../shared/modules/transaction.utils");

          var _util = require("./util");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function txHelper(unapprovedTxs, unapprovedMsgs, personalMsgs, decryptMsgs, encryptionPublicKeyMsgs, typedMessages, network, chainId) {
            _loglevel.default.debug('tx-helper called with params:');

            _loglevel.default.debug({
              unapprovedTxs,
              unapprovedMsgs,
              personalMsgs,
              decryptMsgs,
              encryptionPublicKeyMsgs,
              typedMessages,
              network,
              chainId
            });

            const txValues = network ? (0, _util.valuesFor)(unapprovedTxs).filter(txMeta => (0, _transaction.transactionMatchesNetwork)(txMeta, chainId, network)) : (0, _util.valuesFor)(unapprovedTxs);

            _loglevel.default.debug(`tx helper found ${txValues.length} unapproved txs`);

            const msgValues = (0, _util.valuesFor)(unapprovedMsgs);

            _loglevel.default.debug(`tx helper found ${msgValues.length} unsigned messages`);

            let allValues = txValues.concat(msgValues);
            const personalValues = (0, _util.valuesFor)(personalMsgs);

            _loglevel.default.debug(`tx helper found ${personalValues.length} unsigned personal messages`);

            allValues = allValues.concat(personalValues);
            const decryptValues = (0, _util.valuesFor)(decryptMsgs);

            _loglevel.default.debug(`tx helper found ${decryptValues.length} decrypt requests`);

            allValues = allValues.concat(decryptValues);
            const encryptionPublicKeyValues = (0, _util.valuesFor)(encryptionPublicKeyMsgs);

            _loglevel.default.debug(`tx helper found ${encryptionPublicKeyValues.length} encryptionPublicKey requests`);

            allValues = allValues.concat(encryptionPublicKeyValues);
            const typedValues = (0, _util.valuesFor)(typedMessages);

            _loglevel.default.debug(`tx helper found ${typedValues.length} unsigned typed messages`);

            allValues = allValues.concat(typedValues);
            allValues = allValues.sort((a, b) => {
              return a.time - b.time;
            });
            return allValues;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js", { "../../../shared/constants/labels": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\labels.js", "../../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "../../../shared/modules/hexstring-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js", "@metamask/controllers/dist/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\controllers\\dist\\util.js", "@metamask/slip44": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\slip44\\slip44.json", "bignumber.js": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js", "ethereumjs-util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js", "human-standard-token-abi": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\human-standard-token-abi\\index.js", "luxon": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\luxon\\build\\cjs-browser\\luxon.js", "punycode/punycode": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\punycode\\punycode.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\util.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addressSummary = addressSummary;
          exports.bnGreaterThan = bnGreaterThan;
          exports.bnGreaterThanEqualTo = bnGreaterThanEqualTo;
          exports.bnLessThan = bnLessThan;
          exports.bnLessThanEqualTo = bnLessThanEqualTo;
          exports.checkExistingAddresses = checkExistingAddresses;
          exports.clearClipboard = clearClipboard;
          exports.coinTypeToProtocolName = coinTypeToProtocolName;
          exports.formatBalance = formatBalance;
          exports.formatDate = formatDate;
          exports.formatDateWithYearContext = formatDateWithYearContext;
          exports.getAccountByAddress = getAccountByAddress;
          exports.getAssetImageURL = getAssetImageURL;
          exports.getContractAtAddress = getContractAtAddress;
          exports.getRandomFileName = getRandomFileName;
          exports.getURL = getURL;
          exports.getURLHost = getURLHost;
          exports.getURLHostName = getURLHostName;
          exports.isDefaultMetaMaskChain = isDefaultMetaMaskChain;
          exports.isExtensionUrl = isExtensionUrl;
          exports.isNullish = isNullish;
          exports.isOriginContractAddress = isOriginContractAddress;
          exports.isValidDomainName = isValidDomainName;
          exports.numericBalance = numericBalance;
          exports.parseBalance = parseBalance;
          exports.roundToDecimalPlacesRemovingExtraZeroes = roundToDecimalPlacesRemovingExtraZeroes;
          exports.sanitizeMessage = void 0;
          exports.shortenAddress = shortenAddress;
          exports.stripHttpSchemes = stripHttpSchemes;
          exports.stripHttpsScheme = stripHttpsScheme;
          exports.stripHttpsSchemeWithoutPort = stripHttpsSchemeWithoutPort;
          exports.toHumanReadableTime = void 0;
          exports.valuesFor = valuesFor;

          var _punycode = _interopRequireDefault(require("punycode/punycode"));

          var _humanStandardTokenAbi = _interopRequireDefault(require("human-standard-token-abi"));

          var _bignumber = _interopRequireDefault(require("bignumber.js"));

          var ethUtil = _interopRequireWildcard(require("ethereumjs-util"));

          var _luxon = require("luxon");

          var _util = require("@metamask/controllers/dist/util");

          var _slip = _interopRequireDefault(require("@metamask/slip44"));

          var _network = require("../../../shared/constants/network");

          var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

          var _labels = require("../../../shared/constants/labels");

          var _conversion = require("../../../shared/modules/conversion.utils");

          function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

          function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          // formatData :: ( date: <Unix Timestamp> ) -> String
          function formatDate(date, format = "M/d/y 'at' T") {
            if (!date) {
              return '';
            }

            return _luxon.DateTime.fromMillis(date).toFormat(format);
          }

          function formatDateWithYearContext(date, formatThisYear = 'MMM d', fallback = 'MMM d, y') {
            if (!date) {
              return '';
            }

            const dateTime = _luxon.DateTime.fromMillis(date);

            const now = _luxon.DateTime.local();

            return dateTime.toFormat(now.year === dateTime.year ? formatThisYear : fallback);
          }
          /**
           * Determines if the provided chainId is a default MetaMask chain
           *
           * @param {string} chainId - chainId to check
           */


          function isDefaultMetaMaskChain(chainId) {
            if (!chainId || chainId === _network.CHAIN_IDS.MAINNET || chainId === _network.CHAIN_IDS.GOERLI || chainId === _network.CHAIN_IDS.SEPOLIA || chainId === _network.CHAIN_IDS.LOCALHOST) {
              return true;
            }

            return false;
          }

          function valuesFor(obj) {
            if (!obj) {
              return [];
            }

            return Object.keys(obj).map(function (key) {
              return obj[key];
            });
          }

          function addressSummary(address, firstSegLength = 10, lastSegLength = 4, includeHex = true) {
            if (!address) {
              return '';
            }

            let checked = (0, _hexstringUtils.toChecksumHexAddress)(address);

            if (!includeHex) {
              checked = (0, _hexstringUtils.stripHexPrefix)(checked);
            }

            return checked ? `${checked.slice(0, firstSegLength)}...${checked.slice(checked.length - lastSegLength)}` : '...';
          }

          function isValidDomainName(address) {
            const match = _punycode.default.toASCII(address).toLowerCase() // Checks that the domain consists of at least one valid domain pieces separated by periods, followed by a tld
              // Each piece of domain name has only the characters a-z, 0-9, and a hyphen (but not at the start or end of chunk)
              // A chunk has minimum length of 1, but minimum tld is set to 2 for now (no 1-character tlds exist yet)
              .match(/^(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+[a-z0-9][-a-z0-9]*[a-z0-9]$/u);

            return match !== null;
          }

          function isOriginContractAddress(to, sendTokenAddress) {
            if (!to || !sendTokenAddress) {
              return false;
            }

            return to.toLowerCase() === sendTokenAddress.toLowerCase();
          } // Takes wei Hex, returns wei BN, even if input is null


          function numericBalance(balance) {
            if (!balance) {
              return new ethUtil.BN(0, 16);
            }

            const stripped = (0, _hexstringUtils.stripHexPrefix)(balance);
            return new ethUtil.BN(stripped, 16);
          } // Takes  hex, returns [beforeDecimal, afterDecimal]


          function parseBalance(balance) {
            let afterDecimal;
            const wei = numericBalance(balance);
            const weiString = wei.toString();
            const trailingZeros = /0+$/u;
            const beforeDecimal = weiString.length > 18 ? weiString.slice(0, weiString.length - 18) : '0';
            afterDecimal = `000000000000000000${wei}`.slice(-18).replace(trailingZeros, '');

            if (afterDecimal === '') {
              afterDecimal = '0';
            }

            return [beforeDecimal, afterDecimal];
          } // Takes wei hex, returns an object with three properties.
          // Its "formatted" property is what we generally use to render values.


          function formatBalance(balance, decimalsToKeep, needsParse = true, ticker = 'ETH') {
            const parsed = needsParse ? parseBalance(balance) : balance.split('.');
            const beforeDecimal = parsed[0];
            let afterDecimal = parsed[1];
            let formatted = 'None';

            if (decimalsToKeep === undefined) {
              if (beforeDecimal === '0') {
                if (afterDecimal !== '0') {
                  const sigFigs = afterDecimal.match(/^0*(.{2})/u); // default: grabs 2 most significant digits

                  if (sigFigs) {
                    afterDecimal = sigFigs[0];
                  }

                  formatted = `0.${afterDecimal} ${ticker}`;
                }
              } else {
                formatted = `${beforeDecimal}.${afterDecimal.slice(0, 3)} ${ticker}`;
              }
            } else {
              afterDecimal += Array(decimalsToKeep).join('0');
              formatted = `${beforeDecimal}.${afterDecimal.slice(0, decimalsToKeep)} ${ticker}`;
            }

            return formatted;
          }

          function getContractAtAddress(tokenAddress) {
            return global.eth.contract(_humanStandardTokenAbi.default).at(tokenAddress);
          }

          function getRandomFileName() {
            let fileName = '';
            const charBank = [...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'];
            const fileNameLength = Math.floor(Math.random() * 7 + 6);

            for (let i = 0; i < fileNameLength; i++) {
              fileName += charBank[Math.floor(Math.random() * charBank.length)];
            }

            return fileName;
          }
          /**
           * Shortens an Ethereum address for display, preserving the beginning and end.
           * Returns the given address if it is no longer than 10 characters.
           * Shortened addresses are 13 characters long.
           *
           * Example output: 0xabcd...1234
           *
           * @param {string} address - The address to shorten.
           * @returns {string} The shortened address, or the original if it was no longer
           * than 10 characters.
           */


          function shortenAddress(address = '') {
            if (address.length < _labels.TRUNCATED_NAME_CHAR_LIMIT) {
              return address;
            }

            return `${address.slice(0, _labels.TRUNCATED_ADDRESS_START_CHARS)}...${address.slice(-_labels.TRUNCATED_ADDRESS_END_CHARS)}`;
          }

          function getAccountByAddress(accounts = [], targetAddress) {
            return accounts.find(({
              address
            }) => address === targetAddress);
          }
          /**
           * Strips the following schemes from URL strings:
           * - http
           * - https
           *
           * @param {string} urlString - The URL string to strip the scheme from.
           * @returns {string} The URL string, without the scheme, if it was stripped.
           */


          function stripHttpSchemes(urlString) {
            return urlString.replace(/^https?:\/\//u, '');
          }
          /**
           * Strips the following schemes from URL strings:
           * - https
           *
           * @param {string} urlString - The URL string to strip the scheme from.
           * @returns {string} The URL string, without the scheme, if it was stripped.
           */


          function stripHttpsScheme(urlString) {
            return urlString.replace(/^https:\/\//u, '');
          }
          /**
           * Strips `https` schemes from URL strings, if the URL does not have a port.
           * This is useful
           *
           * @param {string} urlString - The URL string to strip the scheme from.
           * @returns {string} The URL string, without the scheme, if it was stripped.
           */


          function stripHttpsSchemeWithoutPort(urlString) {
            if (getURL(urlString).port) {
              return urlString;
            }

            return stripHttpsScheme(urlString);
          }
          /**
           * Checks whether a URL-like value (object or string) is an extension URL.
           *
           * @param {string | URL | object} urlLike - The URL-like value to test.
           * @returns {boolean} Whether the URL-like value is an extension URL.
           */


          function isExtensionUrl(urlLike) {
            const EXT_PROTOCOLS = ['chrome-extension:', 'moz-extension:'];

            if (typeof urlLike === 'string') {
              for (const protocol of EXT_PROTOCOLS) {
                if (urlLike.startsWith(protocol)) {
                  return true;
                }
              }
            }

            if (urlLike !== null && urlLike !== void 0 && urlLike.protocol) {
              return EXT_PROTOCOLS.includes(urlLike.protocol);
            }

            return false;
          }
          /**
           * Checks whether an address is in a passed list of objects with address properties. The check is performed on the
           * lowercased version of the addresses.
           *
           * @param {string} address - The hex address to check
           * @param {Array} list - The array of objects to check
           * @returns {boolean} Whether or not the address is in the list
           */


          function checkExistingAddresses(address, list = []) {
            if (!address) {
              return false;
            }

            const matchesAddress = obj => {
              return obj.address.toLowerCase() === address.toLowerCase();
            };

            return list.some(matchesAddress);
          }

          function bnGreaterThan(a, b) {
            if (a === null || a === undefined || b === null || b === undefined) {
              return null;
            }

            return new _bignumber.default(a, 10).gt(b, 10);
          }

          function bnLessThan(a, b) {
            if (a === null || a === undefined || b === null || b === undefined) {
              return null;
            }

            return new _bignumber.default(a, 10).lt(b, 10);
          }

          function bnGreaterThanEqualTo(a, b) {
            if (a === null || a === undefined || b === null || b === undefined) {
              return null;
            }

            return new _bignumber.default(a, 10).gte(b, 10);
          }

          function bnLessThanEqualTo(a, b) {
            if (a === null || a === undefined || b === null || b === undefined) {
              return null;
            }

            return new _bignumber.default(a, 10).lte(b, 10);
          }

          function getURL(url) {
            try {
              return new URL(url);
            } catch (err) {
              return '';
            }
          }

          function getURLHost(url) {
            var _getURL;

            return ((_getURL = getURL(url)) === null || _getURL === void 0 ? void 0 : _getURL.host) || '';
          }

          function getURLHostName(url) {
            var _getURL2;

            return ((_getURL2 = getURL(url)) === null || _getURL2 === void 0 ? void 0 : _getURL2.hostname) || '';
          } // Once we reach this threshold, we switch to higher unit


          const MINUTE_CUTOFF = 90 * 60;
          const SECOND_CUTOFF = 90;

          const toHumanReadableTime = (t, milliseconds) => {
            if (milliseconds === undefined || milliseconds === null) {
              return '';
            }

            const seconds = Math.ceil(milliseconds / 1000);

            if (seconds <= SECOND_CUTOFF) {
              return t('gasTimingSecondsShort', [seconds]);
            }

            if (seconds <= MINUTE_CUTOFF) {
              return t('gasTimingMinutesShort', [Math.ceil(seconds / 60)]);
            }

            return t('gasTimingHoursShort', [Math.ceil(seconds / 3600)]);
          };

          exports.toHumanReadableTime = toHumanReadableTime;

          function clearClipboard() {
            window.navigator.clipboard.writeText('');
          }

          const solidityTypes = () => {
            const types = ['bool', 'address', 'string', 'bytes', 'int', 'uint', 'fixed', 'ufixed'];
            const ints = Array.from(new Array(32)).map((_, index) => `int${(index + 1) * 8}`);
            const uints = Array.from(new Array(32)).map((_, index) => `uint${(index + 1) * 8}`);
            const bytes = Array.from(new Array(32)).map((_, index) => `bytes${index + 1}`);
            /**
             * fixed and ufixed
             * This value type also can be declared keywords such as ufixedMxN and fixedMxN.
             * The M represents the amount of bits that the type takes,
             * with N representing the number of decimal points that are available.
             *  M has to be divisible by 8, and a number from 8 to 256.
             * N has to be a value between 0 and 80, also being inclusive.
             */

            const fixedM = Array.from(new Array(32)).map((_, index) => `fixed${(index + 1) * 8}`);
            const ufixedM = Array.from(new Array(32)).map((_, index) => `ufixed${(index + 1) * 8}`);
            const fixed = Array.from(new Array(80)).map((_, index) => fixedM.map(aFixedM => `${aFixedM}x${index + 1}`));
            const ufixed = Array.from(new Array(80)).map((_, index) => ufixedM.map(auFixedM => `${auFixedM}x${index + 1}`));
            return [...types, ...ints, ...uints, ...bytes, ...fixed.flat(), ...ufixed.flat()];
          };

          const sanitizeMessage = (msg, baseType, types) => {
            if (!types) {
              throw new Error(`Invalid types definition`);
            }

            const baseTypeDefinitions = types[baseType];

            if (!baseTypeDefinitions) {
              throw new Error(`Invalid primary type definition`);
            }

            const sanitizedMessage = {};
            const msgKeys = Object.keys(msg);
            msgKeys.forEach(msgKey => {
              const definedType = Object.values(baseTypeDefinitions).find(baseTypeDefinition => baseTypeDefinition.name === msgKey);

              if (!definedType) {
                return;
              } // key has a type. check if the definedType is also a type


              const nestedType = definedType.type.replace(/\[\]$/u, '');
              const nestedTypeDefinition = types[nestedType];

              if (nestedTypeDefinition) {
                if (definedType.type.endsWith('[]') > 0) {
                  // nested array
                  sanitizedMessage[msgKey] = msg[msgKey].map(value => sanitizeMessage(value, nestedType, types));
                } else {
                  // nested object
                  sanitizedMessage[msgKey] = sanitizeMessage(msg[msgKey], definedType.type, types);
                }
              } else {
                // check if it's a valid solidity type
                const isSolidityType = solidityTypes().includes(nestedType);

                if (isSolidityType) {
                  sanitizedMessage[msgKey] = msg[msgKey];
                }
              }
            });
            return sanitizedMessage;
          };

          exports.sanitizeMessage = sanitizeMessage;

          function getAssetImageURL(image, ipfsGateway) {
            if (!image || !ipfsGateway || typeof image !== 'string') {
              return '';
            }

            if (image.startsWith('ipfs://')) {
              return (0, _util.getFormattedIpfsUrl)(ipfsGateway, image, true);
            }

            return image;
          }

          function roundToDecimalPlacesRemovingExtraZeroes(numberish, numberOfDecimalPlaces) {
            if (numberish === undefined || numberish === null) {
              return '';
            }

            return _conversion.toBigNumber.dec(_conversion.toBigNumber.dec(numberish).toFixed(numberOfDecimalPlaces)).toNumber();
          }
          /**
           * Gets the name of the SLIP-44 protocol corresponding to the specified
           * `coin_type`.
           *
           * @param {string | number} coinType - The SLIP-44 `coin_type` value whose name
           * to retrieve.
           * @returns {string | undefined} The name of the protocol if found.
           */


          function coinTypeToProtocolName(coinType) {
            var _slip44$coinType;

            if (String(coinType) === '1') {
              return 'Test Networks';
            }

            return ((_slip44$coinType = _slip.default[coinType]) === null || _slip44$coinType === void 0 ? void 0 : _slip44$coinType.name) || undefined;
          }
          /**
           * Tests "nullishness". Used to guard a section of a component from being
           * rendered based on a value.
           *
           * @param {any} value - A value (literally anything).
           * @returns `true` if the value is null or undefined, `false` otherwise.
           */


          function isNullish(value) {
            return value === null || value === undefined;
          }


        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\add-ethereum-chain.js", { "../../../../shared/constants/network": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts", "../../../../shared/lib/fetch-with-cache": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js", "../../../helpers/constants/design-system": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js", "../../../helpers/constants/routes": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js", "../../../helpers/constants/zendesk-url": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js", "eth-rpc-errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-rpc-errors\\dist\\index.js", "react": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\templates\add-ethereum-chain.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _ethRpcErrors = require("eth-rpc-errors");

          var _react = _interopRequireDefault(require("react"));

          var _network = require("../../../../shared/constants/network");

          var _designSystem = require("../../../helpers/constants/design-system");

          var _routes = require("../../../helpers/constants/routes");

          var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

          var _fetchWithCache = _interopRequireDefault(require("../../../../shared/lib/fetch-with-cache"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const UNRECOGNIZED_CHAIN = {
            id: 'UNRECOGNIZED_CHAIN',
            severity: _designSystem.SEVERITIES.WARNING,
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'unrecognizedChain'
                }
              }
            }
          };
          const MISMATCHED_CHAIN_RECOMMENDATION = {
            id: 'MISMATCHED_CHAIN_RECOMMENDATION',
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'mismatchedChainRecommendation',
                  variables: [{
                    element: 'a',
                    key: 'mismatchedChainLink',
                    props: {
                      href: _zendeskUrl.default.VERIFY_CUSTOM_NETWORK,
                      target: '__blank',
                      tabIndex: 0
                    },
                    children: {
                      element: 'MetaMaskTranslation',
                      props: {
                        translationKey: 'mismatchedChainLinkText'
                      }
                    }
                  }]
                }
              }
            }
          };
          const MISMATCHED_NETWORK_NAME = {
            id: 'MISMATCHED_NETWORK_NAME',
            severity: _designSystem.SEVERITIES.WARNING,
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'mismatchedNetworkName'
                }
              }
            }
          };
          const MISMATCHED_NETWORK_SYMBOL = {
            id: 'MISMATCHED_NETWORK_SYMBOL',
            severity: _designSystem.SEVERITIES.DANGER,
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'mismatchedNetworkSymbol'
                }
              }
            }
          };
          const MISMATCHED_NETWORK_RPC = {
            id: 'MISMATCHED_NETWORK_RPC',
            severity: _designSystem.SEVERITIES.DANGER,
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'mismatchedRpcUrl'
                }
              }
            }
          };

          async function getAlerts(pendingApproval) {
            const alerts = [];
            const safeChainsList = (await (0, _fetchWithCache.default)('https://chainid.network/chains.json')) || [];
            const matchedChain = safeChainsList.find(chain => chain.chainId === parseInt(pendingApproval.requestData.chainId, 16));
            const originIsMetaMask = pendingApproval.origin === 'metamask';

            if (originIsMetaMask && Boolean(matchedChain)) {
              return [];
            }

            if (matchedChain) {
              var _matchedChain$nativeC;

              if (matchedChain.name.toLowerCase() !== pendingApproval.requestData.chainName.toLowerCase()) {
                alerts.push(MISMATCHED_NETWORK_NAME);
              }

              if (((_matchedChain$nativeC = matchedChain.nativeCurrency) === null || _matchedChain$nativeC === void 0 ? void 0 : _matchedChain$nativeC.symbol) !== pendingApproval.requestData.ticker) {
                alerts.push(MISMATCHED_NETWORK_SYMBOL);
              }

              const {
                origin
              } = new URL(pendingApproval.requestData.rpcUrl);

              if (!matchedChain.rpc.map(rpc => new URL(rpc).origin).includes(origin)) {
                alerts.push(MISMATCHED_NETWORK_RPC);
              }
            }

            if (!matchedChain) {
              alerts.push(UNRECOGNIZED_CHAIN);
            }

            if (alerts.length) {
              alerts.push(MISMATCHED_CHAIN_RECOMMENDATION);
            }

            return alerts;
          }

          function getValues(pendingApproval, t, actions, history) {
            var _pendingApproval$requ;

            const originIsMetaMask = pendingApproval.origin === 'metamask';
            return {
              content: [{
                hide: !originIsMetaMask,
                element: 'Box',
                key: 'network-box',
                props: {
                  textAlign: _designSystem.TEXT_ALIGN.CENTER,
                  display: _designSystem.DISPLAY.FLEX,
                  justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
                  marginTop: 4,
                  marginBottom: 2
                },
                children: [{
                  element: 'Chip',
                  key: 'network-chip',
                  props: {
                    label: pendingApproval.requestData.chainName,
                    backgroundColor: _designSystem.COLORS.BACKGROUND_ALTERNATIVE,
                    leftIconUrl: pendingApproval.requestData.imageUrl
                  }
                }]
              }, {
                element: 'Typography',
                key: 'title',
                children: originIsMetaMask ? t('wantToAddThisNetwork') : t('addEthereumChainConfirmationTitle'),
                props: {
                  variant: _designSystem.TYPOGRAPHY.H3,
                  align: 'center',
                  fontWeight: 'bold',
                  boxProps: {
                    margin: [0, 0, 4]
                  }
                }
              }, {
                element: 'Typography',
                key: 'description',
                children: t('addEthereumChainConfirmationDescription'),
                props: {
                  variant: _designSystem.TYPOGRAPHY.H7,
                  align: 'center',
                  boxProps: {
                    margin: originIsMetaMask ? [0, 8, 4] : [0, 0, 4]
                  }
                }
              }, {
                element: 'Typography',
                key: 'only-add-networks-you-trust',
                children: [{
                  element: 'b',
                  key: 'bolded-text',
                  props: {
                    style: {
                      display: originIsMetaMask && '-webkit-box'
                    }
                  },
                  children: [`${t('addEthereumChainConfirmationRisks')} `, {
                    hide: !originIsMetaMask,
                    element: 'Tooltip',
                    key: 'tooltip-info',
                    props: {
                      position: 'bottom',
                      interactive: true,
                      trigger: 'mouseenter',
                      html: /*#__PURE__*/_react.default.createElement("div", {
                        style: {
                          width: '180px',
                          margin: '16px',
                          textAlign: 'left'
                        }
                      }, t('someNetworksMayPoseSecurity'), ' ', /*#__PURE__*/_react.default.createElement("a", {
                        key: "zendesk_page_link",
                        href: _zendeskUrl.default.UNKNOWN_NETWORK,
                        rel: "noreferrer",
                        target: "_blank",
                        style: {
                          color: 'var(--color-primary-default)'
                        }
                      }, t('learnMoreUpperCase')))
                    },
                    children: [{
                      element: 'i',
                      key: 'info-circle',
                      props: {
                        className: 'fas fa-info-circle',
                        style: {
                          marginLeft: '4px',
                          color: 'var(--color-icon-default)'
                        }
                      }
                    }]
                  }]
                }, {
                  element: 'MetaMaskTranslation',
                  key: 'learn-about-risks',
                  props: {
                    translationKey: 'addEthereumChainConfirmationRisksLearnMore',
                    variables: [{
                      element: 'a',
                      children: t('addEthereumChainConfirmationRisksLearnMoreLink'),
                      key: 'addEthereumChainConfirmationRisksLearnMoreLink',
                      props: {
                        href: _zendeskUrl.default.USER_GUIDE_CUSTOM_NETWORKS,
                        target: '__blank'
                      }
                    }]
                  }
                }],
                props: {
                  variant: _designSystem.TYPOGRAPHY.H7,
                  boxProps: {
                    margin: originIsMetaMask ? [0, 8] : 0,
                    display: _designSystem.DISPLAY.FLEX,
                    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
                    alignItems: _designSystem.ALIGN_ITEMS.CENTER
                  }
                }
              }, {
                element: 'TruncatedDefinitionList',
                key: 'network-details',
                props: {
                  title: t('networkDetails'),
                  tooltips: {
                    [t('networkName')]: t('networkNameDefinition'),
                    [t('networkURL')]: t('networkURLDefinition'),
                    [t('chainId')]: t('chainIdDefinition'),
                    [t('currencySymbol')]: t('currencySymbolDefinition'),
                    [t('blockExplorerUrl')]: t('blockExplorerUrlDefinition')
                  },
                  dictionary: {
                    [t('networkName')]: pendingApproval.requestData.chainName,
                    [t('networkURL')]: (_pendingApproval$requ = pendingApproval.requestData.rpcUrl) !== null && _pendingApproval$requ !== void 0 && _pendingApproval$requ.includes(`/v3/${_network.infuraProjectId}`) ? pendingApproval.requestData.rpcUrl.replace(`/v3/${_network.infuraProjectId}`, '') : pendingApproval.requestData.rpcUrl,
                    [t('chainId')]: parseInt(pendingApproval.requestData.chainId, 16),
                    [t('currencySymbol')]: pendingApproval.requestData.ticker,
                    [t('blockExplorerUrl')]: pendingApproval.requestData.blockExplorerUrl
                  },
                  prefaceKeys: [t('networkName'), t('networkURL'), t('chainId'), t('currencySymbol')]
                }
              }],
              approvalText: t('approveButtonText'),
              cancelText: t('cancel'),
              onApprove: async () => {
                await actions.resolvePendingApproval(pendingApproval.id, pendingApproval.requestData);

                if (originIsMetaMask) {
                  actions.addCustomNetwork(pendingApproval.requestData);
                  history.push(_routes.DEFAULT_ROUTE);
                }
              },
              onCancel: () => actions.rejectPendingApproval(pendingApproval.id, _ethRpcErrors.ethErrors.provider.userRejectedRequest().serialize()),
              networkDisplay: !originIsMetaMask
            };
          }

          const addEthereumChain = {
            getAlerts,
            getValues
          };
          var _default = addEthereumChain;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\index.js", { "../../../../shared/constants/app": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts", "../../../store/actions": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", "./add-ethereum-chain": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\add-ethereum-chain.js", "./switch-ethereum-chain": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\switch-ethereum-chain.js", "lodash": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\templates\index.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TEMPLATED_CONFIRMATION_MESSAGE_TYPES = void 0;
          exports.getTemplateAlerts = getTemplateAlerts;
          exports.getTemplateState = getTemplateState;
          exports.getTemplateValues = getTemplateValues;

          var _lodash = require("lodash");

          var _app = require("../../../../shared/constants/app");

          var _actions = require("../../../store/actions");

          var _addEthereumChain = _interopRequireDefault(require("./add-ethereum-chain"));

          var _switchEthereumChain = _interopRequireDefault(require("./switch-ethereum-chain"));

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          const APPROVAL_TEMPLATES = {
            [_app.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN]: _addEthereumChain.default,
            [_app.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN]: _switchEthereumChain.default
          };
          const TEMPLATED_CONFIRMATION_MESSAGE_TYPES = Object.keys(APPROVAL_TEMPLATES);
          exports.TEMPLATED_CONFIRMATION_MESSAGE_TYPES = TEMPLATED_CONFIRMATION_MESSAGE_TYPES;
          const ALLOWED_TEMPLATE_KEYS = ['content', 'approvalText', 'cancelText', 'onApprove', 'onCancel', 'networkDisplay'];
          /**
           * @typedef {object} PendingApproval
           * @property {string} id - The randomly generated id of the approval
           * @property {string} origin - The origin of the site requesting this approval
           * @property {number} time - The time the approval was requested
           * @property {string} type - The type of approval being requested
           * @property {object} requestData - The data submitted with the request
           */

          /**
           * getTemplateAlerts calls the getAlerts function exported by the template if
           * it exists, and then returns the result of that function. In the confirmation
           * page the alerts returned from the getAlerts method will be set into the
           * alertState state object.
           *
           * @param {object} pendingApproval - the object representing the confirmation
           */

          async function getTemplateAlerts(pendingApproval) {
            var _APPROVAL_TEMPLATES$p;

            const fn = (_APPROVAL_TEMPLATES$p = APPROVAL_TEMPLATES[pendingApproval.type]) === null || _APPROVAL_TEMPLATES$p === void 0 ? void 0 : _APPROVAL_TEMPLATES$p.getAlerts;
            const results = fn ? await fn(pendingApproval) : [];

            if (!Array.isArray(results)) {
              throw new Error(`Template alerts must be an array, received: ${results}`);
            }

            if (results.some(result => (result === null || result === void 0 ? void 0 : result.id) === undefined)) {
              throw new Error(`Template alert entries must be objects with an id key. Received: ${results}`);
            }

            return results;
          }
          /**
           * The function call to return state must be a promise returning function
           * this "NOOP" is here to conform to the requirements for templates without
           * state.
           */


          async function emptyState() {
            return {};
          }
          /**
           * getTemplateState calls the getState function exported by the template if
           * it exists, and then returns the result of that function. In the confirmation
           * page the object returned from the getState method will be set into the
           * confirmationState state object. Note, this state is not consumed by the page
           * itself.
           *
           * @param {object} pendingApproval - the object representing the confirmation
           */


          async function getTemplateState(pendingApproval) {
            var _APPROVAL_TEMPLATES$p2, _APPROVAL_TEMPLATES$p3;

            const fn = (_APPROVAL_TEMPLATES$p2 = (_APPROVAL_TEMPLATES$p3 = APPROVAL_TEMPLATES[pendingApproval.type]) === null || _APPROVAL_TEMPLATES$p3 === void 0 ? void 0 : _APPROVAL_TEMPLATES$p3.getState) !== null && _APPROVAL_TEMPLATES$p2 !== void 0 ? _APPROVAL_TEMPLATES$p2 : emptyState;
            const result = await fn(pendingApproval);

            if (typeof result !== 'object' || Array.isArray(result)) {
              throw new Error(`Template state must be an object, received: ${result}`);
            } else if (result === null || result === undefined) {
              return {};
            }

            return result;
          }
          /**
           * We do not want to pass the entire dispatch function to the template.
           * This function should return an object of actions that we generally consider
           * to be safe for templates to invoke. In the future we could put these behind
           * permission sets so that snaps that wish to manipulate state must ask for
           * explicit permission to do so.
           *
           * @param {Function} dispatch - Redux dispatch function
           */


          function getAttenuatedDispatch(dispatch) {
            return {
              rejectPendingApproval: (...args) => dispatch((0, _actions.rejectPendingApproval)(...args)),
              resolvePendingApproval: (...args) => dispatch((0, _actions.resolvePendingApproval)(...args)),
              addCustomNetwork: (...args) => dispatch((0, _actions.addCustomNetwork)(...args))
            };
          }
          /**
           * Returns the templated values to be consumed in the confirmation page
           *
           * @param {object} pendingApproval - The pending confirmation object
           * @param {Function} t - Translation function
           * @param {Function} dispatch - Redux dispatch function
           * @param history
           */


          function getTemplateValues(pendingApproval, t, dispatch, history) {
            var _APPROVAL_TEMPLATES$p4;

            const fn = (_APPROVAL_TEMPLATES$p4 = APPROVAL_TEMPLATES[pendingApproval.type]) === null || _APPROVAL_TEMPLATES$p4 === void 0 ? void 0 : _APPROVAL_TEMPLATES$p4.getValues;

            if (!fn) {
              throw new Error(`MESSAGE_TYPE: '${pendingApproval.type}' is not specified in approval templates`);
            }

            const safeActions = getAttenuatedDispatch(dispatch);
            const values = fn(pendingApproval, t, safeActions, history);
            const extraneousKeys = (0, _lodash.omit)(values, ALLOWED_TEMPLATE_KEYS);
            const safeValues = (0, _lodash.pick)(values, ALLOWED_TEMPLATE_KEYS);

            if (extraneousKeys.length > 0) {
              throw new Error(`Received extraneous keys from ${pendingApproval.type}.getValues. These keys are not passed to the confirmation page: ${Object.keys(extraneousKeys)}`);
            }

            return safeValues;
          }

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\switch-ethereum-chain.js", { "../../../helpers/constants/design-system": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js", "eth-rpc-errors": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-rpc-errors\\dist\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\templates\switch-ethereum-chain.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _ethRpcErrors = require("eth-rpc-errors");

          var _designSystem = require("../../../helpers/constants/design-system");

          const PENDING_TX_DROP_NOTICE = {
            id: 'PENDING_TX_DROP_NOTICE',
            severity: _designSystem.SEVERITIES.WARNING,
            content: {
              element: 'span',
              children: {
                element: 'MetaMaskTranslation',
                props: {
                  translationKey: 'switchingNetworksCancelsPendingConfirmations'
                }
              }
            }
          };

          async function getAlerts() {
            return [PENDING_TX_DROP_NOTICE];
          }

          function getValues(pendingApproval, t, actions) {
            return {
              content: [{
                element: 'Typography',
                key: 'title',
                children: t('switchEthereumChainConfirmationTitle'),
                props: {
                  variant: _designSystem.TYPOGRAPHY.H3,
                  align: 'center',
                  fontWeight: 'normal',
                  boxProps: {
                    margin: [0, 0, 2],
                    padding: [0, 4, 0, 4]
                  }
                }
              }, {
                element: 'Typography',
                key: 'description',
                children: t('switchEthereumChainConfirmationDescription'),
                props: {
                  variant: _designSystem.TYPOGRAPHY.H7,
                  color: _designSystem.COLORS.TEXT_ALTERNATIVE,
                  align: 'center',
                  boxProps: {
                    padding: [0, 4, 0, 4]
                  }
                }
              }, {
                element: 'Box',
                key: 'status-box',
                props: {
                  justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
                },
                children: {
                  element: 'ConfirmationNetworkSwitch',
                  key: 'network-being-switched',
                  props: {
                    newNetwork: {
                      chainId: pendingApproval.requestData.chainId,
                      name: pendingApproval.requestData.nickname
                    }
                  }
                }
              }],
              approvalText: t('switchNetwork'),
              cancelText: t('cancel'),
              onApprove: () => actions.resolvePendingApproval(pendingApproval.id, pendingApproval.requestData),
              onCancel: () => actions.rejectPendingApproval(pendingApproval.id, _ethRpcErrors.ethErrors.provider.userRejectedRequest().serialize()),
              networkDisplay: true
            };
          }

          const switchEthereumChain = {
            getAlerts,
            getValues
          };
          var _default = switchEthereumChain;
          exports.default = _default;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.constants.js", { "../../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../../../shared/constants/gas": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\send\send.constants.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TOKEN_TRANSFER_FUNCTION_SIGNATURE = exports.REQUIRED_ERROR = exports.RECIPIENT_TYPES = exports.NEGATIVE_ETH_ERROR = exports.MIN_GAS_TOTAL = exports.MIN_GAS_PRICE_HEX = exports.MIN_GAS_PRICE_GWEI = exports.MIN_GAS_PRICE_DEC = exports.MIN_GAS_LIMIT_DEC = exports.MAX_GAS_LIMIT_DEC = exports.KNOWN_RECIPIENT_ADDRESS_WARNING = exports.INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR = exports.INVALID_RECIPIENT_ADDRESS_ERROR = exports.INSUFFICIENT_TOKENS_ERROR = exports.INSUFFICIENT_FUNDS_ERROR = exports.HIGH_FEE_WARNING_MULTIPLIER = exports.ENS_UNKNOWN_ERROR = exports.ENS_REGISTRATION_ERROR = exports.ENS_NO_ADDRESS_FOR_NAME = exports.ENS_NOT_SUPPORTED_ON_NETWORK = exports.ENS_NOT_FOUND_ON_NETWORK = exports.ENS_ILLEGAL_CHARACTER = exports.CONTRACT_ADDRESS_ERROR = exports.CONFUSING_ENS_ERROR = exports.COLLECTIBLE_TRANSFER_FROM_FUNCTION_SIGNATURE = void 0;

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _util = require("../../../app/scripts/lib/util");

          var _gas = require("../../../shared/constants/gas");

          const MIN_GAS_PRICE_DEC = '0';
          exports.MIN_GAS_PRICE_DEC = MIN_GAS_PRICE_DEC;
          const MIN_GAS_PRICE_HEX = parseInt(MIN_GAS_PRICE_DEC, 10).toString(16);
          exports.MIN_GAS_PRICE_HEX = MIN_GAS_PRICE_HEX;
          const MIN_GAS_LIMIT_DEC = '21000';
          exports.MIN_GAS_LIMIT_DEC = MIN_GAS_LIMIT_DEC;
          const MAX_GAS_LIMIT_DEC = '7920027';
          exports.MAX_GAS_LIMIT_DEC = MAX_GAS_LIMIT_DEC;
          const HIGH_FEE_WARNING_MULTIPLIER = 1.5;
          exports.HIGH_FEE_WARNING_MULTIPLIER = HIGH_FEE_WARNING_MULTIPLIER;
          const MIN_GAS_PRICE_GWEI = (0, _util.addHexPrefix)((0, _conversion.conversionUtil)(MIN_GAS_PRICE_HEX, {
            fromDenomination: 'WEI',
            toDenomination: 'GWEI',
            fromNumericBase: 'hex',
            toNumericBase: 'hex',
            numberOfDecimals: 1
          }));
          exports.MIN_GAS_PRICE_GWEI = MIN_GAS_PRICE_GWEI;
          const MIN_GAS_TOTAL = (0, _conversion.multiplyCurrencies)(_gas.MIN_GAS_LIMIT_HEX, MIN_GAS_PRICE_HEX, {
            toNumericBase: 'hex',
            multiplicandBase: 16,
            multiplierBase: 16
          });
          exports.MIN_GAS_TOTAL = MIN_GAS_TOTAL;
          const TOKEN_TRANSFER_FUNCTION_SIGNATURE = '0xa9059cbb';
          exports.TOKEN_TRANSFER_FUNCTION_SIGNATURE = TOKEN_TRANSFER_FUNCTION_SIGNATURE;
          const COLLECTIBLE_TRANSFER_FROM_FUNCTION_SIGNATURE = '0x23b872dd';
          exports.COLLECTIBLE_TRANSFER_FROM_FUNCTION_SIGNATURE = COLLECTIBLE_TRANSFER_FROM_FUNCTION_SIGNATURE;
          const INSUFFICIENT_FUNDS_ERROR = 'insufficientFunds';
          exports.INSUFFICIENT_FUNDS_ERROR = INSUFFICIENT_FUNDS_ERROR;
          const INSUFFICIENT_TOKENS_ERROR = 'insufficientTokens';
          exports.INSUFFICIENT_TOKENS_ERROR = INSUFFICIENT_TOKENS_ERROR;
          const NEGATIVE_ETH_ERROR = 'negativeETH';
          exports.NEGATIVE_ETH_ERROR = NEGATIVE_ETH_ERROR;
          const INVALID_RECIPIENT_ADDRESS_ERROR = 'invalidAddressRecipient';
          exports.INVALID_RECIPIENT_ADDRESS_ERROR = INVALID_RECIPIENT_ADDRESS_ERROR;
          const INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR = 'invalidAddressRecipientNotEthNetwork';
          exports.INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR = INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR;
          const REQUIRED_ERROR = 'required';
          exports.REQUIRED_ERROR = REQUIRED_ERROR;
          const KNOWN_RECIPIENT_ADDRESS_WARNING = 'knownAddressRecipient';
          exports.KNOWN_RECIPIENT_ADDRESS_WARNING = KNOWN_RECIPIENT_ADDRESS_WARNING;
          const CONTRACT_ADDRESS_ERROR = 'contractAddressError';
          exports.CONTRACT_ADDRESS_ERROR = CONTRACT_ADDRESS_ERROR;
          const CONFUSING_ENS_ERROR = 'confusingEnsDomain';
          exports.CONFUSING_ENS_ERROR = CONFUSING_ENS_ERROR;
          const ENS_NO_ADDRESS_FOR_NAME = 'noAddressForName';
          exports.ENS_NO_ADDRESS_FOR_NAME = ENS_NO_ADDRESS_FOR_NAME;
          const ENS_NOT_FOUND_ON_NETWORK = 'ensNotFoundOnCurrentNetwork';
          exports.ENS_NOT_FOUND_ON_NETWORK = ENS_NOT_FOUND_ON_NETWORK;
          const ENS_NOT_SUPPORTED_ON_NETWORK = 'ensNotSupportedOnNetwork';
          exports.ENS_NOT_SUPPORTED_ON_NETWORK = ENS_NOT_SUPPORTED_ON_NETWORK;
          const ENS_ILLEGAL_CHARACTER = 'ensIllegalCharacter';
          exports.ENS_ILLEGAL_CHARACTER = ENS_ILLEGAL_CHARACTER;
          const ENS_UNKNOWN_ERROR = 'ensUnknownError';
          exports.ENS_UNKNOWN_ERROR = ENS_UNKNOWN_ERROR;
          const ENS_REGISTRATION_ERROR = 'ensRegistrationError';
          exports.ENS_REGISTRATION_ERROR = ENS_REGISTRATION_ERROR;
          const RECIPIENT_TYPES = {
            SMART_CONTRACT: 'SMART_CONTRACT',
            NON_CONTRACT: 'NON_CONTRACT'
          };
          exports.RECIPIENT_TYPES = RECIPIENT_TYPES;

        };
      };
    }
  }, { package: "$root$", }],
  ["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js", { "../../../app/scripts/lib/util": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js", "../../../shared/constants/transaction": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js", "../../../shared/lib/transactions-controller-utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js", "../../../shared/modules/conversion.utils": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js", "./send.constants": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.constants.js", "ethereumjs-abi": "C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-abi\\index.js" }, function () {
    with (this) {
      return function () {
        'use strict';
        // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\send\send.utils.js
        return function (require, module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addGasBuffer = addGasBuffer;
          exports.ellipsify = ellipsify;
          exports.generateERC20TransferData = generateERC20TransferData;
          exports.generateERC721TransferData = generateERC721TransferData;
          exports.getAssetTransferData = getAssetTransferData;
          exports.isBalanceSufficient = isBalanceSufficient;
          exports.isTokenBalanceSufficient = isTokenBalanceSufficient;

          var _ethereumjsAbi = _interopRequireDefault(require("ethereumjs-abi"));

          var _conversion = require("../../../shared/modules/conversion.utils");

          var _util = require("../../../app/scripts/lib/util");

          var _transaction = require("../../../shared/constants/transaction");

          var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

          var _send = require("./send.constants");

          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

          function isBalanceSufficient({
            amount = '0x0',
            balance = '0x0',
            conversionRate = 1,
            gasTotal = '0x0',
            primaryCurrency
          }) {
            const totalAmount = (0, _conversion.addCurrencies)(amount, gasTotal, {
              aBase: 16,
              bBase: 16,
              toNumericBase: 'hex'
            });
            const balanceIsSufficient = (0, _conversion.conversionGTE)({
              value: balance,
              fromNumericBase: 'hex',
              fromCurrency: primaryCurrency,
              conversionRate
            }, {
              value: totalAmount,
              fromNumericBase: 'hex',
              conversionRate,
              fromCurrency: primaryCurrency
            });
            return balanceIsSufficient;
          }

          function isTokenBalanceSufficient({
            amount = '0x0',
            tokenBalance,
            decimals
          }) {
            const amountInDec = (0, _conversion.conversionUtil)(amount, {
              fromNumericBase: 'hex'
            });
            const tokenBalanceIsSufficient = (0, _conversion.conversionGTE)({
              value: tokenBalance,
              fromNumericBase: 'hex'
            }, {
              value: (0, _transactionsControllerUtils.calcTokenAmount)(amountInDec, decimals)
            });
            return tokenBalanceIsSufficient;
          }

          function addGasBuffer(initialGasLimitHex, blockGasLimitHex, bufferMultiplier = 1.5) {
            const upperGasLimit = (0, _conversion.multiplyCurrencies)(blockGasLimitHex, 0.9, {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 10,
              numberOfDecimals: '0'
            });
            const bufferedGasLimit = (0, _conversion.multiplyCurrencies)(initialGasLimitHex, bufferMultiplier, {
              toNumericBase: 'hex',
              multiplicandBase: 16,
              multiplierBase: 10,
              numberOfDecimals: '0'
            }); // if initialGasLimit is above blockGasLimit, dont modify it

            if ((0, _conversion.conversionGreaterThan)({
              value: initialGasLimitHex,
              fromNumericBase: 'hex'
            }, {
              value: upperGasLimit,
              fromNumericBase: 'hex'
            })) {
              return initialGasLimitHex;
            } // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit


            if ((0, _conversion.conversionLessThan)({
              value: bufferedGasLimit,
              fromNumericBase: 'hex'
            }, {
              value: upperGasLimit,
              fromNumericBase: 'hex'
            })) {
              return bufferedGasLimit;
            } // otherwise use blockGasLimit


            return upperGasLimit;
          }

          function generateERC20TransferData({
            toAddress = '0x0',
            amount = '0x0',
            sendToken
          }) {
            if (!sendToken) {
              return undefined;
            }

            return _send.TOKEN_TRANSFER_FUNCTION_SIGNATURE + Array.prototype.map.call(_ethereumjsAbi.default.rawEncode(['address', 'uint256'], [(0, _util.addHexPrefix)(toAddress), (0, _util.addHexPrefix)(amount)]), x => `00${x.toString(16)}`.slice(-2)).join('');
          }

          function generateERC721TransferData({
            toAddress = '0x0',
            fromAddress = '0x0',
            tokenId
          }) {
            if (!tokenId) {
              return undefined;
            }

            return _send.COLLECTIBLE_TRANSFER_FROM_FUNCTION_SIGNATURE + Array.prototype.map.call(_ethereumjsAbi.default.rawEncode(['address', 'address', 'uint256'], [(0, _util.addHexPrefix)(fromAddress), (0, _util.addHexPrefix)(toAddress), tokenId]), x => `00${x.toString(16)}`.slice(-2)).join('');
          }

          function getAssetTransferData({
            sendToken,
            fromAddress,
            toAddress,
            amount
          }) {
            switch (sendToken.standard) {
              case _transaction.ERC721:
                return generateERC721TransferData({
                  toAddress,
                  fromAddress,
                  tokenId: sendToken.tokenId
                });

              case _transaction.ERC20:
              default:
                return generateERC20TransferData({
                  toAddress,
                  amount,
                  sendToken
                });
            }
          }

          function ellipsify(text, first = 6, last = 4) {
            return `${text.slice(0, first)}...${text.slice(-last)}`;
          }

        };
      };
    }
  }, { package: "$root$", }]], [], {})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
