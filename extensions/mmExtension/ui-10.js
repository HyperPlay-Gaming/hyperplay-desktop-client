LavaPack.loadBundle([
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\item-list.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../components/ui/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\searchable-item-list\item-list\item-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ItemList;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _urlIcon = _interopRequireDefault(require("../../../../components/ui/url-icon"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _actionableMessage = _interopRequireDefault(require("../../../../components/ui/actionable-message/actionable-message"));

var _i18n = require("../../../../contexts/i18n");

var _selectors = require("../../../../selectors");

var _metametrics = require("../../../../../shared/constants/metametrics");

var _swaps = require("../../../../../shared/constants/swaps");

var _util = require("../../../../helpers/utils/util");

var _metametrics2 = require("../../../../contexts/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ItemList({
  results = [],
  onClickItem,
  onOpenImportTokenModalClick,
  Placeholder,
  listTitle,
  maxListItems = 6,
  searchQuery = '',
  containerRef,
  hideRightLabels,
  hideItemIf,
  listContainerClassName
}) {
  var _ref, _rpcPrefs$blockExplor;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const blockExplorerLink = (_ref = (_rpcPrefs$blockExplor = rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : _swaps.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId]) !== null && _ref !== void 0 ? _ref : null;
  const blockExplorerHostName = (0, _util.getURLHostName)(blockExplorerLink);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext); // If there is a token for import based on a contract address, it's the only one in the list.

  const hasTokenForImport = results.length === 1 && results[0].notImported;
  const placeholder = Placeholder ? /*#__PURE__*/_react.default.createElement(Placeholder, {
    searchQuery: searchQuery
  }) : null;
  return results.length === 0 ? placeholder : /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list"
  }, listTitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list__title"
  }, listTitle) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('searchable-item-list__list-container', listContainerClassName),
    ref: containerRef
  }, results.slice(0, maxListItems).map((result, i) => {
    if (hideItemIf !== null && hideItemIf !== void 0 && hideItemIf(result)) {
      return null;
    }

    const onClick = () => {
      if (result.notImported) {
        onOpenImportTokenModalClick(result);
      } else {
        onClickItem === null || onClickItem === void 0 ? void 0 : onClickItem(result);
      }
    };

    const {
      iconUrl,
      identiconAddress,
      selected,
      disabled,
      primaryLabel,
      secondaryLabel,
      rightPrimaryLabel,
      rightSecondaryLabel,
      IconComponent
    } = result;
    return /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: "0",
      className: (0, _classnames.default)('searchable-item-list__item', {
        'searchable-item-list__item--selected': selected,
        'searchable-item-list__item--disabled': disabled
      }),
      "data-testid": "searchable-item-list__item",
      onClick: onClick,
      onKeyUp: e => e.key === 'Enter' && onClick(),
      key: `searchable-item-list-item-${i}`
    }, iconUrl || primaryLabel ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
      url: iconUrl,
      name: primaryLabel
    }) : null, !(iconUrl || primaryLabel) && identiconAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identiconAddress,
      diameter: 24
    })) : null, IconComponent ? /*#__PURE__*/_react.default.createElement(IconComponent, null) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__labels"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__item-labels"
    }, primaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__primary-label"
    }, primaryLabel) : null, secondaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__secondary-label"
    }, secondaryLabel) : null), !hideRightLabels && (rightPrimaryLabel || rightSecondaryLabel) ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__right-labels"
    }, rightPrimaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-primary-label"
    }, rightPrimaryLabel) : null, rightSecondaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-secondary-label"
    }, rightSecondaryLabel) : null) : null), result.notImported && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onClick
    }, t('import')));
  }), !hasTokenForImport && blockExplorerLink && /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: "0",
    className: "searchable-item-list__item searchable-item-list__item--add-token",
    key: "searchable-item-list-item-last"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: t('addCustomTokenByContractAddress', [/*#__PURE__*/_react.default.createElement("a", {
      key: "searchable-item-list__etherscan-link",
      onClick: () => {
        /* istanbul ignore next */
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics.EVENT.CATEGORIES.SWAPS,
          properties: {
            link_type: 'Token Tracker',
            action: 'Verify Contract Address',
            block_explorer_domain: blockExplorerHostName
          }
        });
        global.platform.openTab({
          url: blockExplorerLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, blockExplorerHostName)])
  }))));
}

ItemList.propTypes = {
  results: _propTypes.default.arrayOf(_propTypes.default.shape({
    iconUrl: _propTypes.default.string,
    selected: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    primaryLabel: _propTypes.default.string,
    secondaryLabel: _propTypes.default.string,
    rightPrimaryLabel: _propTypes.default.string,
    rightSecondaryLabel: _propTypes.default.string
  })),
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  listTitle: _propTypes.default.string,
  maxListItems: _propTypes.default.number,
  searchQuery: _propTypes.default.string,
  containerRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(window.Element)
  }),
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\index.js", {"./list-item-search.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\list-item-search.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\searchable-item-list\list-item-search\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _listItemSearch.default;
  }
});

var _listItemSearch = _interopRequireDefault(require("./list-item-search.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\list-item-search.component.js", {"../../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../../components/ui/icon/search-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js","../../../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../hooks/usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","@material-ui/core/InputAdornment":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@material-ui\\core\\InputAdornment\\index.js","fuse.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\searchable-item-list\list-item-search\list-item-search.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListItemSearch;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _usePrevious = require("../../../../hooks/usePrevious");

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

var _swaps = require("../../swaps.util");

var _selectors = require("../../../../selectors/selectors");

var _searchIcon = _interopRequireDefault(require("../../../../components/ui/icon/search-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const renderAdornment = () => /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
  position: "start",
  style: {
    marginRight: '12px'
  }
}, /*#__PURE__*/_react.default.createElement(_searchIcon.default, {
  size: 20,
  color: "var(--color-icon-muted)"
}));

let timeoutIdForSearch;

function ListItemSearch({
  onSearch,
  error,
  listToSearch = [],
  fuseSearchKeys,
  searchPlaceholderText,
  defaultToAll,
  shouldSearchForImports,
  searchQuery,
  setSearchQuery
}) {
  const fuseRef = (0, _react.useRef)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  /**
   * Search a custom token for import based on a contract address.
   *
   * @param {string} contractAddress
   */

  const handleSearchTokenForImport = async contractAddress => {
    try {
      const token = await (0, _swaps.fetchToken)(contractAddress, chainId);

      if (token) {
        token.primaryLabel = token.symbol;
        token.secondaryLabel = token.name;
        token.notImported = true;
        onSearch({
          searchQuery: contractAddress,
          results: [token]
        });
        return;
      }
    } catch (e) {
      _loglevel.default.error('Token not found, show 0 results.', e);
    }

    onSearch({
      searchQuery: contractAddress,
      results: [] // No token for import found.

    });
  };

  const handleSearch = async newSearchQuery => {
    setSearchQuery(newSearchQuery);

    if (timeoutIdForSearch) {
      clearTimeout(timeoutIdForSearch);
    }

    timeoutIdForSearch = setTimeout(async () => {
      timeoutIdForSearch = null;
      const trimmedNewSearchQuery = newSearchQuery.trim();
      const validHexAddress = (0, _hexstringUtils.isValidHexAddress)(trimmedNewSearchQuery);
      const fuseSearchResult = fuseRef.current.search(newSearchQuery);
      const results = defaultToAll && newSearchQuery === '' ? listToSearch : fuseSearchResult;

      if (shouldSearchForImports && results.length === 0 && validHexAddress) {
        await handleSearchTokenForImport(trimmedNewSearchQuery);
        return;
      }

      onSearch({
        searchQuery: newSearchQuery,
        results
      });
    }, 350);
  };

  (0, _react.useEffect)(() => {
    return () => clearTimeout(timeoutIdForSearch);
  }, []);
  (0, _react.useEffect)(() => {
    if (!fuseRef.current) {
      fuseRef.current = new _fuse.default(listToSearch, {
        shouldSort: true,
        threshold: 0.45,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 1,
        keys: fuseSearchKeys
      });
    }
  }, [fuseSearchKeys, listToSearch]);
  const previousListToSearch = (0, _usePrevious.usePrevious)(listToSearch !== null && listToSearch !== void 0 ? listToSearch : []);
  (0, _react.useEffect)(() => {
    if (fuseRef.current && searchQuery && previousListToSearch !== listToSearch) {
      fuseRef.current.setCollection(listToSearch);
      const fuseSearchResult = fuseRef.current.search(searchQuery);
      onSearch({
        searchQuery,
        results: fuseSearchResult
      });
    }
  }, [listToSearch, searchQuery, onSearch, previousListToSearch]);
  return /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "search-list-items",
    className: "searchable-item-list__search",
    placeholder: searchPlaceholderText,
    type: "text",
    value: searchQuery,
    onChange: e => handleSearch(e.target.value),
    error: error,
    fullWidth: true,
    startAdornment: renderAdornment(),
    autoComplete: "off",
    autoFocus: true
  });
}

ListItemSearch.propTypes = {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  listToSearch: _propTypes.default.array.isRequired,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  searchPlaceholderText: _propTypes.default.string,
  defaultToAll: _propTypes.default.bool,
  shouldSearchForImports: _propTypes.default.bool,
  searchQuery: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\searchable-item-list.js", {"./item-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\item-list\\index.js","./list-item-search":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\searchable-item-list\\list-item-search\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\searchable-item-list\searchable-item-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SearchableItemList;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _itemList = _interopRequireDefault(require("./item-list"));

var _listItemSearch = _interopRequireDefault(require("./list-item-search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SearchableItemList({
  className,
  defaultToAll,
  fuseSearchKeys,
  itemSelectorError,
  itemsToSearch = [],
  listTitle,
  maxListItems,
  onClickItem,
  onOpenImportTokenModalClick,
  Placeholder,
  searchPlaceholderText,
  hideRightLabels,
  hideItemIf,
  listContainerClassName,
  shouldSearchForImports,
  searchQuery,
  setSearchQuery
}) {
  const itemListRef = (0, _react.useRef)();
  const initialResultsState = (0, _react.useMemo)(() => {
    return defaultToAll ? itemsToSearch : [];
  }, [defaultToAll, itemsToSearch]);
  const [results, setResults] = (0, _react.useState)(initialResultsState);
  (0, _react.useEffect)(() => {
    if (!searchQuery) {
      // Only if there is no searchQuery we want to show all tokens.
      setResults(initialResultsState);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [initialResultsState.length, searchQuery]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, /*#__PURE__*/_react.default.createElement(_listItemSearch.default, {
    listToSearch: itemsToSearch,
    fuseSearchKeys: fuseSearchKeys,
    onSearch: ({
      searchQuery: newSearchQuery = '',
      results: newResults = []
    }) => {
      setSearchQuery(newSearchQuery);
      setResults(newResults);
    },
    error: itemSelectorError,
    searchPlaceholderText: searchPlaceholderText,
    defaultToAll: defaultToAll,
    shouldSearchForImports: shouldSearchForImports,
    searchQuery: searchQuery,
    setSearchQuery: setSearchQuery
  }), /*#__PURE__*/_react.default.createElement(_itemList.default, {
    searchQuery: searchQuery,
    results: results,
    onClickItem: onClickItem,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick,
    Placeholder: Placeholder,
    listTitle: listTitle,
    maxListItems: maxListItems,
    containerRef: itemListRef,
    hideRightLabels: hideRightLabels,
    hideItemIf: hideItemIf,
    listContainerClassName: listContainerClassName
  }));
}

SearchableItemList.propTypes = {
  itemSelectorError: _propTypes.default.string,
  itemsToSearch: _propTypes.default.array,
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  className: _propTypes.default.string,
  searchPlaceholderText: _propTypes.default.string,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    weight: _propTypes.default.number
  })),
  listTitle: _propTypes.default.string,
  defaultToAll: _propTypes.default.bool,
  maxListItems: _propTypes.default.number,
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string,
  shouldSearchForImports: _propTypes.default.bool,
  searchQuery: _propTypes.default.string,
  setSearchQuery: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\index.js", {"./select-quote-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _selectQuotePopover.default;
  }
});

var _selectQuotePopover = _interopRequireDefault(require("./select-quote-popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\index.js", {"./quote-details":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\quote-details.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\quote-details\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _quoteDetails.default;
  }
});

var _quoteDetails = _interopRequireDefault(require("./quote-details"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\quote-details.js", {"../../../../components/ui/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../exchange-rate-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\exchange-rate-display\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\quote-details\quote-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../../contexts/i18n");

var _infoTooltip = _interopRequireDefault(require("../../../../components/ui/info-tooltip"));

var _exchangeRateDisplay = _interopRequireDefault(require("../../exchange-rate-display"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const QuoteDetails = ({
  slippage,
  sourceTokenValue,
  sourceTokenSymbol,
  destinationTokenValue,
  destinationTokenSymbol,
  liquiditySourceKey,
  minimumAmountReceived,
  feeInEth,
  networkFees,
  metaMaskFee,
  hideEstimatedGasFee
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapRate')), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement(_exchangeRateDisplay.default, {
    primaryTokenValue: sourceTokenValue,
    primaryTokenDecimals: 1,
    primaryTokenSymbol: sourceTokenSymbol,
    secondaryTokenValue: destinationTokenValue,
    secondaryTokenDecimals: 1,
    secondaryTokenSymbol: destinationTokenSymbol
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapMaxSlippage'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapSlippageTooltip')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, `${slippage}%`)), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapAmountReceived'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapAmountReceivedInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement("span", null, minimumAmountReceived), /*#__PURE__*/_react.default.createElement("span", {
    className: "quote-details__bold"
  }, ` ${destinationTokenSymbol}`))), !hideEstimatedGasFee && /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapEstimatedNetworkFees'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapEstimatedNetworkFeesInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, /*#__PURE__*/_react.default.createElement("span", null, feeInEth), /*#__PURE__*/_react.default.createElement("span", {
    className: "quote-details__light-grey"
  }, ` (${networkFees})`))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, t('swapSource'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapSourceInfo')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, t(liquiditySourceKey))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__row quote-details__row--high"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-header"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/logo/metamask-fox.svg",
    className: "quote-details__metafox-logo",
    alt: ""
  }), t('swapMetaMaskFee')), /*#__PURE__*/_react.default.createElement("div", {
    className: "quote-details__detail-content"
  }, t('swapMetaMaskFeeDescription', [metaMaskFee]))));
};

QuoteDetails.propTypes = {
  slippage: _propTypes.default.number.isRequired,
  sourceTokenValue: _propTypes.default.string.isRequired,
  sourceTokenSymbol: _propTypes.default.string.isRequired,
  destinationTokenValue: _propTypes.default.string.isRequired,
  destinationTokenSymbol: _propTypes.default.string.isRequired,
  liquiditySourceKey: _propTypes.default.string.isRequired,
  minimumAmountReceived: _propTypes.default.string.isRequired,
  feeInEth: _propTypes.default.string.isRequired,
  networkFees: _propTypes.default.string.isRequired,
  metaMaskFee: _propTypes.default.number.isRequired,
  hideEstimatedGasFee: _propTypes.default.bool
};
var _default = QuoteDetails;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\select-quote-popover-constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QUOTE_DATA_ROWS_PROPTYPES_SHAPE = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const QUOTE_DATA_ROWS_PROPTYPES_SHAPE = _propTypes.default.shape({
  aggId: _propTypes.default.string.isRequired,
  amountReceiving: _propTypes.default.string.isRequired,
  destinationTokenDecimals: _propTypes.default.number.isRequired,
  destinationTokenSymbol: _propTypes.default.string.isRequired,
  destinationTokenValue: _propTypes.default.string.isRequired,
  isBestQuote: _propTypes.default.bool,
  networkFees: _propTypes.default.string.isRequired,
  quoteSource: _propTypes.default.string.isRequired,
  rawNetworkFees: _propTypes.default.string.isRequired,
  slippage: _propTypes.default.number.isRequired,
  sourceTokenDecimals: _propTypes.default.number.isRequired,
  sourceTokenSymbol: _propTypes.default.string.isRequired,
  sourceTokenValue: _propTypes.default.string.isRequired
});

exports.QUOTE_DATA_ROWS_PROPTYPES_SHAPE = QUOTE_DATA_ROWS_PROPTYPES_SHAPE;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover.js", {"../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","./quote-details":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\quote-details\\index.js","./select-quote-popover-constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js","./sort-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\select-quote-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../contexts/i18n");

var _popover = _interopRequireDefault(require("../../../components/ui/popover"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _quoteDetails = _interopRequireDefault(require("./quote-details"));

var _sortList = _interopRequireDefault(require("./sort-list"));

var _selectQuotePopoverConstants = require("./select-quote-popover-constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const SelectQuotePopover = ({
  quoteDataRows = [],
  onClose = null,
  onSubmit = null,
  swapToSymbol,
  initialAggId,
  onQuoteDetailsIsOpened,
  hideEstimatedGasFee
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [sortDirection, setSortDirection] = (0, _react.useState)(1);
  const [sortColumn, setSortColumn] = (0, _react.useState)(null);
  const [selectedAggId, setSelectedAggId] = (0, _react.useState)(initialAggId);
  const [contentView, setContentView] = (0, _react.useState)('sortList');
  const [viewingAgg, setViewingAgg] = (0, _react.useState)(null);
  const onSubmitClick = (0, _react.useCallback)(() => {
    onSubmit(selectedAggId);
    onClose();
  }, [selectedAggId, onClose, onSubmit]);
  const closeQuoteDetails = (0, _react.useCallback)(() => {
    setViewingAgg(null);
    setContentView('sortList');
  }, []);
  const onRowClick = (0, _react.useCallback)(aggId => setSelectedAggId(aggId), [setSelectedAggId]);
  const onCaretClick = (0, _react.useCallback)(aggId => {
    const agg = quoteDataRows.find(quote => quote.aggId === aggId);
    setContentView('quoteDetails');
    onQuoteDetailsIsOpened();
    setViewingAgg(agg);
  }, [quoteDataRows, onQuoteDetailsIsOpened]);
  const CustomBackground = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__popover-bg",
    onClick: onClose
  }), [onClose]);

  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onClose
  }, t('close')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onSubmitClick
  }, t('swapSelect')));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: contentView === 'quoteDetails' ? t('swapSelectAQuote') : t('swapQuoteDetails'),
    subtitle: contentView === 'sortList' ? t('swapSelectQuotePopoverDescription') : null,
    onClose: onClose,
    CustomBackground: CustomBackground,
    className: "select-quote-popover__popover-wrap",
    footerClassName: "swaps__footer",
    footer: contentView === 'quoteDetails' ? null : footer,
    onBack: contentView === 'quoteDetails' ? closeQuoteDetails : null
  }, contentView === 'sortList' && /*#__PURE__*/_react.default.createElement(_sortList.default, {
    quoteDataRows: quoteDataRows,
    selectedAggId: selectedAggId,
    onSelect: onRowClick,
    onCaretClick: onCaretClick,
    swapToSymbol: swapToSymbol,
    sortDirection: sortDirection,
    setSortDirection: setSortDirection,
    sortColumn: sortColumn,
    setSortColumn: setSortColumn,
    hideEstimatedGasFee: hideEstimatedGasFee
  }), contentView === 'quoteDetails' && viewingAgg && /*#__PURE__*/_react.default.createElement(_quoteDetails.default, _extends({}, viewingAgg, {
    hideEstimatedGasFee: hideEstimatedGasFee
  }))));
};

SelectQuotePopover.propTypes = {
  onClose: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  swapToSymbol: _propTypes.default.string,
  quoteDataRows: _propTypes.default.arrayOf(_selectQuotePopoverConstants.QUOTE_DATA_ROWS_PROPTYPES_SHAPE),
  initialAggId: _propTypes.default.string,
  onQuoteDetailsIsOpened: _propTypes.default.func,
  hideEstimatedGasFee: _propTypes.default.bool.isRequired
};
var _default = SelectQuotePopover;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\index.js", {"./sort-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\sort-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\sort-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _sortList.default;
  }
});

var _sortList = _interopRequireDefault(require("./sort-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\sort-list\\sort-list.js", {"../../../../components/ui/icon/sun-check-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\sun-check-icon.component.js","../../../../components/ui/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../select-quote-popover-constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\select-quote-popover-constants.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\select-quote-popover\sort-list\sort-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortList;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _sunCheckIcon = _interopRequireDefault(require("../../../../components/ui/icon/sun-check-icon.component"));

var _i18n = require("../../../../contexts/i18n");

var _selectQuotePopoverConstants = require("../select-quote-popover-constants");

var _infoTooltip = _interopRequireDefault(require("../../../../components/ui/info-tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ToggleArrows = () => /*#__PURE__*/_react.default.createElement("svg", {
  width: "6",
  height: "9",
  viewBox: "0 0 6 9",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "M0.7948 4.96973C0.365112 4.96973 0.150269 5.47754 0.462769 5.77051L2.78699 8.09473C2.96277 8.29004 3.25574 8.29004 3.45105 8.09473L5.77527 5.77051C6.06824 5.47754 5.85339 4.96973 5.44324 4.96973H0.7948ZM5.77527 2.91895L3.45105 0.594727C3.25574 0.418945 2.96277 0.418945 2.78699 0.594727L0.462769 2.91895C0.150269 3.23145 0.365112 3.71973 0.7948 3.71973H5.44324C5.85339 3.71973 6.06824 3.23145 5.77527 2.91895Z",
  fill: "var(--color-primary-default)"
}));

function SortList({
  quoteDataRows,
  selectedAggId,
  onSelect,
  onCaretClick,
  swapToSymbol,
  sortDirection,
  setSortDirection,
  sortColumn = null,
  setSortColumn,
  hideEstimatedGasFee
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [noRowHover, setRowNowHover] = (0, _react.useState)(false);

  const onColumnHeaderClick = nextSortColumn => {
    if (nextSortColumn === sortColumn) {
      setSortDirection(sortDirection * -1);
    } else {
      setSortColumn(nextSortColumn);
    }
  }; // This sort aims to do the following:
  // If there is no selected sort column, then the best quotes should be first in the list
  // If there is no selected sort column, then quotes that are not the best quotes should be in random order, after the first in the list
  // If the sort column is 'quoteSource', sort alphabetically by 'quoteSource'
  // Otherwise, sort in either ascending or descending numerical order on the selected column


  const sortedRows = (0, _react.useMemo)(() => {
    return [...quoteDataRows].sort((rowDataA, rowDataB) => {
      if (sortColumn === null && rowDataA.isBestQuote) {
        return -1;
      } else if (sortColumn === null && rowDataB.isBestQuote) {
        return 1;
      } else if (sortColumn === null) {
        // Here, the last character in the destinationTokenValue is used as a source of randomness for sorting
        const aHex = new _bignumber.default(rowDataA.destinationTokenValue).toString(16);
        const bHex = new _bignumber.default(rowDataB.destinationTokenValue).toString(16);
        return aHex[aHex.length - 1] < bHex[bHex.length - 1] ? -1 : 1;
      } else if (sortColumn === 'quoteSource') {
        return rowDataA[sortColumn] > rowDataB[sortColumn] ? sortDirection * -1 : sortDirection;
      }

      return new _bignumber.default(rowDataA[sortColumn]).gt(rowDataB[sortColumn]) ? sortDirection * -1 : sortDirection;
    });
  }, [quoteDataRows, sortColumn, sortDirection]);
  const selectedRow = sortedRows.findIndex(({
    aggId
  }) => selectedAggId === aggId);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__sort-list"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-headers"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__receiving",
    "data-testid": "select-quote-popover__receiving",
    onClick: () => onColumnHeaderClick('destinationTokenValue')
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "select-quote-popover__receiving-symbol"
  }, swapToSymbol), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-label"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('swapReceiving')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapReceivingInfoTooltip')
  }), /*#__PURE__*/_react.default.createElement(ToggleArrows, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__network-fees select-quote-popover__network-fees-header",
    "data-testid": "select-quote-popover__network-fees-header",
    onClick: () => onColumnHeaderClick('rawNetworkFees')
  }, !hideEstimatedGasFee && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, t('swapEstimatedNetworkFees')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t('swapEstimatedNetworkFeesInfo')
  }), /*#__PURE__*/_react.default.createElement(ToggleArrows, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__column-header select-quote-popover__quote-source",
    "data-testid": "select-quote-popover__quote-source",
    onClick: () => onColumnHeaderClick('quoteSource')
  }, t('swapQuoteSource'), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__quote-source-toggle"
  }, /*#__PURE__*/_react.default.createElement(ToggleArrows, null)))), sortedRows.map(({
    destinationTokenValue,
    networkFees,
    isBestQuote,
    quoteSource,
    aggId
  }, i) => /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('select-quote-popover__row', {
      'select-quote-popover__row--selected': selectedRow === i,
      'select-quote-popover__row--no-hover': noRowHover
    }),
    onClick: () => onSelect(aggId),
    key: `select-quote-popover-row-${i}`,
    "data-testid": `select-quote-popover-row-${i}`
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-value"
  }, isBestQuote && /*#__PURE__*/_react.default.createElement(_sunCheckIcon.default, {
    reverseColors: selectedRow !== i
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__receiving-value-text",
    title: destinationTokenValue
  }, destinationTokenValue)), quoteSource === 'RFQ' && /*#__PURE__*/_react.default.createElement("span", {
    className: "select-quote-popover__zero-slippage"
  }, t('swapZeroSlippage'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__network-fees"
  }, !hideEstimatedGasFee && networkFees), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__quote-source"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('select-quote-popover__quote-source-label', {
      'select-quote-popover__quote-source-label--green': quoteSource === 'AGG',
      'select-quote-popover__quote-source-label--orange': quoteSource === 'RFQ',
      'select-quote-popover__quote-source-label--blue': quoteSource === 'DEX'
    })
  }, quoteSource)), /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__caret-right",
    "data-testid": `select-quote-popover__caret-right-${i}`,
    onClick: event => {
      event.stopPropagation();
      onCaretClick(aggId);
    },
    onMouseEnter: () => setRowNowHover(true),
    onMouseLeave: () => setRowNowHover(false)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-up"
  })))));
}

SortList.propTypes = {
  selectedAggId: _propTypes.default.string.isRequired,
  onSelect: _propTypes.default.func.isRequired,
  onCaretClick: _propTypes.default.func.isRequired,
  swapToSymbol: _propTypes.default.string.isRequired,
  quoteDataRows: _propTypes.default.arrayOf(_selectQuotePopoverConstants.QUOTE_DATA_ROWS_PROPTYPES_SHAPE).isRequired,
  sortDirection: _propTypes.default.number.isRequired,
  setSortDirection: _propTypes.default.func.isRequired,
  sortColumn: _propTypes.default.string,
  setSortColumn: _propTypes.default.func.isRequired,
  hideEstimatedGasFee: _propTypes.default.bool.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\index.js", {"./slippage-buttons":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\slippage-buttons.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\slippage-buttons\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _slippageButtons.default;
  }
});

var _slippageButtons = _interopRequireDefault(require("./slippage-buttons"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\slippage-buttons\\slippage-buttons.js", {"../../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/button-group":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button-group\\index.js","../../../components/ui/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../components/ui/toggle-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\slippage-buttons\slippage-buttons.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SlippageButtons;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _buttonGroup = _interopRequireDefault(require("../../../components/ui/button-group"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _swaps = require("../swaps.util");

var _swaps2 = require("../../../../shared/constants/swaps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SlippageButtons({
  onSelect,
  maxAllowedSlippage,
  currentSlippage,
  smartTransactionsEnabled,
  smartTransactionsOptInStatus,
  setSmartTransactionsOptInStatus,
  currentSmartTransactionsError,
  isDirectWrappingEnabled
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [customValue, setCustomValue] = (0, _react.useState)(() => {
    if (typeof currentSlippage === 'number' && !Object.values(_swaps2.SLIPPAGE).includes(currentSlippage)) {
      return currentSlippage.toString();
    }

    return '';
  });
  const [enteringCustomValue, setEnteringCustomValue] = (0, _react.useState)(false);
  const [activeButtonIndex, setActiveButtonIndex] = (0, _react.useState)(() => {
    if (currentSlippage === _swaps2.SLIPPAGE.HIGH) {
      return 1; // 3% slippage.
    } else if (currentSlippage === _swaps2.SLIPPAGE.DEFAULT) {
      return 0; // 2% slippage.
    } else if (typeof currentSlippage === 'number') {
      return 2; // Custom slippage.
    }

    return 0;
  });
  const [open, setOpen] = (0, _react.useState)(() => {
    return currentSlippage !== _swaps2.SLIPPAGE.DEFAULT; // Only open Advanced options by default if it's not default slippage.
  });
  const [inputRef, setInputRef] = (0, _react.useState)(null);
  let errorText = '';

  if (customValue) {
    // customValue is a string, e.g. '0'
    if (Number(customValue) < 0) {
      errorText = t('swapSlippageNegative');
    } else if (Number(customValue) > 0 && Number(customValue) <= 1) {
      // We will not show this warning for 0% slippage, because we will only
      // return non-slippage quotes from off-chain makers.
      errorText = t('swapLowSlippageError');
    } else if (Number(customValue) >= 5 && Number(customValue) <= maxAllowedSlippage) {
      errorText = t('swapHighSlippageWarning');
    } else if (Number(customValue) > maxAllowedSlippage) {
      errorText = t('swapsExcessiveSlippageWarning');
    }
  }

  const customValueText = customValue || t('swapCustom');
  (0, _react.useEffect)(() => {
    if (inputRef && enteringCustomValue && window.document.activeElement !== inputRef) {
      inputRef.focus();
    }
  }, [inputRef, enteringCustomValue]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => setOpen(!open),
    className: (0, _classnames.default)('slippage-buttons__header', {
      'slippage-buttons__header--open': open
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__header-text"
  }, t('swapsAdvancedOptions')), open ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-up"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-down"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__content"
  }, open && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !isDirectWrappingEnabled && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__dropdown-content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__buttons-prefix"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__prefix-text"
  }, t('swapsMaxSlippage')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapSlippageTooltip')
  })), /*#__PURE__*/_react.default.createElement(_buttonGroup.default, {
    defaultActiveButtonIndex: activeButtonIndex === 2 && !customValue ? 1 : activeButtonIndex,
    variant: "radiogroup",
    newActiveButtonIndex: activeButtonIndex,
    className: (0, _classnames.default)('button-group', 'slippage-buttons__button-group')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(0);
      onSelect(_swaps2.SLIPPAGE.DEFAULT);
    }
  }, t('swapSlippagePercent', [_swaps2.SLIPPAGE.DEFAULT])), /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(1);
      onSelect(_swaps2.SLIPPAGE.HIGH);
    }
  }, t('swapSlippagePercent', [_swaps2.SLIPPAGE.HIGH])), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: (0, _classnames.default)('slippage-buttons__button-group-custom-button', {
      'radio-button--danger': errorText
    }),
    onClick: () => {
      setActiveButtonIndex(2);
      setEnteringCustomValue(true);
    }
  }, enteringCustomValue ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('slippage-buttons__custom-input', {
      'slippage-buttons__custom-input--danger': errorText
    })
  }, /*#__PURE__*/_react.default.createElement("input", {
    "data-testid": "slippage-buttons__custom-slippage",
    onChange: event => {
      const {
        value
      } = event.target;
      const isValueNumeric = !isNaN(Number(value));

      if (isValueNumeric) {
        setCustomValue(value);
        onSelect(Number(value));
      }
    },
    type: "text",
    maxLength: "4",
    ref: setInputRef,
    onBlur: () => {
      setEnteringCustomValue(false);
    },
    value: customValue || ''
  })) : customValueText, (customValue || enteringCustomValue) && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__percentage-suffix"
  }, "%")))), smartTransactionsEnabled && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    paddingRight: 3
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      paddingRight: 2
    },
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('smartTransaction')), currentSmartTransactionsError ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: (0, _swaps.getTranslatedStxErrorMessage)(currentSmartTransactionsError, t)
  }) : /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('stxTooltip')
  })), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
    value: smartTransactionsOptInStatus,
    onToggle: value => {
      setSmartTransactionsOptInStatus(!value, value);
    },
    offLabel: t('off'),
    onLabel: t('on'),
    disabled: Boolean(currentSmartTransactionsError)
  }))), errorText && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__error-text"
  }, errorText)));
}

SlippageButtons.propTypes = {
  onSelect: _propTypes.default.func.isRequired,
  maxAllowedSlippage: _propTypes.default.number.isRequired,
  currentSlippage: _propTypes.default.number,
  smartTransactionsEnabled: _propTypes.default.bool.isRequired,
  smartTransactionsOptInStatus: _propTypes.default.bool,
  setSmartTransactionsOptInStatus: _propTypes.default.func,
  currentSmartTransactionsError: _propTypes.default.string,
  isDirectWrappingEnabled: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\arrow-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\arrow-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ArrowIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ArrowIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "13",
    viewBox: "0 0 15 13",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M14.4946 6.14779C14.4863 5.93594 14.3991 5.69108 14.2539 5.53666L9.51334 0.49958C9.1921 0.21091 8.57613 0.0917437 8.21709 0.425509C7.86344 0.754237 7.87396 1.39178 8.22627 1.72181L11.5595 5.25889L1.1618 5.25889C0.670919 5.25889 0.272949 5.65687 0.272949 6.14779C0.272949 6.6387 0.670919 7.03668 1.1618 7.03668L11.5595 7.03668L8.22627 10.5738C7.92297 10.8776 7.86691 11.5376 8.21709 11.8701C8.56718 12.2025 9.20529 12.0963 9.51334 11.796L14.2539 6.75891C14.4161 6.58653 14.4952 6.38428 14.4946 6.14779Z",
    fill: "#D6D9DC"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\canceled-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\canceled-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CanceledIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CanceledIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "41",
    height: "39",
    viewBox: "0 0 41 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.5805 6.55143C36.1394 8.11033 37.3994 9.91222 38.3237 11.8681C38.7066 12.6782 39.0318 13.5148 39.2968 14.3714L39.3242 14.4606C39.4816 14.9785 39.6171 15.5037 39.73 16.0347C40.6511 20.3654 40.0335 24.9029 37.9511 28.8509C35.6001 33.308 31.5749 36.6487 26.7609 38.138C24.3773 38.8754 21.8717 39.1361 19.3873 38.9052C16.9029 38.6743 14.4883 37.9563 12.2813 36.7922C10.2608 35.7264 8.52045 34.3588 7.08333 32.7636C5.61245 31.1448 4.43054 29.2824 3.59178 27.2574C3.32329 26.6092 2.89685 25.2767 2.89685 25.2767H6.89583C7.68667 27.4068 8.96033 29.362 10.6288 30.9609L10.6318 30.96C11.5096 31.8005 12.501 32.5516 13.595 33.1786C15.8742 34.483 18.4736 35.1864 21.1455 35.1864C25.1768 35.1864 29.0429 33.585 31.8935 30.7345C34.744 27.8839 36.3455 24.0177 36.3455 19.9865C36.3455 18.7267 36.1891 17.483 35.8871 16.2814C35.8206 16.017 35.7471 15.7546 35.6666 15.4945C34.4752 11.6432 31.8027 8.42306 28.237 6.54231C24.6713 4.66156 20.5045 4.27429 16.6533 5.46571C12.8837 6.63189 9.71868 9.21706 7.82253 12.6699L12.8961 15.307L3.28331 18.3447L0.245605 8.73191L4.45005 10.9171C6.81537 6.56278 10.7905 3.30177 15.5303 1.83546C17.3658 1.26761 19.2587 0.986653 21.1455 0.986694C26.1846 0.986694 31.0173 2.98824 34.5805 6.55143Z",
    fill: "var(--color-primary-default)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18.1252 22.1036L14.7107 18.689L12.0926 21.3257L18.1252 27.3584L30.2322 15.2515L27.614 12.6148L18.1252 22.1036Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\index.js", {"./smart-transaction-status":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _smartTransactionStatus.default;
  }
});

var _smartTransactionStatus = _interopRequireDefault(require("./smart-transaction-status"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\reverted-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\reverted-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RevertedIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RevertedIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "41",
    height: "39",
    viewBox: "0 0 41 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.6806 6.55143C36.2395 8.11033 37.4995 9.91222 38.4238 11.8681C38.8067 12.6782 39.1319 13.5148 39.3969 14.3714L39.4243 14.4606C39.5817 14.9785 39.7172 15.5037 39.8301 16.0347C40.7512 20.3654 40.1336 24.9029 38.0512 28.8509C35.7002 33.308 31.675 36.6487 26.861 38.138C24.4773 38.8754 21.9718 39.1361 19.4874 38.9052C17.003 38.6743 14.5884 37.9563 12.3814 36.7922C10.3609 35.7264 8.62055 34.3588 7.18343 32.7636C5.71254 31.1448 4.53064 29.2824 3.69188 27.2574C3.42339 26.6092 2.99695 25.2767 2.99695 25.2767H6.99592C7.78677 27.4068 9.06042 29.362 10.7289 30.9609L10.7319 30.96C11.6097 31.8005 12.6011 32.5516 13.6951 33.1786C15.9743 34.483 18.5737 35.1864 21.2456 35.1864C25.2769 35.1864 29.143 33.585 31.9936 30.7345C34.8441 27.8839 36.4456 24.0177 36.4456 19.9865C36.4456 18.7267 36.2892 17.483 35.9872 16.2814C35.9207 16.017 35.8471 15.7546 35.7667 15.4945C34.5753 11.6432 31.9028 8.42306 28.3371 6.54231C24.7714 4.66156 20.6046 4.27429 16.7534 5.46571C12.9838 6.63189 9.81878 9.21706 7.92263 12.6699L12.9962 15.307L3.3834 18.3447L0.345703 8.73191L4.55015 10.9171C6.91547 6.56278 10.8906 3.30177 15.6304 1.83546C17.4659 1.26761 19.3588 0.986653 21.2456 0.986694C26.2847 0.986694 31.1174 2.98824 34.6806 6.55143Z",
    fill: "#D73A49"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M18.5849 19.9869L15.1454 23.4264L17.9845 26.2655L21.424 22.826L24.8635 26.2655L27.7026 23.4264L24.2631 19.9869L27.7026 16.5473L24.8635 13.7082L21.424 17.1478L17.9845 13.7082L15.1454 16.5473L18.5849 19.9869Z",
    fill: "#D73A49"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../components/ui/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../create-new-swap":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\create-new-swap\\index.js","../swaps-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","../view-on-block-explorer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\index.js","./arrow-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\arrow-icon.js","./canceled-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\canceled-icon.js","./reverted-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\reverted-icon.js","./success-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\success-icon.js","./timer-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\timer-icon.js","./unknown-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\unknown-icon.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\smart-transaction-status.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SmartTransactionStatus;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _etherscanLink = require("@metamask/etherscan-link");

var _lodash = require("lodash");

var _i18n = require("../../../contexts/i18n");

var _swaps = require("../../../ducks/swaps/swaps");

var _selectors = require("../../../selectors");

var _swaps2 = require("../../../../shared/constants/swaps");

var _metamask = require("../../../ducks/metamask/metamask");

var _routes = require("../../../helpers/constants/routes");

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));

var _designSystem = require("../../../helpers/constants/design-system");

var _actions = require("../../../store/actions");

var _metametrics = require("../../../../shared/constants/metametrics");

var _transaction = require("../../../../shared/constants/transaction");

var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));

var _swaps3 = require("../swaps.util");

var _metametrics2 = require("../../../contexts/metametrics");

var _createNewSwap = _interopRequireDefault(require("../create-new-swap"));

var _viewOnBlockExplorer = _interopRequireDefault(require("../view-on-block-explorer"));

var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");

var _successIcon = _interopRequireDefault(require("./success-icon"));

var _revertedIcon = _interopRequireDefault(require("./reverted-icon"));

var _canceledIcon = _interopRequireDefault(require("./canceled-icon"));

var _unknownIcon = _interopRequireDefault(require("./unknown-icon"));

var _arrowIcon = _interopRequireDefault(require("./arrow-icon"));

var _timerIcon = _interopRequireDefault(require("./timer-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SmartTransactionStatus() {
  var _ref, _rpcPrefs$blockExplor, _fetchParamsSourceTok, _latestSmartTransacti5, _fetchParams$value, _latestSmartTransacti6, _fetchParamsDestinati, _latestSmartTransacti7, _latestSmartTransacti9, _latestSmartTransacti10, _latestSmartTransacti13, _latestSmartTransacti14, _fetchParamsSourceTok2, _latestSmartTransacti15, _fetchParamsSourceTok3, _latestSmartTransacti16, _fetchParamsDestinati4, _latestSmartTransacti17, _fetchParamsDestinati5, _latestSmartTransacti18;

  const [cancelSwapLinkClicked, setCancelSwapLinkClicked] = (0, _react.useState)(false);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual) || {};
  const {
    destinationTokenInfo: fetchParamsDestinationTokenInfo = {},
    sourceTokenInfo: fetchParamsSourceTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const needsTwoConfirmations = true;
  const selectedQuote = (0, _reactRedux.useSelector)(_swaps.getSelectedQuote, _lodash.isEqual);
  const topQuote = (0, _reactRedux.useSelector)(_swaps.getTopQuote, _lodash.isEqual);
  const usedQuote = selectedQuote || topQuote;
  const currentSmartTransactions = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactions, _lodash.isEqual);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider, _reactRedux.shallowEqual);
  const swapsNetworkConfig = (0, _reactRedux.useSelector)(_swaps.getSwapsNetworkConfig, _reactRedux.shallowEqual);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsEnabled);
  const baseNetworkUrl = (_ref = (_rpcPrefs$blockExplor = rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : _swaps2.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId]) !== null && _ref !== void 0 ? _ref : null;
  const nativeCurrencySymbol = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_selectors.conversionRateSelector);
  const USDConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  let smartTransactionStatus = _transaction.SMART_TRANSACTION_STATUSES.PENDING;
  let latestSmartTransaction = {};
  let latestSmartTransactionUuid;
  let cancellationFeeWei;

  if (currentSmartTransactions && currentSmartTransactions.length > 0) {
    var _latestSmartTransacti, _latestSmartTransacti2, _latestSmartTransacti3, _latestSmartTransacti4;

    latestSmartTransaction = currentSmartTransactions[currentSmartTransactions.length - 1];
    latestSmartTransactionUuid = (_latestSmartTransacti = latestSmartTransaction) === null || _latestSmartTransacti === void 0 ? void 0 : _latestSmartTransacti.uuid;
    smartTransactionStatus = ((_latestSmartTransacti2 = latestSmartTransaction) === null || _latestSmartTransacti2 === void 0 ? void 0 : _latestSmartTransacti2.status) || _transaction.SMART_TRANSACTION_STATUSES.PENDING;
    cancellationFeeWei = (_latestSmartTransacti3 = latestSmartTransaction) === null || _latestSmartTransacti3 === void 0 ? void 0 : (_latestSmartTransacti4 = _latestSmartTransacti3.statusMetadata) === null || _latestSmartTransacti4 === void 0 ? void 0 : _latestSmartTransacti4.cancellationFeeWei;
  }

  const [timeLeftForPendingStxInSec, setTimeLeftForPendingStxInSec] = (0, _react.useState)(swapsNetworkConfig.stxStatusDeadline);
  const sensitiveProperties = {
    needs_two_confirmations: needsTwoConfirmations,
    token_from: (_fetchParamsSourceTok = fetchParamsSourceTokenInfo.symbol) !== null && _fetchParamsSourceTok !== void 0 ? _fetchParamsSourceTok : (_latestSmartTransacti5 = latestSmartTransaction) === null || _latestSmartTransacti5 === void 0 ? void 0 : _latestSmartTransacti5.sourceTokenSymbol,
    token_from_amount: (_fetchParams$value = fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value) !== null && _fetchParams$value !== void 0 ? _fetchParams$value : (_latestSmartTransacti6 = latestSmartTransaction) === null || _latestSmartTransacti6 === void 0 ? void 0 : _latestSmartTransacti6.swapTokenValue,
    token_to: (_fetchParamsDestinati = fetchParamsDestinationTokenInfo.symbol) !== null && _fetchParamsDestinati !== void 0 ? _fetchParamsDestinati : (_latestSmartTransacti7 = latestSmartTransaction) === null || _latestSmartTransacti7 === void 0 ? void 0 : _latestSmartTransacti7.destinationTokenSymbol,
    request_type: fetchParams !== null && fetchParams !== void 0 && fetchParams.balanceError ? 'Quote' : 'Order',
    slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
    custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) === 2,
    is_hardware_wallet: hardwareWalletUsed,
    hardware_wallet_type: hardwareWalletType,
    stx_enabled: smartTransactionsEnabled,
    current_stx_enabled: currentSmartTransactionsEnabled,
    stx_user_opt_in: smartTransactionsOptInStatus
  };
  let destinationValue;

  if (usedQuote !== null && usedQuote !== void 0 && usedQuote.destinationAmount) {
    var _fetchParamsDestinati2, _latestSmartTransacti8;

    destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.destinationAmount, (_fetchParamsDestinati2 = fetchParamsDestinationTokenInfo.decimals) !== null && _fetchParamsDestinati2 !== void 0 ? _fetchParamsDestinati2 : (_latestSmartTransacti8 = latestSmartTransaction) === null || _latestSmartTransacti8 === void 0 ? void 0 : _latestSmartTransacti8.destinationTokenDecimals).toPrecision(8);
  }

  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const isSmartTransactionPending = smartTransactionStatus === _transaction.SMART_TRANSACTION_STATUSES.PENDING;
  const showCloseButtonOnly = isSmartTransactionPending || smartTransactionStatus === _transaction.SMART_TRANSACTION_STATUSES.SUCCESS;
  const txHash = (_latestSmartTransacti9 = latestSmartTransaction) === null || _latestSmartTransacti9 === void 0 ? void 0 : (_latestSmartTransacti10 = _latestSmartTransacti9.statusMetadata) === null || _latestSmartTransacti10 === void 0 ? void 0 : _latestSmartTransacti10.minedHash;
  (0, _react.useEffect)(() => {
    trackEvent({
      event: 'STX Status Page Loaded',
      category: _metametrics.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties
    }); // eslint-disable-next-line
  }, []);
  (0, _react.useEffect)(() => {
    let intervalId;

    if (isSmartTransactionPending && latestSmartTransactionUuid) {
      const calculateRemainingTime = () => {
        const secondsAfterStxSubmission = Math.round((Date.now() - latestSmartTransaction.time) / 1000);

        if (secondsAfterStxSubmission > swapsNetworkConfig.stxStatusDeadline) {
          setTimeLeftForPendingStxInSec(0);
          clearInterval(intervalId);
          return;
        }

        setTimeLeftForPendingStxInSec(swapsNetworkConfig.stxStatusDeadline - secondsAfterStxSubmission);
      };

      intervalId = setInterval(calculateRemainingTime, 1000);
      calculateRemainingTime();
    }

    return () => clearInterval(intervalId);
  }, [dispatch, isSmartTransactionPending, latestSmartTransactionUuid, latestSmartTransaction.time, swapsNetworkConfig.stxStatusDeadline]);
  (0, _react.useEffect)(() => {
    dispatch((0, _actions.setBackgroundSwapRouteState)('smartTransactionStatus'));
    setTimeout(() => {
      // We don't need to poll for quotes on the status page.
      dispatch((0, _actions.stopPollingForQuotes)());
    }, 1000); // Stop polling for quotes after 1s.
  }, [dispatch]);
  let headerText = t('stxPendingPrivatelySubmittingSwap');
  let description;
  let subDescription;
  let icon;
  let blockExplorerUrl;

  if (isSmartTransactionPending) {
    if (cancelSwapLinkClicked) {
      headerText = t('stxTryingToCancel');
    } else if (cancellationFeeWei > 0) {
      headerText = t('stxPendingPubliclySubmittingSwap');
    }
  }

  if (smartTransactionStatus === _transaction.SMART_TRANSACTION_STATUSES.SUCCESS) {
    var _latestSmartTransacti11;

    headerText = t('stxSuccess');

    if (fetchParamsDestinationTokenInfo.symbol || (_latestSmartTransacti11 = latestSmartTransaction) !== null && _latestSmartTransacti11 !== void 0 && _latestSmartTransacti11.destinationTokenSymbol) {
      var _fetchParamsDestinati3, _latestSmartTransacti12;

      description = t('stxSuccessDescription', [(_fetchParamsDestinati3 = fetchParamsDestinationTokenInfo.symbol) !== null && _fetchParamsDestinati3 !== void 0 ? _fetchParamsDestinati3 : (_latestSmartTransacti12 = latestSmartTransaction) === null || _latestSmartTransacti12 === void 0 ? void 0 : _latestSmartTransacti12.destinationTokenSymbol]);
    }

    icon = /*#__PURE__*/_react.default.createElement(_successIcon.default, null);
  } else if (smartTransactionStatus === 'cancelled_user_cancelled' || ((_latestSmartTransacti13 = latestSmartTransaction) === null || _latestSmartTransacti13 === void 0 ? void 0 : (_latestSmartTransacti14 = _latestSmartTransacti13.statusMetadata) === null || _latestSmartTransacti14 === void 0 ? void 0 : _latestSmartTransacti14.minedTx) === _transaction.SMART_TRANSACTION_STATUSES.CANCELLED) {
    headerText = t('stxUserCancelled');
    description = t('stxUserCancelledDescription');
    icon = /*#__PURE__*/_react.default.createElement(_canceledIcon.default, null);
  } else if (smartTransactionStatus.startsWith('cancelled') || smartTransactionStatus.includes('deadline_missed')) {
    headerText = t('stxCancelled');
    description = t('stxCancelledDescription');
    subDescription = t('stxCancelledSubDescription');
    icon = /*#__PURE__*/_react.default.createElement(_canceledIcon.default, null);
  } else if (smartTransactionStatus === 'unknown') {
    headerText = t('stxUnknown');
    description = t('stxUnknownDescription');
    icon = /*#__PURE__*/_react.default.createElement(_unknownIcon.default, null);
  } else if (smartTransactionStatus === 'reverted') {
    headerText = t('stxFailure');
    description = t('stxFailureDescription', [/*#__PURE__*/_react.default.createElement("a", {
      className: "smart-transaction-status__support-link",
      key: "smart-transaction-status-support-link",
      href: "https://support.metamask.io",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('customerSupport'))]);
    icon = /*#__PURE__*/_react.default.createElement(_revertedIcon.default, null);
  }

  if (txHash && latestSmartTransactionUuid) {
    blockExplorerUrl = (0, _etherscanLink.getBlockExplorerLink)({
      hash: txHash,
      chainId
    }, {
      blockExplorerUrl: baseNetworkUrl
    });
  }

  const showCancelSwapLink = latestSmartTransaction.cancellable && !cancelSwapLinkClicked;

  const CancelSwap = () => {
    let feeInFiat;

    if (cancellationFeeWei > 0) {
      ({
        feeInFiat
      } = (0, _swaps3.getFeeForSmartTransaction)({
        chainId,
        currentCurrency,
        conversionRate,
        USDConversionRate,
        nativeCurrencySymbol,
        feeInWeiDec: cancellationFeeWei
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 0
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "smart-transaction-status__cancel-swap-link",
      href: "#",
      onClick: e => {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        setCancelSwapLinkClicked(true); // We want to hide it after a user clicks on it.

        trackEvent({
          event: 'Cancel STX',
          category: _metametrics.EVENT.CATEGORIES.SWAPS,
          sensitiveProperties
        });
        dispatch((0, _swaps.cancelSwapsSmartTransaction)(latestSmartTransactionUuid));
      }
    }, feeInFiat ? t('cancelSwapForFee', [feeInFiat]) : t('cancelSwapForFree')));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 8,
    paddingRight: 8,
    height: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JUSTIFY_CONTENT.START,
    display: _designSystem.DISPLAY.FLEX,
    className: "smart-transaction-status__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 10,
    marginBottom: 0,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6
  }, `${(fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value) && Number(fetchParams.value).toFixed(5)} `), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      marginLeft: 1,
      marginRight: 2
    }
  }, (_fetchParamsSourceTok2 = fetchParamsSourceTokenInfo.symbol) !== null && _fetchParamsSourceTok2 !== void 0 ? _fetchParamsSourceTok2 : (_latestSmartTransacti15 = latestSmartTransaction) === null || _latestSmartTransacti15 === void 0 ? void 0 : _latestSmartTransacti15.sourceTokenSymbol), fetchParamsSourceTokenInfo.iconUrl ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: fetchParamsSourceTokenInfo.iconUrl,
    className: "main-quote-summary__icon",
    name: (_fetchParamsSourceTok3 = fetchParamsSourceTokenInfo.symbol) !== null && _fetchParamsSourceTok3 !== void 0 ? _fetchParamsSourceTok3 : (_latestSmartTransacti16 = latestSmartTransaction) === null || _latestSmartTransacti16 === void 0 ? void 0 : _latestSmartTransacti16.destinationTokenSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.BLOCK,
    marginLeft: 2,
    marginRight: 2
  }, /*#__PURE__*/_react.default.createElement(_arrowIcon.default, null)), fetchParamsDestinationTokenInfo.iconUrl ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: fetchParamsDestinationTokenInfo.iconUrl,
    className: "main-quote-summary__icon",
    name: (_fetchParamsDestinati4 = fetchParamsDestinationTokenInfo.symbol) !== null && _fetchParamsDestinati4 !== void 0 ? _fetchParamsDestinati4 : (_latestSmartTransacti17 = latestSmartTransaction) === null || _latestSmartTransacti17 === void 0 ? void 0 : _latestSmartTransacti17.destinationTokenSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }) : null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      marginLeft: 2
    }
  }, `~${destinationValue && Number(destinationValue).toFixed(5)} `), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      marginLeft: 1
    }
  }, (_fetchParamsDestinati5 = fetchParamsDestinationTokenInfo.symbol) !== null && _fetchParamsDestinati5 !== void 0 ? _fetchParamsDestinati5 : (_latestSmartTransacti18 = latestSmartTransaction) === null || _latestSmartTransacti18 === void 0 ? void 0 : _latestSmartTransacti18.destinationTokenSymbol)), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    className: "smart-transaction-status__background-animation smart-transaction-status__background-animation--top"
  }), icon && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    marginBottom: 2
  }, icon), isSmartTransactionPending && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 7,
    marginBottom: 1,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER
  }, /*#__PURE__*/_react.default.createElement(_timerIcon.default, null), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      marginLeft: 1
    }
  }, `${t('stxSwapCompleteIn')} `), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      marginLeft: 1
    },
    className: "smart-transaction-status__remaining-time"
  }, (0, _swaps3.showRemainingTimeInMinAndSec)(timeLeftForPendingStxInSec))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, headerText), isSmartTransactionPending && /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status__loading-bar-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "smart-transaction-status__loading-bar",
    style: {
      width: `${100 / swapsNetworkConfig.stxStatusDeadline * (swapsNetworkConfig.stxStatusDeadline - timeLeftForPendingStxInSec)}%`
    }
  })), description && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: { ...(blockExplorerUrl && {
        margin: [1, 0, 0]
      })
    },
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, description), blockExplorerUrl && /*#__PURE__*/_react.default.createElement(_viewOnBlockExplorer.default, {
    blockExplorerUrl: blockExplorerUrl,
    sensitiveTrackingProperties: sensitiveProperties
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3,
    className: "smart-transaction-status__background-animation smart-transaction-status__background-animation--bottom"
  }), subDescription && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    boxProps: {
      marginTop: 8
    },
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, subDescription)), showCancelSwapLink && latestSmartTransactionUuid && isSmartTransactionPending && /*#__PURE__*/_react.default.createElement(CancelSwap, null), smartTransactionStatus === _transaction.SMART_TRANSACTION_STATUSES.SUCCESS ? /*#__PURE__*/_react.default.createElement(_createNewSwap.default, {
    sensitiveTrackingProperties: sensitiveProperties
  }) : null, /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit: async () => {
      if (showCloseButtonOnly) {
        await dispatch((0, _swaps.prepareToLeaveSwaps)());
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        history.push(_routes.BUILD_QUOTE_ROUTE);
      }
    },
    onCancel: async () => {
      await dispatch((0, _swaps.prepareToLeaveSwaps)());
      history.push(_routes.DEFAULT_ROUTE);
    },
    submitText: showCloseButtonOnly ? t('close') : t('tryAgain'),
    hideCancel: showCloseButtonOnly,
    cancelText: t('close'),
    className: "smart-transaction-status__swaps-footer"
  }));
}


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\success-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\success-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SuccessIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SuccessIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "39",
    height: "39",
    viewBox: "0 0 39 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.5457 19.8983C34.5457 23.9296 32.9443 27.7958 30.0937 30.6463C27.2432 33.4969 23.377 35.0983 19.3457 35.0983C15.3144 35.0983 11.4482 33.4969 8.59768 30.6463C5.74713 27.7958 4.1457 23.9296 4.1457 19.8983C4.1457 15.867 5.74713 12.0008 8.59768 9.15029C11.4482 6.29974 15.3144 4.69832 19.3457 4.69832C20.7897 4.69832 22.1957 4.90732 23.5257 5.28732L26.5087 2.30432C24.3047 1.39232 21.8917 0.898315 19.3457 0.898315C16.8506 0.898315 14.3799 1.38977 12.0747 2.3446C9.76953 3.29944 7.67499 4.69897 5.91067 6.46329C2.34748 10.0265 0.345703 14.8592 0.345703 19.8983C0.345703 24.9374 2.34748 29.7702 5.91067 33.3333C7.67499 35.0977 9.76953 36.4972 12.0747 37.452C14.3799 38.4069 16.8506 38.8983 19.3457 38.8983C24.3848 38.8983 29.2175 36.8965 32.7807 33.3333C36.3439 29.7702 38.3457 24.9374 38.3457 19.8983H34.5457ZM11.5747 16.2503L8.8957 18.9483L17.4457 27.4983L36.4457 8.49832L33.7667 5.80032L17.4457 22.1213L11.5747 16.2503Z",
    fill: "#28A745"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\timer-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\timer-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TimerIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TimerIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "14",
    viewBox: "0 0 15 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M7.36621 0.0810547C3.62012 0.0810547 0.584961 3.11621 0.584961 6.8623C0.584961 10.6084 3.62012 13.6436 7.36621 13.6436C11.1123 13.6436 14.1475 10.6084 14.1475 6.8623C14.1475 3.11621 11.1123 0.0810547 7.36621 0.0810547ZM7.36621 12.3311C4.33105 12.3311 1.89746 9.89746 1.89746 6.8623C1.89746 3.85449 4.33105 1.39355 7.36621 1.39355C10.374 1.39355 12.835 3.85449 12.835 6.8623C12.835 9.89746 10.374 12.3311 7.36621 12.3311ZM9.03418 9.4873C9.19824 9.59668 9.38965 9.56934 9.49902 9.40527L10.0186 8.72168C10.1279 8.55762 10.1006 8.36621 9.93652 8.25684L8.13184 6.91699V3.03418C8.13184 2.87012 7.96777 2.70605 7.80371 2.70605H6.92871C6.7373 2.70605 6.60059 2.87012 6.60059 3.03418V7.5459C6.60059 7.62793 6.62793 7.7373 6.70996 7.79199L9.03418 9.4873Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\smart-transaction-status\\unknown-icon.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\smart-transaction-status\unknown-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UnknownIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UnknownIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "39",
    height: "39",
    viewBox: "0 0 39 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("circle", {
    cx: "19.1533",
    cy: "19.2715",
    r: "17.1",
    stroke: "var(--color-primary-default)",
    strokeWidth: "3.8"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M16.712 21.5034C16.712 20.7834 16.88 20.1834 17.216 19.7034C17.568 19.2074 18.08 18.7274 18.752 18.2634C19.008 18.0874 19.264 17.9274 19.52 17.7834C19.776 17.6394 20 17.4874 20.192 17.3274C20.4 17.1514 20.56 16.9674 20.672 16.7754C20.8 16.5674 20.864 16.3194 20.864 16.0314C20.864 15.5354 20.688 15.1594 20.336 14.9034C20 14.6474 19.592 14.5194 19.112 14.5194C18.616 14.5194 18.16 14.6794 17.744 14.9994C17.344 15.3034 17.144 15.7674 17.144 16.3914H13.52C13.52 15.6394 13.664 14.9354 13.952 14.2794C14.24 13.6074 14.632 13.0314 15.128 12.5514C15.64 12.0554 16.232 11.6634 16.904 11.3754C17.592 11.0874 18.328 10.9434 19.112 10.9434C19.896 10.9434 20.616 11.0794 21.272 11.3514C21.944 11.6234 22.512 11.9834 22.976 12.4314C23.456 12.8794 23.824 13.3994 24.08 13.9914C24.352 14.5674 24.488 15.1754 24.488 15.8154C24.488 16.2314 24.456 16.6234 24.392 16.9914C24.344 17.3594 24.24 17.7114 24.08 18.0474C23.936 18.3834 23.728 18.7114 23.456 19.0314C23.184 19.3514 22.84 19.6634 22.424 19.9674C21.784 20.4474 21.272 20.8234 20.888 21.0954C20.52 21.3674 20.336 21.6474 20.336 21.9354V21.9594H16.712V21.5034ZM18.512 28.4634C18.16 28.4634 17.824 28.3994 17.504 28.2714C17.2 28.1274 16.928 27.9434 16.688 27.7194C16.464 27.4794 16.28 27.2074 16.136 26.9034C16.008 26.5834 15.944 26.2474 15.944 25.8954C15.944 25.5434 16.008 25.2154 16.136 24.9114C16.28 24.5914 16.464 24.3194 16.688 24.0954C16.928 23.8554 17.2 23.6714 17.504 23.5434C17.824 23.3994 18.16 23.3274 18.512 23.3274C18.864 23.3274 19.192 23.3994 19.496 23.5434C19.816 23.6714 20.088 23.8554 20.312 24.0954C20.552 24.3194 20.736 24.5914 20.864 24.9114C21.008 25.2154 21.08 25.5434 21.08 25.8954C21.08 26.2474 21.008 26.5834 20.864 26.9034C20.736 27.2074 20.552 27.4794 20.312 27.7194C20.088 27.9434 19.816 28.1274 19.496 28.2714C19.192 28.3994 18.864 28.4634 18.512 28.4634Z",
    fill: "var(--color-primary-default)"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js", {"./swaps-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\swaps-footer.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\swaps-footer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _swapsFooter.default;
  }
});

var _swapsFooter = _interopRequireDefault(require("./swaps-footer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\swaps-footer.js", {"../../../components/ui/page-container/page-container-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\swaps-footer\swaps-footer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapsFooter;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SwapsFooter({
  onCancel,
  hideCancel,
  onSubmit,
  submitText,
  disabled,
  showTermsOfService,
  showTopBorder,
  className = '',
  cancelText
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('swaps-footer__buttons', className, {
      'swaps-footer__buttons--border': showTopBorder
    })
  }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
    onCancel: onCancel,
    hideCancel: hideCancel,
    cancelText: cancelText || t('back'),
    onSubmit: onSubmit,
    submitText: submitText,
    footerClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-class', className),
    footerButtonClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-button-class', {
      'swaps-footer__custom-page-container-footer-button-class--single': hideCancel
    }),
    disabled: disabled
  })), showTermsOfService && /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer__bottom-text",
    onClick: () => global.platform.openTab({
      url: 'https://metamask.io/terms.html'
    })
  }, t('termsOfService')));
}

SwapsFooter.propTypes = {
  onCancel: _propTypes.default.func,
  hideCancel: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  showTermsOfService: _propTypes.default.bool,
  showTopBorder: _propTypes.default.bool,
  className: _propTypes.default.string,
  cancelText: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\index.js", {"./view-on-block-explorer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\view-on-block-explorer.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\view-on-block-explorer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewOnBlockExplorer.default;
  }
});

var _viewOnBlockExplorer = _interopRequireDefault(require("./view-on-block-explorer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-on-block-explorer\\view-on-block-explorer.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\view-on-block-explorer\view-on-block-explorer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewOnBlockExplorer;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _i18n = require("../../../contexts/i18n");

var _util = require("../../../helpers/utils/util");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ViewOnBlockExplorer({
  blockExplorerUrl,
  sensitiveTrackingProperties
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const blockExplorerHostName = (0, _util.getURLHostName)(blockExplorerUrl);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 6,
    className: "view-on-block-explorer"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      trackEvent({
        event: _metametrics2.EVENT_NAMES.EXTERNAL_LINK_CLICKED,
        category: _metametrics2.EVENT.CATEGORIES.SWAPS,
        sensitiveProperties: sensitiveTrackingProperties,
        properties: {
          link_type: _metametrics2.EVENT.EXTERNAL_LINK_TYPES.TRANSACTION_BLOCK_EXPLORER,
          location: 'Swap Transaction',
          url_domain: blockExplorerHostName
        }
      });
      global.platform.openTab({
        url: blockExplorerUrl
      });
    }
  }, t('viewOnCustomBlockExplorer', [t('blockExplorerSwapAction'), blockExplorerHostName])));
}

ViewOnBlockExplorer.propTypes = {
  blockExplorerUrl: _propTypes.default.string.isRequired,
  sensitiveTrackingProperties: _propTypes.default.object.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-quote\\index.js", {"./view-quote":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\view-quote\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewQuote.default;
  }
});

var _viewQuote = _interopRequireDefault(require("./view-quote"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote-price-difference.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\view-quote\view-quote-price-difference.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewQuotePriceDifference;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));

var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _designSystem = require("../../../helpers/constants/design-system");

var _gas = require("../../../../shared/constants/gas");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ViewQuotePriceDifference(props) {
  const {
    usedQuote,
    sourceTokenValue,
    destinationTokenValue,
    onAcknowledgementClick,
    acknowledged,
    priceSlippageFromSource,
    priceSlippageFromDestination,
    priceDifferencePercentage,
    priceSlippageUnknownFiatValue
  } = props;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  let priceDifferenceTitle = '';
  let priceDifferenceMessage = '';
  let priceDifferenceClass = '';
  let priceDifferenceAcknowledgementText = '';

  if (priceSlippageUnknownFiatValue) {
    // A calculation error signals we cannot determine dollar value
    priceDifferenceTitle = t('swapPriceUnavailableTitle');
    priceDifferenceMessage = t('swapPriceUnavailableDescription');
    priceDifferenceClass = _gas.GAS_RECOMMENDATIONS.HIGH;
    priceDifferenceAcknowledgementText = t('tooltipApproveButton');
  } else {
    priceDifferenceTitle = t('swapPriceDifferenceTitle', [priceDifferencePercentage]);
    priceDifferenceMessage = t('swapPriceDifference', [sourceTokenValue, // Number of source token to swap
    usedQuote.sourceTokenInfo.symbol, // Source token symbol
    priceSlippageFromSource, // Source tokens total value
    destinationTokenValue, // Number of destination tokens in return
    usedQuote.destinationTokenInfo.symbol, // Destination token symbol,
    priceSlippageFromDestination // Destination tokens total value
    ]);
    priceDifferenceClass = usedQuote.priceSlippage.bucket;
    priceDifferenceAcknowledgementText = t('tooltipApproveButton');
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__price-difference-warning-wrapper', priceDifferenceClass)
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-text"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN,
      paddingBottom: 2
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-title"
    }, priceDifferenceTitle), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      title: t('swapPriceImpactTooltip')
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-info-circle"
    }))), priceDifferenceMessage, !acknowledged && /*#__PURE__*/_react.default.createElement("div", {
      className: "view-quote__price-difference-warning-contents-actions"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: () => {
        onAcknowledgementClick();
      }
    }, priceDifferenceAcknowledgementText))))
  }));
}

ViewQuotePriceDifference.propTypes = {
  usedQuote: _propTypes.default.object,
  sourceTokenValue: _propTypes.default.string,
  destinationTokenValue: _propTypes.default.string,
  onAcknowledgementClick: _propTypes.default.func,
  acknowledged: _propTypes.default.bool,
  priceSlippageFromSource: _propTypes.default.string,
  priceSlippageFromDestination: _propTypes.default.string,
  priceDifferencePercentage: _propTypes.default.number,
  priceSlippageUnknownFiatValue: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../../shared/lib/swaps-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/pulse-loader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../hooks/gasFeeInput/useGasFeeInputs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useEqualityCheck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../hooks/useEthFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js","../../../hooks/usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actionConstants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../confirm-approve/confirm-approve.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","../countdown-timer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\countdown-timer\\index.js","../fee-card":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\fee-card\\index.js","../main-quote-summary":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\main-quote-summary\\index.js","../select-quote-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\select-quote-popover\\index.js","../swaps-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps-footer\\index.js","../swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","./view-quote-price-difference":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\view-quote\\view-quote-price-difference.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\view-quote\view-quote.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewQuote;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _browser = require("@sentry/browser");

var _i18n = require("../../../contexts/i18n");

var _selectQuotePopover = _interopRequireDefault(require("../select-quote-popover"));

var _useEthFiatAmount = require("../../../hooks/useEthFiatAmount");

var _useEqualityCheck = require("../../../hooks/useEqualityCheck");

var _usePrevious = require("../../../hooks/usePrevious");

var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");

var _metametrics = require("../../../contexts/metametrics");

var _feeCard = _interopRequireDefault(require("../fee-card"));

var _swaps = require("../../../ducks/swaps/swaps");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _actions = require("../../../store/actions");

var _actionConstants = require("../../../store/actionConstants");

var _routes = require("../../../helpers/constants/routes");

var _conversions = require("../../../helpers/utils/conversions.util");

var _mainQuoteSummary = _interopRequireDefault(require("../main-quote-summary"));

var _confirmApprove = require("../../confirm-approve/confirm-approve.util");

var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));

var _swaps2 = require("../swaps.util");

var _useTokenTracker = require("../../../hooks/useTokenTracker");

var _swaps3 = require("../../../../shared/constants/swaps");

var _gas = require("../../../../shared/constants/gas");

var _countdownTimer = _interopRequireDefault(require("../countdown-timer"));

var _swapsFooter = _interopRequireDefault(require("../swaps-footer"));

var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _stringUtils = require("../../../../shared/modules/string-utils");

var _transaction = require("../../../../shared/modules/transaction.utils");

var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");

var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");

var _swapsUtils = require("../../../../shared/lib/swaps-utils");

var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));

var _transactions = require("../../../helpers/utils/transactions.util");

var _viewQuotePriceDifference = _interopRequireDefault(require("./view-quote-price-difference"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// TODO: Replace this with a different loading component.
let intervalId;

function ViewQuote() {
  var _usedQuote$trade$valu, _usedQuote$trade, _usedQuote$priceSlipp, _usedQuote$priceSlipp2, _usedQuote$priceSlipp3, _usedQuote$priceSlipp4, _usedQuote$priceSlipp5;

  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [dispatchedSafeRefetch, setDispatchedSafeRefetch] = (0, _react.useState)(false);
  const [submitClicked, setSubmitClicked] = (0, _react.useState)(false);
  const [selectQuotePopoverShown, setSelectQuotePopoverShown] = (0, _react.useState)(false);
  const [warningHidden, setWarningHidden] = (0, _react.useState)(false);
  const [originalApproveAmount, setOriginalApproveAmount] = (0, _react.useState)(null);
  const [multiLayerL1FeeTotal, setMultiLayerL1FeeTotal] = (0, _react.useState)(null); // We need to have currentTimestamp in state, otherwise it would change with each rerender.

  const [currentTimestamp] = (0, _react.useState)(Date.now());
  const [acknowledgedPriceDifference, setAcknowledgedPriceDifference] = (0, _react.useState)(false);
  const priceDifferenceRiskyBuckets = [_gas.GAS_RECOMMENDATIONS.HIGH, _gas.GAS_RECOMMENDATIONS.MEDIUM];
  const routeState = (0, _reactRedux.useSelector)(_swaps.getBackgroundSwapRouteState);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (!Object.values(quotes).length) {
      history.push(_routes.BUILD_QUOTE_ROUTE);
    } else if (routeState === 'awaiting') {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }
  }, [history, quotes, routeState]);
  const quotesLastFetched = (0, _reactRedux.useSelector)(_swaps.getQuotesLastFetched); // Select necessary data

  const gasPrice = (0, _reactRedux.useSelector)(_swaps.getUsedSwapsGasPrice);
  const customMaxGas = (0, _reactRedux.useSelector)(_swaps.getCustomSwapsGas);
  const customMaxFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxFeePerGas);
  const customMaxPriorityFeePerGas = (0, _reactRedux.useSelector)(_swaps.getCustomMaxPriorityFeePerGas);
  const swapsUserFeeLevel = (0, _reactRedux.useSelector)(_swaps.getSwapsUserFeeLevel);
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const memoizedTokenConversionRates = (0, _useEqualityCheck.useEqualityCheck)(tokenConversionRates);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_selectors.conversionRateSelector);
  const USDConversionRate = (0, _reactRedux.useSelector)(_selectors.getUSDConversionRate);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const swapsTokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const balanceError = (0, _reactRedux.useSelector)(_swaps.getBalanceError);
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const approveTxParams = (0, _reactRedux.useSelector)(_swaps.getApproveTxParams, _reactRedux.shallowEqual);
  const selectedQuote = (0, _reactRedux.useSelector)(_swaps.getSelectedQuote, _lodash.isEqual);
  const topQuote = (0, _reactRedux.useSelector)(_swaps.getTopQuote, _lodash.isEqual);
  const usedQuote = selectedQuote || topQuote;
  const tradeValue = (_usedQuote$trade$valu = usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$trade = usedQuote.trade) === null || _usedQuote$trade === void 0 ? void 0 : _usedQuote$trade.value) !== null && _usedQuote$trade$valu !== void 0 ? _usedQuote$trade$valu : '0x0';
  const swapsQuoteRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuoteRefreshTime);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _lodash.isEqual);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const nativeCurrencySymbol = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const reviewSwapClickedTimestamp = (0, _reactRedux.useSelector)(_swaps.getReviewSwapClickedTimestamp);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const swapsSTXLoading = (0, _reactRedux.useSelector)(_swaps.getSwapsSTXLoading);
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const smartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsError);
  const currentSmartTransactionsErrorMessageDismissed = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsErrorMessageDismissed);
  const currentSmartTransactionsEnabled = smartTransactionsEnabled && !(currentSmartTransactionsError && (currentSmartTransactionsError !== 'not_enough_funds' || currentSmartTransactionsErrorMessageDismissed));
  const smartTransactionFees = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionFees, _lodash.isEqual);
  const swapsNetworkConfig = (0, _reactRedux.useSelector)(_swaps.getSwapsNetworkConfig, _reactRedux.shallowEqual);
  const unsignedTransaction = usedQuote.trade;
  let gasFeeInputs;

  if (networkAndAccountSupports1559) {
    // For Swaps we want to get 'high' estimations by default.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    gasFeeInputs = (0, _useGasFeeInputs.useGasFeeInputs)(_gas.GAS_RECOMMENDATIONS.HIGH, {
      userFeeLevel: swapsUserFeeLevel || _gas.GAS_RECOMMENDATIONS.HIGH
    });
  }

  const {
    isBestQuote
  } = usedQuote;
  const fetchParamsSourceToken = fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.sourceToken;
  const additionalTrackingParams = {
    reg_tx_fee_in_usd: undefined,
    reg_tx_fee_in_eth: undefined,
    reg_tx_max_fee_in_usd: undefined,
    reg_tx_max_fee_in_eth: undefined,
    stx_fee_in_usd: undefined,
    stx_fee_in_eth: undefined,
    stx_max_fee_in_usd: undefined,
    stx_max_fee_in_eth: undefined
  };
  const usedGasLimit = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _transactionsControllerUtils.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
  const gasLimitForMax = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`;
  const usedGasLimitWithMultiplier = new _bignumber.default(gasLimitForMax, 16).times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || _swaps.FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
  const nonCustomMaxGasLimit = usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? usedGasLimitWithMultiplier : `0x${(0, _transactionsControllerUtils.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`;
  const maxGasLimit = customMaxGas || nonCustomMaxGasLimit;
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let baseAndPriorityFeePerGas; // EIP-1559 gas fees.

  if (networkAndAccountSupports1559) {
    const {
      maxFeePerGas: suggestedMaxFeePerGas,
      maxPriorityFeePerGas: suggestedMaxPriorityFeePerGas,
      gasFeeEstimates: {
        estimatedBaseFee = '0'
      }
    } = gasFeeInputs;
    maxFeePerGas = customMaxFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas);
    maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
    baseAndPriorityFeePerGas = (0, _conversions.addHexes)((0, _conversions.decGWEIToHexWEI)(estimatedBaseFee), maxPriorityFeePerGas);
  }

  let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(maxGasLimit, maxFeePerGas || gasPrice);

  if (multiLayerL1FeeTotal !== null) {
    gasTotalInWeiHex = (0, _transactions.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1FeeTotal || '0x0');
  }

  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(swapsTokens, true);
  const balanceToken = fetchParamsSourceToken === defaultSwapsToken.address ? defaultSwapsToken : tokensWithBalances.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, fetchParamsSourceToken));
  const selectedFromToken = balanceToken || usedQuote.sourceTokenInfo;
  const tokenBalance = (tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) && (0, _transactionsControllerUtils.calcTokenAmount)(selectedFromToken.balance || '0x0', selectedFromToken.decimals).toFixed(9);
  const tokenBalanceUnavailable = tokensWithBalances && balanceToken === undefined;
  const approveData = (0, _transaction.parseStandardTokenTransactionData)(approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.data);
  const approveValue = approveData && (0, _metamaskControllerUtils.getTokenValueParam)(approveData);
  const approveAmount = approveValue && (selectedFromToken === null || selectedFromToken === void 0 ? void 0 : selectedFromToken.decimals) !== undefined && (0, _transactionsControllerUtils.calcTokenAmount)(approveValue, selectedFromToken.decimals).toFixed(9);
  const approveGas = approveTxParams === null || approveTxParams === void 0 ? void 0 : approveTxParams.gas;
  const renderablePopoverData = (0, _react.useMemo)(() => {
    return (0, _swaps2.quotesToRenderableData)(quotes, networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice, conversionRate, currentCurrency, approveGas, memoizedTokenConversionRates, chainId, smartTransactionsEnabled && smartTransactionsOptInStatus && (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees), nativeCurrencySymbol, multiLayerL1FeeTotal);
  }, [quotes, gasPrice, baseAndPriorityFeePerGas, networkAndAccountSupports1559, conversionRate, currentCurrency, approveGas, memoizedTokenConversionRates, chainId, smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees, nativeCurrencySymbol, smartTransactionsEnabled, smartTransactionsOptInStatus, multiLayerL1FeeTotal]);
  const renderableDataForUsedQuote = renderablePopoverData.find(renderablePopoverDatum => renderablePopoverDatum.aggId === usedQuote.aggregator);
  const {
    destinationTokenDecimals,
    destinationTokenSymbol,
    destinationTokenValue,
    destinationIconUrl,
    sourceTokenDecimals,
    sourceTokenSymbol,
    sourceTokenValue,
    sourceTokenIconUrl
  } = renderableDataForUsedQuote;
  let {
    feeInFiat,
    feeInEth,
    rawEthFee,
    feeInUsd
  } = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: usedGasLimit,
    approveGas,
    gasPrice: networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  additionalTrackingParams.reg_tx_fee_in_usd = Number(feeInUsd);
  additionalTrackingParams.reg_tx_fee_in_eth = Number(rawEthFee);
  const renderableMaxFees = (0, _swaps2.getRenderableNetworkFeesForQuote)({
    tradeGas: maxGasLimit,
    approveGas,
    gasPrice: maxFeePerGas || gasPrice,
    currentCurrency,
    conversionRate,
    USDConversionRate,
    tradeValue,
    sourceSymbol: sourceTokenSymbol,
    sourceAmount: usedQuote.sourceAmount,
    chainId,
    nativeCurrencySymbol,
    multiLayerL1FeeTotal
  });
  let {
    feeInFiat: maxFeeInFiat,
    feeInEth: maxFeeInEth,
    rawEthFee: maxRawEthFee,
    feeInUsd: maxFeeInUsd
  } = renderableMaxFees;
  additionalTrackingParams.reg_tx_max_fee_in_usd = Number(maxFeeInUsd);
  additionalTrackingParams.reg_tx_max_fee_in_eth = Number(maxRawEthFee);

  if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
    var _smartTransactionFees;

    const stxEstimatedFeeInWeiDec = (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.feeEstimate) + ((smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : (_smartTransactionFees = smartTransactionFees.approvalTxFees) === null || _smartTransactionFees === void 0 ? void 0 : _smartTransactionFees.feeEstimate) || 0);
    const stxMaxFeeInWeiDec = stxEstimatedFeeInWeiDec * swapsNetworkConfig.stxMaxFeeMultiplier;
    ({
      feeInFiat,
      feeInEth,
      rawEthFee,
      feeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxEstimatedFeeInWeiDec
    }));
    additionalTrackingParams.stx_fee_in_usd = Number(feeInUsd);
    additionalTrackingParams.stx_fee_in_eth = Number(rawEthFee);
    additionalTrackingParams.estimated_gas = smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees.gasLimit;
    ({
      feeInFiat: maxFeeInFiat,
      feeInEth: maxFeeInEth,
      rawEthFee: maxRawEthFee,
      feeInUsd: maxFeeInUsd
    } = (0, _swaps2.getFeeForSmartTransaction)({
      chainId,
      currentCurrency,
      conversionRate,
      USDConversionRate,
      nativeCurrencySymbol,
      feeInWeiDec: stxMaxFeeInWeiDec
    }));
    additionalTrackingParams.stx_max_fee_in_usd = Number(maxFeeInUsd);
    additionalTrackingParams.stx_max_fee_in_eth = Number(maxRawEthFee);
  }

  const tokenCost = new _bignumber.default(usedQuote.sourceAmount);
  const ethCost = new _bignumber.default(usedQuote.trade.value || 0, 10).plus(new _bignumber.default(gasTotalInWeiHex, 16));
  const insufficientTokens = ((tokensWithBalances === null || tokensWithBalances === void 0 ? void 0 : tokensWithBalances.length) || balanceError) && tokenCost.gt(new _bignumber.default(selectedFromToken.balance || '0x0'));
  const insufficientEth = ethCost.gt(new _bignumber.default(ethBalance || '0x0'));
  const tokenBalanceNeeded = insufficientTokens ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)((0, _transactionsControllerUtils.calcTokenAmount)(tokenCost, selectedFromToken.decimals).minus(tokenBalance).toString(10), 6) : null;
  const ethBalanceNeeded = insufficientEth ? (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(ethCost.minus(ethBalance, 16).div('1000000000000000000', 10).toString(10), 6) : null;
  let ethBalanceNeededStx;

  if (smartTransactionsError !== null && smartTransactionsError !== void 0 && smartTransactionsError.balanceNeededWei) {
    ethBalanceNeededStx = (0, _conversions.decWEIToDecETH)(smartTransactionsError.balanceNeededWei - smartTransactionsError.currentBalanceWei);
  }

  const destinationToken = (0, _reactRedux.useSelector)(_swaps.getDestinationTokenInfo, _lodash.isEqual);
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus) {
      if (insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(true));
      } else if (balanceError && !insufficientTokens) {
        dispatch((0, _swaps.setBalanceError)(false));
      }
    } else if (insufficientTokens || insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(true));
    } else if (balanceError && !insufficientTokens && !insufficientEth) {
      dispatch((0, _swaps.setBalanceError)(false));
    }
  }, [insufficientTokens, insufficientEth, balanceError, dispatch, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);
  (0, _react.useEffect)(() => {
    const currentTime = Date.now();
    const timeSinceLastFetched = currentTime - quotesLastFetched;

    if (timeSinceLastFetched > swapsQuoteRefreshTime && !dispatchedSafeRefetch) {
      setDispatchedSafeRefetch(true);
      dispatch((0, _actions.safeRefetchQuotes)());
    } else if (timeSinceLastFetched > swapsQuoteRefreshTime) {
      dispatch((0, _actions.setSwapsErrorKey)(_swaps3.QUOTES_EXPIRED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
    }
  }, [quotesLastFetched, dispatchedSafeRefetch, dispatch, history, swapsQuoteRefreshTime]);
  (0, _react.useEffect)(() => {
    if (!originalApproveAmount && approveAmount) {
      setOriginalApproveAmount(approveAmount);
    }
  }, [originalApproveAmount, approveAmount]); // If it's not a Smart Transaction and ETH balance is needed, we want to show a warning.

  const isNotStxAndEthBalanceIsNeeded = (!currentSmartTransactionsEnabled || !smartTransactionsOptInStatus) && ethBalanceNeeded; // If it's a Smart Transaction and ETH balance is needed, we want to show a warning.

  const isStxAndEthBalanceIsNeeded = currentSmartTransactionsEnabled && smartTransactionsOptInStatus && ethBalanceNeededStx; // Indicates if we should show to a user a warning about insufficient funds for swapping.

  const showInsufficientWarning = (balanceError || tokenBalanceNeeded || isNotStxAndEthBalanceIsNeeded || isStxAndEthBalanceIsNeeded) && !warningHidden;
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const numberOfQuotes = Object.values(quotes).length;
  const bestQuoteReviewedEventSent = (0, _react.useRef)();
  const eventObjectBase = (0, _react.useMemo)(() => {
    return {
      token_from: sourceTokenSymbol,
      token_from_amount: sourceTokenValue,
      token_to: destinationTokenSymbol,
      token_to_amount: destinationTokenValue,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      response_time: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime,
      best_quote_source: topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator,
      available_quotes: numberOfQuotes,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    };
  }, [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage, fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.responseTime, topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator, numberOfQuotes, hardwareWalletUsed, hardwareWalletType, smartTransactionsEnabled, currentSmartTransactionsEnabled, smartTransactionsOptInStatus]);

  const trackAllAvailableQuotesOpened = () => {
    trackEvent({
      event: 'All Available Quotes Opened',
      category: _metametrics2.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: { ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };

  const trackQuoteDetailsOpened = () => {
    trackEvent({
      event: 'Quote Details Opened',
      category: _metametrics2.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: { ...eventObjectBase,
        other_quote_selected: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) !== (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator),
        other_quote_selected_source: (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator) === (topQuote === null || topQuote === void 0 ? void 0 : topQuote.aggregator) ? null : usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.aggregator
      }
    });
  };

  const trackEditSpendLimitOpened = () => {
    trackEvent({
      event: 'Edit Spend Limit Opened',
      category: _metametrics2.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: { ...eventObjectBase,
        custom_spend_limit_set: originalApproveAmount === approveAmount,
        custom_spend_limit_amount: originalApproveAmount === approveAmount ? null : approveAmount
      }
    });
  };

  const trackBestQuoteReviewedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'Best Quote Reviewed',
      category: _metametrics2.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: { ...eventObjectBase,
        network_fees: feeInFiat
      }
    });
  }, [trackEvent, eventObjectBase, feeInFiat]);
  const trackViewQuotePageLoadedEvent = (0, _react.useCallback)(() => {
    trackEvent({
      event: 'View Quote Page Loaded',
      category: _metametrics2.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: { ...eventObjectBase,
        response_time: currentTimestamp - reviewSwapClickedTimestamp
      }
    });
  }, [trackEvent, eventObjectBase, currentTimestamp, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    if (!bestQuoteReviewedEventSent.current && [sourceTokenSymbol, sourceTokenValue, destinationTokenSymbol, destinationTokenValue, fetchParams, topQuote, numberOfQuotes, feeInFiat].every(dep => dep !== null && dep !== undefined)) {
      bestQuoteReviewedEventSent.current = true;
      trackBestQuoteReviewedEvent();
    }
  }, [fetchParams, topQuote, numberOfQuotes, feeInFiat, destinationTokenSymbol, destinationTokenValue, sourceTokenSymbol, sourceTokenValue, trackBestQuoteReviewedEvent]);
  const metaMaskFee = usedQuote.fee;
  /* istanbul ignore next */

  const onFeeCardTokenApprovalClick = () => {
    trackEditSpendLimitOpened();
    dispatch((0, _actions.showModal)({
      name: 'EDIT_APPROVAL_PERMISSION',
      decimals: selectedFromToken.decimals,
      origin: 'MetaMask',
      setCustomAmount: newCustomPermissionAmount => {
        const customPermissionAmount = newCustomPermissionAmount === '' ? originalApproveAmount : newCustomPermissionAmount;
        const newData = (0, _confirmApprove.getCustomTxParamsData)(approveTxParams.data, {
          customPermissionAmount,
          decimals: selectedFromToken.decimals
        });

        if (customPermissionAmount !== null && customPermissionAmount !== void 0 && customPermissionAmount.length && approveTxParams.data !== newData) {
          dispatch((0, _actions.setCustomApproveTxData)(newData));
        }
      },
      tokenAmount: originalApproveAmount,
      customTokenAmount: originalApproveAmount === approveAmount ? null : approveAmount,
      tokenBalance,
      tokenSymbol: selectedFromToken.symbol,
      requiredMinimum: (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.sourceAmount, selectedFromToken.decimals)
    }));
  };

  const actionableBalanceErrorMessage = tokenBalanceUnavailable ? t('swapTokenBalanceUnavailable', [sourceTokenSymbol]) : t('swapApproveNeedMoreTokens', [/*#__PURE__*/_react.default.createElement("span", {
    key: "swapApproveNeedMoreTokens-1",
    className: "view-quote__bold"
  }, tokenBalanceNeeded || ethBalanceNeededStx || ethBalanceNeeded), tokenBalanceNeeded && !(sourceTokenSymbol === defaultSwapsToken.symbol) ? sourceTokenSymbol : defaultSwapsToken.symbol]); // Price difference warning

  const priceSlippageBucket = usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp === void 0 ? void 0 : _usedQuote$priceSlipp.bucket;
  const lastPriceDifferenceBucket = (0, _usePrevious.usePrevious)(priceSlippageBucket); // If the user agreed to a different bucket of risk, make them agree again

  (0, _react.useEffect)(() => {
    if (acknowledgedPriceDifference && lastPriceDifferenceBucket === _gas.GAS_RECOMMENDATIONS.MEDIUM && priceSlippageBucket === _gas.GAS_RECOMMENDATIONS.HIGH) {
      setAcknowledgedPriceDifference(false);
    }
  }, [priceSlippageBucket, acknowledgedPriceDifference, lastPriceDifferenceBucket]);
  let viewQuotePriceDifferenceComponent = null;
  const priceSlippageFromSource = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp2 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp2 === void 0 ? void 0 : _usedQuote$priceSlipp2.sourceAmountInETH) || 0, {
    showFiat: true
  });
  const priceSlippageFromDestination = (0, _useEthFiatAmount.useEthFiatAmount)((usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp3 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp3 === void 0 ? void 0 : _usedQuote$priceSlipp3.destinationAmountInETH) || 0, {
    showFiat: true
  }); // We cannot present fiat value if there is a calculation error or no slippage
  // from source or destination

  const priceSlippageUnknownFiatValue = !priceSlippageFromSource || !priceSlippageFromDestination || Boolean(usedQuote === null || usedQuote === void 0 ? void 0 : (_usedQuote$priceSlipp4 = usedQuote.priceSlippage) === null || _usedQuote$priceSlipp4 === void 0 ? void 0 : _usedQuote$priceSlipp4.calculationError);
  let priceDifferencePercentage = 0;

  if (usedQuote !== null && usedQuote !== void 0 && (_usedQuote$priceSlipp5 = usedQuote.priceSlippage) !== null && _usedQuote$priceSlipp5 !== void 0 && _usedQuote$priceSlipp5.ratio) {
    priceDifferencePercentage = parseFloat(new _bignumber.default(usedQuote.priceSlippage.ratio, 10).minus(1, 10).times(100, 10).toFixed(2), 10);
  }

  const shouldShowPriceDifferenceWarning = !tokenBalanceUnavailable && !showInsufficientWarning && usedQuote && (priceDifferenceRiskyBuckets.includes(priceSlippageBucket) || priceSlippageUnknownFiatValue);

  if (shouldShowPriceDifferenceWarning) {
    viewQuotePriceDifferenceComponent = /*#__PURE__*/_react.default.createElement(_viewQuotePriceDifference.default, {
      usedQuote: usedQuote,
      sourceTokenValue: sourceTokenValue,
      destinationTokenValue: destinationTokenValue,
      priceSlippageFromSource: priceSlippageFromSource,
      priceSlippageFromDestination: priceSlippageFromDestination,
      priceDifferencePercentage: priceDifferencePercentage,
      priceSlippageUnknownFiatValue: priceSlippageUnknownFiatValue,
      onAcknowledgementClick: () => {
        setAcknowledgedPriceDifference(true);
      },
      acknowledged: acknowledgedPriceDifference
    });
  }

  const disableSubmissionDueToPriceWarning = shouldShowPriceDifferenceWarning && !acknowledgedPriceDifference;
  const isShowingWarning = showInsufficientWarning || shouldShowPriceDifferenceWarning;
  const isSwapButtonDisabled = Boolean(submitClicked || balanceError || tokenBalanceUnavailable || disableSubmissionDueToPriceWarning || networkAndAccountSupports1559 && baseAndPriorityFeePerGas === undefined || !networkAndAccountSupports1559 && (gasPrice === null || gasPrice === undefined) || currentSmartTransactionsEnabled && (currentSmartTransactionsError || smartTransactionsError) || currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !(smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees));
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !insufficientTokens) {
      const unsignedTx = {
        from: unsignedTransaction.from,
        to: unsignedTransaction.to,
        value: unsignedTransaction.value,
        data: unsignedTransaction.data,
        gas: unsignedTransaction.gas,
        chainId
      };
      intervalId = setInterval(() => {
        if (!swapsSTXLoading) {
          dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
            unsignedTransaction: unsignedTx,
            approveTxParams,
            fallbackOnNotEnoughFunds: false
          }));
        }
      }, swapsNetworkConfig.stxGetTransactionsRefreshTime);
      dispatch((0, _swaps.fetchSwapsSmartTransactionFees)({
        unsignedTransaction: unsignedTx,
        approveTxParams,
        fallbackOnNotEnoughFunds: false
      }));
    } else if (intervalId) {
      clearInterval(intervalId);
    }

    return () => clearInterval(intervalId); // eslint-disable-next-line
  }, [dispatch, currentSmartTransactionsEnabled, smartTransactionsOptInStatus, unsignedTransaction.data, unsignedTransaction.from, unsignedTransaction.value, unsignedTransaction.gas, unsignedTransaction.to, chainId, swapsNetworkConfig.stxGetTransactionsRefreshTime, insufficientTokens]);
  (0, _react.useEffect)(() => {
    // Thanks to the next line we will only do quotes polling 3 times before showing a Quote Timeout modal.
    dispatch((0, _actions.setSwapsQuotesPollingLimitEnabled)(true));

    if (reviewSwapClickedTimestamp) {
      trackViewQuotePageLoadedEvent();
    }
  }, [dispatch, trackViewQuotePageLoadedEvent, reviewSwapClickedTimestamp]);
  (0, _react.useEffect)(() => {
    // if smart transaction error is turned off, reset submit clicked boolean
    if (!currentSmartTransactionsEnabled && currentSmartTransactionsError && submitClicked) {
      setSubmitClicked(false);
    }
  }, [currentSmartTransactionsEnabled, currentSmartTransactionsError, submitClicked]);
  (0, _react.useEffect)(() => {
    if (!isMultiLayerFeeNetwork) {
      return;
    }

    const getEstimatedL1Fee = async () => {
      try {
        const result = await (0, _fetchEstimatedL1Fee.default)(global.eth, {
          txParams: unsignedTransaction,
          chainId
        });
        setMultiLayerL1FeeTotal(result);
      } catch (e) {
        (0, _browser.captureException)(e);
        setMultiLayerL1FeeTotal(null);
      }
    };

    getEstimatedL1Fee();
  }, [unsignedTransaction, isMultiLayerFeeNetwork, chainId]);
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus) {
      // Removes a smart transactions error when the component loads.
      dispatch({
        type: _actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
    }
  }, [currentSmartTransactionsEnabled, smartTransactionsOptInStatus, dispatch]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "view-quote"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__content', {
      'view-quote__content_modal': disableSubmissionDueToPriceWarning
    })
  },
  /* istanbul ignore next */
  selectQuotePopoverShown && /*#__PURE__*/_react.default.createElement(_selectQuotePopover.default, {
    quoteDataRows: renderablePopoverData,
    onClose: () => setSelectQuotePopoverShown(false),
    onSubmit: aggId => dispatch((0, _swaps.swapsQuoteSelected)(aggId)),
    swapToSymbol: destinationTokenSymbol,
    initialAggId: usedQuote.aggregator,
    onQuoteDetailsIsOpened: trackQuoteDetailsOpened,
    hideEstimatedGasFee: smartTransactionsEnabled && smartTransactionsOptInStatus
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__warning-wrapper', {
      'view-quote__warning-wrapper--thin': !isShowingWarning
    })
  }, viewQuotePriceDifferenceComponent, (showInsufficientWarning || tokenBalanceUnavailable) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: actionableBalanceErrorMessage,
    onClose:
    /* istanbul ignore next */
    () => setWarningHidden(true)
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "view-quote__countdown-timer-container"
  }, /*#__PURE__*/_react.default.createElement(_countdownTimer.default, {
    timeStarted: quotesLastFetched,
    warningTime: "0:10",
    labelKey: "swapNewQuoteIn"
  })), /*#__PURE__*/_react.default.createElement(_mainQuoteSummary.default, {
    sourceValue: (0, _swapsUtils.calcTokenValue)(sourceTokenValue, sourceTokenDecimals),
    sourceDecimals: sourceTokenDecimals,
    sourceSymbol: sourceTokenSymbol,
    destinationValue: (0, _swapsUtils.calcTokenValue)(destinationTokenValue, destinationTokenDecimals),
    destinationDecimals: destinationTokenDecimals,
    destinationSymbol: destinationTokenSymbol,
    sourceIconUrl: sourceTokenIconUrl,
    destinationIconUrl: destinationIconUrl
  }), currentSmartTransactionsEnabled && smartTransactionsOptInStatus && !(smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) && !showInsufficientWarning && /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 0,
    marginBottom: 10
  }, /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null)), (!currentSmartTransactionsEnabled || !smartTransactionsOptInStatus || (smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.tradeTxFees)) && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('view-quote__fee-card-container', {
      'view-quote__fee-card-container--three-rows': approveTxParams && (!balanceError || warningHidden)
    })
  }, /*#__PURE__*/_react.default.createElement(_feeCard.default, {
    primaryFee: {
      fee: feeInEth,
      maxFee: maxFeeInEth
    },
    secondaryFee: {
      fee: feeInFiat,
      maxFee: maxFeeInFiat
    },
    hideTokenApprovalRow: !approveTxParams || balanceError && !warningHidden,
    tokenApprovalSourceTokenSymbol: sourceTokenSymbol,
    onTokenApprovalClick: onFeeCardTokenApprovalClick,
    metaMaskFee: String(metaMaskFee),
    numberOfQuotes: Object.values(quotes).length,
    onQuotesClick:
    /* istanbul ignore next */
    () => {
      trackAllAvailableQuotesOpened();
      setSelectQuotePopoverShown(true);
    },
    chainId: chainId,
    isBestQuote: isBestQuote,
    maxPriorityFeePerGasDecGWEI: (0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxPriorityFeePerGas),
    maxFeePerGasDecGWEI: (0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxFeePerGas)
  }))), /*#__PURE__*/_react.default.createElement(_swapsFooter.default, {
    onSubmit:
    /* istanbul ignore next */
    () => {
      setSubmitClicked(true);

      if (!balanceError) {
        if (currentSmartTransactionsEnabled && smartTransactionsOptInStatus && smartTransactionFees !== null && smartTransactionFees !== void 0 && smartTransactionFees.tradeTxFees) {
          dispatch((0, _swaps.signAndSendSwapsSmartTransaction)({
            unsignedTransaction,
            trackEvent,
            history,
            additionalTrackingParams
          }));
        } else {
          dispatch((0, _swaps.signAndSendTransactions)(history, trackEvent, additionalTrackingParams));
        }
      } else if (destinationToken.symbol === defaultSwapsToken.symbol) {
        history.push(_routes.DEFAULT_ROUTE);
      } else {
        history.push(`${_routes.ASSET_ROUTE}/${destinationToken.address}`);
      }
    },
    submitText: currentSmartTransactionsEnabled && smartTransactionsOptInStatus && swapsSTXLoading ? t('preparingSwap') : t('swap'),
    hideCancel: true,
    disabled: isSwapButtonDisabled,
    className: isShowingWarning ? 'view-quote__thin-swaps-footer' : '',
    showTopBorder: true
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\token-allowance\\token-allowance.js", {"../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../components/app/approve-content-card/approve-content-card":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\approve-content-card\\approve-content-card.js","../../components/app/custom-spending-cap/custom-spending-cap":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js","../../components/app/modals/contract-details-modal/contract-details-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js","../../components/app/network-account-balance-header/network-account-balance-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js","../../components/ui/box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/contract-token-values/contract-token-values":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\contract-token-values\\contract-token-values.js","../../components/ui/dialog":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dialog\\index.js","../../components/ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/review-spending-cap/review-spending-cap":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\review-spending-cap\\review-spending-cap.js","../../components/ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../components/ui/url-icon/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\url-icon.js","../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../confirm-approve/confirm-approve.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\token-allowance\token-allowance.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenAllowance;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../components/ui/box/box"));

var _networkAccountBalanceHeader = _interopRequireDefault(require("../../components/app/network-account-balance-header/network-account-balance-header"));

var _urlIcon = _interopRequireDefault(require("../../components/ui/url-icon/url-icon"));

var _typography = _interopRequireDefault(require("../../components/ui/typography/typography"));

var _designSystem = require("../../helpers/constants/design-system");

var _i18n = require("../../contexts/i18n");

var _contractTokenValues = _interopRequireDefault(require("../../components/ui/contract-token-values/contract-token-values"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _reviewSpendingCap = _interopRequireDefault(require("../../components/ui/review-spending-cap/review-spending-cap"));

var _pageContainer = require("../../components/ui/page-container");

var _contractDetailsModal = _interopRequireDefault(require("../../components/app/modals/contract-details-modal/contract-details-modal"));

var _selectors = require("../../selectors");

var _network = require("../../../shared/constants/network");

var _actions = require("../../store/actions");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../ducks/history/history");

var _approveContentCard = _interopRequireDefault(require("../../components/app/approve-content-card/approve-content-card"));

var _customSpendingCap = _interopRequireDefault(require("../../components/app/custom-spending-cap/custom-spending-cap"));

var _dialog = _interopRequireDefault(require("../../components/ui/dialog"));

var _gasFee = require("../../contexts/gasFee");

var _confirmApprove = require("../confirm-approve/confirm-approve.util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TokenAllowance({
  origin,
  siteImage,
  showCustomizeGasModal,
  useNonceField,
  currentCurrency,
  nativeCurrency,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexTransactionTotal,
  txData,
  isMultiLayerFeeNetwork,
  supportsEIP1559V2,
  userAddress,
  tokenAddress,
  data,
  isSetApproveForAll,
  isApprovalOrRejection,
  decimals,
  dappProposedTokenAmount,
  currentTokenBalance,
  toAddress,
  tokenSymbol
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const [showContractDetails, setShowContractDetails] = (0, _react.useState)(false);
  const [showFullTxDetails, setShowFullTxDetails] = (0, _react.useState)(false);
  const [isFirstPage, setIsFirstPage] = (0, _react.useState)(true);
  const [errorText, setErrorText] = (0, _react.useState)('');
  const currentAccount = (0, _reactRedux.useSelector)(_selectors.getCurrentAccountWithSendEtherInfo);
  const networkIdentifier = (0, _reactRedux.useSelector)(_selectors.getNetworkIdentifier);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const customTokenAmount = (0, _reactRedux.useSelector)(_selectors.getCustomTokenAmount);
  const customPermissionAmount = customTokenAmount.toString();
  const customTxParamsData = customTokenAmount ? (0, _confirmApprove.getCustomTxParamsData)(data, {
    customPermissionAmount,
    decimals
  }) : null;
  let fullTxData = { ...txData
  };

  if (customTxParamsData) {
    fullTxData = { ...fullTxData,
      txParams: { ...fullTxData.txParams,
        data: customTxParamsData
      }
    };
  }

  const fee = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, fullTxData));
  const methodData = (0, _reactRedux.useSelector)(state => (0, _selectors.getKnownMethodData)(state, data));
  const {
    balanceError
  } = (0, _gasFee.useGasFeeContext)();
  const disableNextButton = isFirstPage && (customTokenAmount === '' || errorText !== '');
  const disableApproveButton = !isFirstPage && balanceError;
  const networkName = _network.NETWORK_TO_NAME_MAP[fullTxData.chainId] || networkIdentifier;
  const customNonceValue = '';

  const customNonceMerge = transactionData => customNonceValue ? { ...transactionData,
    customNonceValue
  } : transactionData;

  const handleReject = () => {
    dispatch((0, _actions.updateCustomNonce)(''));
    dispatch((0, _actions.cancelTx)(fullTxData)).then(() => {
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
      history.push(mostRecentOverviewPage);
    });
  };

  const handleApprove = () => {
    const {
      name
    } = methodData;

    if (fee.gasEstimationObject.baseFeePerGas) {
      fullTxData.estimatedBaseFee = fee.gasEstimationObject.baseFeePerGas;
    }

    if (name) {
      fullTxData.contractMethodName = name;
    }

    if (dappProposedTokenAmount) {
      fullTxData.dappProposedTokenAmount = dappProposedTokenAmount;
      fullTxData.originalApprovalAmount = dappProposedTokenAmount;
    }

    if (customTokenAmount) {
      fullTxData.customTokenAmount = customTokenAmount;
      fullTxData.finalApprovalAmount = customTokenAmount;
    } else if (dappProposedTokenAmount !== undefined) {
      fullTxData.finalApprovalAmount = dappProposedTokenAmount;
    }

    if (currentTokenBalance) {
      fullTxData.currentTokenBalance = currentTokenBalance;
    }

    dispatch((0, _actions.updateCustomNonce)(''));
    dispatch((0, _actions.updateAndApproveTx)(customNonceMerge(fullTxData))).then(() => {
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
      history.push(mostRecentOverviewPage);
    });
  };

  const handleNextClick = () => {
    setShowFullTxDetails(false);
    setIsFirstPage(false);
  };

  const handleBackClick = () => {
    setShowFullTxDetails(false);
    setIsFirstPage(true);
  };

  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container page-container"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 4,
    paddingRight: 4,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, !isFirstPage && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "inline",
    onClick: () => handleBackClick()
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_MUTED,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, '<', " ", t('back')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TEXT_ALIGN.END
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_MUTED,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, isFirstPage ? 1 : 2, " ", t('ofTextNofM'), " 2"))), /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
    networkName: networkName,
    accountName: currentAccount.name,
    accountBalance: currentTokenBalance,
    tokenName: tokenSymbol,
    accountAddress: userAddress,
    chainId: fullTxData.chainId
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    marginTop: 6,
    marginRight: 12,
    marginBottom: 8,
    marginLeft: 12,
    paddingTop: 2,
    paddingRight: 4,
    paddingBottom: 2,
    paddingLeft: 2,
    borderColor: _designSystem.COLORS.BORDER_MUTED,
    borderStyle: _designSystem.BORDER_STYLE.SOLID,
    borderWidth: 1,
    className: "token-allowance-container__icon-display-content"
  }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    className: "token-allowance-container__icon-display-content__siteimage-identicon",
    fallbackClassName: "token-allowance-container__icon-display-content__siteimage-identicon",
    name: origin,
    url: siteImage
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    boxProps: {
      marginLeft: 1,
      marginTop: 2
    }
  }, origin))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 5,
    marginLeft: 4,
    marginRight: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H3,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, isFirstPage && t('setSpendingCap'), !isFirstPage && (customTokenAmount === 0 ? t('revokeSpendingCap') : t('reviewSpendingCap')))), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_contractTokenValues.default, {
    tokenName: tokenSymbol,
    address: tokenAddress,
    chainId: fullTxData.chainId,
    rpcPrefs: rpcPrefs
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1,
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => setShowContractDetails(true),
    className: "token-allowance-container__verify-link"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.PRIMARY_DEFAULT
  }, t('verifyContractDetails')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: [4, 4, 3, 4]
  }, isFirstPage ? /*#__PURE__*/_react.default.createElement(_customSpendingCap.default, {
    tokenName: tokenSymbol,
    currentTokenBalance: parseFloat(currentTokenBalance),
    dappProposedValue: parseFloat(dappProposedTokenAmount),
    siteOrigin: origin,
    passTheErrorText: value => setErrorText(value)
  }) : /*#__PURE__*/_react.default.createElement(_reviewSpendingCap.default, {
    tokenName: tokenSymbol,
    currentTokenBalance: parseFloat(currentTokenBalance),
    tokenValue: parseFloat(customTokenAmount),
    onEdit: () => handleBackClick()
  })), !isFirstPage && balanceError && /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "error",
    className: "send__error-dialog"
  }, t('insufficientFundsForGas')), !isFirstPage && /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container__card-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_approveContentCard.default, {
    symbol: /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-tag"
    }),
    title: t('transactionFee'),
    showEdit: true,
    showAdvanceGasFeeOptions: true,
    onEditClick: showCustomizeGasModal,
    renderTransactionDetailsContent: true,
    noBorder: useNonceField || !showFullTxDetails,
    supportsEIP1559V2: supportsEIP1559V2,
    isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
    ethTransactionTotal: ethTransactionTotal,
    nativeCurrency: nativeCurrency,
    fullTxData: fullTxData,
    hexTransactionTotal: hexTransactionTotal,
    fiatTransactionTotal: fiatTransactionTotal,
    currentCurrency: currentCurrency
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => setShowFullTxDetails(!showFullTxDetails),
    className: "token-allowance-container__view-details"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.PRIMARY_DEFAULT,
    marginRight: 1
  }, t('viewDetails')), showFullTxDetails ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-sm fa-angle-up"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-sm fa-angle-down"
  }))), showFullTxDetails ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    className: "token-allowance-container__full-tx-content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "token-allowance-container__data"
  }, /*#__PURE__*/_react.default.createElement(_approveContentCard.default, {
    symbol: /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-file"
    }),
    title: t('data'),
    renderDataContent: true,
    noBorder: true,
    supportsEIP1559V2: supportsEIP1559V2,
    isSetApproveForAll: isSetApproveForAll,
    isApprovalOrRejection: isApprovalOrRejection,
    data: customTxParamsData || data
  }))) : null, /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    cancelText: t('reject'),
    submitText: isFirstPage ? t('next') : t('approveButtonText'),
    onCancel: () => handleReject(),
    onSubmit: () => isFirstPage ? handleNextClick() : handleApprove(),
    disabled: disableNextButton || disableApproveButton
  }), showContractDetails && /*#__PURE__*/_react.default.createElement(_contractDetailsModal.default, {
    tokenName: tokenSymbol,
    onClose: () => setShowContractDetails(false),
    tokenAddress: tokenAddress,
    toAddress: toAddress,
    chainId: fullTxData.chainId,
    rpcPrefs: rpcPrefs,
    origin: origin,
    siteImage: siteImage
  }));
}

TokenAllowance.propTypes = {
  /**
   * Dapp URL
   */
  origin: _propTypes.default.string,

  /**
   * Dapp image
   */
  siteImage: _propTypes.default.string,

  /**
   * Function that is supposed to open the customized gas modal
   */
  showCustomizeGasModal: _propTypes.default.func,

  /**
   * Whether nonce field should be used or not
   */
  useNonceField: _propTypes.default.bool,

  /**
   * Current fiat currency (e.g. USD)
   */
  currentCurrency: _propTypes.default.string,

  /**
   * Current native currency (e.g. RopstenETH)
   */
  nativeCurrency: _propTypes.default.string,

  /**
   * Total sum of the transaction in native currency
   */
  ethTransactionTotal: _propTypes.default.string,

  /**
   * Total sum of the transaction in fiat currency
   */
  fiatTransactionTotal: _propTypes.default.string,

  /**
   * Total sum of the transaction converted to hex value
   */
  hexTransactionTotal: _propTypes.default.string,

  /**
   * Current transaction
   */
  txData: _propTypes.default.object,

  /**
   * Is multi-layer fee network or not
   */
  isMultiLayerFeeNetwork: _propTypes.default.bool,

  /**
   * Is the enhanced gas fee enabled or not
   */
  supportsEIP1559V2: _propTypes.default.bool,

  /**
   * User's address
   */
  userAddress: _propTypes.default.string,

  /**
   * Address of the token that is waiting to be allowed
   */
  tokenAddress: _propTypes.default.string,

  /**
   * Current transaction data
   */
  data: _propTypes.default.string,

  /**
   * Is set approve for all or not
   */
  isSetApproveForAll: _propTypes.default.bool,

  /**
   * Whether a current set approval for all transaction will approve or revoke access
   */
  isApprovalOrRejection: _propTypes.default.bool,

  /**
   * Number of decimals
   */
  decimals: _propTypes.default.string,

  /**
   * Token amount proposed by the Dapp
   */
  dappProposedTokenAmount: _propTypes.default.string,

  /**
   * Token balance of the current account
   */
  currentTokenBalance: _propTypes.default.string,

  /**
   * Contract address requesting spending cap
   */
  toAddress: _propTypes.default.string,

  /**
   * Symbol of the token that is waiting to be allowed
   */
  tokenSymbol: _propTypes.default.string
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\token-details\\index.js", {"./token-details-page":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\token-details\\token-details-page.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\token-details\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenDetailsPage.default;
  }
});

var _tokenDetailsPage = _interopRequireDefault(require("./token-details-page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\token-details\\token-details-page.js", {"../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../hooks/useTokenFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\token-details\token-details-page.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenDetailsPage;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _metamask = require("../../ducks/metamask/metamask");

var _selectors = require("../../selectors");

var _useCopyToClipboard = require("../../hooks/useCopyToClipboard");

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _i18n = require("../../contexts/i18n");

var _useTokenTracker = require("../../hooks/useTokenTracker");

var _useTokenFiatAmount = require("../../hooks/useTokenFiatAmount");

var _actions = require("../../store/actions");

var _network = require("../../../shared/constants/network");

var _routes = require("../../helpers/constants/routes");

var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _copyIcon = _interopRequireDefault(require("../../components/ui/icon/copy-icon.component"));

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../components/ui/typography"));

var _designSystem = require("../../helpers/constants/design-system");

var _stringUtils = require("../../../shared/modules/string-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TokenDetailsPage() {
  var _tokenMetadata$aggreg, _tokensWithBalances$;

  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const {
    address: tokenAddress
  } = (0, _reactRouterDom.useParams)();
  const tokenMetadata = tokenList[tokenAddress.toLowerCase()];
  const aggregators = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : (_tokenMetadata$aggreg = tokenMetadata.aggregators) === null || _tokenMetadata$aggreg === void 0 ? void 0 : _tokenMetadata$aggreg.join(', ');
  const token = tokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const tokenBalance = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const tokenCurrencyBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token === null || token === void 0 ? void 0 : token.address, tokenBalance, token === null || token === void 0 ? void 0 : token.symbol);
  const currentNetwork = (0, _reactRedux.useSelector)(state => ({
    nickname: state.metamask.provider.nickname,
    type: state.metamask.provider.type
  }));
  const {
    nickname: networkNickname,
    type: networkType
  } = currentNetwork;
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();

  if (!token) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "page-container token-details"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 5,
    marginRight: 6
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: 0,
    marginTop: 4,
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    className: "token-details__title"
  }, t('tokenDetails'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => history.push(`${_routes.ASSET_ROUTE}/${token.address}`),
    className: "token-details__closeButton"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: 0,
    marginRight: 5,
    variant: _designSystem.TYPOGRAPHY.H4,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    className: "token-details__token-value"
  }, tokenBalance || ''), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    diameter: 32,
    address: token.address,
    image: tokenMetadata ? tokenMetadata.iconUrl : token.image
  }))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    margin: 0,
    marginTop: 4,
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, tokenCurrencyBalance || ''), /*#__PURE__*/_react.default.createElement(_typography.default, {
    margin: 0,
    marginTop: 6,
    variant: _designSystem.TYPOGRAPHY.H9,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tokenContractAddress')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: 0,
    marginTop: 2,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
    className: "token-details__token-address"
  }, token.address), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard'),
    containerClassName: "token-details__copy-icon"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "token-details__copyIcon",
    onClick: () => {
      handleCopy(token.address);
    }
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 11,
    color: "var(--color-primary-default)"
  })))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H9,
    margin: 0,
    marginTop: 4,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tokenDecimalTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: 0,
    marginTop: 1,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, token.decimals), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H9,
    margin: 0,
    marginTop: 4,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('network')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: 1,
    marginTop: 0,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, networkType === _network.NETWORK_TYPES.RPC ? networkNickname !== null && networkNickname !== void 0 ? networkNickname : t('privateNetwork') : t(networkType)), aggregators && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H9,
    margin: 0,
    marginTop: 4,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tokenList')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: 0,
    marginTop: 1,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, `${aggregators}.`)), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "token-details__hide-token-button",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'HIDE_TOKEN_CONFIRMATION',
        token,
        history
      }));
    }
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.PRIMARY_DEFAULT
  }, t('hideToken')))));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\index.js", {"./unlock-page.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\unlock-page\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _unlockPage = _interopRequireDefault(require("./unlock-page.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _unlockPage.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/lib/ui-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\ui-utils.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/mascot":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/utils/build-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\build-types.js","events":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","textarea-caret":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\textarea-caret\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\unlock-page\unlock-page.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = require("events");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _textareaCaret = _interopRequireDefault(require("textarea-caret"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _textField = _interopRequireDefault(require("../../components/ui/text-field"));

var _mascot = _interopRequireDefault(require("../../components/ui/mascot"));

var _routes = require("../../helpers/constants/routes");

var _metametrics = require("../../../shared/constants/metametrics");

var _uiUtils = require("../../../shared/lib/ui-utils");

var _buildTypes = require("../../helpers/utils/build-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class UnlockPage extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      password: '',
      error: null
    });

    _defineProperty(this, "submitting", false);

    _defineProperty(this, "failed_attempts", 0);

    _defineProperty(this, "animationEventEmitter", new _events.EventEmitter());

    _defineProperty(this, "handleSubmit", async event => {
      event.preventDefault();
      event.stopPropagation();
      const {
        password
      } = this.state;
      const {
        onSubmit,
        forceUpdateMetamaskState,
        showOptInModal
      } = this.props;

      if (password === '' || this.submitting) {
        return;
      }

      this.setState({
        error: null
      });
      this.submitting = true;

      try {
        await onSubmit(password);
        const newState = await forceUpdateMetamaskState();
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: _metametrics.EVENT_NAMES.APP_UNLOCKED,
          properties: {
            failed_attempts: this.failed_attempts
          }
        }, {
          isNewVisit: true
        });

        if (newState.participateInMetaMetrics === null || newState.participateInMetaMetrics === undefined) {
          showOptInModal();
        }
      } catch ({
        message
      }) {
        this.failed_attempts += 1;

        if (message === 'Incorrect password') {
          await forceUpdateMetamaskState();
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: _metametrics.EVENT_NAMES.APP_UNLOCKED_FAILED,
            properties: {
              reason: 'incorrect_password',
              failed_attempts: this.failed_attempts
            }
          });
        }

        this.setState({
          error: message
        });
        this.submitting = false;
      }
    });
  }

  UNSAFE_componentWillMount() {
    const {
      isUnlocked,
      history
    } = this.props;

    if (isUnlocked) {
      history.push(_routes.DEFAULT_ROUTE);
    }
  }

  handleInputChange({
    target
  }) {
    this.setState({
      password: target.value,
      error: null
    }); // tell mascot to look at page action

    if (target.getBoundingClientRect) {
      const element = target;
      const boundingRect = element.getBoundingClientRect();
      const coordinates = (0, _textareaCaret.default)(element, element.selectionEnd);
      this.animationEventEmitter.emit('point', {
        x: boundingRect.left + coordinates.left - element.scrollLeft,
        y: boundingRect.top + coordinates.top - element.scrollTop
      });
    }
  }

  renderSubmitButton() {
    const style = {
      backgroundColor: 'var(--color-primary-default)',
      color: 'var(--color-primary-inverse)',
      marginTop: '20px',
      height: '60px',
      fontWeight: '400',
      boxShadow: 'none',
      borderRadius: '100px'
    };
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "submit",
      "data-testid": "unlock-submit",
      style: style,
      disabled: !this.state.password,
      variant: "contained",
      size: "large",
      onClick: this.handleSubmit
    }, this.context.t('unlock'));
  }

  render() {
    const {
      password,
      error
    } = this.state;
    const {
      t
    } = this.context;
    const {
      onRestore
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page",
      "data-testid": "unlock-page"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__mascot-container"
    }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
      animationEventEmitter: this.animationEventEmitter,
      width: "120",
      height: "120"
    }), (0, _buildTypes.isBeta)() ? /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__mascot-container__beta"
    }, t('beta')) : null), /*#__PURE__*/_react.default.createElement("h1", {
      className: "unlock-page__title"
    }, t('welcomeBack')), /*#__PURE__*/_react.default.createElement("div", null, t('unlockMessage')), /*#__PURE__*/_react.default.createElement("form", {
      className: "unlock-page__form",
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "password",
      "data-testid": "unlock-password",
      label: t('password'),
      type: "password",
      value: password,
      onChange: event => this.handleInputChange(event),
      error: error,
      autoFocus: true,
      autoComplete: "current-password",
      theme: "material",
      fullWidth: true
    })), this.renderSubmitButton(), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__links"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      key: "import-account",
      className: "unlock-page__link",
      onClick: () => onRestore()
    }, t('forgotPassword'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__support"
    }, t('needHelp', [/*#__PURE__*/_react.default.createElement("a", {
      href: _uiUtils.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "need-help-link",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: _metametrics.EVENT_NAMES.SUPPORT_LINK_CLICKED,
          properties: {
            url: _uiUtils.SUPPORT_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.CONTEXT_PROPS.PAGE_TITLE]
        });
      }
    }, t('needHelpLinkText'))]))));
  }

}

exports.default = UnlockPage;

_defineProperty(UnlockPage, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

_defineProperty(UnlockPage, "propTypes", {
  /**
   * History router for redirect after action
   */
  history: _propTypes.default.object.isRequired,

  /**
   * If isUnlocked is true will redirect to most recent route in history
   */
  isUnlocked: _propTypes.default.bool,

  /**
   * onClick handler for "Forgot password?" link
   */
  onRestore: _propTypes.default.func,

  /**
   * onSumbit handler when form is submitted
   */
  onSubmit: _propTypes.default.func,

  /**
   * Force update metamask data state
   */
  forceUpdateMetamaskState: _propTypes.default.func,

  /**
   * Event handler to show metametrics modal
   */
  showOptInModal: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.container.js", {"../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./unlock-page.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\unlock-page.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\unlock-page\unlock-page.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _util = require("../../../app/scripts/lib/util");

var _app = require("../../../shared/constants/app");

var _routes = require("../../helpers/constants/routes");

var _actions = require("../../store/actions");

var _unlockPage = _interopRequireDefault(require("./unlock-page.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked
    }
  } = state;
  return {
    isUnlocked
  };
};

const mapDispatchToProps = dispatch => {
  return {
    forgotPassword: () => dispatch((0, _actions.forgotPassword)()),
    tryUnlockMetamask: password => dispatch((0, _actions.tryUnlockMetamask)(password)),
    markPasswordForgotten: () => dispatch((0, _actions.markPasswordForgotten)()),
    forceUpdateMetamaskState: () => (0, _actions.forceUpdateMetamaskState)(dispatch),
    showOptInModal: () => dispatch((0, _actions.showModal)({
      name: 'METAMETRICS_OPT_IN_MODAL'
    }))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    // eslint-disable-next-line no-shadow
    markPasswordForgotten,
    // eslint-disable-next-line no-shadow
    tryUnlockMetamask,
    ...restDispatchProps
  } = dispatchProps;
  const {
    history,
    onSubmit: ownPropsSubmit,
    ...restOwnProps
  } = ownProps;

  const onImport = async () => {
    await markPasswordForgotten();
    history.push(_routes.RESTORE_VAULT_ROUTE);

    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
      global.platform.openExtensionInBrowser(_routes.RESTORE_VAULT_ROUTE);
    }
  };

  const onSubmit = async password => {
    await tryUnlockMetamask(password);
    history.push(_routes.DEFAULT_ROUTE);
  };

  return { ...stateProps,
    ...restDispatchProps,
    ...restOwnProps,
    onRestore: onImport,
    onSubmit: ownPropsSubmit || onSubmit,
    history
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_unlockPage.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\store.js", {"../ducks":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js","redux-thunk":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux-thunk\\lib\\index.js","remote-redux-devtools":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\remote-redux-devtools\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\store\store.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _remoteReduxDevtools = require("remote-redux-devtools");

var _ducks = _interopRequireDefault(require("../ducks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function configureStore(initialState) {
  let storeEnhancers = (0, _redux.applyMiddleware)(_reduxThunk.default);

  if (true && !false) {
    const composeEnhancers = (0, _remoteReduxDevtools.composeWithDevTools)({
      name: 'MetaMask',
      hostname: 'localhost',
      port: 8000,
      realtime: Boolean(true)
    });
    storeEnhancers = composeEnhancers(storeEnhancers);
  }

  return (0, _redux.createStore)(_ducks.default, initialState, storeEnhancers);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\ui.js", {"../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../shared/lib/error-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\error-utils.js","../../shared/lib/ui-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\ui-utils.js","../../shared/modules/mv3.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\mv3.utils.js","../../ui":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\index.js","./lib/metaRPCClientFactory":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\metaRPCClientFactory.js","./lib/stream-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\stream-utils.js","./lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","./platforms/extension":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\platforms\\extension.js","@formatjs/intl-relativetimeformat/polyfill":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@formatjs\\intl-relativetimeformat\\polyfill.js","eth-query":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\eth-query\\index.js","ethjs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethjs\\lib\\index.js","extension-port-stream":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\extension-port-stream\\dist\\index.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","react-devtools":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-devtools\\index.js","web3-stream-provider":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\web3-stream-provider\\index.js","webextension-polyfill":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\app\scripts\ui.js
      return function (require, module, exports) {
"use strict";

require("@formatjs/intl-relativetimeformat/polyfill");

require("react-devtools");

var _extensionPortStream = _interopRequireDefault(require("extension-port-stream"));

var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

var _ethjs = _interopRequireDefault(require("ethjs"));

var _ethQuery = _interopRequireDefault(require("eth-query"));

var _web3StreamProvider = _interopRequireDefault(require("web3-stream-provider"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _ui = _interopRequireWildcard(require("../../ui"));

var _app = require("../../shared/constants/app");

var _mv = require("../../shared/modules/mv3.utils");

var _uiUtils = require("../../shared/lib/ui-utils");

var _errorUtils = require("../../shared/lib/error-utils");

var _extension = _interopRequireDefault(require("./platforms/extension"));

var _streamUtils = require("./lib/stream-utils");

var _util = require("./lib/util");

var _metaRPCClientFactory = _interopRequireDefault(require("./lib/metaRPCClientFactory"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// polyfills
// dev only, "react-devtools" import is skipped in prod builds
const container = document.getElementById('app-content');
const ONE_SECOND_IN_MILLISECONDS = 1000;
const WORKER_KEEP_ALIVE_INTERVAL = ONE_SECOND_IN_MILLISECONDS; // Service Worker Keep Alive Message Constants

const WORKER_KEEP_ALIVE_MESSAGE = 'WORKER_KEEP_ALIVE_MESSAGE';
const ACK_KEEP_ALIVE_WAIT_TIME = 60000; // 1 minute

const ACK_KEEP_ALIVE_MESSAGE = 'ACK_KEEP_ALIVE_MESSAGE'; // Timeout for initializing phishing warning page.

const PHISHING_WARNING_PAGE_TIMEOUT = ONE_SECOND_IN_MILLISECONDS;
const PHISHING_WARNING_SW_STORAGE_KEY = 'phishing-warning-sw-registered';
let lastMessageRecievedTimestamp = Date.now();
/*
 * As long as UI is open it will keep sending messages to service worker
 * In service worker as this message is received
 * if service worker is inactive it is reactivated and script re-loaded
 * Time has been kept to 1000ms but can be reduced for even faster re-activation of service worker
 */

let extensionPort;
let timeoutHandle;

if (_mv.isManifestV3) {
  // Checking for SW aliveness (or stuckness) flow
  // 1. Check if we have an extensionPort, if yes
  // 2a. Send a keep alive message to the background via extensionPort
  // 2b. Add a listener to it (if not already added)
  // 3a. Set a timeout to check if we have received an ACK from background
  // 3b. If we have not received an ACK within Xs, we know the background is stuck or dead
  // 4. If we recieve an ACK_KEEP_ALIVE_MESSAGE from the service worker, we know it is alive
  const ackKeepAliveListener = message => {
    if (message.name === ACK_KEEP_ALIVE_MESSAGE) {
      lastMessageRecievedTimestamp = Date.now();
      clearTimeout(timeoutHandle);
    }
  };

  const handle = setInterval(() => {
    _webextensionPolyfill.default.runtime.sendMessage({
      name: WORKER_KEEP_ALIVE_MESSAGE
    });

    if (extensionPort !== null && extensionPort !== undefined) {
      extensionPort.postMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });

      if (extensionPort.onMessage.hasListener(ackKeepAliveListener) === false) {
        extensionPort.onMessage.addListener(ackKeepAliveListener);
      }
    }

    timeoutHandle = setTimeout(() => {
      if (Date.now() - lastMessageRecievedTimestamp > ACK_KEEP_ALIVE_WAIT_TIME) {
        clearInterval(handle);
        displayCriticalError('somethingIsWrong', new Error("Something's gone wrong. Try reloading the page."));
      }
    }, ACK_KEEP_ALIVE_WAIT_TIME);
  }, WORKER_KEEP_ALIVE_INTERVAL);
}

start().catch(_loglevel.default.error);

async function start() {
  // create platform global
  global.platform = new _extension.default(); // identify window type (popup, notification)

  const windowType = (0, _util.getEnvironmentType)();
  let isUIInitialised = false; // setup stream to background

  extensionPort = _webextensionPolyfill.default.runtime.connect({
    name: windowType
  });
  let connectionStream = new _extensionPortStream.default(extensionPort);
  const activeTab = await queryCurrentActiveTab(windowType);
  let loadPhishingWarningPage;
  /**
   * In case of MV3 the issue of blank screen was very frequent, it is caused by UI initialising before background is ready to send state.
   * Code below ensures that UI is rendered only after background is ready.
   */

  if (_mv.isManifestV3) {
    /*
     * In case of MV3 the issue of blank screen was very frequent, it is caused by UI initialising before background is ready to send state.
     * Code below ensures that UI is rendered only after CONNECTION_READY message is received thus background is ready.
     * In case the UI is already rendered, only update the streams.
     */
    const messageListener = async message => {
      if ((message === null || message === void 0 ? void 0 : message.name) === 'CONNECTION_READY') {
        if (isUIInitialised) {
          // Currently when service worker is revived we create new streams
          // in later version we might try to improve it by reviving same streams.
          updateUiStreams();
        } else {
          initializeUiWithTab(activeTab);
        }

        await loadPhishingWarningPage();
      }
    };
    /**
     * An error thrown if the phishing warning page takes too long to load.
     */


    class PhishingWarningPageTimeoutError extends Error {
      constructor() {
        super('Timeout failed');
      }

    }
    /**
     * Load the phishing warning page temporarily to ensure the service
     * worker has been registered, so that the warning page works offline.
     */


    loadPhishingWarningPage = async function () {
      const currentPlatform = (0, _util.getPlatform)(); // Check session storage for whether we've already initalized the phishing warning
      // service worker this browser session and do not attempt to re-initialize if so.

      const phishingSWMemoryFetch = await _webextensionPolyfill.default.storage.session.get(PHISHING_WARNING_SW_STORAGE_KEY);

      if (phishingSWMemoryFetch[PHISHING_WARNING_SW_STORAGE_KEY]) {
        return;
      }

      let iframe;

      try {
        const extensionStartupPhishingPageUrl = new URL("https://metamask.github.io/phishing-warning/v1.2.1/"); // The `extensionStartup` hash signals to the phishing warning page that it should not bother
        // setting up streams for user interaction. Otherwise this page load would cause a console
        // error.

        extensionStartupPhishingPageUrl.hash = '#extensionStartup';
        iframe = window.document.createElement('iframe');
        iframe.setAttribute('src', extensionStartupPhishingPageUrl.href);
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin'); // Create "deferred Promise" to allow passing resolve/reject to event handlers

        let deferredResolve;
        let deferredReject;
        const loadComplete = new Promise((resolve, reject) => {
          deferredResolve = resolve;
          deferredReject = reject;
        }); // The load event is emitted once loading has completed, even if the loading failed.
        // If loading failed we can't do anything about it, so we don't need to check.

        iframe.addEventListener('load', deferredResolve); // This step initiates the page loading.

        window.document.body.appendChild(iframe); // This timeout ensures that this iframe gets cleaned up in a reasonable
        // timeframe, and ensures that the "initialization complete" message
        // doesn't get delayed too long.

        setTimeout(() => deferredReject(new PhishingWarningPageTimeoutError()), PHISHING_WARNING_PAGE_TIMEOUT);
        await loadComplete; // store a flag in sessions storage that we've already loaded the service worker
        // and don't need to try again

        if (currentPlatform === _app.PLATFORM_FIREFOX) {
          // Firefox does not yet support the storage.session API introduced in MV3
          // Tracked here: https://bugzilla.mozilla.org/show_bug.cgi?id=1687778
          console.error('Firefox does not support required MV3 APIs: Phishing warning page iframe and service worker will reload each page refresh');
        } else {
          _webextensionPolyfill.default.storage.session.set({
            [PHISHING_WARNING_SW_STORAGE_KEY]: true
          });
        }
      } catch (error) {
        if (error instanceof PhishingWarningPageTimeoutError) {
          console.warn('Phishing warning page timeout; page not guaranteed to work offline.');
        } else {
          console.error('Failed to initialize phishing warning page', error);
        }
      } finally {
        if (iframe) {
          iframe.remove();
        }
      }
    }; // resetExtensionStreamAndListeners takes care to remove listeners from closed streams
    // it also creates new streams and attach event listeners to them


    const resetExtensionStreamAndListeners = () => {
      extensionPort.onMessage.removeListener(messageListener);
      extensionPort.onDisconnect.removeListener(resetExtensionStreamAndListeners); // message below will try to activate service worker
      // in MV3 is likely that reason of stream closing is service worker going in-active

      _webextensionPolyfill.default.runtime.sendMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });

      extensionPort = _webextensionPolyfill.default.runtime.connect({
        name: windowType
      });
      connectionStream = new _extensionPortStream.default(extensionPort);
      extensionPort.onMessage.addListener(messageListener);
      extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
    };

    extensionPort.onMessage.addListener(messageListener);
    extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
  } else {
    initializeUiWithTab(activeTab);
  }

  function initializeUiWithTab(tab) {
    initializeUi(tab, connectionStream, (err, store) => {
      if (err) {
        // if there's an error, store will be = metamaskState
        displayCriticalError('troubleStarting', err, store);
        return;
      }

      isUIInitialised = true;
      const state = store.getState();
      const {
        metamask: {
          completedOnboarding
        } = {}
      } = state;

      if (!completedOnboarding && windowType !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        global.platform.openExtensionInBrowser();
      }
    });
  } // Function to update new backgroundConnection in the UI


  function updateUiStreams() {
    connectToAccountManager(connectionStream, (err, backgroundConnection) => {
      if (err) {
        displayCriticalError('troubleStarting', err);
        return;
      }

      (0, _ui.updateBackgroundConnection)(backgroundConnection);
    });
  }
}

async function queryCurrentActiveTab(windowType) {
  return new Promise(resolve => {
    // At the time of writing we only have the `activeTab` permission which means
    // that this query will only succeed in the popup context (i.e. after a "browserAction")
    if (windowType !== _app.ENVIRONMENT_TYPE_POPUP) {
      resolve({});
      return;
    }

    _webextensionPolyfill.default.tabs.query({
      active: true,
      currentWindow: true
    }).then(tabs => {
      const [activeTab] = tabs;
      const {
        id,
        title,
        url
      } = activeTab;
      const {
        origin,
        protocol
      } = url ? new URL(url) : {};

      if (!origin || origin === 'null') {
        resolve({});
        return;
      }

      resolve({
        id,
        title,
        origin,
        protocol,
        url
      });
    });
  });
}

function initializeUi(activeTab, connectionStream, cb) {
  connectToAccountManager(connectionStream, (err, backgroundConnection) => {
    if (err) {
      cb(err, null);
      return;
    }

    (0, _ui.default)({
      activeTab,
      container,
      backgroundConnection
    }, cb);
  });
}

async function displayCriticalError(errorKey, err, metamaskState) {
  const html = await (0, _errorUtils.getErrorHtml)(errorKey, _uiUtils.SUPPORT_LINK, metamaskState);
  container.innerHTML = html;
  const button = document.getElementById('critical-error-button');
  button.addEventListener('click', _ => {
    _webextensionPolyfill.default.runtime.reload();
  });

  _loglevel.default.error(err.stack);

  throw err;
}
/**
 * Establishes a connection to the background and a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when controller connection is established
 */


function connectToAccountManager(connectionStream, cb) {
  const mx = (0, _streamUtils.setupMultiplex)(connectionStream);
  const controllerConnectionStream = mx.createStream('controller');
  setupControllerConnection(controllerConnectionStream, cb);
  setupWeb3Connection(mx.createStream('provider'));
}
/**
 * Establishes a streamed connection to a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 */


function setupWeb3Connection(connectionStream) {
  const providerStream = new _web3StreamProvider.default();
  providerStream.pipe(connectionStream).pipe(providerStream);
  connectionStream.on('error', console.error.bind(console));
  providerStream.on('error', console.error.bind(console));
  global.ethereumProvider = providerStream;
  global.ethQuery = new _ethQuery.default(providerStream);
  global.eth = new _ethjs.default(providerStream);
}
/**
 * Establishes a streamed connection to the background account manager
 *
 * @param {PortDuplexStream} controllerConnectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when the remote account manager connection is established
 */


function setupControllerConnection(controllerConnectionStream, cb) {
  const backgroundRPC = (0, _metaRPCClientFactory.default)(controllerConnectionStream);
  cb(null, backgroundRPC);
}

      };
    };
  }
}, {package:"$root$",}]],["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\ui.js"],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
