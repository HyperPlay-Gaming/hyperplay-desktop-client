LavaPack.loadBundle([
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\confirm-approve-content.component.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../components/app/confirm-page-container/confirm-page-container-content":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-content\\index.js","../../../components/app/edit-gas-fee-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js","../../../components/app/gas-details-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\index.js","../../../components/app/ledger-instruction-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../../../components/app/multilayer-fee-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\index.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../components/ui/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../send/send.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-approve\confirm-approve-content\confirm-approve-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _etherscanLink = require("@metamask/etherscan-link");

var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));

var _util = require("../../../helpers/utils/util");

var _confirmTx = require("../../../helpers/utils/confirm-tx.util");

var _send = require("../../send/send.utils");

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _editGasFeeButton = _interopRequireDefault(require("../../../components/app/edit-gas-fee-button"));

var _identicon = _interopRequireDefault(require("../../../components/ui/identicon"));

var _multilayerFeeMessage = _interopRequireDefault(require("../../../components/app/multilayer-fee-message"));

var _copyIcon = _interopRequireDefault(require("../../../components/ui/icon/copy-icon.component"));

var _designSystem = require("../../../helpers/constants/design-system");

var _time = require("../../../../shared/constants/time");

var _confirmPageContainerContent = require("../../../components/app/confirm-page-container/confirm-page-container-content");

var _gasDetailsItem = _interopRequireDefault(require("../../../components/app/gas-details-item"));

var _ledgerInstructionField = _interopRequireDefault(require("../../../components/app/ledger-instruction-field"));

var _transaction = require("../../../../shared/constants/transaction");

var _network = require("../../../../shared/constants/network");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmApproveContent extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showFullTxDetails: false,
      copied: false
    });
  }

  renderApproveContentCard({
    showHeader = true,
    symbol,
    title,
    showEdit,
    showAdvanceGasFeeOptions = false,
    onEditClick,
    content,
    footer,
    noBorder
  }) {
    const {
      supportsEIP1559V2
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'confirm-approve-content__card': !noBorder,
        'confirm-approve-content__card--no-border': noBorder
      })
    }, showHeader && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header"
    }, supportsEIP1559V2 && title === t('transactionFee') ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header__title"
    }, title)), showEdit && (!showAdvanceGasFeeOptions || !supportsEIP1559V2) && /*#__PURE__*/_react.default.createElement(_box.default, {
      width: _designSystem.BLOCK_SIZES.ONE_SIXTH
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__small-blue-text",
      onClick: () => onEditClick()
    }, t('edit'))), showEdit && showAdvanceGasFeeOptions && supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_editGasFeeButton.default, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-content"
    }, content), footer);
  } // TODO: Add "Learn Why" with link to the feeAssociatedRequest text


  renderTransactionDetailsContent() {
    const {
      t
    } = this.context;
    const {
      currentCurrency,
      nativeCurrency,
      ethTransactionTotal,
      fiatTransactionTotal,
      hexTransactionTotal,
      txData,
      isMultiLayerFeeNetwork,
      supportsEIP1559V2
    } = this.props;

    if (!isMultiLayerFeeNetwork && supportsEIP1559V2) {
      return /*#__PURE__*/_react.default.createElement(_gasDetailsItem.default, null);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content"
    }, isMultiLayerFeeNetwork ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-extra-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__labelled-fee"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('transactionDetailLayer2GasHeading')), `${ethTransactionTotal} ${nativeCurrency}`), /*#__PURE__*/_react.default.createElement(_multilayerFeeMessage.default, {
      transaction: txData,
      layer2fee: hexTransactionTotal,
      nativeCurrency: nativeCurrency,
      plainStyle: true
    })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, t('feeAssociatedRequest')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__fee"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__primary-fee"
    }, (0, _confirmTx.formatCurrency)(fiatTransactionTotal, currentCurrency)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__secondary-fee"
    }, `${ethTransactionTotal} ${nativeCurrency}`))));
  }

  renderERC721OrERC1155PermissionContent() {
    const {
      t
    } = this.context;
    const {
      origin,
      toAddress,
      isContract,
      isSetApproveForAll
    } = this.props;
    const titleTokenDescription = this.getTitleTokenDescription();
    const displayedAddress = isContract ? `${t('contract')} (${(0, _util.addressSummary)(toAddress)})` : (0, _util.addressSummary)(toAddress);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-column"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, t('accessAndSpendNoticeNFT', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('approvedAsset'), ":"), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, isSetApproveForAll ? t('allOfYour', [titleTokenDescription]) : titleTokenDescription)), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('grantedToWithColon')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, displayedAddress), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__copy-address",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(toAddress);
      },
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 14,
      color: "var(--color-icon-default)"
    })))));
  }

  renderERC20PermissionContent() {
    const {
      t
    } = this.context;
    const {
      customTokenAmount,
      tokenAmount,
      tokenSymbol,
      origin,
      toAddress,
      isContract
    } = this.props;
    const displayedAddress = isContract ? `${t('contract')} (${(0, _util.addressSummary)(toAddress)})` : (0, _util.addressSummary)(toAddress);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-column"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, t('accessAndSpendNotice', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('approvedAmountWithColon')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, `${Number(customTokenAmount || tokenAmount)} ${tokenSymbol}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('grantedToWithColon')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, `${displayedAddress}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__copy-address",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(toAddress);
      },
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 14,
      color: "var(--color-icon-default)"
    })))));
  }

  renderDataContent() {
    const {
      t
    } = this.context;
    const {
      data,
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-column"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, isSetApproveForAll ? t('functionSetApprovalForAll') : t('functionApprove')), isSetApproveForAll && isApprovalOrRejection !== undefined ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, `${t('parameters')}: ${isApprovalOrRejection}`) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text confirm-approve-content__data__data-block"
    }, data));
  }

  renderFullDetails() {
    const {
      t
    } = this.context;
    const {
      assetStandard,
      showEditApprovalPermissionModal,
      customTokenAmount,
      tokenAmount,
      decimals,
      origin,
      setCustomAmount,
      tokenSymbol,
      tokenBalance
    } = this.props;

    if (assetStandard === _transaction.ERC20) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__full-tx-content"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__permission"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-user-check"
        }),
        title: t('permissionRequest'),
        content: this.renderERC20PermissionContent(),
        showEdit: true,
        onEditClick: () => showEditApprovalPermissionModal({
          customTokenAmount,
          decimals,
          origin,
          setCustomAmount,
          tokenAmount,
          tokenSymbol,
          tokenBalance
        })
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__data"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-file"
        }),
        title: 'Data',
        content: this.renderDataContent(),
        noBorder: true
      })));
    } else if (assetStandard === _transaction.ERC721 || assetStandard === _transaction.ERC1155) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__full-tx-content"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__permission"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fas fa-user-check"
        }),
        title: t('permissionRequest'),
        content: this.renderERC721OrERC1155PermissionContent(),
        showEdit: false
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__data"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-file"
        }),
        title: t('data'),
        content: this.renderDataContent(),
        noBorder: true
      })));
    }

    return null;
  }

  renderCustomNonceContent() {
    const {
      t
    } = this.context;
    const {
      useNonceField,
      customNonceValue,
      updateCustomNonce,
      getNextNonce,
      nextNonce,
      showCustomizeNonceModal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, useNonceField && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__custom-nonce-content"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "confirm-approve-content__custom-nonce-header",
      justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_START
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL
    }, t('nonce')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__custom-nonce-edit",
      onClick: () => showCustomizeNonceModal({
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
      })
    }, t('edit'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
      className: "confirm-approve-content__custom-nonce-value",
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD
    }, customNonceValue || nextNonce)));
  }

  getTitleTokenDescription() {
    const {
      tokenId,
      assetName,
      tokenAddress,
      rpcPrefs,
      chainId,
      assetStandard,
      tokenSymbol,
      isSetApproveForAll,
      userAddress
    } = this.props;
    const {
      t
    } = this.context;
    const useBlockExplorer = (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) || [..._network.TEST_CHAINS, _network.CHAIN_IDS.MAINNET].includes(chainId);
    let titleTokenDescription = t('token');
    const tokenIdWrapped = tokenId ? ` (#${tokenId})` : '';

    if (assetStandard === _transaction.ERC20 || tokenSymbol && !tokenId && !isSetApproveForAll) {
      titleTokenDescription = tokenSymbol;
    } else if (assetStandard === _transaction.ERC721 || assetStandard === _transaction.ERC1155 || // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenSymbol and tokenId we assume its an NFT
    assetName && tokenId || tokenSymbol && tokenId) {
      if (assetName || tokenSymbol) {
        titleTokenDescription = `${assetName !== null && assetName !== void 0 ? assetName : tokenSymbol}`;
      } else {
        titleTokenDescription = t('nft');
      }

      if (useBlockExplorer) {
        var _rpcPrefs$blockExplor;

        const blockExplorerLink = (0, _etherscanLink.getTokenTrackerLink)(tokenAddress, chainId, null, userAddress, {
          blockExplorerUrl: (_rpcPrefs$blockExplor = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : null
        });

        const blockExplorerElement = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("a", {
          href: blockExplorerLink,
          target: "_blank",
          rel: "noopener noreferrer",
          title: tokenAddress,
          className: "confirm-approve-content__approval-asset-link"
        }, titleTokenDescription), tokenIdWrapped && /*#__PURE__*/_react.default.createElement("span", null, tokenIdWrapped));

        return blockExplorerElement;
      }
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-approve-content__approval-asset-title",
      onClick: () => {
        (0, _copyToClipboard.default)(tokenAddress);
      },
      title: tokenAddress
    }, titleTokenDescription), tokenIdWrapped && /*#__PURE__*/_react.default.createElement("span", null, tokenIdWrapped));
  }

  renderTitle() {
    const {
      t
    } = this.context;
    const {
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    const titleTokenDescription = this.getTitleTokenDescription();
    let title;

    if (isSetApproveForAll) {
      title = t('approveAllTokensTitle', [titleTokenDescription]);

      if (isApprovalOrRejection === false) {
        title = t('revokeAllTokensTitle', [titleTokenDescription]);
      }
    }

    return title || t('allowSpendToken', [titleTokenDescription]);
  }

  renderDescription() {
    const {
      t
    } = this.context;
    const {
      isContract,
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    const grantee = isContract ? t('contract').toLowerCase() : t('account').toLowerCase();
    let description = t('trustSiteApprovePermission', [grantee]);

    if (isSetApproveForAll && isApprovalOrRejection === false) {
      description = t('revokeApproveForAllDescription', [grantee, this.getTitleTokenDescription()]);
    }

    return description;
  }

  render() {
    var _txData$txParams;

    const {
      t
    } = this.context;
    const {
      decimals,
      siteImage,
      tokenAmount,
      customTokenAmount,
      origin,
      tokenSymbol,
      showCustomizeGasModal,
      showEditApprovalPermissionModal,
      setCustomAmount,
      tokenBalance,
      useNonceField,
      warning,
      txData,
      fromAddressIsLedger,
      toAddress,
      chainId,
      rpcPrefs,
      isContract,
      assetStandard,
      userAddress
    } = this.props;
    const {
      showFullTxDetails
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('confirm-approve-content', {
        'confirm-approve-content--full': showFullTxDetails
      })
    }, warning && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__custom-nonce-warning"
    }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerContent.ConfirmPageContainerWarning, {
      warning: warning
    })), /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      className: "confirm-approve-content__icon-display-content"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX
    }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
      className: "confirm-approve-content__siteimage-identicon",
      fallbackClassName: "confirm-approve-content__siteimage-identicon",
      name: origin,
      url: siteImage
    }), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
      color: _designSystem.COLORS.TEXT_ALTERNATIVE,
      boxProps: {
        marginLeft: 1,
        marginTop: 2
      }
    }, origin))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__title",
      "data-testid": "confirm-approve-title"
    }, this.renderTitle()), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__description"
    }, this.renderDescription()), /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "confirm-approve-content__address-display-content"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-approve-content__address-identicon",
      diameter: 20,
      address: toAddress
    }), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
      color: _designSystem.COLORS.TEXT_ALTERNATIVE,
      boxProps: {
        marginBottom: 0
      }
    }, (0, _send.ellipsify)(toAddress)), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__copy-address",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(toAddress);
      },
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 9,
      color: "var(--color-icon-default)"
    })), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__etherscan-link",
      onClick: () => {
        var _rpcPrefs$blockExplor2, _rpcPrefs$blockExplor3;

        const blockExplorerTokenLink = isContract ? (0, _etherscanLink.getTokenTrackerLink)(toAddress, chainId, null, userAddress, {
          blockExplorerUrl: (_rpcPrefs$blockExplor2 = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor2 !== void 0 ? _rpcPrefs$blockExplor2 : null
        }) : (0, _etherscanLink.getAccountLink)(toAddress, chainId, {
          blockExplorerUrl: (_rpcPrefs$blockExplor3 = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor3 !== void 0 ? _rpcPrefs$blockExplor3 : null
        }, null);
        global.platform.openTab({
          url: blockExplorerTokenLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView')
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-share-square fa-sm",
      style: {
        color: 'var(--color-icon-default)',
        fontSize: 11
      },
      title: t('etherscanView')
    })))), assetStandard === _transaction.ERC20 ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__edit-submission-button-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-link-text cursor-pointer",
      onClick: () => showEditApprovalPermissionModal({
        customTokenAmount,
        decimals,
        origin,
        setCustomAmount,
        tokenAmount,
        tokenSymbol,
        tokenBalance
      })
    }, t('editPermission'))) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-wrapper"
    }, this.renderApproveContentCard({
      symbol: /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-tag"
      }),
      title: t('transactionFee'),
      showEdit: true,
      showAdvanceGasFeeOptions: true,
      onEditClick: showCustomizeGasModal,
      content: this.renderTransactionDetailsContent(),
      noBorder: useNonceField || !showFullTxDetails,
      footer: !useNonceField && /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button-wrapper",
        onClick: () => this.setState({
          showFullTxDetails: !this.state.showFullTxDetails
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button cursor-pointer"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__small-blue-text"
      }, this.state.showFullTxDetails ? t('hideFullTransactionDetails') : t('viewFullTransactionDetails')), /*#__PURE__*/_react.default.createElement("i", {
        className: (0, _classnames.default)({
          'fa fa-caret-up': showFullTxDetails,
          'fa fa-caret-down': !showFullTxDetails
        })
      })))
    }), useNonceField && this.renderApproveContentCard({
      showHeader: false,
      content: this.renderCustomNonceContent(),
      useNonceField,
      noBorder: !showFullTxDetails,
      footer: /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button-wrapper",
        onClick: () => this.setState({
          showFullTxDetails: !this.state.showFullTxDetails
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button cursor-pointer"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__small-blue-text"
      }, this.state.showFullTxDetails ? t('hideFullTransactionDetails') : t('viewFullTransactionDetails')), /*#__PURE__*/_react.default.createElement("i", {
        className: (0, _classnames.default)({
          'fa fa-caret-up': showFullTxDetails,
          'fa fa-caret-down': !showFullTxDetails
        })
      })))
    })), fromAddressIsLedger ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__ledger-instruction-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: Boolean((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.data)
    })) : null, showFullTxDetails ? this.renderFullDetails() : null);
  }

}

exports.default = ConfirmApproveContent;

_defineProperty(ConfirmApproveContent, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(ConfirmApproveContent, "propTypes", {
  decimals: _propTypes.default.number,
  tokenAmount: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  siteImage: _propTypes.default.string,
  showCustomizeGasModal: _propTypes.default.func,
  showEditApprovalPermissionModal: _propTypes.default.func,
  origin: _propTypes.default.string,
  setCustomAmount: _propTypes.default.func,
  tokenBalance: _propTypes.default.string,
  data: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  currentCurrency: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  ethTransactionTotal: _propTypes.default.string,
  useNonceField: _propTypes.default.bool,
  customNonceValue: _propTypes.default.string,
  updateCustomNonce: _propTypes.default.func,
  getNextNonce: _propTypes.default.func,
  nextNonce: _propTypes.default.number,
  showCustomizeNonceModal: _propTypes.default.func,
  warning: _propTypes.default.string,
  txData: _propTypes.default.object,
  fromAddressIsLedger: _propTypes.default.bool,
  chainId: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  isContract: _propTypes.default.bool,
  hexTransactionTotal: _propTypes.default.string,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  supportsEIP1559V2: _propTypes.default.bool,
  assetName: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  isSetApproveForAll: _propTypes.default.bool,
  isApprovalOrRejection: _propTypes.default.bool,
  userAddress: _propTypes.default.string
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\index.js", {"./confirm-approve-content.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\confirm-approve-content.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-approve\confirm-approve-content\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmApproveContent.default;
  }
});

var _confirmApproveContent = _interopRequireDefault(require("./confirm-approve-content.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/contract-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\contract-utils.js","../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../components/app/advanced-gas-fee-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\advanced-gas-fee-popover\\index.js","../../components/app/edit-gas-fee-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js","../../components/app/edit-gas-popover/edit-gas-popover.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js","../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../hooks/useApproveTransaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useApproveTransaction.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../confirm-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","../token-allowance/token-allowance":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\token-allowance\\token-allowance.js","./confirm-approve-content":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\index.js","./confirm-approve.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-approve\confirm-approve.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmApprove;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _gas = require("../../../shared/constants/gas");

var _actions = require("../../store/actions");

var _tokenUtil = require("../../helpers/utils/token-util");

var _contractUtils = require("../../../shared/modules/contract-utils");

var _gasFee = require("../../contexts/gasFee");

var _transactionModal = require("../../contexts/transaction-modal");

var _metamask = require("../../ducks/metamask/metamask");

var _selectors = require("../../selectors");

var _useApproveTransaction = require("../../hooks/useApproveTransaction");

var _advancedGasFeePopover = _interopRequireDefault(require("../../components/app/advanced-gas-fee-popover"));

var _editGasFeePopover = _interopRequireDefault(require("../../components/app/edit-gas-fee-popover"));

var _editGasPopover = _interopRequireDefault(require("../../components/app/edit-gas-popover/edit-gas-popover.component"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _transaction = require("../../../shared/modules/transaction.utils");

var _transaction2 = require("../../../shared/constants/transaction");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _tokenAllowance = _interopRequireDefault(require("../token-allowance/token-allowance"));

var _confirmApprove = require("./confirm-approve.util");

var _confirmApproveContent = _interopRequireDefault(require("./confirm-approve-content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const isAddressLedgerByFromAddress = address => state => {
  return (0, _metamask.isAddressLedger)(state, address);
};

function ConfirmApprove({
  assetStandard,
  assetName,
  userBalance,
  tokenSymbol,
  decimals,
  tokenImage,
  tokenAmount,
  tokenId,
  userAddress,
  toAddress,
  tokenAddress,
  transaction,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexTransactionTotal,
  isSetApproveForAll
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    txParams: {
      data: transactionData
    } = {}
  } = transaction;
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const useNonceField = (0, _reactRedux.useSelector)(_selectors.getUseNonceField);
  const nextNonce = (0, _reactRedux.useSelector)(_selectors.getNextSuggestedNonce);
  const customNonceValue = (0, _reactRedux.useSelector)(_selectors.getCustomNonceValue);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const fromAddressIsLedger = (0, _reactRedux.useSelector)(isAddressLedgerByFromAddress(userAddress));
  const [customPermissionAmount, setCustomPermissionAmount] = (0, _react.useState)('');
  const [submitWarning, setSubmitWarning] = (0, _react.useState)('');
  const [isContract, setIsContract] = (0, _react.useState)(false);
  const eip1559V2Enabled = (0, _reactRedux.useSelector)(_selectors.getEIP1559V2Enabled);
  const supportsEIP1559V2 = eip1559V2Enabled && networkAndAccountSupports1559;
  const previousTokenAmount = (0, _react.useRef)(tokenAmount);
  const {
    approveTransaction,
    showCustomizeGasPopover,
    closeCustomizeGasPopover
  } = (0, _useApproveTransaction.useApproveTransaction)();
  (0, _react.useEffect)(() => {
    if (customPermissionAmount && previousTokenAmount.current !== tokenAmount) {
      setCustomPermissionAmount(tokenAmount);
    }

    previousTokenAmount.current = tokenAmount;
  }, [customPermissionAmount, tokenAmount]);
  const prevNonce = (0, _react.useRef)(nextNonce);
  const prevCustomNonce = (0, _react.useRef)(customNonceValue);
  (0, _react.useEffect)(() => {
    if (prevNonce.current !== nextNonce || prevCustomNonce.current !== customNonceValue) {
      if (nextNonce !== null && customNonceValue > nextNonce) {
        setSubmitWarning(`Nonce is higher than suggested nonce of ${nextNonce}`);
      } else {
        setSubmitWarning('');
      }
    }

    prevCustomNonce.current = customNonceValue;
    prevNonce.current = nextNonce;
  }, [customNonceValue, nextNonce]);
  const checkIfContract = (0, _react.useCallback)(async () => {
    const {
      isContractAddress
    } = await (0, _contractUtils.readAddressAsContract)(global.eth, toAddress);
    setIsContract(isContractAddress);
  }, [setIsContract, toAddress]);
  (0, _react.useEffect)(() => {
    checkIfContract();
  }, [checkIfContract]);
  const {
    origin
  } = transaction;
  const formattedOrigin = origin || '';
  const {
    iconUrl: siteImage = ''
  } = subjectMetadata[origin] || {};
  let tokensText;

  if (assetStandard === _transaction2.ERC20) {
    tokensText = `${Number(tokenAmount)} ${tokenSymbol}`;
  } else if (assetStandard === _transaction2.ERC721 || assetStandard === _transaction2.ERC1155) {
    tokensText = assetName;
  }

  const tokenBalance = userBalance ? (0, _transactionsControllerUtils.calcTokenAmount)(userBalance, decimals).toString(10) : '';
  const customData = customPermissionAmount ? (0, _confirmApprove.getCustomTxParamsData)(transactionData, {
    customPermissionAmount,
    decimals
  }) : null;
  const parsedTransactionData = (0, _transaction.parseStandardTokenTransactionData)(transactionData);
  const isApprovalOrRejection = (0, _tokenUtil.getTokenApprovedParam)(parsedTransactionData);

  if (tokenSymbol === undefined && assetName === undefined) {
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }

  if (false && assetStandard === _transaction2.ERC20) {
    return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
      transaction: transaction
    }, /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_tokenAllowance.default, {
      origin: formattedOrigin,
      siteImage: siteImage,
      showCustomizeGasModal: approveTransaction,
      useNonceField: useNonceField,
      currentCurrency: currentCurrency,
      nativeCurrency: nativeCurrency,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal,
      txData: transaction,
      isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
      supportsEIP1559V2: supportsEIP1559V2,
      userAddress: userAddress,
      tokenAddress: tokenAddress,
      data: customData || transactionData,
      isSetApproveForAll: isSetApproveForAll,
      isApprovalOrRejection: isApprovalOrRejection,
      customTxParamsData: customData,
      dappProposedTokenAmount: tokenAmount,
      currentTokenBalance: tokenBalance,
      toAddress: toAddress,
      tokenSymbol: tokenSymbol
    }), showCustomizeGasPopover && !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      onClose: closeCustomizeGasPopover,
      mode: _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE,
      transaction: transaction
    }), supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
  }

  return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: transaction
  }, /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    identiconAddress: toAddress,
    showAccountInHeader: true,
    title: tokensText,
    customTokenAmount: String(customPermissionAmount),
    dappProposedTokenAmount: tokenAmount,
    currentTokenBalance: tokenBalance,
    isApprovalOrRejection: isApprovalOrRejection,
    contentComponent: /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_confirmApproveContent.default, {
      userAddress: userAddress,
      isSetApproveForAll: isSetApproveForAll,
      isApprovalOrRejection: isApprovalOrRejection,
      decimals: decimals,
      siteImage: siteImage,
      setCustomAmount: setCustomPermissionAmount,
      customTokenAmount: String(customPermissionAmount),
      tokenAmount: tokenAmount,
      origin: formattedOrigin,
      tokenSymbol: tokenSymbol,
      tokenImage: tokenImage,
      tokenBalance: tokenBalance,
      tokenId: tokenId,
      assetName: assetName,
      assetStandard: assetStandard,
      tokenAddress: tokenAddress,
      showCustomizeGasModal: approveTransaction,
      showEditApprovalPermissionModal: ({
        /* eslint-disable no-shadow */
        customTokenAmount,
        decimals,
        origin,
        setCustomAmount,
        tokenAmount,
        tokenBalance,
        tokenSymbol
        /* eslint-enable no-shadow */

      }) => dispatch((0, _actions.showModal)({
        name: 'EDIT_APPROVAL_PERMISSION',
        customTokenAmount,
        decimals,
        origin,
        setCustomAmount,
        tokenAmount,
        tokenBalance,
        tokenSymbol,
        tokenId,
        assetStandard
      })),
      data: customData || transactionData,
      toAddress: toAddress,
      currentCurrency: currentCurrency,
      nativeCurrency: nativeCurrency,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal,
      useNonceField: useNonceField,
      nextNonce: nextNonce,
      customNonceValue: customNonceValue,
      updateCustomNonce: value => {
        dispatch((0, _actions.updateCustomNonce)(value));
      },
      getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
      showCustomizeNonceModal: ({
        /* eslint-disable no-shadow */
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
        /* eslint-disable no-shadow */

      }) => dispatch((0, _actions.showModal)({
        name: 'CUSTOMIZE_NONCE',
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
      })),
      warning: submitWarning,
      txData: transaction,
      fromAddressIsLedger: fromAddressIsLedger,
      chainId: chainId,
      rpcPrefs: rpcPrefs,
      isContract: isContract,
      isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
      supportsEIP1559V2: supportsEIP1559V2
    }), showCustomizeGasPopover && !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      onClose: closeCustomizeGasPopover,
      mode: _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE,
      transaction: transaction
    }), supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))),
    hideSenderToRecipient: true,
    customTxParamsData: customData,
    assetStandard: assetStandard
  }));
}

ConfirmApprove.propTypes = {
  assetStandard: _propTypes.default.string,
  assetName: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  userBalance: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  decimals: _propTypes.default.string,
  tokenImage: _propTypes.default.string,
  tokenAmount: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  userAddress: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  transaction: _propTypes.default.shape({
    origin: _propTypes.default.string,
    txParams: _propTypes.default.shape({
      data: _propTypes.default.string,
      to: _propTypes.default.string,
      from: _propTypes.default.string
    })
  }),
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexTransactionTotal: _propTypes.default.string,
  isSetApproveForAll: _propTypes.default.bool
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js", {"../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/swaps-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-approve\confirm-approve.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCustomTxParamsData = getCustomTxParamsData;

var _swapsUtils = require("../../../shared/lib/swaps-utils");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _transaction = require("../../../shared/constants/transaction");

var _transaction2 = require("../../../shared/modules/transaction.utils");

var _tokenUtil = require("../../helpers/utils/token-util");

function getCustomTxParamsData(data, {
  customPermissionAmount,
  decimals
}) {
  const tokenData = (0, _transaction2.parseStandardTokenTransactionData)(data);

  if (!tokenData) {
    throw new Error('Invalid data');
  } else if (tokenData.name !== _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE) {
    throw new Error(`Invalid data; should be 'approve' method, but instead is '${tokenData.name}'`);
  }

  let spender = (0, _tokenUtil.getTokenAddressParam)(tokenData);

  if (spender.startsWith('0x')) {
    spender = spender.substring(2);
  }

  const [signature, tokenValue] = data.split(spender);

  if (!signature || !tokenValue) {
    throw new Error('Invalid data');
  } else if (tokenValue.length !== 64) {
    throw new Error('Invalid token value; should be exactly 64 hex digits long (u256)');
  }

  let customPermissionValue = (0, _transactionsControllerUtils.decimalToHex)((0, _swapsUtils.calcTokenValue)(customPermissionAmount, decimals));

  if (customPermissionValue.length > 64) {
    throw new Error('Custom value is larger than u256');
  }

  customPermissionValue = customPermissionValue.padStart(tokenValue.length, '0');
  const customTxParamsData = `${signature}${spender}${customPermissionValue}`;
  return customTxParamsData;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\index.js", {"./confirm-approve":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-approve\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmApprove.default;
  }
});

var _confirmApprove = _interopRequireDefault(require("./confirm-approve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\confirm-contract-interaction.js", {"../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../confirm-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-contract-interaction\confirm-contract-interaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmContractInteraction;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _routes = require("../../helpers/constants/routes");

var _send = require("../../ducks/send");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _transaction = require("../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmContractInteraction() {
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();

  const handleEditTransaction = async ({
    txData
  }) => {
    const {
      id
    } = txData;
    await dispatch((0, _send.editExistingTransaction)(_transaction.ASSET_TYPES.NATIVE, id.toString()));
    dispatch((0, _confirmTransaction.clearConfirmTransaction)());
  };

  const handleEdit = confirmTransactionData => {
    handleEditTransaction(confirmTransactionData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  };

  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    actionKey: "confirm",
    onEdit: confirmTransactionData => handleEdit(confirmTransactionData)
  });
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\index.js", {"./confirm-contract-interaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\confirm-contract-interaction.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-contract-interaction\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmContractInteraction.default;
  }
});

var _confirmContractInteraction = _interopRequireDefault(require("./confirm-contract-interaction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../components/app/account-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-decrypt-message\confirm-decrypt-message.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _classnames = _interopRequireDefault(require("classnames"));

var _accountListItem = _interopRequireDefault(require("../../components/app/account-list-item"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));

var _copyIcon = _interopRequireDefault(require("../../components/ui/icon/copy-icon.component"));

var _metametrics = require("../../../shared/constants/metametrics");

var _time = require("../../../shared/constants/time");

var _conversion = require("../../../shared/modules/conversion.utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmDecryptMessage extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      fromAccount: this.props.fromAccount,
      copyToClipboardPressed: false,
      hasCopied: false
    });

    _defineProperty(this, "copyMessage", () => {
      (0, _copyToClipboard.default)(this.state.rawMessage);
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.MESSAGES,
        event: 'Copy',
        properties: {
          action: 'Decrypt Message Copy',
          legacy_event: true
        }
      });
      this.setState({
        hasCopied: true
      });
      setTimeout(() => this.setState({
        hasCopied: false
      }), _time.SECOND * 3);
    });

    _defineProperty(this, "renderHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header-background"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__text"
      }, this.context.t('decryptRequest')), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__tip-container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__tip"
      })));
    });

    _defineProperty(this, "renderAccount", () => {
      const {
        fromAccount
      } = this.state;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-text"
      }, `${t('account')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-item"
      }, /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
        account: fromAccount
      })));
    });

    _defineProperty(this, "renderBalance", () => {
      const {
        conversionRate,
        nativeCurrency
      } = this.props;
      const {
        fromAccount: {
          balance
        }
      } = this.state;
      const {
        t
      } = this.context;
      const nativeCurrencyBalance = (0, _conversion.conversionUtil)(balance, {
        fromNumericBase: 'hex',
        toNumericBase: 'dec',
        fromDenomination: 'WEI',
        numberOfDecimals: 6,
        conversionRate
      });
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance-text"
      }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance-value"
      }, `${nativeCurrencyBalance} ${nativeCurrency}`));
    });

    _defineProperty(this, "renderRequestIcon", () => {
      const {
        requesterAddress
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__request-icon"
      }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 40,
        address: requesterAddress
      }));
    });

    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });

    _defineProperty(this, "renderBody", () => {
      const {
        decryptMessageInline,
        subjectMetadata,
        txData
      } = this.props;
      const {
        t
      } = this.context;
      const targetSubjectMetadata = subjectMetadata[txData.msgParams.origin];
      const name = (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.name) || txData.msgParams.origin;
      const notice = t('decryptMessageNotice', [txData.msgParams.origin]);
      const {
        hasCopied,
        hasDecrypted,
        hasError,
        rawMessage,
        errorMessage,
        copyToClipboardPressed
      } = this.state;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__body"
      }, this.renderAccountInfo(), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__visual"
      }, /*#__PURE__*/_react.default.createElement("section", null, targetSubjectMetadata !== null && targetSubjectMetadata !== void 0 && targetSubjectMetadata.iconUrl ? /*#__PURE__*/_react.default.createElement("img", {
        className: "request-decrypt-message__visual-identicon",
        src: targetSubjectMetadata.iconUrl,
        alt: ""
      }) : /*#__PURE__*/_react.default.createElement("i", {
        className: "request-decrypt-message__visual-identicon--default"
      }, name.charAt(0).toUpperCase()), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__notice"
      }, notice))), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-text"
      }, !hasDecrypted && !hasError ? txData.msgParams.data : rawMessage, hasError ? errorMessage : ''), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-decrypt-message__message-cover', {
          'request-decrypt-message__message-lock--pressed': hasDecrypted || hasError
        })
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-decrypt-message__message-lock', {
          'request-decrypt-message__message-lock--pressed': hasDecrypted || hasError
        }),
        onClick: event => {
          decryptMessageInline(txData, event).then(result => {
            if (result.error) {
              this.setState({
                hasError: true,
                errorMessage: this.context.t('decryptInlineError', [result.error])
              });
            } else {
              this.setState({
                hasDecrypted: true,
                rawMessage: result.rawData
              });
            }
          });
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-lock__container"
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-lock fa-lg request-decrypt-message__message-lock__container__icon"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-lock__container__text"
      }, t('decryptMetamask'))))), hasDecrypted ? /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)({
          'request-decrypt-message__message-copy': true,
          'request-decrypt-message__message-copy--pressed': copyToClipboardPressed
        }),
        onClick: () => this.copyMessage(),
        onMouseDown: () => this.setState({
          copyToClipboardPressed: true
        }),
        onMouseUp: () => this.setState({
          copyToClipboardPressed: false
        })
      }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        position: "bottom",
        title: hasCopied ? t('copiedExclamation') : t('copyToClipboard'),
        wrapperClassName: "request-decrypt-message__message-copy-tooltip",
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-copy-text"
      }, t('decryptCopy')), /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
        size: 17,
        color: "var(--color-primary-default)"
      }))) : /*#__PURE__*/_react.default.createElement("div", null));
    });

    _defineProperty(this, "renderFooter", () => {
      const {
        cancelDecryptMessage,
        clearConfirmTransaction,
        decryptMessage,
        history,
        mostRecentOverviewPage,
        txData
      } = this.props;
      const {
        trackEvent,
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__footer"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        large: true,
        className: "request-decrypt-message__footer__cancel-button",
        onClick: async event => {
          await cancelDecryptMessage(txData, event);
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.MESSAGES,
            event: 'Cancel',
            properties: {
              action: 'Decrypt Message Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "primary",
        large: true,
        className: "request-decrypt-message__footer__sign-button",
        onClick: async event => {
          await decryptMessage(txData, event);
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.MESSAGES,
            event: 'Confirm',
            properties: {
              action: 'Decrypt Message Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, t('decrypt')));
    });

    _defineProperty(this, "render", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__container"
      }, this.renderHeader(), this.renderBody(), this.renderFooter());
    });
  }

}

exports.default = ConfirmDecryptMessage;

_defineProperty(ConfirmDecryptMessage, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func.isRequired
});

_defineProperty(ConfirmDecryptMessage, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  cancelDecryptMessage: _propTypes.default.func.isRequired,
  decryptMessage: _propTypes.default.func.isRequired,
  decryptMessageInline: _propTypes.default.func.isRequired,
  conversionRate: _propTypes.default.number,
  history: _propTypes.default.object.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  requesterAddress: _propTypes.default.string,
  txData: _propTypes.default.object,
  subjectMetadata: _propTypes.default.object,
  nativeCurrency: _propTypes.default.string.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-decrypt-message.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-decrypt-message\confirm-decrypt-message.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _confirmDecryptMessage = _interopRequireDefault(require("./confirm-decrypt-message.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToProps(state) {
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = unconfirmedTransactions[0];
  const {
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, from);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    decryptMessage: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsg)(params));
    },
    cancelDecryptMessage: (msgData, event) => {
      event.stopPropagation(event);
      return dispatch((0, _actions.cancelDecryptMsg)(msgData));
    },
    decryptMessageInline: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsgInline)(params));
    }
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmDecryptMessage.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\index.js", {"./confirm-decrypt-message.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-decrypt-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDecryptMessage.default;
  }
});

var _confirmDecryptMessage = _interopRequireDefault(require("./confirm-decrypt-message.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.component.js", {"../../../shared/modules/buffer-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\buffer-utils.js","../confirm-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-deploy-contract\confirm-deploy-contract.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _bufferUtils = require("../../../shared/modules/buffer-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmDeployContract extends _react.Component {
  renderData() {
    const {
      t
    } = this.context;
    const {
      txData: {
        origin,
        txParams: {
          data
        } = {}
      } = {}
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-field"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-field-label"
    }, `${t('origin')}:`), /*#__PURE__*/_react.default.createElement("div", null, origin)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-field"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-field-label"
    }, `${t('bytes')}:`), /*#__PURE__*/_react.default.createElement("div", null, (0, _bufferUtils.toBuffer)(data).length))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box-label"
    }, `${t('hexData')}:`), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box"
    }, data));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
      actionKey: "contractDeployment",
      dataComponent: this.renderData()
    });
  }

}

exports.default = ConfirmDeployContract;

_defineProperty(ConfirmDeployContract, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(ConfirmDeployContract, "propTypes", {
  txData: _propTypes.default.object
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.container.js", {"./confirm-deploy-contract.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-deploy-contract\confirm-deploy-contract.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _confirmDeployContract = _interopRequireDefault(require("./confirm-deploy-contract.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    confirmTransaction: {
      txData
    } = {}
  } = state;
  return {
    txData
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmDeployContract.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\index.js", {"./confirm-deploy-contract.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-deploy-contract\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDeployContract.default;
  }
});

var _confirmDeployContract = _interopRequireDefault(require("./confirm-deploy-contract.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../components/app/account-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-encryption-public-key\confirm-encryption-public-key.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accountListItem = _interopRequireDefault(require("../../components/app/account-list-item"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _metametrics = require("../../../shared/constants/metametrics");

var _conversion = require("../../../shared/modules/conversion.utils");

var _siteOrigin = _interopRequireDefault(require("../../components/ui/site-origin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmEncryptionPublicKey extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header-background"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__text"
      }, this.context.t('encryptionPublicKeyRequest')), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__tip-container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__tip"
      })));
    });

    _defineProperty(this, "renderAccount", () => {
      const {
        fromAccount
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-text"
      }, `${t('account')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-item"
      }, /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
        account: fromAccount
      })));
    });

    _defineProperty(this, "renderBalance", () => {
      const {
        conversionRate,
        nativeCurrency,
        fromAccount: {
          balance
        }
      } = this.props;
      const {
        t
      } = this.context;
      const nativeCurrencyBalance = (0, _conversion.conversionUtil)(balance, {
        fromNumericBase: 'hex',
        toNumericBase: 'dec',
        fromDenomination: 'WEI',
        numberOfDecimals: 6,
        conversionRate
      });
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance-text"
      }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance-value"
      }, `${nativeCurrencyBalance} ${nativeCurrency}`));
    });

    _defineProperty(this, "renderRequestIcon", () => {
      const {
        requesterAddress
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__request-icon"
      }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 40,
        address: requesterAddress
      }));
    });

    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });

    _defineProperty(this, "renderBody", () => {
      const {
        subjectMetadata,
        txData
      } = this.props;
      const {
        t
      } = this.context;
      const targetSubjectMetadata = subjectMetadata[txData.origin];
      const notice = t('encryptionPublicKeyNotice', [/*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
        siteOrigin: txData.origin,
        key: txData.origin
      })]);
      const name = (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.hostname) || txData.origin;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__body"
      }, this.renderAccountInfo(), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__visual"
      }, /*#__PURE__*/_react.default.createElement("section", null, targetSubjectMetadata !== null && targetSubjectMetadata !== void 0 && targetSubjectMetadata.iconUrl ? /*#__PURE__*/_react.default.createElement("img", {
        className: "request-encryption-public-key__visual-identicon",
        src: targetSubjectMetadata.iconUrl,
        alt: ""
      }) : /*#__PURE__*/_react.default.createElement("i", {
        className: "request-encryption-public-key__visual-identicon--default"
      }, name.charAt(0).toUpperCase()), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__notice"
      }, notice))));
    });

    _defineProperty(this, "renderFooter", () => {
      const {
        cancelEncryptionPublicKey,
        clearConfirmTransaction,
        encryptionPublicKey,
        history,
        mostRecentOverviewPage,
        txData
      } = this.props;
      const {
        t,
        trackEvent
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__footer"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        large: true,
        className: "request-encryption-public-key__footer__cancel-button",
        onClick: async event => {
          await cancelEncryptionPublicKey(txData, event);
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.MESSAGES,
            event: 'Cancel',
            properties: {
              action: 'Encryption public key Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "primary",
        large: true,
        className: "request-encryption-public-key__footer__sign-button",
        onClick: async event => {
          await encryptionPublicKey(txData, event);
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.MESSAGES,
            event: 'Confirm',
            properties: {
              action: 'Encryption public key Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, t('provide')));
    });

    _defineProperty(this, "render", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__container"
      }, this.renderHeader(), this.renderBody(), this.renderFooter());
    });
  }

}

exports.default = ConfirmEncryptionPublicKey;

_defineProperty(ConfirmEncryptionPublicKey, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func.isRequired
});

_defineProperty(ConfirmEncryptionPublicKey, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  cancelEncryptionPublicKey: _propTypes.default.func.isRequired,
  encryptionPublicKey: _propTypes.default.func.isRequired,
  conversionRate: _propTypes.default.number,
  history: _propTypes.default.object.isRequired,
  requesterAddress: _propTypes.default.string,
  txData: _propTypes.default.object,
  subjectMetadata: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  nativeCurrency: _propTypes.default.string.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-encryption-public-key.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-encryption-public-key\confirm-encryption-public-key.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _confirmEncryptionPublicKey = _interopRequireDefault(require("./confirm-encryption-public-key.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToProps(state) {
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = unconfirmedTransactions[0];
  const {
    msgParams: from
  } = txData;
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, from);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    encryptionPublicKey: (msgData, event) => {
      const params = {
        data: msgData.msgParams,
        metamaskId: msgData.id
      };
      event.stopPropagation();
      return dispatch((0, _actions.encryptionPublicKeyMsg)(params));
    },
    cancelEncryptionPublicKey: (msgData, event) => {
      event.stopPropagation();
      return dispatch((0, _actions.cancelEncryptionPublicKeyMsg)(msgData));
    }
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmEncryptionPublicKey.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\index.js", {"./confirm-encryption-public-key.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-encryption-public-key\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmEncryptionPublicKey.default;
  }
});

var _confirmEncryptionPublicKey = _interopRequireDefault(require("./confirm-encryption-public-key.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-import-token\\confirm-import-token.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/token-balance":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-import-token\confirm-import-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../helpers/constants/routes");

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));

var _i18n = require("../../contexts/i18n");

var _metametrics = require("../../contexts/metametrics");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _actions = require("../../store/actions");

var _metametrics2 = require("../../../shared/constants/metametrics");

var _transaction = require("../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getTokenName = (name, symbol) => {
  return name === undefined ? symbol : `${name} (${symbol})`;
};

const ConfirmImportToken = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const pendingTokens = (0, _reactRedux.useSelector)(_metamask.getPendingTokens);
  const handleAddTokens = (0, _react.useCallback)(async () => {
    var _addedTokenValues$0$a;

    await dispatch((0, _actions.addTokens)(pendingTokens));
    const addedTokenValues = Object.values(pendingTokens);
    const firstTokenAddress = addedTokenValues === null || addedTokenValues === void 0 ? void 0 : (_addedTokenValues$0$a = addedTokenValues[0].address) === null || _addedTokenValues$0$a === void 0 ? void 0 : _addedTokenValues$0$a.toLowerCase();
    addedTokenValues.forEach(pendingToken => {
      trackEvent({
        event: _metametrics2.EVENT_NAMES.TOKEN_ADDED,
        category: _metametrics2.EVENT.CATEGORIES.WALLET,
        sensitiveProperties: {
          token_symbol: pendingToken.symbol,
          token_contract_address: pendingToken.address,
          token_decimal_precision: pendingToken.decimals,
          unlisted: pendingToken.unlisted,
          source: pendingToken.isCustom ? _metametrics2.EVENT.SOURCE.TOKEN.CUSTOM : _metametrics2.EVENT.SOURCE.TOKEN.LIST,
          token_standard: _transaction.TOKEN_STANDARDS.ERC20,
          asset_type: _transaction.ASSET_TYPES.TOKEN
        }
      });
    });
    dispatch((0, _actions.clearPendingTokens)());

    if (firstTokenAddress) {
      history.push(`${_routes.ASSET_ROUTE}/${firstTokenAddress}`);
    } else {
      history.push(mostRecentOverviewPage);
    }
  }, [dispatch, history, mostRecentOverviewPage, pendingTokens, trackEvent]);
  (0, _react.useEffect)(() => {
    if (Object.keys(pendingTokens).length === 0) {
      history.push(mostRecentOverviewPage);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('importTokensCamelCase')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token-list"
  }, Object.entries(pendingTokens).map(([address, token]) => {
    const {
      name,
      symbol
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token-list-item",
      key: address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token confirm-import-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-import-token__token-icon",
      diameter: 48,
      address: address
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__name"
    }, getTokenName(name, symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: token
    })));
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__footer"
  }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    large: true,
    className: "page-container__footer-button",
    onClick: () => {
      dispatch((0, _actions.clearPendingTokens)());
      history.push(_routes.IMPORT_TOKEN_ROUTE);
    }
  }, t('back')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    large: true,
    className: "page-container__footer-button",
    onClick: handleAddTokens
  }, t('importTokensCamelCase')))));
};

var _default = ConfirmImportToken;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-import-token\\index.js", {"./confirm-import-token":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-import-token\\confirm-import-token.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-import-token\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmImportToken = _interopRequireDefault(require("./confirm-import-token"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _confirmImportToken.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.component.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../confirm-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-send-ether\confirm-send-ether.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _routes = require("../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmSendEther extends _react.Component {
  handleEdit({
    txData
  }) {
    const {
      editTransaction,
      history
    } = this.props;
    editTransaction(txData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  }

  shouldHideData() {
    const {
      txParams = {}
    } = this.props;
    return !txParams.data;
  }

  render() {
    const hideData = this.shouldHideData();
    return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
      actionKey: "confirm",
      hideData: hideData,
      onEdit: confirmTransactionData => this.handleEdit(confirmTransactionData)
    });
  }

}

exports.default = ConfirmSendEther;

_defineProperty(ConfirmSendEther, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(ConfirmSendEther, "propTypes", {
  editTransaction: _propTypes.default.func,
  history: _propTypes.default.object,
  txParams: _propTypes.default.object
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.container.js", {"../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","./confirm-send-ether.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-send-ether\confirm-send-ether.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _send = require("../../ducks/send");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _transaction = require("../../../shared/constants/transaction");

var _confirmSendEther = _interopRequireDefault(require("./confirm-send-ether.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    confirmTransaction: {
      txData: {
        txParams
      } = {}
    }
  } = state;
  return {
    txParams
  };
};

const mapDispatchToProps = dispatch => {
  return {
    editTransaction: async txData => {
      const {
        id
      } = txData;
      await dispatch((0, _send.editExistingTransaction)(_transaction.ASSET_TYPES.NATIVE, id.toString()));
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmSendEther.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\index.js", {"./confirm-send-ether.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-send-ether\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSendEther.default;
  }
});

var _confirmSendEther = _interopRequireDefault(require("./confirm-send-ether.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-token\\confirm-send-token.js", {"../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../confirm-token-transaction-base/confirm-token-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-send-token\confirm-send-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmSendToken;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTokenTransactionBase = _interopRequireDefault(require("../confirm-token-transaction-base/confirm-token-transaction-base"));

var _routes = require("../../helpers/constants/routes");

var _send = require("../../ducks/send");

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _actions = require("../../store/actions");

var _transaction = require("../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmSendToken({
  assetStandard,
  toAddress,
  tokenAddress,
  assetName,
  tokenSymbol,
  tokenAmount,
  tokenId,
  transaction,
  image,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexMaximumTransactionFee
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();

  const handleEditTransaction = async ({
    txData
  }) => {
    const {
      id
    } = txData;
    await dispatch((0, _send.editExistingTransaction)(_transaction.ASSET_TYPES.TOKEN, id.toString()));
    dispatch((0, _confirmTransaction.clearConfirmTransaction)());
    dispatch((0, _actions.showSendTokenPage)());
  };

  const handleEdit = confirmTransactionData => {
    handleEditTransaction(confirmTransactionData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  };

  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const contractExchangeRate = (0, _reactRedux.useSelector)(_selectors.contractExchangeRateSelector);
  let title, subtitle;

  if (assetStandard === _transaction.ERC721) {
    title = assetName;
    subtitle = `#${tokenId}`;
  } else if (assetStandard === _transaction.ERC20) {
    title = `${tokenAmount} ${tokenSymbol}`;
  }

  return /*#__PURE__*/_react.default.createElement(_confirmTokenTransactionBase.default, {
    onEdit: handleEdit,
    conversionRate: conversionRate,
    currentCurrency: currentCurrency,
    nativeCurrency: nativeCurrency,
    contractExchangeRate: contractExchangeRate,
    title: title,
    subtitle: subtitle,
    assetStandard: assetStandard,
    assetName: assetName,
    tokenSymbol: tokenSymbol,
    tokenAmount: tokenAmount,
    tokenId: tokenId,
    transaction: transaction,
    image: image,
    toAddress: toAddress,
    tokenAddress: tokenAddress,
    ethTransactionTotal: ethTransactionTotal,
    fiatTransactionTotal: fiatTransactionTotal,
    hexMaximumTransactionFee: hexMaximumTransactionFee
  });
}

ConfirmSendToken.propTypes = {
  tokenAmount: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  assetName: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  image: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  transaction: _propTypes.default.shape({
    origin: _propTypes.default.string,
    txParams: _propTypes.default.shape({
      data: _propTypes.default.string,
      to: _propTypes.default.string,
      from: _propTypes.default.string
    })
  }),
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-token\\index.js", {"./confirm-send-token":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-token\\confirm-send-token.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-send-token\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSendToken.default;
  }
});

var _confirmSendToken = _interopRequireDefault(require("./confirm-send-token"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js", {"../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../components/app/user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../confirm-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-token-transaction-base\confirm-token-transaction-base.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmTokenTransactionBase;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _reactRedux = require("react-redux");

var _i18n = require("../../contexts/i18n");

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../components/app/user-preferenced-currency-display"));

var _confirmTx = require("../../helpers/utils/confirm-tx.util");

var _common = require("../../helpers/constants/common");

var _conversions = require("../../helpers/utils/conversions.util");

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _transaction = require("../../../shared/constants/transaction");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ConfirmTokenTransactionBase({
  image = '',
  assetName,
  toAddress,
  tokenAddress,
  tokenAmount = '0',
  tokenSymbol,
  tokenId,
  assetStandard,
  onEdit,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexMaximumTransactionFee
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const contractExchangeRate = (0, _reactRedux.useSelector)(_selectors.contractExchangeRateSelector);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const ethTransactionTotalMaxAmount = Number((0, _transactionsControllerUtils.hexWEIToDecETH)(hexMaximumTransactionFee));
  let title, subtitle;

  if (assetStandard === _transaction.ERC721 || assetStandard === _transaction.ERC1155) {
    title = assetName;
    subtitle = `#${tokenId}`;
  } else if (assetStandard === _transaction.ERC20) {
    title = `${tokenAmount} ${tokenSymbol}`;
  }

  const hexWeiValue = (0, _react.useMemo)(() => {
    if (tokenAmount === '0' || !contractExchangeRate) {
      return '0';
    }

    const decimalEthValue = new _bignumber.default(tokenAmount).times(new _bignumber.default(contractExchangeRate ? String(contractExchangeRate) : 0)).toFixed();
    return (0, _conversions.getWeiHexFromDecimalValue)({
      value: decimalEthValue,
      fromCurrency: _common.ETH,
      fromDenomination: _common.ETH
    });
  }, [tokenAmount, contractExchangeRate]);
  const secondaryTotalTextOverride = (0, _react.useMemo)(() => {
    if (typeof contractExchangeRate === 'undefined') {
      return (0, _confirmTx.formatCurrency)(fiatTransactionTotal, currentCurrency);
    }

    const fiatTransactionAmount = (0, _confirmTx.convertTokenToFiat)({
      value: tokenAmount,
      toCurrency: currentCurrency,
      conversionRate,
      contractExchangeRate
    });
    const fiatTotal = (0, _confirmTx.addFiat)(fiatTransactionAmount, fiatTransactionTotal);
    const roundedFiatTotal = (0, _confirmTx.roundExponential)(fiatTotal);
    return (0, _confirmTx.formatCurrency)(roundedFiatTotal, currentCurrency);
  }, [currentCurrency, conversionRate, contractExchangeRate, fiatTransactionTotal, tokenAmount]);

  const subtitleComponent = () => {
    if (contractExchangeRate === undefined && subtitle === undefined) {
      return /*#__PURE__*/_react.default.createElement("span", null, t('noConversionRateAvailable'));
    }

    if (subtitle) {
      return /*#__PURE__*/_react.default.createElement("span", null, subtitle);
    }

    return /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: hexWeiValue,
      type: _common.PRIMARY,
      showEthLogo: true,
      hideLabel: true
    });
  };

  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    image: image,
    onEdit: onEdit,
    tokenAddress: tokenAddress,
    title: title,
    subtitleComponent: subtitleComponent(),
    primaryTotalTextOverride: `${title} + ${ethTransactionTotal} ${nativeCurrency}`,
    primaryTotalTextOverrideMaxAmount: `${title} + ${ethTransactionTotalMaxAmount} ${nativeCurrency}`,
    secondaryTotalTextOverride: secondaryTotalTextOverride
  });
}

ConfirmTokenTransactionBase.propTypes = {
  image: _propTypes.default.string,
  assetName: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  tokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\index.js", {"./confirm-token-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-token-transaction-base\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmTokenTransactionBase.default;
  }
});

var _confirmTokenTransactionBase = _interopRequireDefault(require("./confirm-token-transaction-base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/buffer-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\buffer-utils.js","../../components/app/confirm-page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\confirm-page-container\\index.js","../../components/app/gas-details-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\index.js","../../components/app/gas-timing/gas-timing.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js","../../components/app/ledger-instruction-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../../components/app/multilayer-fee-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\index.js","../../components/app/transaction-decoding":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\index.js","../../components/app/transaction-decoding/components/ui/copy-raw-data":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js","../../components/app/transaction-detail-item/transaction-detail-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../../components/app/transaction-detail/transaction-detail.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js","../../components/app/user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../../components/ui/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../components/ui/disclosure":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\disclosure\\index.js","../../components/ui/info-tooltip/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","../../components/ui/loading-heartbeat":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../components/ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/error-keys":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/metrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\metrics.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../send/send.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.constants.js","../send/send.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js","./transaction-alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\transaction-alerts\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-base\confirm-transaction-base.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _confirmPageContainer = _interopRequireDefault(require("../../components/app/confirm-page-container"));

var _transactionDecoding = _interopRequireDefault(require("../../components/app/transaction-decoding"));

var _send = require("../send/send.utils");

var _conversions = require("../../helpers/utils/conversions.util");

var _routes = require("../../helpers/constants/routes");

var _errorKeys = require("../../helpers/constants/error-keys");

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../components/app/user-preferenced-currency-display"));

var _copyRawData = _interopRequireDefault(require("../../components/app/transaction-decoding/components/ui/copy-raw-data"));

var _common = require("../../helpers/constants/common");

var _textField = _interopRequireDefault(require("../../components/ui/text-field"));

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message"));

var _disclosure = _interopRequireDefault(require("../../components/ui/disclosure"));

var _metametrics = require("../../../shared/constants/metametrics");

var _transaction = require("../../../shared/constants/transaction");

var _metrics = require("../../helpers/utils/metrics");

var _transactions = require("../../helpers/utils/transactions.util");

var _bufferUtils = require("../../../shared/modules/buffer-utils");

var _transactionModal = require("../../contexts/transaction-modal");

var _transactionDetail = _interopRequireDefault(require("../../components/app/transaction-detail/transaction-detail.component"));

var _transactionDetailItem = _interopRequireDefault(require("../../components/app/transaction-detail-item/transaction-detail-item.component"));

var _infoTooltip = _interopRequireDefault(require("../../components/ui/info-tooltip/info-tooltip"));

var _loadingHeartbeat = _interopRequireDefault(require("../../components/ui/loading-heartbeat"));

var _gasDetailsItem = _interopRequireDefault(require("../../components/app/gas-details-item"));

var _gasTiming = _interopRequireDefault(require("../../components/app/gas-timing/gas-timing.component"));

var _ledgerInstructionField = _interopRequireDefault(require("../../components/app/ledger-instruction-field"));

var _multilayerFeeMessage = _interopRequireDefault(require("../../components/app/multilayer-fee-message"));

var _typography = _interopRequireDefault(require("../../components/ui/typography/typography"));

var _designSystem = require("../../helpers/constants/design-system");

var _actions = require("../../store/actions");

var _send2 = require("../send/send.constants");

var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _network = require("../../../shared/constants/network");

var _transactionAlerts = _interopRequireDefault(require("./transaction-alerts"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const renderHeartBeatIfNotInTest = () => false ? null : /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null);

class ConfirmTransactionBase extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      submitting: false,
      submitError: null,
      submitWarning: '',
      ethGasPriceWarning: '',
      editingGas: false,
      userAcknowledgedGasMissing: false
    });

    _defineProperty(this, "_beforeUnloadForGasPolling", () => {
      this._isMounted = false;

      if (this.state.pollingToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(this.state.pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });

    _defineProperty(this, "_removeBeforeUnload", () => {
      window.removeEventListener('beforeunload', this._beforeUnloadForGasPolling);
    });

    _defineProperty(this, "supportsEIP1559V2", this.props.eip1559V2Enabled && this.props.supportsEIP1559 && !(0, _transactions.isLegacyTransaction)(this.props.txData));
  }

  componentDidUpdate(prevProps) {
    const {
      transactionStatus,
      showTransactionConfirmedModal,
      history,
      clearConfirmTransaction,
      nextNonce,
      customNonceValue,
      toAddress,
      tryReverseResolveAddress,
      isEthGasPrice,
      setDefaultHomeActiveTabName
    } = this.props;
    const {
      customNonceValue: prevCustomNonceValue,
      nextNonce: prevNextNonce,
      toAddress: prevToAddress,
      transactionStatus: prevTxStatus,
      isEthGasPrice: prevIsEthGasPrice
    } = prevProps;
    const statusUpdated = transactionStatus !== prevTxStatus;
    const txDroppedOrConfirmed = transactionStatus === _transaction.TRANSACTION_STATUSES.DROPPED || transactionStatus === _transaction.TRANSACTION_STATUSES.CONFIRMED;

    if (nextNonce !== prevNextNonce || customNonceValue !== prevCustomNonceValue) {
      if (nextNonce !== null && customNonceValue > nextNonce) {
        this.setState({
          submitWarning: this.context.t('nextNonceWarning', [nextNonce])
        });
      } else {
        this.setState({
          submitWarning: ''
        });
      }
    }

    if (statusUpdated && txDroppedOrConfirmed) {
      showTransactionConfirmedModal({
        onSubmit: () => {
          clearConfirmTransaction();
          setDefaultHomeActiveTabName('Activity').then(() => {
            history.push(_routes.DEFAULT_ROUTE);
          });
        }
      });
    }

    if (toAddress && toAddress !== prevToAddress) {
      tryReverseResolveAddress(toAddress);
    }

    if (isEthGasPrice !== prevIsEthGasPrice) {
      if (isEthGasPrice) {
        this.setState({
          ethGasPriceWarning: this.context.t(_errorKeys.ETH_GAS_PRICE_FETCH_WARNING_KEY)
        });
      } else {
        this.setState({
          ethGasPriceWarning: ''
        });
      }
    }
  }

  getErrorKey() {
    const {
      balance,
      conversionRate,
      hexMaximumTransactionFee,
      txData: {
        txParams: {
          value: amount
        } = {}
      } = {},
      customGas,
      noGasPrice,
      gasFeeIsCustom
    } = this.props;
    const insufficientBalance = balance && !(0, _send.isBalanceSufficient)({
      amount,
      gasTotal: hexMaximumTransactionFee || '0x0',
      balance,
      conversionRate
    });

    if (insufficientBalance) {
      return {
        valid: false,
        errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
      };
    }

    if ((0, _metamaskControllerUtils.hexToDecimal)(customGas.gasLimit) < Number(_send2.MIN_GAS_LIMIT_DEC)) {
      return {
        valid: false,
        errorKey: _errorKeys.GAS_LIMIT_TOO_LOW_ERROR_KEY
      };
    }

    if (noGasPrice && !gasFeeIsCustom) {
      return {
        valid: false,
        errorKey: _errorKeys.GAS_PRICE_FETCH_FAILURE_ERROR_KEY
      };
    }

    return {
      valid: true
    };
  }

  handleEditGas() {
    const {
      actionKey,
      txData: {
        origin
      },
      methodData = {}
    } = this.props;
    this.context.trackEvent({
      category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
      event: 'User clicks "Edit" on gas',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        recipientKnown: null,
        functionType: actionKey || (0, _metrics.getMethodName)(methodData.name) || _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION,
        origin
      }
    });
    this.setState({
      editingGas: true
    });
  }

  handleCloseEditGas() {
    this.setState({
      editingGas: false
    });
  }

  setUserAcknowledgedGasMissing() {
    this.setState({
      userAcknowledgedGasMissing: true
    });
  }

  renderDetails() {
    var _this$props$txData3, _txData$txParams;

    const {
      primaryTotalTextOverride,
      secondaryTotalTextOverride,
      hexMinimumTransactionFee,
      hexMaximumTransactionFee,
      hexTransactionTotal,
      useNonceField,
      customNonceValue,
      updateCustomNonce,
      nextNonce,
      getNextNonce,
      txData,
      useNativeCurrencyAsPrimaryCurrency,
      primaryTotalTextOverrideMaxAmount,
      maxFeePerGas,
      maxPriorityFeePerGas,
      isMainnet,
      showLedgerSteps,
      supportsEIP1559,
      isMultiLayerFeeNetwork,
      nativeCurrency,
      showBuyModal,
      isBuyableChain
    } = this.props;
    const {
      t
    } = this.context;
    const {
      userAcknowledgedGasMissing
    } = this.state;
    const {
      valid
    } = this.getErrorKey();

    const isDisabled = () => {
      return userAcknowledgedGasMissing ? false : !valid;
    };

    const hasSimulationError = Boolean(txData.simulationFails);
    const renderSimulationFailureWarning = hasSimulationError && !userAcknowledgedGasMissing;
    const networkName = _network.NETWORK_TO_NAME_MAP[txData.chainId];

    const renderTotalMaxAmount = () => {
      if (primaryTotalTextOverrideMaxAmount === undefined && secondaryTotalTextOverride === undefined) {
        // Native Send
        return /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.PRIMARY,
          key: "total-max-amount",
          value: (0, _conversions.addHexes)(txData.txParams.value, hexMaximumTransactionFee),
          hideLabel: !useNativeCurrencyAsPrimaryCurrency
        });
      } // Token send


      return useNativeCurrencyAsPrimaryCurrency ? primaryTotalTextOverrideMaxAmount : secondaryTotalTextOverride;
    };

    const renderTotalDetailTotal = () => {
      if (primaryTotalTextOverride === undefined && secondaryTotalTextOverride === undefined) {
        var _this$props$txData;

        return /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-value"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData = this.props.txData) === null || _this$props$txData === void 0 ? void 0 : _this$props$txData.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.PRIMARY,
          key: "total-detail-value",
          value: hexTransactionTotal,
          hideLabel: !useNativeCurrencyAsPrimaryCurrency
        }));
      }

      return useNativeCurrencyAsPrimaryCurrency ? primaryTotalTextOverride : secondaryTotalTextOverride;
    };

    const renderTotalDetailText = () => {
      if (primaryTotalTextOverride === undefined && secondaryTotalTextOverride === undefined) {
        var _this$props$txData2;

        return /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-value"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData2 = this.props.txData) === null || _this$props$txData2 === void 0 ? void 0 : _this$props$txData2.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.SECONDARY,
          key: "total-detail-text",
          value: hexTransactionTotal,
          hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
        }));
      }

      return useNativeCurrencyAsPrimaryCurrency ? secondaryTotalTextOverride : primaryTotalTextOverride;
    };

    const nonceField = useNonceField ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-detail-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-detail-row__label"
    }, t('nonceFieldHeading')), /*#__PURE__*/_react.default.createElement("div", {
      className: "custom-nonce-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      min: 0,
      placeholder: typeof nextNonce === 'number' ? nextNonce.toString() : null,
      onChange: ({
        target: {
          value
        }
      }) => {
        if (!value.length || Number(value) < 0) {
          updateCustomNonce('');
        } else {
          updateCustomNonce(String(Math.floor(value)));
        }

        getNextNonce();
      },
      fullWidth: true,
      margin: "dense",
      value: customNonceValue || ''
    })))) : null;

    const renderGasDetailsItem = () => {
      return this.supportsEIP1559V2 ? /*#__PURE__*/_react.default.createElement(_gasDetailsItem.default, {
        key: "gas_details",
        userAcknowledgedGasMissing: userAcknowledgedGasMissing
      }) : /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
        key: "gas-item",
        detailTitle: txData.dappSuggestedGasFees ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('transactionDetailGasHeading'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
          contentText: t('transactionDetailDappGasTooltip'),
          position: "top"
        }, /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-info-circle"
        }))) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('transactionDetailGasHeading'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
          contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, t('transactionDetailGasTooltipIntro', [isMainnet ? t('networkNameEthereum') : ''])), /*#__PURE__*/_react.default.createElement("p", null, t('transactionDetailGasTooltipExplanation')), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("a", {
            href: "https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172",
            target: "_blank",
            rel: "noopener noreferrer"
          }, t('transactionDetailGasTooltipConversion')))),
          position: "top"
        }, /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-info-circle"
        }))),
        detailText: /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__currency-container test"
        }, renderHeartBeatIfNotInTest(), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.SECONDARY,
          value: hexMinimumTransactionFee,
          hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
        })),
        detailTotal: /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__currency-container"
        }, renderHeartBeatIfNotInTest(), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.PRIMARY,
          value: hexMinimumTransactionFee,
          hideLabel: !useNativeCurrencyAsPrimaryCurrency,
          numberOfDecimals: 6
        })),
        subText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("strong", {
          key: "editGasSubTextFeeLabel"
        }, t('editGasSubTextFeeLabel')), /*#__PURE__*/_react.default.createElement("div", {
          key: "editGasSubTextFeeValue",
          className: "confirm-page-container-content__currency-container"
        }, renderHeartBeatIfNotInTest(), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          key: "editGasSubTextFeeAmount",
          type: _common.PRIMARY,
          value: hexMaximumTransactionFee,
          hideLabel: !useNativeCurrencyAsPrimaryCurrency
        }))),
        subTitle: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, txData.dappSuggestedGasFees ? /*#__PURE__*/_react.default.createElement(_typography.default, {
          variant: _designSystem.TYPOGRAPHY.H7,
          fontStyle: _designSystem.FONT_STYLE.ITALIC,
          color: _designSystem.COLORS.TEXT_ALTERNATIVE
        }, t('transactionDetailDappGasMoreInfo')) : '', supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
          maxPriorityFeePerGas: (0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxPriorityFeePerGas || txData.txParams.maxPriorityFeePerGas).toString(),
          maxFeePerGas: (0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxFeePerGas || txData.txParams.maxFeePerGas).toString()
        }))
      });
    };

    const simulationFailureWarning = () => /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__error-container"
    }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('simulationErrorMessageV2'),
      useIcon: true,
      iconFillColor: "var(--color-error-default)",
      type: "danger",
      primaryActionV2: userAcknowledgedGasMissing === true ? undefined : {
        label: t('proceedWithTransaction'),
        onClick: () => this.setUserAcknowledgedGasMissing()
      }
    }));

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__details"
    }, /*#__PURE__*/_react.default.createElement(_transactionAlerts.default, {
      setUserAcknowledgedGasMissing: () => this.setUserAcknowledgedGasMissing(),
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      nativeCurrency: nativeCurrency,
      networkName: networkName,
      showBuyModal: showBuyModal,
      type: txData.type,
      isBuyableChain: isBuyableChain
    }), /*#__PURE__*/_react.default.createElement(_transactionDetail.default, {
      disabled: isDisabled(),
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      onEdit: renderSimulationFailureWarning || isMultiLayerFeeNetwork ? null : () => this.handleEditGas(),
      rows: [renderSimulationFailureWarning && !this.supportsEIP1559V2 && simulationFailureWarning(), !renderSimulationFailureWarning && !isMultiLayerFeeNetwork && renderGasDetailsItem(), !renderSimulationFailureWarning && isMultiLayerFeeNetwork && /*#__PURE__*/_react.default.createElement(_multilayerFeeMessage.default, {
        transaction: txData,
        layer2fee: hexMinimumTransactionFee,
        nativeCurrency: nativeCurrency
      }), !isMultiLayerFeeNetwork && /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
        key: "total-item",
        detailTitle: t('total'),
        detailText: renderTotalDetailText(),
        detailTotal: renderTotalDetailTotal(),
        subTitle: t('transactionDetailGasTotalSubtitle'),
        subText: /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-amount"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData3 = this.props.txData) === null || _this$props$txData3 === void 0 ? void 0 : _this$props$txData3.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement("strong", {
          key: "editGasSubTextAmountLabel"
        }, t('editGasSubTextAmountLabel')), ' ', renderTotalMaxAmount())
      })]
    }), nonceField, showLedgerSteps ? /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: Boolean((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.data)
    }) : null);
  }

  renderData(functionType) {
    const {
      t
    } = this.context;
    const {
      txData: {
        txParams
      } = {},
      methodData: {
        params
      } = {},
      hideData,
      dataComponent
    } = this.props;

    if (hideData) {
      return null;
    }

    const functionParams = params !== null && params !== void 0 && params.length ? `(${params.map(({
      type
    }) => type).join(', ')})` : '';
    return dataComponent || /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box-label"
    }, `${t('functionType')}:`, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-page-container-content__function-type"
    }, `${functionType} ${functionParams}`)), /*#__PURE__*/_react.default.createElement(_disclosure.default, null, /*#__PURE__*/_react.default.createElement(_transactionDecoding.default, {
      to: txParams === null || txParams === void 0 ? void 0 : txParams.to,
      inputData: txParams === null || txParams === void 0 ? void 0 : txParams.data
    })));
  }

  renderDataHex(functionType) {
    const {
      t
    } = this.context;
    const {
      txData: {
        txParams
      } = {},
      methodData: {
        params
      } = {},
      hideData,
      dataHexComponent
    } = this.props;

    if (hideData || !txParams.to) {
      return null;
    }

    const functionParams = params !== null && params !== void 0 && params.length ? `(${params.map(({
      type
    }) => type).join(', ')})` : '';
    return dataHexComponent || /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box-label"
    }, `${t('functionType')}:`, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-page-container-content__function-type"
    }, `${functionType} ${functionParams}`)), params && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-field-label"
    }, `${t('parameters')}:`), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(params, null, 2)))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box-label"
    }, `${t('hexData')}: ${(0, _bufferUtils.toBuffer)(txParams === null || txParams === void 0 ? void 0 : txParams.data).length} bytes`), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__data-box"
    }, txParams === null || txParams === void 0 ? void 0 : txParams.data), /*#__PURE__*/_react.default.createElement(_copyRawData.default, {
      data: txParams === null || txParams === void 0 ? void 0 : txParams.data
    }));
  }

  handleEdit() {
    const {
      txData,
      tokenData,
      tokenProps,
      onEdit,
      actionKey,
      txData: {
        origin
      },
      methodData = {}
    } = this.props;
    this.context.trackEvent({
      category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
      event: 'Edit Transaction',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        recipientKnown: null,
        functionType: actionKey || (0, _metrics.getMethodName)(methodData.name) || _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION,
        origin
      }
    });
    onEdit({
      txData,
      tokenData,
      tokenProps
    });
  }

  handleCancelAll() {
    const {
      cancelAllTransactions,
      clearConfirmTransaction,
      history,
      mostRecentOverviewPage,
      showRejectTransactionsConfirmationModal,
      unapprovedTxCount
    } = this.props;
    showRejectTransactionsConfirmationModal({
      unapprovedTxCount,
      onSubmit: async () => {
        this._removeBeforeUnload();

        await cancelAllTransactions();
        clearConfirmTransaction();
        history.push(mostRecentOverviewPage);
      }
    });
  }

  handleCancel() {
    const {
      txData,
      cancelTransaction,
      history,
      mostRecentOverviewPage,
      clearConfirmTransaction,
      updateCustomNonce
    } = this.props;

    this._removeBeforeUnload();

    updateCustomNonce('');
    cancelTransaction(txData).then(() => {
      clearConfirmTransaction();
      history.push(mostRecentOverviewPage);
    });
  }

  handleSubmit() {
    const {
      sendTransaction,
      clearConfirmTransaction,
      txData,
      history,
      mostRecentOverviewPage,
      updateCustomNonce,
      maxFeePerGas,
      customTokenAmount,
      dappProposedTokenAmount,
      currentTokenBalance,
      maxPriorityFeePerGas,
      baseFeePerGas,
      methodData
    } = this.props;
    const {
      submitting
    } = this.state;
    const {
      name
    } = methodData;

    if (submitting) {
      return;
    }

    if (baseFeePerGas) {
      txData.estimatedBaseFee = baseFeePerGas;
    }

    if (name) {
      txData.contractMethodName = name;
    }

    if (dappProposedTokenAmount) {
      txData.dappProposedTokenAmount = dappProposedTokenAmount;
      txData.originalApprovalAmount = dappProposedTokenAmount;
    }

    if (customTokenAmount) {
      txData.customTokenAmount = customTokenAmount;
      txData.finalApprovalAmount = customTokenAmount;
    } else if (dappProposedTokenAmount !== undefined) {
      txData.finalApprovalAmount = dappProposedTokenAmount;
    }

    if (currentTokenBalance) {
      txData.currentTokenBalance = currentTokenBalance;
    }

    if (maxFeePerGas) {
      txData.txParams = { ...txData.txParams,
        maxFeePerGas
      };
    }

    if (maxPriorityFeePerGas) {
      txData.txParams = { ...txData.txParams,
        maxPriorityFeePerGas
      };
    }

    this.setState({
      submitting: true,
      submitError: null
    }, () => {
      this._removeBeforeUnload();

      sendTransaction(txData).then(() => {
        clearConfirmTransaction();
        this.setState({
          submitting: false
        }, () => {
          history.push(mostRecentOverviewPage);
          updateCustomNonce('');
        });
      }).catch(error => {
        this.setState({
          submitting: false,
          submitError: error.message
        });
        updateCustomNonce('');
      });
    });
  }

  renderTitleComponent() {
    const {
      title,
      hexTransactionAmount,
      txData
    } = this.props; // Title string passed in by props takes priority

    if (title) {
      return null;
    }

    const isContractInteraction = txData.type === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION;
    return /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: hexTransactionAmount,
      type: _common.PRIMARY,
      showEthLogo: true,
      ethLogoHeight: 24,
      hideLabel: !isContractInteraction,
      showCurrencySuffix: isContractInteraction
    });
  }

  renderSubtitleComponent() {
    const {
      subtitleComponent,
      hexTransactionAmount
    } = this.props;
    return subtitleComponent || /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: hexTransactionAmount,
      type: _common.SECONDARY,
      showEthLogo: true,
      hideLabel: true
    });
  }

  handleNextTx(txId) {
    const {
      history,
      clearConfirmTransaction
    } = this.props;

    if (txId) {
      clearConfirmTransaction();
      history.push(`${_routes.CONFIRM_TRANSACTION_ROUTE}/${txId}`);
    }
  }

  getNavigateTxData() {
    const {
      currentNetworkUnapprovedTxs,
      txData: {
        id
      } = {}
    } = this.props;
    const enumUnapprovedTxs = Object.keys(currentNetworkUnapprovedTxs);
    const currentPosition = enumUnapprovedTxs.indexOf(id ? id.toString() : '');
    return {
      totalTx: enumUnapprovedTxs.length,
      positionOfCurrentTx: currentPosition + 1,
      nextTxId: enumUnapprovedTxs[currentPosition + 1],
      prevTxId: enumUnapprovedTxs[currentPosition - 1],
      showNavigation: enumUnapprovedTxs.length > 1,
      firstTx: enumUnapprovedTxs[0],
      lastTx: enumUnapprovedTxs[enumUnapprovedTxs.length - 1],
      ofText: this.context.t('ofTextNofM'),
      requestsWaitingText: this.context.t('requestsAwaitingAcknowledgement')
    };
  }

  componentDidMount() {
    this._isMounted = true;
    const {
      toAddress,
      txData: {
        origin
      } = {},
      getNextNonce,
      tryReverseResolveAddress
    } = this.props;
    const {
      trackEvent
    } = this.context;
    trackEvent({
      category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
      event: 'Confirm: Started',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        origin
      }
    });
    getNextNonce();

    if (toAddress) {
      tryReverseResolveAddress(toAddress);
    }
    /**
     * This makes a request to get estimates and begin polling, keeping track of the poll
     * token in component state.
     * It then disconnects polling upon componentWillUnmount. If the hook is unmounted
     * while waiting for `getGasFeeEstimatesAndStartPolling` to resolve, the `_isMounted`
     * flag ensures that a call to disconnect happens after promise resolution.
     */


    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(pollingToken => {
      if (this._isMounted) {
        (0, _actions.addPollingTokenToAppState)(pollingToken);
        this.setState({
          pollingToken
        });
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });
    window.addEventListener('beforeunload', this._beforeUnloadForGasPolling);
  }

  componentWillUnmount() {
    this._beforeUnloadForGasPolling();

    this._removeBeforeUnload();
  }

  render() {
    const {
      t
    } = this.context;
    const {
      fromName,
      fromAddress,
      toName,
      toAddress,
      toEns,
      toNickname,
      methodData,
      title,
      hideSubtitle,
      tokenAddress,
      contentComponent,
      onEdit,
      nonce,
      customNonceValue,
      unapprovedTxCount,
      type,
      hideSenderToRecipient,
      showAccountInHeader,
      txData,
      gasIsLoading,
      gasFeeIsCustom,
      nativeCurrency,
      hardwareWalletRequiresConnection,
      image,
      isApprovalOrRejection,
      assetStandard
    } = this.props;
    const {
      submitting,
      submitError,
      submitWarning,
      ethGasPriceWarning,
      editingGas,
      userAcknowledgedGasMissing
    } = this.state;
    const {
      name
    } = methodData;
    const {
      valid,
      errorKey
    } = this.getErrorKey();
    const hasSimulationError = Boolean(txData.simulationFails);
    const renderSimulationFailureWarning = hasSimulationError && !userAcknowledgedGasMissing;
    const {
      totalTx,
      positionOfCurrentTx,
      nextTxId,
      prevTxId,
      showNavigation,
      firstTx,
      lastTx,
      ofText,
      requestsWaitingText
    } = this.getNavigateTxData();
    let functionType;

    if (txData.type === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION && txData.origin !== 'metamask') {
      functionType = (0, _metrics.getMethodName)(name);
    }

    if (!functionType) {
      if (type) {
        functionType = (0, _transactions.getTransactionTypeTitle)(t, type, nativeCurrency);
      } else {
        functionType = t('contractInteraction');
      }
    }

    return /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_confirmPageContainer.default, {
      fromName: fromName,
      fromAddress: fromAddress,
      showAccountInHeader: showAccountInHeader,
      toName: toName,
      toAddress: toAddress,
      toEns: toEns,
      toNickname: toNickname,
      showEdit: Boolean(onEdit),
      action: functionType,
      title: title,
      image: image,
      titleComponent: this.renderTitleComponent(),
      subtitleComponent: this.renderSubtitleComponent(),
      hideSubtitle: hideSubtitle,
      detailsComponent: this.renderDetails(),
      dataComponent: this.renderData(functionType),
      dataHexComponent: this.renderDataHex(functionType),
      contentComponent: contentComponent,
      nonce: customNonceValue || nonce,
      unapprovedTxCount: unapprovedTxCount,
      tokenAddress: tokenAddress,
      errorMessage: submitError,
      errorKey: errorKey,
      hasSimulationError: hasSimulationError,
      warning: submitWarning,
      totalTx: totalTx,
      positionOfCurrentTx: positionOfCurrentTx,
      nextTxId: nextTxId,
      prevTxId: prevTxId,
      showNavigation: showNavigation,
      onNextTx: txId => this.handleNextTx(txId),
      firstTx: firstTx,
      lastTx: lastTx,
      ofText: ofText,
      requestsWaitingText: requestsWaitingText,
      disabled: renderSimulationFailureWarning || !valid || submitting || hardwareWalletRequiresConnection || gasIsLoading && !gasFeeIsCustom,
      onEdit: () => this.handleEdit(),
      onCancelAll: () => this.handleCancelAll(),
      onCancel: () => this.handleCancel(),
      onSubmit: () => this.handleSubmit(),
      hideSenderToRecipient: hideSenderToRecipient,
      origin: txData.origin,
      ethGasPriceWarning: ethGasPriceWarning,
      editingGas: editingGas,
      handleCloseEditGas: () => this.handleCloseEditGas(),
      currentTransaction: txData,
      supportsEIP1559V2: this.supportsEIP1559V2,
      nativeCurrency: nativeCurrency,
      isApprovalOrRejection: isApprovalOrRejection,
      assetStandard: assetStandard
    }));
  }

}

exports.default = ConfirmTransactionBase;

_defineProperty(ConfirmTransactionBase, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(ConfirmTransactionBase, "propTypes", {
  // react-router props
  history: _propTypes.default.object,
  // Redux props
  balance: _propTypes.default.string,
  cancelTransaction: _propTypes.default.func,
  cancelAllTransactions: _propTypes.default.func,
  clearConfirmTransaction: _propTypes.default.func,
  conversionRate: _propTypes.default.number,
  fromAddress: _propTypes.default.string,
  fromName: _propTypes.default.string,
  hexTransactionAmount: _propTypes.default.string,
  hexMinimumTransactionFee: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string,
  hexTransactionTotal: _propTypes.default.string,
  methodData: _propTypes.default.object,
  nonce: _propTypes.default.string,
  useNonceField: _propTypes.default.bool,
  customNonceValue: _propTypes.default.string,
  updateCustomNonce: _propTypes.default.func,
  sendTransaction: _propTypes.default.func,
  showTransactionConfirmedModal: _propTypes.default.func,
  showRejectTransactionsConfirmationModal: _propTypes.default.func,
  toAddress: _propTypes.default.string,
  tokenData: _propTypes.default.object,
  tokenProps: _propTypes.default.object,
  toName: _propTypes.default.string,
  toEns: _propTypes.default.string,
  toNickname: _propTypes.default.string,
  transactionStatus: _propTypes.default.string,
  txData: _propTypes.default.object,
  unapprovedTxCount: _propTypes.default.number,
  currentNetworkUnapprovedTxs: _propTypes.default.object,
  customGas: _propTypes.default.object,
  // Component props
  actionKey: _propTypes.default.string,
  contentComponent: _propTypes.default.node,
  dataComponent: _propTypes.default.node,
  dataHexComponent: _propTypes.default.node,
  hideData: _propTypes.default.bool,
  hideSubtitle: _propTypes.default.bool,
  tokenAddress: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  dappProposedTokenAmount: _propTypes.default.string,
  currentTokenBalance: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  subtitleComponent: _propTypes.default.node,
  title: _propTypes.default.string,
  image: _propTypes.default.string,
  type: _propTypes.default.string,
  getNextNonce: _propTypes.default.func,
  nextNonce: _propTypes.default.number,
  tryReverseResolveAddress: _propTypes.default.func.isRequired,
  hideSenderToRecipient: _propTypes.default.bool,
  showAccountInHeader: _propTypes.default.bool,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  isEthGasPrice: _propTypes.default.bool,
  noGasPrice: _propTypes.default.bool,
  setDefaultHomeActiveTabName: _propTypes.default.func,
  primaryTotalTextOverride: _propTypes.default.string,
  secondaryTotalTextOverride: _propTypes.default.string,
  gasIsLoading: _propTypes.default.bool,
  primaryTotalTextOverrideMaxAmount: _propTypes.default.string,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  maxFeePerGas: _propTypes.default.string,
  maxPriorityFeePerGas: _propTypes.default.string,
  baseFeePerGas: _propTypes.default.string,
  isMainnet: _propTypes.default.bool,
  gasFeeIsCustom: _propTypes.default.bool,
  showLedgerSteps: _propTypes.default.bool.isRequired,
  nativeCurrency: _propTypes.default.string,
  supportsEIP1559: _propTypes.default.bool,
  hardwareWalletRequiresConnection: _propTypes.default.bool,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  eip1559V2Enabled: _propTypes.default.bool,
  showBuyModal: _propTypes.default.func,
  isBuyableChain: _propTypes.default.bool,
  isApprovalOrRejection: _propTypes.default.bool,
  assetStandard: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.container.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../send/send.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js","./confirm-transaction-base.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-base\confirm-transaction-base.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapDispatchToProps = exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _actions = require("../../store/actions");

var _send = require("../send/send.utils");

var _util = require("../../helpers/utils/util");

var _selectors = require("../../selectors");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _transaction = require("../../../shared/modules/transaction.utils");

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

var _app = require("../../ducks/app/app");

var _transactions = require("../../helpers/utils/transactions.util");

var _gas = require("../../../shared/constants/gas");

var _transaction2 = require("../../../shared/constants/transaction");

var _stringUtils = require("../../../shared/modules/string-utils");

var _tokenUtil = require("../../helpers/utils/token-util");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _confirmTransactionBase = _interopRequireDefault(require("./confirm-transaction-base.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let customNonceValue = '';

const customNonceMerge = txData => customNonceValue ? { ...txData,
  customNonceValue
} : txData;

const mapStateToProps = (state, ownProps) => {
  var _identities$toAddress, _tokenList$toAddress$, _toAddress, _allCollectibleContra, _allCollectibleContra2;

  const {
    toAddress: propsToAddress,
    customTxParamsData,
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id: paramsTransactionId
  } = params;
  const isMainnet = (0, _selectors.getIsMainnet)(state);
  const isGasEstimatesLoading = (0, _metamask.getIsGasEstimatesLoading)(state);
  const gasLoadingAnimationIsShowing = (0, _app.getGasLoadingAnimationIsShowing)(state);
  const isBuyableChain = (0, _selectors.getIsBuyableChain)(state);
  const {
    confirmTransaction,
    metamask
  } = state;
  const {
    conversionRate,
    identities,
    addressBook,
    network,
    unapprovedTxs,
    nextNonce,
    allCollectibleContracts,
    selectedAddress,
    provider: {
      chainId
    }
  } = metamask;
  const {
    tokenData,
    txData,
    tokenProps,
    nonce
  } = confirmTransaction;
  const {
    txParams = {},
    id: transactionId,
    type
  } = txData;
  const txId = transactionId || Number(paramsTransactionId);
  const transaction = (0, _selectors.getUnapprovedTransaction)(state, txId);
  const {
    from: fromAddress,
    to: txParamsToAddress,
    gasPrice,
    gas: gasLimit,
    value: amount,
    data
  } = transaction && transaction.txParams || txParams;
  const accounts = (0, _selectors.getMetaMaskAccounts)(state);
  const transactionData = (0, _transaction.parseStandardTokenTransactionData)(data);
  const tokenToAddress = (0, _tokenUtil.getTokenAddressParam)(transactionData);
  const {
    balance
  } = accounts[fromAddress];
  const {
    name: fromName
  } = identities[fromAddress];
  let toAddress = txParamsToAddress;

  if (type !== _transaction2.TRANSACTION_TYPES.SIMPLE_SEND) {
    toAddress = propsToAddress || tokenToAddress || txParamsToAddress;
  }

  const tokenList = (0, _selectors.getTokenList)(state);
  const toName = ((_identities$toAddress = identities[toAddress]) === null || _identities$toAddress === void 0 ? void 0 : _identities$toAddress.name) || ((_tokenList$toAddress$ = tokenList[(_toAddress = toAddress) === null || _toAddress === void 0 ? void 0 : _toAddress.toLowerCase()]) === null || _tokenList$toAddress$ === void 0 ? void 0 : _tokenList$toAddress$.name) || (0, _util.shortenAddress)((0, _hexstringUtils.toChecksumHexAddress)(toAddress));
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(toAddress);
  const addressBookObject = addressBook && addressBook[chainId] && addressBook[chainId][checksummedAddress];
  const toEns = (0, _selectors.getEnsResolutionByAddress)(state, checksummedAddress);
  const toNickname = addressBookObject ? addressBookObject.name : '';
  const transactionStatus = transaction ? transaction.status : '';
  const supportsEIP1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state) && !(0, _transactions.isLegacyTransaction)(txParams);
  const {
    hexTransactionAmount,
    hexMinimumTransactionFee,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    gasEstimationObject
  } = (0, _selectors.transactionFeeSelector)(state, transaction);
  const currentNetworkUnapprovedTxs = Object.keys(unapprovedTxs).filter(key => (0, _transaction.transactionMatchesNetwork)(unapprovedTxs[key], chainId, network)).reduce((acc, key) => ({ ...acc,
    [key]: unapprovedTxs[key]
  }), {});
  const unapprovedTxCount = (0, _util.valuesFor)(currentNetworkUnapprovedTxs).length;
  const insufficientBalance = !(0, _send.isBalanceSufficient)({
    amount,
    gasTotal: (0, _transactionsControllerUtils.calcGasTotal)(gasLimit, gasPrice),
    balance,
    conversionRate
  });
  const methodData = (0, _selectors.getKnownMethodData)(state, data) || {};
  const fullTxData = (0, _selectors.getFullTxData)(state, txId, customTxParamsData);
  const isCollectibleTransfer = Boolean(allCollectibleContracts === null || allCollectibleContracts === void 0 ? void 0 : (_allCollectibleContra = allCollectibleContracts[selectedAddress]) === null || _allCollectibleContra === void 0 ? void 0 : (_allCollectibleContra2 = _allCollectibleContra[chainId]) === null || _allCollectibleContra2 === void 0 ? void 0 : _allCollectibleContra2.find(contract => {
    return (0, _stringUtils.isEqualCaseInsensitive)(contract.address, fullTxData.txParams.to);
  }));
  customNonceValue = (0, _selectors.getCustomNonceValue)(state);
  const isEthGasPrice = (0, _selectors.getIsEthGasPriceFetched)(state);
  const noGasPrice = !supportsEIP1559 && (0, _selectors.getNoGasPriceFetched)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  const gasFeeIsCustom = fullTxData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(fullTxData);
  const fromAddressIsLedger = (0, _metamask.isAddressLedger)(state, fromAddress);
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, fromAddress);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state);
  const eip1559V2Enabled = (0, _selectors.getEIP1559V2Enabled)(state);
  return {
    balance,
    fromAddress,
    fromName,
    toAddress,
    toEns,
    toName,
    toNickname,
    hexTransactionAmount,
    hexMinimumTransactionFee,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    txData: fullTxData,
    tokenData,
    methodData,
    tokenProps,
    conversionRate,
    transactionStatus,
    nonce,
    unapprovedTxs,
    unapprovedTxCount,
    currentNetworkUnapprovedTxs,
    customGas: {
      gasLimit,
      gasPrice
    },
    advancedInlineGasShown: (0, _selectors.getAdvancedInlineGasShown)(state),
    useNonceField: (0, _selectors.getUseNonceField)(state),
    customNonceValue,
    insufficientBalance,
    hideSubtitle: !(0, _selectors.getShouldShowFiat)(state) && !isCollectibleTransfer,
    hideFiatConversion: !(0, _selectors.getShouldShowFiat)(state),
    type,
    nextNonce,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    isMainnet,
    isEthGasPrice,
    noGasPrice,
    supportsEIP1559,
    gasIsLoading: isGasEstimatesLoading || gasLoadingAnimationIsShowing,
    useNativeCurrencyAsPrimaryCurrency,
    maxFeePerGas: gasEstimationObject.maxFeePerGas,
    maxPriorityFeePerGas: gasEstimationObject.maxPriorityFeePerGas,
    baseFeePerGas: gasEstimationObject.baseFeePerGas,
    gasFeeIsCustom,
    showLedgerSteps: fromAddressIsLedger,
    nativeCurrency,
    hardwareWalletRequiresConnection,
    isMultiLayerFeeNetwork,
    chainId,
    eip1559V2Enabled,
    isBuyableChain
  };
};

const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    },
    updateCustomNonce: value => {
      customNonceValue = value;
      dispatch((0, _actions.updateCustomNonce)(value));
    },
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showTransactionConfirmedModal: ({
      onSubmit
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'TRANSACTION_CONFIRMED',
        onSubmit
      }));
    },
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount
      }));
    },
    cancelTransaction: ({
      id
    }) => dispatch((0, _actions.cancelTx)({
      id
    })),
    cancelAllTransactions: txList => dispatch((0, _actions.cancelTxs)(txList)),
    sendTransaction: txData => dispatch((0, _actions.updateAndApproveTx)(customNonceMerge(txData))),
    getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
    setDefaultHomeActiveTabName: tabName => dispatch((0, _actions.setDefaultHomeActiveTabName)(tabName)),
    updateTransactionGasFees: gasFees => {
      dispatch((0, _metamask.updateGasFees)({ ...gasFees,
        expectHexWei: true
      }));
    },
    showBuyModal: () => dispatch((0, _actions.showModal)({
      name: 'DEPOSIT_ETHER'
    }))
  };
};

exports.mapDispatchToProps = mapDispatchToProps;

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    txData,
    unapprovedTxs
  } = stateProps;
  const {
    cancelAllTransactions: dispatchCancelAllTransactions,
    updateTransactionGasFees: dispatchUpdateTransactionGasFees,
    ...otherDispatchProps
  } = dispatchProps;
  return { ...stateProps,
    ...otherDispatchProps,
    ...ownProps,
    cancelAllTransactions: () => dispatchCancelAllTransactions((0, _util.valuesFor)(unapprovedTxs)),
    updateGasAndCalculate: ({
      gasLimit,
      gasPrice
    }) => {
      dispatchUpdateTransactionGasFees({
        gasLimit,
        gasPrice,
        transaction: txData
      });
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_confirmTransactionBase.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js", {"./confirm-transaction-base.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-base\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmTransactionBase.default;
  }
});

var _confirmTransactionBase = _interopRequireDefault(require("./confirm-transaction-base.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\transaction-alerts\\index.js", {"./transaction-alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\transaction-alerts\\transaction-alerts.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-base\transaction-alerts\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionAlerts.default;
  }
});

var _transactionAlerts = _interopRequireDefault(require("./transaction-alerts"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-base\\transaction-alerts\\transaction-alerts.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors/transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\transactions.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-base\transaction-alerts\transaction-alerts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _gas = require("../../../../shared/constants/gas");

var _transactions = require("../../../selectors/transactions");

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _transaction = require("../../../../shared/constants/transaction");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TransactionAlerts = ({
  userAcknowledgedGasMissing,
  setUserAcknowledgedGasMissing,
  isBuyableChain,
  nativeCurrency,
  networkName,
  showBuyModal,
  type
}) => {
  const {
    balanceError,
    estimateUsed,
    hasSimulationError,
    supportsEIP1559V2,
    isNetworkBusy
  } = (0, _gasFee.useGasFeeContext)();
  const pendingTransactions = (0, _reactRedux.useSelector)(_transactions.submittedPendingTransactionsSelector);
  const t = (0, _useI18nContext.useI18nContext)();

  if (!supportsEIP1559V2) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-alerts"
  }, hasSimulationError && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: t('simulationErrorMessageV2'),
    useIcon: true,
    iconFillColor: "var(--color-error-default)",
    type: "danger",
    primaryActionV2: userAcknowledgedGasMissing === true ? undefined : {
      label: t('proceedWithTransaction'),
      onClick: setUserAcknowledgedGasMissing
    }
  }), (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0 && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement(_typography.default, {
      align: "left",
      className: "transaction-alerts__pending-transactions",
      margin: 0,
      tag: _designSystem.TYPOGRAPHY.Paragraph,
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("strong", null, (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) === 1 ? t('pendingTransactionSingle', [pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length]) : t('pendingTransactionMultiple', [pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length])), ' ', t('pendingTransactionInfo'), t('learnCancelSpeeedup', [/*#__PURE__*/_react.default.createElement("a", {
      key: "cancelSpeedUpInfo",
      href: _zendeskUrl.default.SPEEDUP_CANCEL,
      rel: "noopener noreferrer",
      target: "_blank"
    }, t('cancelSpeedUp'))])),
    useIcon: true,
    iconFillColor: "var(--color-warning-default)",
    type: "warning"
  }), balanceError && type === _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: isBuyableChain ? /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      align: "left"
    }, t('insufficientCurrencyBuyOrDeposit', [nativeCurrency, networkName, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "inline",
      className: "confirm-page-container-content__link",
      onClick: showBuyModal,
      key: `${nativeCurrency}-buy-button`
    }, t('buyAsset', [nativeCurrency]))])) : /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      align: "left"
    }, t('insufficientCurrencyDeposit', [nativeCurrency, networkName])),
    useIcon: true,
    iconFillColor: "var(--color-error-default)",
    type: "danger"
  }) : null, estimateUsed === _gas.PRIORITY_LEVELS.LOW && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    dataTestId: "low-gas-fee-alert",
    message: /*#__PURE__*/_react.default.createElement(_typography.default, {
      align: "left",
      margin: 0,
      tag: _designSystem.TYPOGRAPHY.Paragraph,
      variant: _designSystem.TYPOGRAPHY.H7
    }, t('lowPriorityMessage')),
    useIcon: true,
    iconFillColor: "var(--color-warning-default)",
    type: "warning"
  }), isNetworkBusy ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement(_typography.default, {
      align: "left",
      margin: 0,
      tag: _designSystem.TYPOGRAPHY.Paragraph,
      variant: _designSystem.TYPOGRAPHY.H7
    }, t('networkIsBusy')),
    iconFillColor: "var(--color-warning-default)",
    type: "warning",
    useIcon: true
  }) : null);
};

TransactionAlerts.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool,
  setUserAcknowledgedGasMissing: _propTypes.default.func,
  nativeCurrency: _propTypes.default.string,
  networkName: _propTypes.default.string,
  showBuyModal: _propTypes.default.func,
  type: _propTypes.default.string,
  isBuyableChain: _propTypes.default.bool
};
var _default = TransactionAlerts;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\confirm-transaction-switch.component.js", {"../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-switch\confirm-transaction-switch.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _routes = require("../../helpers/constants/routes");

var _app = require("../../../shared/constants/app");

var _transaction = require("../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmTransactionSwitch extends _react.Component {
  redirectToTransaction() {
    const {
      txData
    } = this.props;
    const {
      id,
      txParams: {
        data
      } = {},
      type
    } = txData;

    if (type === _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT) {
      const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_DEPLOY_CONTRACT_PATH}`;
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname
        }
      });
    }

    if (type === _transaction.TRANSACTION_TYPES.SIMPLE_SEND) {
      const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_SEND_ETHER_PATH}`;
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname
        }
      });
    }

    if (data) {
      switch (type) {
        case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_SEND_TOKEN_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }

        case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_APPROVE_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }

        case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }

        case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_TRANSFER_FROM_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }

        case _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_SAFE_TRANSFER_FROM_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }

        default:
          {
            const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_TOKEN_METHOD_PATH}`;
            return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
              to: {
                pathname
              }
            });
          }
      }
    }

    const pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}${_routes.CONFIRM_SEND_ETHER_PATH}`;
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname
      }
    });
  }

  render() {
    const {
      txData
    } = this.props;

    if (txData.txParams) {
      return this.redirectToTransaction();
    } else if (txData.msgParams) {
      let pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${txData.id}${_routes.SIGNATURE_REQUEST_PATH}`;

      if (txData.type === _app.MESSAGE_TYPE.ETH_DECRYPT) {
        pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${txData.id}${_routes.DECRYPT_MESSAGE_REQUEST_PATH}`;
      } else if (txData.type === _app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY) {
        pathname = `${_routes.CONFIRM_TRANSACTION_ROUTE}/${txData.id}${_routes.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`;
      }

      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname
        }
      });
    }

    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }

}

exports.default = ConfirmTransactionSwitch;

_defineProperty(ConfirmTransactionSwitch, "propTypes", {
  txData: _propTypes.default.object
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\confirm-transaction-switch.container.js", {"../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./confirm-transaction-switch.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\confirm-transaction-switch.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-switch\confirm-transaction-switch.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _confirmTransactionSwitch = _interopRequireDefault(require("./confirm-transaction-switch.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      unapprovedTxs
    }
  } = state;
  const {
    match: {
      params = {},
      url
    }
  } = ownProps;
  const urlId = (url === null || url === void 0 ? void 0 : url.match(/\d+/u)) && (url === null || url === void 0 ? void 0 : url.match(/\d+/u)[0]);
  const {
    id: paramsId
  } = params;
  const transactionId = paramsId || urlId;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const totalUnconfirmed = unconfirmedTransactions.length;
  const transaction = totalUnconfirmed ? unapprovedTxs[transactionId] || unconfirmedTransactions[0] : {};
  return {
    txData: transaction
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmTransactionSwitch.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\index.js", {"./confirm-transaction-switch.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\confirm-transaction-switch.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction-switch\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmTransactionSwitch = _interopRequireDefault(require("./confirm-transaction-switch.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _confirmTransactionSwitch.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\conf-tx.js", {"../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../components/app/signature-request":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\index.js","../../components/app/signature-request-original":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\index.js","../../components/app/signature-request-siwe":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\index.js","../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/utils/tx-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction\conf-tx.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _loglevel = _interopRequireDefault(require("loglevel"));

var actions = _interopRequireWildcard(require("../../store/actions"));

var _txHelper = _interopRequireDefault(require("../../helpers/utils/tx-helper"));

var _signatureRequest = _interopRequireDefault(require("../../components/app/signature-request"));

var _signatureRequestSiwe = _interopRequireDefault(require("../../components/app/signature-request-siwe"));

var _signatureRequestOriginal = _interopRequireDefault(require("../../components/app/signature-request-original"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _history = require("../../ducks/history/history");

var _app = require("../../../shared/constants/app");

var _transaction = require("../../../shared/constants/transaction");

var _send = require("../../ducks/send");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function mapStateToProps(state) {
  const {
    metamask,
    appState
  } = state;
  const {
    unapprovedMsgCount,
    unapprovedPersonalMsgCount,
    unapprovedTypedMessagesCount
  } = metamask;
  const {
    txId
  } = appState;
  return {
    identities: state.metamask.identities,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    unapprovedTxs: state.metamask.unapprovedTxs,
    unapprovedMsgs: state.metamask.unapprovedMsgs,
    unapprovedPersonalMsgs: state.metamask.unapprovedPersonalMsgs,
    unapprovedTypedMessages: state.metamask.unapprovedTypedMessages,
    index: txId,
    warning: state.appState.warning,
    network: state.metamask.network,
    chainId: state.metamask.provider.chainId,
    currentCurrency: state.metamask.currentCurrency,
    blockGasLimit: state.metamask.currentBlockGasLimit,
    unapprovedMsgCount,
    unapprovedPersonalMsgCount,
    unapprovedTypedMessagesCount,
    sendTo: (0, _send.getSendTo)(state),
    currentNetworkTxList: state.metamask.currentNetworkTxList
  };
}

class ConfirmTxScreen extends _react.Component {
  getUnapprovedMessagesTotal() {
    const {
      unapprovedMsgCount = 0,
      unapprovedPersonalMsgCount = 0,
      unapprovedTypedMessagesCount = 0
    } = this.props;
    return unapprovedTypedMessagesCount + unapprovedMsgCount + unapprovedPersonalMsgCount;
  }

  getTxData() {
    const {
      network,
      index,
      unapprovedTxs,
      unapprovedMsgs,
      unapprovedPersonalMsgs,
      unapprovedTypedMessages,
      match: {
        params: {
          id: transactionId
        } = {}
      },
      chainId
    } = this.props;
    const unconfTxList = (0, _txHelper.default)(unapprovedTxs, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedTypedMessages, network, chainId);

    _loglevel.default.info(`rendering a combined ${unconfTxList.length} unconf msgs & txs`);

    return transactionId ? unconfTxList.find(({
      id
    }) => `${id}` === transactionId) : unconfTxList[index];
  }

  signatureSelect(txData) {
    const {
      type,
      msgParams: {
        version,
        siwe
      }
    } = txData; // Temporarily direct only v3 and v4 requests to new code.

    if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA && (version === 'V3' || version === 'V4')) {
      return _signatureRequest.default;
    }

    if (false && siwe !== null && siwe !== void 0 && siwe.isSIWEMessage) {
      return _signatureRequestSiwe.default;
    }

    return _signatureRequestOriginal.default;
  }

  signMessage(msgData, event) {
    _loglevel.default.info('conf-tx.js: signing message');

    const params = msgData.msgParams;
    params.metamaskId = msgData.id;
    this.stopPropagation(event);
    return this.props.dispatch(actions.signMsg(params));
  }

  stopPropagation(event) {
    if (event !== null && event !== void 0 && event.stopPropagation) {
      event.stopPropagation();
    }
  }

  signPersonalMessage(msgData, event) {
    _loglevel.default.info('conf-tx.js: signing personal message');

    const params = msgData.msgParams;
    params.metamaskId = msgData.id;
    this.stopPropagation(event);
    return this.props.dispatch(actions.signPersonalMsg(params));
  }

  signTypedMessage(msgData, event) {
    _loglevel.default.info('conf-tx.js: signing typed message');

    const params = msgData.msgParams;
    params.metamaskId = msgData.id;
    this.stopPropagation(event);
    return this.props.dispatch(actions.signTypedMsg(params));
  }

  cancelMessage(msgData, event) {
    _loglevel.default.info('canceling message');

    this.stopPropagation(event);
    return this.props.dispatch(actions.cancelMsg(msgData));
  }

  cancelPersonalMessage(msgData, event) {
    _loglevel.default.info('canceling personal message');

    this.stopPropagation(event);
    return this.props.dispatch(actions.cancelPersonalMsg(msgData));
  }

  cancelTypedMessage(msgData, event) {
    _loglevel.default.info('canceling typed message');

    this.stopPropagation(event);
    return this.props.dispatch(actions.cancelTypedMsg(msgData));
  }

  componentDidMount() {
    const {
      unapprovedTxs = {},
      history,
      mostRecentOverviewPage,
      network,
      chainId,
      sendTo
    } = this.props;
    const unconfTxList = (0, _txHelper.default)(unapprovedTxs, {}, {}, {}, network, chainId);

    if (unconfTxList.length === 0 && !sendTo && this.getUnapprovedMessagesTotal() === 0) {
      history.push(mostRecentOverviewPage);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      unapprovedTxs = {},
      network,
      chainId,
      currentNetworkTxList,
      sendTo,
      history,
      match: {
        params: {
          id: transactionId
        } = {}
      },
      mostRecentOverviewPage
    } = this.props;
    let prevTx;

    if (transactionId) {
      prevTx = currentNetworkTxList.find(({
        id
      }) => `${id}` === transactionId);
    } else {
      const {
        index: prevIndex,
        unapprovedTxs: prevUnapprovedTxs
      } = prevProps;
      const prevUnconfTxList = (0, _txHelper.default)(prevUnapprovedTxs, {}, {}, {}, network, chainId);
      const prevTxData = prevUnconfTxList[prevIndex] || {};
      prevTx = currentNetworkTxList.find(({
        id
      }) => id === prevTxData.id) || {};
    }

    const unconfTxList = (0, _txHelper.default)(unapprovedTxs, {}, {}, {}, network, chainId);

    if (prevTx && prevTx.status === _transaction.TRANSACTION_STATUSES.DROPPED) {
      this.props.dispatch(actions.showModal({
        name: 'TRANSACTION_CONFIRMED',
        onSubmit: () => history.push(mostRecentOverviewPage)
      }));
      return;
    }

    if (unconfTxList.length === 0 && !sendTo && this.getUnapprovedMessagesTotal() === 0) {
      this.props.history.push(mostRecentOverviewPage);
    }
  }

  render() {
    const {
      currentCurrency,
      blockGasLimit
    } = this.props;
    const txData = this.getTxData() || {};
    const {
      msgParams
    } = txData;

    _loglevel.default.debug('msgParams detected, rendering pending msg');

    if (!msgParams) {
      return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
    }

    const SigComponent = this.signatureSelect(txData);
    return /*#__PURE__*/_react.default.createElement(SigComponent, {
      txData: txData,
      key: txData.id,
      identities: this.props.identities,
      currentCurrency: currentCurrency,
      blockGasLimit: blockGasLimit,
      signMessage: this.signMessage.bind(this, txData),
      signPersonalMessage: this.signPersonalMessage.bind(this, txData),
      signTypedMessage: this.signTypedMessage.bind(this, txData),
      cancelMessage: this.cancelMessage.bind(this, txData),
      cancelPersonalMessage: this.cancelPersonalMessage.bind(this, txData),
      cancelTypedMessage: this.cancelTypedMessage.bind(this, txData)
    });
  }

}

_defineProperty(ConfirmTxScreen, "propTypes", {
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  unapprovedMsgCount: _propTypes.default.number,
  unapprovedPersonalMsgCount: _propTypes.default.number,
  unapprovedTypedMessagesCount: _propTypes.default.number,
  network: _propTypes.default.string,
  chainId: _propTypes.default.string,
  index: _propTypes.default.number,
  unapprovedTxs: _propTypes.default.object,
  unapprovedMsgs: _propTypes.default.object,
  unapprovedPersonalMsgs: _propTypes.default.object,
  unapprovedTypedMessages: _propTypes.default.object,
  match: _propTypes.default.shape({
    params: _propTypes.default.shape({
      id: _propTypes.default.string
    })
  }),
  currentNetworkTxList: _propTypes.default.array,
  currentCurrency: _propTypes.default.string,
  blockGasLimit: _propTypes.default.string,
  history: _propTypes.default.object,
  identities: _propTypes.default.object,
  dispatch: _propTypes.default.func.isRequired,
  sendTo: _propTypes.default.string
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(ConfirmTxScreen);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-token-transaction-switch.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../hooks/useAssetDetails":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useAssetDetails.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../confirm-approve":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-approve\\index.js","../confirm-send-token":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-token\\index.js","../confirm-token-transaction-base":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\index.js","../confirm-transaction-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction\confirm-token-transaction-switch.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmTokenTransactionSwitch;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../helpers/constants/routes");

var _selectors = require("../../selectors");

var _confirmApprove = _interopRequireDefault(require("../confirm-approve"));

var _confirmSendToken = _interopRequireDefault(require("../confirm-send-token"));

var _confirmTokenTransactionBase = _interopRequireDefault(require("../confirm-token-transaction-base"));

var _confirmTransactionSwitch = _interopRequireDefault(require("../confirm-transaction-switch"));

var _useAssetDetails = require("../../hooks/useAssetDetails");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmTokenTransactionSwitch({
  transaction
}) {
  const {
    txParams: {
      data,
      to: tokenAddress,
      from: userAddress
    } = {}
  } = transaction;
  const {
    assetStandard,
    assetName,
    userBalance,
    tokenSymbol,
    decimals,
    tokenImage,
    tokenAmount,
    tokenId,
    toAddress
  } = (0, _useAssetDetails.useAssetDetails)(tokenAddress, userAddress, data);
  const {
    ethTransactionTotal,
    fiatTransactionTotal,
    hexTransactionTotal,
    hexMaximumTransactionFee
  } = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, transaction));
  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_APPROVE_PATH}`,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmApprove.default, {
      assetStandard: assetStandard,
      assetName: assetName,
      userBalance: userBalance,
      tokenSymbol: tokenSymbol,
      decimals: decimals,
      tokenImage: tokenImage,
      tokenAmount: tokenAmount,
      tokenId: tokenId,
      userAddress: userAddress,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      transaction: transaction,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmApprove.default, {
      isSetApproveForAll: true,
      assetStandard: assetStandard,
      assetName: assetName,
      userBalance: userBalance,
      tokenSymbol: tokenSymbol,
      decimals: decimals,
      tokenImage: tokenImage,
      tokenAmount: tokenAmount,
      tokenId: tokenId,
      userAddress: userAddress,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      transaction: transaction,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_TRANSFER_FROM_PATH}`,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmTokenTransactionBase.default, {
      assetStandard: assetStandard,
      assetName: assetName,
      userBalance: userBalance,
      tokenSymbol: tokenSymbol,
      decimals: decimals,
      image: tokenImage,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      tokenAmount: tokenAmount,
      tokenId: tokenId,
      userAddress: userAddress,
      transaction: transaction,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexMaximumTransactionFee: hexMaximumTransactionFee
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_SAFE_TRANSFER_FROM_PATH}`,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmTokenTransactionBase.default, {
      assetStandard: assetStandard,
      assetName: assetName,
      userBalance: userBalance,
      tokenSymbol: tokenSymbol,
      decimals: decimals,
      image: tokenImage,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      tokenAmount: tokenAmount,
      tokenId: tokenId,
      userAddress: userAddress,
      transaction: transaction,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexMaximumTransactionFee: hexMaximumTransactionFee
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_SEND_TOKEN_PATH}`,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmSendToken.default, {
      assetStandard: assetStandard,
      assetName: assetName,
      tokenSymbol: tokenSymbol,
      image: tokenImage,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      tokenAmount: tokenAmount,
      tokenId: tokenId,
      transaction: transaction,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexMaximumTransactionFee: hexMaximumTransactionFee
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: "*",
    component: _confirmTransactionSwitch.default
  }));
}

ConfirmTokenTransactionSwitch.propTypes = {
  transaction: _propTypes.default.shape({
    origin: _propTypes.default.string,
    txParams: _propTypes.default.shape({
      data: _propTypes.default.string,
      to: _propTypes.default.string,
      from: _propTypes.default.string
    })
  })
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-transaction.component.js", {"../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../confirm-contract-interaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\index.js","../confirm-decrypt-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\index.js","../confirm-deploy-contract":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\index.js","../confirm-encryption-public-key":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\index.js","../confirm-send-ether":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-send-ether\\index.js","../confirm-transaction-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction-switch\\index.js","./conf-tx":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\conf-tx.js","./confirm-token-transaction-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-token-transaction-switch.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction\confirm-transaction.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _confirmTransactionSwitch = _interopRequireDefault(require("../confirm-transaction-switch"));

var _confirmContractInteraction = _interopRequireDefault(require("../confirm-contract-interaction"));

var _confirmSendEther = _interopRequireDefault(require("../confirm-send-ether"));

var _confirmDeployContract = _interopRequireDefault(require("../confirm-deploy-contract"));

var _confirmDecryptMessage = _interopRequireDefault(require("../confirm-decrypt-message"));

var _confirmEncryptionPublicKey = _interopRequireDefault(require("../confirm-encryption-public-key"));

var _routes = require("../../helpers/constants/routes");

var _actions = require("../../store/actions");

var _confirmTokenTransactionSwitch = _interopRequireDefault(require("./confirm-token-transaction-switch"));

var _confTx = _interopRequireDefault(require("./conf-tx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmTransaction extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "_beforeUnload", () => {
      this._isMounted = false;

      if (this.state.pollingToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(this.state.pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });

    this.state = {};
  }

  componentDidMount() {
    this._isMounted = true;
    const {
      totalUnapprovedCount = 0,
      sendTo,
      history,
      mostRecentOverviewPage,
      transaction: {
        txParams: {
          data
        } = {},
        origin
      } = {},
      getContractMethodData,
      transactionId,
      paramsTransactionId
    } = this.props;
    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(pollingToken => {
      if (this._isMounted) {
        this.setState({
          pollingToken
        });
        (0, _actions.addPollingTokenToAppState)(pollingToken);
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollingToken);
        (0, _actions.removePollingTokenFromAppState)(pollingToken);
      }
    });
    window.addEventListener('beforeunload', this._beforeUnload);

    if (!totalUnapprovedCount && !sendTo) {
      history.replace(mostRecentOverviewPage);
      return;
    }

    if (origin !== 'metamask') {
      getContractMethodData(data);
    }

    const txId = transactionId || paramsTransactionId;

    if (txId) {
      this.props.setTransactionToConfirm(txId);
    }
  }

  componentWillUnmount() {
    this._beforeUnload();

    window.removeEventListener('beforeunload', this._beforeUnload);
  }

  componentDidUpdate(prevProps) {
    const {
      setTransactionToConfirm,
      transaction: {
        txData: {
          txParams: {
            data
          } = {},
          origin
        } = {}
      },
      clearConfirmTransaction,
      getContractMethodData,
      paramsTransactionId,
      transactionId,
      history,
      mostRecentOverviewPage,
      totalUnapprovedCount,
      setDefaultHomeActiveTabName
    } = this.props;

    if (paramsTransactionId && transactionId && prevProps.paramsTransactionId !== paramsTransactionId) {
      clearConfirmTransaction();
      setTransactionToConfirm(paramsTransactionId);

      if (origin !== 'metamask') {
        getContractMethodData(data);
      }
    } else if (prevProps.transactionId && !transactionId && !totalUnapprovedCount) {
      setDefaultHomeActiveTabName('Activity').then(() => {
        history.replace(_routes.DEFAULT_ROUTE);
      });
    } else if (prevProps.transactionId && transactionId && prevProps.transactionId !== transactionId) {
      history.replace(mostRecentOverviewPage);
    }
  }

  render() {
    const {
      transactionId,
      paramsTransactionId,
      isTokenMethodAction,
      transaction
    } = this.props;
    const validTransactionId = transactionId && (!paramsTransactionId || paramsTransactionId === transactionId);

    if (isTokenMethodAction && validTransactionId) {
      return /*#__PURE__*/_react.default.createElement(_confirmTokenTransactionSwitch.default, {
        transaction: transaction
      });
    } // Show routes when state.confirmTransaction has been set and when either the ID in the params
    // isn't specified or is specified and matches the ID in state.confirmTransaction in order to
    // support URLs of /confirm-transaction or /confirm-transaction/<transactionId>


    return validTransactionId ? /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_DEPLOY_CONTRACT_PATH}`,
      component: _confirmDeployContract.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_SEND_ETHER_PATH}`,
      component: _confirmSendEther.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.CONFIRM_TOKEN_METHOD_PATH}`,
      component: _confirmContractInteraction.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.SIGNATURE_REQUEST_PATH}`,
      component: _confTx.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.DECRYPT_MESSAGE_REQUEST_PATH}`,
      component: _confirmDecryptMessage.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?${_routes.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`,
      component: _confirmEncryptionPublicKey.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "*",
      component: _confirmTransactionSwitch.default
    })) : /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }

}

exports.default = ConfirmTransaction;

_defineProperty(ConfirmTransaction, "contextTypes", {
  metricsEvent: _propTypes.default.func
});

_defineProperty(ConfirmTransaction, "propTypes", {
  history: _propTypes.default.object.isRequired,
  totalUnapprovedCount: _propTypes.default.number.isRequired,
  sendTo: _propTypes.default.string,
  setTransactionToConfirm: _propTypes.default.func,
  clearConfirmTransaction: _propTypes.default.func,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  transaction: _propTypes.default.object,
  getContractMethodData: _propTypes.default.func,
  transactionId: _propTypes.default.string,
  paramsTransactionId: _propTypes.default.string,
  isTokenMethodAction: _propTypes.default.bool,
  setDefaultHomeActiveTabName: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-transaction.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-transaction.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-transaction.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction\confirm-transaction.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _transactions = require("../../helpers/utils/transactions.util");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _history = require("../../ducks/history/history");

var _send = require("../../ducks/send");

var _confirmTransaction2 = _interopRequireDefault(require("./confirm-transaction.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      unapprovedTxs
    }
  } = state;
  const {
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id
  } = params;
  const sendTo = (0, _send.getSendTo)(state);
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const totalUnconfirmed = unconfirmedTransactions.length;
  const transaction = totalUnconfirmed ? unapprovedTxs[id] || unconfirmedTransactions[0] : {};
  const {
    id: transactionId,
    type
  } = transaction;
  return {
    totalUnapprovedCount: totalUnconfirmed,
    sendTo,
    unapprovedTxs,
    id,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    paramsTransactionId: id && String(id),
    transactionId: transactionId && String(transactionId),
    transaction,
    isTokenMethodAction: (0, _transactions.isTokenMethodAction)(type)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setTransactionToConfirm: transactionId => {
      dispatch((0, _confirmTransaction.setTransactionToConfirm)(transactionId));
    },
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    getContractMethodData: data => dispatch((0, _actions.getContractMethodData)(data)),
    setDefaultHomeActiveTabName: tabName => dispatch((0, _actions.setDefaultHomeActiveTabName)(tabName))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmTransaction2.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\index.js", {"./confirm-transaction.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-transaction\\confirm-transaction.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-transaction\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmTransaction = _interopRequireDefault(require("./confirm-transaction.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _confirmTransaction.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-footer\\confirmation-footer.js", {"../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\components\confirmation-footer\confirmation-footer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmationFooter;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmationFooter({
  onApprove,
  onCancel,
  approveText,
  cancelText,
  alerts
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-footer"
  }, alerts, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-footer__actions"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    onClick: onCancel
  }, cancelText), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: onApprove
  }, approveText)));
}

ConfirmationFooter.propTypes = {
  alerts: _propTypes.default.node,
  onApprove: _propTypes.default.func.isRequired,
  onCancel: _propTypes.default.func.isRequired,
  approveText: _propTypes.default.string.isRequired,
  cancelText: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-footer\\index.js", {"./confirmation-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-footer\\confirmation-footer.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\components\confirmation-footer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmationFooter.default;
  }
});

var _confirmationFooter = _interopRequireDefault(require("./confirmation-footer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\confirmation-network-switch.js", {"../../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../../components/ui/site-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-icon\\index.js","../../../../components/ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\components\confirmation-network-switch\confirmation-network-switch.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmationNetworkSwitch;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _box = _interopRequireDefault(require("../../../../components/ui/box"));

var _siteIcon = _interopRequireDefault(require("../../../../components/ui/site-icon"));

var _typography = _interopRequireDefault(require("../../../../components/ui/typography/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _network = require("../../../../../shared/constants/network");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ConfirmationNetworkSwitch({
  newNetwork
}) {
  const currentNetwork = (0, _reactRedux.useSelector)(state => ({
    nickname: state.metamask.provider.nickname,
    type: state.metamask.provider.type,
    chainId: state.metamask.provider.chainId
  }));
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "confirmation-network-switch",
    display: _designSystem.DISPLAY.FLEX,
    height: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    marginTop: 8
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "confirmation-network-switch__icon",
    display: _designSystem.DISPLAY.BLOCK
  }, currentNetwork.chainId in _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP ? /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
    icon: _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[currentNetwork.chainId],
    name: currentNetwork.nickname,
    size: 64
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-network-switch__unknown-icon"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-question fa-2x"
  })), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    align: _designSystem.TEXT_ALIGN.CENTER,
    boxProps: {
      display: _designSystem.DISPLAY.FLEX,
      justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
    }
  }, currentNetwork.nickname || _network.NETWORK_TO_NAME_MAP[currentNetwork.type])), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "confirmation-network-switch__center-icon",
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-right fa-lg confirmation-network-switch__check"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-network-switch__dashed-line"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "confirmation-network-switch__icon",
    display: _designSystem.DISPLAY.BLOCK
  }, newNetwork.chainId in _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP ? /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
    icon: _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[newNetwork.chainId],
    name: newNetwork.name,
    size: 64
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-network-switch__unknown-icon"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-question fa-2x"
  })), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    align: _designSystem.TEXT_ALIGN.CENTER,
    boxProps: {
      display: _designSystem.DISPLAY.FLEX,
      justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
    }
  }, newNetwork.name)));
}

ConfirmationNetworkSwitch.propTypes = {
  newNetwork: _propTypes.default.shape({
    chainId: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  })
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\index.js", {"./confirmation-network-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\confirmation-network-switch.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\components\confirmation-network-switch\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmationNetworkSwitch.default;
  }
});

var _confirmationNetworkSwitch = _interopRequireDefault(require("./confirmation-network-switch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\confirmation.js", {"../../components/app/metamask-template-renderer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\index.js","../../components/app/network-display/network-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\network-display.js","../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/callout":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\callout\\index.js","../../components/ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../hooks/useOriginMetadata":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useOriginMetadata.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./components/confirmation-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-footer\\index.js","./templates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\index.js","immer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\immer\\dist\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\confirmation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmationPage;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _lodash = require("lodash");

var _immer = require("immer");

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _metamaskTemplateRenderer = _interopRequireDefault(require("../../components/app/metamask-template-renderer"));

var _routes = require("../../helpers/constants/routes");

var _designSystem = require("../../helpers/constants/design-system");

var _useI18nContext = require("../../hooks/useI18nContext");

var _useOriginMetadata = require("../../hooks/useOriginMetadata");

var _selectors = require("../../selectors");

var _networkDisplay = _interopRequireDefault(require("../../components/app/network-display/network-display"));

var _callout = _interopRequireDefault(require("../../components/ui/callout"));

var _siteOrigin = _interopRequireDefault(require("../../components/ui/site-origin"));

var _confirmationFooter = _interopRequireDefault(require("./components/confirmation-footer"));

var _templates = require("./templates");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * a very simple reducer using produce from Immer to keep state manipulation
 * immutable and painless. This state is not stored in redux state because it
 * should persist only for the lifespan of the current session, and will only
 * be used on this page. Dismissing alerts for confirmations should persist
 * while the user pages back and forth between confirmations. However, if the
 * user closes the confirmation window and later reopens the extension they
 * should be displayed the alerts again.
 */
const alertStateReducer = (0, _immer.produce)((state, action) => {
  var _state$action$confirm;

  switch (action.type) {
    case 'dismiss':
      if (state !== null && state !== void 0 && (_state$action$confirm = state[action.confirmationId]) !== null && _state$action$confirm !== void 0 && _state$action$confirm[action.alertId]) {
        state[action.confirmationId][action.alertId].dismissed = true;
      }

      break;

    case 'set':
      if (!state[action.confirmationId]) {
        state[action.confirmationId] = {};
      }

      action.alerts.forEach(alert => {
        state[action.confirmationId][alert.id] = { ...alert,
          dismissed: false
        };
      });
      break;

    default:
      throw new Error('You must provide a type when dispatching an action for alertState');
  }
});
/**
 * Encapsulates the state and effects needed to manage alert state for the
 * confirmation page in a custom hook. This hook is not likely to be used
 * outside of this file, but it helps to reduce complexity of the primary
 * component.
 *
 * @param {object} pendingConfirmation - a pending confirmation waiting for
 * user approval
 * @returns {[alertState: object, dismissAlert: Function]} A tuple with
 * the current alert state and function to dismiss an alert by id
 */

function useAlertState(pendingConfirmation) {
  const [alertState, dispatch] = (0, _react.useReducer)(alertStateReducer, {});
  /**
   * Computation of the current alert state happens every time the current
   * pendingConfirmation changes. The async function getTemplateAlerts is
   * responsible for returning alert state. Setting state on unmounted
   * components is an anti-pattern, so we use a isMounted variable to keep
   * track of the current state of the component. Returning a function that
   * sets isMounted to false when the component is unmounted.
   */

  (0, _react.useEffect)(() => {
    let isMounted = true;

    if (pendingConfirmation) {
      (0, _templates.getTemplateAlerts)(pendingConfirmation).then(alerts => {
        if (isMounted && alerts.length > 0) {
          dispatch({
            type: 'set',
            confirmationId: pendingConfirmation.id,
            alerts
          });
        }
      });
    }

    return () => {
      isMounted = false;
    };
  }, [pendingConfirmation]);
  const dismissAlert = (0, _react.useCallback)(alertId => {
    dispatch({
      type: 'dismiss',
      confirmationId: pendingConfirmation.id,
      alertId
    });
  }, [pendingConfirmation]);
  return [alertState, dismissAlert];
}

function ConfirmationPage({
  redirectToHomeOnZeroConfirmations = true
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const pendingConfirmations = (0, _reactRedux.useSelector)(_selectors.getUnapprovedTemplatedConfirmations, _lodash.isEqual);
  const [currentPendingConfirmation, setCurrentPendingConfirmation] = (0, _react.useState)(0);
  const pendingConfirmation = pendingConfirmations[currentPendingConfirmation];
  const originMetadata = (0, _useOriginMetadata.useOriginMetadata)(pendingConfirmation === null || pendingConfirmation === void 0 ? void 0 : pendingConfirmation.origin) || {};
  const [alertState, dismissAlert] = useAlertState(pendingConfirmation); // Generating templatedValues is potentially expensive, and if done on every render
  // will result in a new object. Avoiding calling this generation unnecessarily will
  // improve performance and prevent unnecessary draws.

  const templatedValues = (0, _react.useMemo)(() => {
    return pendingConfirmation ? (0, _templates.getTemplateValues)(pendingConfirmation, t, dispatch, history) : {};
  }, [pendingConfirmation, t, dispatch, history]);
  (0, _react.useEffect)(() => {
    // If the number of pending confirmations reduces to zero when the user
    // return them to the default route. Otherwise, if the number of pending
    // confirmations reduces to a number that is less than the currently
    // viewed index, reset the index.
    if (pendingConfirmations.length === 0 && redirectToHomeOnZeroConfirmations) {
      history.push(_routes.DEFAULT_ROUTE);
    } else if (pendingConfirmations.length <= currentPendingConfirmation) {
      setCurrentPendingConfirmation(pendingConfirmations.length - 1);
    }
  }, [pendingConfirmations, history, currentPendingConfirmation, redirectToHomeOnZeroConfirmations]);

  if (!pendingConfirmation) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page"
  }, pendingConfirmations.length > 1 && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page__navigation"
  }, /*#__PURE__*/_react.default.createElement("p", null, t('xOfYPending', [currentPendingConfirmation + 1, pendingConfirmations.length])), currentPendingConfirmation > 0 && /*#__PURE__*/_react.default.createElement("button", {
    className: "confirmation-page__navigation-button",
    onClick: () => setCurrentPendingConfirmation(currentPendingConfirmation - 1)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-left"
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "confirmation-page__navigation-button",
    disabled: currentPendingConfirmation + 1 === pendingConfirmations.length,
    onClick: () => setCurrentPendingConfirmation(currentPendingConfirmation + 1)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-right"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page__content"
  }, templatedValues.networkDisplay ? /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: "center",
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_networkDisplay.default, {
    indicatorSize: _designSystem.SIZES.XS,
    labelProps: {
      color: _designSystem.COLORS.TEXT_DEFAULT
    }
  })) : null, pendingConfirmation.origin === 'metamask' ? null : /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: "center",
    marginTop: 1,
    paddingTop: 1,
    paddingRight: 4,
    paddingLeft: 4,
    paddingBottom: 4,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
    chip: true,
    siteOrigin: originMetadata.origin,
    title: originMetadata.origin,
    iconSrc: originMetadata.iconUrl,
    iconName: originMetadata.hostname
  })), /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
    sections: templatedValues.content
  })), /*#__PURE__*/_react.default.createElement(_confirmationFooter.default, {
    alerts: alertState[pendingConfirmation.id] && Object.values(alertState[pendingConfirmation.id]).filter(alert => alert.dismissed === false).map((alert, idx, filtered) => /*#__PURE__*/_react.default.createElement(_callout.default, {
      key: alert.id,
      severity: alert.severity,
      dismiss: () => dismissAlert(alert.id),
      isFirst: idx === 0,
      isLast: idx === filtered.length - 1,
      isMultiple: filtered.length > 1
    }, /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
      sections: alert.content
    }))),
    onApprove: templatedValues.onApprove,
    onCancel: templatedValues.onCancel,
    approveText: templatedValues.approvalText,
    cancelText: templatedValues.cancelText
  }));
}

ConfirmationPage.propTypes = {
  redirectToHomeOnZeroConfirmations: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\index.js", {"./confirmation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\confirmation.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirmation\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmation.default;
  }
});

var _confirmation = _interopRequireDefault(require("./confirmation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\connected-accounts.component.js", {"../../components/app/connected-accounts-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\index.js","../../components/app/connected-accounts-permissions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\connected-accounts-permissions\\index.js","../../components/ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-accounts\connected-accounts.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _popover = _interopRequireDefault(require("../../components/ui/popover"));

var _connectedAccountsList = _interopRequireDefault(require("../../components/app/connected-accounts-list"));

var _connectedAccountsPermissions = _interopRequireDefault(require("../../components/app/connected-accounts-permissions"));

var _util = require("../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConnectedAccounts extends _react.PureComponent {
  render() {
    const {
      accountToConnect,
      activeTabOrigin,
      isActiveTabExtension,
      connectAccount,
      connectedAccounts,
      history,
      mostRecentOverviewPage,
      permissions,
      selectedAddress,
      removePermittedAccount,
      setSelectedAddress
    } = this.props;
    const {
      t
    } = this.context;
    const connectedAccountsDescription = connectedAccounts.length > 1 ? t('connectedAccountsDescriptionPlural', [connectedAccounts.length]) : t('connectedAccountsDescriptionSingular');
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      title: isActiveTabExtension ? t('currentExtension') : (0, _util.getURLHost)(activeTabOrigin),
      subtitle: connectedAccounts.length ? connectedAccountsDescription : t('connectedAccountsEmptyDescription'),
      onClose: () => history.push(mostRecentOverviewPage),
      footerClassName: "connected-accounts__footer",
      footer: /*#__PURE__*/_react.default.createElement(_connectedAccountsPermissions.default, {
        permissions: permissions
      })
    }, /*#__PURE__*/_react.default.createElement(_connectedAccountsList.default, {
      accountToConnect: accountToConnect,
      connectAccount: connectAccount,
      connectedAccounts: connectedAccounts,
      selectedAddress: selectedAddress,
      removePermittedAccount: removePermittedAccount,
      setSelectedAddress: setSelectedAddress,
      shouldRenderListOptions: true
    }));
  }

}

exports.default = ConnectedAccounts;

_defineProperty(ConnectedAccounts, "contextTypes", {
  t: _propTypes.default.func.isRequired
});

_defineProperty(ConnectedAccounts, "defaultProps", {
  accountToConnect: null,
  permissions: undefined
});

_defineProperty(ConnectedAccounts, "propTypes", {
  accountToConnect: _propTypes.default.object,
  activeTabOrigin: _propTypes.default.string.isRequired,
  connectAccount: _propTypes.default.func.isRequired,
  connectedAccounts: _propTypes.default.array.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  permissions: _propTypes.default.array,
  isActiveTabExtension: _propTypes.default.bool.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  removePermittedAccount: _propTypes.default.func.isRequired,
  setSelectedAddress: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\connected-accounts.container.js", {"../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./connected-accounts.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\connected-accounts.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-accounts\connected-accounts.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _util = require("../../helpers/utils/util");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _connectedAccounts = _interopRequireDefault(require("./connected-accounts.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    activeTab
  } = state;
  const accountToConnect = (0, _selectors.getAccountToConnectToActiveTab)(state);
  const connectedAccounts = (0, _selectors.getOrderedConnectedAccountsForActiveTab)(state);
  const permissions = (0, _selectors.getPermissionsForActiveTab)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  const isActiveTabExtension = (0, _util.isExtensionUrl)(activeTab);
  return {
    accountToConnect,
    isActiveTabExtension,
    activeTabOrigin: activeTab.origin,
    connectedAccounts,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    permissions,
    selectedAddress
  };
};

const mapDispatchToProps = dispatch => {
  return {
    addPermittedAccount: (origin, address) => dispatch((0, _actions.addPermittedAccount)(origin, address)),
    removePermittedAccount: (origin, address) => dispatch((0, _actions.removePermittedAccount)(origin, address)),
    setSelectedAddress: address => dispatch((0, _actions.setSelectedAddress)(address))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    activeTabOrigin
  } = stateProps;
  return { ...ownProps,
    ...stateProps,
    ...dispatchProps,
    connectAccount: address => dispatchProps.addPermittedAccount(activeTabOrigin, address),
    removePermittedAccount: address => dispatchProps.removePermittedAccount(activeTabOrigin, address)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_connectedAccounts.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\index.js", {"./connected-accounts.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\connected-accounts.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-accounts\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccounts.default;
  }
});

var _connectedAccounts = _interopRequireDefault(require("./connected-accounts.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\connected-sites.component.js", {"../../components/app/connected-sites-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\connected-sites-list\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/popover/popover.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\popover.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-sites\connected-sites.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _connectedSitesList = _interopRequireDefault(require("../../components/app/connected-sites-list"));

var _popover = _interopRequireDefault(require("../../components/ui/popover/popover.component"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConnectedSites extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      sitePendingDisconnect: null
    });

    _defineProperty(this, "setPendingDisconnect", subjectKey => {
      this.setState({
        sitePendingDisconnect: {
          subjectKey
        }
      });
    });

    _defineProperty(this, "clearPendingDisconnect", () => {
      this.setState({
        sitePendingDisconnect: null
      });
    });

    _defineProperty(this, "disconnectAccount", () => {
      const {
        disconnectAccount
      } = this.props;
      const {
        sitePendingDisconnect
      } = this.state;
      disconnectAccount(sitePendingDisconnect.subjectKey);
      this.clearPendingDisconnect();
    });

    _defineProperty(this, "disconnectAllAccounts", () => {
      const {
        disconnectAllAccounts
      } = this.props;
      const {
        sitePendingDisconnect
      } = this.state;
      disconnectAllAccounts(sitePendingDisconnect.subjectKey);
      this.clearPendingDisconnect();
    });
  }

  componentDidMount() {
    const {
      getOpenMetamaskTabsIds
    } = this.props;
    getOpenMetamaskTabsIds();
  }

  renderConnectedSitesList() {
    return /*#__PURE__*/_react.default.createElement(_connectedSitesList.default, {
      connectedSubjects: this.props.connectedSubjects,
      onDisconnect: this.setPendingDisconnect
    });
  }

  renderConnectedSitesPopover() {
    const {
      accountLabel,
      closePopover,
      connectedSubjects,
      tabToConnect,
      requestAccountsPermission
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      className: "connected-sites",
      title: t('connectedSites'),
      subtitle: connectedSubjects.length ? t('connectedSitesDescription', [accountLabel]) : t('connectedSitesEmptyDescription', [accountLabel]),
      onClose: closePopover,
      footer: tabToConnect ? /*#__PURE__*/_react.default.createElement("a", {
        className: "connected-sites__text-button",
        onClick: requestAccountsPermission
      }, t('connectManually')) : null,
      footerClassName: "connected-sites__add-site-manually"
    }, this.renderConnectedSitesList());
  }

  renderDisconnectPopover() {
    const {
      closePopover,
      permittedAccountsByOrigin
    } = this.props;
    const {
      t
    } = this.context;
    const {
      sitePendingDisconnect: {
        subjectKey
      }
    } = this.state;
    const numPermittedAccounts = permittedAccountsByOrigin[subjectKey].length;
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      className: "connected-sites",
      title: t('disconnectPrompt', [subjectKey]),
      subtitle: t('disconnectAllAccountsConfirmationDescription'),
      onClose: closePopover,
      footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "connected-sites__footer-row"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        onClick: this.clearPendingDisconnect
      }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "primary",
        onClick: this.disconnectAccount
      }, t('disconnect'))), numPermittedAccounts > 1 ? /*#__PURE__*/_react.default.createElement("div", {
        className: "connected-sites__footer-row"
      }, /*#__PURE__*/_react.default.createElement("a", {
        className: "connected-sites__text-button",
        onClick: this.disconnectAllAccounts
      }, t('disconnectAllAccounts'))) : null),
      footerClassName: "connected-sites__confirmation"
    });
  }

  render() {
    const {
      sitePendingDisconnect
    } = this.state;
    return sitePendingDisconnect ? this.renderDisconnectPopover() : this.renderConnectedSitesPopover();
  }

}

exports.default = ConnectedSites;

_defineProperty(ConnectedSites, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(ConnectedSites, "defaultProps", {
  tabToConnect: null
});

_defineProperty(ConnectedSites, "propTypes", {
  accountLabel: _propTypes.default.string.isRequired,
  closePopover: _propTypes.default.func.isRequired,
  connectedSubjects: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  disconnectAllAccounts: _propTypes.default.func.isRequired,
  disconnectAccount: _propTypes.default.func.isRequired,
  getOpenMetamaskTabsIds: _propTypes.default.func.isRequired,
  permittedAccountsByOrigin: _propTypes.default.objectOf(_propTypes.default.arrayOf(_propTypes.default.string)).isRequired,
  tabToConnect: _propTypes.default.object,
  requestAccountsPermission: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\connected-sites.container.js", {"../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./connected-sites.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\connected-sites.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-sites\connected-sites.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _routes = require("../../helpers/constants/routes");

var _history = require("../../ducks/history/history");

var _connectedSites = _interopRequireDefault(require("./connected-sites.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  var _permittedAccountsByO;

  const {
    openMetaMaskTabs
  } = state.appState;
  const {
    id
  } = state.activeTab;
  const connectedSubjects = (0, _selectors.getConnectedSubjectsForSelectedAddress)(state);
  const originOfCurrentTab = (0, _selectors.getOriginOfCurrentTab)(state);
  const permittedAccountsByOrigin = (0, _selectors.getPermittedAccountsByOrigin)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  const currentTabHasNoAccounts = !((_permittedAccountsByO = permittedAccountsByOrigin[originOfCurrentTab]) !== null && _permittedAccountsByO !== void 0 && _permittedAccountsByO.length);
  let tabToConnect;

  if (originOfCurrentTab && currentTabHasNoAccounts && !openMetaMaskTabs[id]) {
    tabToConnect = {
      origin: originOfCurrentTab
    };
  }

  return {
    accountLabel: (0, _selectors.getCurrentAccountWithSendEtherInfo)(state).name,
    connectedSubjects,
    subjects: (0, _selectors.getPermissionSubjects)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    permittedAccountsByOrigin,
    selectedAddress,
    tabToConnect
  };
};

const mapDispatchToProps = dispatch => {
  return {
    getOpenMetamaskTabsIds: () => dispatch((0, _actions.getOpenMetamaskTabsIds)()),
    disconnectAccount: (subjectKey, address) => {
      dispatch((0, _actions.removePermittedAccount)(subjectKey, address));
    },
    disconnectAllAccounts: (subjectKey, subject) => {
      const permissionMethodNames = Object.values(subject.permissions).map(({
        parentCapability
      }) => parentCapability);
      dispatch((0, _actions.removePermissionsFor)({
        [subjectKey]: permissionMethodNames
      }));
    },
    requestAccountsPermissionWithId: origin => dispatch((0, _actions.requestAccountsPermissionWithId)(origin))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    connectedSubjects,
    subjects,
    mostRecentOverviewPage,
    selectedAddress,
    tabToConnect
  } = stateProps;
  const {
    disconnectAccount,
    disconnectAllAccounts,
    // eslint-disable-next-line no-shadow
    requestAccountsPermissionWithId
  } = dispatchProps;
  const {
    history
  } = ownProps;

  const closePopover = () => history.push(mostRecentOverviewPage);

  return { ...ownProps,
    ...stateProps,
    ...dispatchProps,
    closePopover,
    disconnectAccount: subjectKey => {
      disconnectAccount(subjectKey, selectedAddress);

      if (connectedSubjects.length === 1) {
        closePopover();
      }
    },
    disconnectAllAccounts: subjectKey => {
      disconnectAllAccounts(subjectKey, subjects[subjectKey]);

      if (connectedSubjects.length === 1) {
        closePopover();
      }
    },
    requestAccountsPermission: async () => {
      const id = await requestAccountsPermissionWithId(tabToConnect.origin);
      history.push(`${_routes.CONNECT_ROUTE}/${id}`);
    }
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_connectedSites.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\index.js", {"./connected-sites.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\connected-sites.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\connected-sites\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedSites.default;
  }
});

var _connectedSites = _interopRequireDefault(require("./connected-sites.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\account-list.js", {"../../../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/check-box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../../components/ui/dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\connect-hardware\account-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _etherscanLink = require("@metamask/etherscan-link");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _checkBox = _interopRequireDefault(require("../../../components/ui/check-box"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _util = require("../../../helpers/utils/util");

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _metametrics = require("../../../../shared/constants/metametrics");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AccountList extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      pathValue: null
    });

    _defineProperty(this, "goToNextPage", () => {
      // If we have < 5 accounts, it's restricted by BIP-44
      if (this.props.accounts.length === 5) {
        this.props.getPage(this.props.device, 1, this.props.selectedPath);
      } else {
        this.props.onAccountRestriction();
      }
    });

    _defineProperty(this, "goToPreviousPage", () => {
      this.props.getPage(this.props.device, -1, this.props.selectedPath);
    });
  }

  setPath(pathValue) {
    this.setState({
      pathValue
    });
  }

  renderHdPathSelector() {
    const {
      device,
      selectedPath,
      hdPaths,
      onPathChange
    } = this.props;
    const {
      pathValue
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__hdPath__title"
    }, this.context.t('selectHdPath')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, this.context.t('selectPathHelp')), /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect__hdPath"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      className: "hw-connect__hdPath__select",
      options: hdPaths[device.toLowerCase()],
      selectedOption: pathValue || selectedPath,
      onChange: value => {
        this.setPath(value);
        onPathChange(value);
      }
    })));
  }

  capitalizeDevice(device) {
    return device.slice(0, 1).toUpperCase() + device.slice(1);
  }

  renderHeader() {
    const {
      device
    } = this.props;
    const shouldShowHDPaths = [_hardwareWallets.DEVICE_NAMES.LEDGER, _hardwareWallets.DEVICE_NAMES.LATTICE, _hardwareWallets.DEVICE_NAMES.TREZOR].includes(device.toLowerCase());
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect"
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__unlock-title"
    }, this.context.t('selectAnAccount')), shouldShowHDPaths ? this.renderHdPathSelector() : null, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__hdPath__title"
    }, this.context.t('selectAnAccount')));
  }

  renderAccounts() {
    const {
      accounts,
      connectedAccounts,
      rpcPrefs,
      chainId
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-account-list"
    }, accounts.map((account, idx) => {
      const accountAlreadyConnected = connectedAccounts.includes(account.address.toLowerCase());
      const value = account.index;
      const checked = this.props.selectedAccounts.includes(account.index) || accountAlreadyConnected;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "hw-account-list__item",
        key: account.address,
        title: accountAlreadyConnected ? this.context.t('selectAnAccountAlreadyConnected') : ''
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "hw-account-list__item__checkbox"
      }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
        id: `address-${idx}`,
        checked: checked,
        disabled: accountAlreadyConnected,
        onClick: () => {
          this.props.onAccountChange(value);
        }
      }), /*#__PURE__*/_react.default.createElement("label", {
        className: "hw-account-list__item__label",
        htmlFor: `address-${idx}`
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "hw-account-list__item__index"
      }, account.index + 1), `${account.address.slice(0, 4)}...${account.address.slice(-4)}`, /*#__PURE__*/_react.default.createElement("span", {
        className: "hw-account-list__item__balance"
      }, `${account.balance}`))), /*#__PURE__*/_react.default.createElement("a", {
        className: "hw-account-list__item__link",
        onClick: () => {
          const accountLink = (0, _etherscanLink.getAccountLink)(account.address, chainId, rpcPrefs);
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
            event: 'Clicked Block Explorer Link',
            properties: {
              actions: 'Hardware Connect',
              link_type: 'Account Tracker',
              block_explorer_domain: (0, _util.getURLHostName)(accountLink)
            }
          });
          global.platform.openTab({
            url: accountLink
          });
        },
        target: "_blank",
        rel: "noopener noreferrer",
        title: this.context.t('etherscanView')
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-share-square",
        style: {
          color: 'var(--color-icon-default)'
        }
      })));
    }));
  }

  renderPagination() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-list-pagination"
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "hw-list-pagination__button",
      onClick: this.goToPreviousPage
    }, `< ${this.context.t('prev')}`), /*#__PURE__*/_react.default.createElement("button", {
      className: "hw-list-pagination__button",
      onClick: this.goToNextPage
    }, `${this.context.t('next')} >`));
  }

  renderButtons() {
    const disabled = this.props.selectedAccounts.length === 0;
    const buttonProps = {};

    if (disabled) {
      buttonProps.disabled = true;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-external-account-form__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-external-account-form__button",
      onClick: this.props.onCancel.bind(this)
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-external-account-form__button unlock",
      disabled: disabled,
      onClick: this.props.onUnlockAccounts.bind(this, this.props.device, this.props.selectedPath)
    }, this.context.t('unlock')));
  }

  renderForgetDevice() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-forget-device-container"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: this.props.onForgetDevice.bind(this, this.props.device)
    }, this.context.t('forgetDevice')));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-external-account-form account-list"
    }, this.renderHeader(), this.renderAccounts(), this.renderPagination(), this.renderButtons(), this.renderForgetDevice());
  }

}

AccountList.propTypes = {
  onPathChange: _propTypes.default.func.isRequired,
  selectedPath: _propTypes.default.string.isRequired,
  device: _propTypes.default.string.isRequired,
  accounts: _propTypes.default.array.isRequired,
  connectedAccounts: _propTypes.default.array.isRequired,
  onAccountChange: _propTypes.default.func.isRequired,
  onForgetDevice: _propTypes.default.func.isRequired,
  getPage: _propTypes.default.func.isRequired,
  chainId: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  selectedAccounts: _propTypes.default.array.isRequired,
  onUnlockAccounts: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onAccountRestriction: _propTypes.default.func,
  hdPaths: _propTypes.default.array.isRequired
};
AccountList.contextTypes = {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
};
var _default = AccountList;
exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\index.js", {"../../../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./account-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\account-list.js","./select-hardware":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\select-hardware.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\connect-hardware\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _util = require("../../../helpers/utils/util");

var _history = require("../../../ducks/history/history");

var _metametrics = require("../../../../shared/constants/metametrics");

var _time = require("../../../../shared/constants/time");

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _selectHardware = _interopRequireDefault(require("./select-hardware"));

var _accountList = _interopRequireDefault(require("./account-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const U2F_ERROR = 'U2F';
const LEDGER_LIVE_PATH = `m/44'/60'/0'/0/0`;
const MEW_PATH = `m/44'/60'/0'`;
const BIP44_PATH = `m/44'/60'/0'/0`;
const LEDGER_HD_PATHS = [{
  name: 'Ledger Live',
  value: LEDGER_LIVE_PATH
}, {
  name: 'Legacy (MEW / MyCrypto)',
  value: MEW_PATH
}, {
  name: `BIP44 Standard (e.g. MetaMask, Trezor)`,
  value: BIP44_PATH
}];
const LATTICE_STANDARD_BIP44_PATH = `m/44'/60'/0'/0/x`;
const LATTICE_LEDGER_LIVE_PATH = `m/44'/60'/x'/0/0`;
const LATTICE_MEW_PATH = `m/44'/60'/0'/x`;
const LATTICE_HD_PATHS = [{
  name: `Standard (${LATTICE_STANDARD_BIP44_PATH})`,
  value: LATTICE_STANDARD_BIP44_PATH
}, {
  name: `Ledger Live (${LATTICE_LEDGER_LIVE_PATH})`,
  value: LATTICE_LEDGER_LIVE_PATH
}, {
  name: `Ledger Legacy (${LATTICE_MEW_PATH})`,
  value: LATTICE_MEW_PATH
}];
const TREZOR_TESTNET_PATH = `m/44'/1'/0'/0`;
const TREZOR_HD_PATHS = [{
  name: `BIP44 Standard (e.g. MetaMask, Trezor)`,
  value: BIP44_PATH
}, {
  name: `Trezor Testnets`,
  value: TREZOR_TESTNET_PATH
}];
const HD_PATHS = {
  ledger: LEDGER_HD_PATHS,
  lattice: LATTICE_HD_PATHS,
  trezor: TREZOR_HD_PATHS
};

class ConnectHardwareForm extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      error: null,
      selectedAccounts: [],
      accounts: [],
      browserSupported: true,
      unlocked: false,
      device: null
    });

    _defineProperty(this, "connectToHardwareWallet", device => {
      this.setState({
        device
      });

      if (this.state.accounts.length) {
        return;
      } // Default values


      this.getPage(device, 0, this.props.defaultHdPaths[device]);
    });

    _defineProperty(this, "onPathChange", path => {
      this.props.setHardwareWalletDefaultHdPath({
        device: this.state.device,
        path
      });
      this.setState({
        selectedAccounts: []
      });
      this.getPage(this.state.device, 0, path);
    });

    _defineProperty(this, "onAccountChange", account => {
      let {
        selectedAccounts
      } = this.state;

      if (selectedAccounts.includes(account)) {
        selectedAccounts = selectedAccounts.filter(acc => account !== acc);
      } else {
        selectedAccounts.push(account);
      }

      this.setState({
        selectedAccounts,
        error: null
      });
    });

    _defineProperty(this, "onAccountRestriction", () => {
      this.setState({
        error: this.context.t('ledgerAccountRestriction')
      });
    });

    _defineProperty(this, "getPage", (device, page, hdPath) => {
      this.props.connectHardware(device, page, hdPath, this.context.t).then(accounts => {
        if (accounts.length) {
          // If we just loaded the accounts for the first time
          // (device previously locked) show the global alert
          if (this.state.accounts.length === 0 && !this.state.unlocked) {
            this.showTemporaryAlert();
          } // Map accounts with balances


          const newAccounts = accounts.map(account => {
            var _this$props$accounts$;

            const normalizedAddress = account.address.toLowerCase();
            const balanceValue = ((_this$props$accounts$ = this.props.accounts[normalizedAddress]) === null || _this$props$accounts$ === void 0 ? void 0 : _this$props$accounts$.balance) || null;
            account.balance = balanceValue ? (0, _util.formatBalance)(balanceValue, 6) : '...';
            return account;
          });
          this.setState({
            accounts: newAccounts,
            unlocked: true,
            device,
            error: null
          });
        }
      }).catch(e => {
        const errorMessage = typeof e === 'string' ? e : e.message;

        if (errorMessage === 'Window blocked') {
          this.setState({
            browserSupported: false,
            error: null
          });
        } else if (errorMessage.includes(U2F_ERROR)) {
          this.setState({
            error: U2F_ERROR
          });
        } else if (errorMessage === 'LEDGER_LOCKED' || errorMessage === 'LEDGER_WRONG_APP') {
          this.setState({
            error: this.context.t('ledgerLocked')
          });
        } else if (errorMessage.includes('timeout')) {
          this.setState({
            error: this.context.t('ledgerTimeout')
          });
        } else if (errorMessage.toLowerCase().includes('KeystoneError#pubkey_account.no_expected_account'.toLowerCase())) {
          this.setState({
            error: this.context.t('QRHardwarePubkeyAccountOutOfRange')
          });
        } else if (errorMessage !== 'Window closed' && errorMessage !== 'Popup closed' && errorMessage.toLowerCase().includes('KeystoneError#sync_cancel'.toLowerCase()) === false) {
          this.setState({
            error: errorMessage
          });
        }
      });
    });

    _defineProperty(this, "onForgetDevice", device => {
      this.props.forgetDevice(device).then(_ => {
        this.setState({
          error: null,
          selectedAccounts: [],
          accounts: [],
          unlocked: false
        });
      }).catch(e => {
        this.setState({
          error: e.message
        });
      });
    });

    _defineProperty(this, "onUnlockAccounts", (device, path) => {
      const {
        history,
        mostRecentOverviewPage,
        unlockHardwareWalletAccounts
      } = this.props;
      const {
        selectedAccounts
      } = this.state;

      if (selectedAccounts.length === 0) {
        this.setState({
          error: this.context.t('accountSelectionRequired')
        });
      }

      const description = MEW_PATH === path ? this.context.t('hardwareWalletLegacyDescription') : '';
      return unlockHardwareWalletAccounts(selectedAccounts, device, path || null, description).then(_ => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADDED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.HARDWARE,
            account_hardware_type: device
          }
        });
        history.push(mostRecentOverviewPage);
      }).catch(e => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADD_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.HARDWARE,
            account_hardware_type: device,
            error: e.message
          }
        });
        this.setState({
          error: e.message
        });
      });
    });

    _defineProperty(this, "onCancel", () => {
      const {
        history,
        mostRecentOverviewPage
      } = this.props;
      history.push(mostRecentOverviewPage);
    });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      accounts
    } = nextProps;
    const newAccounts = this.state.accounts.map(a => {
      var _accounts$normalizedA;

      const normalizedAddress = a.address.toLowerCase();
      const balanceValue = ((_accounts$normalizedA = accounts[normalizedAddress]) === null || _accounts$normalizedA === void 0 ? void 0 : _accounts$normalizedA.balance) || null;
      a.balance = balanceValue ? (0, _util.formatBalance)(balanceValue, 6) : '...';
      return a;
    });
    this.setState({
      accounts: newAccounts
    });
  }

  componentDidMount() {
    this.checkIfUnlocked();
  }

  async checkIfUnlocked() {
    for (const device of [_hardwareWallets.DEVICE_NAMES.TREZOR, _hardwareWallets.DEVICE_NAMES.LEDGER, _hardwareWallets.DEVICE_NAMES.LATTICE]) {
      const path = this.props.defaultHdPaths[device];
      const unlocked = await this.props.checkHardwareStatus(device, path);

      if (unlocked) {
        this.setState({
          unlocked: true
        });
        this.getPage(device, 0, path);
      }
    }
  }

  showTemporaryAlert() {
    this.props.showAlert(this.context.t('hardwareWalletConnected')); // Autohide the alert after 5 seconds

    setTimeout(_ => {
      this.props.hideAlert();
    }, _time.SECOND * 5);
  }

  renderError() {
    if (this.state.error === U2F_ERROR) {
      return /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__error"
      }, this.context.t('troubleConnectingToWallet', [this.state.device,
      /*#__PURE__*/
      // eslint-disable-next-line react/jsx-key
      _react.default.createElement("a", {
        href: _zendeskUrl.default.HARDWARE_CONNECTION,
        key: "hardware-connection-guide",
        target: "_blank",
        rel: "noopener noreferrer",
        className: "hw-connect__link",
        style: {
          marginLeft: '5px',
          marginRight: '5px'
        }
      }, this.context.t('walletConnectionGuide'))]));
    }

    return this.state.error ? /*#__PURE__*/_react.default.createElement("span", {
      className: "hw-connect__error"
    }, this.state.error) : null;
  }

  renderContent() {
    if (!this.state.accounts.length) {
      return /*#__PURE__*/_react.default.createElement(_selectHardware.default, {
        connectToHardwareWallet: this.connectToHardwareWallet,
        browserSupported: this.state.browserSupported,
        ledgerTransportType: this.props.ledgerTransportType
      });
    }

    return /*#__PURE__*/_react.default.createElement(_accountList.default, {
      onPathChange: this.onPathChange,
      selectedPath: this.props.defaultHdPaths[this.state.device],
      device: this.state.device,
      accounts: this.state.accounts,
      connectedAccounts: this.props.connectedAccounts,
      selectedAccounts: this.state.selectedAccounts,
      onAccountChange: this.onAccountChange,
      chainId: this.props.chainId,
      rpcPrefs: this.props.rpcPrefs,
      getPage: this.getPage,
      onUnlockAccounts: this.onUnlockAccounts,
      onForgetDevice: this.onForgetDevice,
      onCancel: this.onCancel,
      onAccountRestriction: this.onAccountRestriction,
      hdPaths: HD_PATHS
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderError(), this.renderContent());
  }

}

_defineProperty(ConnectHardwareForm, "contextTypes", {
  t: _propTypes.default.func
});

ConnectHardwareForm.propTypes = {
  connectHardware: _propTypes.default.func,
  checkHardwareStatus: _propTypes.default.func,
  forgetDevice: _propTypes.default.func,
  showAlert: _propTypes.default.func,
  hideAlert: _propTypes.default.func,
  unlockHardwareWalletAccounts: _propTypes.default.func,
  setHardwareWalletDefaultHdPath: _propTypes.default.func,
  history: _propTypes.default.object,
  chainId: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.object,
  connectedAccounts: _propTypes.default.array.isRequired,
  defaultHdPaths: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  ledgerTransportType: _propTypes.default.oneOf(Object.values(_hardwareWallets.LEDGER_TRANSPORT_TYPES))
};

const mapStateToProps = state => ({
  chainId: (0, _selectors.getCurrentChainId)(state),
  rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
  accounts: (0, _selectors.getMetaMaskAccounts)(state),
  connectedAccounts: (0, _selectors.getMetaMaskAccountsConnected)(state),
  defaultHdPaths: state.appState.defaultHdPaths,
  mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
  ledgerTransportType: state.metamask.ledgerTransportType
});

const mapDispatchToProps = dispatch => {
  return {
    setHardwareWalletDefaultHdPath: ({
      device,
      path
    }) => {
      return dispatch(actions.setHardwareWalletDefaultHdPath({
        device,
        path
      }));
    },
    connectHardware: (deviceName, page, hdPath, t) => {
      return dispatch(actions.connectHardware(deviceName, page, hdPath, t));
    },
    checkHardwareStatus: (deviceName, hdPath) => {
      return dispatch(actions.checkHardwareStatus(deviceName, hdPath));
    },
    forgetDevice: deviceName => {
      return dispatch(actions.forgetDevice(deviceName));
    },
    unlockHardwareWalletAccounts: (indexes, deviceName, hdPath, hdPathDescription) => {
      return dispatch(actions.unlockHardwareWalletAccounts(indexes, deviceName, hdPath, hdPathDescription));
    },
    showAlert: msg => dispatch(actions.showAlert(msg)),
    hideAlert: () => dispatch(actions.hideAlert())
  };
};

ConnectHardwareForm.contextTypes = {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ConnectHardwareForm);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\select-hardware.js", {"../../../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/logo/logo-lattice":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-lattice.js","../../../components/ui/logo/logo-ledger":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-ledger.js","../../../components/ui/logo/logo-qr-based":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-qr-based.js","../../../components/ui/logo/logo-trezor":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-trezor.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\connect-hardware\select-hardware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _logoLedger = _interopRequireDefault(require("../../../components/ui/logo/logo-ledger"));

var _logoQrBased = _interopRequireDefault(require("../../../components/ui/logo/logo-qr-based"));

var _logoTrezor = _interopRequireDefault(require("../../../components/ui/logo/logo-trezor"));

var _logoLattice = _interopRequireDefault(require("../../../components/ui/logo/logo-lattice"));

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _metametrics = require("../../../../shared/constants/metametrics");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SelectHardware extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      selectedDevice: null
    });

    _defineProperty(this, "connect", () => {
      if (this.state.selectedDevice) {
        this.props.connectToHardwareWallet(this.state.selectedDevice);
      }

      return null;
    });
  }

  renderConnectToTrezorButton() {
    return /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('hw-connect__btn', {
        selected: this.state.selectedDevice === _hardwareWallets.DEVICE_NAMES.TREZOR
      }),
      onClick: _ => this.setState({
        selectedDevice: _hardwareWallets.DEVICE_NAMES.TREZOR
      })
    }, /*#__PURE__*/_react.default.createElement(_logoTrezor.default, {
      className: "hw-connect__btn__img",
      ariaLabel: "Trezor"
    }));
  }

  renderConnectToLatticeButton() {
    return /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('hw-connect__btn', {
        selected: this.state.selectedDevice === _hardwareWallets.DEVICE_NAMES.LATTICE
      }),
      onClick: _ => this.setState({
        selectedDevice: _hardwareWallets.DEVICE_NAMES.LATTICE
      })
    }, /*#__PURE__*/_react.default.createElement(_logoLattice.default, {
      className: "hw-connect__btn__img",
      ariaLabel: "Lattice"
    }));
  }

  renderConnectToLedgerButton() {
    return /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('hw-connect__btn', {
        selected: this.state.selectedDevice === _hardwareWallets.DEVICE_NAMES.LEDGER
      }),
      onClick: _ => this.setState({
        selectedDevice: _hardwareWallets.DEVICE_NAMES.LEDGER
      })
    }, /*#__PURE__*/_react.default.createElement(_logoLedger.default, {
      className: "hw-connect__btn__img",
      ariaLabel: "Ledger"
    }));
  }

  renderConnectToQRButton() {
    return /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('hw-connect__btn', {
        selected: this.state.selectedDevice === _hardwareWallets.DEVICE_NAMES.QR
      }),
      onClick: _ => this.setState({
        selectedDevice: _hardwareWallets.DEVICE_NAMES.QR
      })
    }, /*#__PURE__*/_react.default.createElement(_logoQrBased.default, {
      className: "hw-connect__btn__img",
      ariaLabel: "QRCode"
    }));
  }

  renderButtons() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect__btn-wrapper"
    }, this.renderConnectToLedgerButton(), this.renderConnectToTrezorButton()), /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect__btn-wrapper",
      style: {
        margin: '10px 0 0 0'
      }
    }, this.renderConnectToLatticeButton(), this.renderConnectToQRButton()));
  }

  renderContinueButton() {
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "hw-connect__connect-btn",
      onClick: this.connect,
      disabled: !this.state.selectedDevice
    }, this.context.t('continue'));
  }

  renderUnsupportedBrowser() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-external-account-form unsupported-browser"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect"
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__title"
    }, this.context.t('browserNotSupported')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, this.context.t('chromeRequiredForHardwareWallets'))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      onClick: () => global.platform.openTab({
        url: 'https://google.com/chrome'
      })
    }, this.context.t('downloadGoogleChrome')));
  }

  renderHeader() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect__header"
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__header__title"
    }, this.context.t('hardwareWallets')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__header__msg"
    }, this.context.t('hardwareWalletsMsg')));
  }

  renderTutorialsteps() {
    switch (this.state.selectedDevice) {
      case _hardwareWallets.DEVICE_NAMES.LEDGER:
        return this.renderLedgerTutorialSteps();

      case _hardwareWallets.DEVICE_NAMES.TREZOR:
        return this.renderTrezorTutorialSteps();

      case _hardwareWallets.DEVICE_NAMES.LATTICE:
        return this.renderLatticeTutorialSteps();

      case _hardwareWallets.DEVICE_NAMES.QR:
        return this.renderQRHardwareWalletSteps();

      default:
        return '';
    }
  }

  renderLedgerTutorialSteps() {
    const steps = [];

    if (this.props.ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE) {
      steps.push({
        title: this.context.t('step1LedgerWallet'),
        message: this.context.t('step1LedgerWalletMsg', [/*#__PURE__*/_react.default.createElement("a", {
          className: "hw-connect__msg-link",
          href: "https://www.ledger.com/ledger-live",
          rel: "noopener noreferrer",
          target: "_blank",
          key: "ledger-live-app-link"
        }, this.context.t('ledgerLiveApp'))])
      });
    }

    steps.push({
      asset: 'plug-in-wallet',
      dimensions: {
        width: '225px',
        height: '75px'
      },
      title: this.context.t('step2LedgerWallet'),
      message: this.context.t('step2LedgerWalletMsg', [/*#__PURE__*/_react.default.createElement("a", {
        className: "hw-connect__msg-link",
        href: _zendeskUrl.default.HARDWARE_CONNECTION,
        rel: "noopener noreferrer",
        target: "_blank",
        key: "ledger-support-link"
      }, this.context.t('hardwareWalletSupportLinkConversion'))])
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-tutorial"
    }, steps.map((step, index) => /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect",
      key: index
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__title"
    }, step.title), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn-first",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked Ledger Buy Now'
        });
        window.open(_hardwareWallets.AFFILIATE_LINKS.LEDGER, '_blank');
      }
    }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked Ledger Tutorial'
        });
        window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.LEDGER, '_blank');
      }
    }, this.context.t('tutorial')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, step.message), step.asset && /*#__PURE__*/_react.default.createElement("img", _extends({
      className: "hw-connect__step-asset",
      src: `images/${step.asset}.svg`
    }, step.dimensions, {
      alt: ""
    })))));
  }

  renderLatticeTutorialSteps() {
    const steps = [{
      asset: 'connect-lattice',
      dimensions: {
        width: '225px',
        height: '75px'
      },
      title: this.context.t('step1LatticeWallet'),
      message: this.context.t('step1LatticeWalletMsg', [/*#__PURE__*/_react.default.createElement("a", {
        className: "hw-connect__msg-link",
        href: _zendeskUrl.default.HARDWARE_CONNECTION,
        rel: "noopener noreferrer",
        target: "_blank",
        key: "lattice-setup-link"
      }, this.context.t('hardwareWalletSupportLinkConversion'))])
    }];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-tutorial"
    }, steps.map((step, index) => /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect",
      key: index
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__title"
    }, step.title), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn-first",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked GridPlus Buy Now'
        });
        window.open(_hardwareWallets.AFFILIATE_LINKS.GRIDPLUS, '_blank');
      }
    }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked GidPlus Tutorial'
        });
        window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.GRIDPLUS, '_blank');
      }
    }, this.context.t('tutorial')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, step.message), step.asset && /*#__PURE__*/_react.default.createElement("img", _extends({
      className: "hw-connect__step-asset",
      src: `images/${step.asset}.svg`
    }, step.dimensions, {
      alt: ""
    })))));
  }

  renderTrezorTutorialSteps() {
    const steps = [{
      asset: 'plug-in-wallet',
      dimensions: {
        width: '225px',
        height: '75px'
      },
      title: this.context.t('step1TrezorWallet'),
      message: this.context.t('step1TrezorWalletMsg', [/*#__PURE__*/_react.default.createElement("a", {
        className: "hw-connect__msg-link",
        href: _zendeskUrl.default.HARDWARE_CONNECTION,
        rel: "noopener noreferrer",
        target: "_blank",
        key: "trezor-support-link"
      }, this.context.t('hardwareWalletSupportLinkConversion'))])
    }];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-tutorial"
    }, steps.map((step, index) => /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect",
      key: index
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__title"
    }, step.title), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn-first",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked Trezor Buy Now'
        });
        window.open(_hardwareWallets.AFFILIATE_LINKS.TREZOR, '_blank');
      }
    }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "hw-connect__external-btn",
      type: "secondary",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Clicked Trezor Tutorial'
        });
        window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.TREZOR, '_blank');
      }
    }, this.context.t('tutorial')), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, step.message), step.asset && /*#__PURE__*/_react.default.createElement("img", _extends({
      className: "hw-connect__step-asset",
      src: `images/${step.asset}.svg`
    }, step.dimensions, {
      alt: ""
    })))));
  }

  renderQRHardwareWalletSteps() {
    const steps = [];
    steps.push({
      title: this.context.t('QRHardwareWalletSteps1Title'),
      message: this.context.t('QRHardwareWalletSteps1Description')
    }, {
      message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__QR-subtitle"
      }, this.context.t('keystone')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn-first",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked Keystone Buy Now'
          });
          window.open(_hardwareWallets.AFFILIATE_LINKS.KEYSTONE, '_blank');
        }
      }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked Keystone Tutorial'
          });
          window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.KEYSTONE, '_blank');
        }
      }, this.context.t('tutorial')))
    }, {
      message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__QR-subtitle"
      }, this.context.t('airgapVault')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn-first",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked AirGap Vault Buy Now'
          });
          window.open(_hardwareWallets.AFFILIATE_LINKS.AIRGAP, '_blank');
        }
      }, this.context.t('downloadNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked AirGap Vault Tutorial'
          });
          window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.AIRGAP, '_blank');
        }
      }, this.context.t('tutorial')))
    }, {
      message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__QR-subtitle"
      }, this.context.t('coolWallet')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn-first",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked CoolWallet Buy Now'
          });
          window.open(_hardwareWallets.AFFILIATE_LINKS.COOLWALLET, '_blank');
        }
      }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked CoolWallet Tutorial'
          });
          window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.COOLWALLET, '_blank');
        }
      }, this.context.t('tutorial')))
    }, {
      message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__QR-subtitle"
      }, this.context.t('dcent')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn-first",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked DCent Buy Now'
          });
          window.open(_hardwareWallets.AFFILIATE_LINKS.DCENT, '_blank');
        }
      }, this.context.t('buyNow')), /*#__PURE__*/_react.default.createElement(_button.default, {
        className: "hw-connect__external-btn",
        type: "secondary",
        onClick: () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
            event: 'Clicked DCent Tutorial'
          });
          window.open(_hardwareWallets.AFFILIATE_TUTORIAL_LINKS.DCENT, '_blank');
        }
      }, this.context.t('tutorial')))
    }, {
      message: this.context.t('QRHardwareWalletSteps2Description')
    }, {
      asset: 'qrcode-wallet-demo',
      dimensions: {
        width: '225px',
        height: '75px'
      }
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-tutorial"
    }, steps.map((step, index) => /*#__PURE__*/_react.default.createElement("div", {
      className: "hw-connect",
      key: index
    }, step.title && /*#__PURE__*/_react.default.createElement("h3", {
      className: "hw-connect__title"
    }, step.title), /*#__PURE__*/_react.default.createElement("p", {
      className: "hw-connect__msg"
    }, step.message), step.asset && /*#__PURE__*/_react.default.createElement("img", _extends({
      className: "hw-connect__step-asset",
      src: `images/${step.asset}.svg`
    }, step.dimensions, {
      alt: ""
    })))));
  }

  renderConnectScreen() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-external-account-form"
    }, this.renderHeader(), this.renderButtons(), this.state.selectedDevice ? this.renderTutorialsteps() : null, this.renderContinueButton());
  }

  render() {
    if (this.props.browserSupported) {
      return this.renderConnectScreen();
    }

    return this.renderUnsupportedBrowser();
  }

}

exports.default = SelectHardware;

_defineProperty(SelectHardware, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(SelectHardware, "propTypes", {
  connectToHardwareWallet: _propTypes.default.func.isRequired,
  browserSupported: _propTypes.default.bool.isRequired,
  ledgerTransportType: _propTypes.default.oneOf(Object.values(_hardwareWallets.LEDGER_TRANSPORT_TYPES))
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\create-account.component.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","./connect-hardware":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\connect-hardware\\index.js","./import-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\index.js","./new-account.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\new-account.container.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\create-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../helpers/constants/routes");

var _newAccount = _interopRequireDefault(require("./new-account.container"));

var _importAccount = _interopRequireDefault(require("./import-account"));

var _connectHardware = _interopRequireDefault(require("./connect-hardware"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class CreateAccountPage extends _react.Component {
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account__form"
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.NEW_ACCOUNT_ROUTE,
      component: _newAccount.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.IMPORT_ACCOUNT_ROUTE,
      component: _importAccount.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.CONNECT_HARDWARE_ROUTE,
      component: _connectHardware.default
    }))));
  }

}

exports.default = CreateAccountPage;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\index.js", {"../../../components/ui/dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","./json":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\json.js","./private-key":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\private-key.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\import-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _json = _interopRequireDefault(require("./json"));

var _privateKey = _interopRequireDefault(require("./private-key"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AccountImportSubview extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {});
  }

  getMenuItemTexts() {
    return [this.context.t('privateKey'), this.context.t('jsonFile')];
  }

  renderImportView() {
    const {
      type
    } = this.state;
    const menuItems = this.getMenuItemTexts();
    const current = type || menuItems[0];

    switch (current) {
      case this.context.t('privateKey'):
        return /*#__PURE__*/_react.default.createElement(_privateKey.default, null);

      case this.context.t('jsonFile'):
        return /*#__PURE__*/_react.default.createElement(_json.default, null);

      default:
        return /*#__PURE__*/_react.default.createElement(_json.default, null);
    }
  }

  render() {
    const menuItems = this.getMenuItemTexts();
    const {
      type
    } = this.state;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, t('importAccount')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('importAccountMsg'), /*#__PURE__*/_react.default.createElement("span", {
      className: "new-account-info-link",
      onClick: () => {
        global.platform.openTab({
          url: _zendeskUrl.default.IMPORTED_ACCOUNTS
        });
      }
    }, t('here')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__select-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__select-label"
    }, t('selectType')), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      className: "new-account-import-form__select",
      options: menuItems.map(text => ({
        value: text
      })),
      selectedOption: type || menuItems[0],
      onChange: value => {
        this.setState({
          type: value
        });
      }
    })), this.renderImportView()));
  }

}

exports.default = AccountImportSubview;

_defineProperty(AccountImportSubview, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\json.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","react-simple-file-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-simple-file-input\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\import-account\json.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactSimpleFileInput = _interopRequireDefault(require("react-simple-file-input"));

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _metametrics = require("../../../../shared/constants/metametrics");

var _history = require("../../../ducks/history/history");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class JsonImportSubview extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      fileContents: '',
      isEmpty: true
    });

    _defineProperty(this, "inputRef", /*#__PURE__*/_react.default.createRef());
  }

  render() {
    const {
      error,
      history,
      mostRecentOverviewPage
    } = this.props;
    const enabled = !this.state.isEmpty && this.state.fileContents !== '';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__json"
    }, /*#__PURE__*/_react.default.createElement("p", null, this.context.t('usedByClients')), /*#__PURE__*/_react.default.createElement("a", {
      className: "new-account-import-form__help-link",
      href: _zendeskUrl.default.IMPORTED_ACCOUNTS,
      target: "_blank",
      rel: "noopener noreferrer"
    }, this.context.t('fileImportFail')), /*#__PURE__*/_react.default.createElement(_reactSimpleFileInput.default, {
      readAs: "text",
      onLoad: this.onLoad.bind(this),
      style: {
        padding: '20px 0px 12px 15%',
        fontSize: '15px',
        display: 'flex',
        justifyContent: 'center',
        width: '100%'
      }
    }), /*#__PURE__*/_react.default.createElement("input", {
      className: "new-account-import-form__input-password",
      type: "password",
      placeholder: this.context.t('enterPassword'),
      id: "json-password-box",
      onKeyPress: this.createKeyringOnEnter.bind(this),
      onChange: () => this.checkInputEmpty(),
      ref: this.inputRef
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-create-form__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => history.push(mostRecentOverviewPage)
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => this.createNewKeychain(),
      disabled: !enabled
    }, this.context.t('import'))), error ? /*#__PURE__*/_react.default.createElement("span", {
      className: "error"
    }, error) : null);
  }

  onLoad(event) {
    this.setState({
      fileContents: event.target.result
    });
  }

  createKeyringOnEnter(event) {
    if (event.key === 'Enter') {
      event.preventDefault();
      this.createNewKeychain();
    }
  }

  createNewKeychain() {
    const {
      firstAddress,
      displayWarning,
      history,
      importNewJsonAccount,
      mostRecentOverviewPage,
      setSelectedAddress
    } = this.props;
    const {
      fileContents
    } = this.state;
    const {
      t
    } = this.context;

    if (!fileContents) {
      const message = t('needImportFile');
      displayWarning(message);
      return;
    }

    const password = this.inputRef.current.value;
    importNewJsonAccount([fileContents, password]).then(({
      selectedAddress
    }) => {
      if (selectedAddress) {
        history.push(mostRecentOverviewPage);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADDED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
            account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.JSON
          }
        });
        displayWarning(null);
      } else {
        displayWarning(t('importAccountError'));
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADD_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
            account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.JSON
          }
        });
        setSelectedAddress(firstAddress);
      }
    }).catch(err => err && displayWarning(err.message || err));
  }

  checkInputEmpty() {
    const password = this.inputRef.current.value;
    let isEmpty = true;

    if (password !== '') {
      isEmpty = false;
    }

    this.setState({
      isEmpty
    });
  }

}

JsonImportSubview.propTypes = {
  error: _propTypes.default.string,
  displayWarning: _propTypes.default.func,
  firstAddress: _propTypes.default.string,
  importNewJsonAccount: _propTypes.default.func,
  history: _propTypes.default.object,
  setSelectedAddress: _propTypes.default.func,
  mostRecentOverviewPage: _propTypes.default.string.isRequired
};

const mapStateToProps = state => {
  return {
    error: state.appState.warning,
    firstAddress: Object.keys((0, _selectors.getMetaMaskAccounts)(state))[0],
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    displayWarning: warning => dispatch(actions.displayWarning(warning)),
    importNewJsonAccount: options => dispatch(actions.importNewAccount('JSON File', options)),
    setSelectedAddress: address => dispatch(actions.setSelectedAddress(address))
  };
};

JsonImportSubview.contextTypes = {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(JsonImportSubview);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\import-account\\private-key.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\import-account\private-key.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _history = require("../../../ducks/history/history");

var _metametrics = require("../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PrivateKeyImportView extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "inputRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "state", {
      isEmpty: true
    });

    _defineProperty(this, "createKeyringOnEnter", event => {
      if (event.key === 'Enter') {
        event.preventDefault();
        this.createNewKeychain();
      }
    });
  }

  createNewKeychain() {
    const privateKey = this.inputRef.current.value;
    const {
      importNewAccount,
      history,
      displayWarning,
      mostRecentOverviewPage,
      setSelectedAddress,
      firstAddress
    } = this.props;
    const {
      t
    } = this.context;
    importNewAccount('Private Key', [privateKey]).then(({
      selectedAddress
    }) => {
      if (selectedAddress) {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADDED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
            account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.PRIVATE_KEY
          }
        });
        history.push(mostRecentOverviewPage);
        displayWarning(null);
      } else {
        displayWarning(t('importAccountError'));
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADD_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
            account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.PRIVATE_KEY
          }
        });
        setSelectedAddress(firstAddress);
      }
    }).catch(err => err && displayWarning(err.message || err));
  }

  checkInputEmpty() {
    const privateKey = this.inputRef.current.value;
    let isEmpty = true;

    if (privateKey !== '') {
      isEmpty = false;
    }

    this.setState({
      isEmpty
    });
  }

  render() {
    const {
      error,
      displayWarning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__private-key"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "new-account-import-form__instruction"
    }, this.context.t('pastePrivateKey')), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__private-key-password-container"
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: "new-account-import-form__input-password",
      type: "password",
      id: "private-key-box",
      onKeyPress: e => this.createKeyringOnEnter(e),
      onChange: () => this.checkInputEmpty(),
      ref: this.inputRef,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => {
        const {
          history,
          mostRecentOverviewPage
        } = this.props;
        displayWarning(null);
        history.push(mostRecentOverviewPage);
      }
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => this.createNewKeychain(),
      disabled: this.state.isEmpty
    }, this.context.t('import'))), error ? /*#__PURE__*/_react.default.createElement("span", {
      className: "error"
    }, error) : null);
  }

}

_defineProperty(PrivateKeyImportView, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(PrivateKeyImportView, "propTypes", {
  importNewAccount: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired,
  displayWarning: _propTypes.default.func.isRequired,
  setSelectedAddress: _propTypes.default.func.isRequired,
  firstAddress: _propTypes.default.string.isRequired,
  error: _propTypes.default.node,
  mostRecentOverviewPage: _propTypes.default.string.isRequired
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(PrivateKeyImportView);

exports.default = _default;

function mapStateToProps(state) {
  return {
    error: state.appState.warning,
    firstAddress: Object.keys((0, _selectors.getMetaMaskAccounts)(state))[0],
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    importNewAccount: (strategy, [privateKey]) => {
      return dispatch(actions.importNewAccount(strategy, [privateKey]));
    },
    displayWarning: message => dispatch(actions.displayWarning(message || null)),
    setSelectedAddress: address => dispatch(actions.setSelectedAddress(address))
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\index.js", {"./create-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\create-account.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createAccount.default;
  }
});

var _createAccount = _interopRequireDefault(require("./create-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\new-account.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\new-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _metametrics = require("../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NewAccountCreateForm extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      newAccountName: '',
      defaultAccountName: this.context.t('newAccountNumberName', [this.props.newAccountNumber])
    });
  }

  render() {
    const {
      newAccountName,
      defaultAccountName
    } = this.state;
    const {
      history,
      createAccount,
      mostRecentOverviewPage,
      accounts
    } = this.props;

    const createClick = event => {
      event.preventDefault();
      createAccount(newAccountName || defaultAccountName).then(() => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADDED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT
          }
        });
        history.push(mostRecentOverviewPage);
      }).catch(e => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.ACCOUNT_ADD_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT,
            error: e.message
          }
        });
      });
    };

    const accountNameExists = (allAccounts, accountName) => {
      return Boolean(allAccounts.find(item => item.name === accountName));
    };

    const existingAccountName = accountNameExists(accounts, newAccountName);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-create-form"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-create-form__input-label"
    }, this.context.t('accountName')), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("input", {
      className: (0, _classnames.default)('new-account-create-form__input', {
        'new-account-create-form__input__error': existingAccountName
      }),
      value: newAccountName,
      placeholder: defaultAccountName,
      onChange: event => this.setState({
        newAccountName: event.target.value
      }),
      autoFocus: true
    }), existingAccountName ? /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(' new-account-create-form__error', ' new-account-create-form__error-amount')
    }, this.context.t('accountNameDuplicate')) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-create-form__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => history.push(mostRecentOverviewPage)
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-account-create-form__button",
      onClick: createClick,
      disabled: existingAccountName
    }, this.context.t('create')))));
  }

}

exports.default = NewAccountCreateForm;

_defineProperty(NewAccountCreateForm, "defaultProps", {
  newAccountNumber: 0
});

NewAccountCreateForm.propTypes = {
  createAccount: _propTypes.default.func,
  newAccountNumber: _propTypes.default.number,
  history: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  accounts: _propTypes.default.array
};
NewAccountCreateForm.contextTypes = {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\new-account.container.js", {"../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./new-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\create-account\\new-account.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\create-account\new-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../store/actions"));

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors");

var _newAccount = _interopRequireDefault(require("./new-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mapStateToProps = state => {
  const {
    metamask: {
      identities = {}
    }
  } = state;
  const numberOfExistingAccounts = Object.keys(identities).length;
  const newAccountNumber = numberOfExistingAccounts + 1;
  return {
    newAccountNumber,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    accounts: (0, _selectors.getMetaMaskAccountsOrdered)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    createAccount: newAccountName => {
      return dispatch(actions.addNewAccount()).then(newAccountAddress => {
        if (newAccountName) {
          dispatch(actions.setAccountLabel(newAccountAddress, newAccountName));
        }
      });
    }
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_newAccount.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\error\\error.component.js", {"../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\error\error.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../app/scripts/lib/util");

var _app = require("../../../shared/constants/app");

var _common = require("../../helpers/constants/common");

var _metametrics = require("../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ErrorPage extends _react.PureComponent {
  renderErrorDetail(content) {
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("p", null, content));
  }

  renderErrorStack(title, stack) {
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("span", null, title), /*#__PURE__*/_react.default.createElement("pre", {
      className: "error-page__stack"
    }, stack));
  }

  render() {
    const {
      error
    } = this.props;
    const {
      t
    } = this.context;

    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

    const supportLink = /*#__PURE__*/_react.default.createElement("a", {
      target: "_blank",
      key: "metamaskSupportLink",
      rel: "noopener noreferrer",
      href: _common.SUPPORT_REQUEST_LINK,
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ERROR,
          event: _metametrics.EVENT_NAMES.SUPPORT_LINK_CLICKED,
          properties: {
            url: _common.SUPPORT_REQUEST_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.CONTEXT_PROPS.PAGE_TITLE]
        });
      }
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "error-page__link-text"
    }, this.context.t('here')));

    const message = isPopup ? t('errorPagePopupMessage', [supportLink]) : t('errorPageMessage', [supportLink]);
    return /*#__PURE__*/_react.default.createElement("section", {
      className: "error-page"
    }, /*#__PURE__*/_react.default.createElement("h1", {
      className: "error-page__header"
    }, t('errorPageTitle')), /*#__PURE__*/_react.default.createElement("h2", {
      className: "error-page__subheader"
    }, message), /*#__PURE__*/_react.default.createElement("section", {
      className: "error-page__details"
    }, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, t('errorDetails')), /*#__PURE__*/_react.default.createElement("ul", null, error.message ? this.renderErrorDetail(t('errorMessage', [error.message])) : null, error.code ? this.renderErrorDetail(t('errorCode', [error.code])) : null, error.name ? this.renderErrorDetail(t('errorName', [error.name])) : null, error.stack ? this.renderErrorStack(t('errorStack'), error.stack) : null))));
  }

}

_defineProperty(ErrorPage, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func
});

_defineProperty(ErrorPage, "propTypes", {
  error: _propTypes.default.object.isRequired
});

var _default = ErrorPage;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\error\\index.js", {"./error.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\error\\error.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\error\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _error.default;
  }
});

var _error = _interopRequireDefault(require("./error.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\create-password.component.js", {"../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","./import-with-seed-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\index.js","./new-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\new-account\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\create-password.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _routes = require("../../../helpers/constants/routes");

var _newAccount = _interopRequireDefault(require("./new-account"));

var _importWithSeedPhrase = _interopRequireDefault(require("./import-with-seed-phrase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CreatePassword extends _react.PureComponent {
  componentDidMount() {
    const {
      isInitialized,
      history
    } = this.props;

    if (isInitialized) {
      history.push(_routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE);
    }
  }

  render() {
    const {
      onCreateNewAccount,
      onCreateNewAccountFromSeed
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__wrapper"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_importWithSeedPhrase.default, _extends({}, routeProps, {
        onSubmit: onCreateNewAccountFromSeed
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_CREATE_PASSWORD_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_newAccount.default, _extends({}, routeProps, {
        onSubmit: onCreateNewAccount
      }))
    })));
  }

}

exports.default = CreatePassword;

_defineProperty(CreatePassword, "propTypes", {
  history: _propTypes.default.object,
  isInitialized: _propTypes.default.bool,
  onCreateNewAccount: _propTypes.default.func,
  onCreateNewAccountFromSeed: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\create-password.container.js", {"./create-password.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\create-password.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\create-password.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _createPassword = _interopRequireDefault(require("./create-password.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      isInitialized
    }
  } = state;
  return {
    isInitialized
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_createPassword.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\import-with-seed-phrase.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../components/app/create-new-vault":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\create-new-vault\\index.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\import-with-seed-phrase\import-with-seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _routes = require("../../../../helpers/constants/routes");

var _createNewVault = _interopRequireDefault(require("../../../../components/app/create-new-vault"));

var _metametrics = require("../../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ImportWithSeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleImport", async (password, seedPhrase) => {
      const {
        history,
        onSubmit,
        setSeedPhraseBackedUp
      } = this.props;
      await onSubmit(password, seedPhrase);
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
        event: _metametrics.EVENT_NAMES.WALLET_CREATED,
        properties: {
          account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
          account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.SRP
        }
      });
      await setSeedPhraseBackedUp(true);
      history.replace(_routes.INITIALIZE_END_OF_FLOW_ROUTE);
    });
  }

  UNSAFE_componentWillMount() {
    this._onBeforeUnload = () => this.context.trackEvent({
      category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
      event: _metametrics.EVENT_NAMES.WALLET_SETUP_FAILED,
      properties: {
        account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
        account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.SRP,
        reason: 'Seed Phrase Error',
        error: this.state.seedPhraseError
      }
    });

    window.addEventListener('beforeunload', this._onBeforeUnload);
  }

  componentWillUnmount() {
    window.removeEventListener('beforeunload', this._onBeforeUnload);
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__import"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__create-back"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: e => {
        e.preventDefault();
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.WALLET_SETUP_CANCELED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED,
            account_import_type: _metametrics.EVENT.ACCOUNT_IMPORT_TYPES.SRP,
            text: 'Back'
          }
        });
        this.props.history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
      },
      href: "#"
    }, `< ${t('back')}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('importAccountSeedPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('secretPhrase')), /*#__PURE__*/_react.default.createElement(_createNewVault.default, {
      includeTerms: true,
      onSubmit: this.handleImport,
      submitText: t('import')
    }));
  }

}

exports.default = ImportWithSeedPhrase;

_defineProperty(ImportWithSeedPhrase, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(ImportWithSeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  onSubmit: _propTypes.default.func.isRequired,
  setSeedPhraseBackedUp: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\import-with-seed-phrase.container.js", {"../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./import-with-seed-phrase.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\import-with-seed-phrase.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\import-with-seed-phrase\import-with-seed-phrase.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _importWithSeedPhrase = _interopRequireDefault(require("./import-with-seed-phrase.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    setSeedPhraseBackedUp: seedPhraseBackupState => dispatch((0, _actions.setSeedPhraseBackedUp)(seedPhraseBackupState))
  };
};

var _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_importWithSeedPhrase.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\index.js", {"./import-with-seed-phrase.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\import-with-seed-phrase\\import-with-seed-phrase.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\import-with-seed-phrase\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importWithSeedPhrase.default;
  }
});

var _importWithSeedPhrase = _interopRequireDefault(require("./import-with-seed-phrase.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\index.js", {"./create-password.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\create-password.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createPassword.default;
  }
});

var _createPassword = _interopRequireDefault(require("./create-password.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\new-account\\index.js", {"./new-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\new-account\\new-account.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\new-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _newAccount.default;
  }
});

var _newAccount = _interopRequireDefault(require("./new-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\new-account\\new-account.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\create-password\new-account\new-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _routes = require("../../../../helpers/constants/routes");

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _metametrics = require("../../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NewAccount extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      password: '',
      confirmPassword: '',
      passwordError: '',
      confirmPasswordError: '',
      termsChecked: false
    });

    _defineProperty(this, "handleCreate", async event => {
      event.preventDefault();

      if (!this.isValid()) {
        return;
      }

      const {
        password
      } = this.state;
      const {
        onSubmit,
        history
      } = this.props;

      try {
        await onSubmit(password);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.ACCOUNT_PASSWORD_CREATED,
          properties: {}
        });
        history.push(_routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE);
      } catch (error) {
        this.setState({
          passwordError: error.message
        });
      }
    });

    _defineProperty(this, "toggleTermsCheck", () => {
      this.setState(prevState => ({
        termsChecked: !prevState.termsChecked
      }));
    });

    _defineProperty(this, "onTermsKeyPress", ({
      key
    }) => {
      if (key === ' ' || key === 'Enter') {
        this.toggleTermsCheck();
      }
    });
  }

  isValid() {
    const {
      password,
      confirmPassword,
      passwordError,
      confirmPasswordError
    } = this.state;

    if (!password || !confirmPassword || password !== confirmPassword) {
      return false;
    }

    if (password.length < 8) {
      return false;
    }

    return !passwordError && !confirmPasswordError;
  }

  handlePasswordChange(password) {
    const {
      t
    } = this.context;
    this.setState(state => {
      const {
        confirmPassword
      } = state;
      let passwordError = '';
      let confirmPasswordError = '';

      if (password && password.length < 8) {
        passwordError = t('passwordNotLongEnough');
      }

      if (confirmPassword && password !== confirmPassword) {
        confirmPasswordError = t('passwordsDontMatch');
      }

      return {
        password,
        passwordError,
        confirmPasswordError
      };
    });
  }

  handleConfirmPasswordChange(confirmPassword) {
    const {
      t
    } = this.context;
    this.setState(state => {
      const {
        password
      } = state;
      let confirmPasswordError = '';

      if (password !== confirmPassword) {
        confirmPasswordError = t('passwordsDontMatch');
      }

      return {
        confirmPassword,
        confirmPasswordError
      };
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      password,
      confirmPassword,
      passwordError,
      confirmPasswordError,
      termsChecked
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__create-back"
    }, /*#__PURE__*/_react.default.createElement("a", {
      "data-testid": "onboarding-back-button",
      onClick: e => {
        e.preventDefault();
        this.props.history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
      },
      href: "#"
    }, `< ${t('back')}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('createPassword')), /*#__PURE__*/_react.default.createElement("form", {
      className: "first-time-flow__form",
      onSubmit: this.handleCreate
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      "data-testid": "create-password",
      id: "create-password",
      label: t('newPassword'),
      type: "password",
      className: "first-time-flow__input",
      value: password,
      onChange: event => this.handlePasswordChange(event.target.value),
      error: passwordError,
      autoFocus: true,
      autoComplete: "new-password",
      margin: "normal",
      fullWidth: true,
      largeLabel: true
    }), /*#__PURE__*/_react.default.createElement(_textField.default, {
      "data-testid": "confirm-password",
      id: "confirm-password",
      label: t('confirmPassword'),
      type: "password",
      className: "first-time-flow__input",
      value: confirmPassword,
      onChange: event => this.handleConfirmPasswordChange(event.target.value),
      error: confirmPasswordError,
      autoComplete: "confirm-password",
      margin: "normal",
      fullWidth: true,
      largeLabel: true
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox-container",
      onClick: this.toggleTermsCheck
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox",
      tabIndex: "0",
      role: "checkbox",
      onKeyPress: this.onTermsKeyPress,
      "aria-checked": termsChecked,
      "aria-labelledby": "ftf-chk1-label"
    }, termsChecked ? /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check fa-2x"
    }) : null), /*#__PURE__*/_react.default.createElement("span", {
      id: "ftf-chk1-label",
      className: "first-time-flow__checkbox-label"
    }, t('acceptTermsOfUse', [/*#__PURE__*/_react.default.createElement("a", {
      onClick: e => e.stopPropagation(),
      key: "first-time-flow__link-text",
      href: "https://metamask.io/terms.html",
      target: "_blank",
      rel: "noopener noreferrer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, t('terms')))]))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      disabled: !this.isValid() || !termsChecked,
      onClick: this.handleCreate
    }, t('create'))));
  }

}

exports.default = NewAccount;

_defineProperty(NewAccount, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

_defineProperty(NewAccount, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\end-of-flow.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../components/ui/snackbar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\snackbar\\index.js","../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../onboarding-initiator-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\onboarding-initiator-util.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\end-of-flow\end-of-flow.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _snackbar = _interopRequireDefault(require("../../../components/ui/snackbar"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _common = require("../../../helpers/constants/common");

var _routes = require("../../../helpers/constants/routes");

var _onboardingInitiatorUtil = require("../onboarding-initiator-util");

var _metametrics = require("../../../../shared/constants/metametrics");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class EndOfFlowScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onComplete", async () => {
      const {
        history,
        onboardingInitiator
      } = this.props;

      this._removeBeforeUnload();

      await this._onOnboardingComplete();

      if (onboardingInitiator) {
        await (0, _onboardingInitiatorUtil.returnToOnboardingInitiatorTab)(onboardingInitiator);
      }

      history.push(_routes.DEFAULT_ROUTE);
    });

    _defineProperty(this, "componentWillUnmount", () => {
      this._removeBeforeUnload();
    });
  }

  async _beforeUnload() {
    await this._onOnboardingComplete();
  }

  _removeBeforeUnload() {
    window.removeEventListener('beforeunload', this._beforeUnload);
  }

  async _onOnboardingComplete() {
    const {
      setCompletedOnboarding,
      setOnBoardedInThisUISession
    } = this.props;
    setOnBoardedInThisUISession(true);
    await setCompletedOnboarding();
  }

  componentDidMount() {
    window.addEventListener('beforeunload', this._beforeUnload.bind(this));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      onboardingInitiator
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow",
      "data-testid": "end-of-flow"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__emoji"
    }, "\uD83C\uDF89"), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('congratulations')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-1"
    }, t('endOfFlowMessage1')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-2"
    }, t('endOfFlowMessage2')), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage3')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage4')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage5')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage6')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, "\u2022", ' ', t('endOfFlowMessage7', [/*#__PURE__*/_react.default.createElement("a", {
      target: "_blank",
      key: "metamaskSupportLink",
      rel: "noopener noreferrer",
      href: _common.SUPPORT_REQUEST_LINK,
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.SUPPORT_LINK_CLICKED,
          properties: {
            url: _common.SUPPORT_REQUEST_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.CONTEXT_PROPS.PAGE_TITLE]
        });
      }
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, this.context.t('here')))])), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-4"
    }, `*${t('endOfFlowMessage8')}`, "\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: _zendeskUrl.default.BASIC_SAFETY,
      target: "_blank",
      rel: "noopener noreferrer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, t('endOfFlowMessage9')))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.onComplete,
      "data-testid": "EOF-complete-button"
    }, t('endOfFlowMessage10')), onboardingInitiator ? /*#__PURE__*/_react.default.createElement(_snackbar.default, {
      content: t('onboardingReturnNotice', [t('endOfFlowMessage10'), onboardingInitiator.location])
    }) : null);
  }

}

exports.default = EndOfFlowScreen;

_defineProperty(EndOfFlowScreen, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func,
  setOnBoardedInThisUISession: _propTypes.default.func
});

_defineProperty(EndOfFlowScreen, "propTypes", {
  history: _propTypes.default.object,
  setCompletedOnboarding: _propTypes.default.func,
  onboardingInitiator: _propTypes.default.exact({
    location: _propTypes.default.string,
    tabId: _propTypes.default.number
  }),
  setOnBoardedInThisUISession: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\end-of-flow.container.js", {"../../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./end-of-flow.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\end-of-flow.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\end-of-flow\end-of-flow.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _actions = require("../../../store/actions");

var _app = require("../../../ducks/app/app");

var _endOfFlow = _interopRequireDefault(require("./end-of-flow.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    onboardingInitiator: (0, _selectors.getOnboardingInitiator)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setCompletedOnboarding: () => dispatch((0, _actions.setCompletedOnboarding)()),
    setOnBoardedInThisUISession: value => dispatch((0, _app.setOnBoardedInThisUISession)(value))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_endOfFlow.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\index.js", {"./end-of-flow.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\end-of-flow.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\end-of-flow\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _endOfFlow.default;
  }
});

var _endOfFlow = _interopRequireDefault(require("./end-of-flow.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\first-time-flow-switch.component.js", {"../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\first-time-flow-switch\first-time-flow-switch.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FirstTimeFlowSwitch extends _react.PureComponent {
  render() {
    const {
      completedOnboarding,
      isInitialized,
      isUnlocked,
      seedPhraseBackedUp
    } = this.props;

    if (completedOnboarding) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.DEFAULT_ROUTE
        }
      });
    }

    if (seedPhraseBackedUp !== null) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.INITIALIZE_END_OF_FLOW_ROUTE
        }
      });
    }

    if (isUnlocked) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.LOCK_ROUTE
        }
      });
    }

    if (!isInitialized) {
      /* eslint-disable prefer-const */
      let redirect; ///: BEGIN:ONLY_INCLUDE_IN(main,beta)

      redirect = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.INITIALIZE_WELCOME_ROUTE
        }
      }); ///: END:ONLY_INCLUDE_IN

      /* eslint-enable prefer-const */

      return redirect;
    }

    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.INITIALIZE_UNLOCK_ROUTE
      }
    });
  }

}

exports.default = FirstTimeFlowSwitch;

_defineProperty(FirstTimeFlowSwitch, "propTypes", {
  completedOnboarding: _propTypes.default.bool,
  isInitialized: _propTypes.default.bool,
  isUnlocked: _propTypes.default.bool,
  seedPhraseBackedUp: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\first-time-flow-switch.container.js", {"./first-time-flow-switch.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\first-time-flow-switch.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\first-time-flow-switch\first-time-flow-switch.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _firstTimeFlowSwitch = _interopRequireDefault(require("./first-time-flow-switch.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = ({
  metamask
}) => {
  const {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    seedPhraseBackedUp
  } = metamask;
  return {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    seedPhraseBackedUp
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_firstTimeFlowSwitch.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\index.js", {"./first-time-flow-switch.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\first-time-flow-switch.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\first-time-flow-switch\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _firstTimeFlowSwitch.default;
  }
});

var _firstTimeFlowSwitch = _interopRequireDefault(require("./first-time-flow-switch.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow.component.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../unlock-page":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\index.js","./create-password":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\create-password\\index.js","./end-of-flow":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\end-of-flow\\index.js","./first-time-flow-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow-switch\\index.js","./metametrics-opt-in":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\index.js","./seed-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\index.js","./select-action":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\index.js","./welcome":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\first-time-flow.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _unlockPage = _interopRequireDefault(require("../unlock-page"));

var _routes = require("../../helpers/constants/routes");

var _firstTimeFlowSwitch = _interopRequireDefault(require("./first-time-flow-switch"));

var _welcome = _interopRequireDefault(require("./welcome"));

var _selectAction = _interopRequireDefault(require("./select-action"));

var _endOfFlow = _interopRequireDefault(require("./end-of-flow"));

var _createPassword = _interopRequireDefault(require("./create-password"));

var _seedPhrase = _interopRequireDefault(require("./seed-phrase"));

var _metametricsOptIn = _interopRequireDefault(require("./metametrics-opt-in"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FirstTimeFlow extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      seedPhrase: ''
    });

    _defineProperty(this, "handleCreateNewAccount", async password => {
      const {
        createNewAccount
      } = this.props;

      try {
        const seedPhrase = await createNewAccount(password);
        this.setState({
          seedPhrase
        });
      } catch (error) {
        throw new Error(error.message);
      }
    });

    _defineProperty(this, "handleImportWithSeedPhrase", async (password, seedPhrase) => {
      const {
        createNewAccountFromSeed
      } = this.props;

      try {
        const vault = await createNewAccountFromSeed(password, seedPhrase);
        return vault;
      } catch (error) {
        throw new Error(error.message);
      }
    });

    _defineProperty(this, "handleUnlock", async password => {
      const {
        unlockAccount,
        history,
        nextRoute
      } = this.props;

      try {
        const seedPhrase = await unlockAccount(password);
        this.setState({
          seedPhrase
        }, () => {
          history.push(nextRoute);
        });
      } catch (error) {
        throw new Error(error.message);
      }
    });
  }

  componentDidMount() {
    const {
      completedOnboarding,
      history,
      isInitialized,
      isUnlocked,
      showingSeedPhraseBackupAfterOnboarding,
      seedPhraseBackedUp
    } = this.props;

    if (completedOnboarding && (!showingSeedPhraseBackupAfterOnboarding || seedPhraseBackedUp)) {
      history.push(_routes.DEFAULT_ROUTE);
      return;
    }

    if (isInitialized && !isUnlocked) {
      history.push(_routes.INITIALIZE_UNLOCK_ROUTE);
    }
  }

  render() {
    const {
      seedPhrase
    } = this.state;
    const {
      verifySeedPhrase
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow"
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_seedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase,
        verifySeedPhrase: verifySeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_seedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase,
        verifySeedPhrase: verifySeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_seedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase,
        verifySeedPhrase: verifySeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_CREATE_PASSWORD_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_createPassword.default, _extends({}, routeProps, {
        onCreateNewAccount: this.handleCreateNewAccount,
        onCreateNewAccountFromSeed: this.handleImportWithSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_SELECT_ACTION_ROUTE,
      component: _selectAction.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_UNLOCK_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_unlockPage.default, _extends({}, routeProps, {
        onSubmit: this.handleUnlock
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_END_OF_FLOW_ROUTE,
      component: _endOfFlow.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_WELCOME_ROUTE,
      component: _welcome.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_METAMETRICS_OPT_IN_ROUTE,
      component: _metametricsOptIn.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: "*",
      component: _firstTimeFlowSwitch.default
    })));
  }

}

exports.default = FirstTimeFlow;

_defineProperty(FirstTimeFlow, "propTypes", {
  completedOnboarding: _propTypes.default.bool,
  createNewAccount: _propTypes.default.func,
  createNewAccountFromSeed: _propTypes.default.func,
  history: _propTypes.default.object,
  isInitialized: _propTypes.default.bool,
  isUnlocked: _propTypes.default.bool,
  unlockAccount: _propTypes.default.func,
  nextRoute: _propTypes.default.string,
  showingSeedPhraseBackupAfterOnboarding: _propTypes.default.bool,
  seedPhraseBackedUp: _propTypes.default.bool,
  verifySeedPhrase: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow.container.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./first-time-flow.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\first-time-flow.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _firstTimeFlow = _interopRequireDefault(require("./first-time-flow.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      completedOnboarding,
      isInitialized,
      isUnlocked,
      seedPhraseBackedUp
    }
  } = state;
  const showingSeedPhraseBackupAfterOnboarding = Boolean(ownProps.location.pathname.match(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE));
  return {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    nextRoute: (0, _selectors.getFirstTimeFlowTypeRoute)(state),
    showingSeedPhraseBackupAfterOnboarding,
    seedPhraseBackedUp
  };
};

const mapDispatchToProps = dispatch => {
  return {
    createNewAccount: password => dispatch((0, _actions.createNewVaultAndGetSeedPhrase)(password)),
    createNewAccountFromSeed: (password, seedPhrase) => {
      return dispatch((0, _actions.createNewVaultAndRestore)(password, seedPhrase));
    },
    unlockAccount: password => dispatch((0, _actions.unlockAndGetSeedPhrase)(password)),
    verifySeedPhrase: () => (0, _actions.verifySeedPhrase)()
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_firstTimeFlow.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\index.js", {"./first-time-flow.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\first-time-flow.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _firstTimeFlow.default;
  }
});

var _firstTimeFlow = _interopRequireDefault(require("./first-time-flow.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\index.js", {"./metametrics-opt-in.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\metametrics-opt-in.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\metametrics-opt-in\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metametricsOptIn.default;
  }
});

var _metametricsOptIn = _interopRequireDefault(require("./metametrics-opt-in.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\metametrics-opt-in.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../components/ui/page-container/page-container-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\metametrics-opt-in\metametrics-opt-in.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));

var _metametrics = require("../../../../shared/constants/metametrics");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MetaMetricsOptIn extends _react.Component {
  render() {
    const {
      trackEvent,
      t
    } = this.context;
    const {
      history,
      setParticipateInMetaMetrics,
      participateInMetaMetrics
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__main"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body-graphic"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/metrics-chart.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__title"
    }, t('metametricsHelpImproveMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsOptInDescription')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsCommitmentsIntro')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__committments"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsAllowOptOut'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsSendAnonymizedEvents'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row metametrics-opt-in__break-row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectKeysEtc', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectKeys"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectIP', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectIP"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverSellDataForProfit', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverSellData"
    }, t('metametricsCommitmentsBoldNever'))]))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__footer"
    }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: async () => {
        await setParticipateInMetaMetrics(false);
        history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
      },
      cancelText: t('noThanks'),
      hideCancel: false,
      onSubmit: async () => {
        await setParticipateInMetaMetrics(true);

        try {
          if (participateInMetaMetrics === null || participateInMetaMetrics === false) {
            await trackEvent({
              category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
              event: _metametrics.EVENT_NAMES.METRICS_OPT_IN,
              properties: {
                action: 'Metrics Option',
                legacy_event: true
              }
            }, {
              isOptIn: true,
              flushImmediately: true
            });
          }
        } finally {
          history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
        }
      },
      submitText: t('affirmAgree'),
      disabled: false
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__bottom-text"
    }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
      key: "metametrics-bottom-text-wrapper",
      href: "https://metamask.io/privacy.html",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('gdprMessagePrivacyPolicy'))])))));
  }

}

exports.default = MetaMetricsOptIn;

_defineProperty(MetaMetricsOptIn, "propTypes", {
  history: _propTypes.default.object,
  setParticipateInMetaMetrics: _propTypes.default.func,
  participateInMetaMetrics: _propTypes.default.bool
});

_defineProperty(MetaMetricsOptIn, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\metametrics-opt-in.container.js", {"../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./metametrics-opt-in.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\metametrics-opt-in\\metametrics-opt-in.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\metametrics-opt-in\metametrics-opt-in.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

var _metametricsOptIn = _interopRequireDefault(require("./metametrics-opt-in.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const firstTimeFlowTypeNameMap = {
  create: 'Selected Create New Wallet',
  import: 'Selected Import Wallet'
};

const mapStateToProps = state => {
  const {
    firstTimeFlowType,
    participateInMetaMetrics
  } = state.metamask;
  return {
    firstTimeSelectionMetaMetricsName: firstTimeFlowTypeNameMap[firstTimeFlowType],
    participateInMetaMetrics
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_metametricsOptIn.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\onboarding-initiator-util.js", {"loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","webextension-polyfill":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\onboarding-initiator-util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.returnToOnboardingInitiatorTab = void 0;

var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

var _loglevel = _interopRequireDefault(require("loglevel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const returnToOnboardingInitiatorTab = async onboardingInitiator => {
  let tab;

  try {
    tab = await _webextensionPolyfill.default.tabs.update(onboardingInitiator.id, {
      active: true
    });
  } catch (error) {
    _loglevel.default.debug(`An error occurred while updating tabs in returnToOnboardingInitiatorTab: ${error.message}`);
  }

  if (tab) {
    window.close();
  } else {
    // this case can happen if the tab was closed since being checked with `browser.tabs.get`
    _loglevel.default.warn(`Setting current tab to onboarding initiator has failed; falling back to redirect`);

    window.location.assign(onboardingInitiator.location);
  }
};

exports.returnToOnboardingInitiatorTab = returnToOnboardingInitiatorTab;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\confirm-seed-phrase.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../helpers/utils/export-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\export-utils.js","./draggable-seed.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\draggable-seed.component.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\confirm-seed-phrase\confirm-seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _routes = require("../../../../helpers/constants/routes");

var _metametrics = require("../../../../../shared/constants/metametrics");

var _exportUtils = require("../../../../helpers/utils/export-utils");

var _draggableSeed = _interopRequireDefault(require("./draggable-seed.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EMPTY_SEEDS = Array(12).fill(null);

class ConfirmSeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      selectedSeedIndices: [],
      sortedSeedWords: [],
      pendingSeedIndices: [],
      draggingSeedIndex: -1,
      hoveringIndex: -1
    });

    _defineProperty(this, "setDraggingSeedIndex", draggingSeedIndex => this.setState({
      draggingSeedIndex
    }));

    _defineProperty(this, "setHoveringIndex", hoveringIndex => this.setState({
      hoveringIndex
    }));

    _defineProperty(this, "onDrop", targetIndex => {
      const {
        selectedSeedIndices,
        draggingSeedIndex
      } = this.state;
      const indices = insert(selectedSeedIndices, draggingSeedIndex, targetIndex, true);
      this.setState({
        selectedSeedIndices: indices,
        pendingSeedIndices: indices,
        draggingSeedIndex: -1,
        hoveringIndex: -1
      });
    });

    _defineProperty(this, "handleExport", () => {
      (0, _exportUtils.exportAsFile)('', this.props.seedPhrase, 'text/plain');
    });

    _defineProperty(this, "handleSubmit", async () => {
      const {
        history,
        setSeedPhraseBackedUp
      } = this.props;

      if (!this.isValid()) {
        return;
      }

      try {
        setSeedPhraseBackedUp(true).then(async () => {
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
            event: _metametrics.EVENT_NAMES.WALLET_CREATED,
            properties: {
              account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT,
              is_backup_skipped: false
            }
          });
          history.replace(_routes.INITIALIZE_END_OF_FLOW_ROUTE);
        });
      } catch (error) {
        console.error(error.message);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.WALLET_SETUP_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT,
            is_backup_skipped: false,
            reason: 'Seed Phrase Creation Error',
            error: error.message
          }
        });
      }
    });

    _defineProperty(this, "handleSelectSeedWord", index => {
      this.setState({
        selectedSeedIndices: [...this.state.selectedSeedIndices, index],
        pendingSeedIndices: [...this.state.pendingSeedIndices, index]
      });
    });

    _defineProperty(this, "handleDeselectSeedWord", index => {
      this.setState({
        selectedSeedIndices: this.state.selectedSeedIndices.filter(i => index !== i),
        pendingSeedIndices: this.state.pendingSeedIndices.filter(i => index !== i)
      });
    });
  }

  componentDidMount() {
    const {
      seedPhrase = ''
    } = this.props;
    const sortedSeedWords = (seedPhrase.split(' ') || []).sort();
    this.setState({
      sortedSeedWords
    });
  }

  isValid() {
    const {
      seedPhrase
    } = this.props;
    const {
      selectedSeedIndices,
      sortedSeedWords
    } = this.state;
    const selectedSeedWords = selectedSeedIndices.map(i => sortedSeedWords[i]);
    return seedPhrase === selectedSeedWords.join(' ');
  }

  render() {
    const {
      t
    } = this.context;
    const {
      history
    } = this.props;
    const {
      selectedSeedIndices,
      sortedSeedWords,
      draggingSeedIndex
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-seed-phrase",
      "data-testid": "confirm-seed-phrase"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-seed-phrase__back-button"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: e => {
        e.preventDefault();
        history.push(_routes.INITIALIZE_SEED_PHRASE_ROUTE);
      },
      href: "#"
    }, `< ${t('back')}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('confirmSecretBackupPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('selectEachPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('confirm-seed-phrase__selected-seed-words', {
        'confirm-seed-phrase__selected-seed-words--dragging': draggingSeedIndex > -1
      })
    }, this.renderPendingSeeds(), this.renderSelectedSeeds()), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-seed-phrase__sorted-seed-words",
      "data-testid": "seed-phrase-sorted"
    }, sortedSeedWords.map((word, index) => {
      const isSelected = selectedSeedIndices.includes(index);
      return /*#__PURE__*/_react.default.createElement(_draggableSeed.default, {
        key: index,
        seedIndex: index,
        index: index,
        setHoveringIndex: this.setHoveringIndex,
        onDrop: this.onDrop,
        className: "confirm-seed-phrase__seed-word--sorted",
        selected: isSelected,
        onClick: () => {
          if (isSelected) {
            this.handleDeselectSeedWord(index);
          } else {
            this.handleSelectSeedWord(index);
          }
        },
        word: word
      });
    })), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleSubmit,
      disabled: !this.isValid()
    }, t('confirm')));
  }

  renderSelectedSeeds() {
    const {
      sortedSeedWords,
      selectedSeedIndices,
      draggingSeedIndex
    } = this.state;
    return EMPTY_SEEDS.map((_, index) => {
      const seedIndex = selectedSeedIndices[index];
      const word = sortedSeedWords[seedIndex];
      return /*#__PURE__*/_react.default.createElement(_draggableSeed.default, {
        key: `selected-${seedIndex}-${index}`,
        className: "confirm-seed-phrase__selected-seed-words__selected-seed",
        index: index,
        seedIndex: seedIndex,
        word: word,
        draggingSeedIndex: draggingSeedIndex,
        setDraggingSeedIndex: this.setDraggingSeedIndex,
        setHoveringIndex: this.setHoveringIndex,
        onDrop: this.onDrop,
        draggable: true
      });
    });
  }

  renderPendingSeeds() {
    const {
      pendingSeedIndices,
      sortedSeedWords,
      draggingSeedIndex,
      hoveringIndex
    } = this.state;
    const indices = insert(pendingSeedIndices, draggingSeedIndex, hoveringIndex);
    return EMPTY_SEEDS.map((_, index) => {
      const seedIndex = indices[index];
      const word = sortedSeedWords[seedIndex];
      return /*#__PURE__*/_react.default.createElement(_draggableSeed.default, {
        key: `pending-${seedIndex}-${index}`,
        index: index,
        className: (0, _classnames.default)('confirm-seed-phrase__selected-seed-words__pending-seed', {
          'confirm-seed-phrase__seed-word--hidden': draggingSeedIndex === seedIndex && index !== hoveringIndex
        }),
        seedIndex: seedIndex,
        word: word,
        draggingSeedIndex: draggingSeedIndex,
        setDraggingSeedIndex: this.setDraggingSeedIndex,
        setHoveringIndex: this.setHoveringIndex,
        onDrop: this.onDrop,
        droppable: Boolean(word)
      });
    });
  }

}

exports.default = ConfirmSeedPhrase;

_defineProperty(ConfirmSeedPhrase, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

_defineProperty(ConfirmSeedPhrase, "defaultProps", {
  seedPhrase: ''
});

_defineProperty(ConfirmSeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  seedPhrase: _propTypes.default.string,
  setSeedPhraseBackedUp: _propTypes.default.func
});

function insert(list, value, target, removeOld) {
  let nextList = [...list];

  if (typeof list[target] === 'number') {
    nextList = [...list.slice(0, target), value, ...list.slice(target)];
  }

  if (removeOld) {
    nextList = nextList.filter((seed, i) => {
      return seed !== value || i === target;
    });
  }

  return nextList;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\confirm-seed-phrase.container.js", {"../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-seed-phrase.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\confirm-seed-phrase.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\confirm-seed-phrase\confirm-seed-phrase.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _confirmSeedPhrase = _interopRequireDefault(require("./confirm-seed-phrase.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    setSeedPhraseBackedUp: seedPhraseBackupState => dispatch((0, _actions.setSeedPhraseBackedUp)(seedPhraseBackupState))
  };
};

var _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_confirmSeedPhrase.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\draggable-seed.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dnd":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dnd\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\confirm-seed-phrase\draggable-seed.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDnd = require("react-dnd");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DraggableSeed extends _react.Component {
  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      isOver,
      setHoveringIndex
    } = this.props;

    if (isOver && !nextProps.isOver) {
      setHoveringIndex(-1);
    }
  }

  render() {
    const {
      connectDragSource,
      connectDropTarget,
      isDragging,
      index,
      word,
      selected,
      className,
      onClick,
      isOver,
      canDrop
    } = this.props;
    return connectDropTarget(connectDragSource( /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: (0, _classnames.default)('btn-secondary notranslate confirm-seed-phrase__seed-word', className, {
        'confirm-seed-phrase__seed-word--selected btn-primary': selected,
        'confirm-seed-phrase__seed-word--dragging': isDragging,
        'confirm-seed-phrase__seed-word--empty': !word,
        'confirm-seed-phrase__seed-word--active-drop': !isOver && canDrop,
        'confirm-seed-phrase__seed-word--drop-hover': isOver && canDrop
      }),
      onClick: onClick,
      "data-testid": `draggable-seed-${selected ? 'selected-' : ''}${word}`
    }, word)));
  }

}

_defineProperty(DraggableSeed, "propTypes", {
  // React DnD Props
  connectDragSource: _propTypes.default.func.isRequired,
  connectDropTarget: _propTypes.default.func.isRequired,
  isDragging: _propTypes.default.bool,
  isOver: _propTypes.default.bool,
  canDrop: _propTypes.default.bool,
  // Own Props
  onClick: _propTypes.default.func,
  setHoveringIndex: _propTypes.default.func.isRequired,
  index: _propTypes.default.number,
  word: _propTypes.default.string,
  className: _propTypes.default.string,
  selected: _propTypes.default.bool
});

_defineProperty(DraggableSeed, "defaultProps", {
  className: '',
  onClick: undefined
});

const SEEDWORD = 'SEEDWORD';
const seedSource = {
  beginDrag(props) {
    setTimeout(() => props.setDraggingSeedIndex(props.seedIndex), 0);
    return {
      seedIndex: props.seedIndex,
      word: props.word
    };
  },

  canDrag(props) {
    return props.draggable;
  },

  endDrag(props, monitor) {
    const dropTarget = monitor.getDropResult();

    if (!dropTarget) {
      setTimeout(() => props.setDraggingSeedIndex(-1), 0);
      return;
    }

    props.onDrop(dropTarget.targetIndex);
  }

};
const seedTarget = {
  drop(props) {
    return {
      targetIndex: props.index
    };
  },

  canDrop(props) {
    return props.droppable;
  },

  hover(props) {
    props.setHoveringIndex(props.index);
  }

};

const collectDrag = (connect, monitor) => {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
  };
};

const collectDrop = (connect, monitor) => {
  return {
    connectDropTarget: connect.dropTarget(),
    isOver: monitor.isOver(),
    canDrop: monitor.canDrop()
  };
};

var _default = (0, _reactDnd.DropTarget)(SEEDWORD, seedTarget, collectDrop)((0, _reactDnd.DragSource)(SEEDWORD, seedSource, collectDrag)(DraggableSeed));

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\index.js", {"./confirm-seed-phrase.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\confirm-seed-phrase.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\confirm-seed-phrase\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSeedPhrase.default;
  }
});

var _confirmSeedPhrase = _interopRequireDefault(require("./confirm-seed-phrase.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\index.js", {"./seed-phrase.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _seedPhrase.default;
  }
});

var _seedPhrase = _interopRequireDefault(require("./seed-phrase.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\index.js", {"./reveal-seed-phrase.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\reveal-seed-phrase.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\reveal-seed-phrase\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _revealSeedPhrase.default;
  }
});

var _revealSeedPhrase = _interopRequireDefault(require("./reveal-seed-phrase.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\reveal-seed-phrase.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/lock-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\lock-icon\\index.js","../../../../components/ui/snackbar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\snackbar\\index.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../helpers/utils/export-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\export-utils.js","../../onboarding-initiator-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\onboarding-initiator-util.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\reveal-seed-phrase\reveal-seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _box = _interopRequireDefault(require("../../../../components/ui/box"));

var _lockIcon = _interopRequireDefault(require("../../../../components/ui/lock-icon"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _snackbar = _interopRequireDefault(require("../../../../components/ui/snackbar"));

var _routes = require("../../../../helpers/constants/routes");

var _metametrics = require("../../../../../shared/constants/metametrics");

var _onboardingInitiatorUtil = require("../../onboarding-initiator-util");

var _exportUtils = require("../../../../helpers/utils/export-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RevealSeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isShowingSeedPhrase: false
    });

    _defineProperty(this, "handleExport", () => {
      (0, _exportUtils.exportAsFile)('', this.props.seedPhrase, 'text/plain');
    });

    _defineProperty(this, "handleNext", () => {
      const {
        isShowingSeedPhrase
      } = this.state;
      const {
        history
      } = this.props;
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
        event: _metametrics.EVENT_NAMES.SRP_TO_CONFIRM_BACKUP,
        properties: {}
      });

      if (!isShowingSeedPhrase) {
        return;
      }

      history.replace(_routes.INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE);
    });

    _defineProperty(this, "handleSkip", async () => {
      const {
        history,
        setSeedPhraseBackedUp,
        setCompletedOnboarding,
        onboardingInitiator
      } = this.props;
      await Promise.all([setCompletedOnboarding(), setSeedPhraseBackedUp(false)]).then(() => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.WALLET_CREATED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT,
            is_backup_skipped: true
          }
        });
      }).catch(error => {
        console.error(error.message);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.WALLET_SETUP_FAILED,
          properties: {
            account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT,
            is_backup_skipped: true,
            reason: 'Seed Phrase Creation Error',
            error: error.message
          }
        });
      });

      if (onboardingInitiator) {
        await (0, _onboardingInitiatorUtil.returnToOnboardingInitiatorTab)(onboardingInitiator);
      }

      history.replace(_routes.DEFAULT_ROUTE);
    });
  }

  renderSecretWordsContainer() {
    const {
      t
    } = this.context;
    const {
      seedPhrase
    } = this.props;
    const {
      isShowingSeedPhrase
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed-phrase__secret"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('reveal-seed-phrase__secret-words notranslate', {
        'reveal-seed-phrase__secret-words--hidden': !isShowingSeedPhrase
      })
    }, seedPhrase), !isShowingSeedPhrase && /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed-phrase__secret-blocker",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_REVEALED,
          properties: {}
        });
        this.setState({
          isShowingSeedPhrase: true
        });
      }
    }, /*#__PURE__*/_react.default.createElement(_lockIcon.default, {
      width: "28px",
      height: "35px",
      fill: "var(--color-overlay-inverse)"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed-phrase__reveal-button"
    }, t('clickToRevealSeed'))));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      isShowingSeedPhrase
    } = this.state;
    const {
      history,
      onboardingInitiator
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed-phrase",
      "data-testid": "reveal-seed-phrase"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "seed-phrase__sections"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "seed-phrase__main"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 4
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: "#",
      onClick: e => {
        e.preventDefault();
        history.push(_routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE);
      }
    }, `< ${t('back')}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('secretRecoveryPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('secretBackupPhraseDescription')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('secretBackupPhraseWarning')), this.renderSecretWordsContainer()), /*#__PURE__*/_react.default.createElement("div", {
      className: "seed-phrase__side"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, `${t('tips')}:`), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('storePhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('writePhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('memorizePhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "reveal-seed-phrase__export-text",
      onClick: this.handleExport
    }, t('downloadSecretBackup'))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed-phrase__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "first-time-flow__button",
      onClick: this.handleSkip
    }, t('remindMeLater')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleNext,
      disabled: !isShowingSeedPhrase
    }, t('next'))), onboardingInitiator ? /*#__PURE__*/_react.default.createElement(_snackbar.default, {
      content: t('onboardingReturnNotice', [t('remindMeLater'), onboardingInitiator.location])
    }) : null);
  }

}

exports.default = RevealSeedPhrase;

_defineProperty(RevealSeedPhrase, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(RevealSeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  seedPhrase: _propTypes.default.string,
  setSeedPhraseBackedUp: _propTypes.default.func,
  setCompletedOnboarding: _propTypes.default.func,
  onboardingInitiator: _propTypes.default.exact({
    location: _propTypes.default.string,
    tabId: _propTypes.default.number
  })
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\reveal-seed-phrase.container.js", {"../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./reveal-seed-phrase.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\reveal-seed-phrase.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\reveal-seed-phrase\reveal-seed-phrase.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _selectors = require("../../../../selectors");

var _revealSeedPhrase = _interopRequireDefault(require("./reveal-seed-phrase.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    onboardingInitiator: (0, _selectors.getOnboardingInitiator)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setSeedPhraseBackedUp: seedPhraseBackupState => dispatch((0, _actions.setSeedPhraseBackedUp)(seedPhraseBackupState)),
    setCompletedOnboarding: () => dispatch((0, _actions.setCompletedOnboarding)())
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_revealSeedPhrase.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase-intro\\index.js", {"./seed-phrase-intro.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase-intro\\seed-phrase-intro.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\seed-phrase-intro\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _seedPhraseIntro.default;
  }
});

var _seedPhraseIntro = _interopRequireDefault(require("./seed-phrase-intro.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase-intro\\seed-phrase-intro.component.js", {"../../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\seed-phrase-intro\seed-phrase-intro.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SeedPhraseIntro;

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../../components/ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _routes = require("../../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Components
// Routes
function SeedPhraseIntro() {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();

  const handleNextStep = () => {
    history.push(_routes.INITIALIZE_SEED_PHRASE_ROUTE);
  };

  const subtitles = {
    en: 'English',
    es: 'Spanish',
    hi: 'Hindi',
    id: 'Indonesian',
    ja: 'Japanese',
    ko: 'Korean',
    pt: 'Portuguese',
    ru: 'Russian',
    tl: 'Tagalog',
    vi: 'Vietnamese',
    de: 'German',
    el: 'Greek',
    fr: 'French',
    tr: 'Turkish',
    zh: 'Chinese - China'
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "seed-phrase-intro",
    "data-testid": "seed-phrase-intro"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "seed-phrase-intro__sections"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "seed-phrase-intro__left"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H1,
    boxProps: {
      marginTop: 0,
      marginBottom: 4
    }
  }, t('seedPhraseIntroTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    boxProps: {
      marginBottom: 4
    },
    variant: _designSystem.TYPOGRAPHY.Paragraph,
    className: "seed-phrase-intro__copy"
  }, t('seedPhraseIntroTitleCopy')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement("video", {
    controls: true
  }, /*#__PURE__*/_react.default.createElement("source", {
    type: "video/webm",
    src: "./images/videos/recovery-onboarding/video.webm"
  }), Object.keys(subtitles).map(key => {
    return /*#__PURE__*/_react.default.createElement("track", {
      default: true,
      srcLang: key,
      label: subtitles[key],
      key: `${key}-subtitles`,
      kind: "subtitles",
      src: `./images/videos/recovery-onboarding/subtitles/${key}.vtt`
    });
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.ONE_THIRD
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: handleNextStep
  }, t('next')))), /*#__PURE__*/_react.default.createElement("div", {
    className: "seed-phrase-intro__right"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: 4,
    borderWidth: 1,
    borderRadius: _designSystem.SIZES.MD,
    borderColor: _designSystem.COLORS.BORDER_MUTED,
    borderStyle: _designSystem.BORDER_STYLE.SOLID
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleOne')), /*#__PURE__*/_react.default.createElement("span", null, t('seedPhraseIntroSidebarCopyOne'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleTwo')), /*#__PURE__*/_react.default.createElement("ul", {
    className: "seed-phrase-intro__sidebar_list"
  }, /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletOne')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletTwo')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletThree')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletFour')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleThree')), /*#__PURE__*/_react.default.createElement("span", null, t('seedPhraseIntroSidebarCopyTwo'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement("span", null, t('seedPhraseIntroSidebarCopyThree')))))));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase.component.js", {"../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","./confirm-seed-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\confirm-seed-phrase\\index.js","./reveal-seed-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\reveal-seed-phrase\\index.js","./seed-phrase-intro":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\seed-phrase\\seed-phrase-intro\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dnd":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dnd\\lib\\index.js","react-dnd-html5-backend":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dnd-html5-backend\\lib\\cjs\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\seed-phrase\seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactDndHtml5Backend = _interopRequireDefault(require("react-dnd-html5-backend"));

var _reactDnd = require("react-dnd");

var _routes = require("../../../helpers/constants/routes");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _confirmSeedPhrase = _interopRequireDefault(require("./confirm-seed-phrase"));

var _revealSeedPhrase = _interopRequireDefault(require("./reveal-seed-phrase"));

var _seedPhraseIntro = _interopRequireDefault(require("./seed-phrase-intro"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      verifiedSeedPhrase: ''
    });
  }

  componentDidMount() {
    const {
      seedPhrase,
      history,
      verifySeedPhrase
    } = this.props;

    if (!seedPhrase) {
      verifySeedPhrase().then(verifiedSeedPhrase => {
        if (verifiedSeedPhrase) {
          this.setState({
            verifiedSeedPhrase
          });
        } else {
          history.push(_routes.DEFAULT_ROUTE);
        }
      });
    }
  }

  render() {
    var _history$location;

    const {
      seedPhrase,
      history
    } = this.props;
    const {
      verifiedSeedPhrase
    } = this.state;
    const pathname = history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.pathname;
    const introClass = pathname === _routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE ? 'intro' : '';
    return /*#__PURE__*/_react.default.createElement(_reactDnd.DragDropContextProvider, {
      backend: _reactDndHtml5Backend.default
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: `first-time-flow__wrapper ${introClass}`
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_confirmSeedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_revealSeedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_revealSeedPhrase.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_seedPhraseIntro.default, _extends({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }))));
  }

}

exports.default = SeedPhrase;

_defineProperty(SeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  seedPhrase: _propTypes.default.string,
  verifySeedPhrase: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\index.js", {"./select-action.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\select-action.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\select-action\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _selectAction.default;
  }
});

var _selectAction = _interopRequireDefault(require("./select-action.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\select-action.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\select-action\select-action.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _metametrics = require("../../../../shared/constants/metametrics");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SelectAction extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleCreate", () => {
      const {
        metaMetricsId
      } = this.props;
      const {
        trackEvent
      } = this.context;
      this.props.setFirstTimeFlowType('create');
      trackEvent({
        category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
        event: _metametrics.EVENT_NAMES.WALLET_SETUP_STARTED,
        properties: {
          account_type: _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT
        }
      }, {
        isOptIn: true,
        metaMetricsId,
        flushImmediately: true
      });
      this.props.history.push(_routes.INITIALIZE_CREATE_PASSWORD_ROUTE);
    });

    _defineProperty(this, "handleImport", () => {
      const {
        metaMetricsId
      } = this.props;
      const {
        trackEvent
      } = this.context;
      this.props.setFirstTimeFlowType('import');
      trackEvent({
        category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
        event: _metametrics.EVENT_NAMES.WALLET_SETUP_STARTED,
        properties: {
          account_type: _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED
        }
      }, {
        isOptIn: true,
        metaMetricsId,
        flushImmediately: true
      });
      this.props.history.push(_routes.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE);
    });
  }

  componentDidMount() {
    const {
      history,
      isInitialized,
      nextRoute
    } = this.props;

    if (isInitialized) {
      history.push(nextRoute);
    }
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__body-header"
    }, t('newToMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-buttons"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-button"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-symbol"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-download fa-2x"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-big"
    }, t('noAlreadyHaveSeed')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-small"
    }, t('importYourExisting'))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleImport,
      "data-testid": "import-wallet-button"
    }, t('importWallet'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-button"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-symbol"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-plus fa-2x"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-big"
    }, t('letsGoSetUp')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-small"
    }, t('thisWillCreate'))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleCreate,
      "data-testid": "create-wallet-button"
    }, t('createAWallet')))))));
  }

}

exports.default = SelectAction;

_defineProperty(SelectAction, "propTypes", {
  history: _propTypes.default.object,
  isInitialized: _propTypes.default.bool,
  setFirstTimeFlowType: _propTypes.default.func,
  nextRoute: _propTypes.default.string,
  metaMetricsId: _propTypes.default.string
});

_defineProperty(SelectAction, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\select-action.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./select-action.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\select-action\\select-action.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\select-action\select-action.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _selectAction = _interopRequireDefault(require("./select-action.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    nextRoute: (0, _selectors.getFirstTimeFlowTypeRoute)(state),
    metaMetricsId: state.metamask.metaMetricsId
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setFirstTimeFlowType: type => dispatch((0, _actions.setFirstTimeFlowType)(type))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_selectAction.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\beta-welcome-footer.component.js", {"../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\welcome\beta-welcome-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _useI18nContext = require("../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BetaWelcomeFooter = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "welcome-page__header"
  }, t('betaWelcome')), /*#__PURE__*/_react.default.createElement("div", {
    className: "welcome-page__description"
  }, /*#__PURE__*/_react.default.createElement("p", null, t('betaMetamaskDescription')), /*#__PURE__*/_react.default.createElement("p", null, t('betaMetamaskDescriptionExplanation', [/*#__PURE__*/_react.default.createElement("a", {
    href: "https://metamask.io/terms.html",
    key: "terms-link"
  }, t('betaMetamaskDescriptionExplanationTermsLinkText')), /*#__PURE__*/_react.default.createElement("a", {
    href: "https://metamask.io/beta-terms.html",
    key: "beta-terms-link"
  }, t('betaMetamaskDescriptionExplanationBetaTermsLinkText'))]))));
};

var _default = BetaWelcomeFooter;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\index.js", {"./welcome.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\welcome\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _welcome.default;
  }
});

var _welcome = _interopRequireDefault(require("./welcome.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome-footer.component.js", {"../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\welcome\welcome-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _useI18nContext = require("../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WelcomeFooter = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "welcome-page__header"
  }, t('welcome')), /*#__PURE__*/_react.default.createElement("div", {
    className: "welcome-page__description"
  }, /*#__PURE__*/_react.default.createElement("p", null, t('metamaskDescription')), /*#__PURE__*/_react.default.createElement("p", null, t('happyToSeeYou'))));
};

var _default = WelcomeFooter;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome.component.js", {"../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/mascot":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\mascot\\index.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/build-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\build-types.js","./beta-welcome-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\beta-welcome-footer.component.js","./welcome-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome-footer.component.js","events":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\welcome\welcome.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = _interopRequireDefault(require("events"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _routes = require("../../../helpers/constants/routes");

var _buildTypes = require("../../../helpers/utils/build-types");

var _welcomeFooter = _interopRequireDefault(require("./welcome-footer.component"));

var _betaWelcomeFooter = _interopRequireDefault(require("./beta-welcome-footer.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Welcome extends _react.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleContinue", () => {
      this.props.history.push(_routes.INITIALIZE_METAMETRICS_OPT_IN_ROUTE);
    });

    this.animationEventEmitter = new _events.default();
  }

  componentDidMount() {
    const {
      history,
      participateInMetaMetrics,
      welcomeScreenSeen,
      isInitialized
    } = this.props;

    if (welcomeScreenSeen && isInitialized && participateInMetaMetrics !== null) {
      history.push(_routes.INITIALIZE_CREATE_PASSWORD_ROUTE);
    } else if (welcomeScreenSeen && participateInMetaMetrics !== null) {
      history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
    } else if (welcomeScreenSeen) {
      history.push(_routes.INITIALIZE_METAMETRICS_OPT_IN_ROUTE);
    }
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "welcome-page__wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "welcome-page"
    }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
      animationEventEmitter: this.animationEventEmitter,
      width: "125",
      height: "125"
    }), (0, _buildTypes.isBeta)() ? /*#__PURE__*/_react.default.createElement(_betaWelcomeFooter.default, null) : /*#__PURE__*/_react.default.createElement(_welcomeFooter.default, null), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleContinue,
      "data-testid": "first-time-flow__button"
    }, t('getStarted'))));
  }

}

exports.default = Welcome;

_defineProperty(Welcome, "propTypes", {
  history: _propTypes.default.object,
  participateInMetaMetrics: _propTypes.default.bool,
  welcomeScreenSeen: _propTypes.default.bool,
  isInitialized: _propTypes.default.bool
});

_defineProperty(Welcome, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome.container.js", {"../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./welcome.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\first-time-flow\\welcome\\welcome.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\first-time-flow\welcome\welcome.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _actions = require("../../../store/actions");

var _welcome = _interopRequireDefault(require("./welcome.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = ({
  metamask
}) => {
  const {
    welcomeScreenSeen,
    participateInMetaMetrics,
    isInitialized
  } = metamask;
  return {
    welcomeScreenSeen,
    participateInMetaMetrics,
    isInitialized
  };
};

const mapDispatchToProps = dispatch => {
  return {
    closeWelcomeScreen: () => dispatch((0, _actions.closeWelcomeScreen)())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_welcome.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\home\\home.component.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/lib/ui-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\ui-utils.js","../../components/app/asset-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\asset-list\\index.js","../../components/app/collectibles-tab":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\collectibles-tab\\index.js","../../components/app/home-notification":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\home-notification\\index.js","../../components/app/menu-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\index.js","../../components/app/multiple-notifications":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multiple-notifications\\index.js","../../components/app/recovery-phrase-reminder":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\index.js","../../components/app/transaction-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js","../../components/app/wallet-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js","../../components/app/whats-new-popup":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\whats-new-popup\\index.js","../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/icon/icon-chart":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-chart.js","../../components/ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../components/ui/tabs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\index.js","../../components/ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../components/ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../connected-accounts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-accounts\\index.js","../connected-sites":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\connected-sites\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\home\home.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _metametrics = require("../../../shared/constants/metametrics");

var _assetList = _interopRequireDefault(require("../../components/app/asset-list"));

var _collectiblesTab = _interopRequireDefault(require("../../components/app/collectibles-tab"));

var _homeNotification = _interopRequireDefault(require("../../components/app/home-notification"));

var _multipleNotifications = _interopRequireDefault(require("../../components/app/multiple-notifications"));

var _transactionList = _interopRequireDefault(require("../../components/app/transaction-list"));

var _menuBar = _interopRequireDefault(require("../../components/app/menu-bar"));

var _popover = _interopRequireDefault(require("../../components/ui/popover"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _connectedSites = _interopRequireDefault(require("../connected-sites"));

var _connectedAccounts = _interopRequireDefault(require("../connected-accounts"));

var _tabs = require("../../components/ui/tabs");

var _walletOverview = require("../../components/app/wallet-overview");

var _whatsNewPopup = _interopRequireDefault(require("../../components/app/whats-new-popup"));

var _recoveryPhraseReminder = _interopRequireDefault(require("../../components/app/recovery-phrase-reminder"));

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message/actionable-message"));

var _typography = _interopRequireDefault(require("../../components/ui/typography/typography"));

var _iconChart = _interopRequireDefault(require("../../components/ui/icon/icon-chart"));

var _designSystem = require("../../helpers/constants/design-system");

var _routes = require("../../helpers/constants/routes");

var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));

var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));

var _uiUtils = require("../../../shared/lib/ui-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

///: END:ONLY_INCLUDE_IN
function shouldCloseNotificationPopup({
  isNotification,
  totalUnapprovedCount,
  isSigningQRHardwareTransaction
}) {
  return isNotification && totalUnapprovedCount === 0 && !isSigningQRHardwareTransaction;
}

class Home extends _react.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      canShowBlockageNotification: true,
      notificationClosing: false,
      redirecting: false
    });

    _defineProperty(this, "onRecoveryPhraseReminderClose", () => {
      const {
        setRecoveryPhraseReminderHasBeenShown,
        setRecoveryPhraseReminderLastShown
      } = this.props;
      setRecoveryPhraseReminderHasBeenShown(true);
      setRecoveryPhraseReminderLastShown(new Date().getTime());
    });

    _defineProperty(this, "renderPopover", () => {
      const {
        setConnectedStatusPopoverHasBeenShown
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement(_popover.default, {
        title: t('whatsThis'),
        onClose: setConnectedStatusPopoverHasBeenShown,
        className: "home__connected-status-popover",
        showArrow: true,
        CustomBackground: ({
          onClose
        }) => {
          return /*#__PURE__*/_react.default.createElement("div", {
            className: "home__connected-status-popover-bg-container",
            onClick: onClose
          }, /*#__PURE__*/_react.default.createElement("div", {
            className: "home__connected-status-popover-bg"
          }));
        },
        footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("a", {
          href: _zendeskUrl.default.USER_GUIDE_DAPPS,
          target: "_blank",
          rel: "noopener noreferrer"
        }, t('learnMoreUpperCase')), /*#__PURE__*/_react.default.createElement(_button.default, {
          type: "primary",
          onClick: setConnectedStatusPopoverHasBeenShown
        }, t('dismiss')))
      }, /*#__PURE__*/_react.default.createElement("main", {
        className: "home__connect-status-text"
      }, /*#__PURE__*/_react.default.createElement("div", null, t('metaMaskConnectStatusParagraphOne')), /*#__PURE__*/_react.default.createElement("div", null, t('metaMaskConnectStatusParagraphTwo')), /*#__PURE__*/_react.default.createElement("div", null, t('metaMaskConnectStatusParagraphThree'))));
    });

    const {
      closeNotificationPopup,
      firstPermissionsRequestId,
      haveSwapsQuotes,
      isNotification,
      showAwaitingSwapScreen,
      suggestedAssets = [],
      swapsFetchParams,
      unconfirmedTransactionsCount
    } = this.props;

    if (shouldCloseNotificationPopup(props)) {
      this.state.notificationClosing = true;
      closeNotificationPopup();
    } else if (firstPermissionsRequestId || unconfirmedTransactionsCount > 0 || suggestedAssets.length > 0 || !isNotification && (showAwaitingSwapScreen || haveSwapsQuotes || swapsFetchParams)) {
      this.state.redirecting = true;
    }
  }

  checkStatusAndNavigate() {
    const {
      firstPermissionsRequestId,
      history,
      isNotification,
      suggestedAssets = [],
      unconfirmedTransactionsCount,
      haveSwapsQuotes,
      showAwaitingSwapScreen,
      swapsFetchParams,
      pendingConfirmations
    } = this.props;

    if (!isNotification && showAwaitingSwapScreen) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    } else if (!isNotification && haveSwapsQuotes) {
      history.push(_routes.VIEW_QUOTE_ROUTE);
    } else if (!isNotification && swapsFetchParams) {
      history.push(_routes.BUILD_QUOTE_ROUTE);
    } else if (firstPermissionsRequestId) {
      history.push(`${_routes.CONNECT_ROUTE}/${firstPermissionsRequestId}`);
    } else if (unconfirmedTransactionsCount > 0) {
      history.push(_routes.CONFIRM_TRANSACTION_ROUTE);
    } else if (suggestedAssets.length > 0) {
      history.push(_routes.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE);
    } else if (pendingConfirmations.length > 0) {
      history.push(_routes.CONFIRMATION_V_NEXT_ROUTE);
    }
  }

  componentDidMount() {
    const {
      setPortfolioTooltipWasShownInThisSession,
      showPortfolioTooltip
    } = this.props;
    this.checkStatusAndNavigate();

    if (showPortfolioTooltip) {
      setPortfolioTooltipWasShownInThisSession();
    }
  }

  static getDerivedStateFromProps(props) {
    if (shouldCloseNotificationPopup(props)) {
      return {
        notificationClosing: true
      };
    }

    return null;
  }

  componentDidUpdate(_prevProps, prevState) {
    const {
      closeNotificationPopup,
      isNotification
    } = this.props;
    const {
      notificationClosing
    } = this.state;

    if (notificationClosing && !prevState.notificationClosing) {
      closeNotificationPopup();
    } else if (isNotification) {
      this.checkStatusAndNavigate();
    }
  }

  renderNotifications() {
    const {
      t
    } = this.context;
    const {
      history,
      shouldShowSeedPhraseReminder,
      isPopup,
      shouldShowWeb3ShimUsageNotification,
      setWeb3ShimUsageAlertDismissed,
      originOfCurrentTab,
      disableWeb3ShimUsageAlert,
      infuraBlocked,
      newNetworkAdded,
      setNewNetworkAdded,
      newCollectibleAddedMessage,
      setNewCollectibleAddedMessage,
      newTokensImported,
      setNewTokensImported,
      newCustomNetworkAdded,
      clearNewCustomNetworkAdded,
      setRpcTarget
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_multipleNotifications.default, null, newCollectibleAddedMessage === 'success' ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "success",
      className: "home__new-network-notification",
      message: /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.INLINE_FLEX
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-check-circle home__new-nft-notification-icon"
      }), /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL
      }, t('newCollectibleAddedMessage')), /*#__PURE__*/_react.default.createElement("button", {
        className: "fas fa-times home__new-nft-notification-close",
        title: t('close'),
        onClick: () => setNewCollectibleAddedMessage('')
      }))
    }) : null, newNetworkAdded ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "success",
      className: "home__new-network-notification",
      message: /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.INLINE_FLEX
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-check-circle home__new-network-notification-icon"
      }), /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL
      }, t('newNetworkAdded', [newNetworkAdded])), /*#__PURE__*/_react.default.createElement("button", {
        className: "fas fa-times home__new-network-notification-close",
        title: t('close'),
        onClick: () => setNewNetworkAdded('')
      }))
    }) : null, newTokensImported ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "success",
      className: "home__new-tokens-imported-notification",
      message: /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.INLINE_FLEX
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-check-circle home__new-tokens-imported-notification-icon"
      }), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "home__new-tokens-imported-notification-title",
        variant: _designSystem.TYPOGRAPHY.H6,
        fontWeight: _designSystem.FONT_WEIGHT.BOLD
      }, t('newTokensImportedTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "home__new-tokens-imported-notification-message",
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL
      }, t('newTokensImportedMessage', [newTokensImported]))), /*#__PURE__*/_react.default.createElement("button", {
        className: "fas fa-times home__new-tokens-imported-notification-close",
        title: t('close'),
        onClick: () => setNewTokensImported('')
      }))
    }) : null, shouldShowWeb3ShimUsageNotification ? /*#__PURE__*/_react.default.createElement(_homeNotification.default, {
      descriptionText: t('web3ShimUsageNotification', [/*#__PURE__*/_react.default.createElement("span", {
        key: "web3ShimUsageNotificationLink",
        className: "home-notification__text-link",
        onClick: () => global.platform.openTab({
          url: _zendeskUrl.default.LEGACY_WEB3
        })
      }, t('here'))]),
      ignoreText: t('dismiss'),
      onIgnore: disable => {
        setWeb3ShimUsageAlertDismissed(originOfCurrentTab);

        if (disable) {
          disableWeb3ShimUsageAlert();
        }
      },
      checkboxText: t('dontShowThisAgain'),
      checkboxTooltipText: t('canToggleInSettings'),
      key: "home-web3ShimUsageNotification"
    }) : null, shouldShowSeedPhraseReminder ? /*#__PURE__*/_react.default.createElement(_homeNotification.default, {
      descriptionText: t('backupApprovalNotice'),
      acceptText: t('backupNow'),
      onAccept: () => {
        if (isPopup) {
          global.platform.openExtensionInBrowser(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE);
        } else {
          history.push(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE);
        }
      },
      infoText: t('backupApprovalInfo'),
      key: "home-backupApprovalNotice"
    }) : null, infuraBlocked && this.state.canShowBlockageNotification ? /*#__PURE__*/_react.default.createElement(_homeNotification.default, {
      descriptionText: t('infuraBlockedNotification', [/*#__PURE__*/_react.default.createElement("span", {
        key: "infuraBlockedNotificationLink",
        className: "home-notification__text-link",
        onClick: () => global.platform.openTab({
          url: _zendeskUrl.default.INFURA_BLOCKAGE
        })
      }, t('here'))]),
      ignoreText: t('dismiss'),
      onIgnore: () => {
        this.setState({
          canShowBlockageNotification: false
        });
      },
      key: "home-infuraBlockedNotification"
    }) : null, Object.keys(newCustomNetworkAdded).length !== 0 && /*#__PURE__*/_react.default.createElement(_popover.default, {
      className: "home__new-network-added"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check-circle fa-2x home__new-network-added__check-circle"
    }), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H4,
      marginTop: 5,
      marginRight: 9,
      marginLeft: 9,
      marginBottom: 0,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD
    }, t('networkAddedSuccessfully')), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginTop: 8,
      marginRight: 8,
      marginLeft: 8,
      marginBottom: 5
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "home__new-network-added__switch-to-button",
      onClick: () => {
        setRpcTarget(newCustomNetworkAdded.rpcUrl, newCustomNetworkAdded.chainId, newCustomNetworkAdded.ticker, newCustomNetworkAdded.chainName);
        clearNewCustomNetworkAdded();
      }
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
      color: _designSystem.COLORS.PRIMARY_INVERSE
    }, t('switchToNetwork', [newCustomNetworkAdded.chainName]))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: () => clearNewCustomNetworkAdded()
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H6,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
      color: _designSystem.COLORS.PRIMARY_DEFAULT
    }, t('dismiss'))))));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      defaultHomeActiveTabName,
      onTabClick,
      forgottenPassword,
      history,
      connectedStatusPopoverHasBeenShown,
      isPopup,
      announcementsToShow,
      showWhatsNewPopup,
      hideWhatsNewPopup,
      showPortfolioTooltip,
      hidePortfolioTooltip,
      portfolioTooltipWasShownInThisSession,
      seedPhraseBackedUp,
      showRecoveryPhraseReminder,
      firstTimeFlowType,
      completedOnboarding,
      shouldShowSeedPhraseReminder,
      onboardedInThisUISession,
      newCustomNetworkAdded
    } = this.props;

    if (forgottenPassword) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.RESTORE_VAULT_ROUTE
        }
      });
    } else if (this.state.notificationClosing || this.state.redirecting) {
      return null;
    }

    const showWhatsNew = completedOnboarding && (!onboardedInThisUISession || firstTimeFlowType === 'import') && announcementsToShow && showWhatsNewPopup && !showPortfolioTooltip && !portfolioTooltipWasShownInThisSession && Object.keys(newCustomNetworkAdded).length === 0;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "main-container"
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.CONNECTED_ROUTE,
      component: _connectedSites.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.CONNECTED_ACCOUNTS_ROUTE,
      component: _connectedAccounts.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "home__container"
    }, showWhatsNew ? /*#__PURE__*/_react.default.createElement(_whatsNewPopup.default, {
      onClose: hideWhatsNewPopup
    }) : null, !showWhatsNew && showRecoveryPhraseReminder ? /*#__PURE__*/_react.default.createElement(_recoveryPhraseReminder.default, {
      hasBackedUp: seedPhraseBackedUp,
      onConfirm: this.onRecoveryPhraseReminderClose
    }) : null, isPopup && !connectedStatusPopoverHasBeenShown ? this.renderPopover() : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "home__main-view"
    }, /*#__PURE__*/_react.default.createElement(_menuBar.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "home__balance-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_walletOverview.EthOverview, null)), /*#__PURE__*/_react.default.createElement(_tabs.Tabs, {
      defaultActiveTabName: defaultHomeActiveTabName,
      onTabClick: onTabClick,
      tabsClassName: "home__tabs",
      subHeader: /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        position: "bottom",
        open: !false && !shouldShowSeedPhraseReminder && showPortfolioTooltip,
        interactive: true,
        theme: "home__subheader-link--tooltip",
        html: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
          className: "home__subheader-link--tooltip-content-header"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "home__subheader-link--tooltip-content-header-text"
        }, t('new')), /*#__PURE__*/_react.default.createElement("button", {
          className: "home__subheader-link--tooltip-content-header-button",
          onClick: () => {
            hidePortfolioTooltip();
          }
        }, /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-times"
        }))), /*#__PURE__*/_react.default.createElement("div", null, t('tryOur'), "\xA0", /*#__PURE__*/_react.default.createElement("span", {
          className: "home__subheader-link--tooltip-content-text-bold"
        }, t('betaPortfolioSite')), "\xA0", t('keepTapsOnTokens')))
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "home__subheader-link",
        onClick: async () => {
          const portfolioUrl = "https://portfolio.metamask.io";
          global.platform.openTab({
            url: `${portfolioUrl}?metamaskEntry=ext`
          });
          this.context.trackEvent({
            category: _metametrics.EVENT.CATEGORIES.HOME,
            event: _metametrics.EVENT_NAMES.PORTFOLIO_LINK_CLICKED,
            properties: {
              url: portfolioUrl
            }
          }, {
            contextPropsIntoEventProperties: [_metametrics.CONTEXT_PROPS.PAGE_TITLE]
          });
        }
      }, /*#__PURE__*/_react.default.createElement(_iconChart.default, null), /*#__PURE__*/_react.default.createElement("div", {
        className: "home__subheader-link--text",
        "data-testid": "home__portfolio-site"
      }, t('portfolioSite'))))
    }, /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      activeClassName: "home__tab--active",
      className: "home__tab",
      "data-testid": "home__asset-tab",
      name: t('assets')
    }, /*#__PURE__*/_react.default.createElement(_assetList.default, {
      onClickAsset: asset => history.push(`${_routes.ASSET_ROUTE}/${asset}`)
    })), false ? /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      activeClassName: "home__tab--active",
      className: "home__tab",
      "data-testid": "home__nfts-tab",
      name: t('nfts')
    }, /*#__PURE__*/_react.default.createElement(_collectiblesTab.default, {
      onAddNFT: () => {
        history.push(_routes.ADD_COLLECTIBLE_ROUTE);
      }
    })) : null, /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      activeClassName: "home__tab--active",
      className: "home__tab",
      "data-testid": "home__activity-tab",
      name: t('activity')
    }, /*#__PURE__*/_react.default.createElement(_transactionList.default, null))), /*#__PURE__*/_react.default.createElement("div", {
      className: "home__support"
    }, ///: BEGIN:ONLY_INCLUDE_IN(main)
    t('needHelp', [/*#__PURE__*/_react.default.createElement("a", {
      href: _uiUtils.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "need-help-link",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.HOME,
          event: _metametrics.EVENT_NAMES.SUPPORT_LINK_CLICKED,
          properties: {
            url: _uiUtils.SUPPORT_LINK
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics.CONTEXT_PROPS.PAGE_TITLE]
        });
      }
    }, t('needHelpLinkText'))]) ///: END:ONLY_INCLUDE_IN
    )), this.renderNotifications()));
  }

}

exports.default = Home;

_defineProperty(Home, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(Home, "propTypes", {
  history: _propTypes.default.object,
  forgottenPassword: _propTypes.default.bool,
  suggestedAssets: _propTypes.default.array,
  unconfirmedTransactionsCount: _propTypes.default.number,
  shouldShowSeedPhraseReminder: _propTypes.default.bool.isRequired,
  isPopup: _propTypes.default.bool,
  isNotification: _propTypes.default.bool.isRequired,
  firstPermissionsRequestId: _propTypes.default.string,
  // This prop is used in the `shouldCloseNotificationPopup` function
  // eslint-disable-next-line react/no-unused-prop-types
  totalUnapprovedCount: _propTypes.default.number.isRequired,
  setConnectedStatusPopoverHasBeenShown: _propTypes.default.func,
  connectedStatusPopoverHasBeenShown: _propTypes.default.bool,
  defaultHomeActiveTabName: _propTypes.default.string,
  firstTimeFlowType: _propTypes.default.string,
  completedOnboarding: _propTypes.default.bool,
  onTabClick: _propTypes.default.func.isRequired,
  haveSwapsQuotes: _propTypes.default.bool.isRequired,
  showAwaitingSwapScreen: _propTypes.default.bool.isRequired,
  swapsFetchParams: _propTypes.default.object,
  shouldShowWeb3ShimUsageNotification: _propTypes.default.bool.isRequired,
  setWeb3ShimUsageAlertDismissed: _propTypes.default.func.isRequired,
  originOfCurrentTab: _propTypes.default.string,
  disableWeb3ShimUsageAlert: _propTypes.default.func.isRequired,
  pendingConfirmations: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  infuraBlocked: _propTypes.default.bool.isRequired,
  showWhatsNewPopup: _propTypes.default.bool.isRequired,
  hideWhatsNewPopup: _propTypes.default.func.isRequired,
  showPortfolioTooltip: _propTypes.default.bool.isRequired,
  hidePortfolioTooltip: _propTypes.default.func.isRequired,
  portfolioTooltipWasShownInThisSession: _propTypes.default.bool.isRequired,
  setPortfolioTooltipWasShownInThisSession: _propTypes.default.func.isRequired,
  announcementsToShow: _propTypes.default.bool.isRequired,
  showRecoveryPhraseReminder: _propTypes.default.bool.isRequired,
  setRecoveryPhraseReminderHasBeenShown: _propTypes.default.func.isRequired,
  setRecoveryPhraseReminderLastShown: _propTypes.default.func.isRequired,
  seedPhraseBackedUp: props => {
    if (props.seedPhraseBackedUp !== null && typeof props.seedPhraseBackedUp !== 'boolean') {
      throw new Error(`seedPhraseBackedUp is required to be null or boolean. Received ${props.seedPhraseBackedUp}`);
    }
  },
  newNetworkAdded: _propTypes.default.string,
  setNewNetworkAdded: _propTypes.default.func.isRequired,
  // This prop is used in the `shouldCloseNotificationPopup` function
  // eslint-disable-next-line react/no-unused-prop-types
  isSigningQRHardwareTransaction: _propTypes.default.bool.isRequired,
  newCollectibleAddedMessage: _propTypes.default.string,
  setNewCollectibleAddedMessage: _propTypes.default.func.isRequired,
  closeNotificationPopup: _propTypes.default.func.isRequired,
  newTokensImported: _propTypes.default.string,
  setNewTokensImported: _propTypes.default.func.isRequired,
  newCustomNetworkAdded: _propTypes.default.object,
  clearNewCustomNetworkAdded: _propTypes.default.func,
  setRpcTarget: _propTypes.default.func,
  onboardedInThisUISession: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\home\\home.container.js", {"../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../shared/constants/alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js","../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./home.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\home\\home.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\home\home.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _app = require("../../ducks/app/app");

var _metamask = require("../../ducks/metamask/metamask");

var _swaps = require("../../ducks/swaps/swaps");

var _util = require("../../../app/scripts/lib/util");

var _app2 = require("../../../shared/constants/app");

var _alerts = require("../../../shared/constants/alerts");

var _home = _interopRequireDefault(require("./home.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  var _firstPermissionsRequ;

  const {
    metamask,
    appState
  } = state;
  const {
    suggestedAssets,
    seedPhraseBackedUp,
    selectedAddress,
    connectedStatusPopoverHasBeenShown,
    defaultHomeActiveTabName,
    swapsState,
    firstTimeFlowType,
    completedOnboarding
  } = metamask;
  const {
    forgottenPassword
  } = appState;
  const totalUnapprovedCount = (0, _selectors.getTotalUnapprovedCount)(state);
  const swapsEnabled = (0, _swaps.getSwapsFeatureIsLive)(state);
  const pendingConfirmations = (0, _selectors.getUnapprovedTemplatedConfirmations)(state);
  const envType = (0, _util.getEnvironmentType)();
  const isPopup = envType === _app2.ENVIRONMENT_TYPE_POPUP;
  const isNotification = envType === _app2.ENVIRONMENT_TYPE_NOTIFICATION;
  let firstPermissionsRequest, firstPermissionsRequestId;
  firstPermissionsRequest = (0, _selectors.getFirstPermissionRequest)(state);
  firstPermissionsRequestId = ((_firstPermissionsRequ = firstPermissionsRequest) === null || _firstPermissionsRequ === void 0 ? void 0 : _firstPermissionsRequ.metadata.id) || null; // getFirstPermissionRequest should be updated with snap update logic once we hit main extension release

  const originOfCurrentTab = (0, _selectors.getOriginOfCurrentTab)(state);

  const shouldShowWeb3ShimUsageNotification = isPopup && (0, _metamask.getWeb3ShimUsageAlertEnabledness)(state) && (0, _selectors.activeTabHasPermissions)(state) && (0, _selectors.getWeb3ShimUsageStateForOrigin)(state, originOfCurrentTab) === _alerts.WEB3_SHIM_USAGE_ALERT_STATES.RECORDED;

  const isSigningQRHardwareTransaction = (0, _selectors.hasUnsignedQRHardwareTransaction)(state) || (0, _selectors.hasUnsignedQRHardwareMessage)(state);
  return {
    forgottenPassword,
    suggestedAssets,
    swapsEnabled,
    unconfirmedTransactionsCount: (0, _selectors.unconfirmedTransactionsCountSelector)(state),
    shouldShowSeedPhraseReminder: (0, _selectors.getShouldShowSeedPhraseReminder)(state),
    isPopup,
    isNotification,
    selectedAddress,
    firstPermissionsRequestId,
    totalUnapprovedCount,
    connectedStatusPopoverHasBeenShown,
    defaultHomeActiveTabName,
    firstTimeFlowType,
    completedOnboarding,
    haveSwapsQuotes: Boolean(Object.values(swapsState.quotes || {}).length),
    swapsFetchParams: swapsState.fetchParams,
    showAwaitingSwapScreen: swapsState.routeState === 'awaiting',
    isMainnet: (0, _selectors.getIsMainnet)(state),
    originOfCurrentTab,
    shouldShowWeb3ShimUsageNotification,
    pendingConfirmations,
    infuraBlocked: (0, _selectors.getInfuraBlocked)(state),
    announcementsToShow: (0, _selectors.getSortedAnnouncementsToShow)(state).length > 0,
    showWhatsNewPopup: (0, _selectors.getShowWhatsNewPopup)(state),
    showPortfolioTooltip: (0, _selectors.getShowPortfolioTooltip)(state),
    portfolioTooltipWasShownInThisSession: (0, _app.getPortfolioTooltipWasShownInThisSession)(state),
    showRecoveryPhraseReminder: (0, _selectors.getShowRecoveryPhraseReminder)(state),
    seedPhraseBackedUp,
    newNetworkAdded: (0, _selectors.getNewNetworkAdded)(state),
    isSigningQRHardwareTransaction,
    newCollectibleAddedMessage: (0, _selectors.getNewCollectibleAddedMessage)(state),
    newTokensImported: (0, _selectors.getNewTokensImported)(state),
    newCustomNetworkAdded: appState.newCustomNetworkAdded,
    onboardedInThisUISession: appState.onboardedInThisUISession
  };
};

const mapDispatchToProps = dispatch => ({
  closeNotificationPopup: () => (0, _actions.closeNotificationPopup)(),
  setConnectedStatusPopoverHasBeenShown: () => dispatch((0, _actions.setConnectedStatusPopoverHasBeenShown)()),
  onTabClick: name => dispatch((0, _actions.setDefaultHomeActiveTabName)(name)),
  setWeb3ShimUsageAlertDismissed: origin => (0, _actions.setWeb3ShimUsageAlertDismissed)(origin),
  disableWeb3ShimUsageAlert: () => (0, _actions.setAlertEnabledness)(_alerts.ALERT_TYPES.web3ShimUsage, false),
  hideWhatsNewPopup: () => dispatch((0, _app.hideWhatsNewPopup)()),
  hidePortfolioTooltip: _actions.hidePortfolioTooltip,
  setRecoveryPhraseReminderHasBeenShown: () => dispatch((0, _actions.setRecoveryPhraseReminderHasBeenShown)()),
  setRecoveryPhraseReminderLastShown: lastShown => dispatch((0, _actions.setRecoveryPhraseReminderLastShown)(lastShown)),
  setNewNetworkAdded: newNetwork => {
    dispatch((0, _actions.setNewNetworkAdded)(newNetwork));
  },
  setNewCollectibleAddedMessage: message => {
    dispatch((0, _actions.setNewCollectibleAddedMessage)(message));
  },
  setNewTokensImported: newTokens => {
    dispatch((0, _actions.setNewTokensImported)(newTokens));
  },
  clearNewCustomNetworkAdded: () => {
    dispatch((0, _app.setNewCustomNetworkAdded)({}));
  },
  setRpcTarget: (rpcUrl, chainId, ticker, nickname) => {
    dispatch((0, _actions.setRpcTarget)(rpcUrl, chainId, ticker, nickname));
  },
  setPortfolioTooltipWasShownInThisSession: () => dispatch((0, _app.setPortfolioTooltipWasShownInThisSession)())
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_home.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\home\\index.js", {"./home.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\home\\home.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\home\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _home.default;
  }
});

var _home = _interopRequireDefault(require("./home.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\import-token.component.js", {"../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../shared/constants/tokens":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\tokens.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/tabs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\index.js","../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","./token-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\index.js","./token-search":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-search\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\import-token.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));

var _util = require("../../helpers/utils/util");

var _tokenUtil = require("../../helpers/utils/token-util");

var _routes = require("../../helpers/constants/routes");

var _textField = _interopRequireDefault(require("../../components/ui/text-field"));

var _pageContainer = _interopRequireDefault(require("../../components/ui/page-container"));

var _tabs = require("../../components/ui/tabs");

var _util2 = require("../../../app/scripts/lib/util");

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message/actionable-message"));

var _typography = _interopRequireDefault(require("../../components/ui/typography"));

var _designSystem = require("../../helpers/constants/design-system");

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _transaction = require("../../../shared/constants/transaction");

var _tokens = require("../../../shared/constants/tokens");

var _tokenSearch = _interopRequireDefault(require("./token-search"));

var _tokenList = _interopRequireDefault(require("./token-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const emptyAddr = '0x0000000000000000000000000000000000000000';
const MIN_DECIMAL_VALUE = 0;
const MAX_DECIMAL_VALUE = 36;

class ImportToken extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      customAddress: '',
      customSymbol: '',
      customDecimals: 0,
      searchResults: [],
      selectedTokens: {},
      standard: _transaction.TOKEN_STANDARDS.NONE,
      tokenSelectorError: null,
      customAddressError: null,
      customSymbolError: null,
      customDecimalsError: null,
      collectibleAddressError: null,
      forceEditSymbol: false,
      symbolAutoFilled: false,
      decimalAutoFilled: false,
      mainnetTokenWarning: null
    });
  }

  componentDidMount() {
    this.tokenInfoGetter = (0, _tokenUtil.tokenInfoGetter)();
    const {
      pendingTokens = {}
    } = this.props;
    const pendingTokenKeys = Object.keys(pendingTokens);

    if (pendingTokenKeys.length > 0) {
      let selectedTokens = {};
      let customToken = {};
      pendingTokenKeys.forEach(tokenAddress => {
        const token = pendingTokens[tokenAddress];
        const {
          isCustom
        } = token;

        if (isCustom) {
          customToken = { ...token
          };
        } else {
          selectedTokens = { ...selectedTokens,
            [tokenAddress]: { ...token
            }
          };
        }
      });
      const {
        address: customAddress = '',
        symbol: customSymbol = '',
        decimals: customDecimals = 0
      } = customToken;
      this.setState({
        selectedTokens,
        customAddress,
        customSymbol,
        customDecimals
      });
    }
  }

  handleToggleToken(token) {
    const {
      address
    } = token;
    const {
      selectedTokens = {}
    } = this.state;
    const selectedTokensCopy = { ...selectedTokens
    };

    if (address in selectedTokensCopy) {
      delete selectedTokensCopy[address];
    } else {
      selectedTokensCopy[address] = token;
    }

    this.setState({
      selectedTokens: selectedTokensCopy,
      tokenSelectorError: null
    });
  }

  hasError() {
    const {
      tokenSelectorError,
      customAddressError,
      customSymbolError,
      customDecimalsError,
      collectibleAddressError
    } = this.state;
    return tokenSelectorError || customAddressError || customSymbolError || customDecimalsError || collectibleAddressError;
  }

  hasSelected() {
    const {
      customAddress = '',
      selectedTokens = {}
    } = this.state;
    return customAddress || Object.keys(selectedTokens).length > 0;
  }

  handleNext() {
    if (this.hasError()) {
      return;
    }

    if (!this.hasSelected()) {
      this.setState({
        tokenSelectorError: this.context.t('mustSelectOne')
      });
      return;
    }

    const {
      setPendingTokens,
      history,
      tokenList
    } = this.props;
    const tokenAddressList = Object.keys(tokenList);
    const {
      customAddress: address,
      customSymbol: symbol,
      customDecimals: decimals,
      selectedTokens,
      standard
    } = this.state;
    const customToken = {
      address,
      symbol,
      decimals,
      standard
    };
    setPendingTokens({
      customToken,
      selectedTokens,
      tokenAddressList
    });
    history.push(_routes.CONFIRM_IMPORT_TOKEN_ROUTE);
  }

  async attemptToAutoFillTokenParams(address) {
    const {
      tokenList
    } = this.props;
    const {
      symbol = '',
      decimals
    } = await this.tokenInfoGetter(address, tokenList);
    const symbolAutoFilled = Boolean(symbol);
    const decimalAutoFilled = Boolean(decimals);
    this.setState({
      symbolAutoFilled,
      decimalAutoFilled
    });
    this.handleCustomSymbolChange(symbol || '');
    this.handleCustomDecimalsChange(decimals);
  }

  async handleCustomAddressChange(value) {
    const customAddress = value.trim();
    this.setState({
      customAddress,
      customAddressError: null,
      collectibleAddressError: null,
      tokenSelectorError: null,
      symbolAutoFilled: false,
      decimalAutoFilled: false,
      mainnetTokenWarning: null
    });
    const addressIsValid = (0, _hexstringUtils.isValidHexAddress)(customAddress, {
      allowNonPrefixed: false
    });
    const standardAddress = (0, _util2.addHexPrefix)(customAddress).toLowerCase();
    const isMainnetToken = Object.keys(_tokens.STATIC_MAINNET_TOKEN_LIST).some(key => key.toLowerCase() === customAddress.toLowerCase());
    const isMainnetNetwork = this.props.chainId === '0x1';
    let standard;

    if (addressIsValid) {
      try {
        ({
          standard
        } = await this.props.getTokenStandardAndDetails(standardAddress, this.props.selectedAddress));
      } catch (error) {// ignore
      }
    }

    const addressIsEmpty = customAddress.length === 0 || customAddress === emptyAddr;

    switch (true) {
      case !addressIsValid && !addressIsEmpty:
        this.setState({
          customAddressError: this.context.t('invalidAddress'),
          customSymbol: '',
          customDecimals: 0,
          customSymbolError: null,
          customDecimalsError: null
        });
        break;

      case false && (standard === 'ERC1155' || standard === 'ERC721'):
        this.setState({
          collectibleAddressError: this.context.t('collectibleAddressError', [/*#__PURE__*/_react.default.createElement("a", {
            className: "import-token__collectible-address-error-link",
            onClick: () => this.props.history.push({
              pathname: _routes.ADD_COLLECTIBLE_ROUTE,
              state: {
                addressEnteredOnImportTokensPage: this.state.customAddress
              }
            }),
            key: "collectibleAddressError"
          }, this.context.t('importNFTPage'))])
        });
        break;

      case isMainnetToken && !isMainnetNetwork:
        this.setState({
          mainnetTokenWarning: this.context.t('mainnetToken'),
          customSymbol: '',
          customDecimals: 0,
          customSymbolError: null,
          customDecimalsError: null
        });
        break;

      case Boolean(this.props.identities[standardAddress]):
        this.setState({
          customAddressError: this.context.t('personalAddressDetected')
        });
        break;

      case (0, _util.checkExistingAddresses)(customAddress, this.props.tokens):
        this.setState({
          customAddressError: this.context.t('tokenAlreadyAdded')
        });
        break;

      default:
        if (!addressIsEmpty) {
          this.attemptToAutoFillTokenParams(customAddress);

          if (standard) {
            this.setState({
              standard
            });
          }
        }

    }
  }

  handleCustomSymbolChange(value) {
    const customSymbol = value.trim();
    const symbolLength = customSymbol.length;
    let customSymbolError = null;

    if (symbolLength <= 0 || symbolLength >= 12) {
      customSymbolError = this.context.t('symbolBetweenZeroTwelve');
    }

    this.setState({
      customSymbol,
      customSymbolError
    });
  }

  handleCustomDecimalsChange(value) {
    let customDecimals;
    let customDecimalsError = null;

    if (value) {
      customDecimals = Number(value.trim());
      customDecimalsError = value < MIN_DECIMAL_VALUE || value > MAX_DECIMAL_VALUE ? this.context.t('decimalsMustZerotoTen') : null;
    } else {
      customDecimals = '';
      customDecimalsError = this.context.t('tokenDecimalFetchFailed');
    }

    this.setState({
      customDecimals,
      customDecimalsError
    });
  }

  renderCustomTokenForm() {
    var _rpcPrefs$blockExplor;

    const {
      t
    } = this.context;
    const {
      customAddress,
      customSymbol,
      customDecimals,
      customAddressError,
      customSymbolError,
      customDecimalsError,
      forceEditSymbol,
      symbolAutoFilled,
      decimalAutoFilled,
      mainnetTokenWarning,
      collectibleAddressError
    } = this.state;
    const {
      chainId,
      rpcPrefs,
      isDynamicTokenListAvailable,
      tokenDetectionInactiveOnNonMainnetSupportedNetwork,
      history
    } = this.props;
    const blockExplorerTokenLink = (0, _etherscanLink.getTokenTrackerLink)(customAddress, chainId, null, null, {
      blockExplorerUrl: (_rpcPrefs$blockExplor = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : null
    });
    const blockExplorerLabel = rpcPrefs !== null && rpcPrefs !== void 0 && rpcPrefs.blockExplorerUrl ? (0, _util.getURLHostName)(blockExplorerTokenLink) : t('etherscan');
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "import-token__custom-token-form"
    }, tokenDetectionInactiveOnNonMainnetSupportedNetwork ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "warning",
      message: t('customTokenWarningInTokenDetectionNetworkWithTDOFF', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "import-token-security-risk",
        className: "import-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: _zendeskUrl.default.TOKEN_SAFETY_PRACTICES
      }, t('tokenScamSecurityRisk')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "import-token-token-detection-announcement",
        className: "import-token__link",
        onClick: () => history.push(`${_routes.ADVANCED_ROUTE}#token-description`)
      }, t('inYourSettings'))]),
      withRightButton: true,
      useIcon: true,
      iconFillColor: "var(--color-warning-default)"
    }) : /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: isDynamicTokenListAvailable ? 'warning' : 'default',
      message: t(isDynamicTokenListAvailable ? 'customTokenWarningInTokenDetectionNetwork' : 'customTokenWarningInNonTokenDetectionNetwork', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "import-token-fake-token-warning",
        className: "import-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: _zendeskUrl.default.TOKEN_SAFETY_PRACTICES
      }, t('learnScamRisk'))]),
      withRightButton: true,
      useIcon: true,
      iconFillColor: isDynamicTokenListAvailable ? 'var(--color-warning-default)' : 'var(--color-info-default)'
    }), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "custom-address",
      label: t('tokenContractAddress'),
      type: "text",
      value: customAddress,
      onChange: e => this.handleCustomAddressChange(e.target.value),
      error: customAddressError || mainnetTokenWarning || collectibleAddressError,
      fullWidth: true,
      autoFocus: true,
      margin: "normal"
    }), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "custom-symbol",
      label: /*#__PURE__*/_react.default.createElement("div", {
        className: "import-token__custom-symbol__label-wrapper"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "import-token__custom-symbol__label"
      }, t('tokenSymbol')), symbolAutoFilled && !forceEditSymbol && /*#__PURE__*/_react.default.createElement("div", {
        className: "import-token__custom-symbol__edit",
        onClick: () => this.setState({
          forceEditSymbol: true
        })
      }, t('edit'))),
      type: "text",
      value: customSymbol,
      onChange: e => this.handleCustomSymbolChange(e.target.value),
      error: customSymbolError,
      fullWidth: true,
      margin: "normal",
      disabled: symbolAutoFilled && !forceEditSymbol
    }), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "custom-decimals",
      label: t('decimal'),
      type: "number",
      value: customDecimals,
      onChange: e => this.handleCustomDecimalsChange(e.target.value),
      error: customDecimals ? customDecimalsError : null,
      fullWidth: true,
      margin: "normal",
      disabled: decimalAutoFilled,
      min: MIN_DECIMAL_VALUE,
      max: MAX_DECIMAL_VALUE
    }), customDecimals === '' && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.BOLD
      }, t('tokenDecimalFetchFailed')), /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL
      }, t('verifyThisTokenDecimalOn', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "import-token-verify-token-decimal",
        className: "import-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: blockExplorerTokenLink
      }, blockExplorerLabel)]))),
      type: "warning",
      withRightButton: true,
      className: "import-token__decimal-warning"
    }));
  }

  renderSearchToken() {
    const {
      t
    } = this.context;
    const {
      tokenList,
      history,
      useTokenDetection,
      networkName
    } = this.props;
    const {
      tokenSelectorError,
      selectedTokens,
      searchResults
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "import-token__search-token"
    }, !useTokenDetection && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('enhancedTokenDetectionAlertMessage', [networkName, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "token-detection-announcement",
        className: "import-token__link",
        onClick: () => history.push(`${_routes.ADVANCED_ROUTE}#token-description`)
      }, t('enableFromSettings'))]),
      withRightButton: true,
      useIcon: true,
      iconFillColor: "var(--color-primary-default)",
      className: "import-token__token-detection-announcement"
    }), /*#__PURE__*/_react.default.createElement(_tokenSearch.default, {
      onSearch: ({
        results = []
      }) => this.setState({
        searchResults: results
      }),
      error: tokenSelectorError,
      tokenList: tokenList
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "import-token__token-list"
    }, /*#__PURE__*/_react.default.createElement(_tokenList.default, {
      results: searchResults,
      selectedTokens: selectedTokens,
      onToggleToken: token => this.handleToggleToken(token)
    })));
  }

  renderTabs() {
    const {
      t
    } = this.context;
    const {
      showSearchTab
    } = this.props;
    const tabs = [];

    if (showSearchTab) {
      tabs.push( /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
        name: t('search'),
        key: "search-tab"
      }, this.renderSearchToken()));
    }

    tabs.push( /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      name: t('customToken'),
      key: "custom-tab"
    }, this.renderCustomTokenForm()));
    return /*#__PURE__*/_react.default.createElement(_tabs.Tabs, null, tabs);
  }

  render() {
    const {
      history,
      clearPendingTokens,
      mostRecentOverviewPage
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
      title: this.context.t('importTokensCamelCase'),
      tabsComponent: this.renderTabs(),
      onSubmit: () => this.handleNext(),
      hideCancel: true,
      disabled: Boolean(this.hasError()) || !this.hasSelected(),
      onClose: () => {
        clearPendingTokens();
        history.push(mostRecentOverviewPage);
      }
    });
  }

}

_defineProperty(ImportToken, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(ImportToken, "propTypes", {
  /**
   * History object of the router.
   */
  history: _propTypes.default.object,

  /**
   * Set the state of `pendingTokens`, called when adding a token.
   */
  setPendingTokens: _propTypes.default.func,

  /**
   * The current list of pending tokens to be added.
   */
  pendingTokens: _propTypes.default.object,

  /**
   * Clear the list of pending tokens. Called when closing the modal.
   */
  clearPendingTokens: _propTypes.default.func,

  /**
   * The list of already added tokens.
   */
  tokens: _propTypes.default.array,

  /**
   * The identities/accounts that are currently added to the wallet.
   */
  identities: _propTypes.default.object,

  /**
   * Boolean flag that shows/hides the search tab.
   */
  showSearchTab: _propTypes.default.bool.isRequired,

  /**
   * The most recent overview page route, which is 'navigated' to when closing the modal.
   */
  mostRecentOverviewPage: _propTypes.default.string.isRequired,

  /**
   * The active chainId in use.
   */
  chainId: _propTypes.default.string,

  /**
   * The rpc preferences to use for the current provider.
   */
  rpcPrefs: _propTypes.default.object,

  /**
   * The list of tokens available for search.
   */
  tokenList: _propTypes.default.object,

  /**
   * Boolean flag indicating whether token detection is enabled or not.
   * When disabled, shows an information alert in the search tab informing the
   * user of the availability of this feature.
   */
  useTokenDetection: _propTypes.default.bool,

  /**
   * Function called to fetch information about the token standard and
   * details, see `actions.js`.
   */
  getTokenStandardAndDetails: _propTypes.default.func,

  /**
   * The currently selected active address.
   */
  selectedAddress: _propTypes.default.string,
  isDynamicTokenListAvailable: _propTypes.default.bool.isRequired,
  tokenDetectionInactiveOnNonMainnetSupportedNetwork: _propTypes.default.bool.isRequired,
  networkName: _propTypes.default.string.isRequired
});

_defineProperty(ImportToken, "defaultProps", {
  tokenList: {}
});

var _default = ImportToken;
exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\import-token.container.js", {"../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./import-token.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\import-token.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\import-token.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors/selectors");

var _importToken = _interopRequireDefault(require("./import-token.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      identities,
      tokens,
      pendingTokens,
      provider: {
        chainId
      },
      useTokenDetection,
      selectedAddress
    }
  } = state;
  const isTokenDetectionInactiveOnMainnet = (0, _selectors.getIsTokenDetectionInactiveOnMainnet)(state);
  const showSearchTab = (0, _selectors.getIsTokenDetectionSupported)(state) || isTokenDetectionInactiveOnMainnet || Boolean(false);
  return {
    identities,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    tokens,
    pendingTokens,
    showSearchTab,
    chainId,
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
    tokenList: (0, _selectors.getTokenList)(state),
    useTokenDetection,
    selectedAddress,
    isDynamicTokenListAvailable: (0, _selectors.getIsDynamicTokenListAvailable)(state),
    networkName: (0, _selectors.getTokenDetectionSupportNetworkByChainId)(state),
    tokenDetectionInactiveOnNonMainnetSupportedNetwork: (0, _selectors.getIstokenDetectionInactiveOnNonMainnetSupportedNetwork)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setPendingTokens: tokens => dispatch((0, _actions.setPendingTokens)(tokens)),
    clearPendingTokens: () => dispatch((0, _actions.clearPendingTokens)()),
    getTokenStandardAndDetails: (address, selectedAddress) => (0, _actions.getTokenStandardAndDetails)(address, selectedAddress, null)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_importToken.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\index.js", {"./import-token.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\import-token.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _importToken = _interopRequireDefault(require("./import-token.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _importToken.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\index.js", {"./token-list.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tokenList = _interopRequireDefault(require("./token-list.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _tokenList.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list-placeholder\\index.js", {"./token-list-placeholder.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list-placeholder\\token-list-placeholder.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-list\token-list-placeholder\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tokenListPlaceholder = _interopRequireDefault(require("./token-list-placeholder.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _tokenListPlaceholder.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list-placeholder\\token-list-placeholder.component.js", {"../../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../components/ui/icon/icon-token-search":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-token-search.js","../../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-list\token-list-placeholder\token-list-placeholder.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _iconTokenSearch = _interopRequireDefault(require("../../../../components/ui/icon/icon-token-search"));

var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TokenListPlaceholder extends _react.Component {
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-placeholder"
    }, /*#__PURE__*/_react.default.createElement(_iconTokenSearch.default, {
      size: 64,
      color: "var(--color-icon-muted)"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-placeholder__text"
    }, this.context.t('addAcquiredTokens')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "token-list-placeholder__link",
      href: _zendeskUrl.default.ADD_CUSTOM_TOKENS,
      target: "_blank",
      rel: "noopener noreferrer"
    }, this.context.t('learnMoreUpperCase')));
  }

}

exports.default = TokenListPlaceholder;

_defineProperty(TokenListPlaceholder, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list.component.js", {"../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","./token-list-placeholder":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list-placeholder\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-list\token-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("../../../helpers/utils/util");

var _tokenListPlaceholder = _interopRequireDefault(require("./token-list-placeholder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TokenList extends _react.Component {
  render() {
    const {
      results = [],
      selectedTokens = {},
      onToggleToken,
      tokens = []
    } = this.props;
    return results.length === 0 ? /*#__PURE__*/_react.default.createElement(_tokenListPlaceholder.default, null) : /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list__title"
    }, this.context.t('searchResults')), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list__tokens-container"
    }, Array(6).fill(undefined).map((_, i) => {
      var _results$i, _results$i2, _results$i3;

      const {
        symbol,
        name,
        address
      } = results[i] || {};
      const tokenAlreadyAdded = (0, _util.checkExistingAddresses)(address, tokens);

      const onClick = () => !tokenAlreadyAdded && onToggleToken(results[i]);

      return Boolean(((_results$i = results[i]) === null || _results$i === void 0 ? void 0 : _results$i.iconUrl) || symbol || name) && /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('token-list__token', {
          'token-list__token--selected': selectedTokens[address],
          'token-list__token--disabled': tokenAlreadyAdded
        }),
        onClick: onClick,
        onKeyPress: event => event.key === 'Enter' && onClick(),
        key: i,
        tabIndex: "0"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "token-list__token-icon",
        style: {
          backgroundImage: ((_results$i2 = results[i]) === null || _results$i2 === void 0 ? void 0 : _results$i2.iconUrl) && `url(${(_results$i3 = results[i]) === null || _results$i3 === void 0 ? void 0 : _results$i3.iconUrl})`
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "token-list__token-data"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "token-list__token-name"
      }, `${name} (${symbol})`)));
    })));
  }

}

exports.default = TokenList;

_defineProperty(TokenList, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TokenList, "propTypes", {
  tokens: _propTypes.default.array,
  results: _propTypes.default.array,
  selectedTokens: _propTypes.default.object,
  onToggleToken: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list.container.js", {"./token-list.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-list\\token-list.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-list\token-list.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _tokenList = _interopRequireDefault(require("./token-list.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    tokens
  } = state.metamask;
  return {
    tokens
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_tokenList.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-search\\index.js", {"./token-search.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-search\\token-search.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-search\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tokenSearch = _interopRequireDefault(require("./token-search.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _tokenSearch.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\import-token\\token-search\\token-search.component.js", {"../../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../components/ui/icon/search-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js","../../../components/ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","@material-ui/core/InputAdornment":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@material-ui\\core\\InputAdornment\\index.js","fuse.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\import-token\token-search\token-search.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));

var _stringUtils = require("../../../../shared/modules/string-utils");

var _searchIcon = _interopRequireDefault(require("../../../components/ui/icon/search-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TokenSearch extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      searchQuery: ''
    });

    const {
      tokenList
    } = this.props;
    this.tokenList = Object.values(tokenList);
    this.tokenSearchFuse = new _fuse.default(this.tokenList, {
      shouldSort: true,
      threshold: 0.45,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [{
        name: 'name',
        weight: 0.5
      }, {
        name: 'symbol',
        weight: 0.5
      }]
    });
  }

  handleSearch(searchQuery) {
    this.setState({
      searchQuery
    });
    const fuseSearchResult = this.tokenSearchFuse.search(searchQuery);
    const addressSearchResult = this.tokenList.filter(token => {
      return token.address && searchQuery && (0, _stringUtils.isEqualCaseInsensitive)(token.address, searchQuery);
    });
    const results = [...addressSearchResult, ...fuseSearchResult];
    this.props.onSearch({
      searchQuery,
      results
    });
  }

  renderAdornment() {
    return /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      position: "start",
      style: {
        marginRight: '12px'
      }
    }, /*#__PURE__*/_react.default.createElement(_searchIcon.default, {
      color: "var(--color-icon-muted)"
    }));
  }

  render() {
    const {
      error
    } = this.props;
    const {
      searchQuery
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "search-tokens",
      placeholder: this.context.t('searchTokens'),
      type: "text",
      value: searchQuery,
      onChange: e => this.handleSearch(e.target.value),
      error: error,
      fullWidth: true,
      autoFocus: true,
      autoComplete: "off",
      startAdornment: this.renderAdornment()
    });
  }

}

exports.default = TokenSearch;

_defineProperty(TokenSearch, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TokenSearch, "defaultProps", {
  error: null
});

_defineProperty(TokenSearch, "propTypes", {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  tokenList: _propTypes.default.object
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\index.js", {"../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","./error":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\error\\index.js","./routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\routes\\index.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var Sentry = _interopRequireWildcard(require("@sentry/browser"));

var _i18n = require("../contexts/i18n");

var _metametrics = require("../contexts/metametrics");

var _error = _interopRequireDefault(require("./error"));

var _routes = _interopRequireDefault(require("./routes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Index extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {});
  }

  static getDerivedStateFromError(error) {
    return {
      error
    };
  }

  componentDidCatch(error) {
    Sentry.captureException(error);
  }

  render() {
    const {
      error,
      errorId
    } = this.state;
    const {
      store
    } = this.props;

    if (error) {
      return /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react.default.createElement(_i18n.I18nProvider, null, /*#__PURE__*/_react.default.createElement(_i18n.LegacyI18nProvider, null, /*#__PURE__*/_react.default.createElement(_error.default, {
        error: error,
        errorId: errorId
      }))));
    }

    return /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.HashRouter, {
      hashType: "noslash"
    }, /*#__PURE__*/_react.default.createElement(_metametrics.MetaMetricsProvider, null, /*#__PURE__*/_react.default.createElement(_metametrics.LegacyMetaMetricsProvider, null, /*#__PURE__*/_react.default.createElement(_i18n.I18nProvider, null, /*#__PURE__*/_react.default.createElement(_i18n.LegacyI18nProvider, null, /*#__PURE__*/_react.default.createElement(_routes.default, null)))))));
  }

}

Index.propTypes = {
  store: _propTypes.default.object
};
var _default = Index;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\keychains\\restore-vault.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../components/app/create-new-vault":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\create-new-vault\\index.js","../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\keychains\restore-vault.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _createNewVault = _interopRequireDefault(require("../../components/app/create-new-vault"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../components/ui/typography"));

var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));

var _designSystem = require("../../helpers/constants/design-system");

var _metametrics = require("../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RestoreVaultPage extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleImport", async (password, seedPhrase) => {
      const {
        // eslint-disable-next-line no-shadow
        createNewVaultAndRestore,
        leaveImportSeedScreenState,
        history
      } = this.props;
      leaveImportSeedScreenState();
      await createNewVaultAndRestore(password, seedPhrase);
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.RETENTION,
        event: 'onboardingRestoredVault',
        properties: {
          action: 'userEntersSeedPhrase',
          legacy_event: true
        }
      });
      history.push(_routes.DEFAULT_ROUTE);
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      isLoading
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "first-view-main-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "first-view-main"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "import-account"
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "import-account__back-button",
      onClick: e => {
        e.preventDefault();
        this.props.leaveImportSeedScreenState();
        this.props.history.goBack();
      },
      href: "#"
    }, `< ${t('back')}`), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H1,
      color: _designSystem.COLORS.TEXT_DEFAULT
    }, t('resetWallet')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.COLORS.TEXT_DEFAULT
    }, t('resetWalletSubHeader')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.COLORS.TEXT_DEFAULT,
      marginTop: 4,
      marginBottom: 4
    }, t('resetWalletUsingSRP', [/*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      target: "_blank",
      rel: "noopener noreferrer",
      href: _zendeskUrl.default.ADD_MISSING_ACCOUNTS,
      key: "import-account-secretphase",
      className: "import-account__link"
    }, t('reAddAccounts')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      target: "_blank",
      rel: "noopener noreferrer",
      href: _zendeskUrl.default.IMPORT_ACCOUNTS,
      key: "import-account-reimport-accounts",
      className: "import-account__link"
    }, t('reAdded')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      target: "_blank",
      rel: "noopener noreferrer",
      href: _zendeskUrl.default.ADD_CUSTOM_TOKENS,
      key: "import-account-readd-tokens",
      className: "import-account__link"
    }, t('reAdded'))])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.COLORS.TEXT_DEFAULT,
      margin: 0,
      marginBottom: 4
    }, t('resetWalletWarning')), /*#__PURE__*/_react.default.createElement(_createNewVault.default, {
      disabled: isLoading,
      onSubmit: this.handleImport,
      submitText: t('restore')
    }))));
  }

}

_defineProperty(RestoreVaultPage, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(RestoreVaultPage, "propTypes", {
  createNewVaultAndRestore: _propTypes.default.func.isRequired,
  leaveImportSeedScreenState: _propTypes.default.func,
  history: _propTypes.default.object,
  isLoading: _propTypes.default.bool
});

var _default = (0, _reactRedux.connect)(({
  appState: {
    isLoading
  }
}) => ({
  isLoading
}), dispatch => ({
  leaveImportSeedScreenState: () => {
    dispatch((0, _actions.unMarkPasswordForgotten)());
  },
  createNewVaultAndRestore: (pw, seed) => dispatch((0, _actions.createNewVaultAndRestore)(pw, seed))
}))(RestoreVaultPage);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\keychains\\reveal-seed.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/export-text-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\export-text-container\\index.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\keychains\reveal-seed.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _actions = require("../../store/actions");

var _exportTextContainer = _interopRequireDefault(require("../../components/ui/export-text-container"));

var _history = require("../../ducks/history/history");

var _metametrics = require("../../../shared/constants/metametrics");

var _button = _interopRequireDefault(require("../../components/ui/button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PASSWORD_PROMPT_SCREEN = 'PASSWORD_PROMPT_SCREEN';
const REVEAL_SEED_SCREEN = 'REVEAL_SEED_SCREEN';

class RevealSeedPage extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      screen: PASSWORD_PROMPT_SCREEN,
      password: '',
      seedWords: null,
      error: null
    });
  }

  componentDidMount() {
    const passwordBox = document.getElementById('password-box');

    if (passwordBox) {
      passwordBox.focus();
    }
  }

  handleSubmit(event) {
    event.preventDefault();
    this.setState({
      seedWords: null,
      error: null
    });
    this.props.requestRevealSeedWords(this.state.password).then(seedWords => {
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.KEYS,
        event: _metametrics.EVENT_NAMES.KEY_EXPORT_REVEALED,
        properties: {
          key_type: _metametrics.EVENT.KEY_TYPES.SRP
        }
      });
      this.setState({
        seedWords,
        screen: REVEAL_SEED_SCREEN
      });
    }).catch(error => {
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.KEYS,
        event: _metametrics.EVENT_NAMES.KEY_EXPORT_FAILED,
        properties: {
          key_type: _metametrics.EVENT.KEY_TYPES.SRP,
          reason: error.message // 'incorrect_password',

        }
      });
      this.setState({
        error: error.message
      });
    });
  }

  renderWarning() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-container"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-exclamation-triangle fa-2x page-container__warning-icon"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-title"
    }, this.context.t('revealSeedWordsWarningTitle')), /*#__PURE__*/_react.default.createElement("div", null, this.context.t('revealSeedWordsWarning'))));
  }

  renderContent() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptContent() : this.renderRevealSeedContent();
  }

  renderPasswordPromptContent() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: event => this.handleSubmit(event)
    }, /*#__PURE__*/_react.default.createElement("label", {
      className: "input-label",
      htmlFor: "password-box"
    }, t('enterPasswordContinue')), /*#__PURE__*/_react.default.createElement("div", {
      className: "input-group"
    }, /*#__PURE__*/_react.default.createElement("input", {
      "data-testid": "input-password",
      type: "password",
      placeholder: t('password'),
      id: "password-box",
      value: this.state.password,
      onChange: event => this.setState({
        password: event.target.value
      }),
      className: (0, _classnames.default)('form-control', {
        'form-control--error': this.state.error
      })
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__error"
    }, this.state.error));
  }

  renderRevealSeedContent() {
    const {
      t,
      trackEvent
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", {
      className: "reveal-seed__label"
    }, t('yourPrivateSeedPhrase')), /*#__PURE__*/_react.default.createElement(_exportTextContainer.default, {
      text: this.state.seedWords,
      onClickCopy: () => {
        trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_COPIED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.SRP,
            copy_method: 'clipboard'
          }
        });
      },
      onClickDownload: () => {
        trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_COPIED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.SRP,
            copy_method: 'file_download'
          }
        });
      }
    }));
  }

  renderFooter() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptFooter() : this.renderRevealSeedFooter();
  }

  renderPasswordPromptFooter() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer"
    }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-button",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_CANCELED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.SRP
          }
        });
        this.props.history.push(this.props.mostRecentOverviewPage);
      }
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "page-container__footer-button",
      onClick: event => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_REQUESTED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.SRP
          }
        });
        this.handleSubmit(event);
      },
      disabled: this.state.password === ''
    }, this.context.t('next'))));
  }

  renderRevealSeedFooter() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-single-button",
      onClick: () => this.props.history.push(this.props.mostRecentOverviewPage)
    }, this.context.t('close')));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, this.context.t('secretRecoveryPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, this.context.t('revealSeedWordsDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.renderWarning(), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__content"
    }, this.renderContent())), this.renderFooter());
  }

}

RevealSeedPage.propTypes = {
  requestRevealSeedWords: _propTypes.default.func,
  history: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired
};
RevealSeedPage.contextTypes = {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
};

const mapStateToProps = state => {
  return {
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    requestRevealSeedWords: password => dispatch((0, _actions.requestRevealSeedWords)(password))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RevealSeedPage);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\lock\\index.js", {"./lock.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\lock\\lock.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\lock\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _lock.default;
  }
});

var _lock = _interopRequireDefault(require("./lock.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\lock\\lock.component.js", {"../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\lock\lock.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _routes = require("../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Lock extends _react.PureComponent {
  componentDidMount() {
    const {
      lockMetamask,
      isUnlocked,
      history
    } = this.props;

    if (isUnlocked) {
      lockMetamask().then(() => history.push(_routes.DEFAULT_ROUTE));
    } else {
      history.replace(_routes.DEFAULT_ROUTE);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }

}

exports.default = Lock;

_defineProperty(Lock, "propTypes", {
  history: _propTypes.default.object,
  isUnlocked: _propTypes.default.bool,
  lockMetamask: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\lock\\lock.container.js", {"../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./lock.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\lock\\lock.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\lock\lock.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _lock = _interopRequireDefault(require("./lock.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked
    }
  } = state;
  return {
    isUnlocked
  };
};

const mapDispatchToProps = dispatch => {
  return {
    lockMetamask: () => dispatch((0, _actions.lockMetamask)())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_lock.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\mobile-sync\\index.js", {"./mobile-sync.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\mobile-sync\\mobile-sync.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\mobile-sync\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _mobileSync.default;
  }
});

var _mobileSync = _interopRequireDefault(require("./mobile-sync.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\mobile-sync\\mobile-sync.component.js", {"../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","pubnub":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\pubnub\\dist\\web\\pubnub.min.js","qrcode-generator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\qrcode-generator\\qrcode.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\mobile-sync\mobile-sync.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _pubnub = _interopRequireDefault(require("pubnub"));

var _qrcodeGenerator = _interopRequireDefault(require("qrcode-generator"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _time = require("../../../shared/constants/time");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PASSWORD_PROMPT_SCREEN = 'PASSWORD_PROMPT_SCREEN';
const REVEAL_SEED_SCREEN = 'REVEAL_SEED_SCREEN';
const KEYS_GENERATION_TIME = _time.SECOND * 30;
const IDLE_TIME = _time.MINUTE * 2;

class MobileSyncPage extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      screen: PASSWORD_PROMPT_SCREEN,
      password: '',
      seedWords: null,
      importedAccounts: [],
      error: null,
      syncing: false,
      completed: false,
      channelName: undefined,
      cipherKey: undefined
    });

    _defineProperty(this, "syncing", false);
  }

  componentDidMount() {
    const passwordBox = document.getElementById('password-box');

    if (passwordBox) {
      passwordBox.focus();
    }
  }

  startIdleTimeout() {
    this.idleTimeout = setTimeout(() => {
      this.clearTimeouts();
      this.goBack();
    }, IDLE_TIME);
  }

  handleSubmit(event) {
    event.preventDefault();
    this.setState({
      seedWords: null,
      error: null
    });
    this.props.requestRevealSeedWords(this.state.password).then(seedWords => {
      this.startKeysGeneration();
      this.startIdleTimeout();
      this.exportAccounts().then(importedAccounts => {
        this.setState({
          seedWords,
          importedAccounts,
          screen: REVEAL_SEED_SCREEN
        });
      });
    }).catch(error => this.setState({
      error: error.message
    }));
  }

  async exportAccounts() {
    const addresses = [];
    this.props.keyrings.forEach(keyring => {
      if (keyring.type === 'Simple Key Pair') {
        addresses.push(keyring.accounts[0]);
      }
    });
    const importedAccounts = await this.props.exportAccounts(this.state.password, addresses);
    return importedAccounts;
  }

  startKeysGeneration() {
    this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
    this.disconnectWebsockets();
    this.generateCipherKeyAndChannelName();
    this.initWebsockets();
    this.keysGenerationTimeout = setTimeout(() => {
      this.startKeysGeneration();
    }, KEYS_GENERATION_TIME);
  }

  goBack() {
    const {
      history,
      mostRecentOverviewPage
    } = this.props;
    history.push(mostRecentOverviewPage);
  }

  clearTimeouts() {
    this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
    this.idleTimeout && clearTimeout(this.idleTimeout);
  }

  generateCipherKeyAndChannelName() {
    this.cipherKey = `${this.props.selectedAddress.substr(-4)}-${_pubnub.default.generateUUID()}`;
    this.channelName = `mm-${_pubnub.default.generateUUID()}`;
    this.setState({
      cipherKey: this.cipherKey,
      channelName: this.channelName
    });
  }

  initWithCipherKeyAndChannelName(cipherKey, channelName) {
    this.cipherKey = cipherKey;
    this.channelName = channelName;
  }

  initWebsockets() {
    // Make sure there are no existing listeners
    this.disconnectWebsockets();
    this.pubnub = new _pubnub.default({
      subscribeKey: "",
      publishKey: "",
      cipherKey: this.cipherKey,
      ssl: true
    });
    this.pubnubListener = {
      message: data => {
        const {
          channel,
          message
        } = data; // handle message

        if (channel !== this.channelName || !message) {
          return;
        }

        if (message.event === 'start-sync') {
          this.startSyncing();
        } else if (message.event === 'connection-info') {
          this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
          this.disconnectWebsockets();
          this.initWithCipherKeyAndChannelName(message.cipher, message.channel);
          this.initWebsockets();
        } else if (message.event === 'end-sync') {
          this.disconnectWebsockets();
          this.setState({
            syncing: false,
            completed: true
          });
        }
      }
    };
    this.pubnub.addListener(this.pubnubListener);
    this.pubnub.subscribe({
      channels: [this.channelName],
      withPresence: false
    });
  }

  disconnectWebsockets() {
    if (this.pubnub && this.pubnubListener) {
      this.pubnub.removeListener(this.pubnubListener);
    }
  } // Calculating a PubNub Message Payload Size.


  calculatePayloadSize(channel, message) {
    return encodeURIComponent(channel + JSON.stringify(message)).length + 100;
  }

  chunkString(str, size) {
    const numChunks = Math.ceil(str.length / size);
    const chunks = new Array(numChunks);
    let o = 0;

    for (let i = 0; i < numChunks; i += 1) {
      chunks[i] = str.substr(o, size);
      o += size;
    }

    return chunks;
  }

  notifyError(errorMsg) {
    return new Promise((resolve, reject) => {
      this.pubnub.publish({
        message: {
          event: 'error-sync',
          data: errorMsg
        },
        channel: this.channelName,
        sendByPost: false,
        // true to send via post
        storeInHistory: false
      }, (status, _response) => {
        if (status.error) {
          reject(status.errorData);
        } else {
          resolve();
        }
      });
    });
  }

  async startSyncing() {
    if (this.syncing) {
      return;
    }

    this.syncing = true;
    this.setState({
      syncing: true
    });
    const {
      accounts,
      network,
      preferences,
      transactions,
      tokens
    } = await this.props.fetchInfoToSync();
    const {
      t
    } = this.context;
    const allDataStr = JSON.stringify({
      accounts,
      network,
      preferences,
      transactions,
      tokens,
      udata: {
        pwd: this.state.password,
        seed: this.state.seedWords,
        importedAccounts: this.state.importedAccounts
      }
    });
    const chunks = this.chunkString(allDataStr, 17000);
    const totalChunks = chunks.length;

    try {
      for (let i = 0; i < totalChunks; i++) {
        await this.sendMessage(chunks[i], i + 1, totalChunks);
      }
    } catch (e) {
      this.props.displayWarning(`${t('syncFailed')} :(`);
      this.setState({
        syncing: false
      });
      this.syncing = false;
      this.notifyError(e.toString());
    }
  }

  sendMessage(data, pkg, count) {
    return new Promise((resolve, reject) => {
      this.pubnub.publish({
        message: {
          event: 'syncing-data',
          data,
          totalPkg: count,
          currentPkg: pkg
        },
        channel: this.channelName,
        sendByPost: false,
        // true to send via post
        storeInHistory: false
      }, (status, _response) => {
        if (status.error) {
          reject(status.errorData);
        } else {
          resolve();
        }
      });
    });
  }

  componentWillUnmount() {
    if (this.state.error) {
      this.props.hideWarning();
    }

    this.clearTimeouts();
    this.disconnectWebsockets();
  }

  renderWarning(text) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", null, text)));
  }

  renderContent() {
    const {
      syncing,
      completed,
      screen
    } = this.state;
    const {
      t
    } = this.context;

    if (syncing) {
      return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
        loadingMessage: t('syncInProgress')
      });
    }

    if (completed) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "reveal-seed__content"
      }, /*#__PURE__*/_react.default.createElement("label", {
        className: "reveal-seed__label",
        style: {
          width: '100%',
          textAlign: 'center'
        }
      }, t('syncWithMobileComplete')));
    }

    return screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", null, this.renderWarning(this.context.t('mobileSyncWarning'))) : /*#__PURE__*/_react.default.createElement("div", null, this.renderWarning(this.context.t('syncWithMobileBeCareful')), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__content"
    }, this.renderRevealSeedContent()));
  }

  renderPasswordPromptContent() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: event => this.handleSubmit(event)
    }, /*#__PURE__*/_react.default.createElement("label", {
      className: "input-label",
      htmlFor: "password-box"
    }, t('enterPasswordContinue')), /*#__PURE__*/_react.default.createElement("div", {
      className: "input-group"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "password",
      placeholder: t('password'),
      id: "password-box",
      value: this.state.password,
      onChange: event => this.setState({
        password: event.target.value
      }),
      className: (0, _classnames.default)('form-control', {
        'form-control--error': this.state.error
      })
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__error"
    }, this.state.error));
  }

  renderRevealSeedContent() {
    const qrImage = (0, _qrcodeGenerator.default)(0, 'M');
    qrImage.addData(`metamask-sync:${this.state.channelName}|@|${this.state.cipherKey}`);
    qrImage.make();
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", {
      className: "reveal-seed__label",
      style: {
        width: '100%',
        textAlign: 'center'
      }
    }, t('syncWithMobileScanThisCode')), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'center'
      },
      dangerouslySetInnerHTML: {
        __html: qrImage.createTableTag(4)
      }
    }));
  }

  renderFooter() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptFooter() : this.renderRevealSeedFooter();
  }

  renderPasswordPromptFooter() {
    const {
      t
    } = this.context;
    const {
      password
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__buttons",
      style: {
        padding: '30px 15px 30px 15px',
        marginTop: 0
      }
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => this.goBack()
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-account-create-form__button",
      onClick: event => this.handleSubmit(event),
      disabled: password === ''
    }, t('next')));
  }

  renderRevealSeedFooter() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer",
      style: {
        padding: 30
      }
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-button",
      onClick: () => this.goBack()
    }, t('close')));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      screen
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, t('syncWithMobileTitle')), screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('syncWithMobileDesc')) : null, screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('syncWithMobileDescNewUsers')) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.renderContent()), this.renderFooter());
  }

}

exports.default = MobileSyncPage;

_defineProperty(MobileSyncPage, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(MobileSyncPage, "propTypes", {
  history: _propTypes.default.object.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  displayWarning: _propTypes.default.func.isRequired,
  fetchInfoToSync: _propTypes.default.func.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  requestRevealSeedWords: _propTypes.default.func.isRequired,
  exportAccounts: _propTypes.default.func.isRequired,
  keyrings: _propTypes.default.array,
  hideWarning: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\mobile-sync\\mobile-sync.container.js", {"../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./mobile-sync.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\mobile-sync\\mobile-sync.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\mobile-sync\mobile-sync.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors");

var _mobileSync = _interopRequireDefault(require("./mobile-sync.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    requestRevealSeedWords: password => dispatch((0, _actions.requestRevealSeedWords)(password)),
    fetchInfoToSync: () => dispatch((0, _actions.fetchInfoToSync)()),
    displayWarning: message => dispatch((0, _actions.displayWarning)(message || null)),
    exportAccounts: (password, addresses) => dispatch((0, _actions.exportAccounts)(password, addresses)),
    hideWarning: () => dispatch((0, _actions.hideWarning)())
  };
};

const mapStateToProps = state => {
  const {
    metamask: {
      selectedAddress
    }
  } = state;
  return {
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    selectedAddress,
    keyrings: (0, _selectors.getMetaMaskKeyrings)(state)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_mobileSync.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\create-password\\create-password.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/app/step-progress-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/check-box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../../components/ui/form-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\form-field\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/onboarding":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\onboarding.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","zxcvbn":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\zxcvbn\\lib\\main.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\create-password\create-password.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreatePassword;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _zxcvbn = _interopRequireDefault(require("zxcvbn"));

var _reactRedux = require("react-redux");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

var _formField = _interopRequireDefault(require("../../../components/ui/form-field"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _checkBox = _interopRequireDefault(require("../../../components/ui/check-box"));

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _selectors = require("../../../selectors");

var _onboarding = require("../../../helpers/constants/onboarding");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function CreatePassword({
  createNewAccount,
  importWithRecoveryPhrase,
  secretRecoveryPhrase
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [passwordError, setPasswordError] = (0, _react.useState)('');
  const [passwordStrength, setPasswordStrength] = (0, _react.useState)('');
  const [passwordStrengthText, setPasswordStrengthText] = (0, _react.useState)('');
  const [confirmPasswordError, setConfirmPasswordError] = (0, _react.useState)('');
  const [termsChecked, setTermsChecked] = (0, _react.useState)(false);
  const [showPassword, setShowPassword] = (0, _react.useState)(false);
  const history = (0, _reactRouterDom.useHistory)();
  const firstTimeFlowType = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowType);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const isValid = (0, _react.useMemo)(() => {
    if (!password || !confirmPassword || password !== confirmPassword) {
      return false;
    }

    if (password.length < 8) {
      return false;
    }

    return !passwordError && !confirmPasswordError;
  }, [password, confirmPassword, passwordError, confirmPasswordError]);

  const getPasswordStrengthLabel = (score, translation) => {
    if (score >= 4) {
      return {
        className: 'create-password__strong',
        text: translation('strong'),
        description: ''
      };
    } else if (score === 3) {
      return {
        className: 'create-password__average',
        text: translation('average'),
        description: t('passwordStrengthDescription')
      };
    }

    return {
      className: 'create-password__weak',
      text: translation('weak'),
      description: t('passwordStrengthDescription')
    };
  };

  const handlePasswordChange = passwordInput => {
    let confirmError = '';
    const passwordEvaluation = (0, _zxcvbn.default)(passwordInput);
    const passwordStrengthLabel = getPasswordStrengthLabel(passwordEvaluation.score, t);
    const passwordStrengthDescription = passwordStrengthLabel.description;
    const passwordStrengthInput = t('passwordStrength', [/*#__PURE__*/_react.default.createElement("span", {
      key: passwordEvaluation.score,
      className: passwordStrengthLabel.className
    }, passwordStrengthLabel.text)]);

    if (confirmPassword && passwordInput !== confirmPassword) {
      confirmError = t('passwordsDontMatch');
    }

    setPassword(passwordInput);
    setPasswordStrength(passwordStrengthInput);
    setPasswordStrengthText(passwordStrengthDescription);
    setConfirmPasswordError(confirmError);
  };

  const handleConfirmPasswordChange = confirmPasswordInput => {
    let error = '';

    if (password !== confirmPasswordInput) {
      error = t('passwordsDontMatch');
    }

    setConfirmPassword(confirmPasswordInput);
    setConfirmPasswordError(error);
  };

  const handleCreate = async event => {
    event.preventDefault();

    if (!isValid) {
      return;
    } // If secretRecoveryPhrase is defined we are in import wallet flow


    if (secretRecoveryPhrase && firstTimeFlowType === _onboarding.FIRST_TIME_FLOW_TYPES.IMPORT) {
      await importWithRecoveryPhrase(password, secretRecoveryPhrase);
      history.push(_routes.ONBOARDING_COMPLETION_ROUTE);
    } else {
      // Otherwise we are in create new wallet flow
      try {
        if (createNewAccount) {
          await createNewAccount(password);
        }

        trackEvent({
          event: _metametrics2.EVENT_NAMES.ACCOUNT_PASSWORD_CREATED,
          category: _metametrics2.EVENT.CATEGORIES.ONBOARDING
        });
        history.push(_routes.ONBOARDING_SECURE_YOUR_WALLET_ROUTE);
      } catch (error) {
        setPasswordError(error.message);
      }
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "create-password__wrapper",
    "data-testid": "create-password"
  }, secretRecoveryPhrase && firstTimeFlowType === _onboarding.FIRST_TIME_FLOW_TYPES.IMPORT ? /*#__PURE__*/_react.default.createElement(_stepProgressBar.TwoStepProgressBar, {
    stage: _stepProgressBar.twoStepStages.PASSWORD_CREATE,
    marginBottom: 4
  }) : /*#__PURE__*/_react.default.createElement(_stepProgressBar.ThreeStepProgressBar, {
    stage: _stepProgressBar.threeStepStages.PASSWORD_CREATE,
    marginBottom: 4
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('createPassword')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('passwordSetupDetails')), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement("form", {
    className: "create-password__form",
    onSubmit: handleCreate
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    dataTestId: "create-password-new",
    autoFocus: true,
    passwordStrength: passwordStrength,
    passwordStrengthText: passwordStrengthText,
    onChange: handlePasswordChange,
    password: !showPassword,
    titleText: t('newPassword'),
    value: password,
    titleDetail: /*#__PURE__*/_react.default.createElement("button", {
      className: "create-password__form--password-button",
      type: "button",
      onClick: e => {
        e.preventDefault();
        setShowPassword(!showPassword);
      }
    }, showPassword ? t('hide') : t('show'))
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    dataTestId: "create-password-confirm",
    onChange: handleConfirmPasswordChange,
    password: !showPassword,
    error: confirmPasswordError,
    titleText: t('confirmPassword'),
    value: confirmPassword,
    titleDetail: isValid && /*#__PURE__*/_react.default.createElement("div", {
      className: "create-password__form--checkmark"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fas fa-check"
    }))
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: "create-password__form__terms-label"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    dataTestId: "create-password-terms",
    onClick: () => setTermsChecked(!termsChecked),
    checked: termsChecked
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H5,
    boxProps: {
      marginLeft: 3
    }
  }, t('passwordTermsWarning', [/*#__PURE__*/_react.default.createElement("a", {
    onClick: e => e.stopPropagation(),
    key: "create-password__link-text",
    href: _zendeskUrl.default.PASSWORD_ARTICLE,
    target: "_blank",
    rel: "noopener noreferrer"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "create-password__link-text"
  }, t('learnMoreUpperCase')))])))), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": secretRecoveryPhrase && firstTimeFlowType === _onboarding.FIRST_TIME_FLOW_TYPES.IMPORT ? 'create-password-import' : 'create-password-wallet',
    type: "primary",
    large: true,
    className: "create-password__form--submit-button",
    disabled: !isValid || !termsChecked,
    onClick: handleCreate
  }, secretRecoveryPhrase && firstTimeFlowType === _onboarding.FIRST_TIME_FLOW_TYPES.IMPORT ? t('importMyWallet') : t('createNewWallet')))));
}

CreatePassword.propTypes = {
  createNewAccount: _propTypes.default.func,
  importWithRecoveryPhrase: _propTypes.default.func,
  secretRecoveryPhrase: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\creation-successful\\creation-successful.js", {"../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\creation-successful\creation-successful.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreationSuccessful;

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _actions = require("../../../store/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CreationSuccessful() {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();

  const onComplete = async () => {
    await dispatch((0, _actions.setCompletedOnboarding)());
    history.push(_routes.ONBOARDING_PIN_EXTENSION_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "creation-successful",
    "data-testid": "creation-successful"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/tada.png"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: 6
  }, t('walletCreationSuccessTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessDetail'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    boxProps: {
      align: _designSystem.ALIGN_ITEMS.LEFT
    },
    marginLeft: 12
  }, t('remember')), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder1'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder2'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder3', [/*#__PURE__*/_react.default.createElement("span", {
    key: "creation-successful__bold",
    className: "creation-successful__bold"
  }, t('walletCreationSuccessReminder3BoldSection'))]))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    href: "https://community.metamask.io/t/what-is-a-secret-recovery-phrase-and-how-to-keep-your-crypto-wallet-secure/3440",
    target: "_blank",
    type: "link",
    rel: "noopener noreferrer"
  }, t('learnMoreUpperCase')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 6,
    className: "creation-successful__actions"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => history.push(_routes.ONBOARDING_PRIVACY_SETTINGS_ROUTE)
  }, t('setAdvancedPrivacySettings')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "onboarding-complete-done",
    type: "primary",
    large: true,
    rounded: true,
    onClick: onComplete
  }, t('gotIt'))));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\import-srp\\import-srp.js", {"../../../components/app/srp-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\index.js","../../../components/app/step-progress-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\import-srp\import-srp.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportSRP;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _srpInput = _interopRequireDefault(require("../../../components/app/srp-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ImportSRP({
  submitSecretRecoveryPhrase
}) {
  const [secretRecoveryPhrase, setSecretRecoveryPhrase] = (0, _react.useState)('');
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp",
    "data-testid": "import-srp"
  }, /*#__PURE__*/_react.default.createElement(_stepProgressBar.TwoStepProgressBar, {
    stage: _stepProgressBar.twoStepStages.RECOVERY_PHRASE_CONFIRM,
    marginBottom: 4
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__header"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('accessYourWalletWithSRP'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__description"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('accessYourWalletWithSRPDescription', [/*#__PURE__*/_react.default.createElement("a", {
    key: "learnMore",
    type: "link",
    href: _zendeskUrl.default.SECRET_RECOVERY_PHRASE,
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('learnMoreUpperCase'))]))), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__actions"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT
  }, /*#__PURE__*/_react.default.createElement(_srpInput.default, {
    onChange: setSecretRecoveryPhrase,
    srpText: t('typeYourSRP')
  }), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-srp__confirm-button",
    type: "primary",
    "data-testid": "import-srp-confirm",
    large: true,
    onClick: () => {
      submitSecretRecoveryPhrase(secretRecoveryPhrase);
      history.replace(_routes.ONBOARDING_CREATE_PASSWORD_ROUTE);
    },
    disabled: !secretRecoveryPhrase.trim()
  }, t('confirmRecoveryPhrase')))));
}

ImportSRP.propTypes = {
  submitSecretRecoveryPhrase: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\metametrics\\metametrics.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\metametrics\metametrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingMetametrics;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _typography = _interopRequireDefault(require("../../../components/ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _metametrics = require("../../../../shared/constants/metametrics");

var _metametrics2 = require("../../../contexts/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function OnboardingMetametrics() {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const nextRoute = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowTypeRoute);
  const firstTimeFlowType = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowType);
  const participateInMetaMetrics = (0, _reactRedux.useSelector)(_selectors.getParticipateInMetaMetrics);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);

  const onConfirm = async () => {
    const [, metaMetricsId] = await dispatch((0, _actions.setParticipateInMetaMetrics)(true));
    const isInitiallyNotParticipating = !participateInMetaMetrics;

    try {
      if (isInitiallyNotParticipating) {
        trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.METRICS_OPT_IN,
          properties: {
            action: 'Metrics Option',
            legacy_event: true
          }
        }, {
          isOptIn: true,
          flushImmediately: true
        });
      }

      trackEvent({
        category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
        event: _metametrics.EVENT_NAMES.WALLET_SETUP_STARTED,
        properties: {
          account_type: firstTimeFlowType === 'create' ? _metametrics.EVENT.ACCOUNT_TYPES.DEFAULT : _metametrics.EVENT.ACCOUNT_TYPES.IMPORTED
        }
      }, {
        isOptIn: true,
        metaMetricsId,
        flushImmediately: true
      });
    } finally {
      history.push(nextRoute);
    }
  };

  const onCancel = async () => {
    await dispatch((0, _actions.setParticipateInMetaMetrics)(false));
    const isInitiallyParticipatingOrNotSet = participateInMetaMetrics === null || participateInMetaMetrics;

    try {
      if (isInitiallyParticipatingOrNotSet) {
        trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
          event: _metametrics.EVENT_NAMES.METRICS_OPT_OUT,
          properties: {
            action: 'Metrics Option',
            legacy_event: true
          }
        }, {
          isOptIn: true,
          flushImmediately: true
        });
      }
    } finally {
      history.push(nextRoute);
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-metametrics",
    "data-testid": "onboarding-metametrics"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('metametricsTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "onboarding-metametrics__desc",
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('metametricsOptInDescription2')), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-check"
  }), t('metametricsCommitmentsAllowOptOut2')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-check"
  }), t('metametricsCommitmentsSendAnonymizedEvents')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverCollect')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverIP')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverSell'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    align: _designSystem.TEXT_ALIGN.CENTER,
    variant: _designSystem.TYPOGRAPHY.H6,
    className: "onboarding-metametrics__terms"
  }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
    key: "metametrics-bottom-text-wrapper",
    href: "https://metamask.io/privacy.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('gdprMessagePrivacyPolicy'))])), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-metametrics__buttons"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "metametrics-no-thanks",
    type: "secondary",
    onClick: onCancel
  }, t('noThanks')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "metametrics-i-agree",
    type: "primary",
    onClick: onConfirm
  }, t('affirmAgree'))));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\onboarding-app-header\\onboarding-app-header.js", {"../../../../app/_locales/index.json":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\_locales\\index.json","../../../components/ui/dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../../components/ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\onboarding-app-header\onboarding-app-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingAppHeader;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _metamask = require("../../../ducks/metamask/metamask");

var _actions = require("../../../store/actions");

var _index = _interopRequireDefault(require("../../../../app/_locales/index.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function OnboardingAppHeader() {
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentLocale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);

  const localeOptions = _index.default.map(locale => {
    return {
      name: locale.name,
      value: locale.code
    };
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-app-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-app-header__contents"
  }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
    unsetIconHeight: true,
    isOnboarding: true
  }), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    id: "select-locale",
    options: localeOptions,
    selectedOption: currentLocale,
    onChange: async newLocale => dispatch((0, _actions.updateCurrentLocale)(newLocale))
  })));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\onboarding-flow-switch\\onboarding-flow-switch.js", {"../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\onboarding-flow-switch\onboarding-flow-switch.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingFlowSwitch;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../../helpers/constants/routes");

var _metamask = require("../../../ducks/metamask/metamask");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function OnboardingFlowSwitch() {
  /* eslint-disable prefer-const */
  const completedOnboarding = (0, _reactRedux.useSelector)(_metamask.getCompletedOnboarding);
  const isInitialized = (0, _reactRedux.useSelector)(_metamask.getIsInitialized);
  const seedPhraseBackedUp = (0, _reactRedux.useSelector)(_metamask.getSeedPhraseBackedUp);
  const isUnlocked = (0, _reactRedux.useSelector)(_metamask.getIsUnlocked);

  if (completedOnboarding) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  if (seedPhraseBackedUp !== null) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.ONBOARDING_COMPLETION_ROUTE
      }
    });
  }

  if (isUnlocked) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.LOCK_ROUTE
      }
    });
  }

  if (!isInitialized) {
    let redirect;
    /* eslint-disable prefer-const */
    ///: BEGIN:ONLY_INCLUDE_IN(main,beta)

    redirect = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.ONBOARDING_WELCOME_ROUTE
      }
    }); ///: END:ONLY_INCLUDE_IN

    /* eslint-enable prefer-const */

    return redirect;
  }

  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: _routes.ONBOARDING_UNLOCK_ROUTE
    }
  });
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\onboarding-flow.js", {"../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../unlock-page":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\unlock-page\\index.js","./create-password/create-password":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\create-password\\create-password.js","./creation-successful/creation-successful":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\creation-successful\\creation-successful.js","./import-srp/import-srp":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\import-srp\\import-srp.js","./metametrics/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\metametrics\\metametrics.js","./onboarding-flow-switch/onboarding-flow-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\onboarding-flow-switch\\onboarding-flow-switch.js","./pin-extension/pin-extension":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\pin-extension\\pin-extension.js","./privacy-settings/privacy-settings":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\privacy-settings\\privacy-settings.js","./recovery-phrase/confirm-recovery-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\recovery-phrase\\confirm-recovery-phrase.js","./recovery-phrase/review-recovery-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\recovery-phrase\\review-recovery-phrase.js","./secure-your-wallet/secure-your-wallet":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\secure-your-wallet\\secure-your-wallet.js","./welcome/welcome":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\onboarding-flow\\welcome\\welcome.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\onboarding-flow\onboarding-flow.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingFlow;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _unlockPage = _interopRequireDefault(require("../unlock-page"));

var _routes = require("../../helpers/constants/routes");

var _metamask = require("../../ducks/metamask/metamask");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _useI18nContext = require("../../hooks/useI18nContext");

var _onboardingFlowSwitch = _interopRequireDefault(require("./onboarding-flow-switch/onboarding-flow-switch"));

var _createPassword = _interopRequireDefault(require("./create-password/create-password"));

var _reviewRecoveryPhrase = _interopRequireDefault(require("./recovery-phrase/review-recovery-phrase"));

var _secureYourWallet = _interopRequireDefault(require("./secure-your-wallet/secure-your-wallet"));

var _confirmRecoveryPhrase = _interopRequireDefault(require("./recovery-phrase/confirm-recovery-phrase"));

var _privacySettings = _interopRequireDefault(require("./privacy-settings/privacy-settings"));

var _creationSuccessful = _interopRequireDefault(require("./creation-successful/creation-successful"));

var _welcome = _interopRequireDefault(require("./welcome/welcome"));

var _importSrp = _interopRequireDefault(require("./import-srp/import-srp"));

var _pinExtension = _interopRequireDefault(require("./pin-extension/pin-extension"));

var _metametrics = _interopRequireDefault(require("./metametrics/metametrics"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function OnboardingFlow() {
  const [secretRecoveryPhrase, setSecretRecoveryPhrase] = (0, _react.useState)('');
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentLocation = (0, _reactRouterDom.useLocation)();
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const completedOnboarding = (0, _reactRedux.useSelector)(_metamask.getCompletedOnboarding);
  const seedPhraseBackedUp = (0, _reactRedux.useSelector)(_metamask.getSeedPhraseBackedUp);
  const nextRoute = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowTypeRoute);
  (0, _react.useEffect)(() => {
    if (completedOnboarding && seedPhraseBackedUp) {
      history.push(_routes.DEFAULT_ROUTE);
    }
  }, [history, completedOnboarding, seedPhraseBackedUp]);

  const handleCreateNewAccount = async password => {
    const newSecretRecoveryPhrase = await dispatch((0, _actions.createNewVaultAndGetSeedPhrase)(password));
    setSecretRecoveryPhrase(newSecretRecoveryPhrase);
  };

  const handleUnlock = async password => {
    const retrievedSecretRecoveryPhrase = await dispatch((0, _actions.unlockAndGetSeedPhrase)(password));
    setSecretRecoveryPhrase(retrievedSecretRecoveryPhrase);
    history.push(nextRoute);
  };

  const handleImportWithRecoveryPhrase = async (password, srp) => {
    return await dispatch((0, _actions.createNewVaultAndRestore)(password, srp));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-flow"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-flow__wrapper"
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_CREATE_PASSWORD_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_createPassword.default, _extends({}, routeProps, {
      createNewAccount: handleCreateNewAccount,
      importWithRecoveryPhrase: handleImportWithRecoveryPhrase,
      secretRecoveryPhrase: secretRecoveryPhrase
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: _routes.ONBOARDING_SECURE_YOUR_WALLET_ROUTE,
    component: _secureYourWallet.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_REVIEW_SRP_ROUTE,
    render: () => /*#__PURE__*/_react.default.createElement(_reviewRecoveryPhrase.default, {
      secretRecoveryPhrase: secretRecoveryPhrase
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_CONFIRM_SRP_ROUTE,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmRecoveryPhrase.default, {
      secretRecoveryPhrase: secretRecoveryPhrase
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_IMPORT_WITH_SRP_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_importSrp.default, _extends({}, routeProps, {
      submitSecretRecoveryPhrase: setSecretRecoveryPhrase
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_UNLOCK_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_unlockPage.default, _extends({}, routeProps, {
      onSubmit: handleUnlock
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_PRIVACY_SETTINGS_ROUTE,
    component: _privacySettings.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_COMPLETION_ROUTE,
    component: _creationSuccessful.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_WELCOME_ROUTE,
    component: _welcome.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_PIN_EXTENSION_ROUTE,
    component: _pinExtension.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_METAMETRICS,
    component: _metametrics.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: "*",
    component: _onboardingFlowSwitch.default
  }))), (currentLocation === null || currentLocation === void 0 ? void 0 : currentLocation.pathname) === _routes.ONBOARDING_COMPLETION_ROUTE && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "onboarding-flow__twitter-button",
    type: "link",
    href: "https://twitter.com/MetaMask",
    target: "_blank"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('followUsOnTwitter')), /*#__PURE__*/_react.default.createElement("i", {
    className: "fab fa-twitter onboarding-flow__twitter-button__icon"
  })));
}

      };
    };
  }
}, {package:"$root$",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
