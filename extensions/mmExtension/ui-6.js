LavaPack.loadBundle([
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\dropdowns\\network-dropdown.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/modules/network.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\network.utils.js","../../../ducks/alerts/invalid-custom-network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\invalid-custom-network.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/color-indicator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\color-indicator\\index.js","../../ui/icon/icon-check":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-check.js","./dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\dropdowns\\dropdown.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\dropdowns\network-dropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _button = _interopRequireDefault(require("../../ui/button"));

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _invalidCustomNetwork = require("../../../ducks/alerts/invalid-custom-network");

var _network = require("../../../../shared/constants/network");

var _network2 = require("../../../../shared/modules/network.utils");

var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));

var _designSystem = require("../../../helpers/constants/design-system");

var _selectors = require("../../../selectors");

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _metametrics = require("../../../../shared/constants/metametrics");

var _routes = require("../../../helpers/constants/routes");

var _iconCheck = _interopRequireDefault(require("../../ui/icon/icon-check"));

var _dropdown = require("./dropdown");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// classes from nodes of the toggle element.
const notToggleElementClassnames = ['menu-icon', 'network-name', 'network-indicator', 'network-caret', 'network-component', 'modal-container__footer-button'];
const DROP_DOWN_MENU_ITEM_STYLE = {
  fontSize: '16px',
  lineHeight: '20px',
  padding: '16px'
};

function mapStateToProps(state) {
  return {
    provider: state.metamask.provider,
    shouldShowTestNetworks: (0, _selectors.getShowTestNetworks)(state),
    frequentRpcListDetail: state.metamask.frequentRpcListDetail || [],
    networkDropdownOpen: state.appState.networkDropdownOpen,
    showTestnetMessageInDropdown: state.metamask.showTestnetMessageInDropdown
  };
}

function mapDispatchToProps(dispatch) {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    setRpcTarget: (target, chainId, ticker, nickname) => {
      dispatch(actions.setRpcTarget(target, chainId, ticker, nickname));
    },
    hideNetworkDropdown: () => dispatch(actions.hideNetworkDropdown()),
    displayInvalidCustomNetworkAlert: networkName => {
      dispatch((0, _invalidCustomNetwork.openAlert)(networkName));
    },
    showConfirmDeleteNetworkModal: ({
      target,
      onConfirm
    }) => {
      return dispatch(actions.showModal({
        name: 'CONFIRM_DELETE_NETWORK',
        target,
        onConfirm
      }));
    },
    hideTestNetMessage: () => actions.hideTestNetMessage()
  };
}

class NetworkDropdown extends _react.Component {
  handleClick(newProviderType) {
    const {
      provider: {
        type: providerType
      },
      setProviderType
    } = this.props;
    const {
      trackEvent
    } = this.context;
    trackEvent({
      category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
      event: _metametrics.EVENT_NAMES.NAV_NETWORK_SWITCHED,
      properties: {
        from_network: providerType,
        to_network: newProviderType
      }
    });
    setProviderType(newProviderType);
  }

  renderAddCustomButton() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "network__add-network-button"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: () => {
        (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? global.platform.openExtensionInBrowser(_routes.ADD_POPULAR_CUSTOM_NETWORK) : this.props.history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK);
        this.props.hideNetworkDropdown();
      }
    }, this.context.t('addNetwork')));
  }

  renderCustomRpcList(rpcListDetail, provider, opts = {}) {
    const reversedRpcListDetail = rpcListDetail.slice().reverse();
    return reversedRpcListDetail.map(entry => {
      const {
        rpcUrl,
        chainId,
        ticker = 'ETH',
        nickname = ''
      } = entry;
      const isCurrentRpcTarget = provider.type === _network.NETWORK_TYPES.RPC && rpcUrl === provider.rpcUrl;
      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
        key: `common${rpcUrl}`,
        closeMenu: () => this.props.hideNetworkDropdown(),
        onClick: () => {
          if ((0, _network2.isPrefixedFormattedHexString)(chainId)) {
            this.props.setRpcTarget(rpcUrl, chainId, ticker, nickname);
          } else {
            this.props.displayInvalidCustomNetworkAlert(nickname || rpcUrl);
          }
        },
        style: {
          fontSize: '16px',
          lineHeight: '20px',
          padding: '16px'
        }
      }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_iconCheck.default, {
        color: "var(--color-success-default)"
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: "network-check__transparent"
      }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
        color: opts.isLocalHost ? 'localhost' : _designSystem.COLORS.ICON_MUTED,
        size: _designSystem.SIZES.LG,
        type: _colorIndicator.default.TYPES.FILLED
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "network-name-item",
        "data-testid": `${nickname}-network-item`,
        style: {
          color: isCurrentRpcTarget ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
        }
      }, nickname || rpcUrl), isCurrentRpcTarget ? null : /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-times delete",
        onClick: e => {
          e.stopPropagation();
          this.props.showConfirmDeleteNetworkModal({
            target: rpcUrl,
            onConfirm: () => undefined
          });
        }
      }));
    });
  }

  getNetworkName() {
    const {
      provider
    } = this.props;
    const providerName = provider.type;
    const {
      t
    } = this.context;

    switch (providerName) {
      case _network.NETWORK_TYPES.MAINNET:
        return t('mainnet');

      case _network.NETWORK_TYPES.GOERLI:
        return t('goerli');

      case _network.NETWORK_TYPES.SEPOLIA:
        return t('sepolia');

      case _network.NETWORK_TYPES.LOCALHOST:
        return t('localhost');

      default:
        return provider.nickname || t('unknownNetwork');
    }
  }

  renderNetworkEntry(network) {
    const {
      provider: {
        type: providerType
      }
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: () => this.handleClick(network),
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, providerType === network ? /*#__PURE__*/_react.default.createElement(_iconCheck.default, {
      color: "var(--color-success-default)"
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.SIZES.LG,
      type: _colorIndicator.default.TYPES.FILLED
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      "data-testid": `${network}-network-item`,
      style: {
        color: providerType === network ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
      }
    }, this.context.t(network)));
  }

  render() {
    const {
      history,
      hideNetworkDropdown,
      shouldShowTestNetworks,
      showTestnetMessageInDropdown,
      hideTestNetMessage
    } = this.props;
    const rpcListDetail = this.props.frequentRpcListDetail;
    const rpcListDetailWithoutLocalHost = rpcListDetail.filter(rpc => rpc.rpcUrl !== _network.LOCALHOST_RPC_URL);
    const rpcListDetailForLocalHost = rpcListDetail.filter(rpc => rpc.rpcUrl === _network.LOCALHOST_RPC_URL);
    const isOpen = this.props.networkDropdownOpen;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_dropdown.Dropdown, {
      isOpen: isOpen,
      onClickOutside: event => {
        const {
          classList
        } = event.target;

        const isInClassList = className => classList.contains(className);

        const notToggleElementIndex = notToggleElementClassnames.findIndex(isInClassList);

        if (notToggleElementIndex === -1) {
          event.stopPropagation();
          hideNetworkDropdown();
        }
      },
      containerClassName: "network-droppo",
      zIndex: 55,
      style: {
        position: 'absolute',
        top: '58px',
        width: '309px',
        zIndex: '55px'
      },
      innerStyle: {
        padding: '16px 0'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-title"
    }, t('networks')), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-divider"
    }), showTestnetMessageInDropdown ? /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-content"
    }, t('toggleTestNetworks', [/*#__PURE__*/_react.default.createElement("a", {
      href: "#",
      key: "advancedSettingsLink",
      className: "network-dropdown-content--link",
      onClick: e => {
        e.preventDefault();
        hideNetworkDropdown();
        history.push(`${_routes.ADVANCED_ROUTE}#show-testnets`);
      }
    }, t('showHide'))]), /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: hideTestNetMessage,
      className: "network-dropdown-content--dismiss"
    }, t('dismiss'))) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-list"
    }, this.renderNetworkEntry(_network.NETWORK_TYPES.MAINNET), this.renderCustomRpcList(rpcListDetailWithoutLocalHost, this.props.provider), shouldShowTestNetworks && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNetworkEntry(_network.NETWORK_TYPES.GOERLI), this.renderNetworkEntry(_network.NETWORK_TYPES.SEPOLIA), this.renderCustomRpcList(rpcListDetailForLocalHost, this.props.provider, {
      isLocalHost: true
    }))), this.renderAddCustomButton());
  }

}

_defineProperty(NetworkDropdown, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(NetworkDropdown, "propTypes", {
  provider: _propTypes.default.shape({
    nickname: _propTypes.default.string,
    rpcUrl: _propTypes.default.string,
    type: _propTypes.default.string,
    ticker: _propTypes.default.string
  }).isRequired,
  setProviderType: _propTypes.default.func.isRequired,
  setRpcTarget: _propTypes.default.func.isRequired,
  hideNetworkDropdown: _propTypes.default.func.isRequired,
  frequentRpcListDetail: _propTypes.default.array.isRequired,
  shouldShowTestNetworks: _propTypes.default.bool,
  networkDropdownOpen: _propTypes.default.bool.isRequired,
  displayInvalidCustomNetworkAlert: _propTypes.default.func.isRequired,
  showConfirmDeleteNetworkModal: _propTypes.default.func.isRequired,
  showTestnetMessageInDropdown: _propTypes.default.bool.isRequired,
  hideTestNetMessage: _propTypes.default.func.isRequired,
  history: _propTypes.default.object
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(NetworkDropdown);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display-education\\edit-gas-display-education.component.js", {"../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-display-education\edit-gas-display-education.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasDisplayEducation;

var _react = _interopRequireWildcard(require("react"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _i18n = require("../../../contexts/i18n");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function EditGasDisplayEducation() {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display-education"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "p",
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6
  }, t('editGasEducationModalIntro')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.h6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('editGasHigh')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "p",
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6
  }, t('editGasEducationHighExplanation')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.h6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('editGasMedium')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "p",
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6
  }, t('editGasEducationMediumExplanation')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.h6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('editGasLow')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "p",
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H6
  }, t('editGasEducationLowExplanation')));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display-education\\index.js", {"./edit-gas-display-education.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display-education\\edit-gas-display-education.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-display-education\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplayEducation.default;
  }
});

var _editGasDisplayEducation = _interopRequireDefault(require("./edit-gas-display-education.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/error-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../ui/radio-group/radio-group.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\radio-group\\radio-group.component.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../advanced-gas-controls/advanced-gas-controls.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\advanced-gas-controls\\advanced-gas-controls.component.js","../gas-timing":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\index.js","../transaction-total-banner/transaction-total-banner.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-total-banner\\transaction-total-banner.component.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-display\edit-gas-display.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasDisplay;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _gas = require("../../../../shared/constants/gas");

var _metametrics = require("../../../../shared/constants/metametrics");

var _button = _interopRequireDefault(require("../../ui/button"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _selectors = require("../../../selectors");

var _designSystem = require("../../../helpers/constants/design-system");

var _confirmTx = require("../../../helpers/utils/confirm-tx.util");

var _transactions = require("../../../helpers/utils/transactions.util");

var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip"));

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _transactionTotalBanner = _interopRequireDefault(require("../transaction-total-banner/transaction-total-banner.component"));

var _radioGroup = _interopRequireDefault(require("../../ui/radio-group/radio-group.component"));

var _advancedGasControls = _interopRequireDefault(require("../advanced-gas-controls/advanced-gas-controls.component"));

var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message/actionable-message"));

var _i18n = require("../../../contexts/i18n");

var _gasTiming = _interopRequireDefault(require("../gas-timing"));

var _metametrics2 = require("../../../contexts/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function EditGasDisplay({
  mode = _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE,
  showEducationButton = false,
  onEducationClick,
  transaction,
  defaultEstimateToUse,
  maxPriorityFeePerGas,
  setMaxPriorityFeePerGas,
  maxPriorityFeePerGasFiat,
  maxFeePerGas,
  setMaxFeePerGas,
  maxFeePerGasFiat,
  estimatedMaximumNative,
  estimatedMinimumNative,
  isGasEstimatesLoading,
  gasEstimateType,
  gasPrice,
  setGasPrice,
  gasLimit,
  setGasLimit,
  properGasLimit,
  estimateToUse,
  setEstimateToUse,
  estimatedMinimumFiat,
  estimatedMaximumFiat,
  dappSuggestedGasFeeAcknowledged,
  setDappSuggestedGasFeeAcknowledged,
  gasErrors,
  gasWarnings,
  onManualChange,
  minimumGasLimit,
  balanceError,
  estimatesUnavailableWarning,
  hasGasErrors,
  txParamsHaveBeenCustomized,
  isNetworkBusy
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const scrollRef = (0, _react.useRef)(null);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const showAdvancedInlineGasIfPossible = (0, _reactRedux.useSelector)(_selectors.getAdvancedInlineGasShown);
  const [showAdvancedForm, setShowAdvancedForm] = (0, _react.useState)(!estimateToUse || estimateToUse === _gas.CUSTOM_GAS_ESTIMATE || !supportsEIP1559);
  const [hideRadioButtons, setHideRadioButtons] = (0, _react.useState)(showAdvancedInlineGasIfPossible);
  (0, _react.useLayoutEffect)(() => {
    if (showAdvancedForm && scrollRef.current) {
      var _scrollRef$current$sc, _scrollRef$current;

      (_scrollRef$current$sc = (_scrollRef$current = scrollRef.current).scrollIntoView) === null || _scrollRef$current$sc === void 0 ? void 0 : _scrollRef$current$sc.call(_scrollRef$current);
    }
  }, [showAdvancedForm]);
  const dappSuggestedAndTxParamGasFeesAreTheSame = (0, _confirmTx.areDappSuggestedAndTxParamGasFeesTheSame)(transaction);
  const requireDappAcknowledgement = Boolean((transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees) && !dappSuggestedGasFeeAcknowledged && dappSuggestedAndTxParamGasFeesAreTheSame);
  let warningMessage;

  if (gasLimit !== undefined && properGasLimit !== undefined && new _bignumber.default(gasLimit).lessThan(new _bignumber.default(properGasLimit))) {
    warningMessage = t('gasLimitRecommended', [properGasLimit]);
  }

  const showTopError = (balanceError || estimatesUnavailableWarning) && (!isGasEstimatesLoading || txParamsHaveBeenCustomized);
  const radioButtonsEnabled = supportsEIP1559 && gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET && !requireDappAcknowledgement;
  let errorKey;

  if (balanceError) {
    errorKey = 'insufficientFunds';
  } else if (estimatesUnavailableWarning) {
    errorKey = 'gasEstimatesUnavailableWarning';
  }

  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__content"
  }, showTopError && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: errorKey
  })), warningMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: warningMessage,
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), requireDappAcknowledgement && !isGasEstimatesLoading && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__dapp-acknowledgement-warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: t('gasDisplayDappWarning', [transaction.origin]),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), isNetworkBusy ? /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: t('networkIsBusy'),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })) : null, mode === _gas.EDIT_GAS_MODES.SPEED_UP && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__top-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H8,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('speedUpTooltipText'), ' ', /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('speedUpExplanation')
  }))), /*#__PURE__*/_react.default.createElement(_transactionTotalBanner.default, {
    total: (supportsEIP1559 || isMainnet) && estimatedMinimumFiat ? `~ ${estimatedMinimumFiat}` : estimatedMinimumNative,
    detail: supportsEIP1559 && estimatedMaximumFiat !== undefined && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      as: "span",
      key: "label",
      fontWeight: _designSystem.FONT_WEIGHT.BOLD
    }, t('editGasSubTextFeeLabel')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      as: "span",
      key: "secondary"
    }, estimatedMaximumFiat), /*#__PURE__*/_react.default.createElement(_typography.default, {
      as: "span",
      key: "primary"
    }, `(${estimatedMaximumNative})`)),
    timing: hasGasErrors === false && supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
      maxFeePerGas: maxFeePerGas.toString(),
      maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),
      gasWarnings: gasWarnings
    })
  }), requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "edit-gas-display__dapp-acknowledgement-button",
    onClick: () => setDappSuggestedGasFeeAcknowledged(true)
  }, t('gasDisplayAcknowledgeDappButtonText')), !requireDappAcknowledgement && radioButtonsEnabled && showAdvancedInlineGasIfPossible && /*#__PURE__*/_react.default.createElement("button", {
    className: "edit-gas-display__advanced-button",
    onClick: () => setHideRadioButtons(!hideRadioButtons)
  }, t('showRecommendations'), ' ', hideRadioButtons ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-caret-down"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-caret-up"
  })), radioButtonsEnabled && !hideRadioButtons && /*#__PURE__*/_react.default.createElement(_radioGroup.default, {
    dataTestId: "gas-recommendation",
    name: "gas-recommendation",
    options: [{
      value: _gas.GAS_RECOMMENDATIONS.LOW,
      label: t('editGasLow'),
      recommended: defaultEstimateToUse === _gas.GAS_RECOMMENDATIONS.LOW
    }, {
      value: _gas.GAS_RECOMMENDATIONS.MEDIUM,
      label: t('editGasMedium'),
      recommended: defaultEstimateToUse === _gas.GAS_RECOMMENDATIONS.MEDIUM
    }, {
      value: _gas.GAS_RECOMMENDATIONS.HIGH,
      label: t('editGasHigh'),
      recommended: defaultEstimateToUse === _gas.GAS_RECOMMENDATIONS.HIGH
    }],
    selectedValue: estimateToUse,
    onChange: setEstimateToUse
  }), !requireDappAcknowledgement && radioButtonsEnabled && !showAdvancedInlineGasIfPossible && /*#__PURE__*/_react.default.createElement("button", {
    className: "edit-gas-display__advanced-button",
    onClick: () => {
      setShowAdvancedForm(!showAdvancedForm);
      trackEvent({
        event: 'Clicked "Advanced options"',
        category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
        properties: {
          action: 'Edit Screen',
          legacy_event: true
        }
      });
    }
  }, t('advancedOptions'), ' ', showAdvancedForm ? /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-caret-up"
  }) : /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-caret-down"
  })), !requireDappAcknowledgement && (showAdvancedForm || hasGasErrors || estimatesUnavailableWarning || showAdvancedInlineGasIfPossible) && /*#__PURE__*/_react.default.createElement(_advancedGasControls.default, {
    gasEstimateType: gasEstimateType,
    isGasEstimatesLoading: isGasEstimatesLoading,
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    maxPriorityFee: maxPriorityFeePerGas,
    setMaxPriorityFee: setMaxPriorityFeePerGas,
    maxFee: maxFeePerGas,
    setMaxFee: setMaxFeePerGas,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    maxPriorityFeeFiat: maxPriorityFeePerGasFiat,
    maxFeeFiat: maxFeePerGasFiat,
    gasErrors: gasErrors,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimit,
    supportsEIP1559: supportsEIP1559
  })), supportsEIP1559 && !requireDappAcknowledgement && showEducationButton && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__education"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: onEducationClick
  }, t('editGasEducationButtonText'))), /*#__PURE__*/_react.default.createElement("div", {
    ref: scrollRef,
    className: "edit-gas-display__scroll-bottom"
  }));
}

EditGasDisplay.propTypes = {
  mode: _propTypes.default.oneOf(Object.values(_gas.EDIT_GAS_MODES)),
  showEducationButton: _propTypes.default.bool,
  onEducationClick: _propTypes.default.func,
  defaultEstimateToUse: _propTypes.default.oneOf(Object.values(_gas.GAS_RECOMMENDATIONS)),
  maxPriorityFeePerGas: _propTypes.default.string,
  setMaxPriorityFeePerGas: _propTypes.default.func,
  maxPriorityFeePerGasFiat: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  setMaxFeePerGas: _propTypes.default.func,
  maxFeePerGasFiat: _propTypes.default.string,
  estimatedMaximumNative: _propTypes.default.string,
  estimatedMinimumNative: _propTypes.default.string,
  isGasEstimatesLoading: _propTypes.default.bool,
  gasEstimateType: _propTypes.default.string,
  gasPrice: _propTypes.default.string,
  setGasPrice: _propTypes.default.func,
  gasLimit: _propTypes.default.number,
  setGasLimit: _propTypes.default.func,
  properGasLimit: _propTypes.default.number,
  estimateToUse: _propTypes.default.string,
  setEstimateToUse: _propTypes.default.func,
  estimatedMinimumFiat: _propTypes.default.string,
  estimatedMaximumFiat: _propTypes.default.string,
  dappSuggestedGasFeeAcknowledged: _propTypes.default.bool,
  setDappSuggestedGasFeeAcknowledged: _propTypes.default.func,
  transaction: _propTypes.default.object,
  gasErrors: _propTypes.default.object,
  gasWarnings: _propTypes.default.object,
  onManualChange: _propTypes.default.func,
  minimumGasLimit: _propTypes.default.string,
  balanceError: _propTypes.default.bool,
  estimatesUnavailableWarning: _propTypes.default.bool,
  hasGasErrors: _propTypes.default.bool,
  txParamsHaveBeenCustomized: _propTypes.default.bool,
  isNetworkBusy: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display\\index.js", {"./edit-gas-display.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-display\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplay.default;
  }
});

var _editGasDisplay = _interopRequireDefault(require("./edit-gas-display.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTransactionEventFragment":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js","../../ui/info-tooltip/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-button\edit-gas-fee-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasFeeButton;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gas = require("../../../../shared/constants/gas");

var _designSystem = require("../../../helpers/constants/design-system");

var _gas2 = require("../../../helpers/constants/gas");

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useTransactionEventFragment = require("../../../hooks/useTransactionEventFragment");

var _transactionModal = require("../../../contexts/transaction-modal");

var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip/info-tooltip"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function EditGasFeeButton({
  userAcknowledgedGasMissing
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    editGasMode,
    gasLimit,
    hasSimulationError,
    estimateUsed,
    maxFeePerGas,
    maxPriorityFeePerGas,
    supportsEIP1559V2,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const editEnabled = !hasSimulationError || userAcknowledgedGasMissing === true;

  if (!supportsEIP1559V2 || !estimateUsed || !editEnabled) {
    return null;
  }

  let icon = estimateUsed;
  let title = estimateUsed;

  if (estimateUsed === _gas.PRIORITY_LEVELS.HIGH && editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  } else if (estimateUsed === _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED) {
    icon = undefined;
    title = 'tenPercentIncreased';
  }

  const openEditGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'basic'
    });
    openModal('editGasFee');
  };

  const openAdvancedGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'advanced'
    });
    openModal('advancedGasFee');
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-button"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: openEditGasFeeModal,
    "data-testid": "edit-gas-fee-button"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__icon"
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__label"
  }, t(title)), /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-right asset-list-item__chevron-right"
  })), estimateUsed === 'custom' && /*#__PURE__*/_react.default.createElement("button", {
    onClick: openAdvancedGasFeeModal
  }, t('edit')), estimateUsed === 'dappSuggested' && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-gas-fee-button__tooltip"
    }, (transaction === null || transaction === void 0 ? void 0 : transaction.origin) && /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      color: _designSystem.COLORS.TEXT_ALTERNATIVE
    }, t('dappSuggestedTooltip', [transaction.origin])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxBaseFee')), " ", maxFeePerGas), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxPriorityFee')), " ", maxPriorityFeePerGas), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('gasLimit')), " ", gasLimit)),
    position: "top"
  }));
}

EditGasFeeButton.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js", {"./edit-gas-fee-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-button\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeeButton.default;
  }
});

var _editGasFeeButton = _interopRequireDefault(require("./edit-gas-fee-button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/error-keys":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/error-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../app-loading-spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\app-loading-spinner\\index.js","./edit-gas-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js","./network-statistics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-fee-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _gas = require("../../../../shared/constants/gas");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionModal = require("../../../contexts/transaction-modal");

var _box = _interopRequireDefault(require("../../ui/box"));

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _errorKeys = require("../../../helpers/constants/error-keys");

var _gasFee = require("../../../contexts/gasFee");

var _appLoadingSpinner = _interopRequireDefault(require("../app-loading-spinner"));

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));

var _networkStatistics = _interopRequireDefault(require("./network-statistics"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const EditGasFeePopover = () => {
  const {
    balanceError,
    editGasMode
  } = (0, _gasFee.useGasFeeContext)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeAllModals,
    closeModal,
    currentModal,
    openModalCount
  } = (0, _transactionModal.useTransactionModalContext)();

  if (currentModal !== 'editGasFee') {
    return null;
  }

  let popupTitle = 'editGasFeeModalTitle';

  if (editGasMode === _gas.EDIT_GAS_MODES.CANCEL) {
    popupTitle = 'editCancellationGasFeeModalTitle';
  } else if (editGasMode === _gas.EDIT_GAS_MODES.SPEED_UP) {
    popupTitle = 'editSpeedUpEditGasFeeModalTitle';
  }

  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t(popupTitle) // below logic ensures that back button is visible only if there are other modals open before this.
    ,
    onBack: openModalCount === 1 ? undefined : () => closeModal(['editGasFee']),
    onClose: closeAllModals,
    className: "edit-gas-fee-popover"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_appLoadingSpinner.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, balanceError && /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-option"
  }, t('gasOption')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-time"
  }, editGasMode !== _gas.EDIT_GAS_MODES.SWAPS && t('time')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-max-fee"
  }, t('maxFee'))), (editGasMode === _gas.EDIT_GAS_MODES.CANCEL || editGasMode === _gas.EDIT_GAS_MODES.SPEED_UP) && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED
  }), editGasMode === _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.LOW
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.MEDIUM
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.HIGH
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__separator"
  }), editGasMode === _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.DAPP_SUGGESTED
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.CUSTOM
  })), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_networkStatistics.default, null), /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "edit-gas-fee-popover__know-more",
    align: "center",
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    tag: _designSystem.TYPOGRAPHY.Paragraph,
    variant: _designSystem.TYPOGRAPHY.H7
  }, t('learnMoreAboutGas', [/*#__PURE__*/_react.default.createElement("a", {
    key: "learnMoreLink",
    target: "_blank",
    rel: "noopener noreferrer",
    href: _zendeskUrl.default.USER_GUIDE_GAS
  }, t('learnMore'))])))))));
};

var _default = EditGasFeePopover;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js", {"../../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../../helpers/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../hooks/useTransactionEventFragment":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js","../../../ui/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../ui/loading-heartbeat":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../edit-gas-tooltip/edit-gas-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js","./useGasItemFeeDetails":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-item\edit-gas-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _gas = require("../../../../../shared/constants/gas");

var _gas2 = require("../../../../helpers/constants/gas");

var _common = require("../../../../helpers/constants/common");

var _util = require("../../../../helpers/utils/util");

var _gasFee = require("../../../../contexts/gasFee");

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _useTransactionEventFragment = require("../../../../hooks/useTransactionEventFragment");

var _transactionModal = require("../../../../contexts/transaction-modal");

var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip"));

var _loadingHeartbeat = _interopRequireDefault(require("../../../ui/loading-heartbeat"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../user-preferenced-currency-display"));

var _editGasTooltip = _interopRequireDefault(require("../edit-gas-tooltip/edit-gas-tooltip"));

var _useGasItemFeeDetails = require("./useGasItemFeeDetails");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getTitleAndIcon = (priorityLevel, editGasMode) => {
  let icon = priorityLevel;
  let title = priorityLevel;

  if (priorityLevel === _gas.PRIORITY_LEVELS.DAPP_SUGGESTED) {
    title = 'dappSuggestedShortLabel';
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED) {
    icon = null;
    title = 'tenPercentIncreased';
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.HIGH && editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  }

  return {
    title,
    icon
  };
};

const EditGasItem = ({
  priorityLevel
}) => {
  const {
    editGasMode,
    estimateUsed,
    gasLimit,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeModal,
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const {
    dappSuggestedGasFees
  } = transaction;
  const {
    // for cancel or speedup estimateGreaterThaGasUse is true if previous gas used
    // was more than estimate for the priorityLevel
    estimateGreaterThanGasUse,
    hexMaximumTransactionFee,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime
  } = (0, _useGasItemFeeDetails.useGasItemFeeDetails)(priorityLevel);

  if (priorityLevel === _gas.PRIORITY_LEVELS.DAPP_SUGGESTED && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.maxFeePerGas) && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.gasPrice)) {
    return null;
  }

  const onOptionSelect = () => {
    if (priorityLevel === _gas.PRIORITY_LEVELS.CUSTOM) {
      updateTransactionEventFragment({
        properties: {
          gas_edit_attempted: 'advanced'
        }
      });
      openModal('advancedGasFee');
    } else {
      updateTransactionEventFragment({
        properties: {
          gas_edit_type: 'basic'
        }
      });
      closeModal(['editGasFee']);

      if (priorityLevel === _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED) {
        updateTransactionToTenPercentIncreasedGasFee();
      } else if (priorityLevel === _gas.PRIORITY_LEVELS.DAPP_SUGGESTED) {
        updateTransactionUsingDAPPSuggestedValues();
      } else {
        updateTransactionUsingEstimate(priorityLevel);
      }
    }
  };

  const {
    title,
    icon
  } = getTitleAndIcon(priorityLevel, editGasMode);
  return /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('edit-gas-item', {
      'edit-gas-item--selected': priorityLevel === estimateUsed,
      'edit-gas-item--disabled': estimateGreaterThanGasUse
    }),
    onClick: onOptionSelect,
    "aria-label": priorityLevel,
    autoFocus: priorityLevel === estimateUsed,
    disabled: estimateGreaterThanGasUse,
    "data-testid": `edit-gas-fee-item-${priorityLevel}`
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__name"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__icon edit-gas-item__icon-${priorityLevel}`
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), t(title)), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__time-estimate edit-gas-item__time-estimate-${priorityLevel}`
  }, editGasMode !== _gas.EDIT_GAS_MODES.SWAPS && (minWaitTime ? (0, _util.toHumanReadableTime)(t, minWaitTime) : '--')), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__fee-estimate edit-gas-item__fee-estimate-${priorityLevel}`
  }, hexMaximumTransactionFee ? /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-item__maxfee"
  }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
    backgroundColor: priorityLevel === estimateUsed ? 'var(--color-background-alternative)' : 'var(--color-background-default)',
    estimateUsed: priorityLevel
  }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    key: "editGasSubTextFeeAmount",
    type: _common.PRIMARY,
    value: hexMaximumTransactionFee
  })) : '--'), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__tooltip",
    "data-testid": "gas-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_editGasTooltip.default, {
      t: t,
      priorityLevel: priorityLevel,
      maxFeePerGas: maxFeePerGas,
      maxPriorityFeePerGas: maxPriorityFeePerGas,
      editGasMode: editGasMode,
      gasLimit: gasLimit,
      transaction: transaction,
      estimateGreaterThanGasUse: estimateGreaterThanGasUse
    }),
    position: "top"
  })));
};

EditGasItem.propTypes = {
  priorityLevel: _propTypes.default.string
};
var _default = EditGasItem;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js", {"./edit-gas-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-item\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasItem.default;
  }
});

var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js", {"../../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-item\useCustomTimeEstimate.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomTimeEstimate = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _gas = require("../../../../../shared/constants/gas");

var _metamask = require("../../../../ducks/metamask/metamask");

var _actions = require("../../../../store/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useCustomTimeEstimate = ({
  gasFeeEstimates,
  maxFeePerGas,
  maxPriorityFeePerGas
}) => {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const returnNoEstimates = isGasEstimatesLoading || gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.FEE_MARKET || !maxPriorityFeePerGas; // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show

  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  (0, _react.useEffect)(() => {
    if (isGasEstimatesLoading || gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.FEE_MARKET || !maxPriorityFeePerGas) {
      return;
    }

    if (isUnknownLow) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(maxPriorityFeePerGas, 10).toString(10), new _bignumber.default(maxFeePerGas, 10).toString(10)).then(result => {
        setCustomEstimatedTime(result);
      });
    }
  }, [gasEstimateType, isUnknownLow, isGasEstimatesLoading, maxFeePerGas, maxPriorityFeePerGas, returnNoEstimates]);

  if (returnNoEstimates) {
    return {};
  }

  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let waitTimeEstimate = '';

  if (isUnknownLow && customEstimatedTime && customEstimatedTime !== 'unknown' && (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) !== 'unknown') {
    waitTimeEstimate = Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound);
  } else if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    waitTimeEstimate = high.minWaitTimeEstimate;
  } else {
    waitTimeEstimate = low.maxWaitTimeEstimate;
  }

  return {
    waitTimeEstimate
  };
};

exports.useCustomTimeEstimate = useCustomTimeEstimate;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js", {"../../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../../shared/modules/gas.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\gas.utils.js","../../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./useCustomTimeEstimate":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-item\useGasItemFeeDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasItemFeeDetails = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../../../shared/constants/gas");

var _gas2 = require("../../../../../shared/modules/gas.utils");

var _conversions = require("../../../../helpers/utils/conversions.util");

var _gas3 = require("../../../../helpers/utils/gas");

var _selectors = require("../../../../selectors");

var _gasFee = require("../../../../contexts/gasFee");

var _transactionsControllerUtils = require("../../../../../shared/lib/transactions-controller-utils");

var _useCustomTimeEstimate = require("./useCustomTimeEstimate");

const useGasItemFeeDetails = priorityLevel => {
  const {
    editGasMode,
    estimateUsed,
    gasFeeEstimates,
    gasLimit,
    maxFeePerGas: maxFeePerGasValue,
    maxPriorityFeePerGas: maxPriorityFeePerGasValue,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const [estimateGreaterThanGasUse, setEstimateGreaterThanGasUse] = (0, _react.useState)(false);
  const advancedGasFeeValues = (0, _reactRedux.useSelector)(_selectors.getAdvancedGasFeeValues);
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let minWaitTime;
  const {
    dappSuggestedGasFees
  } = transaction;

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[priorityLevel]) {
    maxFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxFeePerGas;
    maxPriorityFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxPriorityFeePerGas;
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.DAPP_SUGGESTED && dappSuggestedGasFees) {
    maxFeePerGas = (0, _transactionsControllerUtils.hexWEIToDecGWEI)(dappSuggestedGasFees.maxFeePerGas || dappSuggestedGasFees.gasPrice);
    maxPriorityFeePerGas = (0, _transactionsControllerUtils.hexWEIToDecGWEI)(dappSuggestedGasFees.maxPriorityFeePerGas || maxFeePerGas);
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.CUSTOM) {
    if (estimateUsed === _gas.PRIORITY_LEVELS.CUSTOM) {
      maxFeePerGas = maxFeePerGasValue;
      maxPriorityFeePerGas = maxPriorityFeePerGasValue;
    } else if (advancedGasFeeValues && editGasMode !== _gas.EDIT_GAS_MODES.SWAPS) {
      maxFeePerGas = advancedGasFeeValues.maxBaseFee;
      maxPriorityFeePerGas = advancedGasFeeValues.priorityFee;
    }
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED && transaction.previousGas) {
    var _transaction$previous, _transaction$previous2;

    maxFeePerGas = (0, _transactionsControllerUtils.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous = transaction.previousGas) === null || _transaction$previous === void 0 ? void 0 : _transaction$previous.maxFeePerGas));
    maxPriorityFeePerGas = (0, _transactionsControllerUtils.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous2 = transaction.previousGas) === null || _transaction$previous2 === void 0 ? void 0 : _transaction$previous2.maxPriorityFeePerGas));
  }

  const {
    waitTimeEstimate
  } = (0, _useCustomTimeEstimate.useCustomTimeEstimate)({
    gasFeeEstimates,
    maxFeePerGas,
    maxPriorityFeePerGas
  });

  if (gasFeeEstimates[priorityLevel]) {
    minWaitTime = priorityLevel === _gas.PRIORITY_LEVELS.HIGH ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.high.minWaitTimeEstimate : gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low.maxWaitTimeEstimate;
  } else {
    minWaitTime = waitTimeEstimate;
  }

  const hexMaximumTransactionFee = maxFeePerGas ? (0, _gas2.getMaximumGasTotalInHexWei)({
    gasLimit: (0, _transactionsControllerUtils.decimalToHex)(gasLimit),
    maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxFeePerGas)
  }) : null;
  (0, _react.useEffect)(() => {
    // For cancel and speed-up medium / high option is disabled if
    // gas used in transaction + 10% is greater tham estimate
    if ((editGasMode === _gas.EDIT_GAS_MODES.CANCEL || editGasMode === _gas.EDIT_GAS_MODES.SPEED_UP) && (priorityLevel === _gas.PRIORITY_LEVELS.MEDIUM || priorityLevel === _gas.PRIORITY_LEVELS.HIGH)) {
      const estimateGreater = !(0, _gas3.gasEstimateGreaterThanGasUsedPlusTenPercent)(transaction.previousGas || transaction.txParams, gasFeeEstimates, priorityLevel);
      setEstimateGreaterThanGasUse(estimateGreater);
    }
  }, [editGasMode, gasFeeEstimates, priorityLevel, transaction]);
  return {
    estimateGreaterThanGasUse,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime,
    hexMaximumTransactionFee
  };
};

exports.useGasItemFeeDetails = useGasItemFeeDetails;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js", {"../../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\edit-gas-tooltip\edit-gas-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gas = require("../../../../../shared/constants/gas");

var _designSystem = require("../../../../helpers/constants/design-system");

var _gas2 = require("../../../../helpers/utils/gas");

var _util = require("../../../../helpers/utils/util");

var _typography = _interopRequireDefault(require("../../../ui/typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EditGasToolTip = ({
  editGasMode,
  estimateGreaterThanGasUse,
  gasLimit,
  priorityLevel,
  // maxFeePerGas & maxPriorityFeePerGas are derived from conditional logic
  // related to the source of the estimates. We pass these values from the
  // the parent component (edit-gas-item) rather than recalculate them
  maxFeePerGas,
  maxPriorityFeePerGas,
  transaction,
  t
}) => {
  const toolTipMessage = (0, _react.useMemo)(() => {
    switch (priorityLevel) {
      case _gas.PRIORITY_LEVELS.LOW:
        return t('lowGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('low')))]);

      case _gas.PRIORITY_LEVELS.MEDIUM:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }

        return t('mediumGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('medium')))]);

      case _gas.PRIORITY_LEVELS.HIGH:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }

        if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
          return t('swapSuggestedGasSettingToolTipMessage');
        }

        return t('highGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('high')))]);

      case _gas.PRIORITY_LEVELS.CUSTOM:
        return t('customGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('custom')))]);

      case _gas.PRIORITY_LEVELS.DAPP_SUGGESTED:
        return transaction !== null && transaction !== void 0 && transaction.origin ? t('dappSuggestedGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: transaction === null || transaction === void 0 ? void 0 : transaction.origin
        }, transaction === null || transaction === void 0 ? void 0 : transaction.origin)]) : null;

      default:
        return '';
    }
  }, [editGasMode, estimateGreaterThanGasUse, priorityLevel, transaction, t]);
  let imgAltText;

  if (priorityLevel === _gas.PRIORITY_LEVELS.LOW) {
    imgAltText = t('curveLowGasEstimate');
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.MEDIUM) {
    imgAltText = t('curveMediumGasEstimate');
  } else if (priorityLevel === _gas.PRIORITY_LEVELS.HIGH) {
    imgAltText = t('curveHighGasEstimate');
  } // Gas estimate curve is visible for low/medium/high gas estimates
  // the curve is not visible for high estimates for swaps
  // also it is not visible in case of cancel/speedup if the medium/high option is disabled


  const showGasEstimateCurve = (0, _gas2.isMetamaskSuggestedGasEstimate)(priorityLevel) && !(priorityLevel === _gas.PRIORITY_LEVELS.HIGH && editGasMode === _gas.EDIT_GAS_MODES.SWAPS) && !estimateGreaterThanGasUse;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container"
  }, showGasEstimateCurve ? /*#__PURE__*/_react.default.createElement("img", {
    alt: imgAltText,
    src: `./images/curve-${priorityLevel}.svg`
  }) : null, toolTipMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__message"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7
  }, toolTipMessage)), priorityLevel === _gas.PRIORITY_LEVELS.CUSTOM || estimateGreaterThanGasUse ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__values"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('maxBaseFee')), maxFeePerGas && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('priorityFeeProperCase')), maxPriorityFeePerGas && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxPriorityFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('gasLimit')), gasLimit && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(gasLimit, 4)))));
};

EditGasToolTip.propTypes = {
  estimateGreaterThanGasUse: _propTypes.default.bool,
  priorityLevel: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  maxPriorityFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  t: _propTypes.default.func,
  editGasMode: _propTypes.default.string,
  gasLimit: _propTypes.default.number,
  transaction: _propTypes.default.object
};
var _default = EditGasToolTip;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js", {"./edit-gas-fee-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeePopover.default;
  }
});

var _editGasFeePopover = _interopRequireDefault(require("./edit-gas-fee-popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js", {"./network-statistics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\network-statistics\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkStatistics.default;
  }
});

var _networkStatistics = _interopRequireDefault(require("./network-statistics"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js", {"../../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","./status-slider":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js","./tooltips":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\network-statistics\network-statistics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _util = require("../../../../helpers/utils/util");

var _gas = require("../../../../helpers/utils/gas");

var _i18n = require("../../../../contexts/i18n");

var _gasFee = require("../../../../contexts/gasFee");

var _typography = _interopRequireDefault(require("../../../ui/typography/typography"));

var _tooltips = require("./tooltips");

var _statusSlider = _interopRequireDefault(require("./status-slider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NetworkStatistics = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const formattedLatestBaseFee = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.estimatedBaseFee, {
    precision: 0
  });
  const formattedLatestPriorityFeeRange = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.latestPriorityFeeRange, {
    precision: [1, 0]
  });
  const networkCongestion = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.networkCongestion;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    marginTop: 3,
    marginBottom: 3,
    variant: _designSystem.TYPOGRAPHY.H8
  }, t('networkStatus')), /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__info"
  }, (0, _util.isNullish)(formattedLatestBaseFee) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-base-fee"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.BaseFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestBaseFee), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('baseFee')))), (0, _util.isNullish)(formattedLatestPriorityFeeRange) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-priority-fee-range"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.PriorityFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestPriorityFeeRange), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('priorityFee')))), (0, _util.isNullish)(networkCongestion) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field"
  }, /*#__PURE__*/_react.default.createElement(_statusSlider.default, null))));
};

var _default = NetworkStatistics;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js", {"./status-slider":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\network-statistics\status-slider\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _statusSlider.default;
  }
});

var _statusSlider = _interopRequireDefault(require("./status-slider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js", {"../../../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../tooltips":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\network-statistics\status-slider\status-slider.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _gas = require("../../../../../../shared/constants/gas");

var _gasFee = require("../../../../../contexts/gasFee");

var _useI18nContext = require("../../../../../hooks/useI18nContext");

var _tooltips = require("../tooltips");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GRADIENT_COLORS = ['#037DD6', '#1876C8', '#2D70BA', '#4369AB', '#57629E', '#6A5D92', '#805683', '#9A4D71', '#B44561', '#C54055', '#D73A49'];

const determineStatusInfo = givenNetworkCongestion => {
  const networkCongestion = givenNetworkCongestion !== null && givenNetworkCongestion !== void 0 ? givenNetworkCongestion : 0.5;
  const colorIndex = Math.round(networkCongestion * 10);
  const color = GRADIENT_COLORS[colorIndex];
  const sliderTickValue = colorIndex * 10;

  if (networkCongestion >= _gas.NETWORK_CONGESTION_THRESHOLDS.BUSY) {
    return {
      statusLabel: 'busy',
      tooltipLabel: 'highLowercase',
      color,
      sliderTickValue
    };
  } else if (networkCongestion >= _gas.NETWORK_CONGESTION_THRESHOLDS.STABLE) {
    return {
      statusLabel: 'stable',
      tooltipLabel: 'stableLowercase',
      color,
      sliderTickValue
    };
  }

  return {
    statusLabel: 'notBusy',
    tooltipLabel: 'lowLowercase',
    color,
    sliderTickValue
  };
};

const StatusSlider = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const statusInfo = determineStatusInfo(gasFeeEstimates.networkCongestion);
  return /*#__PURE__*/_react.default.createElement(_tooltips.NetworkStabilityTooltip, {
    color: statusInfo.color,
    tooltipLabel: statusInfo.tooltipLabel
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-border",
    style: {
      marginLeft: `${statusInfo.sliderTickValue}%`
    },
    "data-testid": "status-slider-arrow-border"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow",
    style: {
      borderTopColor: statusInfo.color
    },
    "data-testid": "status-slider-arrow"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__line"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__label",
    style: {
      color: statusInfo.color
    },
    "data-testid": "status-slider-label"
  }, t(statusInfo.statusLabel))));
};

var _default = StatusSlider;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-fee-popover\network-statistics\tooltips.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriorityFeeTooltip = exports.NetworkStabilityTooltip = exports.BaseFeeTooltip = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));

var _designSystem = require("../../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NetworkStatusTooltip = ({
  children,
  html,
  title
}) => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  position: "top",
  html: html,
  title: title
}, /*#__PURE__*/_react.default.createElement(_box.default, {
  display: _designSystem.DISPLAY.FLEX,
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
}, children));

NetworkStatusTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  html: _propTypes.default.node,
  title: _propTypes.default.string
};

const BaseFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusBaseFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_medium_estimate",
      className: "network-status__tooltip-label"
    }, t('medium')), /*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_high_estimate",
      className: "network-status__tooltip-label"
    }, t('high'))])
  }, children);
};

exports.BaseFeeTooltip = BaseFeeTooltip;
BaseFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};

const PriorityFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    title: t('networkStatusPriorityFeeTooltip')
  }, children);
};

exports.PriorityFeeTooltip = PriorityFeeTooltip;
PriorityFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};

const NetworkStabilityTooltip = ({
  children,
  color,
  tooltipLabel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusStabilityFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "network-status__tooltip",
      className: "network-status__tooltip-label",
      style: {
        color
      }
    }, t(tooltipLabel))])
  }, children);
};

exports.NetworkStabilityTooltip = NetworkStabilityTooltip;
NetworkStabilityTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  color: _propTypes.default.string.isRequired,
  tooltipLabel: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../hooks/gasFeeInput/useGasFeeInputs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useIncrementedGasFees":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useIncrementedGasFees.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/loading-heartbeat":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../edit-gas-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display\\index.js","../edit-gas-display-education":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-display-education\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-popover\edit-gas-popover.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasPopover;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");

var _app = require("../../../ducks/app/app");

var _transaction = require("../../../../shared/modules/transaction.utils");

var _gas = require("../../../../shared/constants/gas");

var _conversions = require("../../../helpers/utils/conversions.util");

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _editGasDisplay = _interopRequireDefault(require("../edit-gas-display"));

var _editGasDisplayEducation = _interopRequireDefault(require("../edit-gas-display-education"));

var _i18n = require("../../../contexts/i18n");

var _actions = require("../../../store/actions");

var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));

var _selectors = require("../../../selectors");

var _useIncrementedGasFees = require("../../../hooks/useIncrementedGasFees");

var _transactions = require("../../../helpers/utils/transactions.util");

var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");

var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function EditGasPopover({
  popoverTitle = '',
  confirmButtonText = '',
  editGasDisplayProps = {},
  defaultEstimateToUse = _gas.GAS_RECOMMENDATIONS.MEDIUM,
  transaction,
  mode,
  onClose,
  minimumGasLimit = _gas.GAS_LIMITS.SIMPLE
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const gasLoadingAnimationIsShowing = (0, _reactRedux.useSelector)(_app.getGasLoadingAnimationIsShowing);
  const showEducationButton = (mode === _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE || mode === _gas.EDIT_GAS_MODES.SWAPS) && supportsEIP1559;
  const [showEducationContent, setShowEducationContent] = (0, _react.useState)(false);
  const [dappSuggestedGasFeeAcknowledged, setDappSuggestedGasFeeAcknowledged] = (0, _react.useState)(false);
  const minimumGasLimitDec = (0, _metamaskControllerUtils.hexToDecimal)(minimumGasLimit);
  const updatedCustomGasSettings = (0, _useIncrementedGasFees.useIncrementedGasFees)(transaction);
  let updatedTransaction = transaction;

  if (mode === _gas.EDIT_GAS_MODES.SPEED_UP || mode === _gas.EDIT_GAS_MODES.CANCEL) {
    updatedTransaction = { ...transaction,
      userFeeLevel: _gas.CUSTOM_GAS_ESTIMATE,
      txParams: { ...transaction.txParams,
        ...updatedCustomGasSettings
      }
    };
  }

  const {
    maxPriorityFeePerGas,
    setMaxPriorityFeePerGas,
    maxPriorityFeePerGasFiat,
    maxFeePerGas,
    setMaxFeePerGas,
    maxFeePerGasFiat,
    estimatedMaximumNative,
    estimatedMinimumNative,
    isGasEstimatesLoading,
    gasEstimateType,
    gasPrice,
    setGasPrice,
    gasLimit,
    setGasLimit,
    properGasLimit,
    estimateToUse,
    setEstimateToUse,
    estimatedMinimumFiat,
    estimatedMaximumFiat,
    hasGasErrors,
    gasErrors,
    gasWarnings,
    onManualChange,
    balanceError,
    estimatesUnavailableWarning,
    estimatedBaseFee,
    isNetworkBusy
  } = (0, _useGasFeeInputs.useGasFeeInputs)(defaultEstimateToUse, updatedTransaction, minimumGasLimit, mode);
  const txParamsHaveBeenCustomized = estimateToUse === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(updatedTransaction);
  /**
   * Temporary placeholder, this should be managed by the parent component but
   * we will be extracting this component from the hard to maintain modal
   * component. For now this is just to be able to appropriately close
   * the modal in testing
   */

  const closePopover = (0, _react.useCallback)(() => {
    if (onClose) {
      onClose();
    } else {
      dispatch((0, _actions.hideModal)());
    }
  }, [onClose, dispatch]);
  const onSubmit = (0, _react.useCallback)(async () => {
    if (!updatedTransaction || !mode) {
      closePopover();
    }

    const newGasSettings = {
      gas: (0, _transactionsControllerUtils.decimalToHex)(gasLimit),
      gasLimit: (0, _transactionsControllerUtils.decimalToHex)(gasLimit),
      estimateSuggested: defaultEstimateToUse,
      estimateUsed: estimateToUse
    };

    if (supportsEIP1559) {
      var _ref;

      newGasSettings.maxFeePerGas = (0, _conversions.decGWEIToHexWEI)(maxFeePerGas !== null && maxFeePerGas !== void 0 ? maxFeePerGas : gasPrice);
      newGasSettings.maxPriorityFeePerGas = (0, _conversions.decGWEIToHexWEI)((_ref = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : maxFeePerGas) !== null && _ref !== void 0 ? _ref : gasPrice);
    } else {
      newGasSettings.gasPrice = (0, _conversions.decGWEIToHexWEI)(gasPrice);
    }

    const cleanTransactionParams = { ...updatedTransaction.txParams
    };

    if (supportsEIP1559) {
      delete cleanTransactionParams.gasPrice;
    }

    const updatedTxMeta = { ...updatedTransaction,
      userEditedGasLimit: gasLimit !== Number(transaction.originalGasEstimate),
      userFeeLevel: estimateToUse || _gas.CUSTOM_GAS_ESTIMATE,
      txParams: { ...cleanTransactionParams,
        ...newGasSettings
      }
    };

    switch (mode) {
      case _gas.EDIT_GAS_MODES.CANCEL:
        dispatch((0, _actions.createCancelTransaction)(updatedTransaction.id, newGasSettings, {
          estimatedBaseFee
        }));
        break;

      case _gas.EDIT_GAS_MODES.SPEED_UP:
        dispatch((0, _actions.createSpeedUpTransaction)(updatedTransaction.id, newGasSettings, {
          estimatedBaseFee
        }));
        break;

      case _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE:
        newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;
        newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;
        dispatch((0, _actions.showLoadingIndication)());
        await dispatch((0, _actions.updateTransactionGasFees)(updatedTxMeta.id, newGasSettings));
        dispatch((0, _actions.hideLoadingIndication)());
        break;

      case _gas.EDIT_GAS_MODES.SWAPS:
        // This popover component should only be used for the "FEE_MARKET" type in Swaps.
        if (supportsEIP1559) {
          dispatch((0, _actions.updateSwapsUserFeeLevel)(estimateToUse || _gas.CUSTOM_GAS_ESTIMATE));
          dispatch((0, _actions.updateCustomSwapsEIP1559GasParams)(newGasSettings));
        }

        break;

      default:
        break;
    }

    closePopover();
  }, [updatedTransaction, mode, dispatch, closePopover, gasLimit, gasPrice, transaction.originalGasEstimate, maxFeePerGas, maxPriorityFeePerGas, supportsEIP1559, estimateToUse, estimatedBaseFee, defaultEstimateToUse]);
  let title = t('editGasTitle');

  if (popoverTitle) {
    title = popoverTitle;
  } else if (showEducationContent) {
    title = t('editGasEducationModalTitle');
  } else if (mode === _gas.EDIT_GAS_MODES.SPEED_UP) {
    title = t('speedUpPopoverTitle');
  } else if (mode === _gas.EDIT_GAS_MODES.CANCEL) {
    title = t('cancelPopoverTitle');
  }

  const footerButtonText = confirmButtonText || t('save');
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: closePopover,
    className: "edit-gas-popover__wrapper",
    onBack: showEducationContent ? () => setShowEducationContent(false) : undefined,
    footer: showEducationContent ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onSubmit,
      disabled: hasGasErrors || balanceError || (isGasEstimatesLoading || gasLoadingAnimationIsShowing) && !txParamsHaveBeenCustomized
    }, footerButtonText))
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: '0 20px 20px 20px',
      position: 'relative'
    }
  }, showEducationContent ? /*#__PURE__*/_react.default.createElement(_editGasDisplayEducation.default, null) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, false ? null : /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_editGasDisplay.default, _extends({
    showEducationButton: showEducationButton,
    dappSuggestedGasFeeAcknowledged: dappSuggestedGasFeeAcknowledged,
    setDappSuggestedGasFeeAcknowledged: setDappSuggestedGasFeeAcknowledged,
    maxPriorityFeePerGas: maxPriorityFeePerGas,
    setMaxPriorityFeePerGas: setMaxPriorityFeePerGas,
    maxPriorityFeePerGasFiat: maxPriorityFeePerGasFiat,
    maxFeePerGas: maxFeePerGas,
    setMaxFeePerGas: setMaxFeePerGas,
    maxFeePerGasFiat: maxFeePerGasFiat,
    estimatedMaximumNative: estimatedMaximumNative,
    estimatedMinimumNative: estimatedMinimumNative,
    isGasEstimatesLoading: isGasEstimatesLoading,
    gasEstimateType: gasEstimateType,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    properGasLimit: properGasLimit,
    estimateToUse: estimateToUse,
    setEstimateToUse: setEstimateToUse,
    estimatedMinimumFiat: estimatedMinimumFiat,
    estimatedMaximumFiat: estimatedMaximumFiat,
    onEducationClick: () => setShowEducationContent(true),
    mode: mode,
    transaction: updatedTransaction,
    gasErrors: gasErrors,
    gasWarnings: gasWarnings,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimitDec,
    balanceError: balanceError,
    estimatesUnavailableWarning: estimatesUnavailableWarning,
    hasGasErrors: hasGasErrors,
    txParamsHaveBeenCustomized: txParamsHaveBeenCustomized,
    isNetworkBusy: isNetworkBusy
  }, editGasDisplayProps)))));
}

EditGasPopover.propTypes = {
  popoverTitle: _propTypes.default.string,
  editGasDisplayProps: _propTypes.default.object,
  confirmButtonText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  transaction: _propTypes.default.object,
  mode: _propTypes.default.oneOf(Object.values(_gas.EDIT_GAS_MODES)),
  defaultEstimateToUse: _propTypes.default.string,
  minimumGasLimit: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\index.js", {"./edit-gas-popover.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\edit-gas-popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasPopover.default;
  }
});

var _editGasPopover = _interopRequireDefault(require("./edit-gas-popover.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/info-tooltip/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","../../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-details-item\gas-details-item-title\gas-details-item-title.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _designSystem = require("../../../../helpers/constants/design-system");

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _selectors = require("../../../../selectors");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip/info-tooltip"));

var _typography = _interopRequireDefault(require("../../../ui/typography/typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GasDetailsItemTitle = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 1
  }, t('gas')), /*#__PURE__*/_react.default.createElement("span", {
    className: "gas-details-item-title__estimate"
  }, "(", t('transactionDetailGasInfoV2'), ")"), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, t('transactionDetailGasTooltipIntro', [isMainnet ? t('networkNameEthereum') : ''])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, t('transactionDetailGasTooltipExplanation')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: "https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('transactionDetailGasTooltipConversion')))),
    position: "bottom"
  }));
};

var _default = GasDetailsItemTitle;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js", {"./gas-details-item-title":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-details-item\gas-details-item-title\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItemTitle.default;
  }
});

var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item.js", {"../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/loading-heartbeat":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../gas-timing/gas-timing.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js","../transaction-detail-item/transaction-detail-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./gas-details-item-title":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-details-item\gas-details-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRedux = require("react-redux");

var _designSystem = require("../../../helpers/constants/design-system");

var _common = require("../../../helpers/constants/common");

var _selectors = require("../../../selectors");

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../ui/box"));

var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));

var _gasTiming = _interopRequireDefault(require("../gas-timing/gas-timing.component"));

var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));

var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GasDetailsItem = ({
  userAcknowledgedGasMissing = false
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    estimateUsed,
    hasSimulationError,
    maximumCostInHexWei: hexMaximumTransactionFee,
    minimumCostInHexWei: hexMinimumTransactionFee,
    maxPriorityFeePerGas,
    maxFeePerGas
  } = (0, _gasFee.useGasFeeContext)();
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences);

  if (hasSimulationError && !userAcknowledgedGasMissing) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "gas-item",
    detailTitle: /*#__PURE__*/_react.default.createElement(_gasDetailsItemTitle.default, null),
    detailTitleColor: _designSystem.COLORS.TEXT_DEFAULT,
    detailText: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: hexMinimumTransactionFee,
      hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
    })),
    detailTotal: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.PRIMARY,
      value: hexMinimumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })),
    subText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
      key: "editGasSubTextFeeLabel",
      display: "inline-flex",
      className: (0, _classnames.default)('gas-details-item__gasfee-label', {
        'gas-details-item__gas-fee-warning': estimateUsed === 'high'
      })
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginRight: 1
    }, /*#__PURE__*/_react.default.createElement("strong", null, estimateUsed === 'high' && '⚠ ', t('editGasSubTextFeeLabel'))), /*#__PURE__*/_react.default.createElement("div", {
      key: "editGasSubTextFeeValue",
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      key: "editGasSubTextFeeAmount",
      type: _common.PRIMARY,
      value: hexMaximumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })))),
    subTitle: /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
      maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),
      maxFeePerGas: maxFeePerGas.toString()
    })
  });
};

GasDetailsItem.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};
var _default = GasDetailsItem;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\index.js", {"./gas-details-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-details-item\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItem.default;
  }
});

var _gasDetailsItem = _interopRequireDefault(require("./gas-details-item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../hooks/usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/info-tooltip/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-timing\gas-timing.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GasTiming;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _gas = require("../../../../shared/constants/gas");

var _usePrevious = require("../../../hooks/usePrevious");

var _i18n = require("../../../contexts/i18n");

var _metamask = require("../../../ducks/metamask/metamask");

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip/info-tooltip"));

var _actions = require("../../../store/actions");

var _gas2 = require("../../../helpers/constants/gas");

var _gasFee = require("../../../contexts/gasFee");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Once we reach this second threshold, we switch to minutes as a unit
const SECOND_CUTOFF = 90; // Shows "seconds" as unit of time if under SECOND_CUTOFF, otherwise "minutes"

const toHumanReadableTime = (milliseconds = 1, t) => {
  const seconds = Math.ceil(milliseconds / 1000);

  if (seconds <= SECOND_CUTOFF) {
    return t('gasTimingSeconds', [seconds]);
  }

  return t('gasTimingMinutes', [Math.ceil(seconds / 60)]);
};

function GasTiming({
  maxFeePerGas = 0,
  maxPriorityFeePerGas = 0,
  gasWarnings
}) {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    estimateUsed,
    supportsEIP1559V2
  } = (0, _gasFee.useGasFeeContext)(); // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show

  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  const previousMaxFeePerGas = (0, _usePrevious.usePrevious)(maxFeePerGas);
  const previousMaxPriorityFeePerGas = (0, _usePrevious.usePrevious)(maxPriorityFeePerGas);
  const previousIsUnknownLow = (0, _usePrevious.usePrevious)(isUnknownLow);
  (0, _react.useEffect)(() => {
    const priority = maxPriorityFeePerGas;
    const fee = maxFeePerGas;

    if (isUnknownLow || priority && priority !== previousMaxPriorityFeePerGas || fee && fee !== previousMaxFeePerGas) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(priority, 10).toString(10), new _bignumber.default(fee, 10).toString(10)).then(result => {
        if (maxFeePerGas === fee && maxPriorityFeePerGas === priority) {
          setCustomEstimatedTime(result);
        }
      });
    }

    if (isUnknownLow !== false && previousIsUnknownLow === true) {
      setCustomEstimatedTime(null);
    }
  }, [maxPriorityFeePerGas, maxFeePerGas, isUnknownLow, previousMaxFeePerGas, previousMaxPriorityFeePerGas, previousIsUnknownLow]);
  let unknownProcessingTimeText;

  if (supportsEIP1559V2) {
    unknownProcessingTimeText = t('editGasTooLow');
  } else {
    unknownProcessingTimeText = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('editGasTooLow'), ' ', /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
      position: "top",
      contentText: t('editGasTooLowTooltip')
    }));
  }

  if ((gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxPriorityFee) === _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW || (gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxFee) === _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW) {
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      className: (0, _classnames.default)('gas-timing', 'gas-timing--negative')
    }, unknownProcessingTimeText);
  } // Don't show anything if we don't have enough information


  if (isGasEstimatesLoading || gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.FEE_MARKET) {
    return null;
  }

  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let text = '';
  let attitude = 'positive'; // Anything medium or faster is positive

  if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    // High+ is very likely, medium is likely
    if (Number(maxPriorityFeePerGas) < Number(high.suggestedMaxPriorityFeePerGas)) {
      // Medium
      text = t('gasTimingPositive', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    } else {
      // High
      text = t('gasTimingVeryPositive', [toHumanReadableTime(high.minWaitTimeEstimate, t)]);
    }
  } else {
    if (!supportsEIP1559V2 || estimateUsed === 'low') {
      attitude = 'negative';
    } // If the user has chosen a value less than our low estimate,
    // calculate a potential wait time


    if (isUnknownLow) {
      // If we didn't get any useful information, show the
      // "unknown processing time" message
      if (!customEstimatedTime || customEstimatedTime === 'unknown' || (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) === 'unknown') {
        text = unknownProcessingTimeText;
      } else {
        text = t('gasTimingNegative', [toHumanReadableTime(Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound), t)]);
      }
    } else if (supportsEIP1559V2) {
      text = t('gasTimingNegative', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    } else {
      text = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('gasTimingNegative', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
        position: "top",
        contentText: t('editGasTooLowWarningTooltip')
      }));
    }
  }

  return /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    className: (0, _classnames.default)('gas-timing', {
      [`gas-timing--${attitude}`]: attitude && !supportsEIP1559V2,
      [`gas-timing--${attitude}-V2`]: attitude && supportsEIP1559V2
    })
  }, text);
}

GasTiming.propTypes = {
  maxPriorityFeePerGas: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  gasWarnings: _propTypes.default.object
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\index.js", {"./gas-timing.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\gas-timing\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasTiming.default;
  }
});

var _gasTiming = _interopRequireDefault(require("./gas-timing.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\home-notification\\home-notification.component.js", {"../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\home-notification\home-notification.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _checkBox = _interopRequireDefault(require("../../ui/check-box"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HomeNotification = ({
  acceptText,
  checkboxText,
  checkboxTooltipText,
  classNames = [],
  descriptionText,
  ignoreText,
  infoText,
  onAccept,
  onIgnore
}) => {
  const [checkboxState, setCheckBoxState] = (0, _react.useState)(false);

  const checkboxElement = checkboxText && /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "homeNotification_checkbox",
    checked: checkboxState,
    className: "home-notification__checkbox",
    onClick: () => setCheckBoxState(checked => !checked)
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('home-notification', ...classNames)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__text"
  }, descriptionText)), infoText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: infoText,
    wrapperClassName: "home-notification__tooltip-wrapper"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-info-circle"
  })) : null), /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__buttons"
  }, onAccept && acceptText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "home-notification__accept-button",
    onClick: onAccept
  }, acceptText) : null, onIgnore && ignoreText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "home-notification__ignore-button" // Some onIgnore handlers use the checkboxState to determine whether
    // to disable the notification
    ,
    onClick: () => onIgnore(checkboxState)
  }, ignoreText) : null, checkboxText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__checkbox-wrapper"
  }, checkboxTooltipText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: checkboxTooltipText,
    wrapperClassName: "home-notification__checkbox-label-tooltip"
  }, checkboxElement) : checkboxElement, /*#__PURE__*/_react.default.createElement("label", {
    className: "home-notification__checkbox-label",
    htmlFor: "homeNotification_checkbox"
  }, checkboxText)) : null));
};

HomeNotification.propTypes = {
  /**
   * The text for the "Accept" button. This must be accompanied by the `onAccept` prop.
   *
   * The "Accept" button is only rendered if this prop is set.
   */
  acceptText: _propTypes.default.node,

  /**
   * The text to display alongside the checkbox.
   *
   * The checkbox state is passed to the `onIgnore` handler, so this should only be used if the `onIgnore` prop is set.
   *
   * The checkbox is only rendered if this prop is set.
   */
  checkboxText: _propTypes.default.node,

  /**
   * The text to display in the checkbox tooltip.
   *
   * The tooltip is only rendered if this prop is set.
   */
  checkboxTooltipText: _propTypes.default.node,

  /**
   * Custom class names.
   */
  classNames: _propTypes.default.array,

  /**
   * The notification description.
   */
  descriptionText: _propTypes.default.node.isRequired,

  /**
   * The text for the "Ignore" button. This must be accompanied by the `onIgnore` prop.
   *
   * The "Ignore" button is only rendered if this prop is set.
   */
  ignoreText: _propTypes.default.node,

  /**
   * The text for the info icon tooltip in the top-right of the notification.
   *
   * The info-icon is only rendered if this prop is set.
   */
  infoText: _propTypes.default.node,

  /**
   * The handler for the "Accept" button. This must be accompanied by the `acceptText` prop.
   */
  onAccept: _propTypes.default.func,

  /**
   * The handler for the "Ignore" button. This must be accompanied by the `ignoreText` prop.
   *
   * If `checkboxText` is set, the checkbox state will be passed to this function as a boolean.
   */
  onIgnore: _propTypes.default.func
};
var _default = HomeNotification;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\home-notification\\index.js", {"./home-notification.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\home-notification\\home-notification.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\home-notification\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _homeNotification.default;
  }
});

var _homeNotification = _interopRequireDefault(require("./home-notification.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\import-token-link\\import-token-link.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\import-token-link\import-token-link.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportTokenLink;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _button = _interopRequireDefault(require("../../ui/button"));

var _box = _interopRequireDefault(require("../../ui/box/box"));

var _designSystem = require("../../../helpers/constants/design-system");

var _actions = require("../../../store/actions");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _selectors = require("../../../selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ImportTokenLink() {
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const isTokenDetectionSupported = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionSupported);
  const isTokenDetectionInactiveOnMainnet = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionInactiveOnMainnet);
  const isTokenDetectionAvailable = isTokenDetectionSupported || isTokenDetectionInactiveOnMainnet || Boolean(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "import-token-link",
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, isTokenDetectionAvailable && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "refresh-list-button",
    type: "link",
    onClick: () => (0, _actions.detectNewTokens)()
  }, t('refreshList')), t('or')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "import-token-button",
    type: "link",
    onClick: () => {
      history.push(_routes.IMPORT_TOKEN_ROUTE);
      trackEvent({
        event: _metametrics2.EVENT_NAMES.TOKEN_IMPORT_BUTTON_CLICKED,
        category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
        properties: {
          location: 'Home'
        }
      });
    }
  }, isTokenDetectionAvailable ? t('importTokens') : t('importTokens').charAt(0).toUpperCase() + t('importTokens').slice(1)));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\import-token-link\\index.js", {"./import-token-link.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\import-token-link\\import-token-link.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\import-token-link\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importTokenLink.default;
  }
});

var _importTokenLink = _interopRequireDefault(require("./import-token-link.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js", {"./ledger-instruction-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\ledger-instruction-field\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _ledgerInstructionField.default;
  }
});

var _ledgerInstructionField = _interopRequireDefault(require("./ledger-instruction-field"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/dialog":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dialog\\index.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\ledger-instruction-field\ledger-instruction-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LedgerInstructionField;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _app = require("../../../../shared/constants/app");

var _app2 = require("../../../ducks/app/app");

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _designSystem = require("../../../helpers/constants/design-system");

var _dialog = _interopRequireDefault(require("../../ui/dialog"));

var _util = require("../../../../app/scripts/lib/util");

var _metamask = require("../../../ducks/metamask/metamask");

var _actions = require("../../../store/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const renderInstructionStep = (text, show = true, color = _designSystem.COLORS.TEXT_DEFAULT) => {
  return show && /*#__PURE__*/_react.default.createElement(_typography.default, {
    boxProps: {
      margin: 0
    },
    color: color,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H7
  }, text);
};

function LedgerInstructionField({
  showDataInstruction
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const webHidConnectedStatus = (0, _reactRedux.useSelector)(_app2.getLedgerWebHidConnectedStatus);
  const ledgerTransportType = (0, _reactRedux.useSelector)(_metamask.getLedgerTransportType);
  const transportStatus = (0, _reactRedux.useSelector)(_app2.getLedgerTransportStatus);
  const environmentType = (0, _util.getEnvironmentType)();
  const environmentTypeIsFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  (0, _react.useEffect)(() => {
    const initialConnectedDeviceCheck = async () => {
      if (ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && webHidConnectedStatus !== _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED) {
        const devices = await window.navigator.hid.getDevices();
        const webHidIsConnected = devices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)(webHidIsConnected ? _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED : _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED));
      }
    };

    const determineTransportStatus = async () => {
      if (ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && webHidConnectedStatus === _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED && transportStatus === _hardwareWallets.TRANSPORT_STATES.NONE) {
        try {
          const transportedCreated = await (0, _actions.attemptLedgerTransportCreation)();
          dispatch((0, _app2.setLedgerTransportStatus)(transportedCreated ? _hardwareWallets.TRANSPORT_STATES.VERIFIED : _hardwareWallets.TRANSPORT_STATES.UNKNOWN_FAILURE));
        } catch (e) {
          if (e.message.match('Failed to open the device')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.DEVICE_OPEN_FAILURE));
          } else if (e.message.match('the device is already open')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.VERIFIED));
          } else {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.UNKNOWN_FAILURE));
          }
        }
      }
    };

    determineTransportStatus();
    initialConnectedDeviceCheck();
  }, [dispatch, ledgerTransportType, webHidConnectedStatus, transportStatus]);
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.NONE));
    };
  }, [dispatch]);
  const usingLedgerLive = ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE;
  const usingWebHID = ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID;

  const isFirefox = (0, _util.getPlatform)() === _app.PLATFORM_FIREFOX;

  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row"
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "message"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "ledger-live-dialog"
  }, renderInstructionStep(t('ledgerConnectionInstructionHeader')), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepOne')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepTwo')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepThree')}`), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepFour')}`, showDataInstruction), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        window.location.reload();
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, t('ledgerConnectionInstructionCloseOtherApps'))), transportStatus === _hardwareWallets.TRANSPORT_STATES.DEVICE_OPEN_FAILURE), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const webHidIsConnected = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)({
          webHidConnectedStatus: webHidIsConnected ? _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED : _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED
        }));
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, environmentTypeIsFullScreen ? t('clickToConnectLedgerViaWebHID') : t('openFullScreenForLedgerWebHid'))), usingWebHID && webHidConnectedStatus === _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED, _designSystem.COLORS.WARNING_DEFAULT)))));
}

LedgerInstructionField.propTypes = {
  showDataInstruction: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\loading-network-screen\\index.js", {"./loading-network-screen.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\loading-network-screen\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingNetworkScreen.default;
  }
});

var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/loading-screen":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\loading-network-screen\loading-network-screen.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _loadingScreen = _interopRequireDefault(require("../../ui/loading-screen"));

var _time = require("../../../../shared/constants/time");

var _network = require("../../../../shared/constants/network");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LoadingNetworkScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showErrorScreen: false
    });

    _defineProperty(this, "componentDidMount", () => {
      this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
    });

    _defineProperty(this, "getConnectingLabel", function (loadingMessage) {
      if (loadingMessage) {
        return loadingMessage;
      }

      const {
        provider,
        providerId
      } = this.props;
      const providerName = provider.type;
      const {
        t
      } = this.context;

      switch (providerName) {
        case _network.NETWORK_TYPES.MAINNET:
          return t('connectingToMainnet');

        case _network.NETWORK_TYPES.GOERLI:
          return t('connectingToGoerli');

        case _network.NETWORK_TYPES.SEPOLIA:
          return t('connectingToSepolia');

        default:
          return t('connectingTo', [providerId]);
      }
    });

    _defineProperty(this, "renderDeprecatedRpcUrlWarning", () => {
      const {
        showNetworkDropdown
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-screen"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "loading-overlay__emoji"
      }, "\uD83D\uDE1E"), /*#__PURE__*/_react.default.createElement("span", null, this.context.t('currentRpcUrlDeprecated')), /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-buttons"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        onClick: () => {
          window.clearTimeout(this.cancelCallTimeout);
          showNetworkDropdown();
        }
      }, this.context.t('switchNetworks'))));
    });

    _defineProperty(this, "renderErrorScreenContent", () => {
      const {
        showNetworkDropdown,
        setProviderArgs,
        setProviderType
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-screen"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "loading-overlay__emoji"
      }, "\uD83D\uDE1E"), /*#__PURE__*/_react.default.createElement("span", null, this.context.t('somethingWentWrong')), /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-buttons"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        onClick: () => {
          window.clearTimeout(this.cancelCallTimeout);
          showNetworkDropdown();
        }
      }, this.context.t('switchNetworks')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "primary",
        onClick: () => {
          this.setState({
            showErrorScreen: false
          });
          setProviderType(...setProviderArgs);
          window.clearTimeout(this.cancelCallTimeout);
          this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
        }
      }, this.context.t('tryAgain'))));
    });

    _defineProperty(this, "cancelCall", () => {
      const {
        isNetworkLoading
      } = this.props;

      if (isNetworkLoading) {
        this.setState({
          showErrorScreen: true
        });
      }
    });

    _defineProperty(this, "componentDidUpdate", prevProps => {
      const {
        provider
      } = this.props;
      const {
        provider: prevProvider
      } = prevProps;

      if (provider.type !== prevProvider.type) {
        window.clearTimeout(this.cancelCallTimeout);
        this.setState({
          showErrorScreen: false
        });
        this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
      }
    });

    _defineProperty(this, "componentWillUnmount", () => {
      window.clearTimeout(this.cancelCallTimeout);
    });
  }

  render() {
    const {
      rollbackToPreviousProvider,
      showDeprecatedRpcUrlWarning
    } = this.props;
    let loadingMessageToRender;

    if (this.state.showErrorScreen) {
      loadingMessageToRender = this.renderErrorScreenContent();
    } else if (showDeprecatedRpcUrlWarning) {
      loadingMessageToRender = this.renderDeprecatedRpcUrlWarning();
    } else {
      loadingMessageToRender = this.getConnectingLabel(this.props.loadingMessage);
    }

    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
      header: /*#__PURE__*/_react.default.createElement("div", {
        className: "page-container__header-close",
        onClick: rollbackToPreviousProvider
      }),
      showLoadingSpinner: !this.state.showErrorScreen,
      loadingMessage: loadingMessageToRender
    });
  }

}

exports.default = LoadingNetworkScreen;

_defineProperty(LoadingNetworkScreen, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(LoadingNetworkScreen, "propTypes", {
  loadingMessage: _propTypes.default.string,
  cancelTime: _propTypes.default.number,
  provider: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  providerId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showNetworkDropdown: _propTypes.default.func,
  setProviderArgs: _propTypes.default.array,
  setProviderType: _propTypes.default.func,
  rollbackToPreviousProvider: _propTypes.default.func,
  isNetworkLoading: _propTypes.default.bool,
  showDeprecatedRpcUrlWarning: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./loading-network-screen.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\loading-network-screen\loading-network-screen.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _network = require("../../../../shared/constants/network");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEPRECATED_TEST_NET_CHAINIDS = ['0x3', '0x2a', '0x4'];

const mapStateToProps = state => {
  var _provider$rpcUrl;

  const {
    loadingMessage
  } = state.appState;
  const {
    provider
  } = state.metamask;
  const {
    rpcUrl,
    chainId,
    ticker,
    nickname,
    type
  } = provider;
  const setProviderArgs = type === _network.NETWORK_TYPES.RPC ? [rpcUrl, chainId, ticker, nickname] : [provider.type];
  const providerChainId = provider === null || provider === void 0 ? void 0 : provider.chainId;
  const isDeprecatedNetwork = DEPRECATED_TEST_NET_CHAINIDS.includes(providerChainId);
  const isInfuraRpcUrl = provider === null || provider === void 0 ? void 0 : (_provider$rpcUrl = provider.rpcUrl) === null || _provider$rpcUrl === void 0 ? void 0 : _provider$rpcUrl.match('infura');
  const showDeprecatedRpcUrlWarning = isDeprecatedNetwork && isInfuraRpcUrl;
  return {
    isNetworkLoading: (0, _selectors.isNetworkLoading)(state),
    loadingMessage,
    setProviderArgs,
    provider,
    providerId: (0, _selectors.getNetworkIdentifier)(state),
    showDeprecatedRpcUrlWarning
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    rollbackToPreviousProvider: () => dispatch(actions.rollbackToPreviousProvider()),
    showNetworkDropdown: () => dispatch(actions.showNetworkDropdown())
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_loadingNetworkScreen.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\account-options-menu.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/menu":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\menu-bar\account-options-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountOptionsMenu;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _etherscanLink = require("@metamask/etherscan-link");

var _actions = require("../../../store/actions");

var _routes = require("../../../helpers/constants/routes");

var _util = require("../../../helpers/utils/util");

var _menu = require("../../ui/menu");

var _selectors = require("../../../selectors");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _util2 = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _metametrics = require("../../../../shared/constants/metametrics");

var _metametrics2 = require("../../../contexts/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AccountOptionsMenu({
  anchorElement,
  onClose
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const {
    address
  } = selectedIdentity;
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const {
    blockExplorerUrl
  } = rpcPrefs;
  const blockExplorerUrlSubTitle = (0, _util.getURLHostName)(blockExplorerUrl);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);
  const isRemovable = keyring.type !== 'HD Key Tree';

  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };

  const openBlockExplorer = () => {
    trackEvent({
      event: _metametrics.EVENT_NAMES.EXTERNAL_LINK_CLICKED,
      category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
      properties: {
        link_type: _metametrics.EVENT.EXTERNAL_LINK_TYPES.ACCOUNT_TRACKER,
        location: 'Account Options',
        url_domain: (0, _util.getURLHostName)(addressLink)
      }
    });
    global.platform.openTab({
      url: addressLink
    });
    onClose();
  };

  return /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: anchorElement,
    className: "account-options-menu",
    onHide: onClose
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer,
    subtitle: blockExplorerUrlSubTitle ? /*#__PURE__*/_react.default.createElement("span", {
      className: "account-options-menu__explorer-origin"
    }, blockExplorerUrlSubTitle) : null,
    iconClassName: "fas fa-external-link-alt"
  }, t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [t(blockExplorerLinkText.secondPart)])), (0, _util2.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_FULLSCREEN ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: () => {
      trackEvent({
        event: _metametrics.EVENT_NAMES.APP_WINDOW_EXPANDED,
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        properties: {
          location: 'Account Options'
        }
      });
      global.platform.openExtensionInBrowser();
      onClose();
    },
    iconClassName: "fas fa-expand-alt"
  }, t('expandView')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__account-details",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'ACCOUNT_DETAILS'
      }));
      trackEvent({
        event: _metametrics.EVENT_NAMES.NAV_ACCOUNT_DETAILS_OPENED,
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        properties: {
          location: 'Account Options'
        }
      });
      onClose();
    },
    iconClassName: "fas fa-qrcode"
  }, t('accountDetails')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__connected-sites",
    onClick: () => {
      trackEvent({
        event: _metametrics.EVENT_NAMES.NAV_CONNECTED_SITES_OPENED,
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        properties: {
          location: 'Account Options'
        }
      });
      history.push(_routes.CONNECTED_ROUTE);
      onClose();
    },
    iconClassName: "fa fa-bullseye"
  }, t('connectedSites')), isRemovable ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__remove-account",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'CONFIRM_REMOVE_ACCOUNT',
        identity: selectedIdentity
      }));
      onClose();
    },
    iconClassName: "fas fa-trash-alt"
  }, t('removeAccount')) : null);
}

AccountOptionsMenu.propTypes = {
  anchorElement: _propTypes.default.instanceOf(window.Element),
  onClose: _propTypes.default.func.isRequired
};
AccountOptionsMenu.defaultProps = {
  anchorElement: undefined
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\index.js", {"./menu-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\menu-bar.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\menu-bar\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _menuBar.default;
  }
});

var _menuBar = _interopRequireDefault(require("./menu-bar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\menu-bar.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../connected-status-indicator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\index.js","../selected-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\index.js","./account-options-menu":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-bar\\account-options-menu.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","webextension-polyfill":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\menu-bar\menu-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MenuBar;

var _react = _interopRequireWildcard(require("react"));

var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _selectedAccount = _interopRequireDefault(require("../selected-account"));

var _connectedStatusIndicator = _interopRequireDefault(require("../connected-status-indicator"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _metametrics = require("../../../../shared/constants/metametrics");

var _routes = require("../../../helpers/constants/routes");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _selectors = require("../../../selectors");

var _metametrics2 = require("../../../contexts/metametrics");

var _accountOptionsMenu = _interopRequireDefault(require("./account-options-menu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MenuBar() {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [accountOptionsButtonElement, setAccountOptionsButtonElement] = (0, _react.useState)(null);
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const origin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);

  const showStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP && origin && origin !== _webextensionPolyfill.default.runtime.id;

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "menu-bar"
  }, showStatus ? /*#__PURE__*/_react.default.createElement(_connectedStatusIndicator.default, {
    onClick: () => history.push(_routes.CONNECTED_ACCOUNTS_ROUTE)
  }) : null, /*#__PURE__*/_react.default.createElement(_selectedAccount.default, null), /*#__PURE__*/_react.default.createElement("button", {
    className: "fas fa-ellipsis-v menu-bar__account-options",
    "data-testid": "account-options-menu-button",
    ref: setAccountOptionsButtonElement,
    title: t('accountOptions'),
    onClick: () => {
      trackEvent({
        event: _metametrics.EVENT_NAMES.NAV_ACCOUNT_MENU_OPENED,
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        properties: {
          location: 'Home'
        }
      });
      setAccountOptionsMenuOpen(true);
    }
  }), accountOptionsMenuOpen && /*#__PURE__*/_react.default.createElement(_accountOptionsMenu.default, {
    anchorElement: accountOptionsButtonElement,
    onClose: () => setAccountOptionsMenuOpen(false)
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\menu-droppo.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dom\\index.js","react-transition-group/CSSTransitionGroup":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-transition-group\\CSSTransitionGroup.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\menu-droppo.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _CSSTransitionGroup = _interopRequireDefault(require("react-transition-group/CSSTransitionGroup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MenuDroppoComponent extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "globalClickOccurred", event => {
      const {
        target
      } = event; // eslint-disable-next-line react/no-find-dom-node

      const container = (0, _reactDom.findDOMNode)(this);

      if (this.props.isOpen && target !== container && !this.container.contains(event.target)) {
        var _this$props$onClickOu, _this$props;

        (_this$props$onClickOu = (_this$props = this.props).onClickOutside) === null || _this$props$onClickOu === void 0 ? void 0 : _this$props$onClickOu.call(_this$props, event);
      }
    });
  }

  renderPrimary() {
    const {
      isOpen
    } = this.props;

    if (!isOpen) {
      return null;
    }

    const innerStyle = this.props.innerStyle || {};
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "menu-droppo",
      key: "menu-droppo-drawer",
      "data-testid": "menu-droppo",
      style: innerStyle
    }, this.props.children);
  }

  componentDidMount() {
    if (this && document.body) {
      document.body.addEventListener('click', this.globalClickOccurred); // eslint-disable-next-line react/no-find-dom-node

      const container = (0, _reactDom.findDOMNode)(this);
      this.container = container;
    }
  }

  componentWillUnmount() {
    if (this && document.body) {
      document.body.removeEventListener('click', this.globalClickOccurred);
    }
  }

  render() {
    const {
      containerClassName = '',
      style
    } = this.props;
    const speed = this.props.speed || '300ms';
    const {
      useCssTransition
    } = this.props;
    const zIndex = 'zIndex' in this.props ? this.props.zIndex : 0;
    const baseStyle = {
      position: 'fixed',
      ...style,
      zIndex
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      style: baseStyle,
      className: `menu-droppo-container ${containerClassName}`,
      "data-testid": containerClassName
    }, /*#__PURE__*/_react.default.createElement("style", null, `
          .menu-droppo-enter {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }

          .menu-droppo-enter.menu-droppo-enter-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave.menu-droppo-leave-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }
        `), useCssTransition ? /*#__PURE__*/_react.default.createElement(_CSSTransitionGroup.default, {
      className: "css-transition-group",
      transitionName: "menu-droppo",
      transitionEnterTimeout: parseInt(speed, 10),
      transitionLeaveTimeout: parseInt(speed, 10)
    }, this.renderPrimary()) : this.renderPrimary());
  }

}

exports.default = MenuDroppoComponent;

_defineProperty(MenuDroppoComponent, "propTypes", {
  isOpen: _propTypes.default.bool.isRequired,
  innerStyle: _propTypes.default.object,
  children: _propTypes.default.node.isRequired,
  onClickOutside: _propTypes.default.func,
  containerClassName: _propTypes.default.string,
  zIndex: _propTypes.default.number,
  style: _propTypes.default.object.isRequired,
  useCssTransition: _propTypes.default.bool,
  speed: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\index.js", {"./metamask-template-renderer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\metamask-template-renderer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTemplateRenderer.default;
  }
});

var _metamaskTemplateRenderer = _interopRequireDefault(require("./metamask-template-renderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js", {"./safe-component-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\metamask-template-renderer\metamask-template-renderer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SectionShape = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _safeComponentList = require("./safe-component-list");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getElement(section) {
  const {
    element
  } = section;
  const Element = _safeComponentList.safeComponentList[element];

  if (!Element) {
    throw new Error(`${element} is not in the safe component list for MetaMask template renderer`);
  }

  return Element;
}

const MetaMaskTemplateRenderer = ({
  sections
}) => {
  if (!sections) {
    // If sections is null eject early by returning null
    return null;
  } else if (typeof sections === 'string') {
    // React can render strings directly, so return the string
    return sections;
  } else if (sections && typeof sections === 'object' && !Array.isArray(sections)) {
    // If dealing with a single entry, then render a single object without key
    const Element = getElement(sections);
    return /*#__PURE__*/_react.default.createElement(Element, sections.props, typeof sections.children === 'object' ? /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
      sections: sections.children
    }) : sections === null || sections === void 0 ? void 0 : sections.children);
  } // The last case is dealing with an array of objects


  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, sections.reduce((allChildren, child) => {
    if ((child === null || child === void 0 ? void 0 : child.hide) === true) {
      return allChildren;
    }

    if (typeof child === 'string') {
      // React can render strings directly, so push them into the accumulator
      allChildren.push(child);
    } else {
      // If the entry in array is not a string, then it must be a Section.
      // Sections are handled by the main function, but must
      // be provided a key when a part of an array.
      if (!child.key) {
        throw new Error('When using array syntax in MetaMask Template Language, you must specify a key for each child of the array');
      }

      if (typeof (child === null || child === void 0 ? void 0 : child.children) === 'object') {
        // If this child has its own children, check if children is an
        // object, and in that case use recursion to render.
        allChildren.push( /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
          sections: child,
          key: child.key
        }));
      } else {
        // Otherwise render the element.
        const Element = getElement(child);
        allChildren.push( /*#__PURE__*/_react.default.createElement(Element, _extends({
          key: child.key
        }, child.props), child === null || child === void 0 ? void 0 : child.children));
      }
    }

    return allChildren;
  }, []));
};

const SectionShape = {
  props: _propTypes.default.object,
  element: _propTypes.default.oneOf(Object.keys(_safeComponentList.safeComponentList)).isRequired,
  key: _propTypes.default.string
};
exports.SectionShape = SectionShape;

const ValidChildren = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(SectionShape), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape(SectionShape), _propTypes.default.string]))]);

SectionShape.children = ValidChildren;
MetaMaskTemplateRenderer.propTypes = {
  sections: ValidChildren
};

var _default = /*#__PURE__*/(0, _react.memo)(MetaMaskTemplateRenderer, (prevProps, nextProps) => {
  return (0, _lodash.isEqual)(prevProps.sections, nextProps.sections);
});

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js", {"../../../pages/confirmation/components/confirmation-network-switch":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\index.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/chip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\index.js","../../ui/definition-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\definition-list\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/textarea/textarea":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\textarea\\textarea.js","../../ui/tooltip/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","../../ui/truncated-definition-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\truncated-definition-list\\index.js","../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../ui/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../metamask-translation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-translation\\index.js","../network-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\metamask-template-renderer\safe-component-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeComponentList = void 0;

var _button = _interopRequireDefault(require("../../ui/button"));

var _chip = _interopRequireDefault(require("../../ui/chip"));

var _definitionList = _interopRequireDefault(require("../../ui/definition-list"));

var _truncatedDefinitionList = _interopRequireDefault(require("../../ui/truncated-definition-list"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _box = _interopRequireDefault(require("../../ui/box"));

var _metamaskTranslation = _interopRequireDefault(require("../metamask-translation"));

var _networkDisplay = _interopRequireDefault(require("../network-display"));

var _textarea = _interopRequireDefault(require("../../ui/textarea/textarea"));

var _confirmationNetworkSwitch = _interopRequireDefault(require("../../../pages/confirmation/components/confirmation-network-switch"));

var _urlIcon = _interopRequireDefault(require("../../ui/url-icon"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip/tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const safeComponentList = {
  MetaMaskTranslation: _metamaskTranslation.default,
  a: 'a',
  b: 'b',
  p: 'p',
  div: 'div',
  span: 'span',
  Typography: _typography.default,
  Chip: _chip.default,
  DefinitionList: _definitionList.default,
  TruncatedDefinitionList: _truncatedDefinitionList.default,
  Button: _button.default,
  Popover: _popover.default,
  Box: _box.default,
  NetworkDisplay: _networkDisplay.default,
  TextArea: _textarea.default,
  ConfirmationNetworkSwitch: _confirmationNetworkSwitch.default,
  UrlIcon: _urlIcon.default,
  Tooltip: _tooltip.default,
  i: 'i'
};
exports.safeComponentList = safeComponentList;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-translation\\index.js", {"./metamask-translation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-translation\\metamask-translation.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\metamask-translation\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTranslation.default;
  }
});

var _metamaskTranslation = _interopRequireDefault(require("./metamask-translation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-translation\\metamask-translation.js", {"../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../metamask-template-renderer/metamask-template-renderer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\metamask-translation\metamask-translation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MetaMaskTranslation;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _metamaskTemplateRenderer = _interopRequireWildcard(require("../metamask-template-renderer/metamask-template-renderer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * MetaMaskTranslation is a simple helper component for adding full translation
 * support to the template system. We do pass the translation function to the
 * template getValues function, but passing it React components as variables
 * would require React to be in scope, and breaks the object pattern paradigm.
 *
 * This component gets around that by converting variables that are templates
 * themselves into tiny React trees. This component does additional validation
 * to make sure that the tree has a single root node, with maximum two leaves.
 * Each subnode can have a maximum of one child that must be a string.
 *
 * This enforces a maximum recursion depth of 2, preventing translation strings
 * from being performance hogs. We could further limit this, and also attenuate
 * the safeComponentList for what kind of components we allow these special
 * trees to contain.
 *
 * @param options
 * @param options.translationKey
 * @param options.variables
 */
function MetaMaskTranslation({
  translationKey,
  variables
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return t(translationKey, variables === null || variables === void 0 ? void 0 : variables.map(variable => {
    if (typeof variable === 'object' && !Array.isArray(variable) && variable.element) {
      var _variable$children, _variable$children$, _variable$children2, _variable$children2$;

      if (!variable.key) {
        throw new Error(`When using MetaMask Template Language in a MetaMaskTranslation variable, you must provide a key for the section regardless of syntax.
            Section with element '${variable.element}' for translationKey: '${translationKey}' has no key property`);
      }

      if (variable.children && Array.isArray(variable.children) && variable.children.length > 2) {
        throw new Error('MetaMaskTranslation only renders templates with a single section and maximum two children');
      } else if (((_variable$children = variable.children) === null || _variable$children === void 0 ? void 0 : (_variable$children$ = _variable$children[0]) === null || _variable$children$ === void 0 ? void 0 : _variable$children$.children) !== undefined && typeof variable.children[0].children !== 'string' || ((_variable$children2 = variable.children) === null || _variable$children2 === void 0 ? void 0 : (_variable$children2$ = _variable$children2[1]) === null || _variable$children2$ === void 0 ? void 0 : _variable$children2$.children) !== undefined && typeof variable.children[1].children !== 'string') {
        throw new Error('MetaMaskTranslation does not allow for component trees of non trivial depth');
      }

      return /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
        key: `${translationKey}-${variable.key}`,
        sections: variable
      });
    }

    return variable;
  }));
}

MetaMaskTranslation.propTypes = {
  /**
   * Translation object key
   */
  translationKey: _propTypes.default.string.isRequired,

  /**
   * Array of variables for the MetaMaskTranslation component
   */
  variables: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape(_metamaskTemplateRenderer.SectionShape)]))
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js", {"./modal-content":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\index.js","./modal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});

var _modal = _interopRequireDefault(require("./modal.component"));

var _modalContent = _interopRequireDefault(require("./modal-content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\index.js", {"./modal-content.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modal\modal-content\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});

var _modalContent = _interopRequireDefault(require("./modal-content.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modal\modal-content\modal-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ModalContent extends _react.PureComponent {
  render() {
    const {
      title,
      description
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content"
    }, title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__title"
    }, title) : null, description && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__description"
    }, description));
  }

}

exports.default = ModalContent;

_defineProperty(ModalContent, "propTypes", {
  title: _propTypes.default.string,
  description: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\modal.component.js", {"../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modal\modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../ui/button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Modal extends _react.PureComponent {
  render() {
    const {
      children,
      headerText,
      onClose,
      onSubmit,
      submitType,
      submitText,
      submitDisabled,
      onCancel,
      cancelType,
      cancelText,
      contentClass,
      containerClass,
      hideFooter
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container', containerClass)
    }, headerText && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-text"
    }, headerText), /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-close",
      "data-testid": "modal-header-close",
      onClick: onClose
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container__content', contentClass)
    }, children), hideFooter ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__footer"
    }, onCancel && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: cancelType,
      onClick: onCancel,
      className: "modal-container__footer-button"
    }, cancelText), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: submitType,
      onClick: onSubmit,
      disabled: submitDisabled,
      className: "modal-container__footer-button"
    }, submitText)));
  }

}

exports.default = Modal;

_defineProperty(Modal, "propTypes", {
  children: _propTypes.default.node,
  contentClass: _propTypes.default.string,
  containerClass: _propTypes.default.string,
  // Header text
  headerText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  // Submit button (right button)
  onSubmit: _propTypes.default.func,
  submitType: _propTypes.default.string,
  submitText: _propTypes.default.string,
  submitDisabled: _propTypes.default.bool,
  hideFooter: _propTypes.default.bool,
  // Cancel button (left button)
  onCancel: _propTypes.default.func,
  cancelType: _propTypes.default.string,
  cancelText: _propTypes.default.string
});

_defineProperty(Modal, "defaultProps", {
  submitType: 'primary',
  cancelType: 'secondary'
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../helpers/utils/hardware":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/editable-label":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\editable-label\\index.js","../../../ui/qr-code":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\qr-code\\index.js","../account-modal-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-details-modal\account-details-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));

var _qrCode = _interopRequireDefault(require("../../../ui/qr-code"));

var _editableLabel = _interopRequireDefault(require("../../../ui/editable-label"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _util = require("../../../../helpers/utils/util");

var _hardware = require("../../../../helpers/utils/hardware");

var _metametrics = require("../../../../../shared/constants/metametrics");

var _routes = require("../../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AccountDetailsModal extends _react.Component {
  render() {
    const {
      selectedIdentity,
      chainId,
      showExportPrivateKeyModal,
      setAccountLabel,
      keyrings,
      rpcPrefs,
      accounts,
      history,
      hideModal,
      blockExplorerLinkText
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const keyring = keyrings.find(kr => {
      return kr.accounts.includes(address);
    });

    const getAccountsNames = (allAccounts, currentName) => {
      return Object.values(allAccounts).map(item => item.name).filter(itemName => itemName !== currentName);
    };

    let exportPrivateKeyFeatureEnabled = true; // This feature is disabled for hardware wallets

    if ((0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type)) {
      exportPrivateKeyFeatureEnabled = false;
    }

    const routeToAddBlockExplorerUrl = () => {
      hideModal();
      history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
    };

    const openBlockExplorer = () => {
      const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        event: _metametrics.EVENT_NAMES.EXTERNAL_LINK_CLICKED,
        properties: {
          link_type: _metametrics.EVENT.EXTERNAL_LINK_TYPES.ACCOUNT_TRACKER,
          location: 'Account Details Modal',
          url_domain: (0, _util.getURLHostName)(accountLink)
        }
      });
      global.platform.openTab({
        url: accountLink
      });
    };

    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "account-details-modal"
    }, /*#__PURE__*/_react.default.createElement(_editableLabel.default, {
      className: "account-details-modal__name",
      defaultValue: name,
      onSubmit: label => setAccountLabel(address, label),
      accountsNames: getAccountsNames(accounts, name)
    }), /*#__PURE__*/_react.default.createElement(_qrCode.default, {
      Qr: {
        data: address
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "account-details-modal__divider"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer
    }, this.context.t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [blockExplorerLinkText.secondPart])), exportPrivateKeyFeatureEnabled ? /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_SELECTED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY,
            location: 'Account Details Modal'
          }
        });
        showExportPrivateKeyModal();
      }
    }, this.context.t('exportPrivateKey')) : null);
  }

}

exports.default = AccountDetailsModal;

_defineProperty(AccountDetailsModal, "propTypes", {
  selectedIdentity: _propTypes.default.object,
  chainId: _propTypes.default.string,
  showExportPrivateKeyModal: _propTypes.default.func,
  setAccountLabel: _propTypes.default.func,
  keyrings: _propTypes.default.array,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.array,
  history: _propTypes.default.object,
  hideModal: _propTypes.default.func,
  blockExplorerLinkText: _propTypes.default.object
});

_defineProperty(AccountDetailsModal, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js", {"../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./account-details-modal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-details-modal\account-details-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../../store/actions");

var _selectors = require("../../../../selectors");

var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    keyrings: state.metamask.keyrings,
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
    accounts: (0, _selectors.getMetaMaskAccountsOrdered)(state),
    blockExplorerLinkText: (0, _selectors.getBlockExplorerLinkText)(state, true)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    showExportPrivateKeyModal: () => dispatch((0, _actions.showModal)({
      name: 'EXPORT_PRIVATE_KEY'
    })),
    setAccountLabel: (address, label) => dispatch((0, _actions.setAccountLabel)(address, label)),
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_accountDetailsModal.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\index.js", {"./account-details-modal.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-details-modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountDetailsModal.default;
  }
});

var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js", {"../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-modal-container\account-modal-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountModalContainer;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AccountModalContainer(props, context) {
  const {
    className,
    selectedIdentity,
    showBackButton,
    backButtonAction,
    hideModal,
    children
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(className, 'account-modal'),
    style: {
      borderRadius: '4px'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__container"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: selectedIdentity.address,
    diameter: 64
  })), showBackButton && /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__back",
    onClick: backButtonAction
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-left fa-lg"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "account-modal__back-text"
  }, context.t('back'))), /*#__PURE__*/_react.default.createElement("button", {
    className: "account-modal__close",
    onClick: hideModal
  }), children));
}

AccountModalContainer.contextTypes = {
  t: _propTypes.default.func
};
AccountModalContainer.defaultProps = {
  showBackButton: false,
  children: null,
  backButtonAction: undefined
};
AccountModalContainer.propTypes = {
  className: _propTypes.default.string,
  selectedIdentity: _propTypes.default.object.isRequired,
  showBackButton: _propTypes.default.bool,
  backButtonAction: _propTypes.default.func,
  hideModal: _propTypes.default.func.isRequired,
  children: _propTypes.default.node
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js", {"../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./account-modal-container.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-modal-container\account-modal-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _selectors = require("../../../../selectors");

var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToProps(state, ownProps) {
  return {
    selectedIdentity: ownProps.selectedIdentity || (0, _selectors.getSelectedIdentity)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_accountModalContainer.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js", {"./account-modal-container.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\account-modal-container\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountModalContainer.default;
  }
});

var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction-gas-fee\\cancel-transaction-gas-fee.component.js", {"../../../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\cancel-transaction\cancel-transaction-gas-fee\cancel-transaction-gas-fee.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../../user-preferenced-currency-display"));

var _common = require("../../../../../helpers/constants/common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CancelTransaction extends _react.PureComponent {
  render() {
    const {
      value
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction-gas-fee"
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "cancel-transaction-gas-fee__eth",
      value: value,
      type: _common.PRIMARY
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "cancel-transaction-gas-fee__fiat",
      value: value,
      type: _common.SECONDARY
    }));
  }

}

exports.default = CancelTransaction;

_defineProperty(CancelTransaction, "propTypes", {
  value: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction-gas-fee\\index.js", {"./cancel-transaction-gas-fee.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction-gas-fee\\cancel-transaction-gas-fee.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\cancel-transaction\cancel-transaction-gas-fee\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _cancelTransactionGasFee.default;
  }
});

var _cancelTransactionGasFee = _interopRequireDefault(require("./cancel-transaction-gas-fee.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction.component.js", {"../../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","./cancel-transaction-gas-fee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction-gas-fee\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\cancel-transaction\cancel-transaction.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireDefault(require("../../modal"));

var _transaction = require("../../../../../shared/constants/transaction");

var _cancelTransactionGasFee = _interopRequireDefault(require("./cancel-transaction-gas-fee"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CancelTransaction extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      busy: false
    });

    _defineProperty(this, "handleSubmit", async () => {
      const {
        createCancelTransaction,
        hideModal
      } = this.props;
      this.setState({
        busy: true
      });
      await createCancelTransaction();
      this.setState({
        busy: false
      }, () => hideModal());
    });

    _defineProperty(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }

  componentDidUpdate() {
    const {
      transactionStatus,
      showTransactionConfirmedModal
    } = this.props;

    if (transactionStatus !== _transaction.TRANSACTION_STATUSES.SUBMITTED) {
      showTransactionConfirmedModal();
    }
  }

  render() {
    const {
      t
    } = this.context;
    const {
      newGasFee
    } = this.props;
    const {
      busy
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: t('attemptToCancel'),
      onClose: this.handleCancel,
      onSubmit: this.handleSubmit,
      onCancel: this.handleCancel,
      submitText: t('yesLetsTry'),
      cancelText: t('nevermind'),
      submitDisabled: busy
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__title"
    }, t('cancellationGasFee')), /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__cancel-transaction-gas-fee-container"
    }, /*#__PURE__*/_react.default.createElement(_cancelTransactionGasFee.default, {
      value: newGasFee
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__description"
    }, t('attemptToCancelDescription'))));
  }

}

exports.default = CancelTransaction;

_defineProperty(CancelTransaction, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(CancelTransaction, "propTypes", {
  createCancelTransaction: _propTypes.default.func,
  hideModal: _propTypes.default.func,
  showTransactionConfirmedModal: _propTypes.default.func,
  transactionStatus: _propTypes.default.string,
  newGasFee: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./cancel-transaction.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\cancel-transaction\cancel-transaction.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _actions = require("../../../../store/actions");

var _cancelTransaction = _interopRequireDefault(require("./cancel-transaction.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    metamask
  } = state;
  const {
    transactionId,
    originalGasPrice,
    newGasFee,
    customGasSettings
  } = ownProps;
  const {
    currentNetworkTxList
  } = metamask;
  const transaction = currentNetworkTxList.find(({
    id
  }) => id === transactionId);
  const transactionStatus = transaction ? transaction.status : '';
  return {
    transactionId,
    transactionStatus,
    originalGasPrice,
    customGasSettings,
    newGasFee
  };
};

const mapDispatchToProps = dispatch => {
  return {
    createCancelTransaction: (txId, customGasSettings) => {
      return dispatch((0, _actions.createCancelTransaction)(txId, customGasSettings));
    },
    showTransactionConfirmedModal: () => dispatch((0, _actions.showModal)({
      name: 'TRANSACTION_CONFIRMED'
    }))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    transactionId,
    customGasSettings,
    ...restStateProps
  } = stateProps; // eslint-disable-next-line no-shadow

  const {
    createCancelTransaction,
    ...restDispatchProps
  } = dispatchProps;
  return { ...restStateProps,
    ...restDispatchProps,
    ...ownProps,
    createCancelTransaction: () => createCancelTransaction(transactionId, customGasSettings)
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_cancelTransaction.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\index.js", {"./cancel-transaction.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\cancel-transaction.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\cancel-transaction\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _cancelTransaction.default;
  }
});

var _cancelTransaction = _interopRequireDefault(require("./cancel-transaction.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js", {"../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-delete-network\confirm-delete-network.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireWildcard(require("../../modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmDeleteNetwork extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleDelete", () => {
      this.props.delRpcTarget(this.props.target).then(() => {
        this.props.onConfirm();
        this.props.hideModal();
      });
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleDelete,
      onCancel: () => this.props.hideModal(),
      submitText: t('delete'),
      cancelText: t('cancel'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: t('deleteNetwork'),
      description: t('deleteNetworkDescription')
    }));
  }

}

exports.default = ConfirmDeleteNetwork;

_defineProperty(ConfirmDeleteNetwork, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  delRpcTarget: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired,
  target: _propTypes.default.string.isRequired
});

_defineProperty(ConfirmDeleteNetwork, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-delete-network.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-delete-network\confirm-delete-network.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _actions = require("../../../../store/actions");

var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    delRpcTarget: target => dispatch((0, _actions.delRpcTarget)(target))
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmDeleteNetwork.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\index.js", {"./confirm-delete-network.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-delete-network\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDeleteNetwork.default;
  }
});

var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-remove-account\confirm-remove-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _modal = _interopRequireDefault(require("../../modal"));

var _util = require("../../../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _metametrics = require("../../../../../shared/constants/metametrics");

var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmRemoveAccount extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleRemove", () => {
      this.props.removeAccount(this.props.identity.address).then(() => this.props.hideModal());
    });

    _defineProperty(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }

  renderSelectedAccount() {
    const {
      t
    } = this.context;
    const {
      identity,
      rpcPrefs,
      chainId
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identity.address,
      diameter: 32
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('name')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, identity.name)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__address"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('publicAddress')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, (0, _util.addressSummary)(identity.address, 4, 4))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__link"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: () => {
        const accountLink = (0, _etherscanLink.getAccountLink)(identity.address, chainId, rpcPrefs);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.ACCOUNTS,
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Account Tracker',
            action: 'Remove Account',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView')
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-share-square",
      style: {
        color: 'var(--color-icon-muted)'
      },
      title: t('etherscanView')
    }))));
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: `${t('removeAccount')}?`,
      onClose: this.handleCancel,
      onSubmit: this.handleRemove,
      onCancel: this.handleCancel,
      submitText: t('remove'),
      cancelText: t('nevermind')
    }, /*#__PURE__*/_react.default.createElement("div", null, this.renderSelectedAccount(), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__description"
    }, t('removeAccountDescription'), /*#__PURE__*/_react.default.createElement("a", {
      className: "confirm-remove-account__link",
      rel: "noopener noreferrer",
      target: "_blank",
      href: _zendeskUrl.default.IMPORTED_ACCOUNTS
    }, t('learnMore')))));
  }

}

exports.default = ConfirmRemoveAccount;

_defineProperty(ConfirmRemoveAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeAccount: _propTypes.default.func.isRequired,
  identity: _propTypes.default.object.isRequired,
  chainId: _propTypes.default.string.isRequired,
  rpcPrefs: _propTypes.default.object.isRequired
});

_defineProperty(ConfirmRemoveAccount, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-remove-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-remove-account\confirm-remove-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _selectors = require("../../../../selectors");

var _actions = require("../../../../store/actions");

var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    removeAccount: address => dispatch((0, _actions.removeAccount)(address))
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmRemoveAccount.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\index.js", {"./confirm-remove-account.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-remove-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmRemoveAccount.default;
  }
});

var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js", {"../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-reset-account\confirm-reset-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireWildcard(require("../../modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmResetAccount extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleReset", () => {
      this.props.resetAccount().then(() => this.props.hideModal());
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleReset,
      onCancel: () => this.props.hideModal(),
      submitText: t('reset'),
      cancelText: t('nevermind'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: `${t('resetAccount')}?`,
      description: t('resetAccountDescription')
    }));
  }

}

exports.default = ConfirmResetAccount;

_defineProperty(ConfirmResetAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  resetAccount: _propTypes.default.func.isRequired
});

_defineProperty(ConfirmResetAccount, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./confirm-reset-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-reset-account\confirm-reset-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _actions = require("../../../../store/actions");

var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    resetAccount: () => dispatch((0, _actions.resetAccount)())
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmResetAccount.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\index.js", {"./confirm-reset-account.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\confirm-reset-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmResetAccount.default;
  }
});

var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../pages/send/send.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\send\\send.utils.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button/button.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","../../../ui/icon/icon-block-explorer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-block-explorer.js","../../../ui/icon/icon-copy":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-copy.js","../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../ui/tooltip/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../../ui/url-icon/url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\url-icon.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\contract-details-modal\contract-details-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContractDetailsModal;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _reactRedux = require("react-redux");

var _classnames = _interopRequireDefault(require("classnames"));

var _box = _interopRequireDefault(require("../../../ui/box"));

var _iconCopy = _interopRequireDefault(require("../../../ui/icon/icon-copy"));

var _iconBlockExplorer = _interopRequireDefault(require("../../../ui/icon/icon-block-explorer"));

var _button = _interopRequireDefault(require("../../../ui/button/button.component"));

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip/tooltip"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _send = require("../../../../pages/send/send.utils");

var _popover = _interopRequireDefault(require("../../../ui/popover"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");

var _urlIcon = _interopRequireDefault(require("../../../ui/url-icon/url-icon"));

var _selectors = require("../../../../selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ContractDetailsModal({
  onClose,
  tokenName,
  tokenAddress,
  toAddress,
  chainId,
  rpcPrefs,
  origin,
  siteImage
}) {
  var _addressBookEntry$dat, _addressBookEntry$dat2, _addressBookEntry$dat3, _addressBookEntry$dat4, _addressBookEntry$dat5, _addressBookEntry$dat6;

  const t = (0, _useI18nContext.useI18nContext)();
  const [copiedTokenAddress, handleCopyTokenAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const [copiedToAddress, handleCopyToAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const addressBookEntry = (0, _reactRedux.useSelector)(state => ({
    data: (0, _selectors.getAddressBookEntry)(state, toAddress)
  }));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "contract-details-modal"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 8,
    paddingLeft: 4,
    className: "contract-details-modal__content"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H5,
    display: _designSystem.DISPLAY.FLEX,
    boxProps: {
      marginTop: 0,
      marginBottom: 0
    }
  }, t('contractTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    boxProps: {
      marginTop: 2,
      marginBottom: 0
    }
  }, t('contractDescription')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, t('contractToken')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.SIZES.SM,
    borderStyle: _designSystem.BORDER_STYLE.SOLID,
    borderColor: _designSystem.COLORS.BORDER_DEFAULT,
    className: "contract-details-modal__content__contract"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "contract-details-modal__content__contract__identicon",
    address: tokenAddress,
    diameter: 24
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H5,
    marginTop: 4
  }, tokenName || (0, _send.ellipsify)(tokenAddress)), tokenName && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, (0, _send.ellipsify)(tokenAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_END,
    className: "contract-details-modal__content__contract__buttons"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginRight: 5
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "contract-details-modal__content__contract__buttons__copy",
    type: "link",
    onClick: () => {
      handleCopyTokenAddress(tokenAddress);
    }
  }, /*#__PURE__*/_react.default.createElement(_iconCopy.default, {
    color: "var(--color-icon-muted)"
  })))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 5,
    marginRight: 5
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "contract-details-modal__content__contract__buttons__block-explorer",
    type: "link",
    onClick: () => {
      var _rpcPrefs$blockExplor;

      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(tokenAddress, chainId, {
        blockExplorerUrl: (_rpcPrefs$blockExplor = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_iconBlockExplorer.default, {
    size: 16,
    color: "var(--color-icon-muted)"
  })))))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, t('contractRequestingSpendingCap')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.SIZES.SM,
    borderStyle: _designSystem.BORDER_STYLE.SOLID,
    borderColor: _designSystem.COLORS.BORDER_DEFAULT,
    className: "contract-details-modal__content__contract"
  }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    className: (0, _classnames.default)({
      'contract-details-modal__content__contract__identicon-for-unknown-contact': (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat = addressBookEntry.data) === null || _addressBookEntry$dat === void 0 ? void 0 : _addressBookEntry$dat.name) === undefined,
      'contract-details-modal__content__contract__identicon': (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat2 = addressBookEntry.data) === null || _addressBookEntry$dat2 === void 0 ? void 0 : _addressBookEntry$dat2.name) !== undefined
    }),
    fallbackClassName: (0, _classnames.default)({
      'contract-details-modal__content__contract__identicon-for-unknown-contact': (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat3 = addressBookEntry.data) === null || _addressBookEntry$dat3 === void 0 ? void 0 : _addressBookEntry$dat3.name) === undefined,
      'contract-details-modal__content__contract__identicon': (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat4 = addressBookEntry.data) === null || _addressBookEntry$dat4 === void 0 ? void 0 : _addressBookEntry$dat4.name) !== undefined
    }),
    name: origin,
    url: siteImage
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H5,
    marginTop: 4
  }, (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat5 = addressBookEntry.data) === null || _addressBookEntry$dat5 === void 0 ? void 0 : _addressBookEntry$dat5.name) || (0, _send.ellipsify)(toAddress)), (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat6 = addressBookEntry.data) === null || _addressBookEntry$dat6 === void 0 ? void 0 : _addressBookEntry$dat6.name) && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, (0, _send.ellipsify)(toAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_END,
    className: "contract-details-modal__content__contract__buttons"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginRight: 5
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedToAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "contract-details-modal__content__contract__buttons__copy",
    type: "link",
    onClick: () => {
      handleCopyToAddress(toAddress);
    }
  }, /*#__PURE__*/_react.default.createElement(_iconCopy.default, {
    color: "var(--color-icon-muted)"
  })))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 5,
    marginRight: 5
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "contract-details-modal__content__contract__buttons__block-explorer",
    type: "link",
    onClick: () => {
      var _rpcPrefs$blockExplor2;

      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(toAddress, chainId, {
        blockExplorerUrl: (_rpcPrefs$blockExplor2 = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor2 !== void 0 ? _rpcPrefs$blockExplor2 : null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_iconBlockExplorer.default, {
    size: 16,
    color: "var(--color-icon-muted)"
  }))))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: () => onClose()
  }, t('recoveryPhraseReminderConfirm'))));
}

ContractDetailsModal.propTypes = {
  /**
   * Function that should close the modal
   */
  onClose: _propTypes.default.func,

  /**
   * Name of the token that is waiting to be allowed
   */
  tokenName: _propTypes.default.string,

  /**
   * Address of the token that is waiting to be allowed
   */
  tokenAddress: _propTypes.default.string,

  /**
   * Contract address requesting spending cap
   */
  toAddress: _propTypes.default.string,

  /**
   * Current network chainId
   */
  chainId: _propTypes.default.string,

  /**
   * RPC prefs of the current network
   */
  rpcPrefs: _propTypes.default.object,

  /**
   * Dapp URL
   */
  origin: _propTypes.default.string,

  /**
   * Dapp image
   */
  siteImage: _propTypes.default.string
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js", {"../../../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\convert-token-to-nft-modal\convert-token-to-nft-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _modal = _interopRequireDefault(require("../../modal"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _routes = require("../../../../helpers/constants/routes");

var _metamask = require("../../../../ducks/metamask/metamask");

var _actions = require("../../../../store/actions");

var _stringUtils = require("../../../../../shared/modules/string-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ConvertTokenToNFTModal = ({
  hideModal,
  tokenAddress
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const allCollectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const tokenAddedAsNFT = allCollectibles.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: async () => {
      if (tokenAddedAsNFT) {
        await dispatch((0, _actions.ignoreTokens)({
          tokensToIgnore: tokenAddress,
          dontShowLoadingIndicator: true
        }));
        const {
          tokenId
        } = tokenAddedAsNFT;
        history.push({
          pathname: `${_routes.ASSET_ROUTE}/${tokenAddress}/${tokenId}`
        });
      } else {
        history.push({
          pathname: _routes.ADD_COLLECTIBLE_ROUTE,
          state: {
            tokenAddress
          }
        });
      }

      hideModal();
    },
    submitText: t('yes'),
    onCancel: () => hideModal(),
    cancelText: t('cancel')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "convert-token-to-nft-modal"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      marginTop: 2
    }
  }, tokenAddedAsNFT ? t('convertTokenToNFTExistDescription') : t('convertTokenToNFTDescription'))));
};

ConvertTokenToNFTModal.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  tokenAddress: _propTypes.default.string
};

var _default = (0, _withModalProps.default)(ConvertTokenToNFTModal);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\customize-nonce\customize-nonce.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireDefault(require("../../modal"));

var _textField = _interopRequireDefault(require("../../../ui/text-field"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CustomizeNonce = ({
  hideModal,
  customNonceValue,
  nextNonce,
  updateCustomNonce,
  getNextNonce
}) => {
  const [customNonce, setCustomNonce] = (0, _react.useState)('');
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: () => {
      if (customNonce === '') {
        updateCustomNonce(customNonceValue);
      } else {
        updateCustomNonce(customNonce);
      }

      getNextNonce();
      hideModal();
    },
    submitText: t('save'),
    onCancel: () => hideModal(),
    cancelText: t('cancel'),
    contentClass: "customize-nonce-modal-content",
    containerClass: "customize-nonce-modal-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__main-header"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "customize-nonce-modal__main-title",
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement("button", {
    className: "fas fa-times customize-nonce-modal__close",
    title: t('close'),
    onClick: hideModal
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, t('editNonceMessage'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__link",
    rel: "noopener noreferrer",
    target: "_blank",
    href: _zendeskUrl.default.CUSTOMIZE_NONCE
  }, t('learnMoreUpperCase')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      width: _designSystem.BLOCK_SIZES.FIVE_SIXTHS
    }
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.ONE_SIXTH
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__reset",
    onClick: () => {
      setCustomNonce(nextNonce);
    }
  }, t('reset')))), /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__input"
  }, /*#__PURE__*/_react.default.createElement(_textField.default, {
    type: "number",
    min: "0",
    placeholder: customNonceValue || typeof nextNonce === 'number' && nextNonce.toString(),
    onChange: e => {
      setCustomNonce(e.target.value);
    },
    fullWidth: true,
    margin: "dense",
    value: customNonce,
    id: "custom-nonce-id"
  })))));
};

CustomizeNonce.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  customNonceValue: _propTypes.default.string,
  nextNonce: _propTypes.default.number,
  updateCustomNonce: _propTypes.default.func,
  getNextNonce: _propTypes.default.func
};

var _default = (0, _withModalProps.default)(CustomizeNonce);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\index.js", {"./customize-nonce.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\customize-nonce\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _customizeNonce.default;
  }
});

var _customizeNonce = _interopRequireDefault(require("./customize-nonce.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js", {"../../../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\edit-approval-permission\edit-approval-permission.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _classnames = _interopRequireDefault(require("classnames"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _modal = _interopRequireDefault(require("../../modal"));

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _textField = _interopRequireDefault(require("../../../ui/text-field"));

var _transactionsControllerUtils = require("../../../../../shared/lib/transactions-controller-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const MAX_UNSIGNED_256_INT = new _bignumber.default(2).pow(256).minus(1).toString(10);

class EditApprovalPermission extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      // This is used as a TextField value, which should be a string.
      customSpendLimit: this.props.customTokenAmount || '',
      selectedOptionIsUnlimited: !this.props.customTokenAmount
    });
  }

  renderModalContent(error) {
    const {
      t
    } = this.context;
    const {
      hideModal,
      selectedIdentity,
      tokenAmount,
      tokenSymbol,
      tokenBalance,
      customTokenAmount,
      origin
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity || {};
    const {
      selectedOptionIsUnlimited
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__title"
    }, t('editPermission')), /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times fa-lg edit-approval-permission__header__close",
      onClick: () => hideModal()
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__account"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__name-and-balance-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__name"
    }, name), /*#__PURE__*/_react.default.createElement("div", null, t('balance')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__balance"
    }, `${Number(tokenBalance).toPrecision(9)} ${tokenSymbol}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__title"
    }, t('spendLimitPermission')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__description"
    }, t('allowWithdrawAndSpend', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: true
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': selectedOptionIsUnlimited
      })
    }, new _bignumber.default(tokenAmount).equals(new _bignumber.default(MAX_UNSIGNED_256_INT)) ? t('unlimited') : t('proposedApprovalLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('spendLimitRequestedBy', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-value"
    }, `${Number(tokenAmount)} ${tokenSymbol}`))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: false
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': !selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), !selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': !selectedOptionIsUnlimited
      })
    }, t('customSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('enterMaxSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      placeholder: `${Number(customTokenAmount || tokenAmount)} ${tokenSymbol}`,
      onChange: event => {
        this.setState({
          customSpendLimit: event.target.value
        });

        if (selectedOptionIsUnlimited) {
          this.setState({
            selectedOptionIsUnlimited: false
          });
        }
      },
      fullWidth: true,
      margin: "dense",
      value: this.state.customSpendLimit,
      error: error
    }))))));
  }

  validateSpendLimit() {
    const {
      t
    } = this.context;
    const {
      decimals,
      requiredMinimum
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;

    if (selectedOptionIsUnlimited || !customSpendLimit) {
      return undefined;
    }

    let customSpendLimitNumber;

    try {
      customSpendLimitNumber = new _bignumber.default(customSpendLimit);
    } catch (error) {
      _loglevel.default.debug(`Error converting '${customSpendLimit}' to BigNumber:`, error);

      return t('spendLimitInvalid');
    }

    if (customSpendLimitNumber.isNegative()) {
      return t('spendLimitInvalid');
    }

    const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(MAX_UNSIGNED_256_INT, decimals);

    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
      return t('spendLimitTooLarge');
    }

    if (requiredMinimum !== undefined && customSpendLimitNumber.lessThan(requiredMinimum)) {
      return t('spendLimitInsufficient');
    }

    return undefined;
  }

  render() {
    const {
      t
    } = this.context;
    const {
      setCustomAmount,
      hideModal,
      customTokenAmount
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    const error = this.validateSpendLimit();
    const disabled = Boolean(customSpendLimit === customTokenAmount && !selectedOptionIsUnlimited || error);
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: () => {
        setCustomAmount(selectedOptionIsUnlimited ? '' : customSpendLimit);
        hideModal();
      },
      submitText: t('save'),
      contentClass: "edit-approval-permission-modal-content",
      containerClass: "edit-approval-permission-modal-container",
      submitDisabled: disabled
    }, this.renderModalContent(error));
  }

}

exports.default = EditApprovalPermission;

_defineProperty(EditApprovalPermission, "propTypes", {
  decimals: _propTypes.default.number,
  hideModal: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object,
  tokenAmount: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenBalance: _propTypes.default.string,
  setCustomAmount: _propTypes.default.func,
  origin: _propTypes.default.string.isRequired,
  requiredMinimum: _propTypes.default.instanceOf(_bignumber.default)
});

_defineProperty(EditApprovalPermission, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./edit-approval-permission.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\edit-approval-permission\edit-approval-permission.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _selectors = require("../../../../selectors");

var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const modalStateProps = state.appState.modal.modalState.props || {};
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    ...modalStateProps
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_editApprovalPermission.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\index.js", {"./edit-approval-permission.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\edit-approval-permission\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editApprovalPermission.default;
  }
});

var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../account-modal-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\export-private-key-modal\export-private-key-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _loglevel = _interopRequireDefault(require("loglevel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

var _metametrics = require("../../../../../shared/constants/metametrics");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ExportPrivateKeyModal extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      password: '',
      privateKey: null,
      showWarning: true
    });

    _defineProperty(this, "exportAccountAndGetPrivateKey", (password, address) => {
      const {
        exportAccount
      } = this.props;
      exportAccount(password, address).then(privateKey => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_REVEALED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY
          }
        });
        this.setState({
          privateKey,
          showWarning: false
        });
      }).catch(e => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_FAILED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY,
            reason: 'incorrect_password'
          }
        });

        _loglevel.default.error(e);
      });
    });
  }

  componentWillUnmount() {
    this.props.clearAccountDetails();
    this.props.hideWarning();
  }

  renderPasswordLabel(privateKey) {
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__password-label"
    }, privateKey ? this.context.t('copyPrivateKey') : this.context.t('typePassword'));
  }

  renderPasswordInput(privateKey) {
    const plainKey = privateKey && (0, _hexstringUtils.stripHexPrefix)(privateKey);

    if (!privateKey) {
      return /*#__PURE__*/_react.default.createElement("input", {
        type: "password",
        className: "export-private-key-modal__password-input",
        onChange: event => this.setState({
          password: event.target.value
        })
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__private-key-display",
      onClick: () => {
        (0, _copyToClipboard.default)(plainKey);
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_COPIED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY,
            copy_method: 'clipboard'
          }
        });
      }
    }, plainKey);
  }

  renderButtons(privateKey, address, hideModal) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__buttons"
    }, !privateKey && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "export-private-key-modal__button export-private-key-modal__button--cancel",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_CANCELED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY
          }
        });
        hideModal();
      }
    }, this.context.t('cancel')), privateKey ? /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: () => {
        hideModal();
      },
      type: "primary",
      large: true,
      className: "export-private-key-modal__button"
    }, this.context.t('done')) : /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.KEYS,
          event: _metametrics.EVENT_NAMES.KEY_EXPORT_REQUESTED,
          properties: {
            key_type: _metametrics.EVENT.KEY_TYPES.PKEY
          }
        });
        this.exportAccountAndGetPrivateKey(this.state.password, address);
      },
      type: "primary",
      large: true,
      className: "export-private-key-modal__button",
      disabled: !this.state.password
    }, this.context.t('confirm')));
  }

  render() {
    const {
      selectedIdentity,
      warning,
      showAccountDetailModal,
      hideModal,
      previousModalState
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const {
      privateKey,
      showWarning
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "export-private-key-modal",
      selectedIdentity: selectedIdentity,
      showBackButton: previousModalState === 'ACCOUNT_DETAILS',
      backButtonAction: () => showAccountDetailModal()
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__account-name"
    }, name), /*#__PURE__*/_react.default.createElement("div", {
      className: "ellip-address-wrapper"
    }, (0, _hexstringUtils.toChecksumHexAddress)(address)), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__divider"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__body-title"
    }, this.context.t('showPrivateKeys')), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__password"
    }, this.renderPasswordLabel(privateKey), this.renderPasswordInput(privateKey), showWarning && warning ? /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__password--error"
    }, warning) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__password--warning"
    }, this.context.t('privateKeyWarning')), this.renderButtons(privateKey, address, hideModal));
  }

}

exports.default = ExportPrivateKeyModal;

_defineProperty(ExportPrivateKeyModal, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(ExportPrivateKeyModal, "defaultProps", {
  warning: null,
  previousModalState: null
});

_defineProperty(ExportPrivateKeyModal, "propTypes", {
  exportAccount: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object.isRequired,
  warning: _propTypes.default.node,
  showAccountDetailModal: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  clearAccountDetails: _propTypes.default.func.isRequired,
  previousModalState: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js", {"../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./export-private-key-modal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\export-private-key-modal\export-private-key-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _selectors = require("../../../../selectors");

var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToPropsFactory() {
  let selectedIdentity = null;
  return function mapStateToProps(state) {
    // We should **not** change the identity displayed here even if it changes from underneath us.
    // If we do, we will be showing the user one private key and a **different** address and name.
    // Note that the selected identity **will** change from underneath us when we unlock the keyring
    // which is the expected behavior that we are side-stepping.
    selectedIdentity = selectedIdentity || (0, _selectors.getSelectedIdentity)(state);
    return {
      warning: state.appState.warning,
      privateKey: state.appState.accountDetail.privateKey,
      selectedIdentity,
      previousModalState: state.appState.modal.previousModalState.name
    };
  };
}

function mapDispatchToProps(dispatch) {
  return {
    exportAccount: (password, address) => {
      return dispatch((0, _actions.exportAccount)(password, address)).then(res => {
        dispatch((0, _actions.hideWarning)());
        return res;
      });
    },
    showAccountDetailModal: () => dispatch((0, _actions.showModal)({
      name: 'ACCOUNT_DETAILS'
    })),
    hideModal: () => dispatch((0, _actions.hideModal)()),
    hideWarning: () => dispatch((0, _actions.hideWarning)()),
    clearAccountDetails: () => dispatch((0, _actions.clearAccountDetails)())
  };
}

var _default = (0, _reactRedux.connect)(mapStateToPropsFactory, mapDispatchToProps)(_exportPrivateKeyModal.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\index.js", {"./export-private-key-modal.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\export-private-key-modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _exportPrivateKeyModal.default;
  }
});

var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\fade-modal.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\fade-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let index = 0;
let extraSheet;

const insertRule = css => {
  if (!extraSheet) {
    // First time, create an extra stylesheet for adding rules
    extraSheet = document.createElement('style');
    document.getElementsByTagName('head')[0].appendChild(extraSheet); // Keep reference to actual StyleSheet object (`styleSheet` for IE < 9)

    extraSheet = extraSheet.sheet || extraSheet.styleSheet;
  }

  extraSheet.insertRule(css, (extraSheet.cssRules || extraSheet.rules).length);
  return extraSheet;
};

const insertKeyframesRule = keyframes => {
  // random name
  // eslint-disable-next-line no-plusplus
  const name = `anim_${++index}${Number(new Date())}`;
  let css = `@keyframes ${name} {`;
  Object.keys(keyframes).forEach(key => {
    css += `${key} {`;
    Object.keys(keyframes[key]).forEach(property => {
      const part = `:${keyframes[key][property]};`;
      css += property + part;
    });
    css += '}';
  });
  css += '}';
  insertRule(css);
  return name;
};

const animation = {
  show: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  hide: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  showContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 1
    }
  }),
  hideContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 1
    },
    '100%': {
      opacity: 0
    }
  }),
  showBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 0.9
    }
  }),
  hideBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0.9
    },
    '100%': {
      opacity: 0
    }
  })
};
const endEvents = ['transitionend', 'animationend'];

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

const removeEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    return;
  }

  endEvents.forEach(function (endEvent) {
    removeEventListener(node, endEvent, eventListener);
  });
};

const addEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    // If CSS transitions are not supported, trigger an "end animation"
    // event immediately.
    window.setTimeout(eventListener, 0);
    return;
  }

  endEvents.forEach(function (endEvent) {
    addEventListener(node, endEvent, eventListener);
  });
};

class FadeModal extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "content", null);

    _defineProperty(this, "state", {
      willHide: true,
      hidden: true
    });

    _defineProperty(this, "addTransitionListener", (node, handle) => {
      if (node) {
        const endListener = function (e) {
          if (e && e.target !== node) {
            return;
          }

          removeEndEventListener(node, endListener);
          handle();
        };

        addEndEventListener(node, endListener);
      }
    });

    _defineProperty(this, "handleBackdropClick", () => {
      if (this.props.closeOnClick) {
        this.hide();
      }
    });

    _defineProperty(this, "hasHidden", () => {
      return this.state.hidden;
    });

    _defineProperty(this, "leave", () => {
      this.setState({
        hidden: true
      });
      this.props.onHide(this.state.hideSource);
    });

    _defineProperty(this, "enter", () => {
      this.props.onShow();
    });

    _defineProperty(this, "show", () => {
      if (!this.state.hidden) {
        return;
      }

      this.setState({
        willHide: false,
        hidden: false
      });
      setTimeout(function () {
        this.addTransitionListener(this.content, this.enter);
      }.bind(this), 0);
    });

    _defineProperty(this, "hide", () => {
      if (this.hasHidden()) {
        return;
      }

      this.setState({
        willHide: true
      });
    });

    _defineProperty(this, "listenKeyboard", event => {
      if (typeof this.props.keyboard === 'function') {
        this.props.keyboard(event);
      } else {
        this.closeOnEsc(event);
      }
    });

    _defineProperty(this, "closeOnEsc", event => {
      if (this.props.keyboard && (event.key === 'Escape' || event.keyCode === 27)) {
        this.hide();
      }
    });

    _defineProperty(this, "UNSAFE_componentDidMount", () => {
      window.addEventListener('keydown', this.listenKeyboard, true);
    });

    _defineProperty(this, "UNSAFE_componentWillUnmount", () => {
      window.removeEventListener('keydown', this.listenKeyboard, true);
    });
  }

  render() {
    if (this.state.hidden) {
      return null;
    }

    const {
      willHide
    } = this.state;
    const {
      modalStyle
    } = this.props;
    const backdropStyle = {
      animationName: willHide ? animation.hideBackdropAnimation : animation.showBackdropAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.backdropStyle
    };
    const contentStyle = {
      animationDuration: (willHide ? animation.hide : animation.show).animationDuration,
      animationName: willHide ? animation.hideContentAnimation : animation.showContentAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.contentStyle
    };
    const backdrop = this.props.backdrop ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__backdrop",
      style: backdropStyle,
      onClick: this.props.closeOnClick ? this.handleBackdropClick : null
    }) : undefined;

    if (willHide) {
      this.addTransitionListener(this.content, this.leave);
    }

    return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal",
      style: modalStyle
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__content",
      ref: el => this.content = el,
      tabIndex: "-1",
      style: contentStyle
    }, this.props.children)), backdrop);
  }

}

_defineProperty(FadeModal, "propTypes", {
  backdrop: _propTypes.default.bool,
  backdropStyle: _propTypes.default.object,
  closeOnClick: _propTypes.default.bool,
  contentStyle: _propTypes.default.object,
  keyboard: _propTypes.default.bool,
  modalStyle: _propTypes.default.object,
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  children: _propTypes.default.node
});

_defineProperty(FadeModal, "defaultProps", {
  onShow: () => undefined,
  onHide: () => undefined,
  keyboard: true,
  backdrop: true,
  closeOnClick: true,
  modalStyle: {},
  backdropStyle: {},
  contentStyle: {},
  children: []
});

var _default = FadeModal;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js", {"../../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\hide-token-confirmation-modal\hide-token-confirmation-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../../store/actions"));

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _routes = require("../../../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function mapStateToProps(state) {
  return {
    token: state.appState.modal.modalState.props.token,
    history: state.appState.modal.modalState.props.history
  };
}

function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    hideToken: address => {
      dispatch(actions.ignoreTokens({
        tokensToIgnore: address
      })).then(() => {
        dispatch(actions.hideModal());
      });
    }
  };
}

class HideTokenConfirmationModal extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {});
  }

  render() {
    const {
      token,
      hideToken,
      hideModal,
      history
    } = this.props;
    const {
      symbol,
      address,
      image
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__title"
    }, this.context.t('hideTokenPrompt')), /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "hide-token-confirmation__identicon",
      diameter: 45,
      address: address,
      image: image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__copy"
    }, this.context.t('readdToken')), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__cancel",
      onClick: () => hideModal()
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__hide",
      onClick: () => {
        hideToken(address);
        history.push(_routes.DEFAULT_ROUTE);
      }
    }, this.context.t('hide')))));
  }

}

_defineProperty(HideTokenConfirmationModal, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(HideTokenConfirmationModal, "propTypes", {
  hideToken: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  token: _propTypes.default.shape({
    symbol: _propTypes.default.string,
    address: _propTypes.default.string,
    image: _propTypes.default.string
  }),
  history: _propTypes.default.object
});

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(HideTokenConfirmationModal);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js", {"./hide-token-confirmation-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\hide-token-confirmation-modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _hideTokenConfirmationModal.default;
  }
});

var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\index.js", {"./modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\modal.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});

var _modal = _interopRequireDefault(require("./modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\index.js", {"./metametrics-opt-in-modal.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\metametrics-opt-in-modal.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\metametrics-opt-in-modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metametricsOptInModal.default;
  }
});

var _metametricsOptInModal = _interopRequireDefault(require("./metametrics-opt-in-modal.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\metametrics-opt-in-modal.component.js", {"../../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../ui/metafox-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","../../../ui/page-container/page-container-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\metametrics-opt-in-modal\metametrics-opt-in-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _metafoxLogo = _interopRequireDefault(require("../../../ui/metafox-logo"));

var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer"));

var _metametrics = require("../../../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MetaMetricsOptInModal extends _react.Component {
  render() {
    const {
      trackEvent,
      t
    } = this.context;
    const {
      setParticipateInMetaMetrics,
      hideModal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in metametrics-opt-in-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__main"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__content"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body-graphic"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/metrics-chart.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__title"
    }, t('metametricsHelpImproveMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsOptInDescription')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsCommitmentsIntro')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__committments"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsAllowOptOut'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsSendAnonymizedEvents'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row metametrics-opt-in__break-row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectKeysEtc', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectKeys"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectIP', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectIP"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverSellDataForProfit', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverSellData"
    }, t('metametricsCommitmentsBoldNever'))]))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__bottom-text"
    }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
      key: "metametrics-bottom-text-wrapper",
      href: "https://metamask.io/privacy.html",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('gdprMessagePrivacyPolicy'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__footer"
    }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setParticipateInMetaMetrics(false).then(() => {
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
            event: _metametrics.EVENT_NAMES.METRICS_OPT_OUT,
            properties: {
              action: 'Metrics Option',
              legacy_event: true
            }
          }, {
            isOptIn: true,
            excludeMetaMetricsId: true
          });
          hideModal();
        });
      },
      cancelText: t('noThanks'),
      hideCancel: false,
      onSubmit: () => {
        setParticipateInMetaMetrics(true).then(() => {
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.ONBOARDING,
            event: _metametrics.EVENT_NAMES.METRICS_OPT_IN,
            properties: {
              action: 'Metrics Option',
              legacy_event: true
            }
          }, {
            isOptIn: true
          });
          hideModal();
        });
      },
      submitText: t('affirmAgree'),
      disabled: false
    }))));
  }

}

exports.default = MetaMetricsOptInModal;

_defineProperty(MetaMetricsOptInModal, "propTypes", {
  setParticipateInMetaMetrics: _propTypes.default.func,
  hideModal: _propTypes.default.func
});

_defineProperty(MetaMetricsOptInModal, "contextTypes", {
  trackEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\metametrics-opt-in-modal.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./metametrics-opt-in-modal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\metametrics-opt-in-modal.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\metametrics-opt-in-modal\metametrics-opt-in-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _actions = require("../../../../store/actions");

var _metametricsOptInModal = _interopRequireDefault(require("./metametrics-opt-in-modal.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (_, ownProps) => {
  const {
    unapprovedTxCount
  } = ownProps;
  return {
    unapprovedTxCount
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val))
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_metametricsOptInModal.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\modal.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../helpers/utils/is-mobile-view":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\is-mobile-view.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./account-details-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\index.js","./cancel-transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\cancel-transaction\\index.js","./confirm-delete-network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\index.js","./confirm-remove-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\index.js","./confirm-reset-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\index.js","./convert-token-to-nft-modal/convert-token-to-nft-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js","./customize-nonce":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\index.js","./edit-approval-permission":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\index.js","./export-private-key-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\index.js","./fade-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\fade-modal.js","./hide-token-confirmation-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js","./metametrics-opt-in-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\index.js","./new-account-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\index.js","./qr-scanner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\index.js","./reject-transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\index.js","./transaction-confirmed":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _isMobileView = _interopRequireDefault(require("../../../helpers/utils/is-mobile-view"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal"));

var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal"));

var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));

var _qrScanner = _interopRequireDefault(require("./qr-scanner"));

var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account"));

var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account"));

var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed"));

var _cancelTransaction = _interopRequireDefault(require("./cancel-transaction"));

var _fadeModal = _interopRequireDefault(require("./fade-modal"));

var _metametricsOptInModal = _interopRequireDefault(require("./metametrics-opt-in-modal"));

var _rejectTransactions = _interopRequireDefault(require("./reject-transactions"));

var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network"));

var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission"));

var _newAccountModal = _interopRequireDefault(require("./new-account-modal"));

var _customizeNonce = _interopRequireDefault(require("./customize-nonce"));

var _convertTokenToNftModal = _interopRequireDefault(require("./convert-token-to-nft-modal/convert-token-to-nft-modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const modalContainerBaseStyle = {
  transform: 'translate3d(-50%, 0, 0px)',
  border: '1px solid var(--color-border-default)',
  borderRadius: '8px',
  backgroundColor: 'var(--color-background-default)',
  boxShadow: 'var(--shadow-size-sm) var(--color-shadow-default)'
};
const modalContainerLaptopStyle = { ...modalContainerBaseStyle,
  width: '344px',
  top: '15%'
};
const modalContainerMobileStyle = { ...modalContainerBaseStyle,
  width: '309px',
  top: '12.5%'
};
const accountModalStyle = {
  mobileModalStyle: {
    width: '95%',
    // top: isPopupOrNotification() === 'popup' ? '52vh' : '36.5vh',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  laptopModalStyle: {
    width: '335px',
    // top: 'calc(33% + 45px)',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  contentStyle: {
    borderRadius: '4px'
  }
};
const MODALS = {
  NEW_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_newAccountModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    laptopModalStyle: {
      width: '375px',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    contentStyle: {
      borderRadius: '10px'
    }
  },
  ACCOUNT_DETAILS: {
    contents: /*#__PURE__*/_react.default.createElement(_accountDetailsModal.default, null),
    ...accountModalStyle
  },
  EXPORT_PRIVATE_KEY: {
    contents: /*#__PURE__*/_react.default.createElement(_exportPrivateKeyModal.default, null),
    ...accountModalStyle
  },
  HIDE_TOKEN_CONFIRMATION: {
    contents: /*#__PURE__*/_react.default.createElement(_hideTokenConfirmationModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '52vh' : '36.5vh'
    },
    laptopModalStyle: {
      width: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '357px' : '449px',
      top: 'calc(33% + 45px)',
      paddingLeft: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null,
      paddingRight: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null
    }
  },
  METAMETRICS_OPT_IN_MODAL: {
    contents: /*#__PURE__*/_react.default.createElement(_metametricsOptInModal.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle,
      width: '100%',
      height: '100%',
      top: '0px'
    },
    laptopModalStyle: { ...modalContainerLaptopStyle,
      top: '10%'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_RESET_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmResetAccount.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_REMOVE_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmRemoveAccount.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONVERT_TOKEN_TO_NFT: {
    contents: /*#__PURE__*/_react.default.createElement(_convertTokenToNftModal.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_DELETE_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmDeleteNetwork.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  EDIT_APPROVAL_PERMISSION: {
    contents: /*#__PURE__*/_react.default.createElement(_editApprovalPermission.default, null),
    mobileModalStyle: {
      width: '95vw',
      height: '100vh',
      top: '50px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  TRANSACTION_CONFIRMED: {
    disableBackdropClick: true,
    contents: /*#__PURE__*/_react.default.createElement(_transactionConfirmed.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  QR_SCANNER: {
    contents: /*#__PURE__*/_react.default.createElement(_qrScanner.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CANCEL_TRANSACTION: {
    contents: /*#__PURE__*/_react.default.createElement(_cancelTransaction.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  REJECT_TRANSACTIONS: {
    contents: /*#__PURE__*/_react.default.createElement(_rejectTransactions.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CUSTOMIZE_NONCE: {
    contents: /*#__PURE__*/_react.default.createElement(_customizeNonce.default, null),
    mobileModalStyle: { ...modalContainerMobileStyle
    },
    laptopModalStyle: { ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  DEFAULT: {
    contents: [],
    mobileModalStyle: {},
    laptopModalStyle: {}
  }
};
const BACKDROPSTYLE = {
  backgroundColor: 'var(--color-overlay-default)'
};

function mapStateToProps(state) {
  return {
    active: state.appState.modal.open,
    modalState: state.appState.modal.modalState
  };
}

function mapDispatchToProps(dispatch) {
  return {
    hideModal: customOnHideOpts => {
      dispatch(actions.hideModal());

      if (customOnHideOpts && customOnHideOpts.action) {
        dispatch(customOnHideOpts.action(...customOnHideOpts.args));
      }
    },
    hideWarning: () => {
      dispatch(actions.hideWarning());
    }
  };
}

class Modal extends _react.Component {
  hide() {
    this.modalRef.hide();
  }

  show() {
    this.modalRef.show();
  }

  UNSAFE_componentWillReceiveProps(nextProps, _) {
    if (nextProps.active) {
      this.show();
    } else if (this.props.active) {
      this.hide();
    }
  }

  render() {
    const modal = MODALS[this.props.modalState.name || 'DEFAULT'];
    const {
      contents: children,
      disableBackdropClick = false
    } = modal;
    const modalStyle = modal[(0, _isMobileView.default)() ? 'mobileModalStyle' : 'laptopModalStyle'];
    const contentStyle = modal.contentStyle || {};
    return /*#__PURE__*/_react.default.createElement(_fadeModal.default, {
      keyboard: false,
      onHide: () => {
        if (modal.onHide) {
          modal.onHide({
            hideWarning: this.props.hideWarning
          });
        }

        this.props.hideModal(modal.customOnHideOpts);
      },
      ref: ref => {
        this.modalRef = ref;
      },
      modalStyle: modalStyle,
      contentStyle: contentStyle,
      backdropStyle: BACKDROPSTYLE,
      closeOnClick: !disableBackdropClick
    }, children);
  }

}

_defineProperty(Modal, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  modalState: _propTypes.default.object.isRequired
});

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Modal);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\index.js", {"./new-account-modal.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\new-account-modal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _newAccountModal.default;
  }
});

var _newAccountModal = _interopRequireDefault(require("./new-account-modal.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js", {"../../../ui/button/button.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\new-account-modal\new-account-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../ui/button/button.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NewAccountModal extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      alias: this.context.t('newAccountNumberName', [this.props.newAccountNumber])
    });

    _defineProperty(this, "onChange", e => {
      this.setState({
        alias: e.target.value
      });
    });

    _defineProperty(this, "onSubmit", () => {
      this.props.onSave(this.state.alias).then(this.props.hideModal);
    });

    _defineProperty(this, "onKeyPress", e => {
      if (e.key === 'Enter' && this.state.alias) {
        this.onSubmit();
      }
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content__header"
    }, t('newAccount'), /*#__PURE__*/_react.default.createElement("button", {
      className: "fas fa-times new-account-modal__content__header-close",
      title: t('close'),
      onClick: this.props.hideModal
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__input-label"
    }, t('accountName')), /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "new-account-modal__input",
      onChange: this.onChange,
      onKeyPress: this.onKeyPress,
      value: this.state.alias,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: this.props.hideModal
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.onSubmit,
      disabled: !this.state.alias
    }, t('save'))));
  }

}

exports.default = NewAccountModal;

_defineProperty(NewAccountModal, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(NewAccountModal, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  newAccountNumber: _propTypes.default.number.isRequired,
  onSave: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js", {"../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./new-account-modal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\new-account-modal\new-account-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../../store/actions"));

var _newAccountModal = _interopRequireDefault(require("./new-account-modal.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function mapStateToProps(state) {
  return { ...(state.appState.modal.modalState.props || {})
  };
}

function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    createAccount: newAccountName => {
      return dispatch(actions.addNewAccount()).then(newAccountAddress => {
        if (newAccountName) {
          dispatch(actions.setAccountLabel(newAccountAddress, newAccountName));
        }

        return newAccountAddress;
      });
    }
  };
}

function mergeProps(stateProps, dispatchProps) {
  const {
    onCreateNewAccount
  } = stateProps;
  const {
    createAccount
  } = dispatchProps;
  return { ...stateProps,
    ...dispatchProps,
    onSave: newAccountName => {
      return createAccount(newAccountName).then(newAccountAddress => onCreateNewAccount(newAccountAddress));
    }
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_newAccountModal.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\index.js", {"./nickname-popovers.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\nickname-popovers\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nicknamePopovers.default;
  }
});

var _nicknamePopovers = _interopRequireDefault(require("./nickname-popovers.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js", {"../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../../ui/nickname-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\nickname-popover\\index.js","../../../ui/update-nickname-popover/update-nickname-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\update-nickname-popover\\update-nickname-popover.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\nickname-popovers\nickname-popovers.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _actions = require("../../../../store/actions");

var _selectors = require("../../../../selectors");

var _nicknamePopover = _interopRequireDefault(require("../../../ui/nickname-popover"));

var _updateNicknamePopover = _interopRequireDefault(require("../../../ui/update-nickname-popover/update-nickname-popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SHOW_NICKNAME_POPOVER = 'SHOW_NICKNAME_POPOVER';
const ADD_NICKNAME_POPOVER = 'ADD_NICKNAME_POPOVER';

const NicknamePopovers = ({
  address,
  onClose
}) => {
  var _rpcPrefs$blockExplor;

  const dispatch = (0, _reactRedux.useDispatch)();
  const [popoverToDisplay, setPopoverToDisplay] = (0, _react.useState)(SHOW_NICKNAME_POPOVER);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const addressBookEntryObject = addressBook.find(entry => entry.address === address);
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const explorerLink = (0, _etherscanLink.getAccountLink)(address, chainId, {
    blockExplorerUrl: (_rpcPrefs$blockExplor = rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : null
  }, null);

  if (popoverToDisplay === ADD_NICKNAME_POPOVER) {
    return /*#__PURE__*/_react.default.createElement(_updateNicknamePopover.default, {
      address: address,
      nickname: recipientNickname || null,
      memo: (addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.memo) || null,
      onClose: () => setPopoverToDisplay(SHOW_NICKNAME_POPOVER),
      onAdd: (recipient, nickname, memo) => dispatch((0, _actions.addToAddressBook)(recipient, nickname, memo))
    });
  } // SHOW_NICKNAME_POPOVER case


  return /*#__PURE__*/_react.default.createElement(_nicknamePopover.default, {
    address: address,
    nickname: recipientNickname || null,
    onClose: onClose,
    onAdd: () => setPopoverToDisplay(ADD_NICKNAME_POPOVER),
    explorerLink: explorerLink
  });
};

NicknamePopovers.propTypes = {
  address: _propTypes.default.string,
  onClose: _propTypes.default.func
};
var _default = NicknamePopovers;
exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\index.js", {"./qr-scanner.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\qr-scanner\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _qrScanner = _interopRequireDefault(require("./qr-scanner.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _qrScanner.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js", {"../../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../helpers/utils/webcam-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js","../../../ui/page-container/page-container-footer/page-container-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","../../../ui/spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","@zxing/library":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\qr-scanner\qr-scanner.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _library = require("@zxing/library");

var _util = require("../../../../../app/scripts/lib/util");

var _app = require("../../../../../shared/constants/app");

var _time = require("../../../../../shared/constants/time");

var _spinner = _interopRequireDefault(require("../../../ui/spinner"));

var _webcamUtils = _interopRequireDefault(require("../../../../helpers/utils/webcam-utils"));

var _util2 = require("../../../../helpers/utils/util");

var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer/page-container-footer.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};

class QrScanner extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "checkEnvironment", async () => {
      try {
        const {
          environmentReady
        } = await _webcamUtils.default.checkStatus();

        if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
          const currentUrl = (0, _util2.getURL)(window.location.href);
          const currentHash = currentUrl === null || currentUrl === void 0 ? void 0 : currentUrl.hash;
          const currentRoute = currentHash ? currentHash.substring(1) : null;
          global.platform.openExtensionInBrowser(currentRoute);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      } // initial attempt is required to trigger permission prompt


      this.initCamera();
    });

    _defineProperty(this, "checkPermissions", async () => {
      try {
        const {
          permissions
        } = await _webcamUtils.default.checkStatus();

        if (permissions) {
          // Let the video stream load first...
          await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));

          if (!this.mounted) {
            return;
          }

          this.setState({
            ready: READY_STATE.READY
          });
        } else if (this.mounted) {
          // Keep checking for permissions
          this.permissionChecker = setTimeout(this.checkPermissions, _time.SECOND);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
    });

    _defineProperty(this, "initCamera", async () => {
      // The `decodeFromInputVideoDevice` call prompts the browser to show
      // the user the camera permission request.  We must then call it again
      // once we receive permission so that the video displays.
      // It's important to prevent this codeReader from being created twice;
      // Firefox otherwise starts 2 video streams, one of which cannot be stopped
      if (!this.codeReader) {
        this.codeReader = new _library.BrowserQRCodeReader();
      }

      try {
        await this.codeReader.getVideoInputDevices();
        this.checkPermissions();
        const content = await this.codeReader.decodeFromInputVideoDevice(undefined, 'video');
        const result = this.parseContent(content.text);

        if (!this.mounted) {
          return;
        } else if (result.type === 'unknown') {
          this.setState({
            error: new Error(this.context.t('unknownQrCode'))
          });
        } else {
          this.props.qrCodeDetected(result);
          this.stopAndClose();
        }
      } catch (error) {
        if (!this.mounted) {
          return;
        }

        if (error.name === 'NotAllowedError') {
          _loglevel.default.info(`Permission denied: '${error}'`);

          this.setState({
            ready: READY_STATE.NEED_TO_ALLOW_ACCESS
          });
        } else {
          this.setState({
            error
          });
        }
      }
    });

    _defineProperty(this, "stopAndClose", () => {
      if (this.codeReader) {
        this.teardownCodeReader();
      }

      this.props.hideModal();
    });

    _defineProperty(this, "tryAgain", () => {
      clearTimeout(this.permissionChecker);

      if (this.codeReader) {
        this.teardownCodeReader();
      }

      this.setState(this.getInitialState(), () => {
        this.checkEnvironment();
      });
    });

    this.state = this.getInitialState();
    this.codeReader = null;
    this.permissionChecker = null;
    this.mounted = false; // Clear pre-existing qr code data before scanning

    this.props.qrCodeDetected(null);
  }

  componentDidMount() {
    this.mounted = true;
    this.checkEnvironment();
  }

  componentDidUpdate(_, prevState) {
    const {
      ready
    } = this.state;

    if (prevState.ready !== ready) {
      if (ready === READY_STATE.READY) {
        this.initCamera();
      } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
        this.checkPermissions();
      }
    }
  }

  getInitialState() {
    return {
      ready: READY_STATE.ACCESSING_CAMERA,
      error: null
    };
  }

  componentWillUnmount() {
    this.mounted = false;
    clearTimeout(this.permissionChecker);
    this.teardownCodeReader();
  }

  teardownCodeReader() {
    if (this.codeReader) {
      this.codeReader.reset();
      this.codeReader.stop();
      this.codeReader = null;
    }
  }

  parseContent(content) {
    let type = 'unknown';
    let values = {}; // Here we could add more cases
    // To parse other type of links
    // For ex. EIP-681 (https://eips.ethereum.org/EIPS/eip-681)
    // Ethereum address links - fox ex. ethereum:0x.....1111

    if (content.split('ethereum:').length > 1) {
      type = 'address';
      values = {
        address: content.split('ethereum:')[1]
      }; // Regular ethereum addresses - fox ex. 0x.....1111
    } else if (content.substring(0, 2).toLowerCase() === '0x') {
      type = 'address';
      values = {
        address: content
      };
    }

    return {
      type,
      values
    };
  }

  renderError() {
    const {
      t
    } = this.context;
    const {
      error
    } = this.state;
    let title, msg;

    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      msg = t('unknownQrCode');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: this.stopAndClose,
      onSubmit: this.tryAgain,
      cancelText: t('cancel'),
      submitText: t('tryAgain')
    }));
  }

  renderVideo() {
    const {
      t
    } = this.context;
    const {
      ready
    } = this.state;
    let message;

    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('scanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, `${t('scanQrCode')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content__video-wrapper"
    }, /*#__PURE__*/_react.default.createElement("video", {
      id: "video",
      style: {
        display: ready === READY_STATE.READY ? 'block' : 'none'
      }
    }), ready === READY_STATE.READY ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-warning-default)"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  }

  render() {
    const {
      error
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__close",
      onClick: this.stopAndClose
    }), error ? this.renderError() : this.renderVideo());
  }

}

exports.default = QrScanner;

_defineProperty(QrScanner, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  qrCodeDetected: _propTypes.default.func.isRequired
});

_defineProperty(QrScanner, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js", {"../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./qr-scanner.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\qr-scanner\qr-scanner.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../../store/actions");

var _qrScanner = _interopRequireDefault(require("./qr-scanner.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)()),
    qrCodeDetected: data => dispatch((0, _actions.qrCodeDetected)(data))
  };
};

var _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_qrScanner.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\index.js", {"./reject-transactions.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\reject-transactions\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _rejectTransactions.default;
  }
});

var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js", {"../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\reject-transactions\reject-transactions.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _modal = _interopRequireDefault(require("../../modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RejectTransactionsModal extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onSubmit", async () => {
      const {
        onSubmit,
        hideModal
      } = this.props;
      await onSubmit();
      hideModal();
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      hideModal,
      unapprovedTxCount
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: t('rejectTxsN', [unapprovedTxCount]),
      onClose: hideModal,
      onSubmit: this.onSubmit,
      onCancel: hideModal,
      submitText: t('rejectAll'),
      cancelText: t('cancel')
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "reject-transactions__description"
    }, t('rejectTxsDescription', [unapprovedTxCount]))));
  }

}

exports.default = RejectTransactionsModal;

_defineProperty(RejectTransactionsModal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});

_defineProperty(RejectTransactionsModal, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  unapprovedTxCount: _propTypes.default.number.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./reject-transactions.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\reject-transactions\reject-transactions.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (_, ownProps) => {
  const {
    unapprovedTxCount
  } = ownProps;
  return {
    unapprovedTxCount
  };
};

var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_rejectTransactions.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\index.js", {"./transaction-confirmed.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\transaction-confirmed\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionConfirmed.default;
  }
});

var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js", {"../../modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\transaction-confirmed\transaction-confirmed.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireDefault(require("../../modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransactionConfirmed extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleSubmit", () => {
      const {
        hideModal,
        onSubmit
      } = this.props;
      hideModal();

      if (onSubmit && typeof onSubmit === 'function') {
        onSubmit();
      }
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleSubmit,
      submitText: t('ok')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__content"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check-circle fa-3x",
      style: {
        color: 'var(--color-success-default)'
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__title"
    }, `${t('confirmed')}!`), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__description"
    }, t('initialTransactionConfirmed'))));
  }

}

exports.default = TransactionConfirmed;

_defineProperty(TransactionConfirmed, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TransactionConfirmed, "propTypes", {
  onSubmit: _propTypes.default.func,
  hideModal: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./transaction-confirmed.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\modals\transaction-confirmed\transaction-confirmed.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));

var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _withModalProps.default)(_transactionConfirmed.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\index.js", {"./multi-layer-fee-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\multilayer-fee-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multiLayerFeeMessage.default;
  }
});

var _multiLayerFeeMessage = _interopRequireDefault(require("./multi-layer-fee-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js", {"../../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../transaction-detail-item/transaction-detail-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\multilayer-fee-message\multi-layer-fee-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultilayerFeeMessage;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _browser = require("@sentry/browser");

var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));

var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));

var _common = require("../../../helpers/constants/common");

var _i18n = require("../../../contexts/i18n");

var _transactions = require("../../../helpers/utils/transactions.util");

var _conversion = require("../../../../shared/modules/conversion.utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MultilayerFeeMessage({
  transaction,
  layer2fee,
  nativeCurrency,
  plainStyle
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [fetchedLayer1Total, setLayer1Total] = (0, _react.useState)(null);
  let layer1Total = 'unknown';
  let layer1TotalBN;

  if (fetchedLayer1Total !== null) {
    layer1TotalBN = _conversion.toBigNumber.hex(fetchedLayer1Total);
    layer1Total = `${_conversion.toNormalizedDenomination.WEI(layer1TotalBN).toFixed(12)} ${nativeCurrency}`;
  }

  const feeTotal = (0, _transactions.sumHexes)(layer2fee || '0x0', fetchedLayer1Total || '0x0');
  const totalInWeiHex = (0, _transactions.sumHexes)(feeTotal || '0x0', transaction.txParams.value || '0x0');

  const totalBN = _conversion.toBigNumber.hex(totalInWeiHex);

  const totalInEth = `${_conversion.toNormalizedDenomination.WEI(totalBN).toFixed(12)} ${nativeCurrency}`;
  (0, _react.useEffect)(() => {
    const getEstimatedL1Fee = async () => {
      try {
        const result = await (0, _fetchEstimatedL1Fee.default)(global.eth, transaction);
        setLayer1Total(result);
      } catch (e) {
        (0, _browser.captureException)(e);
        setLayer1Total(null);
      }
    };

    getEstimatedL1Fee();
  }, [transaction]);

  const feeTotalInFiat = /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    type: _common.SECONDARY,
    value: feeTotal,
    showFiat: true,
    hideLabel: true
  });

  const totalInFiat = /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    type: _common.SECONDARY,
    value: totalInWeiHex,
    showFiat: true,
    hideLabel: true
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "multi-layer-fee-message"
  }, /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "total-item",
    detailTitle: t('gasFee'),
    detailTotal: layer1Total,
    detailText: feeTotalInFiat,
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }), /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "total-item",
    detailTitle: t('total'),
    detailTotal: totalInEth,
    detailText: totalInFiat,
    subTitle: t('transactionDetailMultiLayerTotalSubtitle'),
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }));
}

MultilayerFeeMessage.propTypes = {
  transaction: _propTypes.default.object,
  layer2fee: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  plainStyle: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multiple-notifications\\index.js", {"./multiple-notifications.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\multiple-notifications\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multipleNotifications.default;
  }
});

var _multipleNotifications = _interopRequireDefault(require("./multiple-notifications.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\multiple-notifications\multiple-notifications.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MultipleNotifications extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showAll: false
    });
  }

  render() {
    const {
      showAll
    } = this.state;
    const {
      children,
      classNames
    } = this.props;
    const childrenToRender = children.filter(Boolean);

    if (childrenToRender.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(...classNames, {
        'home-notification-wrapper--show-all': showAll,
        'home-notification-wrapper--show-first': !showAll
      })
    }, childrenToRender, /*#__PURE__*/_react.default.createElement("div", {
      className: "home-notification-wrapper__i-container",
      onClick: () => this.setState({
        showAll: !showAll
      })
    }, childrenToRender.length > 1 ? /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('fa fa-sm fa-sort-amount', {
        flipped: !showAll
      })
    }) : null));
  }

}

exports.default = MultipleNotifications;

_defineProperty(MultipleNotifications, "defaultProps", {
  children: [],
  classNames: []
});

_defineProperty(MultipleNotifications, "propTypes", {
  children: _propTypes.default.array,
  classNames: _propTypes.default.array
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/icon-with-fallback":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\network-account-balance-header\network-account-balance-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkAccountBalanceHeader;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _iconWithFallback = _interopRequireDefault(require("../../ui/icon-with-fallback"));

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _designSystem = require("../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../../ui/box/box"));

var _i18n = require("../../../contexts/i18n");

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _network = require("../../../../shared/constants/network");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function NetworkAccountBalanceHeader({
  networkName,
  accountName,
  accountBalance,
  tokenName,
  // Derived from nativeCurrency
  accountAddress,
  chainId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const networkIcon = _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[chainId];
  const networkIconWrapperClass = networkIcon ? 'network-account-balance-header__network-account__ident-icon-ethereum' : 'network-account-balance-header__network-account__ident-icon-ethereum--gray';
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "network-account-balance-header",
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: accountAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
    name: networkName,
    size: 16,
    icon: networkIcon,
    wrapperClassName: networkIconWrapperClass
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.FLEX_START,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    marginBottom: 0
  }, networkName), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    marginTop: 0
  }, accountName))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.FLEX_END,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    marginBottom: 0
  }, t('balance')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    marginTop: 0,
    align: _designSystem.TEXT_ALIGN.END
  }, accountBalance, " ", tokenName)));
}

NetworkAccountBalanceHeader.propTypes = {
  networkName: _propTypes.default.string,
  accountName: _propTypes.default.string,
  accountBalance: _propTypes.default.string,
  tokenName: _propTypes.default.string,
  accountAddress: _propTypes.default.string,
  chainId: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\index.js", {"./network-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\network-display.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\network-display\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkDisplay.default;
  }
});

var _networkDisplay = _interopRequireDefault(require("./network-display"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\network-display.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/chip/chip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\chip.js","../../ui/color-indicator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\color-indicator\\index.js","../../ui/icon/icon-caret-down":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-down.js","../../ui/loading-indicator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-indicator\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\network-display\network-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkDisplay;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRedux = require("react-redux");

var _network = require("../../../../shared/constants/network");

var _loadingIndicator = _interopRequireDefault(require("../../ui/loading-indicator"));

var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));

var _designSystem = require("../../../helpers/constants/design-system");

var _chip = _interopRequireDefault(require("../../ui/chip/chip"));

var _iconCaretDown = _interopRequireDefault(require("../../ui/icon/icon-caret-down"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _selectors = require("../../../selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function NetworkDisplay({
  indicatorSize,
  disabled,
  labelProps,
  targetNetwork,
  onClick
}) {
  const networkIsLoading = (0, _reactRedux.useSelector)(_selectors.isNetworkLoading);
  const currentNetwork = (0, _reactRedux.useSelector)(state => ({
    nickname: state.metamask.provider.nickname,
    type: state.metamask.provider.type
  }));
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    nickname: networkNickname,
    type: networkType
  } = targetNetwork !== null && targetNetwork !== void 0 ? targetNetwork : currentNetwork;
  return /*#__PURE__*/_react.default.createElement(_chip.default, {
    dataTestId: "network-display",
    borderColor: onClick ? _designSystem.COLORS.BORDER_DEFAULT : _designSystem.COLORS.BORDER_MUTED,
    onClick: onClick,
    leftIcon: /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
      alt: t('attemptingConnect'),
      title: t('attemptingConnect'),
      isLoading: networkIsLoading
    }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: networkType === _network.NETWORK_TYPES.RPC ? _designSystem.COLORS.ICON_MUTED : networkType,
      size: indicatorSize,
      type: _colorIndicator.default.TYPES.FILLED,
      iconClassName: networkType === _network.NETWORK_TYPES.RPC && indicatorSize !== _designSystem.SIZES.XS ? 'fa fa-question' : undefined
    })),
    rightIcon: onClick ? /*#__PURE__*/_react.default.createElement(_iconCaretDown.default, {
      size: 16,
      className: "network-display__icon"
    }) : null,
    label: networkType === _network.NETWORK_TYPES.RPC ? networkNickname !== null && networkNickname !== void 0 ? networkNickname : t('privateNetwork') : t(networkType),
    className: (0, _classnames.default)('network-display', {
      'network-display--disabled': disabled,
      'network-display--clickable': typeof onClick === 'function'
    }),
    labelProps: {
      variant: _designSystem.TYPOGRAPHY.H7,
      ...labelProps
    }
  });
}

NetworkDisplay.propTypes = {
  /**
   * The size of the indicator
   */
  indicatorSize: _propTypes.default.oneOf(Object.values(_designSystem.SIZES)),

  /**
   * The label props of the label can use most of the Typography props
   */
  labelProps: _chip.default.propTypes.labelProps,

  /**
   * The target network
   */
  targetNetwork: _propTypes.default.shape({
    type: _propTypes.default.oneOf([...Object.keys(_network.BUILT_IN_NETWORKS), _network.NETWORK_TYPES.RPC]),
    nickname: _propTypes.default.string
  }),

  /**
   * Whether the NetworkDisplay is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * The onClick event handler of the NetworkDisplay
   * if it is not passed it is assumed that the NetworkDisplay
   * should not be interactive and removes the caret and changes the border color
   * of the NetworkDisplay
   */
  onClick: _propTypes.default.func
};
NetworkDisplay.defaultProps = {
  indicatorSize: _designSystem.SIZES.LG
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\index.js", {"./permission-page-container-content":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js","./permission-page-container.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permission-page-container\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PermissionPageContainerContent", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainer.default;
  }
});

var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.container"));

var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js", {"./permission-page-container-content.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permission-page-container\permission-page-container-content\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});

var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js", {"../../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../permissions-connect-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js","../../permissions-connect-permission-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permission-page-container\permission-page-container-content\permission-page-container-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));

var _permissionsConnectPermissionList = _interopRequireDefault(require("../../permissions-connect-permission-list"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PermissionPageContainerContent extends _react.PureComponent {
  renderRequestedPermissions() {
    const {
      selectedPermissions
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content__requested"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectPermissionList.default, {
      permissions: selectedPermissions
    }));
  }

  renderAccountTooltip(textContent) {
    const {
      selectedIdentities
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      key: "all-account-connect-tooltip",
      position: "bottom",
      wrapperClassName: "permission-approval-container__bold-title-elements",
      html: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column'
        }
      }, selectedIdentities.slice(0, 6).map((identity, index) => {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: `tooltip-identity-${index}`
        }, identity.addressLabel);
      }), selectedIdentities.length > 6 ? t('plusXMore', [selectedIdentities.length - 6]) : null)
    }, textContent);
  }

  getTitle() {
    var _selectedIdentities$;

    const {
      subjectMetadata,
      selectedIdentities,
      allIdentitiesSelected,
      selectedPermissions
    } = this.props;
    const {
      t
    } = this.context;

    if (subjectMetadata.extensionId) {
      return t('externalExtension', [subjectMetadata.extensionId]);
    } else if (!selectedPermissions.eth_accounts) {
      return t('permissionRequestCapitalized');
    } else if (allIdentitiesSelected) {
      return t('connectToAll', [this.renderAccountTooltip(t('connectToAllAccounts'))]);
    } else if (selectedIdentities.length > 1) {
      return t('connectToMultiple', [this.renderAccountTooltip(t('connectToMultipleNumberOfAccounts', [selectedIdentities.length]))]);
    }

    return t('connectTo', [(_selectedIdentities$ = selectedIdentities[0]) === null || _selectedIdentities$ === void 0 ? void 0 : _selectedIdentities$.addressLabel]);
  }

  render() {
    const {
      subjectMetadata
    } = this.props;
    const {
      t
    } = this.context;
    const title = this.getTitle();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content-container"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
      iconUrl: subjectMetadata.iconUrl,
      iconName: subjectMetadata.name,
      headerTitle: title,
      headerText: subjectMetadata.extensionId ? t('allowExternalExtensionTo', [subjectMetadata.extensionId]) : t('allowThisSiteTo'),
      siteOrigin: subjectMetadata.origin
    }), /*#__PURE__*/_react.default.createElement("section", {
      className: "permission-approval-container__permissions-container"
    }, this.renderRequestedPermissions())));
  }

}

exports.default = PermissionPageContainerContent;

_defineProperty(PermissionPageContainerContent, "propTypes", {
  subjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  }),
  selectedPermissions: _propTypes.default.object.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool
});

_defineProperty(PermissionPageContainerContent, "defaultProps", {
  selectedIdentities: [],
  allIdentitiesSelected: false
});

_defineProperty(PermissionPageContainerContent, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js", {".":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\index.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../permissions-connect-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permission-page-container\permission-page-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _metametrics = require("../../../../shared/constants/metametrics");

var _pageContainer = require("../../ui/page-container");

var _permissionsConnectFooter = _interopRequireDefault(require("../permissions-connect-footer"));

var _ = require(".");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PermissionPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      selectedPermissions: this.getRequestedMethodState(this.getRequestedMethodNames(this.props))
    });

    _defineProperty(this, "onCancel", () => {
      const {
        request,
        rejectPermissionsRequest
      } = this.props;
      rejectPermissionsRequest(request.metadata.id);
    });

    _defineProperty(this, "onSubmit", () => {
      const {
        request: _request,
        approvePermissionsRequest,
        rejectPermissionsRequest,
        selectedIdentities
      } = this.props;
      const request = { ..._request,
        permissions: { ..._request.permissions
        },
        approvedAccounts: selectedIdentities.map(selectedIdentity => selectedIdentity.address)
      };
      Object.keys(this.state.selectedPermissions).forEach(key => {
        if (!this.state.selectedPermissions[key]) {
          delete request.permissions[key];
        }
      });

      if (Object.keys(request.permissions).length > 0) {
        approvePermissionsRequest(request);
      } else {
        rejectPermissionsRequest(request.metadata.id);
      }
    });
  }

  componentDidUpdate() {
    const newMethodNames = this.getRequestedMethodNames(this.props);

    if (!(0, _lodash.isEqual)(Object.keys(this.state.selectedPermissions), newMethodNames)) {
      // this should be a new request, so just overwrite
      this.setState({
        selectedPermissions: this.getRequestedMethodState(newMethodNames)
      });
    }
  }

  getRequestedMethodState(methodNames) {
    return methodNames.reduce((acc, methodName) => {
      acc[methodName] = true;
      return acc;
    }, {});
  }

  getRequestedMethodNames(props) {
    return Object.keys(props.request.permissions || {});
  }

  componentDidMount() {
    this.context.trackEvent({
      category: _metametrics.EVENT.CATEGORIES.AUTH,
      event: 'Tab Opened',
      properties: {
        action: 'Connect',
        legacy_event: true
      }
    });
  }

  render() {
    const {
      requestMetadata,
      targetSubjectMetadata,
      selectedIdentities,
      allIdentitiesSelected
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container permission-approval-container"
    }, /*#__PURE__*/_react.default.createElement(_.PermissionPageContainerContent, {
      requestMetadata: requestMetadata,
      subjectMetadata: targetSubjectMetadata,
      selectedPermissions: this.state.selectedPermissions,
      selectedIdentities: selectedIdentities,
      allIdentitiesSelected: allIdentitiesSelected
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__footers"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectFooter.default, null), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelButtonType: "default",
      onCancel: () => this.onCancel(),
      cancelText: this.context.t('cancel'),
      onSubmit: () => this.onSubmit(),
      submitText: this.context.t('connect'),
      buttonSizeLarge: false
    })));
  }

}

exports.default = PermissionPageContainer;

_defineProperty(PermissionPageContainer, "propTypes", {
  approvePermissionsRequest: _propTypes.default.func.isRequired,
  rejectPermissionsRequest: _propTypes.default.func.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool,
  request: _propTypes.default.object,
  requestMetadata: _propTypes.default.object,
  targetSubjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  })
});

_defineProperty(PermissionPageContainer, "defaultProps", {
  request: {},
  requestMetadata: {},
  selectedIdentities: [],
  allIdentitiesSelected: false
});

_defineProperty(PermissionPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./permission-page-container.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permission-page-container\permission-page-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    selectedIdentities
  } = ownProps;
  const allIdentities = (0, _selectors.getMetaMaskIdentities)(state);
  const allIdentitiesSelected = Object.keys(selectedIdentities).length === Object.keys(allIdentities).length && selectedIdentities.length > 1;
  return {
    allIdentitiesSelected
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_permissionPageContainer.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\index.js", {"./permissions-connect-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-footer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectFooter.default;
  }
});

var _permissionsConnectFooter = _interopRequireDefault(require("./permissions-connect-footer.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js", {"../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-footer\permissions-connect-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PermissionsConnectFooter extends _react.Component {
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('onlyConnectTrust')), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text--link",
      onClick: () => {
        global.platform.openTab({
          url: _zendeskUrl.default.USER_GUIDE_DAPPS
        });
      }
    }, t('learnMoreUpperCase'))));
  }

}

exports.default = PermissionsConnectFooter;

_defineProperty(PermissionsConnectFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js", {"./permissions-connect-header.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-header\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectHeader.default;
  }
});

var _permissionsConnectHeader = _interopRequireDefault(require("./permissions-connect-header.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-header\permissions-connect-header.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));

var _box = _interopRequireDefault(require("../../ui/box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PermissionsConnectHeader extends _react.Component {
  renderHeaderIcon() {
    const {
      iconUrl,
      iconName,
      siteOrigin,
      leftIcon,
      rightIcon
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__icon"
    }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      chip: true,
      siteOrigin: siteOrigin,
      iconSrc: iconUrl,
      name: iconName,
      leftIcon: leftIcon,
      rightIcon: rightIcon
    }));
  }

  render() {
    const {
      boxProps,
      className,
      headerTitle,
      headerText
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
      className: (0, _classnames.default)('permissions-connect-header', className),
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
    }, boxProps), this.renderHeaderIcon(), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__title"
    }, headerTitle), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__subtitle"
    }, headerText));
  }

}

exports.default = PermissionsConnectHeader;

_defineProperty(PermissionsConnectHeader, "propTypes", {
  className: _propTypes.default.string,
  iconUrl: _propTypes.default.string,
  iconName: _propTypes.default.string.isRequired,
  siteOrigin: _propTypes.default.string.isRequired,
  headerTitle: _propTypes.default.node,
  boxProps: _propTypes.default.shape({ ..._box.default.propTypes
  }),
  headerText: _propTypes.default.string,
  leftIcon: _propTypes.default.node,
  rightIcon: _propTypes.default.node
});

_defineProperty(PermissionsConnectHeader, "defaultProps", {
  iconUrl: null,
  headerTitle: '',
  headerText: '',
  boxProps: {}
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\index.js", {"./permissions-connect-permission-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-permission-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectPermissionList.default;
  }
});

var _permissionsConnectPermissionList = _interopRequireDefault(require("./permissions-connect-permission-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js", {"../../../helpers/utils/permission":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\permission.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\permissions-connect-permission-list\permissions-connect-permission-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PermissionsConnectPermissionList;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _permission = require("../../../helpers/utils/permission");

var _useI18nContext = require("../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get one or more permission descriptions for a permission name.
 *
 * @param t - The translation function.
 * @param permissionName - The name of the permission to request.
 * @param permissionValue - The value of the permission to request.
 * @returns {JSX.Element[]} An array of permission description nodes.
 */
function getDescriptionNodes(t, permissionName, permissionValue) {
  const {
    label,
    leftIcon,
    rightIcon
  } = (0, _permission.getPermissionDescription)(t, permissionName, permissionValue);

  if (Array.isArray(label)) {
    return label.map((labelValue, index) => /*#__PURE__*/_react.default.createElement("div", {
      className: "permission",
      key: `${permissionName}-${index}`
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: leftIcon
    }), labelValue, rightIcon && /*#__PURE__*/_react.default.createElement("i", {
      className: rightIcon
    })));
  }

  return [/*#__PURE__*/_react.default.createElement("div", {
    className: "permission",
    key: permissionName
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: leftIcon
  }), label, rightIcon && /*#__PURE__*/_react.default.createElement("i", {
    className: rightIcon
  }))];
}

function PermissionsConnectPermissionList({
  permissions
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-permission-list"
  }, Object.entries(permissions).reduce((target, [permissionName, permissionValue]) => target.concat(getDescriptionNodes(t, permissionName, permissionValue)), []));
}

PermissionsConnectPermissionList.propTypes = {
  permissions: _propTypes.default.object.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../helpers/utils/webcam-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/page-container/page-container-footer/page-container-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","./enhanced-reader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js","@ngraveio/bc-ur":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\base-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _bcUr = require("@ngraveio/bc-ur");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _webcamUtils = _interopRequireDefault(require("../../../helpers/utils/webcam-utils"));

var _pageContainerFooter = _interopRequireDefault(require("../../ui/page-container/page-container-footer/page-container-footer.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _time = require("../../../../shared/constants/time");

var _enhancedReader = _interopRequireDefault(require("./enhanced-reader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};

const BaseReader = ({
  isReadingWallet,
  handleCancel,
  handleSuccess,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [ready, setReady] = (0, _react.useState)(READY_STATE.ACCESSING_CAMERA);
  const [error, setError] = (0, _react.useState)(null);
  const [urDecoder, setURDecoder] = (0, _react.useState)(new _bcUr.URDecoder());
  let permissionChecker = null;
  const mounted = (0, _react.useRef)(false);

  const reset = () => {
    setReady(READY_STATE.ACCESSING_CAMERA);
    setError(null);
    setURDecoder(new _bcUr.URDecoder());
  };

  const checkEnvironment = async () => {
    try {
      const {
        environmentReady
      } = await _webcamUtils.default.checkStatus();

      if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        const currentUrl = new URL(window.location.href);
        const currentHash = currentUrl.hash;
        const currentRoute = currentHash ? currentHash.substring(1) : null;
        global.platform.openExtensionInBrowser(currentRoute);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    } // initial attempt is required to trigger permission prompt
    // eslint-disable-next-line no-use-before-define


    return initCamera();
  };

  const checkPermissions = async () => {
    try {
      const {
        permissions
      } = await _webcamUtils.default.checkStatus();

      if (permissions) {
        // Let the video stream load first...
        await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));

        if (!mounted.current) {
          return;
        }

        setReady(READY_STATE.READY);
      } else if (mounted.current) {
        // Keep checking for permissions
        permissionChecker = setTimeout(checkPermissions, _time.SECOND);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
  };

  const handleScan = data => {
    try {
      if (!data) {
        return;
      }

      urDecoder.receivePart(data);

      if (urDecoder.isComplete()) {
        const result = urDecoder.resultUR();
        handleSuccess(result).catch(setError);
      }
    } catch (e) {
      if (isReadingWallet) {
        setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
      } else {
        setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      }

      setError(new Error(t('unknownQrCode')));
    }
  };

  const initCamera = () => {
    try {
      checkPermissions();
    } catch (e) {
      if (!mounted.current) {
        return;
      }

      if (e.name === 'NotAllowedError') {
        _loglevel.default.info(`Permission denied: '${e}'`);

        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      } else {
        setError(e);
      }
    }
  };

  (0, _react.useEffect)(() => {
    mounted.current = true;
    checkEnvironment();
    return () => {
      mounted.current = false;
      clearTimeout(permissionChecker);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    if (ready === READY_STATE.READY) {
      initCamera();
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      checkPermissions();
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [ready]);

  const tryAgain = () => {
    clearTimeout(permissionChecker);
    reset();
    checkEnvironment();
  };

  const renderError = () => {
    let title, msg;

    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      if (isReadingWallet) {
        msg = t('QRHardwareUnknownWalletQRCode');
      } else {
        msg = t('unknownQrCode');
      }
    } else if (error.message === t('QRHardwareMismatchedSignId')) {
      msg = t('QRHardwareMismatchedSignId');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setErrorTitle('');
        handleCancel();
      },
      onSubmit: () => {
        setErrorTitle('');
        tryAgain();
      },
      cancelText: t('cancel'),
      submitText: t('tryAgain'),
      submitButtonType: "confirm"
    }));
  };

  const renderVideo = () => {
    let message;

    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('QRHardwareScanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement(_enhancedReader.default, {
      handleScan: handleScan
    })), message && /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner"
  }, error ? renderError() : renderVideo());
};

BaseReader.propTypes = {
  isReadingWallet: _propTypes.default.bool.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  handleSuccess: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = BaseReader;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js", {"../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../ui/spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","@zxing/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@zxing\\browser\\cjs\\index.js","@zxing/library":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\enhanced-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _library = require("@zxing/library");

var _browser = require("@zxing/browser");

var _loglevel = _interopRequireDefault(require("loglevel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _time = require("../../../../shared/constants/time");

var _spinner = _interopRequireDefault(require("../../ui/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EnhancedReader = ({
  handleScan
}) => {
  const [canplay, setCanplay] = (0, _react.useState)(false);
  const codeReader = (0, _react.useMemo)(() => {
    const hint = new Map();
    hint.set(_library.DecodeHintType.POSSIBLE_FORMATS, [_library.BarcodeFormat.QR_CODE]);
    return new _browser.BrowserQRCodeReader(hint, {
      delayBetweenScanAttempts: _time.MILLISECOND * 100,
      delayBetweenScanSuccess: _time.MILLISECOND * 100
    });
  }, []);
  (0, _react.useEffect)(() => {
    const videoElem = document.getElementById('video');

    const canplayListener = () => {
      setCanplay(true);
    };

    videoElem.addEventListener('canplay', canplayListener);
    const promise = codeReader.decodeFromVideoDevice(undefined, 'video', result => {
      if (result) {
        handleScan(result.getText());
      }
    });
    return () => {
      videoElem.removeEventListener('canplay', canplayListener);
      promise.then(controls => {
        if (controls) {
          controls.stop();
        }
      }).catch(_loglevel.default.info);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner__content__video-wrapper"
  }, /*#__PURE__*/_react.default.createElement("video", {
    id: "video",
    style: {
      display: canplay ? 'block' : 'none',
      width: '100%',
      filter: 'blur(4px)'
    }
  }), canplay ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
    color: "var(--color-warning-default)"
  }));
};

EnhancedReader.propTypes = {
  handleScan: _propTypes.default.func.isRequired
};
var _default = EnhancedReader;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\index.js", {"./qr-hardware-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _qrHardwarePopover = _interopRequireDefault(require("./qr-hardware-popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _qrHardwarePopover.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js", {"../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","./qr-hardware-sign-request":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js","./qr-hardware-wallet-importer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _app = require("../../../../shared/constants/app");

var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer"));

var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const QRHardwarePopover = () => {
  var _sign$request;

  const t = (0, _useI18nContext.useI18nContext)();
  const qrHardware = (0, _reactRedux.useSelector)(_selectors.getCurrentQRHardwareState);
  const {
    sync,
    sign
  } = qrHardware;
  const showWalletImporter = sync === null || sync === void 0 ? void 0 : sync.reading;
  const showSignRequest = sign === null || sign === void 0 ? void 0 : sign.request;
  const showPopover = showWalletImporter || showSignRequest;
  const [errorTitle, setErrorTitle] = (0, _react.useState)('');
  const {
    txData
  } = (0, _reactRedux.useSelector)(state => {
    return state.confirmTransaction;
  }); // the confirmTransaction's life cycle is not consistent with QR hardware wallet;
  // the confirmTransaction will change after the previous tx is confirmed or cancel,
  // we want to block the changing by sign request id;

  const _txData = (0, _react.useMemo)(() => {
    return txData; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sign === null || sign === void 0 ? void 0 : (_sign$request = sign.request) === null || _sign$request === void 0 ? void 0 : _sign$request.requestId]);

  const dispatch = (0, _reactRedux.useDispatch)();
  const walletImporterCancel = (0, _react.useCallback)(() => dispatch((0, _actions.cancelSyncQRHardware)()), [dispatch]);
  const signRequestCancel = (0, _react.useCallback)(() => {
    let action = _actions.cancelTx;

    switch (_txData.type) {
      case _app.MESSAGE_TYPE.PERSONAL_SIGN:
        {
          action = _actions.cancelPersonalMsg;
          break;
        }

      case _app.MESSAGE_TYPE.ETH_SIGN:
        {
          action = _actions.cancelMsg;
          break;
        }

      case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
        {
          action = _actions.cancelTypedMsg;
          break;
        }

      default:
        {
          action = _actions.cancelTx;
        }
    }

    dispatch(action(_txData));
    dispatch((0, _actions.cancelQRHardwareSignRequest)());
  }, [dispatch, _txData]);
  const title = (0, _react.useMemo)(() => {
    let _title = '';

    if (showSignRequest) {
      _title = t('QRHardwareSignRequestTitle');
    } else if (showWalletImporter) {
      _title = t('QRHardwareWalletImporterTitle');
    }

    if (errorTitle !== '') {
      _title = errorTitle;
    }

    return _title;
  }, [showSignRequest, showWalletImporter, t, errorTitle]);
  return showPopover ? /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: showWalletImporter ? walletImporterCancel : signRequestCancel
  }, showWalletImporter && /*#__PURE__*/_react.default.createElement(_qrHardwareWalletImporter.default, {
    handleCancel: walletImporterCancel,
    setErrorTitle: setErrorTitle
  }), showSignRequest && /*#__PURE__*/_react.default.createElement(_qrHardwareSignRequest.default, {
    setErrorTitle: setErrorTitle,
    handleCancel: signRequestCancel,
    request: sign.request
  })) : null;
};

var _default = QRHardwarePopover;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js", {"./qr-hardware-sign-request.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-sign-request\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _qrHardwareSignRequest.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","@ngraveio/bc-ur":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","buffer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","qrcode.react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\qrcode.react\\lib\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-sign-request\player.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _qrcode = _interopRequireDefault(require("qrcode.react"));

var _bcUr = require("@ngraveio/bc-ur");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _box = _interopRequireDefault(require("../../../ui/box"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _designSystem = require("../../../../helpers/constants/design-system");

var _pageContainer = require("../../../ui/page-container");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Player = ({
  type,
  cbor,
  cancelQRHardwareSignRequest,
  toRead
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const urEncoder = (0, _react.useMemo)(() => new _bcUr.UREncoder(new _bcUr.UR(Buffer.from(cbor, 'hex'), type), 400), [cbor, type]);
  const [currentQRCode, setCurrentQRCode] = (0, _react.useState)(urEncoder.nextPart());
  (0, _react.useEffect)(() => {
    const id = setInterval(() => {
      setCurrentQRCode(urEncoder.nextPart());
    }, 100);
    return () => {
      clearInterval(id);
    };
  }, [urEncoder]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('QRHardwareSignRequestSubtitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 4,
    paddingBottom: 4,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: 20,
      backgroundColor: 'var(--qr-code-white-background)'
    }
  }, /*#__PURE__*/_react.default.createElement(_qrcode.default, {
    value: currentQRCode.toUpperCase(),
    size: 250
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingBottom: 4,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('QRHardwareSignRequestDescription'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    onCancel: cancelQRHardwareSignRequest,
    onSubmit: toRead,
    cancelText: t('QRHardwareSignRequestCancel'),
    submitText: t('QRHardwareSignRequestGetSignature'),
    submitButtonType: "confirm"
  }));
};

Player.propTypes = {
  type: _propTypes.default.string.isRequired,
  cbor: _propTypes.default.string.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  toRead: _propTypes.default.func.isRequired
};
var _default = Player;
exports.default = _default;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js", {"../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./player":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js","./reader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-sign-request\qr-hardware-sign-request.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _actions = require("../../../../store/actions");

var _player = _interopRequireDefault(require("./player"));

var _reader = _interopRequireDefault(require("./reader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const QRHardwareSignRequest = ({
  request,
  handleCancel,
  setErrorTitle
}) => {
  const [status, setStatus] = (0, _react.useState)('play');
  const toRead = (0, _react.useCallback)(() => setStatus('read'), []);

  const renderPlayer = () => {
    const {
      payload
    } = request;
    return /*#__PURE__*/_react.default.createElement(_player.default, {
      type: payload.type,
      cbor: payload.cbor,
      cancelQRHardwareSignRequest: handleCancel,
      toRead: toRead
    });
  };

  const renderReader = () => {
    return /*#__PURE__*/_react.default.createElement(_reader.default, {
      cancelQRHardwareSignRequest: handleCancel,
      submitQRHardwareSignature: _actions.submitQRHardwareSignature,
      requestId: request.requestId,
      setErrorTitle: setErrorTitle
    });
  };

  if (status === 'play') {
    return renderPlayer();
  }

  return renderReader();
};

QRHardwareSignRequest.propTypes = {
  request: _propTypes.default.object.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareSignRequest;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js", {"../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../base-reader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","@keystonehq/bc-ur-registry-eth":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@keystonehq\\bc-ur-registry-eth\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","uuid":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-sign-request\reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _bcUrRegistryEth = require("@keystonehq/bc-ur-registry-eth");

var uuid = _interopRequireWildcard(require("uuid"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _baseReader = _interopRequireDefault(require("../base-reader"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Reader = ({
  submitQRHardwareSignature,
  cancelQRHardwareSignRequest,
  requestId,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();

  const cancel = () => {
    cancelQRHardwareSignRequest();
  };

  const handleSuccess = async ur => {
    if (ur.type === 'eth-signature') {
      const ethSignature = _bcUrRegistryEth.ETHSignature.fromCBOR(ur.cbor);

      const buffer = ethSignature.getRequestId();
      const signId = uuid.stringify(buffer);

      if (signId === requestId) {
        return await submitQRHardwareSignature(signId, ur.cbor.toString('hex'));
      }

      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('QRHardwareMismatchedSignId'));
    } else {
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('unknownQrCode'));
    }
  };

  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: false,
    handleCancel: cancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};

Reader.propTypes = {
  submitQRHardwareSignature: _propTypes.default.func.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  requestId: _propTypes.default.string.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = Reader;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js", {"./qr-hardware-wallet-importer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-wallet-importer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _qrHardwareWalletImporter.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js", {"../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../base-reader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\qr-hardware-popover\qr-hardware-wallet-importer\qr-hardware-wallet-importer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _actions = require("../../../../store/actions");

var _baseReader = _interopRequireDefault(require("../base-reader"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const QRHardwareWalletImporter = ({
  handleCancel,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();

  const handleSuccess = async ur => {
    if (ur.type === 'crypto-hdkey') {
      return await (0, _actions.submitQRHardwareCryptoHDKey)(ur.cbor.toString('hex'));
    } else if (ur.type === 'crypto-account') {
      return await (0, _actions.submitQRHardwareCryptoAccount)(ur.cbor.toString('hex'));
    }

    setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
    throw new Error(t('unknownQrCode'));
  };

  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: true,
    handleCancel: handleCancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};

QRHardwareWalletImporter.propTypes = {
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareWalletImporter;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\index.js", {"./recovery-phrase-reminder":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\recovery-phrase-reminder\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _recoveryPhraseReminder.default;
  }
});

var _recoveryPhraseReminder = _interopRequireDefault(require("./recovery-phrase-reminder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\recovery-phrase-reminder\recovery-phrase-reminder.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhraseReminder;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../ui/box"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Components
// Helpers
function RecoveryPhraseReminder({
  onConfirm,
  hasBackedUp
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();

  const handleBackUp = () => {
    history.push(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    centerTitle: true,
    title: t('recoveryPhraseReminderTitle')
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4,
    className: "recovery-phrase-reminder"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    align: _designSystem.TEXT_ALIGN.CENTER,
    variant: _designSystem.TYPOGRAPHY.Paragraph,
    boxProps: {
      marginTop: 0,
      marginBottom: 4
    }
  }, t('recoveryPhraseReminderSubText')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 8
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "recovery-phrase-reminder__list"
  }, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('recoveryPhraseReminderItemOne'))), /*#__PURE__*/_react.default.createElement("li", null, t('recoveryPhraseReminderItemTwo')), /*#__PURE__*/_react.default.createElement("li", null, hasBackedUp ? t('recoveryPhraseReminderHasBackedUp') : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('recoveryPhraseReminderHasNotBackedUp'), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_BLOCK,
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: handleBackUp,
    style: {
      fontSize: 'inherit',
      padding: 0
    }
  }, t('recoveryPhraseReminderBackupStart'))))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.TWO_FIFTHS
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: onConfirm
  }, t('recoveryPhraseReminderConfirm'))))));
}

RecoveryPhraseReminder.propTypes = {
  hasBackedUp: _propTypes.default.bool.isRequired,
  onConfirm: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\index.js", {"./selected-account.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\selected-account\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _selectedAccount = _interopRequireDefault(require("./selected-account.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _selectedAccount.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.component.js", {"../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\selected-account\selected-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _util = require("../../../helpers/utils/util");

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _copyIcon = _interopRequireDefault(require("../../ui/icon/copy-icon.component"));

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _time = require("../../../../shared/constants/time");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SelectedAccount extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      copied: false
    });
  }

  componentDidMount() {
    this.copyTimeout = null;
  }

  componentWillUnmount() {
    if (this.copyTimeout) {
      clearTimeout(this.copyTimeout);
      this.copyTimeout = null;
    }
  }

  render() {
    const {
      t
    } = this.context;
    const {
      selectedIdentity
    } = this.props;
    const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(selectedIdentity.address);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account"
    }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "selected-account__tooltip-wrapper",
      position: "bottom",
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "selected-account__clickable",
      "data-testid": "selected-account-click",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(checksummedAddress);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__name"
    }, selectedIdentity.name), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__address"
    }, (0, _util.shortenAddress)(checksummedAddress), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__copy"
    }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 11,
      color: "var(--color-icon-alternative)"
    }))))));
  }

}

_defineProperty(SelectedAccount, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(SelectedAccount, "propTypes", {
  selectedIdentity: _propTypes.default.object.isRequired
});

var _default = SelectedAccount;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./selected-account.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\selected-account\selected-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _selectedAccount = _interopRequireDefault(require("./selected-account.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_selectedAccount.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\index.js", {"./signature-request-original.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-original\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginal.default;
  }
});

var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js", {"../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/site-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-icon\\index.js","../../ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../account-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../ledger-instruction-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","buffer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-inspector":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-inspector\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-original\signature-request-original.component.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactInspector = require("react-inspector");

var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));

var _app = require("../../../../shared/constants/app");

var _metametrics = require("../../../../shared/constants/metametrics");

var _util = require("../../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _accountListItem = _interopRequireDefault(require("../account-list-item"));

var _conversion = require("../../../../shared/modules/conversion.utils");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _button = _interopRequireDefault(require("../../ui/button"));

var _siteIcon = _interopRequireDefault(require("../../ui/site-icon"));

var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SignatureRequestOriginal extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      fromAccount: this.props.fromAccount
    });

    _defineProperty(this, "renderHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__header-background"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__header__text"
      }, this.context.t('sigRequest')), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__header__tip-container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__header__tip"
      })));
    });

    _defineProperty(this, "renderAccount", () => {
      const {
        fromAccount
      } = this.state;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account-text"
      }, `${this.context.t('account')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account-item"
      }, /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
        account: fromAccount
      })));
    });

    _defineProperty(this, "renderBalance", () => {
      const {
        conversionRate,
        nativeCurrency
      } = this.props;
      const {
        fromAccount: {
          balance
        }
      } = this.state;
      const balanceInBaseAsset = (0, _conversion.conversionUtil)(balance, {
        fromNumericBase: 'hex',
        toNumericBase: 'dec',
        fromDenomination: 'WEI',
        numberOfDecimals: 6,
        conversionRate
      });
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__balance"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__balance-text"
      }, `${this.context.t('balance')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__balance-value"
      }, `${balanceInBaseAsset} ${nativeCurrency}`));
    });

    _defineProperty(this, "renderRequestIcon", () => {
      const {
        requesterAddress
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__request-icon"
      }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 40,
        address: requesterAddress
      }));
    });

    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });

    _defineProperty(this, "renderOriginInfo", () => {
      const {
        txData,
        subjectMetadata
      } = this.props;
      const {
        t
      } = this.context;
      const targetSubjectMetadata = txData.msgParams.origin ? subjectMetadata === null || subjectMetadata === void 0 ? void 0 : subjectMetadata[txData.msgParams.origin] : null;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__origin-row"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__origin-label"
      }, `${t('origin')}:`), targetSubjectMetadata !== null && targetSubjectMetadata !== void 0 && targetSubjectMetadata.iconUrl ? /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
        className: "request-signature__origin-icon",
        icon: targetSubjectMetadata.iconUrl,
        name: (0, _util.getURLHostName)(targetSubjectMetadata.origin) || targetSubjectMetadata.origin,
        size: 24
      }) : null, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
        className: "request-signature__origin",
        siteOrigin: txData.msgParams.origin
      }));
    });

    _defineProperty(this, "msgHexToText", hex => {
      try {
        const stripped = (0, _hexstringUtils.stripHexPrefix)(hex);
        const buff = Buffer.from(stripped, 'hex');
        return buff.length === 32 ? hex : buff.toString('utf8');
      } catch (e) {
        return hex;
      }
    });

    _defineProperty(this, "renderTypedData", data => {
      const {
        t
      } = this.context;
      const {
        domain,
        message
      } = JSON.parse(data);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__typed-container"
      }, domain ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('domain')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: domain,
        expandLevel: 1,
        name: "domain"
      })) : '', message ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('message')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: message,
        expandLevel: 1,
        name: "message"
      })) : '');
    });

    _defineProperty(this, "renderBody", () => {
      let rows;
      let notice = `${this.context.t('youSign')}:`;
      const {
        txData
      } = this.props;
      const {
        type,
        msgParams: {
          data
        }
      } = txData;

      if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
        rows = [{
          name: this.context.t('message'),
          value: this.msgHexToText(data)
        }];
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
        rows = data;
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
        rows = [{
          name: this.context.t('message'),
          value: data
        }];
        notice = this.context.t('signNotice');
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__body"
      }, this.renderAccountInfo(), this.renderOriginInfo(), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-signature__notice', {
          'request-signature__warning': type === _app.MESSAGE_TYPE.ETH_SIGN
        })
      }, notice, type === _app.MESSAGE_TYPE.ETH_SIGN ? /*#__PURE__*/_react.default.createElement("span", {
        className: "request-signature__help-link",
        onClick: () => {
          global.platform.openTab({
            url: 'https://consensys.net/blog/metamask/the-seal-of-approval-know-what-youre-consenting-to-with-permissions-and-approvals-in-metamask/'
          });
        }
      }, this.context.t('learnMoreUpperCase')) : null), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__rows"
      }, rows.map(({
        name,
        value
      }, index) => {
        if (typeof value === 'boolean') {
          // eslint-disable-next-line no-param-reassign
          value = value.toString();
        }

        return /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row",
          key: `request-signature-row-${index}`
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-title"
        }, `${name}:`), /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-value"
        }, value));
      })));
    });

    _defineProperty(this, "renderFooter", () => {
      const {
        cancel,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        sign,
        txData: {
          type
        },
        hardwareWalletRequiresConnection
      } = this.props;
      const {
        trackEvent,
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__footer"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        large: true,
        className: "request-signature__footer__cancel-button",
        onClick: async event => {
          await cancel(event);
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
            event: 'Cancel',
            properties: {
              action: 'Sign Request',
              legacy_event: true,
              type
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
        "data-testid": "request-signature__sign",
        type: "primary",
        large: true,
        className: "request-signature__footer__sign-button",
        disabled: hardwareWalletRequiresConnection,
        onClick: async event => {
          await sign(event);
          trackEvent({
            category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
            event: 'Confirm',
            properties: {
              action: 'Sign Request',
              legacy_event: true,
              type
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      }, t('sign')));
    });

    _defineProperty(this, "handleCancelAll", () => {
      const {
        cancelAll,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        showRejectTransactionsConfirmationModal,
        messagesCount
      } = this.props;
      const unapprovedTxCount = messagesCount;
      showRejectTransactionsConfirmationModal({
        unapprovedTxCount,
        onSubmit: async () => {
          await cancelAll();
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });

    _defineProperty(this, "render", () => {
      const {
        messagesCount
      } = this.props;
      const {
        t
      } = this.context;
      const rejectNText = t('rejectTxsN', [messagesCount]);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__container"
      }, this.renderHeader(), this.renderBody(), this.props.isLedgerWallet ? /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__ledger-instruction-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
        showDataInstruction: true
      })) : null, this.renderFooter(), messagesCount > 1 ? /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        className: "request-signature__container__reject",
        onClick: () => this.handleCancelAll()
      }, rejectNText) : null);
    });
  }

}

exports.default = SignatureRequestOriginal;

_defineProperty(SignatureRequestOriginal, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func.isRequired
});

_defineProperty(SignatureRequestOriginal, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  cancel: _propTypes.default.func.isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  conversionRate: _propTypes.default.number,
  history: _propTypes.default.object.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  requesterAddress: _propTypes.default.string,
  sign: _propTypes.default.func.isRequired,
  txData: _propTypes.default.object.isRequired,
  subjectMetadata: _propTypes.default.object,
  hardwareWalletRequiresConnection: _propTypes.default.bool,
  isLedgerWallet: _propTypes.default.bool,
  nativeCurrency: _propTypes.default.string.isRequired,
  messagesCount: _propTypes.default.number,
  showRejectTransactionsConfirmationModal: _propTypes.default.func.isRequired,
  cancelAll: _propTypes.default.func.isRequired
});

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js", {"../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./signature-request-original.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-original\signature-request-original.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _app = require("../../../../shared/constants/app");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _util = require("../../../helpers/utils/util");

var _confirmTransaction = require("../../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../../ducks/history/history");

var _metamask = require("../../../ducks/metamask/metamask");

var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToProps(state, ownProps) {
  const {
    msgParams: {
      from
    }
  } = ownProps.txData;
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, from);
  const isLedgerWallet = (0, _metamask.isAddressLedger)(state, from);
  const messagesList = (0, _selectors.unconfirmedMessagesHashSelector)(state);
  const messagesCount = (0, _selectors.getTotalUnapprovedMessagesCount)(state);
  return {
    requester: null,
    requesterAddress: null,
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    hardwareWalletRequiresConnection,
    isLedgerWallet,
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    // not passed to component
    allAccounts: (0, _selectors.accountsWithSendEtherInfoSelector)(state),
    subjectMetadata: (0, _selectors.getSubjectMetadata)(state),
    messagesList,
    messagesCount
  };
}

function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount: messagesCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount: messagesCount
      }));
    },
    cancelAll: messagesList => dispatch((0, _actions.cancelMsgs)(messagesList))
  };
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    signPersonalMessage,
    signTypedMessage,
    cancelPersonalMessage,
    cancelTypedMessage,
    signMessage,
    cancelMessage,
    txData
  } = ownProps;
  const {
    allAccounts,
    messagesList,
    ...otherStateProps
  } = stateProps;
  const {
    type,
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const {
    cancelAll: dispatchCancelAll
  } = dispatchProps;
  let cancel;
  let sign;

  if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    cancel = cancelPersonalMessage;
    sign = signPersonalMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    cancel = cancelTypedMessage;
    sign = signTypedMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
    cancel = cancelMessage;
    sign = signMessage;
  }

  return { ...ownProps,
    ...otherStateProps,
    ...dispatchProps,
    fromAccount,
    txData,
    cancel,
    sign,
    cancelAll: () => dispatchCancelAll((0, _util.valuesFor)(messagesList))
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_signatureRequestOriginal.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\index.js", {"./signature-request-siwe":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiwe.default;
  }
});

var _signatureRequestSiwe = _interopRequireDefault(require("./signature-request-siwe"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js", {"./signature-request-siwe-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-header\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweHeader.default;
  }
});

var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js", {"../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../account-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../permissions-connect-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js","../signature-request-siwe-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js","../signature-request-siwe-tag":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-header\signature-request-siwe-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWEHeader;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accountListItem = _interopRequireDefault(require("../../account-list-item"));

var _i18n = require("../../../../contexts/i18n");

var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));

var _signatureRequestSiweIcon = _interopRequireDefault(require("../signature-request-siwe-icon"));

var _signatureRequestSiweTag = _interopRequireDefault(require("../signature-request-siwe-tag"));

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SignatureRequestSIWEHeader({
  fromAccount,
  domain,
  isSIWEDomainValid,
  subjectMetadata
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe-header"
  }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
    iconUrl: subjectMetadata.iconUrl,
    iconName: subjectMetadata.name,
    headerTitle: t('SIWESiteRequestTitle'),
    headerText: t('SIWESiteRequestSubtitle'),
    siteOrigin: domain,
    className: isSIWEDomainValid ? '' : 'bad-domain',
    leftIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweIcon.default, null)),
    rightIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweTag.default, {
      text: t('SIWEDomainWarningLabel')
    }))
  }), fromAccount && /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
    account: fromAccount,
    className: "signature-request-siwe-header__account-list-item"
  }));
}

SignatureRequestSIWEHeader.propTypes = {
  /**
   * The account that is requesting permissions
   */
  fromAccount: _propTypes.default.object,

  /**
   * The domain that the request is for
   */
  domain: _propTypes.default.string,

  /**
   * Whether the domain is valid
   */
  isSIWEDomainValid: _propTypes.default.bool,

  /**
   * The metadata for the subject. This is used to display the icon and name
   * and is selected from the domain in the SIWE request.
   */
  subjectMetadata: _propTypes.default.object
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../component-library/icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\index.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _icon = require("../../../component-library/icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SignatureRequestSIWEIcon = () => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-icon",
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    backgroundColor: _designSystem.COLORS.ERROR_DEFAULT,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_icon.Icon, {
    name: _icon.ICON_NAMES.DANGER_FILLED,
    color: _designSystem.COLORS.ERROR_INVERSE
  }));
};

var _default = SignatureRequestSIWEIcon;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js", {"./signature-request-siwe-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweMessage.default;
  }
});

var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-message\signature-request-siwe-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../../ui/box"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SignatureRequestSIWEMessage = ({
  data
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-message"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, data.map(({
    label,
    value
  }, i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    key: i.toString(),
    marginTop: 2,
    marginBottom: 2
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    marginTop: 2,
    marginBottom: 2
  }, label), /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "signature-request-siwe-message__sub-text",
    variant: _designSystem.TYPOGRAPHY.H6,
    marginTop: 2,
    marginBottom: 2
  }, value)))));
};

SignatureRequestSIWEMessage.propTypes = {
  /**
   * The data array that contains objects of data about the message
   */
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    /**
     * The label or title of the value data
     */
    label: _propTypes.default.string,

    /**
     * The value of the data
     */
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  }))
};

var _default = /*#__PURE__*/_react.default.memo(SignatureRequestSIWEMessage);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js", {"../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe-tag\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _typography = _interopRequireDefault(require("../../../ui/typography/typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SignatureRequestSIWETag = ({
  text
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-tag",
    marginRight: 1,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    backgroundColor: _designSystem.COLORS.ERROR_DEFAULT,
    borderRadius: _designSystem.SIZES.XL,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: 0,
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.ERROR_INVERSE
  }, text));
};

var _default = SignatureRequestSIWETag;
exports.default = _default;
SignatureRequestSIWETag.propTypes = {
  /**
   * The text to display in the tag
   */
  text: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js", {"../../../../shared/modules/siwe":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\siwe.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../component-library/icon/icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\icon.js","../../ui/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../ui/check-box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","./signature-request-siwe-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js","./signature-request-siwe-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request-siwe\signature-request-siwe.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWE;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _loglevel = _interopRequireDefault(require("loglevel"));

var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _checkBox = _interopRequireDefault(require("../../ui/check-box"));

var _i18n = require("../../../contexts/i18n");

var _pageContainer = require("../../ui/page-container");

var _selectors = require("../../../selectors");

var _util = require("../../../helpers/utils/util");

var _siwe = require("../../../../shared/modules/siwe");

var _icon = require("../../component-library/icon/icon");

var _designSystem = require("../../../helpers/constants/design-system");

var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));

var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SignatureRequestSIWE({
  txData,
  cancelPersonalMessage,
  signPersonalMessage
}) {
  const allAccounts = (0, _reactRedux.useSelector)(_selectors.accountsWithSendEtherInfoSelector);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const {
    msgParams: {
      from,
      origin,
      siwe: {
        parsedMessage
      }
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const targetSubjectMetadata = subjectMetadata[origin];
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const isMatchingAddress = from.toLowerCase() === parsedMessage.address.toLowerCase();

  const checkSIWEDomain = () => {
    let isSIWEDomainValid = false;

    if (origin) {
      const {
        host
      } = new URL(origin);
      isSIWEDomainValid = parsedMessage.domain === host;
    }

    return isSIWEDomainValid;
  };

  const isSIWEDomainValid = checkSIWEDomain();
  const [isShowingDomainWarning, setIsShowingDomainWarning] = (0, _react.useState)(false);
  const [agreeToDomainWarning, setAgreeToDomainWarning] = (0, _react.useState)(false);
  const onSign = (0, _react.useCallback)(async event => {
    try {
      await signPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [signPersonalMessage]);
  const onCancel = (0, _react.useCallback)(async event => {
    try {
      await cancelPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [cancelPersonalMessage]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe"
  }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweHeader.default, {
    fromAccount: fromAccount,
    domain: parsedMessage.domain,
    isSIWEDomainValid: isSIWEDomainValid,
    subjectMetadata: targetSubjectMetadata
  }), /*#__PURE__*/_react.default.createElement(_signatureRequestSiweMessage.default, {
    data: (0, _siwe.formatMessageParams)(parsedMessage, t)
  }), !isMatchingAddress && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "signature-request-siwe__actionable-message",
    type: "warning",
    message: t('SIWEAddressInvalid', [parsedMessage.address, fromAccount.address]),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true,
    withRightButton: true,
    icon: /*#__PURE__*/_react.default.createElement(_icon.Icon, {
      name: "danger-filled",
      color: _designSystem.COLORS.WARNING_DEFAULT
    })
  }), !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "signature-request-siwe__actionable-message",
    type: "danger",
    message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
      className: "typography--weight-bold",
      style: {
        display: 'inline'
      }
    }, t('SIWEDomainInvalidTitle')), ' ', t('SIWEDomainInvalidText')),
    iconFillColor: "var(--color-error-default)",
    useIcon: true,
    withRightButton: true,
    icon: /*#__PURE__*/_react.default.createElement(_icon.Icon, {
      name: "danger-filled",
      color: _designSystem.COLORS.ERROR_DEFAULT
    })
  }), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    footerClassName: "signature-request-siwe__page-container-footer",
    onCancel: onCancel,
    onSubmit: isSIWEDomainValid ? onSign : () => setIsShowingDomainWarning(true),
    cancelText: t('cancel'),
    submitText: t('signin'),
    submitButtonType: isSIWEDomainValid ? 'primary' : 'danger-primary'
  }), isShowingDomainWarning && /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: () => setIsShowingDomainWarning(false),
    title: t('SIWEWarningTitle'),
    subtitle: t('SIWEWarningSubtitle'),
    className: "signature-request-siwe__warning-popover",
    footerClassName: "signature-request-siwe__warning-popover__footer",
    footer: /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      footerClassName: "signature-request-siwe__warning-popover__footer__warning-footer",
      onCancel: () => setIsShowingDomainWarning(false),
      cancelText: t('cancel'),
      cancelButtonType: "default",
      onSubmit: onSign,
      submitText: t('confirm'),
      submitButtonType: "danger-primary",
      disabled: !agreeToDomainWarning
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "signature-request-siwe_domain-checkbox",
    checked: agreeToDomainWarning,
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__checkbox",
    onClick: () => setAgreeToDomainWarning(checked => !checked)
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__label",
    htmlFor: "signature-request-siwe_domain-checkbox"
  }, t('SIWEDomainWarningBody', [parsedMessage.domain])))));
}

SignatureRequestSIWE.propTypes = {
  /**
   * The display content of transaction data
   */
  txData: _propTypes.default.object.isRequired,

  /**
   * Handler for cancel button
   */
  cancelPersonalMessage: _propTypes.default.func.isRequired,

  /**
   * Handler for sign button
   */
  signPersonalMessage: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\index.js", {"./signature-request.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequest.default;
  }
});

var _signatureRequest = _interopRequireDefault(require("./signature-request.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\index.js", {"./signature-request-data":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-data\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestData.default;
  }
});

var _signatureRequestData = _interopRequireDefault(require("./signature-request-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js", {"../../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../transaction-decoding/components/decoding/address":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-data\signature-request-data.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestData;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _selectors = require("../../../../selectors");

var _address = _interopRequireDefault(require("../../transaction-decoding/components/decoding/address"));

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SignatureRequestData({
  data
}) {
  const identities = (0, _reactRedux.useSelector)(_selectors.getMetaMaskIdentities);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node"
  }, Object.entries(data).map(([label, value], i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node",
    key: i,
    paddingLeft: 2,
    display: typeof value !== 'object' || value === null ? _designSystem.DISPLAY.FLEX : null
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    marginLeft: 4,
    fontWeight: typeof value === 'object' ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL
  }, label.charAt(0).toUpperCase() + label.slice(1), ":", ' '), typeof value === 'object' && value !== null ? /*#__PURE__*/_react.default.createElement(SignatureRequestData, {
    data: value
  }) : /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.COLORS.TEXT_DEFAULT,
    marginLeft: 4,
    className: "signature-request-data__node__value"
  }, (0, _hexstringUtils.isValidHexAddress)(value, {
    mixedCaseUseChecksum: true
  }) ? /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.INFO_DEFAULT,
    className: "signature-request-data__node__value__address"
  }, /*#__PURE__*/_react.default.createElement(_address.default, {
    addressOnly: true,
    checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(value),
    recipientName: (0, _selectors.getAccountName)(identities, value)
  })) : `${value}`))));
}

SignatureRequestData.propTypes = {
  data: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]).isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\index.js", {"./signature-request-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-footer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestFooter.default;
  }
});

var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js", {"../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-footer\signature-request-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../ui/button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SignatureRequestFooter extends _react.PureComponent {
  render() {
    const {
      cancelAction,
      signAction,
      disabled = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: cancelAction,
      type: "secondary",
      "data-testid": "signature-cancel-button"
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: signAction,
      type: "primary",
      "data-testid": "signature-sign-button",
      disabled: disabled
    }, this.context.t('sign')));
  }

}

exports.default = SignatureRequestFooter;

_defineProperty(SignatureRequestFooter, "propTypes", {
  cancelAction: _propTypes.default.func.isRequired,
  signAction: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool
});

_defineProperty(SignatureRequestFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-header\\index.js", {"./signature-request-header.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-header\\signature-request-header.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-header\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestHeader.default;
  }
});

var _signatureRequestHeader = _interopRequireDefault(require("./signature-request-header.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-header\\signature-request-header.component.js", {"../../account-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../network-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\network-display\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-header\signature-request-header.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accountListItem = _interopRequireDefault(require("../../account-list-item"));

var _networkDisplay = _interopRequireDefault(require("../../network-display"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SignatureRequestHeader extends _react.PureComponent {
  render() {
    const {
      fromAccount
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header--account"
    }, fromAccount ? /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
      account: fromAccount
    }) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header--network"
    }, /*#__PURE__*/_react.default.createElement(_networkDisplay.default, null)));
  }

}

exports.default = SignatureRequestHeader;

_defineProperty(SignatureRequestHeader, "propTypes", {
  fromAccount: _propTypes.default.object
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\index.js", {"./signature-request-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestMessage.default;
  }
});

var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js", {"../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../signature-request-data":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request-message\signature-request-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestMessage;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _i18n = require("../../../../contexts/i18n");

var _box = _interopRequireDefault(require("../../../ui/box"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _designSystem = require("../../../../helpers/constants/design-system");

var _signatureRequestData = _interopRequireDefault(require("../signature-request-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SignatureRequestMessage({
  data,
  onMessageScrolled,
  setMessageRootRef,
  messageRootRef,
  messageIsScrollable
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [messageIsScrolled, setMessageIsScrolled] = (0, _react.useState)(false);

  const setMessageIsScrolledAtBottom = () => {
    if (!messageRootRef || messageIsScrolled) {
      return;
    }

    const {
      scrollTop,
      offsetHeight,
      scrollHeight
    } = messageRootRef;
    const isAtBottom = Math.round(scrollTop) + offsetHeight >= scrollHeight;

    if (isAtBottom) {
      setMessageIsScrolled(true);
      onMessageScrolled();
    }
  };

  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    onScroll: (0, _lodash.debounce)(setMessageIsScrolledAtBottom, 25),
    className: "signature-request-message"
  }, messageIsScrollable ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    borderColor: _designSystem.COLORS.BORDER_DEFAULT,
    backgroundColor: _designSystem.COLORS.BACKGROUND_DEFAULT,
    color: _designSystem.COLORS.ICON_DEFAULT,
    onClick: () => {
      setMessageIsScrolled(true);
      onMessageScrolled();
      messageRootRef === null || messageRootRef === void 0 ? void 0 : messageRootRef.scrollTo(0, messageRootRef === null || messageRootRef === void 0 ? void 0 : messageRootRef.scrollHeight);
    },
    className: "signature-request-message__scroll-button",
    "data-testid": "signature-request-scroll-button"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-down",
    "aria-label": t('scrollDown')
  })) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    backgroundColor: _designSystem.COLORS.BACKGROUND_DEFAULT,
    paddingBottom: 3,
    paddingTop: 3,
    paddingRight: 3,
    margin: 2,
    borderRadius: _designSystem.SIZES.XL,
    borderColor: _designSystem.COLORS.BORDER_MUTED,
    className: "signature-request-message__root",
    ref: setMessageRootRef
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    marginLeft: 4,
    className: "signature-request-message__title"
  }, t('signatureRequest1')), /*#__PURE__*/_react.default.createElement(_signatureRequestData.default, {
    data: data
  })));
}

SignatureRequestMessage.propTypes = {
  data: _propTypes.default.object.isRequired,
  onMessageScrolled: _propTypes.default.func,
  setMessageRootRef: _propTypes.default.func,
  messageRootRef: _propTypes.default.object,
  messageIsScrollable: _propTypes.default.bool
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../ledger-instruction-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","./signature-request-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\index.js","./signature-request-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-header\\index.js","./signature-request-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));

var _util = require("../../../helpers/utils/util");

var _metametrics = require("../../../../shared/constants/metametrics");

var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));

var _signatureRequestHeader = _interopRequireDefault(require("./signature-request-header"));

var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer"));

var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SignatureRequest extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      hasScrolledMessage: false
    });
  }

  setMessageRootRef(ref) {
    this.messageRootRef = ref;
  }

  formatWallet(wallet) {
    return `${wallet.slice(0, 8)}...${wallet.slice(wallet.length - 8, wallet.length)}`;
  }

  render() {
    var _this$messageRootRef, _this$messageRootRef2;

    const {
      fromAccount,
      txData: {
        msgParams: {
          data,
          origin,
          version
        },
        type
      },
      cancel,
      sign,
      isLedgerWallet,
      hardwareWalletRequiresConnection
    } = this.props;
    const {
      address: fromAddress
    } = fromAccount;
    const {
      message,
      domain = {},
      primaryType,
      types
    } = JSON.parse(data);
    const {
      trackEvent
    } = this.context;

    const onSign = event => {
      sign(event);
      trackEvent({
        category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
        event: 'Confirm',
        properties: {
          action: 'Sign Request',
          legacy_event: true,
          type,
          version
        }
      });
    };

    const onCancel = event => {
      cancel(event);
      trackEvent({
        category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
        event: 'Cancel',
        properties: {
          action: 'Sign Request',
          legacy_event: true,
          type,
          version
        }
      });
    };

    const messageIsScrollable = ((_this$messageRootRef = this.messageRootRef) === null || _this$messageRootRef === void 0 ? void 0 : _this$messageRootRef.scrollHeight) > ((_this$messageRootRef2 = this.messageRootRef) === null || _this$messageRootRef2 === void 0 ? void 0 : _this$messageRootRef2.clientHeight);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request page-container"
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestHeader.default, {
      fromAccount: fromAccount
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__title"
    }, this.context.t('sigRequest')), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__identicon-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__identicon-initial"
    }, domain.name && domain.name[0]), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__identicon-border"
    }), /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: fromAddress,
      diameter: 70
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__info--bolded"
    }, domain.name), /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      className: "signature-request-content__info",
      siteOrigin: origin
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content__info"
    }, this.formatWallet(fromAddress))), isLedgerWallet ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__ledger-instruction-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: true
    })) : null, /*#__PURE__*/_react.default.createElement(_signatureRequestMessage.default, {
      data: (0, _util.sanitizeMessage)(message, primaryType, types),
      onMessageScrolled: () => this.setState({
        hasScrolledMessage: true
      }),
      setMessageRootRef: this.setMessageRootRef.bind(this),
      messageRootRef: this.messageRootRef,
      messageIsScrollable: messageIsScrollable
    }), /*#__PURE__*/_react.default.createElement(_signatureRequestFooter.default, {
      cancelAction: onCancel,
      signAction: onSign,
      disabled: hardwareWalletRequiresConnection || messageIsScrollable && !this.state.hasScrolledMessage
    }));
  }

}

exports.default = SignatureRequest;

_defineProperty(SignatureRequest, "propTypes", {
  /**
   * The display content of transaction data
   */
  txData: _propTypes.default.object.isRequired,

  /**
   * The display content of sender account
   */
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,

  /**
   * Check if the wallet is ledget wallet or not
   */
  isLedgerWallet: _propTypes.default.bool,

  /**
   * Handler for cancel button
   */
  cancel: _propTypes.default.func.isRequired,

  /**
   * Handler for sign button
   */
  sign: _propTypes.default.func.isRequired,

  /**
   * Whether the hardware wallet requires a connection disables the sign button if true.
   */
  hardwareWalletRequiresConnection: _propTypes.default.bool.isRequired
});

_defineProperty(SignatureRequest, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.container.js", {"../../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./signature-request.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\signature-request\signature-request.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _util = require("../../../helpers/utils/util");

var _app = require("../../../../shared/constants/app");

var _signatureRequest = _interopRequireDefault(require("./signature-request.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapStateToProps(state, ownProps) {
  const {
    txData
  } = ownProps;
  const {
    msgParams: {
      from
    }
  } = txData;
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, from);
  const isLedgerWallet = (0, _metamask.isAddressLedger)(state, from);
  return {
    isLedgerWallet,
    hardwareWalletRequiresConnection,
    // not forwarded to component
    allAccounts: (0, _selectors.accountsWithSendEtherInfoSelector)(state)
  };
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    allAccounts,
    isLedgerWallet,
    hardwareWalletRequiresConnection
  } = stateProps;
  const {
    signPersonalMessage,
    signTypedMessage,
    cancelPersonalMessage,
    cancelTypedMessage,
    signMessage,
    cancelMessage,
    txData
  } = ownProps;
  const {
    type,
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  let cancel;
  let sign;

  if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    cancel = cancelPersonalMessage;
    sign = signPersonalMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    cancel = cancelTypedMessage;
    sign = signTypedMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
    cancel = cancelMessage;
    sign = signMessage;
  }

  return { ...ownProps,
    ...dispatchProps,
    fromAccount,
    txData,
    cancel,
    sign,
    isLedgerWallet,
    hardwareWalletRequiresConnection
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps, null, mergeProps)(_signatureRequest.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\index.js", {"./srp-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\srp-input.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\srp-input\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _srpInput.default;
  }
});

var _srpInput = _interopRequireDefault(require("./srp-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\parse-secret-recovery-phrase.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\srp-input\parse-secret-recovery-phrase.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSecretRecoveryPhrase = void 0;

const parseSecretRecoveryPhrase = seedPhrase => {
  var _trim$toLowerCase$mat;

  return ((_trim$toLowerCase$mat = (seedPhrase || '').trim().toLowerCase().match(/\w+/gu)) === null || _trim$toLowerCase$mat === void 0 ? void 0 : _trim$toLowerCase$mat.join(' ')) || '';
};

exports.parseSecretRecoveryPhrase = parseSecretRecoveryPhrase;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\srp-input.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../ui/dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../ui/show-hide-toggle":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\show-hide-toggle\\index.js","../../ui/text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","./parse-secret-recovery-phrase":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\srp-input\\parse-secret-recovery-phrase.js","ethers":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethers\\lib\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\srp-input\srp-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SrpInput;

var _ethers = require("ethers");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _textField = _interopRequireDefault(require("../../ui/text-field"));

var _util = require("../../../helpers/utils/util");

var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message"));

var _dropdown = _interopRequireDefault(require("../../ui/dropdown"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _showHideToggle = _interopRequireDefault(require("../../ui/show-hide-toggle"));

var _designSystem = require("../../../helpers/constants/design-system");

var _parseSecretRecoveryPhrase = require("./parse-secret-recovery-phrase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  isValidMnemonic
} = _ethers.ethers.utils;
const defaultNumberOfWords = 12;

const hasUpperCase = draftSrp => {
  return draftSrp !== draftSrp.toLowerCase();
};

function SrpInput({
  onChange,
  srpText
}) {
  const [srpError, setSrpError] = (0, _react.useState)('');
  const [pasteFailed, setPasteFailed] = (0, _react.useState)(false);
  const [draftSrp, setDraftSrp] = (0, _react.useState)(new Array(defaultNumberOfWords).fill(''));
  const [showSrp, setShowSrp] = (0, _react.useState)(new Array(defaultNumberOfWords).fill(false));
  const [numberOfWords, setNumberOfWords] = (0, _react.useState)(defaultNumberOfWords);
  const t = (0, _useI18nContext.useI18nContext)();
  const onSrpChange = (0, _react.useCallback)(newDraftSrp => {
    let newSrpError = '';
    const joinedDraftSrp = newDraftSrp.join(' ').trim();

    if (newDraftSrp.some(word => word !== '')) {
      if (newDraftSrp.some(word => word === '')) {
        newSrpError = t('seedPhraseReq');
      } else if (hasUpperCase(joinedDraftSrp)) {
        newSrpError = t('invalidSeedPhraseCaseSensitive');
      } else if (!isValidMnemonic(joinedDraftSrp)) {
        newSrpError = t('invalidSeedPhrase');
      }
    }

    setDraftSrp(newDraftSrp);
    setSrpError(newSrpError);
    onChange(newSrpError ? '' : joinedDraftSrp);
  }, [setDraftSrp, setSrpError, t, onChange]);
  const toggleShowSrp = (0, _react.useCallback)(index => {
    setShowSrp(currentShowSrp => {
      const newShowSrp = currentShowSrp.slice();

      if (newShowSrp[index]) {
        newShowSrp[index] = false;
      } else {
        newShowSrp.fill(false);
        newShowSrp[index] = true;
      }

      return newShowSrp;
    });
  }, []);
  const onSrpWordChange = (0, _react.useCallback)((index, newWord) => {
    if (pasteFailed) {
      setPasteFailed(false);
    }

    const newSrp = draftSrp.slice();
    newSrp[index] = newWord.trim();
    onSrpChange(newSrp);
  }, [draftSrp, onSrpChange, pasteFailed]);
  const onSrpPaste = (0, _react.useCallback)(rawSrp => {
    const parsedSrp = (0, _parseSecretRecoveryPhrase.parseSecretRecoveryPhrase)(rawSrp);
    let newDraftSrp = parsedSrp.split(' ');

    if (newDraftSrp.length > 24) {
      setPasteFailed(true);
      return;
    } else if (pasteFailed) {
      setPasteFailed(false);
    }

    let newNumberOfWords = numberOfWords;

    if (newDraftSrp.length !== numberOfWords) {
      if (newDraftSrp.length < 12) {
        newNumberOfWords = 12;
      } else if (newDraftSrp.length % 3 === 0) {
        newNumberOfWords = newDraftSrp.length;
      } else {
        newNumberOfWords = newDraftSrp.length + (3 - newDraftSrp.length % 3);
      }

      setNumberOfWords(newNumberOfWords);
    }

    if (newDraftSrp.length < newNumberOfWords) {
      newDraftSrp = newDraftSrp.concat(new Array(newNumberOfWords - newDraftSrp.length).fill(''));
    }

    setShowSrp(new Array(newNumberOfWords).fill(false));
    onSrpChange(newDraftSrp);
    (0, _util.clearClipboard)();
  }, [numberOfWords, onSrpChange, pasteFailed, setPasteFailed]);
  const numberOfWordsOptions = [];

  for (let i = 12; i <= 24; i += 3) {
    numberOfWordsOptions.push({
      name: t('srpInputNumberOfWords', [`${i}`]),
      value: `${i}`
    });
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__container"
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: "import-srp__srp-label"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.LEFT,
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, srpText)), /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__paste-tip",
    iconFillColor: "var(--color-info-default)",
    message: t('srpPasteTip'),
    useIcon: true
  }), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    className: "import-srp__number-of-words-dropdown",
    onChange: newSelectedOption => {
      const newNumberOfWords = parseInt(newSelectedOption, 10);

      if (Number.isNaN(newNumberOfWords)) {
        throw new Error('Unable to parse option as integer');
      }

      let newDraftSrp = draftSrp.slice(0, newNumberOfWords);

      if (newDraftSrp.length < newNumberOfWords) {
        newDraftSrp = newDraftSrp.concat(new Array(newNumberOfWords - newDraftSrp.length).fill(''));
      }

      setNumberOfWords(newNumberOfWords);
      setShowSrp(new Array(newNumberOfWords).fill(false));
      onSrpChange(newDraftSrp);
    },
    options: numberOfWordsOptions,
    selectedOption: `${numberOfWords}`
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__srp"
  }, [...Array(numberOfWords).keys()].map(index => {
    const id = `import-srp__srp-word-${index}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "import-srp__srp-word"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      className: "import-srp__srp-word-label"
    }, /*#__PURE__*/_react.default.createElement(_typography.default, null, `${index + 1}.`)), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: id,
      "data-testid": id,
      type: showSrp[index] ? 'text' : 'password',
      onChange: e => {
        e.preventDefault();
        onSrpWordChange(index, e.target.value);
      },
      value: draftSrp[index],
      autoComplete: "off",
      onPaste: event => {
        const newSrp = event.clipboardData.getData('text');

        if (newSrp.trim().match(/\s/u)) {
          event.preventDefault();
          onSrpPaste(newSrp);
        }
      }
    }), /*#__PURE__*/_react.default.createElement(_showHideToggle.default, {
      id: `${id}-checkbox`,
      ariaLabelHidden: t('srpWordHidden'),
      ariaLabelShown: t('srpWordShown'),
      shown: showSrp[index],
      "data-testid": `${id}-checkbox`,
      onChange: () => toggleShowSrp(index),
      title: t('srpToggleShow')
    }));
  })), srpError ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__srp-error",
    iconFillColor: "var(--color-error-default)",
    message: srpError,
    type: "danger",
    useIcon: true
  }) : null, pasteFailed ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__srp-too-many-words-error",
    iconFillColor: "var(--color-error-default)",
    message: t('srpPasteFailedTooManyWords'),
    primaryAction: {
      label: t('dismiss'),
      onClick: () => setPasteFailed(false)
    },
    type: "danger",
    useIcon: true
  }) : null);
}

SrpInput.propTypes = {
  /**
   * Event handler for SRP changes.
   *
   * This is only called with a valid, well-formated (i.e. exactly one space
   * between each word) SRP or with an empty string.
   *
   * This is called each time the draft SRP is updated. If the draft SRP is
   * valid, this is called with a well-formatted version of that draft SRP.
   * Otherwise, this is called with an empty string.
   */
  onChange: _propTypes.default.func.isRequired,

  /**
   * Text to show on the left of the Dropdown component. Wrapped in Typography component.
   */
  srpText: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\step-progress-bar\\index.js", {"./step-progress-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\step-progress-bar\\step-progress-bar.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\step-progress-bar\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ThreeStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.ThreeStepProgressBar;
  }
});
Object.defineProperty(exports, "TwoStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.TwoStepProgressBar;
  }
});
Object.defineProperty(exports, "threeStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.threeStepStages;
  }
});
Object.defineProperty(exports, "twoStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.twoStepStages;
  }
});

var _stepProgressBar = require("./step-progress-bar");

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\step-progress-bar\\step-progress-bar.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\step-progress-bar\step-progress-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreeStepProgressBar = ThreeStepProgressBar;
exports.TwoStepProgressBar = TwoStepProgressBar;
exports.twoStepStages = exports.threeStepStages = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../ui/box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const threeStepStages = {
  PASSWORD_CREATE: 1,
  RECOVERY_PHRASE_VIDEO: 2,
  RECOVERY_PHRASE_REVIEW: 3,
  RECOVERY_PHRASE_CONFIRM: 4,
  ONBOARDING_COMPLETE: 5
};
exports.threeStepStages = threeStepStages;
const twoStepStages = {
  RECOVERY_PHRASE_CONFIRM: 1,
  PASSWORD_CREATE: 2
};
exports.twoStepStages = twoStepStages;

function ThreeStepProgressBar({
  stage,
  ...boxProps
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, boxProps, /*#__PURE__*/_react.default.createElement("ul", {
    className: "progressbar"
  }, /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 1,
      complete: stage > 1
    })
  }, (0, _lodash.capitalize)(t('createPassword'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 2,
      complete: stage > 3
    })
  }, (0, _lodash.capitalize)(t('secureWallet'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 4,
      complete: stage > 5
    })
  }, (0, _lodash.capitalize)(t('confirmRecoveryPhrase')))));
}

function TwoStepProgressBar({
  stage,
  ...boxProps
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    width: _designSystem.BLOCK_SIZES.FULL
  }, boxProps), /*#__PURE__*/_react.default.createElement("ul", {
    className: "progressbar two-steps"
  }, /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 1,
      complete: stage > 1
    })
  }, (0, _lodash.capitalize)(t('confirmRecoveryPhrase'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)('two-steps', {
      active: stage >= 2,
      complete: stage > 2
    })
  }, (0, _lodash.capitalize)(t('createPassword')))));
}

ThreeStepProgressBar.propTypes = {
  stage: _propTypes.default.number,
  ..._box.default.propTypes
};
TwoStepProgressBar.propTypes = {
  stage: _propTypes.default.number,
  ..._box.default.propTypes
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\tab-bar\\index.js", {"./tab-bar":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\tab-bar\\tab-bar.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\tab-bar\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tabBar.default;
  }
});

var _tabBar = _interopRequireDefault(require("./tab-bar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\tab-bar\\tab-bar.js", {"../../ui/icon/icon-caret-right":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-right.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\tab-bar\tab-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconCaretRight = _interopRequireDefault(require("../../ui/icon/icon-caret-right"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TabBar = props => {
  const {
    tabs = [],
    onSelect,
    isActive
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar"
  }, tabs.map(({
    key,
    content,
    icon
  }) => /*#__PURE__*/_react.default.createElement("button", {
    key: key,
    className: (0, _classnames.default)('tab-bar__tab pointer', {
      'tab-bar__tab--active': isActive(key, content)
    }),
    onClick: () => onSelect(key)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__icon"
  }, icon), /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__title"
  }, content)), /*#__PURE__*/_react.default.createElement(_iconCaretRight.default, {
    className: "tab-bar__tab__caret"
  }))));
};

TabBar.propTypes = {
  isActive: _propTypes.default.func.isRequired,
  tabs: _propTypes.default.array,
  onSelect: _propTypes.default.func
};
var _default = TabBar;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-cell\\index.js", {"./token-cell":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-cell\\token-cell.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-cell\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenCell.default;
  }
});

var _tokenCell = _interopRequireDefault(require("./token-cell"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-cell\\token-cell.js", {"../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../asset-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\asset-list-item\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-cell\token-cell.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenCell;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _assetListItem = _interopRequireDefault(require("../asset-list-item"));

var _selectors = require("../../../selectors");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TokenCell({
  address,
  decimals,
  balanceError,
  symbol,
  string,
  onClick,
  isERC721
}) {
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const t = (0, _useI18nContext.useI18nContext)();
  const formattedFiat = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, string, symbol);
  const warning = balanceError ? /*#__PURE__*/_react.default.createElement("span", null, t('troubleTokenBalances'), /*#__PURE__*/_react.default.createElement("a", {
    href: `https://ethplorer.io/address/${userAddress}`,
    rel: "noopener noreferrer",
    target: "_blank",
    onClick: event => event.stopPropagation(),
    style: {
      color: 'var(--color-warning-default)'
    }
  }, t('here'))) : null;
  return /*#__PURE__*/_react.default.createElement(_assetListItem.default, {
    className: (0, _classnames.default)('token-cell', {
      'token-cell--outdated': Boolean(balanceError)
    }),
    iconClassName: "token-cell__icon",
    onClick: onClick.bind(null, address),
    tokenAddress: address,
    tokenSymbol: symbol,
    tokenDecimals: decimals,
    warning: warning,
    primary: `${string || 0}`,
    secondary: formattedFiat,
    isERC721: isERC721
  });
}

TokenCell.propTypes = {
  address: _propTypes.default.string,
  balanceError: _propTypes.default.object,
  symbol: _propTypes.default.string,
  decimals: _propTypes.default.number,
  string: _propTypes.default.string,
  onClick: _propTypes.default.func.isRequired,
  isERC721: _propTypes.default.bool
};
TokenCell.defaultProps = {
  balanceError: null
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list-display\\index.js", {"./token-list-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list-display\\token-list-display.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-list-display\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenListDisplay.default;
  }
});

var _tokenListDisplay = _interopRequireDefault(require("./token-list-display"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list-display\\token-list-display.js", {"../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/token-balance":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-list-display\token-list-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenListDisplay;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _lodash = require("lodash");

var _selectors = require("../../../selectors");

var _useTokenTracker = require("../../../hooks/useTokenTracker");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _tokenBalance = _interopRequireDefault(require("../../ui/token-balance"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _metamask = require("../../../ducks/metamask/metamask");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TokenListDisplay({
  clickHandler
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const shouldHideZeroBalanceTokens = (0, _reactRedux.useSelector)(_selectors.getShouldHideZeroBalanceTokens);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const {
    loading,
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens, true, shouldHideZeroBalanceTokens);

  if (loading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-span"
    }, t('loadingTokens'));
  }

  const sendableTokens = tokensWithBalances.filter(token => !token.isERC721);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, sendableTokens.map(tokenData => {
    const {
      address,
      symbol,
      image
    } = tokenData;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: address,
      className: "token-list-item",
      onClick: () => clickHandler(tokenData)
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 36,
      image: image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__balance"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "token-list-item__balance__label"
    }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: tokenData
    }))));
  }));
}

TokenListDisplay.propTypes = {
  clickHandler: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list\\index.js", {"./token-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list\\token-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenList.default;
  }
});

var _tokenList = _interopRequireDefault(require("./token-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-list\\token-list.js", {"../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../token-cell":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\token-cell\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\token-list\token-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenList;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _reactRedux = require("react-redux");

var _tokenCell = _interopRequireDefault(require("../token-cell"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useTokenTracker = require("../../../hooks/useTokenTracker");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function TokenList({
  onTokenClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const shouldHideZeroBalanceTokens = (0, _reactRedux.useSelector)(_selectors.getShouldHideZeroBalanceTokens); // use `isEqual` comparison function because the token array is serialized
  // from the background so it has a new reference with each background update,
  // even if the tokens haven't changed

  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const {
    loading,
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens, true, shouldHideZeroBalanceTokens);

  if (loading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex',
        height: '250px',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '30px'
      }
    }, t('loadingTokens'));
  }

  return /*#__PURE__*/_react.default.createElement("div", null, tokensWithBalances.map((tokenData, index) => {
    return /*#__PURE__*/_react.default.createElement(_tokenCell.default, _extends({
      key: index
    }, tokenData, {
      onClick: onTokenClick
    }));
  }));
}

TokenList.propTypes = {
  onTokenClick: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\index.js", {"./transaction-activity-log.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionActivityLog.default;
  }
});

var _transactionActivityLog = _interopRequireDefault(require("./transaction-activity-log.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\index.js", {"./transaction-activity-log-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\transaction-activity-log-icon.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionActivityLogIcon.default;
  }
});

var _transactionActivityLogIcon = _interopRequireDefault(require("./transaction-activity-log-icon.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\transaction-activity-log-icon.component.js", {"../transaction-activity-log.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log-icon\transaction-activity-log-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imageHash = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _transactionActivityLog = require("../transaction-activity-log.constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const imageHash = {
  [_transactionActivityLog.TRANSACTION_CREATED_EVENT]: 'fa-plus',
  [_transactionActivityLog.TRANSACTION_SUBMITTED_EVENT]: 'fa-arrow-up',
  [_transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT]: 'fa-retweet',
  [_transactionActivityLog.TRANSACTION_CONFIRMED_EVENT]: 'fa-check',
  [_transactionActivityLog.TRANSACTION_DROPPED_EVENT]: 'fa-times',
  [_transactionActivityLog.TRANSACTION_ERRORED_EVENT]: 'fa-exclamation',
  [_transactionActivityLog.TRANSACTION_CANCEL_ATTEMPTED_EVENT]: 'fa-times',
  [_transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT]: 'fa-times'
};
exports.imageHash = imageHash;

class TransactionActivityLogIcon extends _react.PureComponent {
  render() {
    const {
      className,
      eventKey
    } = this.props;
    const iconClassName = imageHash[eventKey];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-activity-log-icon', className)
    }, iconClassName ? /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('fa', 'transaction-activity-log-icon__icon', iconClassName)
    }) : null);
  }

}

exports.default = TransactionActivityLogIcon;

_defineProperty(TransactionActivityLogIcon, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TransactionActivityLogIcon, "propTypes", {
  className: _propTypes.default.string,
  eventKey: _propTypes.default.oneOf(Object.keys(imageHash))
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","./transaction-activity-log-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\index.js","./transaction-activity-log.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _etherscanLink = require("@metamask/etherscan-link");

var _conversions = require("../../../helpers/utils/conversions.util");

var _util = require("../../../helpers/utils/util");

var _metametrics = require("../../../../shared/constants/metametrics");

var _transactionActivityLogIcon = _interopRequireDefault(require("./transaction-activity-log-icon"));

var _transactionActivityLog = require("./transaction-activity-log.constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransactionActivityLog extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleActivityClick", activity => {
      const {
        rpcPrefs
      } = this.props;
      const etherscanUrl = (0, _etherscanLink.getBlockExplorerLink)(activity, rpcPrefs);
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
        event: 'Clicked Block Explorer Link',
        properties: {
          link_type: 'Transaction Block Explorer',
          action: 'Activity Details',
          block_explorer_domain: (0, _util.getURLHostName)(etherscanUrl)
        }
      });
      global.platform.openTab({
        url: etherscanUrl
      });
    });
  }

  renderInlineRetry(index) {
    const {
      t
    } = this.context;
    const {
      inlineRetryIndex,
      primaryTransaction = {},
      onRetry,
      isEarliestNonce
    } = this.props;
    const {
      status
    } = primaryTransaction;
    return isEarliestNonce && status !== _transactionActivityLog.CONFIRMED_STATUS && index === inlineRetryIndex ? /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__action-link",
      onClick: onRetry
    }, t('speedUpTransaction')) : null;
  }

  renderInlineCancel(index) {
    const {
      t
    } = this.context;
    const {
      inlineCancelIndex,
      primaryTransaction = {},
      onCancel,
      isEarliestNonce
    } = this.props;
    const {
      status
    } = primaryTransaction;
    return isEarliestNonce && status !== _transactionActivityLog.CONFIRMED_STATUS && index === inlineCancelIndex ? /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__action-link",
      onClick: onCancel
    }, t('speedUpCancellation')) : null;
  }

  renderActivity(activity, index) {
    const {
      conversionRate,
      nativeCurrency
    } = this.props;
    const {
      eventKey,
      value,
      timestamp
    } = activity;
    const ethValue = index === 0 ? `${(0, _conversions.getValueFromWeiHex)({
      value,
      fromCurrency: 'ETH',
      toCurrency: 'ETH',
      conversionRate,
      numberOfDecimals: 6
    })} ${nativeCurrency}` : (0, _conversions.getEthConversionFromWeiHex)({
      value,
      fromCurrency: 'ETH',
      conversionRate,
      numberOfDecimals: 3
    });
    const formattedTimestamp = (0, _util.formatDate)(timestamp, "T 'on' M/d/y");
    const activityText = this.context.t(eventKey, [ethValue, formattedTimestamp]);
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "transaction-activity-log__activity"
    }, /*#__PURE__*/_react.default.createElement(_transactionActivityLogIcon.default, {
      className: "transaction-activity-log__activity-icon",
      eventKey: eventKey
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__entry-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__activity-text",
      title: activityText,
      onClick: () => this.handleActivityClick(activity)
    }, activityText), this.renderInlineRetry(index), this.renderInlineCancel(index)));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      className,
      activities
    } = this.props;

    if (activities.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-activity-log', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__title"
    }, t('activityLog')), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__activities-container"
    }, activities.map((activity, index) => this.renderActivity(activity, index))));
  }

}

exports.default = TransactionActivityLog;

_defineProperty(TransactionActivityLog, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(TransactionActivityLog, "propTypes", {
  activities: _propTypes.default.array,
  className: _propTypes.default.string,
  conversionRate: _propTypes.default.number,
  inlineRetryIndex: _propTypes.default.number,
  inlineCancelIndex: _propTypes.default.number,
  nativeCurrency: _propTypes.default.string,
  onCancel: _propTypes.default.func,
  onRetry: _propTypes.default.func,
  primaryTransaction: _propTypes.default.object,
  isEarliestNonce: _propTypes.default.bool,
  rpcPrefs: _propTypes.default.object
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRANSACTION_UPDATED_EVENT = exports.TRANSACTION_SUBMITTED_EVENT = exports.TRANSACTION_RESUBMITTED_EVENT = exports.TRANSACTION_ERRORED_EVENT = exports.TRANSACTION_DROPPED_EVENT = exports.TRANSACTION_CREATED_EVENT = exports.TRANSACTION_CONFIRMED_EVENT = exports.TRANSACTION_CANCEL_SUCCESS_EVENT = exports.TRANSACTION_CANCEL_ATTEMPTED_EVENT = exports.SUBMITTED_STATUS = exports.DROPPED_STATUS = exports.CONFIRMED_STATUS = void 0;
const TRANSACTION_CREATED_EVENT = 'transactionCreated';
exports.TRANSACTION_CREATED_EVENT = TRANSACTION_CREATED_EVENT;
const TRANSACTION_SUBMITTED_EVENT = 'transactionSubmitted';
exports.TRANSACTION_SUBMITTED_EVENT = TRANSACTION_SUBMITTED_EVENT;
const TRANSACTION_RESUBMITTED_EVENT = 'transactionResubmitted';
exports.TRANSACTION_RESUBMITTED_EVENT = TRANSACTION_RESUBMITTED_EVENT;
const TRANSACTION_CONFIRMED_EVENT = 'transactionConfirmed';
exports.TRANSACTION_CONFIRMED_EVENT = TRANSACTION_CONFIRMED_EVENT;
const TRANSACTION_DROPPED_EVENT = 'transactionDropped';
exports.TRANSACTION_DROPPED_EVENT = TRANSACTION_DROPPED_EVENT;
const TRANSACTION_UPDATED_EVENT = 'transactionUpdated';
exports.TRANSACTION_UPDATED_EVENT = TRANSACTION_UPDATED_EVENT;
const TRANSACTION_ERRORED_EVENT = 'transactionErrored';
exports.TRANSACTION_ERRORED_EVENT = TRANSACTION_ERRORED_EVENT;
const TRANSACTION_CANCEL_ATTEMPTED_EVENT = 'transactionCancelAttempted';
exports.TRANSACTION_CANCEL_ATTEMPTED_EVENT = TRANSACTION_CANCEL_ATTEMPTED_EVENT;
const TRANSACTION_CANCEL_SUCCESS_EVENT = 'transactionCancelSuccess';
exports.TRANSACTION_CANCEL_SUCCESS_EVENT = TRANSACTION_CANCEL_SUCCESS_EVENT;
const SUBMITTED_STATUS = 'submitted';
exports.SUBMITTED_STATUS = SUBMITTED_STATUS;
const CONFIRMED_STATUS = 'confirmed';
exports.CONFIRMED_STATUS = CONFIRMED_STATUS;
const DROPPED_STATUS = 'dropped';
exports.DROPPED_STATUS = DROPPED_STATUS;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.container.js", {"../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./transaction-activity-log.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.component.js","./transaction-activity-log.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","./transaction-activity-log.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.util.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _lodash = require("lodash");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _transactionActivityLog = _interopRequireDefault(require("./transaction-activity-log.component"));

var _transactionActivityLog2 = require("./transaction-activity-log.util");

var _transactionActivityLog3 = require("./transaction-activity-log.constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const matchesEventKey = matchEventKey => ({
  eventKey
}) => eventKey === matchEventKey;

const mapStateToProps = state => {
  return {
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state)
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    transactionGroup: {
      transactions = [],
      primaryTransaction
    } = {},
    ...restOwnProps
  } = ownProps;
  const activities = (0, _transactionActivityLog2.combineTransactionHistories)(transactions);
  const inlineRetryIndex = (0, _lodash.findLastIndex)(activities, matchesEventKey(_transactionActivityLog3.TRANSACTION_RESUBMITTED_EVENT));
  const inlineCancelIndex = (0, _lodash.findLastIndex)(activities, matchesEventKey(_transactionActivityLog3.TRANSACTION_CANCEL_ATTEMPTED_EVENT));
  return { ...stateProps,
    ...dispatchProps,
    ...restOwnProps,
    activities,
    inlineRetryIndex,
    inlineCancelIndex,
    primaryTransaction
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, null, mergeProps)(_transactionActivityLog.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.util.js", {"../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","./transaction-activity-log.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-activity-log\transaction-activity-log.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineTransactionHistories = combineTransactionHistories;
exports.getActivities = getActivities;

var _transaction = require("../../../../shared/constants/transaction");

var _confirmTx = require("../../../helpers/utils/confirm-tx.util");

var _transactions = require("../../../helpers/utils/transactions.util");

var _transactionActivityLog = require("./transaction-activity-log.constants");

// path constants
const STATUS_PATH = '/status';
const GAS_PRICE_PATH = '/txParams/gasPrice';
const GAS_LIMIT_PATH = '/txParams/gas';
const ESTIMATE_BASE_FEE_PATH = '/estimatedBaseFee';
const BLOCKTIMESTAMP = '/blockTimestamp'; // op constants

const REPLACE_OP = 'replace';
const eventPathsHash = {
  [STATUS_PATH]: true,
  [GAS_PRICE_PATH]: true,
  [GAS_LIMIT_PATH]: true,
  [BLOCKTIMESTAMP]: true
};
const statusHash = {
  [_transactionActivityLog.SUBMITTED_STATUS]: _transactionActivityLog.TRANSACTION_SUBMITTED_EVENT,
  [_transactionActivityLog.CONFIRMED_STATUS]: _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT,
  [_transactionActivityLog.DROPPED_STATUS]: _transactionActivityLog.TRANSACTION_DROPPED_EVENT
};
/**
 * @name getActivities
 * @param {object} transaction - txMeta object
 * @param {boolean} isFirstTransaction - True if the transaction is the first created transaction
 * in the list of transactions with the same nonce. If so, we use this transaction to create the
 * transactionCreated activity.
 * @returns {Array}
 */

function getActivities(transaction, isFirstTransaction = false) {
  const {
    id,
    chainId,
    metamaskNetworkId,
    hash,
    history = [],
    txParams: {
      gas: paramsGasLimit,
      gasPrice: paramsGasPrice,
      maxPriorityFeePerGas: paramsMaxPriorityFeePerGas
    },
    txReceipt: {
      status
    } = {},
    type,
    estimatedBaseFee: paramsEstimatedBaseFee
  } = transaction;
  const paramsEip1559Price = paramsEstimatedBaseFee && paramsMaxPriorityFeePerGas && (0, _transactions.sumHexes)(paramsEstimatedBaseFee, paramsMaxPriorityFeePerGas);
  let cachedGasLimit = '0x0';
  let cachedGasPrice = '0x0';
  const historyActivities = history.reduce((acc, base, index) => {
    // First history item should be transaction creation
    if (index === 0 && !Array.isArray(base) && base.txParams) {
      const {
        time: timestamp,
        estimatedBaseFee,
        txParams: {
          value,
          gas = '0x0',
          gasPrice,
          maxPriorityFeePerGas
        } = {}
      } = base;
      const eip1559Price = estimatedBaseFee && maxPriorityFeePerGas && (0, _transactions.sumHexes)(estimatedBaseFee, maxPriorityFeePerGas); // The cached gas limit and gas price are used to display the gas fee in the activity log. We
      // need to cache these values because the status update history events don't provide us with
      // the latest gas limit and gas price.

      cachedGasLimit = gas;
      cachedGasPrice = eip1559Price || gasPrice || paramsGasPrice || '0x0';

      if (isFirstTransaction) {
        return acc.concat({
          id,
          hash,
          chainId,
          metamaskNetworkId,
          eventKey: _transactionActivityLog.TRANSACTION_CREATED_EVENT,
          timestamp,
          value
        });
      } // An entry in the history may be an array of more sub-entries.

    } else if (Array.isArray(base)) {
      const events = [];
      base.forEach(entry => {
        const {
          op,
          path,
          value,
          timestamp: entryTimestamp
        } = entry; // Not all sub-entries in a history entry have a timestamp. If the sub-entry does not have a
        // timestamp, the first sub-entry in a history entry should.

        const timestamp = entryTimestamp || base[0] && base[0].timestamp;
        const isAddBaseFee = path === ESTIMATE_BASE_FEE_PATH && op === 'add';

        if (path in eventPathsHash && op === REPLACE_OP || isAddBaseFee) {
          switch (path) {
            case STATUS_PATH:
              {
                const gasFee = cachedGasLimit === '0x0' && cachedGasPrice === '0x0' ? (0, _confirmTx.getHexGasTotal)({
                  gasLimit: paramsGasLimit,
                  gasPrice: paramsEip1559Price || paramsGasPrice
                }) : (0, _confirmTx.getHexGasTotal)({
                  gasLimit: cachedGasLimit,
                  gasPrice: cachedGasPrice
                });

                if (value in statusHash) {
                  let eventKey = statusHash[value]; // If the status is 'submitted', we need to determine whether the event is a
                  // transaction retry or a cancellation attempt.

                  if (value === _transactionActivityLog.SUBMITTED_STATUS) {
                    if (type === _transaction.TRANSACTION_TYPES.RETRY) {
                      eventKey = _transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT;
                    } else if (type === _transaction.TRANSACTION_TYPES.CANCEL) {
                      eventKey = _transactionActivityLog.TRANSACTION_CANCEL_ATTEMPTED_EVENT;
                    }
                  } else if (value === _transactionActivityLog.CONFIRMED_STATUS) {
                    if (type === _transaction.TRANSACTION_TYPES.CANCEL) {
                      eventKey = _transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT;
                    }
                  }

                  events.push({
                    id,
                    hash,
                    eventKey,
                    timestamp,
                    chainId,
                    metamaskNetworkId,
                    value: gasFee
                  });
                }

                break;
              }
            // If the gas price or gas limit has been changed, we update the gasFee of the
            // previously submitted event. These events happen when the gas limit and gas price is
            // changed at the confirm screen.

            case GAS_PRICE_PATH:
            case GAS_LIMIT_PATH:
            case ESTIMATE_BASE_FEE_PATH:
              {
                const lastEvent = events[events.length - 1] || {};
                const {
                  lastEventKey
                } = lastEvent;

                if (path === GAS_LIMIT_PATH) {
                  cachedGasLimit = value;
                } else if (path === GAS_PRICE_PATH) {
                  cachedGasPrice = value;
                } else if (path === ESTIMATE_BASE_FEE_PATH) {
                  var _base$txParams;

                  cachedGasPrice = paramsEip1559Price || (base === null || base === void 0 ? void 0 : (_base$txParams = base.txParams) === null || _base$txParams === void 0 ? void 0 : _base$txParams.gasPrice);
                  lastEvent.value = (0, _confirmTx.getHexGasTotal)({
                    gasLimit: paramsGasLimit,
                    gasPrice: cachedGasPrice
                  });
                }

                if (lastEventKey === _transactionActivityLog.TRANSACTION_SUBMITTED_EVENT || lastEventKey === _transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT) {
                  lastEvent.value = (0, _confirmTx.getHexGasTotal)({
                    gasLimit: cachedGasLimit,
                    gasPrice: cachedGasPrice
                  });
                }

                break;
              }

            case BLOCKTIMESTAMP:
              {
                const filteredAcc = acc.find(ac => ac.eventKey === _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT);

                if (filteredAcc !== undefined) {
                  filteredAcc.timestamp = new Date(parseInt(entry.value, 16) * 1000).getTime();
                }

                break;
              }

            default:
              {
                events.push({
                  id,
                  hash,
                  chainId,
                  metamaskNetworkId,
                  eventKey: _transactionActivityLog.TRANSACTION_UPDATED_EVENT,
                  timestamp
                });
              }
          }
        }
      });
      return acc.concat(events);
    }

    return acc;
  }, []); // If txReceipt.status is '0x0', that means that an on-chain error occurred for the transaction,
  // so we add an error entry to the Activity Log.

  return status === '0x0' ? historyActivities.concat({
    id,
    hash,
    chainId,
    metamaskNetworkId,
    eventKey: _transactionActivityLog.TRANSACTION_ERRORED_EVENT
  }) : historyActivities;
}
/**
 * @description Removes "Transaction dropped" activities from a list of sorted activities if one of
 * the transactions has been confirmed. Typically, if multiple transactions have the same nonce,
 * once one transaction is confirmed, the rest are dropped. In this case, we don't want to show
 * multiple "Transaction dropped" activities, and instead want to show a single "Transaction
 * confirmed".
 * @param {Array} activities - List of sorted activities generated from the getActivities function.
 * @returns {Array}
 */


function filterSortedActivities(activities) {
  const filteredActivities = [];
  const hasConfirmedActivity = Boolean(activities.find(({
    eventKey
  }) => eventKey === _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT || eventKey === _transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT));
  let addedDroppedActivity = false;
  activities.forEach(activity => {
    if (activity.eventKey === _transactionActivityLog.TRANSACTION_DROPPED_EVENT) {
      if (!hasConfirmedActivity && !addedDroppedActivity) {
        filteredActivities.push(activity);
        addedDroppedActivity = true;
      }
    } else {
      filteredActivities.push(activity);
    }
  });
  return filteredActivities;
}
/**
 * Combines the histories of an array of transactions into a single array.
 *
 * @param {Array} transactions - Array of txMeta transaction objects.
 * @returns {Array}
 */


function combineTransactionHistories(transactions = []) {
  if (!transactions.length) {
    return [];
  }

  const activities = [];
  transactions.forEach((transaction, index) => {
    // The first transaction should be the transaction with the earliest submittedTime. We show the
    // 'created' and 'submitted' activities here. All subsequent transactions will use 'resubmitted'
    // instead.
    const transactionActivities = getActivities(transaction, index === 0);
    activities.push(...transactionActivities);
  });
  const sortedActivities = activities.sort((a, b) => a.timestamp - b.timestamp);
  return filterSortedActivities(sortedActivities);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\index.js", {"./transaction-breakdown.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-breakdown\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionBreakdown.default;
  }
});

var _transactionBreakdown = _interopRequireDefault(require("./transaction-breakdown.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\index.js", {"./transaction-breakdown-row.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\transaction-breakdown-row.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-breakdown\transaction-breakdown-row\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionBreakdownRow.default;
  }
});

var _transactionBreakdownRow = _interopRequireDefault(require("./transaction-breakdown-row.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\transaction-breakdown-row.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-breakdown\transaction-breakdown-row\transaction-breakdown-row.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransactionBreakdownRow extends _react.PureComponent {
  render() {
    const {
      title,
      children,
      className,
      divider = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-breakdown-row', divider ? 'transaction-breakdown-row--with-bottom-border' : '', className),
      "data-testid": "transaction-breakdown-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown-row__title",
      "data-testid": "transaction-breakdown-row-title"
    }, title), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown-row__value",
      "data-testid": "transaction-breakdown-row-value"
    }, children));
  }

}

exports.default = TransactionBreakdownRow;

_defineProperty(TransactionBreakdownRow, "propTypes", {
  title: _propTypes.default.string,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  divider: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.component.js", {"../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../ui/currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../../ui/hex-to-decimal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\hex-to-decimal\\index.js","../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./transaction-breakdown-row":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-breakdown\transaction-breakdown.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));

var _hexToDecimal = _interopRequireDefault(require("../../ui/hex-to-decimal"));

var _common = require("../../../helpers/constants/common");

var _transactionBreakdownRow = _interopRequireDefault(require("./transaction-breakdown-row"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransactionBreakdown extends _react.PureComponent {
  render() {
    const {
      t
    } = this.context;
    const {
      gas,
      gasPrice,
      maxFeePerGas,
      primaryCurrency,
      className,
      nonce,
      nativeCurrency,
      showFiat,
      totalInHex,
      gasUsed,
      isTokenApprove,
      baseFee,
      priorityFee,
      hexGasTotal,
      isEIP1559Transaction,
      isMultiLayerFeeNetwork,
      l1HexGasTotal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-breakdown', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown__title"
    }, t('transaction')), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      divider: true,
      title: t('nonce')
    }, typeof nonce === 'undefined' ? null : /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: nonce
    })), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isTokenApprove ? t('spendLimitAmount') : t('amount')
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "transaction-breakdown__value transaction-breakdown__value--amount"
    }, primaryCurrency)), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isMultiLayerFeeNetwork ? t('transactionHistoryL2GasLimitLabel') : `${t('gasLimit')} (${t('units')})`,
      className: "transaction-breakdown__row-title"
    }, typeof gas === 'undefined' ? '?' : /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: gas
    })), typeof gasUsed === 'string' && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: `${t('gasUsed')} (${t('units')})`,
      className: "transaction-breakdown__row-title"
    }, /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: gasUsed
    })), isEIP1559Transaction && typeof baseFee !== 'undefined' ? /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryBaseFee')
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__base-fee",
      currency: nativeCurrency,
      denomination: _common.GWEI,
      value: baseFee,
      numberOfDecimals: 10,
      hideLabel: true
    })) : null, isEIP1559Transaction && typeof priorityFee !== 'undefined' ? /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryPriorityFee')
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__priority-fee",
      currency: nativeCurrency,
      denomination: _common.GWEI,
      value: priorityFee,
      numberOfDecimals: 10,
      hideLabel: true
    })) : null, !isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isMultiLayerFeeNetwork ? t('transactionHistoryL2GasPriceLabel') : t('advancedGasPriceTitle')
    }, typeof gasPrice === 'undefined' ? '?' : /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__gas-price",
      currency: nativeCurrency,
      denomination: _common.GWEI,
      value: gasPrice,
      numberOfDecimals: 9,
      hideLabel: true
    })), isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryTotalGasFee')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__effective-gas-price",
      currency: nativeCurrency,
      denomination: _common.ETH,
      numberOfDecimals: 6,
      value: hexGasTotal,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: hexGasTotal
    })), isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      divider: true,
      title: t('transactionHistoryMaxFeePerGas')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      currency: nativeCurrency,
      denomination: _common.ETH,
      numberOfDecimals: 9,
      value: maxFeePerGas,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: maxFeePerGas
    })), isMultiLayerFeeNetwork && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryL1GasLabel')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__l1-gas-total",
      numberOfDecimals: 18,
      value: l1HexGasTotal,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: l1HexGasTotal
    })), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('total')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value transaction-breakdown__value--eth-total",
      type: _common.PRIMARY,
      value: totalInHex,
      numberOfDecimals: isMultiLayerFeeNetwork ? 18 : null
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: totalInHex
    })));
  }

}

exports.default = TransactionBreakdown;

_defineProperty(TransactionBreakdown, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TransactionBreakdown, "propTypes", {
  className: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  showFiat: _propTypes.default.bool,
  nonce: _propTypes.default.string,
  primaryCurrency: _propTypes.default.string,
  isTokenApprove: _propTypes.default.bool,
  gas: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gasPrice: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxFeePerGas: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gasUsed: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  totalInHex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  baseFee: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  priorityFee: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hexGasTotal: _propTypes.default.string,
  isEIP1559Transaction: _propTypes.default.bool,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  l1HexGasTotal: _propTypes.default.string
});

_defineProperty(TransactionBreakdown, "defaultProps", {
  showFiat: true
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.container.js", {"../../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./transaction-breakdown.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-breakdown\transaction-breakdown.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _confirmTx = require("../../../helpers/utils/confirm-tx.util");

var _conversions = require("../../../helpers/utils/conversions.util");

var _transactions = require("../../../helpers/utils/transactions.util");

var _transaction = require("../../../../shared/modules/transaction.utils");

var _transactionBreakdown = _interopRequireDefault(require("./transaction-breakdown.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    transaction,
    isTokenApprove
  } = ownProps;
  const {
    txParams: {
      gas,
      gasPrice,
      maxFeePerGas,
      value
    } = {},
    txReceipt: {
      gasUsed,
      effectiveGasPrice,
      l1Fee: l1HexGasTotal
    } = {},
    baseFeePerGas
  } = transaction;
  const gasLimit = typeof gasUsed === 'string' ? gasUsed : gas;
  const priorityFee = effectiveGasPrice && baseFeePerGas && (0, _conversions.subtractHexes)(effectiveGasPrice, baseFeePerGas); // To calculate the total cost of the transaction, we use gasPrice if it is in the txParam,
  // which will only be the case on non-EIP1559 networks. If it is not in the params, we can
  // use the effectiveGasPrice from the receipt, which will ultimately represent to true cost
  // of the transaction. Either of these are used the same way with gasLimit to calculate total
  // cost. effectiveGasPrice will be available on the txReciept for all EIP1559 networks

  const usedGasPrice = gasPrice || effectiveGasPrice;
  const hexGasTotal = gasLimit && usedGasPrice && (0, _confirmTx.getHexGasTotal)({
    gasLimit,
    gasPrice: usedGasPrice
  }) || '0x0';
  let totalInHex = (0, _transactions.sumHexes)(hexGasTotal, value);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state) && l1HexGasTotal !== undefined;

  if (isMultiLayerFeeNetwork) {
    totalInHex = (0, _transactions.sumHexes)(totalInHex, l1HexGasTotal);
  }

  return {
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    showFiat: (0, _selectors.getShouldShowFiat)(state),
    totalInHex,
    gas,
    gasPrice,
    maxFeePerGas,
    gasUsed,
    isTokenApprove,
    hexGasTotal,
    priorityFee,
    baseFee: baseFeePerGas,
    isEIP1559Transaction: (0, _transaction.isEIP1559Transaction)(transaction),
    isMultiLayerFeeNetwork,
    l1HexGasTotal
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_transactionBreakdown.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\address.component.js", {"../../../../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../modals/nickname-popovers":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\decoding\address\address.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _util = require("../../../../../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../../../../ui/identicon"));

var _useI18nContext = require("../../../../../../hooks/useI18nContext");

var _selectors = require("../../../../../../selectors");

var _nicknamePopovers = _interopRequireDefault(require("../../../../modals/nickname-popovers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Address = ({
  checksummedRecipientAddress,
  onRecipientClick,
  addressOnly,
  recipientEns,
  recipientName
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [showNicknamePopovers, setShowNicknamePopovers] = (0, _react.useState)(false);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const addressBookEntryObject = addressBook.find(entry => entry.address.toLowerCase() === checksummedRecipientAddress.toLowerCase());
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const recipientMetadataName = (0, _reactRedux.useSelector)(state => (0, _selectors.getMetadataContractName)(state, checksummedRecipientAddress));
  const recipientToRender = addressOnly ? recipientName || recipientNickname || recipientMetadataName || recipientEns || (0, _util.shortenAddress)(checksummedRecipientAddress) : recipientName || recipientNickname || recipientMetadataName || recipientEns || t('newContract');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight tx-insight-component tx-insight-component-address",
    onClick: () => {
      (0, _copyToClipboard.default)(checksummedRecipientAddress);

      if (onRecipientClick) {
        onRecipientClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight-component-address__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: checksummedRecipientAddress,
    diameter: 18
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "address__name",
    onClick: () => setShowNicknamePopovers(true)
  }, recipientToRender), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
    onClose: () => setShowNicknamePopovers(false),
    address: checksummedRecipientAddress
  }) : null);
};

Address.propTypes = {
  checksummedRecipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func
};
var _default = Address;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js", {"./address.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\address.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\decoding\address\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _address.default;
  }
});

var _address = _interopRequireDefault(require("./address.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\accreditation.component.js", {"../../../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\ui\accreditation\accreditation.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _selectors = require("../../../../../../selectors");

var _i18n = require("../../../../../../contexts/i18n");

var _designSystem = require("../../../../../../helpers/constants/design-system");

var _button = _interopRequireDefault(require("../../../../../ui/button"));

var _typography = _interopRequireDefault(require("../../../../../ui/typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Accreditation = ({
  fetchVia,
  address
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);

  const AccreditationLink = () => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      className: "accreditation__prefix",
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationVerified', [/*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "accreditation__link",
      onClick: () => {
        global.platform.openTab({
          url: addressLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView'),
      key: "accreditation-link-button"
    }, fetchVia)])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationDecoded')));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__icon"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-info-circle"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__info"
  }, /*#__PURE__*/_react.default.createElement(AccreditationLink, null)));
};

Accreditation.propTypes = {
  fetchVia: _propTypes.default.string.isRequired,
  address: _propTypes.default.string.isRequired
};
var _default = Accreditation;
exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\index.js", {"./accreditation.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\accreditation.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\ui\accreditation\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accreditation.default;
  }
});

var _accreditation = _interopRequireDefault(require("./accreditation.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\copy-raw-data.component.js", {"../../../../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../../../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../../ui/icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../../../../../ui/tooltip/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\ui\copy-raw-data\copy-raw-data.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = _interopRequireDefault(require("../../../../../ui/tooltip/tooltip"));

var _copyIcon = _interopRequireDefault(require("../../../../../ui/icon/copy-icon.component"));

var _i18n = require("../../../../../../contexts/i18n");

var _useCopyToClipboard = require("../../../../../../hooks/useCopyToClipboard");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CopyRawData = ({
  data
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "right",
    title: copied ? t('copiedExclamation') : ''
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      handleCopy(data);
    },
    className: "copy-raw-data__button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__icon"
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 12,
    color: "var(--color-icon-default)"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__label"
  }, t('copyRawTransactionData')))));
};

CopyRawData.propTypes = {
  data: _propTypes.default.string.isRequired
};
var _default = CopyRawData;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js", {"./copy-raw-data.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\copy-raw-data.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\components\ui\copy-raw-data\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _copyRawData.default;
  }
});

var _copyRawData = _interopRequireDefault(require("./copy-raw-data.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FETCH_SUPPORTED_NETWORKS_URI = exports.FETCH_PROJECT_INFO_URI = void 0;
const TX_INSIGHTS_BASE_URI = 'https://tx-insights.metaswap.codefi.network';
const FETCH_PROJECT_INFO_URI = `${TX_INSIGHTS_BASE_URI}/fetch-project`;
exports.FETCH_PROJECT_INFO_URI = FETCH_PROJECT_INFO_URI;
const FETCH_SUPPORTED_NETWORKS_URI = `${TX_INSIGHTS_BASE_URI}/networks`;
exports.FETCH_SUPPORTED_NETWORKS_URI = FETCH_SUPPORTED_NETWORKS_URI;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\index.js", {"./transaction-decoding.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionDecoding.default;
  }
});

var _transactionDecoding = _interopRequireDefault(require("./transaction-decoding.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.component.js", {"../../../../shared/lib/fetch-with-cache":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/error-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","./components/decoding/address":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js","./components/ui/accreditation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\index.js","./components/ui/copy-raw-data":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js","./constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\constants.js","./transaction-decoding.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.util.js","@truffle/codec":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@truffle\\codec\\dist\\lib\\index.js","@truffle/decoder":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@truffle\\decoder\\dist\\index.js","browser-util-inspect":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browser-util-inspect\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\transaction-decoding.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDecoding;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _browserUtilInspect = _interopRequireDefault(require("browser-util-inspect"));

var _decoder = require("@truffle/decoder");

var _reactRedux = require("react-redux");

var Codec = _interopRequireWildcard(require("@truffle/codec"));

var _spinner = _interopRequireDefault(require("../../ui/spinner"));

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _fetchWithCache = _interopRequireDefault(require("../../../../shared/lib/fetch-with-cache"));

var _selectors = require("../../../selectors");

var _i18n = require("../../../contexts/i18n");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");

var _transactionDecoding = require("./transaction-decoding.util");

var _constants = require("./constants");

var _address = _interopRequireDefault(require("./components/decoding/address"));

var _copyRawData = _interopRequireDefault(require("./components/ui/copy-raw-data"));

var _accreditation = _interopRequireDefault(require("./components/ui/accreditation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TransactionDecoding({
  to = '',
  inputData: data = ''
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [tx, setTx] = (0, _react.useState)([]);
  const [sourceAddress, setSourceAddress] = (0, _react.useState)('');
  const [sourceFetchedVia, setSourceFetchedVia] = (0, _react.useState)('');
  const {
    address: from
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const network = (0, _metamaskControllerUtils.hexToDecimal)((0, _reactRedux.useSelector)(_selectors.getCurrentChainId));
  const [loading, setLoading] = (0, _react.useState)(false);
  const [hasError, setError] = (0, _react.useState)(false);
  const [errorMessage, setErrorMessage] = (0, _react.useState)('');
  (0, _react.useEffect)(() => {
    (async () => {
      setLoading(true);

      try {
        const networks = await (0, _fetchWithCache.default)(_constants.FETCH_SUPPORTED_NETWORKS_URI, {
          method: 'GET'
        });

        if (!networks.some(n => n.active && Number(n.chainId) === Number(network))) {
          throw new Error(t('transactionDecodingUnsupportedNetworkError', [network]));
        }

        const requestUrl = `${_constants.FETCH_PROJECT_INFO_URI}?${new URLSearchParams({
          to,
          'network-id': network
        })}`;
        const response = await (0, _fetchWithCache.default)(requestUrl, {
          method: 'GET'
        });
        const {
          info: projectInfo,
          fetchedVia,
          address
        } = response; // update source information

        if (address) {
          setSourceAddress(address);
        }

        if (fetchedVia) {
          setSourceFetchedVia(fetchedVia);
        } // creating instance of the truffle decoder


        const decoder = await (0, _decoder.forAddress)(to, {
          provider: global.ethereumProvider,
          projectInfo
        }); // decode tx input data

        const decoding = await decoder.decodeTransaction({
          from,
          to,
          input: data,
          blockNumber: null
        }); // transform tx decoding arguments into tree data

        const params = (0, _transactionDecoding.transformTxDecoding)(decoding === null || decoding === void 0 ? void 0 : decoding.arguments);
        setTx(params);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError(true);

        if (error !== null && error !== void 0 && error.message.match('400')) {
          setErrorMessage(t('txInsightsNotSupported'));
        } else {
          setErrorMessage(error === null || error === void 0 ? void 0 : error.message);
        }
      }
    })();
  }, [t, from, to, network, data]); // ***********************************************************
  // component rendering methods
  // ***********************************************************

  const renderLeaf = ({
    name,
    kind,
    typeClass,
    value
  }) => {
    switch (kind) {
      case 'error':
        return /*#__PURE__*/_react.default.createElement("span", {
          className: "sol-item solidity-error"
        }, /*#__PURE__*/_react.default.createElement("span", null, t('malformedData')));

      default:
        switch (typeClass) {
          case 'int':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-int"
            }, [value.asBN || value.asString].toString());

          case 'uint':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-uint"
            }, [value.asBN || value.asString].toString());

          case 'bytes':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-bytes"
            }, value.asHex);

          case 'array':
            return /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", {
              className: "typography--color-black"
            }, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, value.map((itemValue, index) => {
              var _itemValue$type, _itemValue$type2;

              return /*#__PURE__*/_react.default.createElement("li", {
                key: `${(_itemValue$type = itemValue.type) === null || _itemValue$type === void 0 ? void 0 : _itemValue$type.typeClass}-${index}`
              }, renderLeaf({
                typeClass: (_itemValue$type2 = itemValue.type) === null || _itemValue$type2 === void 0 ? void 0 : _itemValue$type2.typeClass,
                value: itemValue.value,
                kind: itemValue.kind
              }));
            })));

          case 'address':
            {
              const address = value === null || value === void 0 ? void 0 : value.asAddress;
              return /*#__PURE__*/_react.default.createElement(_address.default, {
                addressOnly: true,
                checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(address)
              });
            }

          default:
            return /*#__PURE__*/_react.default.createElement("pre", {
              className: "sol-item solidity-raw"
            }, (0, _browserUtilInspect.default)(new Codec.Format.Utils.Inspect.ResultInspector(value)));
        }

    }
  };

  const renderTree = ({
    name,
    kind,
    typeClass,
    type,
    value,
    children
  }, index) => {
    return children ? /*#__PURE__*/_react.default.createElement("li", {
      key: `${typeClass}-${index}`
    }, /*#__PURE__*/_react.default.createElement("details", {
      open: index === 0 ? 'open' : ''
    }, /*#__PURE__*/_react.default.createElement("summary", null, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, children.map(renderTree)))) : /*#__PURE__*/_react.default.createElement("li", {
      className: "solidity-value",
      key: `solidity-value-${index}`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "solidity-named-item solidity-item"
    }, typeClass !== 'array' && !Array.isArray(value) ? /*#__PURE__*/_react.default.createElement("span", {
      className: "param-name typography--color-black"
    }, name, ": ") : null, /*#__PURE__*/_react.default.createElement("span", {
      className: "sol-item solidity-uint"
    }, renderLeaf({
      name,
      typeClass,
      type,
      value,
      kind
    }))));
  };

  const renderTransactionDecoding = () => {
    if (loading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-loading"
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        color: "var(--color-warning-default)"
      }));
    }

    if (hasError) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-error"
      }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
        errorMessage: errorMessage
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__tree-component"
    }, /*#__PURE__*/_react.default.createElement("ol", null, tx.map(renderTree))), /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__copy-raw-tx"
    }, /*#__PURE__*/_react.default.createElement(_copyRawData.default, {
      data: data
    })), sourceFetchedVia && sourceAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__accreditation"
    }, /*#__PURE__*/_react.default.createElement(_accreditation.default, {
      address: sourceAddress,
      fetchVia: sourceFetchedVia
    })) : null);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight"
  }, renderTransactionDecoding());
}

TransactionDecoding.propTypes = {
  to: _propTypes.default.string,
  inputData: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.util.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-decoding\transaction-decoding.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformTxDecoding = void 0;

// *********************************************
// data transformation utils
// *********************************************
const transformTxDecoding = params => {
  return params.map(node => {
    const nodeName = node.name;
    const nodeValue = node.value;
    const nodeKind = nodeValue.kind;
    const nodeTypeClass = nodeValue.type.typeClass;
    const treeItem = {
      name: nodeName,
      kind: nodeKind,
      typeClass: nodeTypeClass,
      type: nodeValue.type
    };

    if (nodeTypeClass === 'struct') {
      return { ...treeItem,
        children: transformTxDecoding(nodeValue.value)
      };
    }

    return { ...treeItem,
      value: nodeValue.value ? nodeValue.value : nodeValue
    };
  });
};

exports.transformTxDecoding = transformTxDecoding;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-detail-item\transaction-detail-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDetailItem;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TransactionDetailItem({
  detailTitle = '',
  detailText = '',
  detailTitleColor = _designSystem.COLORS.TEXT_DEFAULT,
  detailTotal = '',
  subTitle = '',
  subText = '',
  boldHeadings = true,
  flexWidthValues = false
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item__row"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: detailTitleColor,
    fontWeight: boldHeadings ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      display: _designSystem.DISPLAY.FLEX,
      flexWrap: _designSystem.FLEX_WRAP.NO_WRAP,
      alignItems: _designSystem.ALIGN_ITEMS.CENTER
    }
  }, detailTitle), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('transaction-detail-item__detail-values', {
      'transaction-detail-item__detail-values--flex-width': flexWidthValues
    })
  }, detailText && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, detailText), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: boldHeadings ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TYPOGRAPHY.H6,
    marginTop: 1,
    marginBottom: 1,
    marginLeft: 1,
    boxProps: {
      textAlign: _designSystem.TEXT_ALIGN.RIGHT
    }
  }, detailTotal))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item__row"
  }, /*#__PURE__*/_react.default.isValidElement(subTitle) ? /*#__PURE__*/_react.default.createElement("div", null, subTitle) : /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE
  }, subTitle), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    align: "end",
    className: "transaction-detail-item__row-subText"
  }, subText)));
}

TransactionDetailItem.propTypes = {
  /**
   * Detail title text wrapped in Typography component.
   */
  detailTitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * The color of the detailTitle text accepts all Typography color props
   */
  detailTitleColor: _propTypes.default.string,

  /**
   * Text to show on the left of the detailTotal. Wrapped in Typography component.
   */
  detailText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Total amount to show. Wrapped in Typography component. Will be bold if boldHeadings is true
   */
  detailTotal: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Subtitle text. Checks if React.isValidElement before displaying. Displays under detailTitle
   */
  subTitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Text to show under detailTotal. Wrapped in Typography component.
   */
  subText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Whether detailTotal is bold or not. Defaults to true
   */
  boldHeadings: _propTypes.default.bool,

  /**
   * Changes width to auto for transaction-detail-item__detail-values
   */
  flexWidthValues: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js", {"../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../edit-gas-fee-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js","../transaction-detail-item/transaction-detail-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-detail\transaction-detail.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDetail;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../ui/box"));

var _editGasFeeButton = _interopRequireDefault(require("../edit-gas-fee-button"));

var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TransactionDetail({
  rows = [],
  onEdit,
  userAcknowledgedGasMissing = false,
  disableEditGasFeeButton = false
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    supportsEIP1559V2
  } = (0, _gasFee.useGasFeeContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail"
  }, supportsEIP1559V2 && !disableEditGasFeeButton && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex",
    justifyContent: "flex-end",
    paddingTop: 5
  }, /*#__PURE__*/_react.default.createElement(_editGasFeeButton.default, {
    userAcknowledgedGasMissing: userAcknowledgedGasMissing
  })), !supportsEIP1559V2 && onEdit && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-edit"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: onEdit
  }, t('edit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-rows"
  }, rows));
}

TransactionDetail.propTypes = {
  /**
   * Show item content for transaction detail. Array of TransactionDetailItem components
   */
  rows: _propTypes.default.arrayOf(_transactionDetailItem.default).isRequired,

  /**
   * onClick handler for the Edit link
   */
  onEdit: _propTypes.default.func,
  userAcknowledgedGasMissing: _propTypes.default.bool,
  disableEditGasFeeButton: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js", {"./transaction-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-icon\\transaction-icon.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionIcon.default;
  }
});

var _transactionIcon = _interopRequireDefault(require("./transaction-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-icon\\transaction-icon.js", {"../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/icon/approve-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\approve-icon.component.js","../../ui/icon/interaction-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\interaction-icon.component.js","../../ui/icon/receive-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\receive-icon.component.js","../../ui/icon/send-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\send-icon.component.js","../../ui/icon/sign-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\sign-icon.component.js","../../ui/icon/swap-icon-for-list.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon-for-list.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-icon\transaction-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionIcon;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _approveIcon = _interopRequireDefault(require("../../ui/icon/approve-icon.component"));

var _interactionIcon = _interopRequireDefault(require("../../ui/icon/interaction-icon.component"));

var _receiveIcon = _interopRequireDefault(require("../../ui/icon/receive-icon.component"));

var _sendIcon = _interopRequireDefault(require("../../ui/icon/send-icon.component"));

var _signIcon = _interopRequireDefault(require("../../ui/icon/sign-icon.component"));

var _swapIconForList = _interopRequireDefault(require("../../ui/icon/swap-icon-for-list.component"));

var _transaction = require("../../../../shared/constants/transaction");

var _actions = require("../../../store/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ICON_MAP = {
  [_transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL]: _approveIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION]: _interactionIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.RECEIVE]: _receiveIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SEND]: _sendIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST]: _signIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SWAP]: _swapIconForList.default
};
const FAIL_COLOR = 'var(--color-error-default)';
const PENDING_COLOR = 'var(--color-icon-default)';
const OK_COLOR = 'var(--color-primary-default)';
const COLOR_MAP = {
  [_transaction.TRANSACTION_GROUP_STATUSES.PENDING]: PENDING_COLOR,
  [_transaction.TRANSACTION_GROUP_STATUSES.CANCELLED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.APPROVED]: PENDING_COLOR,
  [_transaction.TRANSACTION_STATUSES.DROPPED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.FAILED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.REJECTED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.SUBMITTED]: PENDING_COLOR,
  [_transaction.TRANSACTION_STATUSES.UNAPPROVED]: PENDING_COLOR
};

function TransactionIcon({
  status,
  category
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const color = COLOR_MAP[status] || OK_COLOR;
  const Icon = ICON_MAP[category];

  if (!Icon) {
    dispatch((0, _actions.captureSingleException)(`The category prop passed to TransactionIcon is not supported. The prop is: ${category}`));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-icon__grey-circle"
    });
  }

  return /*#__PURE__*/_react.default.createElement(Icon, {
    color: color,
    size: 28
  });
}

TransactionIcon.propTypes = {
  status: _propTypes.default.oneOf([_transaction.TRANSACTION_GROUP_STATUSES.CANCELLED, _transaction.TRANSACTION_GROUP_STATUSES.PENDING, _transaction.TRANSACTION_STATUSES.APPROVED, _transaction.TRANSACTION_STATUSES.CONFIRMED, _transaction.TRANSACTION_STATUSES.DROPPED, _transaction.TRANSACTION_STATUSES.FAILED, _transaction.TRANSACTION_STATUSES.REJECTED, _transaction.TRANSACTION_STATUSES.SUBMITTED, _transaction.TRANSACTION_STATUSES.UNAPPROVED]).isRequired,
  category: _propTypes.default.oneOf([_transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL, _transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION, _transaction.TRANSACTION_GROUP_CATEGORIES.RECEIVE, _transaction.TRANSACTION_GROUP_CATEGORIES.SEND, _transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST, _transaction.TRANSACTION_GROUP_CATEGORIES.SWAP]).isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js", {"./transaction-list-item-details.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item-details\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionListItemDetails.default;
  }
});

var _transactionListItemDetails = _interopRequireDefault(require("./transaction-list-item-details.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.component.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/disclosure":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\disclosure\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/sender-to-recipient":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\index.js","../../ui/sender-to-recipient/sender-to-recipient.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.constants.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../cancel-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../transaction-activity-log":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\index.js","../transaction-breakdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\index.js","../transaction-decoding":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-decoding\\index.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item-details\transaction-list-item-details.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _etherscanLink = require("@metamask/etherscan-link");

var _senderToRecipient = _interopRequireDefault(require("../../ui/sender-to-recipient"));

var _senderToRecipient2 = require("../../ui/sender-to-recipient/sender-to-recipient.constants");

var _disclosure = _interopRequireDefault(require("../../ui/disclosure"));

var _transactionActivityLog = _interopRequireDefault(require("../transaction-activity-log"));

var _transactionBreakdown = _interopRequireDefault(require("../transaction-breakdown"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _cancelButton = _interopRequireDefault(require("../cancel-button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _time = require("../../../../shared/constants/time");

var _metametrics = require("../../../../shared/constants/metametrics");

var _transaction = require("../../../../shared/constants/transaction");

var _util = require("../../../helpers/utils/util");

var _transactionDecoding = _interopRequireDefault(require("../transaction-decoding"));

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransactionListItemDetails extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      justCopied: false
    });

    _defineProperty(this, "handleBlockExplorerClick", () => {
      const {
        transactionGroup: {
          primaryTransaction
        },
        rpcPrefs,
        isCustomNetwork,
        history,
        onClose
      } = this.props;
      const blockExplorerLink = (0, _etherscanLink.getBlockExplorerLink)(primaryTransaction, rpcPrefs);

      if (!rpcPrefs.blockExplorerUrl && isCustomNetwork) {
        onClose();
        history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
      } else {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.TRANSACTIONS,
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Transaction Block Explorer',
            action: 'Transaction Details',
            block_explorer_domain: (0, _util.getURLHostName)(blockExplorerLink)
          }
        });
        global.platform.openTab({
          url: blockExplorerLink
        });
      }
    });

    _defineProperty(this, "handleCancel", event => {
      const {
        onCancel,
        onClose
      } = this.props;
      onCancel(event);
      onClose();
    });

    _defineProperty(this, "handleRetry", event => {
      const {
        onClose,
        onRetry
      } = this.props;
      onRetry(event);
      onClose();
    });

    _defineProperty(this, "handleCopyTxId", () => {
      const {
        transactionGroup
      } = this.props;
      const {
        primaryTransaction: transaction
      } = transactionGroup;
      const {
        hash
      } = transaction;
      this.context.trackEvent({
        category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
        event: 'Copied Transaction ID',
        properties: {
          action: 'Activity Log',
          legacy_event: true
        }
      });
      this.setState({
        justCopied: true
      }, () => {
        (0, _copyToClipboard.default)(hash);
        setTimeout(() => this.setState({
          justCopied: false
        }), _time.SECOND);
      });
    });
  }

  componentDidMount() {
    const {
      recipientAddress,
      tryReverseResolveAddress
    } = this.props;

    if (recipientAddress) {
      tryReverseResolveAddress(recipientAddress);
    }
  }

  render() {
    var _transactionGroup$ini, _transactionGroup$ini2, _transactionGroup$ini3, _transactionGroup$ini4;

    const {
      t
    } = this.context;
    const {
      justCopied
    } = this.state;
    const {
      transactionGroup,
      primaryCurrency,
      showSpeedUp,
      showRetry,
      recipientEns,
      recipientAddress,
      recipientName,
      recipientMetadataName,
      senderAddress,
      isEarliestNonce,
      senderNickname,
      title,
      onClose,
      recipientNickname,
      showCancel,
      transactionStatus: TransactionStatus,
      blockExplorerLinkText
    } = this.props;
    const {
      primaryTransaction: transaction,
      initialTransaction: {
        type
      }
    } = transactionGroup;
    const {
      hash
    } = transaction;
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      title: title,
      onClose: onClose
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__operations"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header-buttons"
    }, showSpeedUp && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button-rounded-button"
    }, t('speedUp')), showCancel && /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
      transaction: transaction,
      cancelTransaction: this.handleCancel,
      detailsModal: true
    }), showRetry && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      title: t('retryTransaction')
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "raised",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-sync"
    }))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-status"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('status')), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(TransactionStatus, null))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-hash"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleBlockExplorerClick,
      disabled: !hash
    }, blockExplorerLinkText.firstPart === 'addBlockExplorer' ? t('addBlockExplorer') : t('viewOnBlockExplorer'))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "transaction-list-item-details__header-button",
      containerClassName: "transaction-list-item-details__header-button-tooltip-container",
      title: justCopied ? t('copiedExclamation') : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleCopyTxId,
      disabled: !hash
    }, t('copyTransactionId')))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-header"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('from')), /*#__PURE__*/_react.default.createElement("div", null, t('to'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-container"
    }, /*#__PURE__*/_react.default.createElement(_senderToRecipient.default, {
      warnUserOnAccountMismatch: false,
      variant: _senderToRecipient2.DEFAULT_VARIANT,
      addressOnly: true,
      recipientEns: recipientEns,
      recipientAddress: recipientAddress,
      recipientNickname: recipientNickname,
      recipientName: recipientName,
      recipientMetadataName: recipientMetadataName,
      senderName: senderNickname,
      senderAddress: senderAddress,
      onRecipientClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Copied "To" Address',
          properties: {
            action: 'Activity Log',
            legacy_event: true
          }
        });
      },
      onSenderClick: () => {
        this.context.trackEvent({
          category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
          event: 'Copied "From" Address',
          properties: {
            action: 'Activity Log',
            legacy_event: true
          }
        });
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__cards-container"
    }, /*#__PURE__*/_react.default.createElement(_transactionBreakdown.default, {
      nonce: transactionGroup.initialTransaction.txParams.nonce,
      isTokenApprove: type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE || type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL,
      transaction: transaction,
      primaryCurrency: primaryCurrency,
      className: "transaction-list-item-details__transaction-breakdown"
    }), transactionGroup.initialTransaction.type !== _transaction.TRANSACTION_TYPES.INCOMING && /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: t('activityLog'),
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionActivityLog.default, {
      transactionGroup: transactionGroup,
      className: "transaction-list-item-details__transaction-activity-log",
      onCancel: this.handleCancel,
      onRetry: this.handleRetry,
      isEarliestNonce: isEarliestNonce
    })), (_transactionGroup$ini = transactionGroup.initialTransaction) !== null && _transactionGroup$ini !== void 0 && (_transactionGroup$ini2 = _transactionGroup$ini.txParams) !== null && _transactionGroup$ini2 !== void 0 && _transactionGroup$ini2.data ? /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: "Transaction data",
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionDecoding.default, {
      title: t('transactionData'),
      to: (_transactionGroup$ini3 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini3 === void 0 ? void 0 : _transactionGroup$ini3.to,
      inputData: (_transactionGroup$ini4 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini4 === void 0 ? void 0 : _transactionGroup$ini4.data
    })) : null))));
  }

}

exports.default = TransactionListItemDetails;

_defineProperty(TransactionListItemDetails, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

_defineProperty(TransactionListItemDetails, "defaultProps", {
  recipientEns: null
});

_defineProperty(TransactionListItemDetails, "propTypes", {
  onCancel: _propTypes.default.func,
  onRetry: _propTypes.default.func,
  showCancel: _propTypes.default.bool,
  showSpeedUp: _propTypes.default.bool,
  showRetry: _propTypes.default.bool,
  isEarliestNonce: _propTypes.default.bool,
  primaryCurrency: _propTypes.default.string,
  transactionGroup: _propTypes.default.object,
  title: _propTypes.default.string.isRequired,
  onClose: _propTypes.default.func.isRequired,
  recipientEns: _propTypes.default.string,
  recipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientMetadataName: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  senderAddress: _propTypes.default.string.isRequired,
  tryReverseResolveAddress: _propTypes.default.func.isRequired,
  senderNickname: _propTypes.default.string.isRequired,
  recipientNickname: _propTypes.default.string,
  transactionStatus: _propTypes.default.func,
  isCustomNetwork: _propTypes.default.bool,
  history: _propTypes.default.object,
  blockExplorerLinkText: _propTypes.default.object
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.container.js", {"../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./transaction-list-item-details.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item-details\transaction-list-item-details.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _transactionListItemDetails = _interopRequireDefault(require("./transaction-list-item-details.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = (state, ownProps) => {
  const {
    recipientAddress,
    senderAddress
  } = ownProps;
  let recipientEns;

  if (recipientAddress) {
    const address = (0, _hexstringUtils.toChecksumHexAddress)(recipientAddress);
    recipientEns = (0, _selectors.getEnsResolutionByAddress)(state, address);
  }

  const addressBook = (0, _selectors.getAddressBook)(state);
  const identities = (0, _selectors.getMetaMaskIdentities)(state);
  const recipientName = (0, _selectors.getAccountName)(identities, recipientAddress);
  const recipientMetadataName = (0, _selectors.getMetadataContractName)(state, recipientAddress);

  const getNickName = address => {
    const entry = addressBook.find(contact => {
      return address.toLowerCase() === contact.address.toLowerCase();
    });
    return entry && entry.name || '';
  };

  const rpcPrefs = (0, _selectors.getRpcPrefsForCurrentProvider)(state);
  const isCustomNetwork = (0, _selectors.getIsCustomNetwork)(state);
  return {
    rpcPrefs,
    recipientEns,
    senderNickname: getNickName(senderAddress),
    recipientNickname: recipientAddress ? getNickName(recipientAddress) : null,
    isCustomNetwork,
    blockExplorerLinkText: (0, _selectors.getBlockExplorerLinkText)(state),
    recipientName,
    recipientMetadataName
  };
};

const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_transactionListItemDetails.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\index.js", {"./transaction-list-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\transaction-list-item.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionListItem.default;
  }
});

var _transactionListItem = _interopRequireDefault(require("./transaction-list-item.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\smart-transaction-list-item.component.js", {"../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTransactionDisplayData":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js","../../ui/list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\list-item\\index.js","../../ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../cancel-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../transaction-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js","../transaction-list-item-details":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js","../transaction-status/transaction-status.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-status\\transaction-status.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item\smart-transaction-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SmartTransactionListItem;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _listItem = _interopRequireDefault(require("../../ui/list-item"));

var _transactionStatus = _interopRequireDefault(require("../transaction-status/transaction-status.component"));

var _transactionIcon = _interopRequireDefault(require("../transaction-icon"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useTransactionDisplayData = require("../../../hooks/useTransactionDisplayData");

var _util = require("../../../helpers/utils/util");

var _transaction = require("../../../../shared/constants/transaction");

var _cancelButton = _interopRequireDefault(require("../cancel-button"));

var _swaps = require("../../../ducks/swaps/swaps");

var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));

var _transactionListItemDetails = _interopRequireDefault(require("../transaction-list-item-details"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SmartTransactionListItem({
  smartTransaction,
  transactionGroup,
  isEarliestNonce = false
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _useI18nContext.useI18nContext)();
  const [cancelSwapLinkClicked, setCancelSwapLinkClicked] = (0, _react.useState)(false);
  const [showDetails, setShowDetails] = (0, _react.useState)(false);
  const {
    primaryCurrency,
    recipientAddress,
    isPending,
    senderAddress
  } = (0, _useTransactionDisplayData.useTransactionDisplayData)(transactionGroup);
  const {
    sourceTokenSymbol,
    destinationTokenSymbol,
    time,
    status
  } = smartTransaction;
  const category = _transaction.TRANSACTION_GROUP_CATEGORIES.SWAP;
  const title = t('swapTokenToToken', [sourceTokenSymbol, destinationTokenSymbol]);
  const subtitle = 'metamask';
  const date = (0, _util.formatDateWithYearContext)(time);
  let displayedStatusKey;

  if (status === _transaction.SMART_TRANSACTION_STATUSES.PENDING) {
    displayedStatusKey = _transaction.TRANSACTION_GROUP_STATUSES.PENDING;
  } else if (status !== null && status !== void 0 && status.startsWith(_transaction.SMART_TRANSACTION_STATUSES.CANCELLED)) {
    displayedStatusKey = _transaction.TRANSACTION_GROUP_STATUSES.CANCELLED;
  }

  const showCancelSwapLink = smartTransaction.cancellable && !cancelSwapLinkClicked;
  const className = 'transaction-list-item transaction-list-item--unconfirmed';
  const toggleShowDetails = (0, _react.useCallback)(() => {
    setShowDetails(prev => !prev);
  }, []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_listItem.default, {
    className: className,
    title: title,
    onClick: toggleShowDetails,
    icon: /*#__PURE__*/_react.default.createElement(_transactionIcon.default, {
      category: category,
      status: displayedStatusKey
    }),
    subtitle: /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_transactionStatus.default, {
      isPending: true,
      isEarliestNonce: isEarliestNonce,
      date: date,
      status: displayedStatusKey
    }), /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      className: "transaction-list-item__origin",
      siteOrigin: subtitle,
      title: subtitle
    }))
  }, displayedStatusKey === _transaction.TRANSACTION_GROUP_STATUSES.PENDING && showCancelSwapLink && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list-item__pending-actions"
  }, /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
    transaction: smartTransaction.uuid,
    cancelTransaction: e => {
      e === null || e === void 0 ? void 0 : e.preventDefault();
      dispatch((0, _swaps.cancelSwapsSmartTransaction)(smartTransaction.uuid));
      setCancelSwapLinkClicked(true);
    }
  }))), showDetails && /*#__PURE__*/_react.default.createElement(_transactionListItemDetails.default, {
    title: title,
    onClose: toggleShowDetails,
    senderAddress: senderAddress,
    recipientAddress: recipientAddress,
    primaryCurrency: primaryCurrency,
    isEarliestNonce: isEarliestNonce,
    transactionGroup: transactionGroup,
    transactionStatus: () => /*#__PURE__*/_react.default.createElement(_transactionStatus.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      date: date,
      status: displayedStatusKey,
      statusOnly: true
    })
  }));
}

SmartTransactionListItem.propTypes = {
  smartTransaction: _propTypes.default.object.isRequired,
  isEarliestNonce: _propTypes.default.bool,
  transactionGroup: _propTypes.default.object
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\transaction-list-item.component.js", {"../../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../contexts/transaction-modal":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useShouldShowSpeedUp":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useShouldShowSpeedUp.js","../../../hooks/useTransactionDisplayData":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\list-item\\index.js","../../ui/site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../advanced-gas-fee-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\advanced-gas-fee-popover\\index.js","../cancel-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../cancel-speedup-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\cancel-speedup-popover\\index.js","../edit-gas-fee-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js","../edit-gas-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\index.js","../transaction-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js","../transaction-list-item-details":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js","../transaction-status/transaction-status.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-status\\transaction-status.component.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list-item\transaction-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _listItem = _interopRequireDefault(require("../../ui/list-item"));

var _useTransactionDisplayData = require("../../../hooks/useTransactionDisplayData");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionListItemDetails = _interopRequireDefault(require("../transaction-list-item-details"));

var _routes = require("../../../helpers/constants/routes");

var _useShouldShowSpeedUp = require("../../../hooks/useShouldShowSpeedUp");

var _transactionStatus = _interopRequireDefault(require("../transaction-status/transaction-status.component"));

var _transactionIcon = _interopRequireDefault(require("../transaction-icon"));

var _metametrics = require("../../../../shared/constants/metametrics");

var _transaction = require("../../../../shared/constants/transaction");

var _gas = require("../../../../shared/constants/gas");

var _gasFee = require("../../../contexts/gasFee");

var _transactionModal = require("../../../contexts/transaction-modal");

var _selectors = require("../../../selectors");

var _transactions = require("../../../helpers/utils/transactions.util");

var _button = _interopRequireDefault(require("../../ui/button"));

var _advancedGasFeePopover = _interopRequireDefault(require("../advanced-gas-fee-popover"));

var _cancelButton = _interopRequireDefault(require("../cancel-button"));

var _cancelSpeedupPopover = _interopRequireDefault(require("../cancel-speedup-popover"));

var _editGasFeePopover = _interopRequireDefault(require("../edit-gas-fee-popover"));

var _editGasPopover = _interopRequireDefault(require("../edit-gas-popover"));

var _metametrics2 = require("../../../contexts/metametrics");

var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function TransactionListItemInner({
  transactionGroup,
  setEditGasMode,
  isEarliestNonce = false
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const {
    hasCancelled
  } = transactionGroup;
  const [showDetails, setShowDetails] = (0, _react.useState)(false);
  const [showCancelEditGasPopover, setShowCancelEditGasPopover] = (0, _react.useState)(false);
  const [showRetryEditGasPopover, setShowRetryEditGasPopover] = (0, _react.useState)(false);
  const {
    supportsEIP1559V2
  } = (0, _gasFee.useGasFeeContext)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const {
    initialTransaction: {
      id
    },
    primaryTransaction: {
      err,
      status
    }
  } = transactionGroup;
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const retryTransaction = (0, _react.useCallback)(async event => {
    event.stopPropagation();
    trackEvent({
      event: 'Clicked "Speed Up"',
      category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
      properties: {
        action: 'Activity Log',
        legacy_event: true
      }
    });

    if (supportsEIP1559V2) {
      setEditGasMode(_gas.EDIT_GAS_MODES.SPEED_UP);
      openModal('cancelSpeedUpTransaction');
    } else {
      setShowRetryEditGasPopover(true);
    }
  }, [openModal, setEditGasMode, trackEvent, supportsEIP1559V2]);
  const cancelTransaction = (0, _react.useCallback)(event => {
    event.stopPropagation();
    trackEvent({
      event: 'Clicked "Cancel"',
      category: _metametrics.EVENT.CATEGORIES.NAVIGATION,
      properties: {
        action: 'Activity Log',
        legacy_event: true
      }
    });

    if (supportsEIP1559V2) {
      setEditGasMode(_gas.EDIT_GAS_MODES.CANCEL);
      openModal('cancelSpeedUpTransaction');
    } else {
      setShowCancelEditGasPopover(true);
    }
  }, [trackEvent, openModal, setEditGasMode, supportsEIP1559V2]);
  const shouldShowSpeedUp = (0, _useShouldShowSpeedUp.useShouldShowSpeedUp)(transactionGroup, isEarliestNonce);
  const {
    title,
    subtitle,
    subtitleContainsOrigin,
    date,
    category,
    primaryCurrency,
    recipientAddress,
    secondaryCurrency,
    displayedStatusKey,
    isPending,
    senderAddress
  } = (0, _useTransactionDisplayData.useTransactionDisplayData)(transactionGroup);
  const isSignatureReq = category === _transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST;
  const isApproval = category === _transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL;
  const isUnapproved = status === _transaction.TRANSACTION_STATUSES.UNAPPROVED;
  const isSwap = category === _transaction.TRANSACTION_GROUP_CATEGORIES.SWAP;
  const className = (0, _classnames.default)('transaction-list-item', {
    'transaction-list-item--unconfirmed': isPending || [_transaction.TRANSACTION_STATUSES.FAILED, _transaction.TRANSACTION_STATUSES.DROPPED, _transaction.TRANSACTION_STATUSES.REJECTED].includes(displayedStatusKey)
  });
  const toggleShowDetails = (0, _react.useCallback)(() => {
    if (isUnapproved) {
      history.push(`${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}`);
      return;
    }

    setShowDetails(prev => !prev);
  }, [isUnapproved, history, id]);
  const speedUpButton = (0, _react.useMemo)(() => {
    if (!shouldShowSpeedUp || !isPending || isUnapproved) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: hasCancelled ? cancelTransaction : retryTransaction,
      style: hasCancelled ? {
        width: 'auto'
      } : null
    }, hasCancelled ? t('speedUpCancellation') : t('speedUp'));
  }, [shouldShowSpeedUp, isUnapproved, t, isPending, hasCancelled, retryTransaction, cancelTransaction]);
  const showCancelButton = !hasCancelled && isPending && !isUnapproved;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_listItem.default, {
    onClick: toggleShowDetails,
    className: className,
    title: title,
    icon: /*#__PURE__*/_react.default.createElement(_transactionIcon.default, {
      category: category,
      status: displayedStatusKey
    }),
    subtitle: /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_transactionStatus.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      error: err,
      date: date,
      status: displayedStatusKey
    }), subtitleContainsOrigin ? /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      siteOrigin: subtitle
    }) : /*#__PURE__*/_react.default.createElement("span", {
      className: "transaction-list-item__address",
      title: subtitle
    }, subtitle)),
    rightContent: !isSignatureReq && !isApproval && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h2", {
      title: primaryCurrency,
      className: "transaction-list-item__primary-currency"
    }, primaryCurrency), /*#__PURE__*/_react.default.createElement("h3", {
      className: "transaction-list-item__secondary-currency"
    }, secondaryCurrency))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list-item__pending-actions"
  }, speedUpButton, showCancelButton && /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
    transaction: transactionGroup.primaryTransaction,
    cancelTransaction: cancelTransaction
  }))), showDetails && /*#__PURE__*/_react.default.createElement(_transactionListItemDetails.default, {
    title: title,
    onClose: toggleShowDetails,
    transactionGroup: transactionGroup,
    primaryCurrency: primaryCurrency,
    senderAddress: senderAddress,
    recipientAddress: recipientAddress,
    onRetry: retryTransaction,
    showRetry: status === _transaction.TRANSACTION_STATUSES.FAILED && !isSwap,
    showSpeedUp: shouldShowSpeedUp,
    isEarliestNonce: isEarliestNonce,
    onCancel: cancelTransaction,
    showCancel: isPending && !hasCancelled,
    transactionStatus: () => /*#__PURE__*/_react.default.createElement(_transactionStatus.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      error: err,
      date: date,
      status: displayedStatusKey,
      statusOnly: true
    })
  }), !supportsEIP1559V2 && showRetryEditGasPopover && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
    onClose: () => setShowRetryEditGasPopover(false),
    mode: _gas.EDIT_GAS_MODES.SPEED_UP,
    transaction: transactionGroup.primaryTransaction
  }), !supportsEIP1559V2 && showCancelEditGasPopover && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
    onClose: () => setShowCancelEditGasPopover(false),
    mode: _gas.EDIT_GAS_MODES.CANCEL,
    transaction: transactionGroup.primaryTransaction
  }));
}

TransactionListItemInner.propTypes = {
  transactionGroup: _propTypes.default.object.isRequired,
  isEarliestNonce: _propTypes.default.bool,
  setEditGasMode: _propTypes.default.func
};

const TransactionListItem = props => {
  const {
    transactionGroup
  } = props;
  const [editGasMode, setEditGasMode] = (0, _react.useState)();
  const transaction = transactionGroup.primaryTransaction;
  const eip1559V2Enabled = (0, _reactRedux.useSelector)(_selectors.getEIP1559V2Enabled);
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const supportsEIP1559V2 = eip1559V2Enabled && supportsEIP1559;
  return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: transactionGroup.primaryTransaction,
    editGasMode: editGasMode
  }, /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(TransactionListItemInner, _extends({}, props, {
    setEditGasMode: setEditGasMode
  })), supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_cancelSpeedupPopover.default, null), /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
};

TransactionListItem.propTypes = {
  transactionGroup: _propTypes.default.object.isRequired
};
var _default = TransactionListItem;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js", {"./transaction-list.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\transaction-list.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionList.default;
  }
});

var _transactionList = _interopRequireDefault(require("./transaction-list.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\transaction-list.component.js", {"../../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../helpers/constants/transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../selectors/transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\transactions.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../transaction-list-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\index.js","../transaction-list-item/smart-transaction-list-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list-item\\smart-transaction-list-item.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-list\transaction-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionList;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _transactions = require("../../../selectors/transactions");

var _selectors = require("../../../selectors");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionListItem = _interopRequireDefault(require("../transaction-list-item"));

var _smartTransactionListItem = _interopRequireDefault(require("../transaction-list-item/smart-transaction-list-item.component"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _transactions2 = require("../../../helpers/constants/transactions");

var _swaps = require("../../../../shared/constants/swaps");

var _transaction = require("../../../../shared/constants/transaction");

var _stringUtils = require("../../../../shared/modules/string-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const PAGE_INCREMENT = 10; // When we are on a token page, we only want to show transactions that involve that token.
// In the case of token transfers or approvals, these will be transactions sent to the
// token contract. In the case of swaps, these will be transactions sent to the swaps contract
// and which have the token address in the transaction data.
//
// getTransactionGroupRecipientAddressFilter is used to determine whether a transaction matches
// either of those criteria

const getTransactionGroupRecipientAddressFilter = (recipientAddress, chainId) => {
  return ({
    initialTransaction: {
      txParams
    }
  }) => {
    return (0, _stringUtils.isEqualCaseInsensitive)(txParams === null || txParams === void 0 ? void 0 : txParams.to, recipientAddress) || (txParams === null || txParams === void 0 ? void 0 : txParams.to) === _swaps.SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[chainId] && txParams.data.match(recipientAddress.slice(2));
  };
};

const tokenTransactionFilter = ({
  initialTransaction: {
    type,
    destinationTokenSymbol,
    sourceTokenSymbol
  }
}) => {
  if (_transactions2.TOKEN_CATEGORY_HASH[type]) {
    return false;
  } else if (type === _transaction.TRANSACTION_TYPES.SWAP) {
    return destinationTokenSymbol === 'ETH' || sourceTokenSymbol === 'ETH';
  }

  return true;
};

const getFilteredTransactionGroups = (transactionGroups, hideTokenTransactions, tokenAddress, chainId) => {
  if (hideTokenTransactions) {
    return transactionGroups.filter(tokenTransactionFilter);
  } else if (tokenAddress) {
    return transactionGroups.filter(getTransactionGroupRecipientAddressFilter(tokenAddress, chainId));
  }

  return transactionGroups;
};

function TransactionList({
  hideTokenTransactions,
  tokenAddress
}) {
  const [limit, setLimit] = (0, _react.useState)(PAGE_INCREMENT);
  const t = (0, _useI18nContext.useI18nContext)();
  const unfilteredPendingTransactions = (0, _reactRedux.useSelector)(_transactions.nonceSortedPendingTransactionsSelector);
  const unfilteredCompletedTransactions = (0, _reactRedux.useSelector)(_transactions.nonceSortedCompletedTransactionsSelector);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const pendingTransactions = (0, _react.useMemo)(() => getFilteredTransactionGroups(unfilteredPendingTransactions, hideTokenTransactions, tokenAddress, chainId), [hideTokenTransactions, tokenAddress, unfilteredPendingTransactions, chainId]);
  const completedTransactions = (0, _react.useMemo)(() => getFilteredTransactionGroups(unfilteredCompletedTransactions, hideTokenTransactions, tokenAddress, chainId), [hideTokenTransactions, tokenAddress, unfilteredCompletedTransactions, chainId]);
  const viewMore = (0, _react.useCallback)(() => setLimit(prev => prev + PAGE_INCREMENT), []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__transactions"
  }, pendingTransactions.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__pending-transactions"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__header"
  }, `${t('queue')} (${pendingTransactions.length})`), pendingTransactions.map((transactionGroup, index) => transactionGroup.initialTransaction.transactionType === _transaction.TRANSACTION_TYPES.SMART ? /*#__PURE__*/_react.default.createElement(_smartTransactionListItem.default, {
    isEarliestNonce: index === 0,
    smartTransaction: transactionGroup.initialTransaction,
    transactionGroup: transactionGroup,
    key: `${transactionGroup.nonce}:${index}`
  }) : /*#__PURE__*/_react.default.createElement(_transactionListItem.default, {
    isEarliestNonce: index === 0,
    transactionGroup: transactionGroup,
    key: `${transactionGroup.nonce}:${index}`
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__completed-transactions"
  }, pendingTransactions.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__header"
  }, t('history')) : null, completedTransactions.length > 0 ? completedTransactions.slice(0, limit).map((transactionGroup, index) => {
    var _transactionGroup$ini;

    return ((_transactionGroup$ini = transactionGroup.initialTransaction) === null || _transactionGroup$ini === void 0 ? void 0 : _transactionGroup$ini.transactionType) === 'smart' ? /*#__PURE__*/_react.default.createElement(_smartTransactionListItem.default, {
      transactionGroup: transactionGroup,
      smartTransaction: transactionGroup.initialTransaction,
      key: `${transactionGroup.nonce}:${index}`
    }) : /*#__PURE__*/_react.default.createElement(_transactionListItem.default, {
      transactionGroup: transactionGroup,
      key: `${transactionGroup.nonce}:${limit + index - 10}`
    });
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__empty"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__empty-text"
  }, t('noTransactions'))), completedTransactions.length > limit && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "transaction-list__view-more",
    type: "secondary",
    onClick: viewMore
  }, t('viewMore')))));
}

TransactionList.propTypes = {
  hideTokenTransactions: _propTypes.default.bool,
  tokenAddress: _propTypes.default.string
};
TransactionList.defaultProps = {
  hideTokenTransactions: false,
  tokenAddress: undefined
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-status\\transaction-status.component.js", {"../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-status\transaction-status.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionStatus;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transaction = require("../../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const QUEUED_PSEUDO_STATUS = 'queued';
/**
 * A note about status logic for this component:
 * Approved, Signed and Submitted statuses are all treated, effectively
 * as pending. Transactions are only approved or signed for less than a
 * second, usually, and ultimately should be rendered in the UI no
 * differently than a pending transaction.
 *
 * Confirmed transactions are not especially highlighted except that their
 * status label will be the date the transaction was finalized.
 */

const pendingStatusHash = {
  [_transaction.TRANSACTION_STATUSES.SUBMITTED]: _transaction.TRANSACTION_GROUP_STATUSES.PENDING,
  [_transaction.TRANSACTION_STATUSES.APPROVED]: _transaction.TRANSACTION_GROUP_STATUSES.PENDING,
  [_transaction.TRANSACTION_STATUSES.SIGNED]: _transaction.TRANSACTION_GROUP_STATUSES.PENDING
};
const statusToClassNameHash = {
  [_transaction.TRANSACTION_STATUSES.UNAPPROVED]: 'transaction-status--unapproved',
  [_transaction.TRANSACTION_STATUSES.REJECTED]: 'transaction-status--rejected',
  [_transaction.TRANSACTION_STATUSES.FAILED]: 'transaction-status--failed',
  [_transaction.TRANSACTION_STATUSES.DROPPED]: 'transaction-status--dropped',
  [_transaction.TRANSACTION_GROUP_STATUSES.CANCELLED]: 'transaction-status--cancelled',
  [QUEUED_PSEUDO_STATUS]: 'transaction-status--queued',
  [_transaction.TRANSACTION_GROUP_STATUSES.PENDING]: 'transaction-status--pending'
};

function TransactionStatus({
  status,
  date,
  error,
  isEarliestNonce,
  className,
  statusOnly
}) {
  var _error$rpc;

  const t = (0, _useI18nContext.useI18nContext)();
  const tooltipText = (error === null || error === void 0 ? void 0 : (_error$rpc = error.rpc) === null || _error$rpc === void 0 ? void 0 : _error$rpc.message) || (error === null || error === void 0 ? void 0 : error.message);
  let statusKey = status;

  if (pendingStatusHash[status]) {
    statusKey = isEarliestNonce ? _transaction.TRANSACTION_GROUP_STATUSES.PENDING : QUEUED_PSEUDO_STATUS;
  }

  const statusText = statusKey === _transaction.TRANSACTION_STATUSES.CONFIRMED && !statusOnly ? date : statusKey && t(statusKey);
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: tooltipText,
    wrapperClassName: (0, _classnames.default)('transaction-status', `transaction-status--${statusKey}`, className, statusToClassNameHash[statusKey])
  }, statusText);
}

TransactionStatus.propTypes = {
  status: _propTypes.default.string,
  className: _propTypes.default.string,
  date: _propTypes.default.string,
  error: _propTypes.default.object,
  isEarliestNonce: _propTypes.default.bool,
  statusOnly: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-total-banner\\transaction-total-banner.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\transaction-total-banner\transaction-total-banner.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionTotalBanner;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TransactionTotalBanner({
  total = '',
  detail = '',
  timing
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-total-banner"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H1
  }, total), detail && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H6,
    className: "transaction-total-banner__detail"
  }, detail), timing);
}

TransactionTotalBanner.propTypes = {
  total: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  detail: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  timing: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node])
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js", {"./user-preferenced-currency-display.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-currency-display\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedCurrencyDisplay.default;
  }
});

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("./user-preferenced-currency-display.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js", {"../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../hooks/useUserPreferencedCurrency":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","../../ui/currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-currency-display\user-preferenced-currency-display.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserPreferencedCurrencyDisplay;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _common = require("../../../helpers/constants/common");

var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));

var _useUserPreferencedCurrency = require("../../../hooks/useUserPreferencedCurrency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function UserPreferencedCurrencyDisplay({
  'data-testid': dataTestId,
  ethLogoHeight = 14,
  ethNumberOfDecimals,
  fiatNumberOfDecimals,
  numberOfDecimals: propsNumberOfDecimals,
  showEthLogo,
  type,
  showFiat,
  showCurrencySuffix,
  ...restProps
}) {
  const {
    currency,
    numberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(type, {
    ethNumberOfDecimals,
    fiatNumberOfDecimals,
    numberOfDecimals: propsNumberOfDecimals,
    showFiatOverride: showFiat
  });
  const prefixComponent = (0, _react.useMemo)(() => {
    return currency === _common.ETH && showEthLogo && /*#__PURE__*/_react.default.createElement("i", {
      className: "fab fa-ethereum",
      style: {
        color: 'var(--color-icon-default)',
        fontSize: ethLogoHeight
      }
    });
  }, [currency, showEthLogo, ethLogoHeight]);
  return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, _extends({}, restProps, {
    currency: currency,
    "data-testid": dataTestId,
    numberOfDecimals: numberOfDecimals,
    prefixComponent: prefixComponent,
    suffix: showCurrencySuffix && !showEthLogo && currency
  }));
}

UserPreferencedCurrencyDisplay.propTypes = {
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  prefix: _propTypes.default.string,
  value: _propTypes.default.string,
  numberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hideLabel: _propTypes.default.bool,
  hideTitle: _propTypes.default.bool,
  style: _propTypes.default.object,
  showEthLogo: _propTypes.default.bool,
  ethLogoHeight: _propTypes.default.number,
  type: _propTypes.default.oneOf([_common.PRIMARY, _common.SECONDARY]),
  ethNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  fiatNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showFiat: _propTypes.default.bool,
  showCurrencySuffix: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\index.js", {"./user-preferenced-currency-input.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-currency-input\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedCurrencyInput.default;
  }
});

var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.component.js", {"../currency-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\currency-input\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-currency-input\user-preferenced-currency-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _currencyInput = _interopRequireDefault(require("../currency-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class UserPreferencedCurrencyInput extends _react.PureComponent {
  render() {
    const {
      useNativeCurrencyAsPrimaryCurrency,
      sendInputCurrencySwitched,
      ...restProps
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_currencyInput.default, _extends({}, restProps, {
      featureSecondary: Boolean(useNativeCurrencyAsPrimaryCurrency && sendInputCurrencySwitched || !useNativeCurrencyAsPrimaryCurrency && !sendInputCurrencySwitched)
    }));
  }

}

exports.default = UserPreferencedCurrencyInput;

_defineProperty(UserPreferencedCurrencyInput, "propTypes", {
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  sendInputCurrencySwitched: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.container.js", {"../../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./user-preferenced-currency-input.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-currency-input\user-preferenced-currency-input.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _app = require("../../../ducks/app/app");

var _selectors = require("../../../selectors");

var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency,
    sendInputCurrencySwitched: state.appState.sendInputCurrencySwitched
  };
};

const mapDispatchToProps = dispatch => {
  return {
    onPreferenceToggle: () => dispatch((0, _app.toggleCurrencySwitch)())
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_userPreferencedCurrencyInput.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\index.js", {"./user-preferenced-token-input.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-token-input\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedTokenInput.default;
  }
});

var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.component.js", {"../../ui/token-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-token-input\user-preferenced-token-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tokenInput = _interopRequireDefault(require("../../ui/token-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class UserPreferencedTokenInput extends _react.PureComponent {
  render() {
    const {
      useNativeCurrencyAsPrimaryCurrency,
      ...restProps
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_tokenInput.default, _extends({}, restProps, {
      showFiat: !useNativeCurrencyAsPrimaryCurrency
    }));
  }

}

exports.default = UserPreferencedTokenInput;

_defineProperty(UserPreferencedTokenInput, "propTypes", {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./user-preferenced-token-input.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\user-preferenced-token-input\user-preferenced-token-input.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _selectors = require("../../../selectors");

var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency
  };
};

const UserPreferencedTokenInputContainer = (0, _reactRedux.connect)(mapStateToProps)(_userPreferencedTokenInput.default);
UserPreferencedTokenInputContainer.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};
var _default = UserPreferencedTokenInputContainer;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\eth-overview.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/hardware":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../ui/icon-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-button\\index.js","../../ui/icon/overview-buy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-buy-icon.component.js","../../ui/icon/overview-send-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-send-icon.component.js","../../ui/icon/swap-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon.component.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../deposit-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\deposit-popover\\index.js","../user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./wallet-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\wallet-overview\eth-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _i18n = require("../../../contexts/i18n");

var _routes = require("../../../helpers/constants/routes");

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));

var _common = require("../../../helpers/constants/common");

var _selectors = require("../../../selectors/selectors");

var _swapIcon = _interopRequireDefault(require("../../ui/icon/swap-icon.component"));

var _overviewBuyIcon = _interopRequireDefault(require("../../ui/icon/overview-buy-icon.component"));

var _overviewSendIcon = _interopRequireDefault(require("../../ui/icon/overview-send-icon.component"));

var _swaps = require("../../../ducks/swaps/swaps");

var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));

var _hardware = require("../../../helpers/utils/hardware");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _spinner = _interopRequireDefault(require("../../ui/spinner"));

var _send = require("../../../ducks/send");

var _transaction = require("../../../../shared/constants/transaction");

var _depositPopover = _interopRequireDefault(require("../deposit-popover"));

var _walletOverview = _interopRequireDefault(require("./wallet-overview"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EthOverview = ({
  className
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [showDepositPopover, setShowDepositPopover] = (0, _react.useState)(false);
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type);
  const balanceIsCached = (0, _reactRedux.useSelector)(_selectors.isBalanceCached);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const balance = (0, _reactRedux.useSelector)(_selectors.getSelectedAccountCachedBalance);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const isBuyableChain = (0, _reactRedux.useSelector)(_selectors.getIsBuyableChain);
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showDepositPopover && /*#__PURE__*/_react.default.createElement(_depositPopover.default, {
    onClose: () => setShowDepositPopover(false)
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    loading: !balance,
    balance: /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "top",
      title: t('balanceOutdated'),
      disabled: !balanceIsCached
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__primary-container"
    }, balance ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: (0, _classnames.default)('eth-overview__primary-balance', {
        'eth-overview__cached-balance': balanceIsCached
      }),
      "data-testid": "eth-overview__primary-currency",
      value: balance,
      type: _common.PRIMARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }) : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-secondary-default)",
      className: "loading-overlay__spinner"
    }), balanceIsCached ? /*#__PURE__*/_react.default.createElement("span", {
      className: "eth-overview__cached-star"
    }, "*") : null), showFiat && balance && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: (0, _classnames.default)({
        'eth-overview__cached-secondary-balance': balanceIsCached,
        'eth-overview__secondary-balance': !balanceIsCached
      }),
      "data-testid": "eth-overview__secondary-currency",
      value: balance,
      type: _common.SECONDARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }))),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      Icon: _overviewBuyIcon.default,
      disabled: !isBuyableChain,
      label: t('buy'),
      onClick: () => {
        trackEvent({
          event: _metametrics2.EVENT_NAMES.NAV_BUY_BUTTON_CLICKED,
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            location: 'Home',
            text: 'Buy'
          }
        });
        setShowDepositPopover(true);
      }
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      "data-testid": "eth-overview-send",
      Icon: _overviewSendIcon.default,
      label: t('send'),
      onClick: () => {
        trackEvent({
          event: _metametrics2.EVENT_NAMES.NAV_SEND_BUTTON_CLICKED,
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            token_symbol: 'ETH',
            location: 'Home',
            text: 'Send'
          }
        });
        dispatch((0, _send.startNewDraftTransaction)({
          type: _transaction.ASSET_TYPES.NATIVE
        })).then(() => {
          history.push(_routes.SEND_ROUTE);
        });
      }
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      disabled: !isSwapsChain,
      Icon: _swapIcon.default,
      onClick: () => {
        if (isSwapsChain) {
          trackEvent({
            event: _metametrics2.EVENT_NAMES.NAV_SWAP_BUTTON_CLICKED,
            category: _metametrics2.EVENT.CATEGORIES.SWAPS,
            properties: {
              token_symbol: 'ETH',
              location: _metametrics2.EVENT.SOURCE.SWAPS.MAIN_VIEW,
              text: 'Swap'
            }
          });
          dispatch((0, _swaps.setSwapsFromToken)(defaultSwapsToken));

          if (usingHardwareWallet) {
            global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
          } else {
            history.push(_routes.BUILD_QUOTE_ROUTE);
          }
        }
      },
      label: t('swap'),
      tooltipRender: isSwapsChain ? null : contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom"
      }, contents)
    })),
    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      image: primaryTokenImage,
      imageBorder: true
    })
  }));
};

EthOverview.propTypes = {
  className: _propTypes.default.string
};
EthOverview.defaultProps = {
  className: undefined
};
var _default = EthOverview;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js", {"./eth-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\eth-overview.js","./token-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\token-overview.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\wallet-overview\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EthOverview", {
  enumerable: true,
  get: function () {
    return _ethOverview.default;
  }
});
Object.defineProperty(exports, "TokenOverview", {
  enumerable: true,
  get: function () {
    return _tokenOverview.default;
  }
});

var _ethOverview = _interopRequireDefault(require("./eth-overview"));

var _tokenOverview = _interopRequireDefault(require("./token-overview"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\token-overview.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../../../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/error-keys":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/hardware":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../hooks/useTokenFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../../ui/icon-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-button\\index.js","../../ui/icon/overview-buy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-buy-icon.component.js","../../ui/icon/overview-send-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-send-icon.component.js","../../ui/icon/swap-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon.component.js","../../ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../deposit-popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\deposit-popover\\index.js","./wallet-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\wallet-overview\token-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));

var _i18n = require("../../../contexts/i18n");

var _hardware = require("../../../helpers/utils/hardware");

var _routes = require("../../../helpers/constants/routes");

var _useTokenTracker = require("../../../hooks/useTokenTracker");

var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");

var _send = require("../../../ducks/send");

var _swaps = require("../../../ducks/swaps/swaps");

var _selectors = require("../../../selectors/selectors");

var _overviewBuyIcon = _interopRequireDefault(require("../../ui/icon/overview-buy-icon.component"));

var _swapIcon = _interopRequireDefault(require("../../ui/icon/swap-icon.component"));

var _overviewSendIcon = _interopRequireDefault(require("../../ui/icon/overview-send-icon.component"));

var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));

var _errorKeys = require("../../../helpers/constants/error-keys");

var _actions = require("../../../store/actions");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _transaction = require("../../../../shared/constants/transaction");

var _depositPopover = _interopRequireDefault(require("../deposit-popover"));

var _walletOverview = _interopRequireDefault(require("./wallet-overview"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TokenOverview = ({
  className,
  token
}) => {
  var _tokensWithBalances$, _tokensWithBalances$2;

  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [showDepositPopover, setShowDepositPopover] = (0, _react.useState)(false);
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring.type);
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const balanceToRender = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const balance = (_tokensWithBalances$2 = tokensWithBalances[0]) === null || _tokensWithBalances$2 === void 0 ? void 0 : _tokensWithBalances$2.balance;
  const formattedFiatBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token.address, balanceToRender, token.symbol);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const isTokenBuyableCoinbasePay = (0, _reactRedux.useSelector)(state => (0, _selectors.getIsBuyableCoinbasePayToken)(state, token.symbol));
  const isTokenBuyableTransak = (0, _reactRedux.useSelector)(state => (0, _selectors.getIsBuyableTransakToken)(state, token.symbol));
  const isTokenBuyableMoonpay = (0, _reactRedux.useSelector)(state => (0, _selectors.getIsBuyableMoonpayToken)(state, token.symbol));
  const isTokenBuyableWyre = (0, _reactRedux.useSelector)(state => (0, _selectors.getIsBuyableWyreToken)(state, token.symbol));
  const isBuyable = isTokenBuyableCoinbasePay || isTokenBuyableTransak || isTokenBuyableMoonpay || isTokenBuyableWyre;
  (0, _react.useEffect)(() => {
    if (token.isERC721 && false) {
      dispatch((0, _actions.showModal)({
        name: 'CONVERT_TOKEN_TO_NFT',
        tokenAddress: token.address
      }));
    }
  }, [token.isERC721, token.address, dispatch]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showDepositPopover && /*#__PURE__*/_react.default.createElement(_depositPopover.default, {
    onClose: () => setShowDepositPopover(false),
    token: token
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    balance: /*#__PURE__*/_react.default.createElement("div", {
      className: "token-overview__balance"
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "token-overview__primary-balance",
      displayValue: balanceToRender,
      suffix: token.symbol
    }), formattedFiatBalance ? /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "token-overview__secondary-balance",
      displayValue: formattedFiatBalance,
      hideLabel: true
    }) : null),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isBuyable && /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      Icon: _overviewBuyIcon.default,
      label: t('buy'),
      onClick: () => {
        trackEvent({
          event: 'Clicked Deposit: Token',
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            action: 'Home',
            legacy_event: true
          }
        });
        setShowDepositPopover(true);
      },
      disabled: token.isERC721
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      onClick: async () => {
        trackEvent({
          event: _metametrics2.EVENT_NAMES.NAV_SEND_BUTTON_CLICKED,
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            token_symbol: token.symbol,
            location: _metametrics2.EVENT.SOURCE.SWAPS.TOKEN_VIEW,
            text: 'Send'
          }
        });

        try {
          await dispatch((0, _send.startNewDraftTransaction)({
            type: _transaction.ASSET_TYPES.TOKEN,
            details: token
          }));
          history.push(_routes.SEND_ROUTE);
        } catch (err) {
          if (!err.message.includes(_errorKeys.INVALID_ASSET_TYPE)) {
            throw err;
          }
        }
      },
      Icon: _overviewSendIcon.default,
      label: t('send'),
      "data-testid": "eth-overview-send",
      disabled: token.isERC721
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      disabled: !isSwapsChain,
      Icon: _swapIcon.default,
      onClick: () => {
        if (isSwapsChain) {
          trackEvent({
            event: _metametrics2.EVENT_NAMES.NAV_SWAP_BUTTON_CLICKED,
            category: _metametrics2.EVENT.CATEGORIES.SWAPS,
            properties: {
              token_symbol: token.symbol,
              location: _metametrics2.EVENT.SOURCE.SWAPS.TOKEN_VIEW,
              text: 'Swap'
            }
          });
          dispatch((0, _swaps.setSwapsFromToken)({ ...token,
            address: token.address.toLowerCase(),
            iconUrl: token.image,
            balance,
            string: balanceToRender
          }));

          if (usingHardwareWallet) {
            global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
          } else {
            history.push(_routes.BUILD_QUOTE_ROUTE);
          }
        }
      },
      label: t('swap'),
      tooltipRender: isSwapsChain ? null : contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom",
        disabled: isSwapsChain
      }, contents)
    })),
    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      address: token.address,
      image: token.image
    })
  }));
};

TokenOverview.propTypes = {
  className: _propTypes.default.string,
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    image: _propTypes.default.string,
    isERC721: _propTypes.default.bool
  }).isRequired
};
TokenOverview.defaultProps = {
  className: undefined
};
var _default = TokenOverview;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\wallet-overview\wallet-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WalletOverview = ({
  balance,
  buttons,
  className,
  icon,
  loading
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('wallet-overview', className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__balance"
  }, loading ? null : icon, balance), /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__buttons"
  }, buttons));
};

WalletOverview.propTypes = {
  balance: _propTypes.default.element.isRequired,
  buttons: _propTypes.default.element.isRequired,
  className: _propTypes.default.string,
  icon: _propTypes.default.element.isRequired,
  loading: _propTypes.default.bool
};
WalletOverview.defaultProps = {
  className: undefined
};
var _default = WalletOverview;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\whats-new-popup\\index.js", {"./whats-new-popup":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\whats-new-popup\\whats-new-popup.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\whats-new-popup\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _whatsNewPopup.default;
  }
});

var _whatsNewPopup = _interopRequireDefault(require("./whats-new-popup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\whats-new-popup\\whats-new-popup.js", {"../../../../shared/notifications":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\notifications\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useEqualityCheck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../../ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\app\whats-new-popup\whats-new-popup.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WhatsNewPopup;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _metamask = require("../../../ducks/metamask/metamask");

var _i18n = require("../../../contexts/i18n");

var _useEqualityCheck = require("../../../hooks/useEqualityCheck");

var _button = _interopRequireDefault(require("../../ui/button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _actions = require("../../../store/actions");

var _notifications = require("../../../../shared/notifications");

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

var _designSystem = require("../../../helpers/constants/design-system");

var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getActionFunctionById(id, history) {
  const actionFunctions = {
    2: () => {
      global.platform.openTab({
        url: 'https://survey.alchemer.com/s3/6173069/MetaMask-Extension-NPS-January-2021'
      });
    },
    3: () => {
      global.platform.openTab({
        url: 'https://community.metamask.io/t/about-the-security-category/72'
      });
    },
    4: () => {
      (0, _actions.updateViewedNotifications)({
        4: true
      });
      history.push(_routes.BUILD_QUOTE_ROUTE);
    },
    5: () => {
      (0, _actions.updateViewedNotifications)({
        5: true
      });
      global.platform.openTab({
        url: _zendeskUrl.default.SECRET_RECOVERY_PHRASE
      });
    },
    8: () => {
      (0, _actions.updateViewedNotifications)({
        8: true
      });
      history.push(_routes.ADVANCED_ROUTE);
    },
    10: () => {
      (0, _actions.updateViewedNotifications)({
        10: true
      });
      history.push(`${_routes.ADVANCED_ROUTE}#token-description`);
    },
    12: () => {
      (0, _actions.updateViewedNotifications)({
        12: true
      });
      history.push(_routes.EXPERIMENTAL_ROUTE);
    },
    14: () => {
      (0, _actions.updateViewedNotifications)({
        14: true
      });
      history.push(`${_routes.ADVANCED_ROUTE}#backup-userdata`);
    },
    16: () => {
      (0, _actions.updateViewedNotifications)({
        16: true
      });
      history.push(_routes.EXPERIMENTAL_ROUTE);
    }
  };
  return actionFunctions[id];
}

const renderDescription = description => {
  if (!Array.isArray(description)) {
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.Paragraph
    }, description);
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, description.map((piece, index) => {
    const isLast = index === description.length - 1;
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      key: `item-${index}`,
      variant: _designSystem.TYPOGRAPHY.Paragraph,
      boxProps: {
        marginBottom: isLast ? 0 : 2
      }
    }, piece);
  }));
};

const renderFirstNotification = (notification, idRefMap, history, isLast) => {
  const {
    id,
    date,
    title,
    description,
    image,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);

  const imageComponent = image && /*#__PURE__*/_react.default.createElement("img", {
    className: "whats-new-popup__notification-image",
    src: image.src,
    height: image.height,
    width: image.width
  });

  const placeImageBelowDescription = image === null || image === void 0 ? void 0 : image.placeImageBelowDescription;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification whats-new-popup__first-notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, !placeImageBelowDescription && imageComponent, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), placeImageBelowDescription && imageComponent, actionText && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "whats-new-popup__button",
    onClick: actionFunction
  }, actionText), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};

const renderSubsequentNotification = (notification, idRefMap, history, isLast) => {
  const {
    id,
    date,
    title,
    description,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), actionText && /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__link",
    onClick: actionFunction
  }, `${actionText} >`), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};

function WhatsNewPopup({
  onClose
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const notifications = (0, _reactRedux.useSelector)(_selectors.getSortedAnnouncementsToShow);
  const locale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);
  const [seenNotifications, setSeenNotifications] = (0, _react.useState)({});
  const popoverRef = (0, _react.useRef)();
  const memoizedNotifications = (0, _useEqualityCheck.useEqualityCheck)(notifications);
  const idRefMap = (0, _react.useMemo)(() => memoizedNotifications.reduce((_idRefMap, notification) => ({ ..._idRefMap,
    [notification.id]: /*#__PURE__*/_react.default.createRef()
  }), {}), [memoizedNotifications]);
  (0, _react.useEffect)(() => {
    const observer = new window.IntersectionObserver((entries, _observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const [id, ref] = Object.entries(idRefMap).find(([_, _ref]) => _ref.current.isSameNode(entry.target));
          setSeenNotifications(_seenNotifications => ({ ..._seenNotifications,
            [id]: true
          }));

          _observer.unobserve(ref.current);
        }
      });
    }, {
      root: popoverRef.current,
      threshold: 1.0
    });
    Object.values(idRefMap).forEach(ref => {
      observer.observe(ref.current);
    });
    return () => {
      observer.disconnect();
    };
  }, [idRefMap, setSeenNotifications]);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "whats-new-popup__popover",
    title: t('whatsNew'),
    onClose: () => {
      (0, _actions.updateViewedNotifications)(seenNotifications);
      onClose();
    },
    popoverRef: popoverRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notifications"
  }, notifications.map(({
    id
  }, index) => {
    const notification = (0, _notifications.getTranslatedUINotifications)(t, locale)[id];
    const isLast = index === notifications.length - 1; // Display the swaps notification with full image

    return index === 0 || id === 1 ? renderFirstNotification(notification, idRefMap, history, isLast) : renderSubsequentNotification(notification, idRefMap, history, isLast);
  })));
}

WhatsNewPopup.propTypes = {
  onClose: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\icon.constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\icon\icon.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ICON_NAMES = void 0;

/**
 * The ICON_NAMES object contains all the possible icon names.
 * It is generated using the generateIconNames script in development/generate-icon-names.js
 * and stored in the environment variable ICON_NAMES
 * To add a new icon, add the icon svg file to app/images/icons
 * Ensure the svg has been optimized, is kebab case and starts with "icon-"
 * See "Adding a new icon" in ./README.md for more details
 */

/* eslint-disable prefer-destructuring*/
// process.env is not a standard JavaScript object, so we are not able to use object destructuring
const ICON_NAMES = {"ADD_OUTLINE":"add-outline","ADD_SQUARE_FILLED":"add-square-filled","ARROW_2_DOWN":"arrow-2-down","ARROW_2_LEFT":"arrow-2-left","ARROW_2_RIGHT":"arrow-2-right","ARROW_2_UP":"arrow-2-up","ARROW_DOWN":"arrow-down","ARROW_LEFT":"arrow-left","ARROW_RIGHT":"arrow-right","ARROW_UP":"arrow-up","BANK_FILLED":"bank-filled","BANK_TOKEN_FILLED":"bank-token-filled","BOOK_FILLED":"book-filled","BOOKMARK_FILLED":"bookmark-filled","CALCULATOR_FILLED":"calculator-filled","CARD_FILLED":"card-filled","CARD_POS_FILLED":"card-pos-filled","CARD_TOKEN_FILLED":"card-token-filled","CATEGORY_FILLED":"category-filled","CHART_FILLED":"chart-filled","CHECK_BOX_OFF_OUTLINE":"check-box-off-outline","CHECK_BOX_ON_FILLED":"check-box-on-filled","CHECK_CIRCLE_ON_FILLED":"check-circle-on-filled","CHECK_OUTLINE":"check-outline","CLOCK_FILLED":"clock-filled","CLOSE_OUTLINE":"close-outline","CODE_CIRCLE_FILLED":"code-circle-filled","COIN_FILLED":"coin-filled","CONFIRMATION_FILLED":"confirmation-filled","CONNECT_FILLED":"connect-filled","COPY_FILLED":"copy-filled","COPY_SUCCESS_FILLED":"copy-success-filled","DANGER_FILLED":"danger-filled","DARK_FILLED":"dark-filled","DATA_FILLED":"data-filled","DIAGRAM":"diagram","DOCUMENT_CODE_FILLED":"document-code-filled","EDIT_FILLED":"edit-filled","ERASER_FILLED":"eraser-filled","EXPAND_OUTLINE":"expand-outline","EXPLORE_FILLED":"explore-filled","EXPORT":"export","EYE_FILLED":"eye-filled","EYE_SLASH_FILLED":"eye-slash-filled","FILTER_OUTLINE":"filter-outline","FLAG_FILLED":"flag-filled","FLASH_FILLED":"flash-filled","FLASH_SLASH_FILLED":"flash-slash-filled","FULL_CIRCLE_FILLED":"full-circle-filled","GAS_FILLED":"gas-filled","GLOBAL_FILLED":"global-filled","GLOBAL_SEARCH_FILLED":"global-search-filled","GRAPH_FILLED":"graph-filled","HEART_FILLED":"heart-filled","HIERARCHY_FILLED":"hierarchy-filled","HOME_FILLED":"home-filled","IMPORT":"import","INFO_FILLED":"info-filled","KEY_FILLED":"key-filled","LIGHT_FILLED":"light-filled","LINK_OUTLINE":"link-outline","LOADING_FILLED":"loading-filled","LOCK_CIRCLE_FILLED":"lock-circle-filled","LOCK_FILLED":"lock-filled","LOCK_SLASH_FILLED":"lock-slash-filled","LOGIN_OUTLINE":"login-outline","MENU_OUTLINE":"menu-outline","MESSAGE_QUESTION_FILLED":"message-question-filled","MESSAGES_FILLED":"messages-filled","MINUS_OUTINE":"minus-outine","MINUS_SQUARE_FILLED":"minus-square-filled","MOBILE_FILLED":"mobile-filled","MONEY_FILLED":"money-filled","MONITOR_FILLED":"monitor-filled","MORE_HORIZONTAL_OUTLINE":"more-horizontal-outline","MORE_VERTICAL_OUTLINE":"more-vertical-outline","NOTIFICATION_CIRCLE_FILLED":"notification-circle-filled","NOTIFICATION_FILLED":"notification-filled","PASSWORD_CHECK_FILLED":"password-check-filled","PEOPLE_FILLED":"people-filled","PROGRAMMING_ARROWS_FILLED":"programming-arrows-filled","QUESTION_FILLED":"question-filled","RECEIVED_OUTLINE":"received-outline","REFRESH":"refresh","SAVE":"save","SCAN_BARCODE_FILLED":"scan-barcode-filled","SCAN_FILLED":"scan-filled","SCAN_FOCUS_OUTLINE":"scan-focus-outline","SCROLL_FILLED":"scroll-filled","SEARCH_FILLED":"search-filled","SECURITY_CARD_FILLED":"security-card-filled","SECURITY_CROSS_FILLED":"security-cross-filled","SECURITY_KEY_FILLED":"security-key-filled","SECURITY_SEARCH_FILLED":"security-search-filled","SECURITY_SLASH_FILLED":"security-slash-filled","SECURITY_TICK_FILLED":"security-tick-filled","SECURITY_TIME_FILLED":"security-time-filled","SECURITY_USER_FILLED":"security-user-filled","SEND_1_FILLED":"send-1-filled","SEND_2_OUTLINE":"send-2-outline","SETTING_FILLED":"setting-filled","SLASH_FILLED":"slash-filled","SNAPS_FILLED":"snaps-filled","SNAPS_MOBILE_FILLED":"snaps-mobile-filled","SNAPS_PLUS_FILLED":"snaps-plus-filled","SPEEDOMETER_FILLED":"speedometer-filled","STAR":"star","STUDENT_FILLED":"student-filled","SWAP_HORIZONTAL_OUTLINE":"swap-horizontal-outline","SWAP_VERTICAL_FILLED":"swap-vertical-filled","TAG_FILLED":"tag-filled","TILDE":"tilde","TIMER_FILLED":"timer-filled","TRASH_FILLED":"trash-filled","TREND_DOWN_FILLED":"trend-down-filled","TREND_UP_FILLED":"trend-up-filled","USER_CIRCLE_ADD_FILLED":"user-circle-add-filled","USER_CIRCLE_FILLED":"user-circle-filled","USER_CIRLCE_ADD_FILLED":"user-cirlce-add-filled","USER_FILLED":"user-filled","WALLET_CARD_FILLED":"wallet-card-filled","WALLET_FILLED":"wallet-filled","WALLET_MONEY_FILLED":"wallet-money-filled","WARNING_FILLED":"warning-filled"};
exports.ICON_NAMES = ICON_NAMES;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\icon.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\icon\icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _box = _interopRequireDefault(require("../../ui/box/box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Icon = ({
  name,
  size = _designSystem.SIZES.MD,
  color = _designSystem.COLORS.INHERIT,
  className,
  style,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    color: color,
    className: (0, _classnames.default)(className, 'icon', `icon--size-${size}`),
    style: {
      /**
       * To reduce the possibility of injection attacks
       * the icon component uses mask-image instead of rendering
       * the svg directly.
       */
      maskImage: `url('./images/icons/icon-${name}.svg`,
      WebkitMaskImage: `url('./images/icons/icon-${name}.svg`,
      ...style
    }
  }, props));
};

exports.Icon = Icon;
Icon.propTypes = {
  /**
   * The name of the icon to display. Should be one of ICON_NAMES
   */
  name: _propTypes.default.string.isRequired,
  // Can't set PropTypes.oneOf(ICON_NAMES) because ICON_NAMES is an environment variable

  /**
   * The size of the Icon.
   * Possible values could be 'SIZES.XXS', 'SIZES.XS', 'SIZES.SM', 'SIZES.MD', 'SIZES.LG', 'SIZES.XL',
   * Default value is 'SIZES.MD'.
   */
  size: _propTypes.default.oneOf(Object.values(_designSystem.SIZES)),

  /**
   * The color of the icon.
   * Defaults to COLORS.INHERIT.
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.ICON_COLORS)),

  /**
   * An additional className to apply to the icon.
   */
  className: _propTypes.default.string,

  /**
   * Addition style properties to apply to the icon.
   * The Icon component uses inline styles to apply the icon's mask-image so be wary of overriding
   */
  style: _propTypes.default.object,

  /**
   * Icon accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\index.js", {"./icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\icon.js","./icon.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\icon\\icon.constants.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ICON_NAMES", {
  enumerable: true,
  get: function () {
    return _icon2.ICON_NAMES;
  }
});
Object.defineProperty(exports, "Icon", {
  enumerable: true,
  get: function () {
    return _icon.Icon;
  }
});

var _icon = require("./icon");

var _icon2 = require("./icon.constants");

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\tag\\index.js", {"./tag":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\tag\\tag.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\tag\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Tag", {
  enumerable: true,
  get: function () {
    return _tag.Tag;
  }
});

var _tag = require("./tag");

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\tag\\tag.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","../text":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\text\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\tag\tag.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tag = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _box = _interopRequireDefault(require("../../ui/box/box"));

var _text = require("../text");

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Tag = ({
  label,
  className,
  labelProps,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-tag', className),
    backgroundColor: _designSystem.COLORS.BACKGROUND_DEFAULT,
    borderColor: _designSystem.COLORS.BORDER_DEFAULT,
    borderWidth: 1,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    paddingLeft: 1,
    paddingRight: 1,
    borderRadius: _designSystem.BORDER_RADIUS.PILL,
    display: _designSystem.DISPLAY.INLINE_BLOCK
  }, props), /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    variant: _designSystem.TEXT.BODY_SM
  }, labelProps), label));
};

exports.Tag = Tag;
Tag.propTypes = {
  /**
   * The text content of the Tag component
   */
  label: _propTypes.default.string,

  /**
   * The label props of the component. Most Text component props can be used
   */
  labelProps: _text.Text.propTypes,

  /**
   * Additional classNames to be added to the Tag component
   */
  className: _propTypes.default.string,

  /**
   * Tag also accepts all props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\text\\index.js", {"./text":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\text\\text.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\text\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Text", {
  enumerable: true,
  get: function () {
    return _text.Text;
  }
});

var _text = require("./text");

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\component-library\\text\\text.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\component-library\text\text.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ValidTags = exports.Text = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../ui/box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ValidTags = ['dd', 'div', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'p', 'span', 'strong', 'ul', 'label', 'input'];
exports.ValidTags = ValidTags;

const Text = /*#__PURE__*/_react.default.forwardRef(({
  variant = _designSystem.TEXT.BODY_MD,
  color = _designSystem.TEXT_COLORS.TEXT_DEFAULT,
  fontWeight,
  fontStyle,
  textTransform,
  textAlign,
  overflowWrap,
  ellipsis,
  as,
  className,
  children,
  ...props
}, ref) => {
  let Tag = as !== null && as !== void 0 ? as : variant;
  let strongTagFontWeight;

  if (Tag === 'strong') {
    strongTagFontWeight = _designSystem.FONT_WEIGHT.BOLD;
  }

  const computedClassName = (0, _classnames.default)('text', className, `text--${variant}`, (strongTagFontWeight || fontWeight) && `text--font-weight-${strongTagFontWeight || fontWeight}`, {
    [`text--font-style-${fontStyle}`]: Boolean(fontStyle),
    [`text--ellipsis`]: Boolean(ellipsis),
    [`text--text-transform-${textTransform}`]: Boolean(textTransform),
    [`text--text-align-${textAlign}`]: Boolean(textAlign),
    [`text--color-${color}`]: Boolean(color),
    [`text--overflow-wrap-${overflowWrap}`]: Boolean(overflowWrap)
  }); // // Set a default tag based on variant

  const splitTag = Tag.split('-')[0];

  if (splitTag === 'body') {
    Tag = 'p';
  } else if (splitTag === 'heading') {
    Tag = 'h2';
  } else if (splitTag === 'display') {
    Tag = 'h1';
  }

  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    ref: ref,
    className: (0, _classnames.default)(computedClassName),
    as: Tag
  }, props), children);
});

exports.Text = Text;
Text.propTypes = {
  /**
   * The variation of font styles including sizes and weights of the Text component (display, heading, body)
   */
  variant: _propTypes.default.oneOf(Object.values(_designSystem.TEXT)),

  /**
   * The color of the Text component Should use the COLOR object from
   * ./ui/helpers/constants/design-system.js
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_COLORS)),

  /**
   * The font-weight of the Text component. Should use the FONT_WEIGHT object from
   * ./ui/helpers/constants/design-system.js
   */
  fontWeight: _propTypes.default.oneOf(Object.values(_designSystem.FONT_WEIGHT)),

  /**
   * The font-style of the Text component. Should use the FONT_STYLE object from
   * ./ui/helpers/constants/design-system.js
   */
  fontStyle: _propTypes.default.oneOf(Object.values(_designSystem.FONT_STYLE)),

  /**
   * The textTransform of the Text component. Should use the TEXT_TRANSFORM object from
   * ./ui/helpers/constants/design-system.js
   */
  textTransform: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_TRANSFORM)),

  /**
   * The text-align of the Text component. Should use the TEXT_ALIGN object from
   * ./ui/helpers/constants/design-system.js
   */
  textAlign: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)),

  /**
   * The overflow-wrap of the Text component. Should use the OVERFLOW_WRAP object from
   * ./ui/helpers/constants/design-system.js
   */
  overflowWrap: _propTypes.default.oneOf(Object.values(_designSystem.OVERFLOW_WRAP)),

  /**
   * Used for long strings that can be cut off...
   */
  ellipsis: _propTypes.default.bool,

  /**
   * Changes the root html element tag of the Text component.
   */
  as: _propTypes.default.oneOf(ValidTags),

  /**
   * Additional className to assign the Text component
   */
  className: _propTypes.default.string,

  /**
   * The text content of the Text component
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Text component accepts all Box component props
   */
  ..._box.default.propTypes
};
Text.displayName = 'Text'; // Used for React DevTools profiler

var _default = Text;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\account-list\\account-list.js", {"../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../app/user-preferenced-currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../check-box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\account-list\account-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _checkBox = _interopRequireWildcard(require("../check-box"));

var _identicon = _interopRequireDefault(require("../identicon"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../app/user-preferenced-currency-display"));

var _common = require("../../../helpers/constants/common");

var _tooltip = _interopRequireDefault(require("../tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const AccountList = ({
  selectNewAccountViaModal,
  accounts,
  addressLastConnectedMap,
  selectedAccounts,
  nativeCurrency,
  allAreSelected,
  deselectAll,
  selectAll,
  handleAccountClick
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const selectedAccountScrollRef = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(() => {
    var _selectedAccountScrol;

    (_selectedAccountScrol = selectedAccountScrollRef.current) === null || _selectedAccountScrol === void 0 ? void 0 : _selectedAccountScrol.scrollIntoView({
      behavior: 'smooth'
    });
  }, []);

  const Header = () => {
    let checked;

    if (allAreSelected()) {
      checked = _checkBox.CHECKED;
    } else if (selectedAccounts.size === 0) {
      checked = _checkBox.UNCHECKED;
    } else {
      checked = _checkBox.INDETERMINATE;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'choose-account-list__header--one-item': accounts.length === 1,
        'choose-account-list__header--multiple-items': accounts.length > 1
      })
    }, accounts.length > 1 ? /*#__PURE__*/_react.default.createElement("div", {
      className: "choose-account-list__select-all"
    }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
      className: "choose-account-list__header-check-box",
      checked: checked,
      onClick: () => allAreSelected() ? deselectAll() : selectAll()
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "choose-account-list__text-grey"
    }, t('selectAll')), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          width: 200,
          padding: 4
        }
      }, t('selectingAllWillAllow'))
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-info-circle"
    }))) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "choose-account-list__text-blue",
      onClick: () => selectNewAccountViaModal(handleAccountClick)
    }, t('newAccount')));
  };

  const List = () => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "choose-account-list__wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "choose-account-list__list"
    }, accounts.map((account, index) => {
      const {
        address,
        addressLabel,
        balance
      } = account;
      const isSelectedAccount = selectedAccounts.has(address);
      return /*#__PURE__*/_react.default.createElement("div", {
        key: `choose-account-list-${index}`,
        onClick: () => handleAccountClick(address),
        className: "choose-account-list__account",
        ref: isSelectedAccount ? selectedAccountScrollRef : null
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "choose-account-list__account-info-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
        className: "choose-account-list__list-check-box",
        checked: isSelectedAccount
      }), /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 34,
        address: address
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "choose-account-list__account__info"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "choose-account-list__account__label"
      }, addressLabel), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
        className: "choose-account-list__account__balance",
        type: _common.PRIMARY,
        value: balance,
        style: {
          color: 'var(--color-text-alternative)'
        },
        suffix: nativeCurrency
      }))), addressLastConnectedMap[address] ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: `${t('lastConnected')} ${addressLastConnectedMap[address]}`
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-info-circle"
      })) : null);
    })));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "choose-account-list"
  }, /*#__PURE__*/_react.default.createElement(Header, null), /*#__PURE__*/_react.default.createElement(List, null));
};

AccountList.propTypes = {
  /**
   * Array of user account objects
   */
  accounts: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string,
    addressLabel: _propTypes.default.string,
    lastConnectedDate: _propTypes.default.string,
    balance: _propTypes.default.string
  })).isRequired,

  /**
   * Function to select a new account via modal
   */
  selectNewAccountViaModal: _propTypes.default.func.isRequired,

  /**
   * A map of the last connected addresses
   */
  addressLastConnectedMap: _propTypes.default.object,

  /**
   * Native currency of current chain
   */
  nativeCurrency: _propTypes.default.string.isRequired,

  /**
   * Currently selected accounts
   */
  selectedAccounts: _propTypes.default.object.isRequired,

  /**
   * Function to check if all accounts are selected
   */
  allAreSelected: _propTypes.default.func.isRequired,

  /**
   * Function to deselect all accounts
   */
  deselectAll: _propTypes.default.func.isRequired,

  /**
   * Function to select all accounts
   */
  selectAll: _propTypes.default.func.isRequired,

  /**
   * Function to handle account click
   */
  handleAccountClick: _propTypes.default.func.isRequired
};
var _default = AccountList;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\account-list\\index.js", {"./account-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\account-list\\account-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\account-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountList.default;
  }
});

var _accountList = _interopRequireDefault(require("./account-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\account-mismatch-warning\\account-mismatch-warning.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../icon/info-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\info-icon.component.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\account-mismatch-warning\account-mismatch-warning.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountMismatchWarning;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _selectors = require("../../../selectors");

var _infoIcon = _interopRequireDefault(require("../icon/info-icon.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AccountMismatchWarning({
  address
}) {
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const t = (0, _useI18nContext.useI18nContext)();

  if (selectedAccount.address === address) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    html: /*#__PURE__*/_react.default.createElement("p", null, t('notCurrentAccount')),
    wrapperClassName: "account-mismatch-warning__tooltip-wrapper",
    containerClassName: "account-mismatch-warning__tooltip-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-mismatch-warning__tooltip-container-icon"
  }, /*#__PURE__*/_react.default.createElement(_infoIcon.default, {
    severity: _designSystem.SEVERITIES.WARNING
  })));
}

AccountMismatchWarning.propTypes = {
  address: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js", {"../info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../info-tooltip/info-tooltip-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip-icon.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\actionable-message\actionable-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ActionableMessage;
exports.typeHash = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _infoTooltip = _interopRequireDefault(require("../info-tooltip"));

var _infoTooltipIcon = _interopRequireDefault(require("../info-tooltip/info-tooltip-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CLASSNAME_WARNING = 'actionable-message--warning';
const CLASSNAME_DANGER = 'actionable-message--danger';
const CLASSNAME_SUCCESS = 'actionable-message--success';
const CLASSNAME_WITH_RIGHT_BUTTON = 'actionable-message--with-right-button';
const typeHash = {
  warning: CLASSNAME_WARNING,
  danger: CLASSNAME_DANGER,
  success: CLASSNAME_SUCCESS,
  default: ''
};
exports.typeHash = typeHash;

function ActionableMessage({
  message = '',
  primaryAction = null,
  primaryActionV2 = null,
  secondaryAction = null,
  className = '',
  infoTooltipText = '',
  withRightButton = false,
  type = 'default',
  useIcon = false,
  icon,
  iconFillColor = '',
  roundedButtons,
  dataTestId
}) {
  const actionableMessageClassName = (0, _classnames.default)('actionable-message', typeHash[type], withRightButton ? CLASSNAME_WITH_RIGHT_BUTTON : null, className, {
    'actionable-message--with-icon': useIcon
  });
  const onlyOneAction = primaryAction && !secondaryAction || secondaryAction && !primaryAction;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: actionableMessageClassName,
    "data-testid": dataTestId
  }, useIcon ? icon || /*#__PURE__*/_react.default.createElement(_infoTooltipIcon.default, {
    fillColor: iconFillColor
  }) : null, infoTooltipText && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "left",
    contentText: infoTooltipText,
    wrapperClassName: "actionable-message__info-tooltip-wrapper"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "actionable-message__message"
  }, message), primaryActionV2 && /*#__PURE__*/_react.default.createElement("button", {
    className: "actionable-message__action-v2",
    onClick: primaryActionV2.onClick
  }, primaryActionV2.label), (primaryAction || secondaryAction) && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('actionable-message__actions', {
      'actionable-message__actions--single': onlyOneAction
    })
  }, primaryAction && /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('actionable-message__action', 'actionable-message__action--primary', `actionable-message__action-${type}`, {
      'actionable-message__action--rounded': roundedButtons
    }),
    onClick: primaryAction.onClick
  }, primaryAction.label), secondaryAction && /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('actionable-message__action', 'actionable-message__action--secondary', `actionable-message__action-${type}`, {
      'actionable-message__action--rounded': roundedButtons
    }),
    onClick: secondaryAction.onClick
  }, secondaryAction.label)));
}

ActionableMessage.propTypes = {
  /**
   * Text inside actionable message
   */
  message: _propTypes.default.node.isRequired,

  /**
   * First button props that have label and onClick props
   */
  primaryAction: _propTypes.default.shape({
    label: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * Another style of primary action.
   * This probably shouldn't have been added. A `children` prop might have been more appropriate.
   */
  primaryActionV2: _propTypes.default.shape({
    label: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * Second button props that have label and onClick props
   */
  secondaryAction: _propTypes.default.shape({
    label: _propTypes.default.string,
    onClick: _propTypes.default.func
  }),

  /**
   * Additional css className for the component based on the parent css
   */
  className: _propTypes.default.string,

  /**
   * change color theme for the component that already predefined in css
   */
  type: _propTypes.default.oneOf(Object.keys(typeHash)),

  /**
   * change text align to left and button to bottom right
   */
  withRightButton: _propTypes.default.bool,

  /**
   * Add tooltip and custom message
   */
  infoTooltipText: _propTypes.default.string,

  /**
   * Add tooltip icon in the left component without message
   */
  useIcon: _propTypes.default.bool,

  /**
   * Custom icon component
   */
  icon: _propTypes.default.node,

  /**
   * change tooltip icon color
   */
  iconFillColor: _propTypes.default.string,

  /**
   * Whether the buttons are rounded
   */
  roundedButtons: _propTypes.default.bool,
  dataTestId: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js", {"./actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\actionable-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _actionableMessage.default;
  }
});

var _actionableMessage = _interopRequireDefault(require("./actionable-message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\alert\\index.js", {"../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../hooks/usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\alert\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _usePrevious = require("../../../hooks/usePrevious");

var _time = require("../../../../shared/constants/time");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Alert(props) {
  const [visible, setVisible] = (0, _react.useState)(false);
  const [className, setClassName] = (0, _react.useState)('');
  const lastVisible = (0, _usePrevious.usePrevious)(props.visible);
  (0, _react.useEffect)(() => {
    const animateIn = () => {
      setClassName('visible');
      setVisible(true);
    };

    const animateOut = () => {
      setClassName('hidden');
      setTimeout(_ => {
        setVisible(false);
      }, _time.MILLISECOND * 500);
    };

    if (!lastVisible && props.visible) {
      animateIn(props.msg);
    } else if (lastVisible && !props.visible) {
      animateOut();
    }
  }, [lastVisible, props.msg, props.visible]);

  if (!visible) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('global-alert', className)
  }, /*#__PURE__*/_react.default.createElement("a", {
    className: "msg"
  }, props.msg));
}

Alert.propTypes = {
  visible: _propTypes.default.bool.isRequired,
  msg: _propTypes.default.string
};
var _default = Alert;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\box\box.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ValidTextColors = exports.ValidIconColors = exports.ValidBorderColors = exports.ValidBackgroundColors = exports.MultipleTextColors = exports.MultipleSizesAndAuto = exports.MultipleSizes = exports.MultipleJustifyContents = exports.MultipleBorderColors = exports.MultipleBlockSizes = exports.MultipleBackgroundColors = exports.MultipleAlignItems = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const BASE_CLASS_NAME = 'box';
const Sizes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

const ValidSize = _propTypes.default.oneOf(Sizes);

const ValidBlockSize = _propTypes.default.oneOf(Object.values(_designSystem.BLOCK_SIZES));

const ValidSizeAndAuto = _propTypes.default.oneOf([...Sizes, 'auto']);

const ValidBackgroundColors = _propTypes.default.oneOf(Object.values(_designSystem.BACKGROUND_COLORS));

exports.ValidBackgroundColors = ValidBackgroundColors;

const ValidBorderColors = _propTypes.default.oneOf(Object.values(_designSystem.BORDER_COLORS));

exports.ValidBorderColors = ValidBorderColors;

const ValidTextColors = _propTypes.default.oneOf(Object.values(_designSystem.TEXT_COLORS));

exports.ValidTextColors = ValidTextColors;

const ValidIconColors = _propTypes.default.oneOf(Object.values(_designSystem.ICON_COLORS));

exports.ValidIconColors = ValidIconColors;

const ValidAlignItem = _propTypes.default.oneOf(Object.values(_designSystem.ALIGN_ITEMS));

const ValidJustifyContent = _propTypes.default.oneOf(Object.values(_designSystem.JUSTIFY_CONTENT));

const ArrayOfValidSizes = _propTypes.default.arrayOf(ValidSize);

const MultipleSizes = _propTypes.default.oneOfType([ValidSize, ArrayOfValidSizes]);

exports.MultipleSizes = MultipleSizes;

const ArrayOfValidBlockSizes = _propTypes.default.arrayOf(ValidBlockSize);

const MultipleBlockSizes = _propTypes.default.oneOfType([ValidBlockSize, ArrayOfValidBlockSizes]);

exports.MultipleBlockSizes = MultipleBlockSizes;

const ArrayOfValidSizesAndAuto = _propTypes.default.arrayOf(ValidSizeAndAuto);

const MultipleSizesAndAuto = _propTypes.default.oneOfType([ValidSizeAndAuto, ArrayOfValidSizesAndAuto]);

exports.MultipleSizesAndAuto = MultipleSizesAndAuto;

const ArrayOfValidBorderColors = _propTypes.default.arrayOf(ValidBorderColors);

const MultipleBorderColors = _propTypes.default.oneOfType([ValidBorderColors, ArrayOfValidBorderColors]);

exports.MultipleBorderColors = MultipleBorderColors;

const ArrayOfValidBackgroundColors = _propTypes.default.arrayOf(ValidBackgroundColors);

const MultipleBackgroundColors = _propTypes.default.oneOfType([ValidBackgroundColors, ArrayOfValidBackgroundColors]);

exports.MultipleBackgroundColors = MultipleBackgroundColors;

const ArrayOfValidTextColors = _propTypes.default.arrayOf(ValidTextColors);

const ArrayOfValidIconColors = _propTypes.default.arrayOf(ValidIconColors);

const MultipleTextColors = _propTypes.default.oneOfType([ValidTextColors, ArrayOfValidTextColors, ValidIconColors, ArrayOfValidIconColors]);

exports.MultipleTextColors = MultipleTextColors;

const ArrayOfValidAlignItems = _propTypes.default.arrayOf(ValidAlignItem);

const MultipleAlignItems = _propTypes.default.oneOfType([ValidAlignItem, ArrayOfValidAlignItems]);

exports.MultipleAlignItems = MultipleAlignItems;

const ArrayOfValidJustifyContents = _propTypes.default.arrayOf(ValidJustifyContent);

const MultipleJustifyContents = _propTypes.default.oneOfType([ValidJustifyContent, ArrayOfValidJustifyContents]);

exports.MultipleJustifyContents = MultipleJustifyContents;

function isValidSize(type, value) {
  // Only margin types allow 'auto'
  return typeof value === 'number' || (type === 'margin' || type === 'margin-top' || type === 'margin-right' || type === 'margin-bottom' || type === 'margin-left') && value === 'auto';
}

function isValidString(type, value) {
  return typeof type === 'string' && typeof value === 'string';
}
/**
 * Generate classnames
 * Generates classnames for different utility styles
 * Also accepts responsive props in the form of an array
 * Maps responsive props to mobile first breakpoints
 *
 * @param {string} type - The style declaration type "margin", "margin-top", "padding", "display" etc
 * @param {array || number || string} value - prop value being passed in array props are responsive props
 * @param {*} validatorFn - The validation function for each type of value
 * @returns
 */


const generateClassNames = (0, _lodash.memoize)((type, value, validatorFn) => {
  // if value does not exist return null
  if (!value) {
    return null;
  }

  const classesObject = {}; // if value is an array with single item e.g. marginTop={[1]}

  const singleArrayItemProp = Array.isArray(value) && value.length === 1 ? value[0] : undefined; // if value single value e.g. marginTop={1}

  const singleValueProp = !Array.isArray(value) && typeof value === 'string' || typeof value === 'number' ? value : undefined; // single digit equals single value or single array item

  const singleValue = singleValueProp || singleArrayItemProp; // 0 is an acceptable value but is falsy in js

  if (singleValue || singleValue === 0) {
    // add base style without any breakpoint prefixes to classObject
    classesObject[`${BASE_CLASS_NAME}--${type}-${singleValue}`] = validatorFn(type, singleValue);
  } else {
    // If array with more than one item
    switch (value.length) {
      case 4:
        // add base/sm/md/lg
        classesObject[`${BASE_CLASS_NAME}--${type}-${value[0]}`] = value[0] && validatorFn(type, value[0]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[1]}:${type}-${value[1]}`] = value[1] && validatorFn(type, value[1]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[2]}:${type}-${value[2]}`] = value[2] && validatorFn(type, value[2]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[3]}:${type}-${value[3]}`] = value[3] && validatorFn(type, value[3]);
        break;

      case 3:
        // add base/sm/md
        classesObject[`${BASE_CLASS_NAME}--${type}-${value[0]}`] = value[0] && validatorFn(type, value[0]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[1]}:${type}-${value[1]}`] = value[1] && validatorFn(type, value[1]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[2]}:${type}-${value[2]}`] = value[2] && validatorFn(type, value[2]);
        break;

      case 2:
        // add base/sm
        classesObject[`${BASE_CLASS_NAME}--${type}-${value[0]}`] = value[0] && validatorFn(type, value[0]);
        classesObject[`${BASE_CLASS_NAME}--${_designSystem.BREAKPOINTS[1]}:${type}-${value[1]}`] = value[1] && validatorFn(type, value[1]);
        break;

      default:
        console.log(`Invalid array prop length: ${value.length}`);
    }
  }

  return classesObject;
}, (type, value) => [type, value]);

const Box = /*#__PURE__*/_react.default.forwardRef(function Box({
  padding,
  paddingTop,
  paddingRight,
  paddingBottom,
  paddingLeft,
  margin,
  marginTop,
  marginRight,
  marginBottom,
  marginLeft,
  borderColor,
  borderWidth,
  borderRadius,
  borderStyle,
  alignItems,
  justifyContent,
  textAlign,
  flexDirection = _designSystem.FLEX_DIRECTION.ROW,
  flexWrap,
  gap,
  display,
  width,
  height,
  children,
  className,
  backgroundColor,
  color,
  as = 'div',
  ...props
}, ref) {
  const boxClassName = (0, _classnames.default)(BASE_CLASS_NAME, className, // Margin
  margin && generateClassNames('margin', margin, isValidSize), marginTop && generateClassNames('margin-top', marginTop, isValidSize), marginRight && generateClassNames('margin-right', marginRight, isValidSize), marginBottom && generateClassNames('margin-bottom', marginBottom, isValidSize), marginLeft && generateClassNames('margin-left', marginLeft, isValidSize), // Padding
  padding && generateClassNames('padding', padding, isValidSize), paddingTop && generateClassNames('padding-top', paddingTop, isValidSize), paddingRight && generateClassNames('padding-right', paddingRight, isValidSize), paddingBottom && generateClassNames('padding-bottom', paddingBottom, isValidSize), paddingLeft && generateClassNames('padding-left', paddingLeft, isValidSize), display && generateClassNames('display', display, isValidString), gap && generateClassNames('gap', gap, isValidSize), flexDirection && generateClassNames('flex-direction', flexDirection, isValidString), flexWrap && generateClassNames('flex-wrap', flexWrap, isValidString), justifyContent && generateClassNames('justify-content', justifyContent, isValidString), alignItems && generateClassNames('align-items', alignItems, isValidString), textAlign && generateClassNames('text-align', textAlign, isValidString), width && generateClassNames('width', width, isValidString), height && generateClassNames('height', height, isValidString), color && generateClassNames('color', color, isValidString), backgroundColor && generateClassNames('background-color', backgroundColor, isValidString), borderRadius && generateClassNames('rounded', borderRadius, isValidString), borderStyle && generateClassNames('border-style', borderStyle, isValidString), borderColor && generateClassNames('border-color', borderColor, isValidString), borderWidth && generateClassNames('border-width', borderWidth, isValidSize), {
    // Auto applied classes
    // ---Borders---
    // if borderWidth or borderColor is supplied w/o style, default to solid
    'box--border-style-solid': !borderStyle && (Boolean(borderWidth) || Boolean(borderColor)),
    // if borderColor supplied w/o width, default to 1
    'box--border-width-1': !borderWidth && Boolean(borderColor),
    // ---Flex/Grid alignment---
    // if justifyContent or alignItems supplied w/o display, default to flex
    'box--display-flex': !display && (Boolean(justifyContent) || Boolean(alignItems))
  }); // Apply Box styles to any other component using function pattern

  if (typeof children === 'function') {
    return children(boxClassName);
  }

  const Component = as;
  return /*#__PURE__*/_react.default.createElement(Component, _extends({
    className: boxClassName,
    ref: ref
  }, props), children);
});

Box.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  flexDirection: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.FLEX_DIRECTION)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.FLEX_DIRECTION)))]),
  flexWrap: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.FLEX_WRAP)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.FLEX_WRAP)))]),
  gap: MultipleSizes,
  margin: MultipleSizesAndAuto,
  marginTop: MultipleSizesAndAuto,
  marginBottom: MultipleSizesAndAuto,
  marginRight: MultipleSizesAndAuto,
  marginLeft: MultipleSizesAndAuto,
  padding: MultipleSizes,
  paddingTop: MultipleSizes,
  paddingBottom: MultipleSizes,
  paddingRight: MultipleSizes,
  paddingLeft: MultipleSizes,
  borderColor: MultipleBorderColors,
  borderWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
  borderRadius: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.BORDER_RADIUS)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.BORDER_RADIUS)))]),
  borderStyle: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.BORDER_STYLE)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.BORDER_STYLE)))]),
  alignItems: MultipleAlignItems,
  justifyContent: MultipleJustifyContents,
  textAlign: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)))]),
  display: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.values(_designSystem.DISPLAY)), _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_designSystem.DISPLAY)))]),
  width: MultipleBlockSizes,
  height: MultipleBlockSizes,
  backgroundColor: MultipleBackgroundColors,
  className: _propTypes.default.string,
  style: _propTypes.default.object,

  /**
   * The polymorphic `as` prop allows you to change the root HTML element of the Box component
   * Defaults to 'div'
   */
  as: _propTypes.default.string,

  /**
   * The color of the Typography component Should use the COLOR object from
   * ./ui/helpers/constants/design-system.js
   */
  color: MultipleTextColors
};
var _default = Box;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js", {"./box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\box\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MultipleSizes", {
  enumerable: true,
  get: function () {
    return _box.MultipleSizes;
  }
});
Object.defineProperty(exports, "MultipleSizesAndAuto", {
  enumerable: true,
  get: function () {
    return _box.MultipleSizesAndAuto;
  }
});
Object.defineProperty(exports, "ValidBackgroundColors", {
  enumerable: true,
  get: function () {
    return _box.ValidBackgroundColors;
  }
});
Object.defineProperty(exports, "ValidBorderColors", {
  enumerable: true,
  get: function () {
    return _box.ValidBorderColors;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _box.default;
  }
});

var _box = _interopRequireWildcard(require("./box"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button-group\\button-group.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\button-group\button-group.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ButtonGroup extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      activeButtonIndex: this.props.noButtonActiveByDefault ? null : this.props.defaultActiveButtonIndex
    });
  }

  componentDidUpdate(_, prevState) {
    // Provides an API for dynamically updating the activeButtonIndex
    if (typeof this.props.newActiveButtonIndex === 'number' && prevState.activeButtonIndex !== this.props.newActiveButtonIndex) {
      this.setState({
        activeButtonIndex: this.props.newActiveButtonIndex
      });
    }
  }

  handleButtonClick(activeButtonIndex) {
    this.setState({
      activeButtonIndex
    });
  }

  renderButtons() {
    const {
      children,
      disabled,
      variant
    } = this.props;
    return _react.default.Children.map(children, (child, index) => {
      return child && /*#__PURE__*/_react.default.createElement("button", {
        role: variant === 'radiogroup' ? 'radio' : undefined,
        "aria-checked": index === this.state.activeButtonIndex,
        className: (0, _classnames.default)('button-group__button', child.props.className, {
          'radio-button': variant === 'radiogroup',
          'button-group__button--active': index === this.state.activeButtonIndex,
          'radio-button--active': variant === 'radiogroup' && index === this.state.activeButtonIndex
        }),
        "data-testid": `button-group__button${index}`,
        onClick: () => {
          var _child$props$onClick, _child$props;

          this.handleButtonClick(index);
          (_child$props$onClick = (_child$props = child.props).onClick) === null || _child$props$onClick === void 0 ? void 0 : _child$props$onClick.call(_child$props);
        },
        disabled: disabled || child.props.disabled,
        key: index
      }, child.props.children);
    });
  }

  render() {
    const {
      className,
      style,
      variant
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(className, {
        'radio-button-group': variant === 'radiogroup'
      }),
      role: variant === 'radiogroup' ? 'radiogroup' : undefined,
      style: style
    }, this.renderButtons());
  }

}

exports.default = ButtonGroup;

_defineProperty(ButtonGroup, "propTypes", {
  /**
   * change button active order
   */
  defaultActiveButtonIndex: _propTypes.default.number,

  /**
   * no button are active before clicked by the user
   */
  noButtonActiveByDefault: _propTypes.default.bool,

  /**
   * disabling every button inside button group
   */
  disabled: _propTypes.default.bool,

  /**
   * Children must be an array of button components
   */
  children: _propTypes.default.array,

  /**
   * Adds a className to the root div of the of the ButtonGroup component
   */
  className: _propTypes.default.string,

  /**
   * adding style for button group component
   */
  style: _propTypes.default.object,

  /**
   * updating value of active button in button group component
   */
  newActiveButtonIndex: _propTypes.default.number,

  /**
   * options for rendering type of button, consist of 'default' and 'radiogroup'
   */
  variant: _propTypes.default.oneOf(['radiogroup', 'default'])
});

_defineProperty(ButtonGroup, "defaultProps", {
  className: 'button-group',
  defaultActiveButtonIndex: 0,
  variant: 'default'
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button-group\\index.js", {"./button-group.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button-group\\button-group.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\button-group\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _buttonGroup.default;
  }
});

var _buttonGroup = _interopRequireDefault(require("./button-group.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\button.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\button\button.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const CLASSNAME_DEFAULT = 'btn-default';
const CLASSNAME_PRIMARY = 'btn-primary';
const CLASSNAME_SECONDARY = 'btn-secondary';
const CLASSNAME_RAISED = 'btn-raised';
const CLASSNAME_LARGE = 'btn--large';
const CLASSNAME_ROUNDED = 'btn--rounded';
const CLASSNAME_INLINE = 'btn--inline';
const typeHash = {
  default: CLASSNAME_DEFAULT,
  primary: CLASSNAME_PRIMARY,
  secondary: CLASSNAME_SECONDARY,
  warning: 'btn-warning',
  danger: 'btn-danger',
  'danger-primary': 'btn-danger-primary',
  link: 'btn-link',
  inline: CLASSNAME_INLINE,
  raised: CLASSNAME_RAISED
};

const Button = ({
  type,
  submit = false,
  large,
  children,
  icon,
  className,
  rounded = true,
  ...buttonProps
}) => {
  const doRounding = rounded && type !== 'link' && type !== 'inline'; // To support using the Button component to render styled links that are semantic html
  // we swap the html tag we use to render this component and delete any buttonProps that
  // we know to be erroneous attributes for a link. We will likely want to extract Link
  // to its own component in the future.

  let Tag = 'button';

  if (type === 'link') {
    Tag = 'a';
  } else if (submit) {
    buttonProps.type = 'submit';
  }

  if (typeof buttonProps.onClick === 'function') {
    var _buttonProps$onKeyUp, _buttonProps$role, _buttonProps$tabIndex;

    (_buttonProps$onKeyUp = buttonProps.onKeyUp) !== null && _buttonProps$onKeyUp !== void 0 ? _buttonProps$onKeyUp : buttonProps.onKeyUp = event => {
      if (event.key === 'Enter') {
        buttonProps.onClick();
      }
    };
    (_buttonProps$role = buttonProps.role) !== null && _buttonProps$role !== void 0 ? _buttonProps$role : buttonProps.role = 'button';
    (_buttonProps$tabIndex = buttonProps.tabIndex) !== null && _buttonProps$tabIndex !== void 0 ? _buttonProps$tabIndex : buttonProps.tabIndex = 0;
  }

  return /*#__PURE__*/_react.default.createElement(Tag, _extends({
    className: (0, _classnames.default)('button', doRounding && CLASSNAME_ROUNDED, typeHash[type] || CLASSNAME_DEFAULT, large && CLASSNAME_LARGE, className)
  }, buttonProps), icon ? /*#__PURE__*/_react.default.createElement("span", {
    className: "button__icon"
  }, icon) : null, children);
};

Button.propTypes = {
  /**
   * The type of variation a button can be.
   * Can be one of 'default','primary','secondary','warning','danger','danger-primary' or 'link'
   */
  type: _propTypes.default.string,

  /**
   * If true sets the html 'type' attribute to type="submit"
   */
  submit: _propTypes.default.bool,

  /**
   * Increase the height of the button to 54px
   */
  large: _propTypes.default.bool,

  /**
   * Additional className to provide on the root element of the button
   */
  className: _propTypes.default.string,

  /**
   * The children of the button component
   */
  children: _propTypes.default.node,

  /**
   * Provide an icon component for an icon to appear on the left side of the button
   */
  icon: _propTypes.default.node,

  /**
   * Buttons are rounded by default.
   */
  rounded: _propTypes.default.bool
};
var _default = Button;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js", {"./button.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\button.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\button\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("./button.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _button.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\callout\\callout.js", {"../../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../icon/info-icon-inverted.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\info-icon-inverted.component.js","../typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\callout\callout.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Callout;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _infoIconInverted = _interopRequireDefault(require("../icon/info-icon-inverted.component"));

var _designSystem = require("../../../helpers/constants/design-system");

var _time = require("../../../../shared/constants/time");

var _typography = _interopRequireDefault(require("../typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Callout({
  severity,
  children,
  dismiss,
  isFirst,
  isLast,
  isMultiple
}) {
  const [removed, setRemoved] = (0, _react.useState)(false);
  const calloutClassName = (0, _classnames.default)('callout', `callout--${severity}`, {
    'callout--dismissed': removed === true,
    'callout--multiple': isMultiple === true,
    'callout--dismissible': Boolean(dismiss),
    'callout--first': isFirst === true || isMultiple !== true,
    'callout--last': isLast === true || isMultiple !== true
  }); // Clicking the close button will set removed state, which will trigger this
  // effect to refire due to changing dependencies. When that happens, after a
  // half of a second we fire the dismiss method from the parent. The
  // consuming component is responsible for modifying state and then removing
  // the element from the DOM.

  (0, _react.useEffect)(() => {
    if (removed) {
      setTimeout(() => {
        dismiss();
      }, _time.MILLISECOND * 500);
    }
  }, [removed, dismiss]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: calloutClassName
  }, /*#__PURE__*/_react.default.createElement(_infoIconInverted.default, {
    severity: severity
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    className: "callout__content"
  }, children), dismiss && /*#__PURE__*/_react.default.createElement("i", {
    onClick: () => {
      setRemoved(true);
    },
    onKeyUp: event => {
      if (event.key === 'Enter') {
        setRemoved(true);
      }
    },
    role: "button",
    tabIndex: 0,
    className: "fas fa-times callout__close-button"
  }));
}

Callout.propTypes = {
  severity: _propTypes.default.oneOf(Object.values(_designSystem.SEVERITIES)).isRequired,
  children: _propTypes.default.node.isRequired,
  dismiss: _propTypes.default.func,
  isFirst: _propTypes.default.bool,
  isLast: _propTypes.default.bool,
  isMultiple: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\callout\\index.js", {"./callout":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\callout\\callout.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\callout\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _callout.default;
  }
});

var _callout = _interopRequireDefault(require("./callout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\card\\card.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\card\card.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Card = ({
  border = true,
  padding = 4,
  backgroundColor = _designSystem.COLORS.BACKGROUND_DEFAULT,
  children,
  ...props
}) => {
  const defaultBorderProps = {
    borderColor: border && _designSystem.COLORS.BORDER_MUTED,
    borderRadius: border && _designSystem.SIZES.MD,
    borderStyle: border && _designSystem.BORDER_STYLE.SOLID
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    padding,
    backgroundColor
  }, defaultBorderProps, props), children);
};

Card.propTypes = {
  /**
   * Whether the Card has a border or not.
   * Defaults to true
   */
  border: _propTypes.default.bool,

  /**
   * Padding of the Card component accepts number or an array of 2 numbers.
   * Defaults to 4 (16px)
   */
  padding: _box.default.propTypes.padding,

  /**
   * The background color of the card
   * Defaults to COLORS.BACKGROUND_DEFAULT
   */
  backgroundColor: _box.default.propTypes.backgroundColor,

  /**
   * The Card component accepts all Box component props
   */
  ..._box.default.propTypes
};
var _default = Card;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\card\\index.js", {"./card":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\card\\card.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\card\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _card.default;
  }
});

var _card = _interopRequireDefault(require("./card"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\check-box.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\check-box\check-box.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UNCHECKED = exports.INDETERMINATE = exports.CHECKED = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CHECKBOX_STATE = {
  CHECKED: 'CHECKED',
  INDETERMINATE: 'INDETERMINATE',
  UNCHECKED: 'UNCHECKED'
};
const {
  CHECKED,
  INDETERMINATE,
  UNCHECKED
} = CHECKBOX_STATE;
exports.UNCHECKED = UNCHECKED;
exports.INDETERMINATE = INDETERMINATE;
exports.CHECKED = CHECKED;

const CheckBox = ({
  className,
  disabled,
  id,
  onClick,
  checked,
  title,
  dataTestId
}) => {
  if (typeof checked === 'boolean') {
    // eslint-disable-next-line no-param-reassign
    checked = checked ? CHECKBOX_STATE.CHECKED : CHECKBOX_STATE.UNCHECKED;
  }

  const ref = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(() => {
    ref.current.indeterminate = checked === CHECKBOX_STATE.INDETERMINATE;
  }, [checked]);
  return /*#__PURE__*/_react.default.createElement("input", {
    checked: checked === CHECKBOX_STATE.CHECKED,
    className: (0, _classnames.default)('check-box', className, {
      'far fa-square': checked === CHECKBOX_STATE.UNCHECKED,
      'fa fa-check-square check-box__checked': checked === CHECKBOX_STATE.CHECKED,
      'fa fa-minus-square check-box__indeterminate': checked === CHECKBOX_STATE.INDETERMINATE
    }),
    disabled: disabled,
    id: id,
    onClick: onClick ? event => {
      event.preventDefault();
      onClick();
    } : null,
    readOnly: true,
    ref: ref,
    title: title,
    "data-testid": dataTestId,
    type: "checkbox"
  });
};

CheckBox.propTypes = {
  /**
   * Add custom classname css
   */
  className: _propTypes.default.string,

  /**
   * Check if checkbox disabled or not
   */
  disabled: _propTypes.default.bool,

  /**
   * Checkbox ID
   */
  id: _propTypes.default.string,

  /**
   * Click handler
   */
  onClick: _propTypes.default.func,

  /**
   * Check if the checkbox are checked or not
   */
  checked: _propTypes.default.oneOf([...Object.keys(CHECKBOX_STATE), true, false]).isRequired,

  /**
   * Show title
   */
  title: _propTypes.default.string,

  /**
   * Data test ID for checkbox Component
   */
  dataTestId: _propTypes.default.string
};
CheckBox.defaultProps = {
  className: undefined,
  disabled: false,
  id: undefined
};
var _default = CheckBox;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\index.js", {"./check-box.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\check-box\\check-box.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\check-box\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CHECKED", {
  enumerable: true,
  get: function () {
    return _checkBox.CHECKED;
  }
});
Object.defineProperty(exports, "INDETERMINATE", {
  enumerable: true,
  get: function () {
    return _checkBox.INDETERMINATE;
  }
});
Object.defineProperty(exports, "UNCHECKED", {
  enumerable: true,
  get: function () {
    return _checkBox.UNCHECKED;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _checkBox.default;
  }
});

var _checkBox = _interopRequireWildcard(require("./check-box.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\chip-with-input.js", {".":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\index.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\chip\chip-with-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChipWithInput = ChipWithInput;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _designSystem = require("../../../helpers/constants/design-system");

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ChipWithInput({
  dataTestId,
  className,
  borderColor = _designSystem.COLORS.BORDER_DEFAULT,
  inputValue,
  setInputValue
}) {
  return /*#__PURE__*/_react.default.createElement(_.default, {
    className: (0, _classnames.default)(className, 'chip--with-input'),
    borderColor: borderColor
  }, setInputValue && /*#__PURE__*/_react.default.createElement("input", {
    "data-testid": dataTestId,
    type: "text",
    className: "chip__input",
    onChange: e => {
      setInputValue(e.target.value);
    },
    value: inputValue
  }));
}

ChipWithInput.propTypes = {
  dataTestId: _propTypes.default.string,
  borderColor: _propTypes.default.oneOf(Object.values(_designSystem.COLORS)),
  className: _propTypes.default.string,
  inputValue: _propTypes.default.string,
  setInputValue: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
