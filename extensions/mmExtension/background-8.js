LavaPack.loadBundle([[86,{"../../shared/constants/app":6584,"../../shared/constants/hardware-wallets":6586,"../../shared/constants/metametrics":6588,"../../shared/constants/network":6589,"../../shared/constants/permissions":6590,"../../shared/constants/phishing":6591,"../../shared/constants/swaps":6593,"../../shared/constants/time":6594,"../../shared/constants/tokens":6595,"../../shared/constants/transaction":6596,"../../shared/lib/metamask-controller-utils":6599,"../../shared/modules/hexstring-utils":6610,"../../shared/modules/string-utils":6617,"../../shared/modules/transaction.utils":6619,"../../shared/notifications":6620,"../../ui/helpers/utils/token-util":7171,"./account-import-strategies":2,"./controllers/alert":6,"./controllers/app-state":7,"./controllers/backup":8,"./controllers/cached-balances":9,"./controllers/detect-tokens":10,"./controllers/ens":12,"./controllers/incoming-transactions":13,"./controllers/metametrics":14,"./controllers/network":18,"./controllers/onboarding":22,"./controllers/permissions":26,"./controllers/preferences":30,"./controllers/swaps":31,"./controllers/threebox":32,"./controllers/transactions":33,"./detect-multiple-instances":39,"./lib/ComposableObservableStore":41,"./lib/account-tracker":42,"./lib/createLoggerMiddleware":45,"./lib/createMetaRPCHandler":46,"./lib/createOnboardingMiddleware":47,"./lib/createOriginMiddleware":48,"./lib/createRPCMethodTrackingMiddleware":49,"./lib/createTabIdMiddleware":51,"./lib/decrypt-message-manager":52,"./lib/encryption-public-key-manager":53,"./lib/message-manager":62,"./lib/personal-message-manager":67,"./lib/rpc-method-middleware":78,"./lib/seed-phrase-verifier":79,"./lib/segment":80,"./lib/stream-utils":83,"./lib/typed-message-manager":84,"@keystonehq/metamask-airgapped-keyring":589,"@metamask/controllers":1071,"@metamask/eth-ledger-bridge-keyring":1152,"@metamask/obs-store":1217,"@metamask/obs-store/dist/asStream":1216,"@metamask/smart-transactions-controller":1225,"@sentry/browser":1347,_process:5870,"await-semaphore":1675,buffer:1966,"eth-json-rpc-filters":2259,"eth-json-rpc-filters/subscriptionManager":2265,"eth-json-rpc-middleware":2283,"eth-keyring-controller":2308,"eth-lattice-keyring":2309,"eth-query":2417,"eth-rpc-errors":2421,"eth-trezor-keyring":2436,events:1967,"json-rpc-engine":5207,"json-rpc-middleware-stream/engineStream":5209,lodash:5626,loglevel:5639,nanoid:5714,pump:5970},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t,n){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var s=Se(e("events")),o=Se(e("pump")),i=e("@metamask/obs-store"),a=e("@metamask/obs-store/dist/asStream"),l=e("json-rpc-engine"),c=e("lodash"),d=Se(e("json-rpc-middleware-stream/engineStream")),h=Se(e("eth-json-rpc-filters")),u=Se(e("eth-json-rpc-filters/subscriptionManager")),g=e("eth-json-rpc-middleware"),p=Se(e("eth-keyring-controller")),C=e("eth-rpc-errors"),m=e("await-semaphore"),f=Se(e("loglevel")),b=Se(e("eth-trezor-keyring")),k=Se(e("@metamask/eth-ledger-bridge-keyring")),w=Se(e("eth-lattice-keyring")),y=e("@keystonehq/metamask-airgapped-keyring"),T=Se(e("eth-query")),M=Se(e("nanoid")),E=e("@sentry/browser"),S=e("@metamask/controllers"),v=Se(e("@metamask/smart-transactions-controller")),A=e("../../shared/constants/transaction"),P=e("../../shared/constants/phishing"),I=e("../../shared/constants/swaps"),N=e("../../shared/constants/network"),R=e("../../shared/constants/hardware-wallets"),_=e("../../shared/constants/permissions"),O=e("../../shared/notifications"),L=e("../../shared/modules/hexstring-utils"),U=e("../../shared/constants/time"),D=e("../../shared/constants/app"),x=e("../../shared/constants/metametrics"),F=e("../../ui/helpers/utils/token-util"),B=e("../../shared/modules/string-utils"),K=e("../../shared/modules/transaction.utils"),j=e("../../shared/constants/tokens"),G=e("../../shared/lib/metamask-controller-utils"),V=e("./detect-multiple-instances"),H=Se(e("./lib/ComposableObservableStore")),$=Se(e("./lib/account-tracker")),q=Se(e("./lib/createLoggerMiddleware")),W=e("./lib/rpc-method-middleware"),Y=Se(e("./lib/createOriginMiddleware")),z=Se(e("./lib/createTabIdMiddleware")),Q=Se(e("./lib/createOnboardingMiddleware")),J=e("./lib/stream-utils"),Z=Se(e("./controllers/ens")),X=Ee(e("./controllers/network")),ee=Se(e("./controllers/preferences")),te=Se(e("./controllers/app-state")),re=Se(e("./controllers/cached-balances")),ne=Se(e("./controllers/alert")),se=Se(e("./controllers/onboarding")),oe=Se(e("./controllers/threebox")),ie=Se(e("./controllers/backup")),ae=Se(e("./controllers/incoming-transactions")),le=Ee(e("./lib/message-manager")),ce=Se(e("./lib/decrypt-message-manager")),de=Se(e("./lib/encryption-public-key-manager")),he=Se(e("./lib/personal-message-manager")),ue=Se(e("./lib/typed-message-manager")),ge=Se(e("./controllers/transactions")),pe=Se(e("./controllers/detect-tokens")),Ce=Se(e("./controllers/swaps")),me=Se(e("./account-import-strategies")),fe=Se(e("./lib/seed-phrase-verifier")),be=Se(e("./controllers/metametrics")),ke=e("./lib/segment"),we=Se(e("./lib/createMetaRPCHandler")),ye=e("./controllers/permissions"),Te=Se(e("./lib/createRPCMethodTrackingMiddleware"));function Me(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(Me=function(e){return e?r:t})(e)}function Ee(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=Me(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function Se(e){return e&&e.__esModule?e:{default:e}}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class ve extends s.default{constructor(e){var r;super(),this.defaultMaxListeners=20,this.sendUpdate=(0,c.debounce)(this.privateSendUpdate.bind(this),200*U.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const n=e.initState||{},s=this.platform.getVersion();this.recordFirstTimeInfo(n),this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new S.ControllerMessenger,this.store=new H.default({state:n,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new m.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&"8.1.0"===s&&this.platform.openExtensionInBrowser()})),this.approvalController=new S.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation}),this.networkController=new X.default(n.NetworkController),this.networkController.setInfuraProjectId(e.infuraProjectId),this.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker;const o=this.controllerMessenger.getRestricted({name:"TokenListController"});this.tokenListController=new S.TokenListController({chainId:(0,G.hexToDecimal)(this.networkController.getCurrentChainId()),preventPollingOnNetworkRestart:!0,onNetworkStateChange:e=>{this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,G.hexToDecimal)(t.provider.chainId)}};return e(r)}))},messenger:o,state:n.TokenListController}),this.preferencesController=new ee.default({initState:n.PreferencesController,initLangCode:e.initLangCode,openPopup:e.openPopup,network:this.networkController,tokenListController:this.tokenListController,provider:this.provider,migrateAddressBookState:this.migrateAddressBookState.bind(this)}),this.tokensController=new S.TokensController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),config:{provider:this.provider},state:n.TokensController}),this.assetsContractController=new S.AssetsContractController({onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,G.hexToDecimal)(t.provider.chainId)}};return e(r)}))},{provider:this.provider},n.AssetsContractController),this.collectiblesController=new S.CollectiblesController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onCollectibleAdded:({address:e,symbol:t,tokenId:r,standard:n,source:s})=>this.metaMetricsController.trackEvent({event:x.EVENT_NAMES.NFT_ADDED,category:x.EVENT.CATEGORIES.WALLET,properties:{token_contract_address:e,token_symbol:t,asset_type:A.ASSET_TYPES.COLLECTIBLE,token_standard:n,source:s},sensitiveProperties:{tokenId:r}})},{},n.CollectiblesController),this.collectiblesController.setApiKey(t.env.OPENSEA_KEY),this.metaMetricsController=new be.default({segment:ke.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:this.networkController.on.bind(this.networkController,X.NETWORK_EVENTS.NETWORK_DID_CHANGE),getNetworkIdentifier:this.networkController.getNetworkIdentifier.bind(this.networkController),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),version:this.platform.getVersion(),environment:"production",extension:this.extension,initState:n.MetaMetricsController,captureException:E.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const i=this.controllerMessenger.getRestricted({name:"GasFeeController"}),a=I.GAS_API_BASE_URL;this.gasFeeController=new S.GasFeeController({interval:1e4,messenger:i,clientId:I.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkStateChange:this.networkController.on.bind(this.networkController,X.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${a}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${a}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>this.networkController.getCurrentChainId()===N.CHAIN_IDS.MAINNET,getChainId:()=>this.networkController.getCurrentChainId()}),this.qrHardwareKeyring=new y.MetaMaskKeyring,this.appStateController=new te.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:n.AppStateController,onInactiveTimeout:()=>this.setLocked(),showUnlockRequest:e.showUserConfirmation,preferencesStore:this.preferencesController.store,qrHardwareStore:this.qrHardwareKeyring.getMemStore()});const l=this.controllerMessenger.getRestricted({name:"CurrencyRateController"});this.currencyRateController=new S.CurrencyRateController({includeUsdRate:!0,messenger:l,state:{...n.CurrencyController,nativeCurrency:this.networkController.providerStore.getState().ticker}}),this.phishingController=new S.PhishingController,this.phishingController.updatePhishingLists(),this.announcementController=new S.AnnouncementController({allAnnouncements:O.UI_NOTIFICATIONS},n.AnnouncementController),this.tokenRatesController=new S.TokenRatesController({onTokensStateChange:e=>this.tokensController.subscribe(e),onCurrencyRateStateChange:e=>this.controllerMessenger.subscribe(`${this.currencyRateController.name}:stateChange`,e),onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,G.hexToDecimal)(t.provider.chainId)}};return e(r)}))}),this.ensController=new Z.default({provider:this.provider,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),onNetworkDidChange:this.networkController.on.bind(this.networkController,X.NETWORK_EVENTS.NETWORK_DID_CHANGE)}),this.incomingTransactionsController=new ae.default({blockTracker:this.blockTracker,onNetworkDidChange:this.networkController.on.bind(this.networkController,X.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesController:this.preferencesController,initState:n.IncomingTransactionsController}),this.accountTracker=new $.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController)}),this.on("controllerConnectionChanged",(e=>{e>0?(this.accountTracker.start(),this.incomingTransactionsController.start(),this.currencyRateController.start(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()):(this.accountTracker.stop(),this.incomingTransactionsController.stop(),this.currencyRateController.stop(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.stop())})),this.cachedBalancesController=new re.default({accountTracker:this.accountTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),initState:n.CachedBalancesController}),this.onboardingController=new se.default({initState:n.OnboardingController}),this.tokensController.hub.on("pendingSuggestedAsset",(async()=>{await e.openPopup()}));const d=[b.default,k.default,w.default,y.MetaMaskKeyring];this.keyringController=new p.default({keyringTypes:d,initState:n.KeyringController,encryptor:e.encryptor||undefined}),this.keyringController.memStore.subscribe((e=>this._onKeyringControllerUpdate(e))),this.keyringController.on("unlock",(()=>this._onUnlock())),this.keyringController.on("lock",(()=>this._onLock()));const h=()=>this.preferencesController.store.getState().identities;this.permissionController=new S.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),state:n.PermissionController,caveatSpecifications:(0,ye.getCaveatSpecifications)({getIdentities:h}),permissionSpecifications:{...(0,ye.getPermissionSpecifications)({getIdentities:h,getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e={},t=[])=>{const r=t.filter((t=>!e[t])).map((e=>{var t;return null===(t=this.keyringController.getKeyringForAccount(e))||void 0===t?void 0:t.type})),n=Object.keys(e||{}).length,s=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,E.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}})},unrestrictedMethods:ye.unrestrictedMethods}),this.permissionLogController=new ye.PermissionLogController({restrictedMethods:new Set(Object.keys(_.RestrictedMethods)),initState:n.PermissionLogController}),this.subjectMetadataController=new S.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:n.SubjectMetadataController,subjectCacheLimit:100}),this.detectTokensController=new pe.default({preferences:this.preferencesController,tokensController:this.tokensController,assetsContractController:this.assetsContractController,network:this.networkController,keyringMemStore:this.keyringController.memStore,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.addressBookController=new S.AddressBookController(undefined,n.AddressBookController),this.alertController=new ne.default({initState:n.AlertController,preferencesStore:this.preferencesController.store}),this.threeBoxController=new oe.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,keyringController:this.keyringController,initState:n.ThreeBoxController,getKeyringControllerState:this.keyringController.memStore.getState.bind(this.keyringController.memStore),version:s,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.backupController=new ie.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.txController=new ge.default({initState:n.TransactionController||n.TransactionManager,getPermittedAccounts:this.getPermittedAccounts.bind(this),getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),networkStore:this.networkController.networkStore,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesStore:this.preferencesController.store,txHistoryLimit:60,signTransaction:this.keyringController.signTransaction.bind(this.keyringController),provider:this.provider,blockTracker:this.blockTracker,createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getTokenStandardAndDetails:this.assetsContractController.getTokenStandardAndDetails.bind(this.assetsContractController)}),this.txController.on("newUnapprovedTx",(()=>e.showUserConfirmation())),this.txController.on("tx:status-update",(async(e,t)=>{if(t===A.TRANSACTION_STATUSES.CONFIRMED||t===A.TRANSACTION_STATUSES.FAILED){const t=this.txController.txStateManager.getTransaction(e),i=this.preferencesController.getFrequentRpcListDetail();let a={};if(t.chainId){var r;const e=i.find((e=>t.chainId===e.chainId));a=null!==(r=null==e?void 0:e.rpcPrefs)&&void 0!==r?r:{}}this.platform.showTransactionNotification(t,a);const{txReceipt:l}=t;if(t.type===A.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM&&t.txParams!==undefined){var n,s;const{data:e,to:r,from:o}=t.txParams,{chainId:i}=t,a=(0,K.parseStandardTokenTransactionData)(e),l=null!==(n=(0,F.getTokenIdParam)(a))&&void 0!==n?n:(0,G.getTokenValueParam)(a),{allCollectibles:c}=this.collectiblesController.state,d=null==c||null===(s=c[o])||void 0===s?void 0:s[i].find((({address:e,tokenId:t})=>(0,B.isEqualCaseInsensitive)(e,r)&&t===l));d&&this.collectiblesController.checkAndUpdateSingleCollectibleOwnershipStatus(d,!1,{userAddress:o,chainId:i})}const c=await this.getState();var o;if(l&&"0x0"===l.status)this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:x.EVENT.CATEGORIES.BACKGROUND,properties:{action:"Transactions",errorMessage:null===(o=t.simulationFails)||void 0===o?void 0:o.reason,numberOfTokens:c.tokens.length,numberOfAccounts:Object.keys(c.accounts).length}},{matomoEvent:!0})}})),this.networkController.on(X.NETWORK_EVENTS.NETWORK_DID_CHANGE,(async()=>{const{ticker:e}=this.networkController.getProviderConfig();try{await this.currencyRateController.setNativeCurrency(e)}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.messageManager=new le.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.personalMessageManager=new he.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.decryptMessageManager=new ce.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyManager=new de.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.typedMessageManager=new ue.default({getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.swapsController=new Ce.default({getBufferedGasLimit:this.txController.txGasUtil.getBufferedGasLimit.bind(this.txController.txGasUtil),networkController:this.networkController,provider:this.provider,getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController)}),this.smartTransactionsController=new v.default({onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getNetwork:this.networkController.getNetworkState.bind(this.networkController),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},undefined,n.SmartTransactionsController),this.networkController.on(X.NETWORK_EVENTS.NETWORK_DID_CHANGE,(()=>{this.accountTracker._updateAccounts()})),this.networkController.on(X.NETWORK_EVENTS.NETWORK_WILL_CHANGE,(()=>{this.txController.txStateManager.clearUnapprovedTxs(),this.encryptionPublicKeyManager.clearUnapproved(),this.personalMessageManager.clearUnapproved(),this.typedMessageManager.clearUnapproved(),this.decryptMessageManager.clearUnapproved(),this.messageManager.clearUnapproved()})),this.on("update",(e=>this._onStateUpdate(e))),this.store.updateStructure({AppStateController:this.appStateController.store,TransactionController:this.txController.store,KeyringController:this.keyringController.store,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController.store,CachedBalancesController:this.cachedBalancesController.store,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController}),this.memStore=new H.default({config:{AppStateController:this.appStateController.store,NetworkController:this.networkController.store,AccountTracker:this.accountTracker.store,TxController:this.txController.memStore,CachedBalancesController:this.cachedBalancesController.store,TokenRatesController:this.tokenRatesController,MessageManager:this.messageManager.memStore,PersonalMessageManager:this.personalMessageManager.memStore,DecryptMessageManager:this.decryptMessageManager.memStore,EncryptionPublicKeyManager:this.encryptionPublicKeyManager.memStore,TypesMessageManager:this.typedMessageManager.memStore,KeyringController:this.keyringController.memStore,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,BackupController:this.backupController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController},controllerMessenger:this.controllerMessenger}),this.memStore.subscribe(this.sendUpdate.bind(this));const u=null===(r={})||void 0===r?void 0:r.PASSWORD;u&&!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding&&this.submitPassword(u),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(V.onMessageReceived),(0,V.checkForMultipleVersionsRunning)()}setupControllerEventSubscriptions(){const e=async(e,t)=>{this.isUnlocked()&&this.notifyConnections(e,{method:ye.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)};let t;this.preferencesController.store.subscribe((async({selectedAddress:r})=>{if(r&&r!==t){t=r;const n=(0,ye.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[t,s]of n.entries())s.includes(r)&&e(t,s)}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(t,r)=>{const n=(0,ye.getChangedAccounts)(t,r);for(const[t,r]of n.entries())e(t,r)}),ye.getPermittedAccountsByOrigin)}initializeProvider(){const e=this.platform.getVersion(),t={static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${e}`},version:e,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===D.ORIGIN_METAMASK){const e=this.preferencesController.getSelectedAddress();return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:this.newUnapprovedTransaction.bind(this),processEthSignMessage:this.newUnsignedMessage.bind(this),processTypedMessage:this.newUnsignedTypedMessage.bind(this),processTypedMessageV3:this.newUnsignedTypedMessage.bind(this),processTypedMessageV4:this.newUnsignedTypedMessage.bind(this),processPersonalMessage:this.newUnsignedPersonalMessage.bind(this),processDecryptMessage:this.newRequestDecryptMessage.bind(this),processEncryptionPublicKey:this.newRequestEncryptionPublicKey.bind(this),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.getTransactions({searchCriteria:{hash:e,status:A.TRANSACTION_STATUSES.SUBMITTED}})[0]};return this.networkController.initializeProvider(t)}createPublicConfigStore(){const e=new i.ObservableStore,{networkController:t}=this;function r(r){const n=t.getCurrentChainId();"loading"!==r.network&&e.putState(function(e,{isUnlocked:t,network:r}){return{isUnlocked:t,chainId:e,networkVersion:r}}(n,r))}return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),...this.getProviderNetworkState(),accounts:await this.getPermittedAccounts(e)}}getProviderNetworkState(e){const{network:t}=e||this.getState();return{chainId:this.networkController.getCurrentChainId(),networkVersion:t}}getState(){const{vault:e}=this.keyringController.store.getState();return{isInitialized:Boolean(e),...this.memStore.getFlatState()}}getApi(){const{addressBookController:e,alertController:t,approvalController:r,appStateController:n,collectiblesController:s,collectibleDetectionController:o,currencyRateController:i,detectTokensController:a,ensController:l,gasFeeController:c,keyringController:d,metaMetricsController:h,networkController:u,announcementController:g,onboardingController:p,permissionController:m,preferencesController:f,qrHardwareKeyring:b,swapsController:k,threeBoxController:w,tokensController:y,smartTransactionsController:T,txController:M,assetsContractController:E,backupController:S}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:f.setUseBlockie.bind(f),setUseNonceField:f.setUseNonceField.bind(f),setUsePhishDetect:f.setUsePhishDetect.bind(f),setUseTokenDetection:f.setUseTokenDetection.bind(f),setUseCollectibleDetection:f.setUseCollectibleDetection.bind(f),setOpenSeaEnabled:f.setOpenSeaEnabled.bind(f),setIpfsGateway:f.setIpfsGateway.bind(f),setParticipateInMetaMetrics:h.setParticipateInMetaMetrics.bind(h),setCurrentLocale:f.setCurrentLocale.bind(f),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),addNewAccount:this.addNewAccount.bind(this),verifySeedPhrase:this.verifySeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),setLedgerTransportPreference:this.setLedgerTransportPreference.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),establishLedgerTransportPreference:this.establishLedgerTransportPreference.bind(this),submitQRHardwareCryptoHDKey:b.submitCryptoHDKey.bind(b),submitQRHardwareCryptoAccount:b.submitCryptoAccount.bind(b),cancelSyncQRHardware:b.cancelSync.bind(b),submitQRHardwareSignature:b.submitSignature.bind(b),cancelQRHardwareSignRequest:b.cancelSignRequest.bind(b),fetchInfoToSync:this.fetchInfoToSync.bind(this),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:u.setProviderType.bind(u),rollbackToPreviousProvider:u.rollbackToPreviousProvider.bind(u),setCustomRpc:this.setCustomRpc.bind(this),updateAndSetCustomRpc:this.updateAndSetCustomRpc.bind(this),delCustomRpc:this.delCustomRpc.bind(this),addCustomNetwork:this.addCustomNetwork.bind(this),requestAddNetworkApproval:this.requestAddNetworkApproval.bind(this),setSelectedAddress:f.setSelectedAddress.bind(f),addToken:y.addToken.bind(y),rejectWatchAsset:y.rejectWatchAsset.bind(y),acceptWatchAsset:y.acceptWatchAsset.bind(y),updateTokenType:y.updateTokenType.bind(y),setAccountLabel:f.setAccountLabel.bind(f),setFeatureFlag:f.setFeatureFlag.bind(f),setPreference:f.setPreference.bind(f),addKnownMethodData:f.addKnownMethodData.bind(f),setDismissSeedBackUpReminder:f.setDismissSeedBackUpReminder.bind(f),setAdvancedGasFee:f.setAdvancedGasFee.bind(f),setEIP1559V2Enabled:f.setEIP1559V2Enabled.bind(f),setTheme:f.setTheme.bind(f),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),addCollectible:s.addCollectible.bind(s),addCollectibleVerifyOwnership:s.addCollectibleVerifyOwnership.bind(s),removeAndIgnoreCollectible:s.removeAndIgnoreCollectible.bind(s),removeCollectible:s.removeCollectible.bind(s),checkAndUpdateAllCollectiblesOwnershipStatus:s.checkAndUpdateAllCollectiblesOwnershipStatus.bind(s),checkAndUpdateSingleCollectibleOwnershipStatus:s.checkAndUpdateSingleCollectibleOwnershipStatus.bind(s),isCollectibleOwner:s.isCollectibleOwner.bind(s),setAddressBook:e.set.bind(e),removeFromAddressBook:e.delete.bind(e),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setShowPortfolioTooltip:n.setShowPortfolioTooltip.bind(n),setCollectiblesDetectionNoticeDismissed:n.setCollectiblesDetectionNoticeDismissed.bind(n),setEnableEIP1559V2NoticeDismissed:n.setEnableEIP1559V2NoticeDismissed.bind(n),updateCollectibleDropDownState:n.updateCollectibleDropDownState.bind(n),setFirstTimeUsedNetwork:n.setFirstTimeUsedNetwork.bind(n),tryReverseResolveAddress:l.reverseResolveAddress.bind(l),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:d.exportAccount.bind(d),cancelTransaction:M.cancelTransaction.bind(M),updateTransaction:M.updateTransaction.bind(M),updateAndApproveTransaction:M.updateAndApproveTransaction.bind(M),approveTransactionsWithSameNonce:M.approveTransactionsWithSameNonce.bind(M),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addUnapprovedTransaction:M.addUnapprovedTransaction.bind(M),createTransactionEventFragment:M.createTransactionEventFragment.bind(M),getTransactions:M.getTransactions.bind(M),updateEditableParams:M.updateEditableParams.bind(M),updateTransactionGasFees:M.updateTransactionGasFees.bind(M),updateTransactionSendFlowHistory:M.updateTransactionSendFlowHistory.bind(M),updateSwapApprovalTransaction:M.updateSwapApprovalTransaction.bind(M),updateSwapTransaction:M.updateSwapTransaction.bind(M),updatePreviousGasParams:M.updatePreviousGasParams.bind(M),signMessage:this.signMessage.bind(this),cancelMessage:this.cancelMessage.bind(this),signPersonalMessage:this.signPersonalMessage.bind(this),cancelPersonalMessage:this.cancelPersonalMessage.bind(this),signTypedMessage:this.signTypedMessage.bind(this),cancelTypedMessage:this.cancelTypedMessage.bind(this),decryptMessage:this.decryptMessage.bind(this),decryptMessageInline:this.decryptMessageInline.bind(this),cancelDecryptMessage:this.cancelDecryptMessage.bind(this),encryptionPublicKey:this.encryptionPublicKey.bind(this),cancelEncryptionPublicKey:this.cancelEncryptionPublicKey.bind(this),setSeedPhraseBackedUp:p.setSeedPhraseBackedUp.bind(p),completeOnboarding:p.completeOnboarding.bind(p),setFirstTimeFlowType:p.setFirstTimeFlowType.bind(p),setAlertEnabledness:t.setAlertEnabledness.bind(t),setUnconnectedAccountAlertShown:t.setUnconnectedAccountAlertShown.bind(t),setWeb3ShimUsageAlertDismissed:t.setWeb3ShimUsageAlertDismissed.bind(t),setThreeBoxSyncingPermission:w.setThreeBoxSyncingPermission.bind(w),restoreFromThreeBox:w.restoreFromThreeBox.bind(w),setShowRestorePromptToFalse:w.setShowRestorePromptToFalse.bind(w),getThreeBoxLastUpdated:w.getLastUpdated.bind(w),turnThreeBoxSyncingOn:w.turnThreeBoxSyncingOn.bind(w),initializeThreeBox:this.initializeThreeBox.bind(this),removePermissionsFor:m.revokePermissions.bind(m),approvePermissionsRequest:m.acceptPermissionsRequest.bind(m),rejectPermissionsRequest:m.rejectPermissionsRequest.bind(m),...(0,ye.getPermissionBackgroundApiMethods)(m),fetchAndSetQuotes:k.fetchAndSetQuotes.bind(k),setSelectedQuoteAggId:k.setSelectedQuoteAggId.bind(k),resetSwapsState:k.resetSwapsState.bind(k),setSwapsTokens:k.setSwapsTokens.bind(k),clearSwapsQuotes:k.clearSwapsQuotes.bind(k),setApproveTxId:k.setApproveTxId.bind(k),setTradeTxId:k.setTradeTxId.bind(k),setSwapsTxGasPrice:k.setSwapsTxGasPrice.bind(k),setSwapsTxGasLimit:k.setSwapsTxGasLimit.bind(k),setSwapsTxMaxFeePerGas:k.setSwapsTxMaxFeePerGas.bind(k),setSwapsTxMaxFeePriorityPerGas:k.setSwapsTxMaxFeePriorityPerGas.bind(k),safeRefetchQuotes:k.safeRefetchQuotes.bind(k),stopPollingForQuotes:k.stopPollingForQuotes.bind(k),setBackgroundSwapRouteState:k.setBackgroundSwapRouteState.bind(k),resetPostFetchState:k.resetPostFetchState.bind(k),setSwapsErrorKey:k.setSwapsErrorKey.bind(k),setInitialGasEstimate:k.setInitialGasEstimate.bind(k),setCustomApproveTxData:k.setCustomApproveTxData.bind(k),setSwapsLiveness:k.setSwapsLiveness.bind(k),setSwapsFeatureFlags:k.setSwapsFeatureFlags.bind(k),setSwapsUserFeeLevel:k.setSwapsUserFeeLevel.bind(k),setSwapsQuotesPollingLimitEnabled:k.setSwapsQuotesPollingLimitEnabled.bind(k),setSmartTransactionsOptInStatus:T.setOptInState.bind(T),fetchSmartTransactionFees:T.getFees.bind(T),clearSmartTransactionFees:T.clearFees.bind(T),submitSignedTransactions:T.submitSignedTransactions.bind(T),cancelSmartTransaction:T.cancelSmartTransaction.bind(T),fetchSmartTransactionsLiveness:T.fetchLiveness.bind(T),updateSmartTransaction:T.updateSmartTransaction.bind(T),setStatusRefreshInterval:T.setStatusRefreshInterval.bind(T),trackMetaMetricsEvent:h.trackEvent.bind(h),trackMetaMetricsPage:h.trackPage.bind(h),createEventFragment:h.createEventFragment.bind(h),updateEventFragment:h.updateEventFragment.bind(h),finalizeEventFragment:h.finalizeEventFragment.bind(h),resolvePendingApproval:r.accept.bind(r),rejectPendingApproval:async(e,t)=>{r.reject(e,new C.EthereumRpcError(t.code,t.message,t.data))},updateViewedNotifications:g.updateViewed.bind(g),getGasFeeEstimatesAndStartPolling:c.getGasFeeEstimatesAndStartPolling.bind(c),disconnectGasFeeEstimatePoller:c.disconnectPoller.bind(c),getGasFeeTimeEstimate:c.getTimeEstimate.bind(c),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),backupUserData:S.backupUserData.bind(S),restoreUserData:S.restoreUserData.bind(S),detectNewTokens:a.detectNewTokens.bind(a),detectCollectibles:null,addDetectedTokens:y.addDetectedTokens.bind(y),addImportedTokens:y.addTokens.bind(y),ignoreTokens:y.ignoreTokens.bind(y),getBalancesInSingleCall:E.getBalancesInSingleCall.bind(E)}}async getTokenStandardAndDetails(e,t,r){var n,s;const o=await this.assetsContractController.getTokenStandardAndDetails(e,t,r);return{...o,decimals:null==o||null===(n=o.decimals)||void 0===n?void 0:n.toString(10),balance:null==o||null===(s=o.balance)||void 0===s?void 0:s.toString(10)}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{let r;if((await this.keyringController.getAccounts()).length>0)r=await this.keyringController.fullUpdate();else{r=await this.keyringController.createNewVaultAndKeychain(e);const t=await this.keyringController.getAccounts();this.preferencesController.setAddresses(t),this.selectFirstIdentity()}return r}finally{t()}}async requestAddNetworkApproval(e,t){try{await this.approvalController.addAndShowApprovalRequest({origin:"metamask",type:"wallet_addEthereumChain",requestData:{chainId:e.chainId,blockExplorerUrl:e.rpcPrefs.blockExplorerUrl,chainName:e.nickname,rpcUrl:e.rpcUrl,ticker:e.ticker,imageUrl:e.rpcPrefs.imageUrl}})}catch(e){if(!t||"User rejected the request."!==e.message)throw e}}async addCustomNetwork(e){const{chainId:t,chainName:r,rpcUrl:n,ticker:s,blockExplorerUrl:o}=e;let i;await this.preferencesController.addToFrequentRpcList(n,t,s,r,{blockExplorerUrl:o});try{i=new URL(n).origin}catch{}this.metaMetricsController.trackEvent({event:"Custom Network Added",category:x.EVENT.CATEGORIES.NETWORK,referrer:{url:i},properties:{chain_id:t,network_name:r,network:i,symbol:s,block_explorer_url:o,source:x.EVENT.SOURCE.NETWORK.POPULAR_NETWORK_LIST},sensitiveProperties:{rpc_url:i}})}async createNewVaultAndRestore(e,t){const r=await this.createVaultMutex.acquire();try{let s,o;const i=n.from(t),{keyringController:a}=this;this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.accountTracker.clearAccounts(),this.cachedBalancesController.clearCachedBalances(),this.txController.txStateManager.clearUnapprovedTxs();const l=await a.createNewVaultAndRestore(e,i),c=new T.default(this.provider);s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],c);const[d]=a.getKeyringsByType("HD Key Tree");if(!d)throw new Error("MetamaskController - No HD Key Tree found");for(;"0x0"!==o;)await a.addNewAccount(d),s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],c);s.length>1&&"0x0"===o&&(await this.removeAccount(s[s.length-1]),s=await a.getAccounts());const h=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(h),this.preferencesController.setAddresses(s),this.selectFirstIdentity(),l}finally{r()}}getBalance(e,t){return new Promise(((r,n)=>{const s=this.accountTracker.store.getState().accounts[e];s&&s.balance?r(s.balance):t.getBalance(e,((e,t)=>{e?(n(e),f.default.error(e)):r(t||"0x0")}))}))}async fetchInfoToSync(){const{currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n,useTokenDetection:s}=this.preferencesController.store.getState(),o=!s&&this.networkController.store.getState().provider.chainId===N.CHAIN_IDS.MAINNET,{tokenList:i}=this.tokenListController.state,a=o?j.STATIC_MAINNET_TOKEN_LIST:i,l={currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n},{allTokens:c,allIgnoredTokens:d}=this.tokensController.state,h={};Object.keys(c).forEach((e=>{h[e]={},Object.keys(c[e]).forEach((t=>{const r=(0,L.toChecksumHexAddress)(t);h[e][r]=c[e][r].filter((e=>{var t;if(e.isERC721===undefined){if(a[null===(t=e.address)||void 0===t?void 0:t.toLowerCase()]!==undefined)return!0}else if(!1===e.isERC721)return!0;return!1}))}))}));const[u]=this.keyringController.getKeyringsByType("HD Key Tree"),g=this.keyringController.getKeyringsByType("Simple Key Pair"),p=await u.getAccounts(),C=(await Promise.all(g.map((e=>e.getAccounts())))).reduce(((e,t)=>[...e,...t]),[]),m={hd:p.filter(((e,t)=>p.indexOf(e)===t)).map((e=>(0,L.toChecksumHexAddress)(e))),simpleKeyPair:C.filter(((e,t)=>C.indexOf(e)===t)).map((e=>(0,L.toChecksumHexAddress)(e))),ledger:[],trezor:[],lattice:[]};let{transactions:f}=this.txController.store.getState();return f=Object.values(f).filter((e=>{const t=(0,L.toChecksumHexAddress)(e.txParams.from);return m.hd.includes(t)})),{accounts:m,preferences:l,transactions:f,tokens:{allTokens:h,allIgnoredTokens:d},network:this.networkController.store.getState()}}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){f.default.error("Error while unlocking extension.",e)}try{const e=this.threeBoxController.getThreeBoxSyncingState();e&&!this.threeBoxController.box?(this.threeBoxController.init(),this.threeBoxController.turnThreeBoxSyncingOn()):e&&this.threeBoxController.box&&this.threeBoxController.turnThreeBoxSyncingOn()}catch(e){f.default.error("Error while unlocking extension.",e)}const t=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(t),this.keyringController.fullUpdate()}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstIdentity(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType("HD Key Tree");if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){let r=null;switch(e){case R.DEVICE_NAMES.TREZOR:r=b.default.type;break;case R.DEVICE_NAMES.LEDGER:r=k.default.type;break;case R.DEVICE_NAMES.QR:r=y.MetaMaskKeyring.type;break;case R.DEVICE_NAMES.LATTICE:r=w.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[n]=await this.keyringController.getKeyringsByType(r);if(n||(n=await this.keyringController.addNewKeyring(r)),t&&n.setHdPath&&n.setHdPath(t),e===R.DEVICE_NAMES.LATTICE&&(n.appName="MetaMask"),e===R.DEVICE_NAMES.TREZOR){const e=n.getModel();this.appStateController.setTrezorModel(e)}return n.network=this.networkController.getProviderConfig().type,n}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(R.DEVICE_NAMES.LEDGER);return await e.attemptMakeApp()}async establishLedgerTransportPreference(){const e=this.preferencesController.getLedgerTransportPreference();return await this.setLedgerTransportPreference(e)}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let s=[];switch(t){case-1:s=await n.getPreviousPage();break;case 1:s=await n.getNextPage();break;default:s=await n.getFirstPage()}const o=await this.keyringController.getAccounts(),i=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){return(await this.getKeyringForDevice(e)).forgetDevice(),!0}async getAccountType(e){switch((await this.keyringController.getKeyringForAccount(e)).type){case R.KEYRING_TYPES.TREZOR:case R.KEYRING_TYPES.LATTICE:case R.KEYRING_TYPES.QR:case R.KEYRING_TYPES.LEDGER:return"hardware";case R.KEYRING_TYPES.IMPORTED:return"imported";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case R.KEYRING_TYPES.TREZOR:return t.getModel();case R.KEYRING_TYPES.QR:return t.getName();case R.KEYRING_TYPES.LEDGER:return R.DEVICE_NAMES.LEDGER;case R.KEYRING_TYPES.LATTICE:return R.DEVICE_NAMES.LATTICE;default:return"N/A"}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const s=await this.getKeyringForDevice(t,r);s.setAccountToUnlock(e);const o=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccount(s),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!o.includes(r)){const o=this.getAccountLabel(t===R.DEVICE_NAMES.QR?s.getName():t,e,n);this.preferencesController.setAccountLabel(r,o),this.preferencesController.setSelectedAddress(r)}}));const{identities:l}=this.preferencesController.store.getState();return{...i,identities:l}}async addNewAccount(e){const[t]=this.keyringController.getKeyringsByType("HD Key Tree");if(!t)throw new Error("MetamaskController - No HD Key Tree found");const{keyringController:r}=this,{identities:n}=this.preferencesController.store.getState();if(Object.keys(n).length===e){const e=await r.getAccounts(),n=await r.addNewAccount(t),s=await r.getAccounts();await this.verifySeedPhrase(),this.preferencesController.setAddresses(s),s.forEach((t=>{e.includes(t)||this.preferencesController.setSelectedAddress(t)}));const{identities:o}=this.preferencesController.store.getState();return{...n,identities:o}}return{...r.memStore.getState(),identities:n}}async verifySeedPhrase(){const[e]=this.keyringController.getKeyringsByType("HD Key Tree");if(!e)throw new Error("MetamaskController - No HD Key Tree found");const t=await e.serialize(),r=n.from(t.mnemonic),s=await e.getAccounts();if(s.length<1)throw new Error("MetamaskController - No accounts found");try{return await fe.default.verifyAccounts(s,r),Array.from(r.values())}catch(e){throw f.default.error(e.message),e}}async resetAccount(){const e=this.preferencesController.getSelectedAddress();return this.txController.wipeTransactions(e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,_.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===C.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(_.CaveatTypes.restrictReturnedAccounts,(t=>ye.CaveatMutatorFactories[_.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e),this.preferencesController.removeAddress(e),this.accountTracker.removeAccount([e]);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const r=await me.default.importAccount(e,t),n=await this.keyringController.addNewKeyring("Simple Key Pair",[r]),[s]=await n.getAccounts(),o=await this.keyringController.getAccounts();this.preferencesController.setAddresses(o),await this.preferencesController.setSelectedAddress(s)}async newUnapprovedTransaction(e,t){return await this.txController.newUnapprovedTransaction(e,t)}async newUnsignedMessage(e,t){const r=(0,le.normalizeMsgData)(e.data);let n;if(66!==r.length&&67!==r.length)throw C.ethErrors.rpc.invalidParams("eth_sign requires 32 byte message hash");return n=this.messageManager.addUnapprovedMessageAsync(e,t),this.sendUpdate(),this.opts.showUserConfirmation(),await n}async signMessage(e){f.default.info("MetaMaskController - signMessage");const t=e.metamaskId;try{const r=await this.messageManager.approveMessage(e),n=await this.keyringController.signMessage(r);return this.messageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw f.default.info("MetaMaskController - eth_sign failed",e),this.messageManager.errorMessage(t,e),e}}cancelMessage(e){const{messageManager:t}=this;return t.rejectMsg(e),this.getState()}async newUnsignedPersonalMessage(e,t){const r=this.personalMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async signPersonalMessage(e){f.default.info("MetaMaskController - signPersonalMessage");const t=e.metamaskId;try{const r=await this.personalMessageManager.approveMessage(e),n=await this.keyringController.signPersonalMessage(r);return this.personalMessageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw f.default.info("MetaMaskController - eth_personalSign failed",e),this.personalMessageManager.errorMessage(t,e),e}}cancelPersonalMessage(e){return this.personalMessageManager.rejectMsg(e),this.getState()}async newRequestDecryptMessage(e,t){const r=this.decryptMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async decryptMessageInline(e){f.default.info("MetaMaskController - decryptMessageInline");const t=e.metamaskId,r=this.decryptMessageManager.getMsg(t);try{const t=(0,L.stripHexPrefix)(e.data),s=n.from(t,"hex");e.data=JSON.parse(s.toString("utf8")),r.rawData=await this.keyringController.decryptMessage(e)}catch(e){r.error=e.message}return this.decryptMessageManager._updateMsg(r),this.getState()}async decryptMessage(e){f.default.info("MetaMaskController - decryptMessage");const t=e.metamaskId;try{const r=await this.decryptMessageManager.approveMessage(e),s=(0,L.stripHexPrefix)(r.data),o=n.from(s,"hex");r.data=JSON.parse(o.toString("utf8"));const i=await this.keyringController.decryptMessage(r);this.decryptMessageManager.setMsgStatusDecrypted(t,i)}catch(e){f.default.info("MetaMaskController - eth_decrypt failed.",e),this.decryptMessageManager.errorMessage(t,e)}return this.getState()}cancelDecryptMessage(e){return this.decryptMessageManager.rejectMsg(e),this.getState()}async newRequestEncryptionPublicKey(e,t){const r=e;switch((await this.keyringController.getKeyringForAccount(r)).type){case R.KEYRING_TYPES.LEDGER:return new Promise(((e,t)=>{t(new Error("Ledger does not support eth_getEncryptionPublicKey."))}));case R.KEYRING_TYPES.TREZOR:return new Promise(((e,t)=>{t(new Error("Trezor does not support eth_getEncryptionPublicKey."))}));case R.KEYRING_TYPES.LATTICE:return new Promise(((e,t)=>{t(new Error("Lattice does not support eth_getEncryptionPublicKey."))}));case R.KEYRING_TYPES.QR:return Promise.reject(new Error("QR hardware does not support eth_getEncryptionPublicKey."));default:{const r=this.encryptionPublicKeyManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}}}async encryptionPublicKey(e){f.default.info("MetaMaskController - encryptionPublicKey");const t=e.metamaskId;try{const r=await this.encryptionPublicKeyManager.approveMessage(e),n=await this.keyringController.getEncryptionPublicKey(r.data);this.encryptionPublicKeyManager.setMsgStatusReceived(t,n)}catch(e){f.default.info("MetaMaskController - eth_getEncryptionPublicKey failed.",e),this.encryptionPublicKeyManager.errorMessage(t,e)}return this.getState()}cancelEncryptionPublicKey(e){return this.encryptionPublicKeyManager.rejectMsg(e),this.getState()}newUnsignedTypedMessage(e,t,r){const n=this.typedMessageManager.addUnapprovedMessageAsync(e,t,r);return this.sendUpdate(),this.opts.showUserConfirmation(),n}async signTypedMessage(e){f.default.info("MetaMaskController - eth_signTypedData");const t=e.metamaskId,{version:r}=e;try{const n=await this.typedMessageManager.approveMessage(e);"V1"!==r&&"string"==typeof n.data&&(n.data=JSON.parse(n.data));const s=await this.keyringController.signTypedMessage(n,{version:r});return this.typedMessageManager.setMsgStatusSigned(t,s),this.getState()}catch(e){throw f.default.info("MetaMaskController - eth_signTypedData failed.",e),this.typedMessageManager.errorMessage(t,e),e}}cancelTypedMessage(e){return this.typedMessageManager.rejectMsg(e),this.getState()}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.createCancelTransaction(e,t,r);return await this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.createSpeedUpTransaction(e,t,r);return await this.getState()}estimateGas(e){return new Promise(((t,r)=>this.txController.txGasUtil.query.estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let s;if(s=r||(t.id&&t.id!==this.extension.runtime.id?D.SUBJECT_TYPES.EXTENSION:D.SUBJECT_TYPES.WEBSITE),t.url){const{hostname:r}=new URL(t.url);this.phishingController.isOutOfDate()&&this.phishingController.updatePhishingLists();const s=this.phishingController.test(r);if(n&&null!=s&&s.result)return void this.sendPhishingWarning(e,r,s)}const o=(0,J.setupMultiplex)(e);this.setupProviderConnection(o.createStream("metamask-provider"),t,s),t.url&&this.setupPublicConfig(o.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,J.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,D.SUBJECT_TYPES.INTERNAL)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,J.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,we.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this)},r))}sendPhishingWarning(e,t,r){const n=P.PHISHING_NEW_ISSUE_URLS[null==r?void 0:r.name];(0,J.setupMultiplex)(e).createStream("phishing").write({hostname:t,newIssueUrl:n})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,we.default)(t,e));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===D.SUBJECT_TYPES.INTERNAL?D.ORIGIN_METAMASK:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:D.SUBJECT_TYPES.EXTENSION}),t.tab&&t.tab.id&&(s=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),a=(0,d.default)({engine:i}),l=this.addConnection(n,{engine:i});(0,o.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),l&&this.removeConnection(n,l),e&&f.default.error(e)}))}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const s=new l.JsonRpcEngine,{blockTracker:o,provider:i}=this,a=(0,h.default)({provider:i,blockTracker:o}),c=(0,u.default)({provider:i,blockTracker:o});return c.events.on("notification",(e=>s.emit("notification",e))),s.push((0,Y.default)({origin:e})),n&&s.push((0,z.default)({tabId:n})),s.push((0,q.default)({origin:e})),s.push(this.permissionLogController.createMiddleware()),s.push((0,Te.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store)})),t===D.SUBJECT_TYPES.WEBSITE&&s.push((0,Q.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,W.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.tokensController.watchAsset.bind(this.tokensController),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),addCustomRpc:async({chainId:e,blockExplorerUrl:t,ticker:r,chainName:n,rpcUrl:s}={})=>{await this.preferencesController.addToFrequentRpcList(s,e,r,n,{blockExplorerUrl:t})},findCustomRpcBy:this.findCustomRpcBy.bind(this),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),getCurrentRpcUrl:this.networkController.getCurrentRpcUrl.bind(this.networkController),setProviderType:this.networkController.setProviderType.bind(this.networkController),updateRpcTarget:({rpcUrl:e,chainId:t,ticker:r,nickname:n})=>{this.networkController.setRpcTarget(e,t,r,n)},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),s.push(a),s.push(c.middleware),t!==D.SUBJECT_TYPES.INTERNAL&&s.push(this.permissionController.createPermissionMiddleware({origin:e})),s.push((0,g.providerAsMiddleware)(i)),s}setupPublicConfig(e){const t=(0,a.storeAsStream)(this.publicConfigStore);(0,o.default)(t,e,(e=>{t.destroy(),e&&f.default.error(e)}))}addConnection(e,{engine:t}){if(e===D.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,M.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:ye.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:ye.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this.notifyAllConnections({method:ye.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)})}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.memStore.getState().isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.nonceTracker.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.nonceTracker.getNonceLock(e);return t.releaseLock(),t.nextNonce}async migrateAddressBookState(e,t,r=!1){const{addressBook:n}=this.addressBookController.state;if(n[e])for(const s of Object.keys(n[e])){const o=n[e][s];this.addressBookController.set(s,o.name,t,o.memo),r||this.addressBookController.delete(e,s)}}async updateAndSetCustomRpc(e,t,r="ETH",n,s){return this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.updateRpc({rpcUrl:e,chainId:t,ticker:r,nickname:n,rpcPrefs:s}),e}async setCustomRpc(e,t,r="ETH",n="",s={}){const o=this.preferencesController.getFrequentRpcListDetail().find((t=>e===t.rpcUrl));return o?this.networkController.setRpcTarget(o.rpcUrl,o.chainId,o.ticker,o.nickname,s):(this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.addToFrequentRpcList(e,t,r,n,s)),e}async delCustomRpc(e){await this.preferencesController.removeFromFrequentRpcList(e)}findCustomRpcBy(e){const t=this.preferencesController.getFrequentRpcListDetail();for(const r of t)for(const t of Object.keys(e))if(r[t]===e[t])return r;return null}async initializeThreeBox(){await this.threeBoxController.init()}async setLedgerTransportPreference(e){const t=this.preferencesController.getLedgerTransportPreference(),r=this.preferencesController.setLedgerTransportPreference(e),n=await this.getKeyringForDevice(R.DEVICE_NAMES.LEDGER);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(r).catch((e=>{throw this.preferencesController.setLedgerTransportPreference(t),e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=D.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}setLocked(){var e;const[t]=this.keyringController.getKeyringsByType(R.KEYRING_TYPES.TREZOR);t&&t.dispose();const[r]=this.keyringController.getKeyringsByType(R.KEYRING_TYPES.LEDGER);return null==r||null===(e=r.destroy)||void 0===e||e.call(r),this.keyringController.setLocked()}}r.default=ve}).call(this)}).call(this,e("_process"),e("buffer").Buffer)}}},{package:"$root$"}],[87,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[88,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[89,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[9,{"@metamask/obs-store":1217},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("@metamask/obs-store");r.default=class{constructor(e={}){const{accountTracker:t,getCurrentChainId:r}=e;this.accountTracker=t,this.getCurrentChainId=r;const s={cachedBalances:{},...e.initState};this.store=new n.ObservableStore(s),this._registerUpdates()}async updateCachedBalances({accounts:e}){const t=this.getCurrentChainId(),r=await this._generateBalancesToCache(e,t);this.store.updateState({cachedBalances:r})}_generateBalancesToCache(e,t){const{cachedBalances:r}=this.store.getState(),n={...r[t]};Object.keys(e).forEach((t=>{const r=e[t];r.balance&&(n[t]=r.balance)}));return{...r,[t]:n}}clearCachedBalances(){this.store.updateState({cachedBalances:{}})}_registerUpdates(){const e=this.updateCachedBalances.bind(this);this.accountTracker.store.subscribe(e)}}}}},{package:"$root$"}],[90,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[91,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[92,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[93,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[94,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[95,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:10,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,n.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[96,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:11,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[97,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:12,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[98,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:13,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:r}=t;r&&r.provider&&"testnet"===r.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[99,{lodash:5626},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:14,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[3,{"../../shared/constants/app":6584,"../../shared/constants/metametrics":6588,"../../shared/constants/time":6594,"../../shared/modules/mv3.utils":6611,"../../shared/modules/object.utils":6613,"./first-time-state":40,"./lib/createStreamSink":50,"./lib/ens-ipfs/setup":57,"./lib/get-first-preferred-lang-code":59,"./lib/getObjStructure":60,"./lib/local-store":61,"./lib/migrator":64,"./lib/network-store":65,"./lib/notification-manager":66,"./lib/setupSentry":82,"./lib/util":85,"./metamask-controller":86,"./migrations":161,"./platforms/extension":162,"@metamask/obs-store":1217,"@sentry/browser":1347,"debounce-stream":2133,"end-of-stream":2221,"eth-rpc-errors":2421,"extension-port-stream":2948,loglevel:5639,pump:5970,"webextension-polyfill":6558},function(){with(this)return function(){"use strict";return function(e,t,r){var n=_(e("end-of-stream")),s=_(e("pump")),o=_(e("debounce-stream")),i=_(e("loglevel")),a=_(e("webextension-polyfill")),l=e("@metamask/obs-store"),c=_(e("extension-port-stream")),d=e("@sentry/browser"),h=e("eth-rpc-errors"),u=e("../../shared/constants/app"),g=e("../../shared/constants/time"),p=e("../../shared/constants/metametrics"),C=e("../../shared/modules/mv3.utils"),m=e("../../shared/modules/object.utils"),f=_(e("./migrations")),b=_(e("./lib/migrator")),k=_(e("./platforms/extension")),w=_(e("./lib/local-store")),y=(_(e("./lib/network-store")),e("./lib/setupSentry")),T=_(e("./lib/createStreamSink")),M=R(e("./lib/notification-manager")),E=R(e("./metamask-controller")),S=_(e("./first-time-state")),v=_(e("./lib/get-first-preferred-lang-code")),A=_(e("./lib/getObjStructure")),P=_(e("./lib/ens-ipfs/setup")),I=e("./lib/util");function N(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(N=function(e){return e?r:t})(e)}function R(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=N(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function _(e){return e&&e.__esModule?e:{default:e}}const{sentry:O}=global,L={...S.default},U={[u.ENVIRONMENT_TYPE_POPUP]:!0,[u.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[u.ENVIRONMENT_TYPE_FULLSCREEN]:!0},D=["trezor-connect"];i.default.setDefaultLevel("info");const x=new k.default,F=new M.default;global.METAMASK_NOTIFIER=F;let B=!1,K=!1,j=!1;const G={},V={};let H;const $=new w.default;let q;const W=new URL("https://metamask.github.io/phishing-warning/v1.2.1/"),Y=async e=>{a.default.runtime.onConnect.removeListener(Y),await z(e),i.default.info("MetaMask initialization complete.")};async function z(e){!function(e,t,r){function g(e){return q.data=e,q}H=new E.default({infuraProjectId:"b6bf7d3508c941499b10025c0776eaf8",showUserConfirmation:J,openPopup:Z,initState:e,initLangCode:t,platform:x,notificationManager:F,browser:a.default,getRequestAccountTabIds:()=>V,getOpenMetamaskTabsIds:()=>G}),(0,P.default)({getCurrentChainId:H.networkController.getCurrentChainId.bind(H.networkController),getIpfsGateway:H.preferencesController.getIpfsGateway.bind(H.preferencesController),provider:H.provider}),(0,s.default)((0,l.storeAsStream)(H.store),(0,o.default)(1e3),(0,l.storeTransformStream)(g),(0,T.default)(k),(e=>{i.default.error("MetaMask - Persistence pipeline failed",e)})),f=H,global.sentryHooks.getSentryState=function(){const e=f.getState(),t=(0,m.maskObject)({metamask:e},y.SENTRY_STATE);return{browser:window.navigator.userAgent,store:t,version:x.getVersion()}};var f;let b=!1;async function k(e){if(!e)throw new Error("MetaMask - updated state is missing");if(!e.data)throw new Error("MetaMask - updated state does not have data");if($.isSupported)try{await $.set(e),b&&(b=!1)}catch(e){b||(b=!0,(0,d.captureException)(e)),i.default.error("error setting state in local store:",e)}}C.isManifestV3&&r&&v(r);a.default.runtime.onConnect.addListener(v),a.default.runtime.onConnectExternal.addListener(A);const w=()=>B||Boolean(Object.keys(G).length)||K,S=(e,t)=>{if(!1===e)H.onClientClosed();else{if(t===u.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(G).length))return;H.onEnvironmentTypeClosed(t)}};function v(e){var t;const r=e.name;if(D.includes(e.name))return;let s=!1;s=(0,I.getPlatform)()===u.PLATFORM_FIREFOX?U[r]:e.sender.origin===`chrome-extension://${a.default.runtime.id}`;const o=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(s){const t=new c.default(e);if(H.isClientOpen=!0,H.setupTrustedCommunication(t,e.sender),C.isManifestV3&&e.postMessage({name:"CONNECTION_READY"}),r===u.ENVIRONMENT_TYPE_POPUP&&(B=!0,(0,n.default)(t,(()=>{B=!1;const e=w();H.isClientOpen=e,S(e,u.ENVIRONMENT_TYPE_POPUP)}))),r===u.ENVIRONMENT_TYPE_NOTIFICATION&&(K=!0,(0,n.default)(t,(()=>{K=!1;const e=w();H.isClientOpen=e,S(e,u.ENVIRONMENT_TYPE_NOTIFICATION)}))),r===u.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;G[r]=!0,(0,n.default)(t,(()=>{delete G[r];const e=w();H.isClientOpen=e,S(e,u.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(o&&o.origin===W.origin&&o.pathname===W.pathname){const t=new c.default(e);H.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;e.onMessage.addListener((e=>{e.data&&"eth_requestAccounts"===e.data.method&&(V[n]=t)}))}A(e)}}function A(e){const t=new c.default(e);H.setupUntrustedCommunication({connectionStream:t,sender:e.sender})}function N(){let e="";const t=R();t&&(e=String(t)),C.isManifestV3?(a.default.action.setBadgeText({text:e}),a.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(a.default.browserAction.setBadgeText({text:e}),a.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function R(){const e=H.txController.getUnapprovedTxCount(),{unapprovedMsgCount:t}=H.messageManager,{unapprovedPersonalMsgCount:r}=H.personalMessageManager,{unapprovedDecryptMsgCount:n}=H.decryptMessageManager,{unapprovedEncryptionPublicKeyMsgCount:s}=H.encryptionPublicKeyManager,{unapprovedTypedMessagesCount:o}=H.typedMessageManager;return e+t+r+n+s+o+H.approvalController.getTotalApprovalCount()+H.appStateController.waitingForUnlock.length}function _(){Object.keys(H.txController.txStateManager.getUnapprovedTxList()).forEach((e=>H.txController.txStateManager.setTxStatusRejected(e))),H.messageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>H.messageManager.rejectMsg(e.id,p.REJECT_NOTFICIATION_CLOSE_SIG))),H.personalMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>H.personalMessageManager.rejectMsg(e.id,p.REJECT_NOTFICIATION_CLOSE_SIG))),H.typedMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>H.typedMessageManager.rejectMsg(e.id,p.REJECT_NOTFICIATION_CLOSE_SIG))),H.decryptMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>H.decryptMessageManager.rejectMsg(e.id,p.REJECT_NOTFICIATION_CLOSE))),H.encryptionPublicKeyManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>H.encryptionPublicKeyManager.rejectMsg(e.id,p.REJECT_NOTFICIATION_CLOSE))),H.approvalController.clear(h.ethErrors.provider.userRejectedRequest()),N()}N(),H.txController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.messageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.personalMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.decryptMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.encryptionPublicKeyManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.typedMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.appStateController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,N),H.controllerMessenger.subscribe(E.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,N),F.on(M.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{e?R()>0&&J():_()}))}(await async function(){const e=new b.default({migrations:f.default});e.on("error",console.warn),q=await $.get()||e.generateInitialState(L),q&&!q.data&&(q=e.generateInitialState(L),O.captureMessage("MetaMask - Empty vault found - unable to recover"));if(e.on("error",(e=>{const t=(0,A.default)(q);O.captureException(e,{extra:{vaultStructure:t}})})),q=await e.migrateData(q),!q)throw new Error("MetaMask - migrator returned undefined");$.isSupported?$.set(q):setTimeout((()=>{throw new Error("MetaMask - Localstore not supported")}));return q.data}(),await(0,v.default)(),e),C.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v1.2.1/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const s=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new Q)),1e3),await s}catch(e){e instanceof Q?console.warn("Phishing warning page timeout; page not guaraneteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),i.default.info("MetaMask initialization complete.")}C.isManifestV3?a.default.runtime.onConnect.addListener(Y):z().catch(i.default.error);class Q extends Error{constructor(){super("Timeout failed")}}async function J(){const e=await x.getActiveTabs(),t=Boolean(e.find((e=>G[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!j&&(r||!B)&&!t){j=!0;try{await F.showPopup()}finally{j=!1}}}async function Z(){await J(),await new Promise((e=>{const t=setInterval((()=>{K||(clearInterval(t),e())}),g.SECOND)}))}const X=()=>{if(H)return H.metaMetricsController.updateTraits({[p.TRAITS.INSTALL_DATE_EXT]:(new Date).toISOString().split("T")[0]}),void H.metaMetricsController.addEventBeforeMetricsOptIn({category:p.EVENT.CATEGORIES.APP,event:p.EVENT_NAMES.APP_INSTALLED,properties:{}});setTimeout((()=>{X()}),1e3)};a.default.runtime.onInstalled.addListener((({reason:e})=>{"install"===e&&(X(),x.openExtensionInBrowser())}))}}},{package:"$root$"}]],[3],{});