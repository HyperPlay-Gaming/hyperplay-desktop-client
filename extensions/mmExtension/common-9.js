LavaPack.loadBundle([
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js", {"../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../../shared/lib/fetch-with-cache":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../shared/lib/swaps-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../shared/modules/swaps.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\swaps.utils.js","../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","human-standard-token-abi":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\human-standard-token-abi\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\swaps\swaps.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.countDecimals = void 0;
exports.fetchAggregatorMetadata = fetchAggregatorMetadata;
exports.fetchSwapsFeatureFlags = fetchSwapsFeatureFlags;
exports.fetchSwapsGasPrices = fetchSwapsGasPrices;
exports.fetchToken = fetchToken;
exports.fetchTokenBalance = fetchTokenBalance;
exports.fetchTokenPrice = fetchTokenPrice;
exports.fetchTokens = fetchTokens;
exports.fetchTopAssets = fetchTopAssets;
exports.fetchTradesInfo = fetchTradesInfo;
exports.formatSwapsValueForDisplay = formatSwapsValueForDisplay;
exports.getNetworkNameByChainId = exports.getFeeForSmartTransaction = void 0;
exports.getRenderableNetworkFeesForQuote = getRenderableNetworkFeesForQuote;
exports.parseSmartTransactionsError = exports.isContractAddressValid = exports.getTranslatedStxErrorMessage = exports.getSwapsLivenessForNetwork = void 0;
exports.quotesToRenderableData = quotesToRenderableData;
exports.stxErrorTypes = exports.showRemainingTimeInMinAndSec = exports.shouldEnableDirectWrapping = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _humanStandardTokenAbi = _interopRequireDefault(require("human-standard-token-abi"));

var _swaps = require("../../../shared/constants/swaps");

var _swaps2 = require("../../../shared/modules/swaps.utils");

var _network = require("../../../shared/constants/network");

var _conversions = require("../../helpers/utils/conversions.util");

var _confirmTx = require("../../helpers/utils/confirm-tx.util");

var _fetchWithCache = _interopRequireDefault(require("../../../shared/lib/fetch-with-cache"));

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _swapsUtils = require("../../../shared/lib/swaps-utils");

var _time = require("../../../shared/constants/time");

var _transactions = require("../../helpers/utils/transactions.util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CACHE_REFRESH_FIVE_MINUTES = 300000;
const USD_CURRENCY_CODE = 'usd';
const clientIdHeader = {
  'X-Client-Id': _swaps.SWAPS_CLIENT_ID
};
const TOKEN_VALIDATORS = [{
  property: 'address',
  type: 'string',
  validator: input => (0, _hexstringUtils.isValidHexAddress)(input, {
    allowNonPrefixed: false
  })
}, {
  property: 'symbol',
  type: 'string',
  validator: string => (0, _swapsUtils.truthyString)(string) && string.length <= 12
}, {
  property: 'decimals',
  type: 'string|number',
  validator: string => Number(string) >= 0 && Number(string) <= 36
}];
const TOP_ASSET_VALIDATORS = TOKEN_VALIDATORS.slice(0, 2);
const AGGREGATOR_METADATA_VALIDATORS = [{
  property: 'color',
  type: 'string',
  validator: string => Boolean(string.match(/^#[A-Fa-f0-9]+$/u))
}, {
  property: 'title',
  type: 'string',
  validator: _swapsUtils.truthyString
}, {
  property: 'icon',
  type: 'string',
  validator: string => Boolean(string.match(/^data:image/u))
}];

const isValidDecimalNumber = string => !isNaN(string) && string.match(/^[.0-9]+$/u) && !isNaN(parseFloat(string));

const SWAP_GAS_PRICE_VALIDATOR = [{
  property: 'SafeGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}, {
  property: 'ProposeGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}, {
  property: 'FastGasPrice',
  type: 'string',
  validator: isValidDecimalNumber
}];

const shouldEnableDirectWrapping = (chainId, sourceToken, destinationToken) => {
  var _SWAPS_CHAINID_DEFAUL;

  if (!sourceToken || !destinationToken) {
    return false;
  }

  const wrappedToken = _swaps.SWAPS_WRAPPED_TOKENS_ADDRESSES[chainId];
  const nativeToken = (_SWAPS_CHAINID_DEFAUL = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]) === null || _SWAPS_CHAINID_DEFAUL === void 0 ? void 0 : _SWAPS_CHAINID_DEFAUL.address;
  const sourceTokenLowerCase = sourceToken.toLowerCase();
  const destinationTokenLowerCase = destinationToken.toLowerCase();
  return sourceTokenLowerCase === wrappedToken && destinationTokenLowerCase === nativeToken || sourceTokenLowerCase === nativeToken && destinationTokenLowerCase === wrappedToken;
};

exports.shouldEnableDirectWrapping = shouldEnableDirectWrapping;

async function fetchTradesInfo({
  slippage,
  sourceToken,
  sourceDecimals,
  destinationToken,
  value,
  fromAddress,
  exchangeList
}, {
  chainId
}) {
  const urlParams = {
    destinationToken,
    sourceToken,
    sourceAmount: (0, _swapsUtils.calcTokenValue)(value, sourceDecimals).toString(10),
    slippage,
    timeout: _time.SECOND * 10,
    walletAddress: fromAddress
  };

  if (exchangeList) {
    urlParams.exchangeList = exchangeList;
  }

  if (shouldEnableDirectWrapping(chainId, sourceToken, destinationToken)) {
    urlParams.enableDirectWrapping = true;
  }

  const queryString = new URLSearchParams(urlParams).toString();
  const tradeURL = `${(0, _swapsUtils.getBaseApi)('trade', chainId)}${queryString}`;
  const tradesResponse = await (0, _fetchWithCache.default)(tradeURL, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: 0,
    timeout: _time.SECOND * 15
  });
  const newQuotes = tradesResponse.reduce((aggIdTradeMap, quote) => {
    if (quote.trade && !quote.error && (0, _swapsUtils.validateData)(_swapsUtils.QUOTE_VALIDATORS, quote, tradeURL)) {
      const constructedTrade = (0, _swapsUtils.constructTxParams)({
        to: quote.trade.to,
        from: quote.trade.from,
        data: quote.trade.data,
        amount: (0, _transactionsControllerUtils.decimalToHex)(quote.trade.value),
        gas: (0, _transactionsControllerUtils.decimalToHex)(quote.maxGas)
      });
      let {
        approvalNeeded
      } = quote;

      if (approvalNeeded) {
        approvalNeeded = (0, _swapsUtils.constructTxParams)({ ...approvalNeeded
        });
      }

      return { ...aggIdTradeMap,
        [quote.aggregator]: { ...quote,
          slippage,
          trade: constructedTrade,
          approvalNeeded
        }
      };
    }

    return aggIdTradeMap;
  }, {});
  return newQuotes;
}

async function fetchToken(contractAddress, chainId) {
  const tokenUrl = (0, _swapsUtils.getBaseApi)('token', chainId);
  const token = await (0, _fetchWithCache.default)(`${tokenUrl}?address=${contractAddress}`, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
  return token;
}

async function fetchTokens(chainId) {
  const tokensUrl = (0, _swapsUtils.getBaseApi)('tokens', chainId);
  const tokens = await (0, _fetchWithCache.default)(tokensUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
  const logError = false;
  const filteredTokens = [_swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId], ...tokens.filter(token => {
    return (0, _swapsUtils.validateData)(TOKEN_VALIDATORS, token, tokensUrl, logError) && !((0, _swaps2.isSwapsDefaultTokenSymbol)(token.symbol, chainId) || (0, _swaps2.isSwapsDefaultTokenAddress)(token.address, chainId));
  })];
  return filteredTokens;
}

async function fetchAggregatorMetadata(chainId) {
  const aggregatorMetadataUrl = (0, _swapsUtils.getBaseApi)('aggregatorMetadata', chainId);
  const aggregators = await (0, _fetchWithCache.default)(aggregatorMetadataUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  });
  const filteredAggregators = {};

  for (const aggKey in aggregators) {
    if ((0, _swapsUtils.validateData)(AGGREGATOR_METADATA_VALIDATORS, aggregators[aggKey], aggregatorMetadataUrl)) {
      filteredAggregators[aggKey] = aggregators[aggKey];
    }
  }

  return filteredAggregators;
}

async function fetchTopAssets(chainId) {
  const topAssetsUrl = (0, _swapsUtils.getBaseApi)('topAssets', chainId);
  const response = (await (0, _fetchWithCache.default)(topAssetsUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: CACHE_REFRESH_FIVE_MINUTES
  })) || [];
  const topAssetsMap = response.reduce((_topAssetsMap, asset, index) => {
    if ((0, _swapsUtils.validateData)(TOP_ASSET_VALIDATORS, asset, topAssetsUrl)) {
      return { ..._topAssetsMap,
        [asset.address]: {
          index: String(index)
        }
      };
    }

    return _topAssetsMap;
  }, {});
  return topAssetsMap;
}

async function fetchSwapsFeatureFlags() {
  const v2ApiBaseUrl = false ? _swaps.SWAPS_DEV_API_V2_BASE_URL : _swaps.SWAPS_API_V2_BASE_URL;
  const response = await (0, _fetchWithCache.default)(`${v2ApiBaseUrl}/featureFlags`, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: 600000
  });
  return response;
}

async function fetchTokenPrice(address) {
  var _prices$address;

  const query = `contract_addresses=${address}&vs_currencies=eth`;
  const prices = await (0, _fetchWithCache.default)(`https://api.coingecko.com/api/v3/simple/token_price/ethereum?${query}`, {
    method: 'GET'
  }, {
    cacheRefreshTime: 60000
  });
  return prices && ((_prices$address = prices[address]) === null || _prices$address === void 0 ? void 0 : _prices$address.eth);
}

async function fetchTokenBalance(address, userAddress) {
  const tokenContract = global.eth.contract(_humanStandardTokenAbi.default).at(address);
  const tokenBalancePromise = tokenContract ? tokenContract.balanceOf(userAddress) : Promise.resolve();
  const usersToken = await tokenBalancePromise;
  return usersToken;
}

async function fetchSwapsGasPrices(chainId) {
  const gasPricesUrl = (0, _swapsUtils.getBaseApi)('gasPrices', chainId);
  const response = await (0, _fetchWithCache.default)(gasPricesUrl, {
    method: 'GET',
    headers: clientIdHeader
  }, {
    cacheRefreshTime: 30000
  });
  const responseIsValid = (0, _swapsUtils.validateData)(SWAP_GAS_PRICE_VALIDATOR, response, gasPricesUrl);

  if (!responseIsValid) {
    throw new Error(`${gasPricesUrl} response is invalid`);
  }

  const {
    SafeGasPrice: safeLow,
    ProposeGasPrice: average,
    FastGasPrice: fast
  } = response;
  return {
    safeLow,
    average,
    fast
  };
}

const getFeeForSmartTransaction = ({
  chainId,
  currentCurrency,
  conversionRate,
  USDConversionRate,
  nativeCurrencySymbol,
  feeInWeiDec
}) => {
  const feeInWeiHex = (0, _transactionsControllerUtils.decimalToHex)(feeInWeiDec);
  const ethFee = (0, _conversions.getValueFromWeiHex)({
    value: feeInWeiHex,
    toDenomination: _network.CURRENCY_SYMBOLS.ETH,
    numberOfDecimals: 5
  });
  const rawNetworkFees = (0, _conversions.getValueFromWeiHex)({
    value: feeInWeiHex,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  let feeInUsd;

  if (currentCurrency === USD_CURRENCY_CODE) {
    feeInUsd = rawNetworkFees;
  } else {
    feeInUsd = (0, _conversions.getValueFromWeiHex)({
      value: feeInWeiHex,
      toCurrency: USD_CURRENCY_CODE,
      conversionRate: USDConversionRate,
      numberOfDecimals: 2
    });
  }

  const formattedNetworkFee = (0, _confirmTx.formatCurrency)(rawNetworkFees, currentCurrency);
  const chainCurrencySymbolToUse = nativeCurrencySymbol || _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId].symbol;
  return {
    feeInUsd,
    feeInFiat: formattedNetworkFee,
    feeInEth: `${ethFee} ${chainCurrencySymbolToUse}`,
    rawEthFee: ethFee
  };
};

exports.getFeeForSmartTransaction = getFeeForSmartTransaction;

function getRenderableNetworkFeesForQuote({
  tradeGas,
  approveGas,
  gasPrice,
  currentCurrency,
  conversionRate,
  USDConversionRate,
  tradeValue,
  sourceSymbol,
  sourceAmount,
  chainId,
  nativeCurrencySymbol,
  multiLayerL1FeeTotal
}) {
  const totalGasLimitForCalculation = new _bignumber.default(tradeGas || '0x0', 16).plus(approveGas || '0x0', 16).toString(16);
  let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(totalGasLimitForCalculation, gasPrice);

  if (multiLayerL1FeeTotal !== null) {
    gasTotalInWeiHex = (0, _transactions.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1FeeTotal || '0x0');
  }

  const nonGasFee = new _bignumber.default(tradeValue, 16).minus((0, _swaps2.isSwapsDefaultTokenSymbol)(sourceSymbol, chainId) ? sourceAmount : 0, 10).toString(16);
  const totalWeiCost = new _bignumber.default(gasTotalInWeiHex, 16).plus(nonGasFee, 16).toString(16);
  const ethFee = (0, _conversions.getValueFromWeiHex)({
    value: totalWeiCost,
    toDenomination: 'ETH',
    numberOfDecimals: 5
  });
  const rawNetworkFees = (0, _conversions.getValueFromWeiHex)({
    value: totalWeiCost,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  const formattedNetworkFee = (0, _confirmTx.formatCurrency)(rawNetworkFees, currentCurrency);
  let feeInUsd;

  if (currentCurrency === USD_CURRENCY_CODE) {
    feeInUsd = rawNetworkFees;
  } else {
    feeInUsd = (0, _conversions.getValueFromWeiHex)({
      value: totalWeiCost,
      toCurrency: USD_CURRENCY_CODE,
      conversionRate: USDConversionRate,
      numberOfDecimals: 2
    });
  }

  const chainCurrencySymbolToUse = nativeCurrencySymbol || _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId].symbol;
  return {
    rawNetworkFees,
    feeInUsd,
    rawEthFee: ethFee,
    feeInFiat: formattedNetworkFee,
    feeInEth: `${ethFee} ${chainCurrencySymbolToUse}`,
    nonGasFee
  };
}

function quotesToRenderableData(quotes, gasPrice, conversionRate, currentCurrency, approveGas, tokenConversionRates, chainId, smartTransactionEstimatedGas, nativeCurrencySymbol, multiLayerL1FeeTotal) {
  return Object.values(quotes).map(quote => {
    const {
      destinationAmount = 0,
      sourceAmount = 0,
      sourceTokenInfo,
      destinationTokenInfo,
      slippage,
      aggType,
      aggregator,
      gasEstimateWithRefund,
      averageGas,
      fee,
      trade
    } = quote;
    const sourceValue = (0, _transactionsControllerUtils.calcTokenAmount)(sourceAmount, sourceTokenInfo.decimals).toString(10);
    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals).toPrecision(8);
    let feeInFiat = null;
    let feeInEth = null;
    let rawNetworkFees = null;
    let rawEthFee = null;
    ({
      feeInFiat,
      feeInEth,
      rawNetworkFees,
      rawEthFee
    } = getRenderableNetworkFeesForQuote({
      tradeGas: gasEstimateWithRefund || (0, _transactionsControllerUtils.decimalToHex)(averageGas || 800000),
      approveGas,
      gasPrice,
      currentCurrency,
      conversionRate,
      tradeValue: trade.value,
      sourceSymbol: sourceTokenInfo.symbol,
      sourceAmount,
      chainId,
      multiLayerL1FeeTotal
    }));

    if (smartTransactionEstimatedGas) {
      ({
        feeInFiat,
        feeInEth
      } = getFeeForSmartTransaction({
        chainId,
        currentCurrency,
        conversionRate,
        nativeCurrencySymbol,
        estimatedFeeInWeiDec: smartTransactionEstimatedGas.feeEstimate
      }));
    }

    const slippageMultiplier = new _bignumber.default(100 - slippage).div(100);
    const minimumAmountReceived = new _bignumber.default(destinationValue).times(slippageMultiplier).toFixed(6);
    const tokenConversionRate = tokenConversionRates[destinationTokenInfo.address];
    const ethValueOfTrade = (0, _swaps2.isSwapsDefaultTokenSymbol)(destinationTokenInfo.symbol, chainId) ? (0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals).minus(rawEthFee, 10) : new _bignumber.default(tokenConversionRate || 0, 10).times((0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals), 10).minus(rawEthFee, 10);
    let liquiditySourceKey;
    let renderedSlippage = slippage;

    if (aggType === 'AGG') {
      liquiditySourceKey = 'swapAggregator';
    } else if (aggType === 'RFQ') {
      liquiditySourceKey = 'swapRequestForQuotation';
      renderedSlippage = 0;
    } else if (aggType === 'DEX') {
      liquiditySourceKey = 'swapDecentralizedExchange';
    } else if (aggType === 'CONTRACT') {
      liquiditySourceKey = 'swapDirectContract';
    } else {
      liquiditySourceKey = 'swapUnknown';
    }

    return {
      aggId: aggregator,
      amountReceiving: `${destinationValue} ${destinationTokenInfo.symbol}`,
      destinationTokenDecimals: destinationTokenInfo.decimals,
      destinationTokenSymbol: destinationTokenInfo.symbol,
      destinationTokenValue: formatSwapsValueForDisplay(destinationValue),
      destinationIconUrl: destinationTokenInfo.iconUrl,
      isBestQuote: quote.isBestQuote,
      liquiditySourceKey,
      feeInEth,
      detailedNetworkFees: `${feeInEth} (${feeInFiat})`,
      networkFees: feeInFiat,
      quoteSource: aggType,
      rawNetworkFees,
      slippage: renderedSlippage,
      sourceTokenDecimals: sourceTokenInfo.decimals,
      sourceTokenSymbol: sourceTokenInfo.symbol,
      sourceTokenValue: sourceValue,
      sourceTokenIconUrl: sourceTokenInfo.iconUrl,
      ethValueOfTrade,
      minimumAmountReceived,
      metaMaskFee: fee
    };
  });
}

function formatSwapsValueForDisplay(destinationAmount) {
  let amountToDisplay = (0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(destinationAmount, 12);

  if (amountToDisplay.match(/e[+-]/u)) {
    amountToDisplay = new _bignumber.default(amountToDisplay).toFixed();
  }

  return amountToDisplay;
}
/**
 * Checks whether a contract address is valid before swapping tokens.
 *
 * @param {string} contractAddress - E.g. "0x881d40237659c251811cec9c364ef91dc08d300c" for mainnet
 * @param {string} chainId - The hex encoded chain ID to check
 * @returns {boolean} Whether a contract address is valid or not
 */


const isContractAddressValid = (contractAddress, chainId = _network.CHAIN_IDS.MAINNET) => {
  if (!contractAddress || !_swaps.ALLOWED_CONTRACT_ADDRESSES[chainId]) {
    return false;
  }

  return _swaps.ALLOWED_CONTRACT_ADDRESSES[chainId].some( // Sometimes we get a contract address with a few upper-case chars and since addresses are
  // case-insensitive, we compare lowercase versions for validity.
  allowedContractAddress => contractAddress.toLowerCase() === allowedContractAddress.toLowerCase());
};
/**
 * @param {string} chainId
 * @returns string e.g. ethereum, bsc or polygon
 */


exports.isContractAddressValid = isContractAddressValid;

const getNetworkNameByChainId = chainId => {
  switch (chainId) {
    case _network.CHAIN_IDS.MAINNET:
      return _swaps.ETHEREUM;

    case _network.CHAIN_IDS.BSC:
      return _swaps.BSC;

    case _network.CHAIN_IDS.POLYGON:
      return _swaps.POLYGON;

    case _network.CHAIN_IDS.GOERLI:
      return _swaps.GOERLI;

    case _network.CHAIN_IDS.AVALANCHE:
      return _swaps.AVALANCHE;

    case _network.CHAIN_IDS.OPTIMISM:
      return _swaps.OPTIMISM;

    case _network.CHAIN_IDS.ARBITRUM:
      return _swaps.ARBITRUM;

    default:
      return '';
  }
};
/**
 * It returns info about if Swaps are enabled and if we should use our new APIs for it.
 *
 * @param {object} swapsFeatureFlags
 * @param {string} chainId
 * @returns object with 2 items: "swapsFeatureIsLive"
 */


exports.getNetworkNameByChainId = getNetworkNameByChainId;

const getSwapsLivenessForNetwork = (swapsFeatureFlags = {}, chainId) => {
  const networkName = getNetworkNameByChainId(chainId); // Use old APIs for testnet and Goerli.

  if ([_network.CHAIN_IDS.LOCALHOST, _network.CHAIN_IDS.GOERLI].includes(chainId)) {
    return {
      swapsFeatureIsLive: true
    };
  } // If a network name is not found in the list of feature flags, disable Swaps.


  if (!swapsFeatureFlags[networkName]) {
    return {
      swapsFeatureIsLive: false
    };
  }

  const isNetworkEnabledForNewApi = swapsFeatureFlags[networkName].extensionActive;

  if (isNetworkEnabledForNewApi) {
    return {
      swapsFeatureIsLive: true
    };
  }

  return {
    swapsFeatureIsLive: swapsFeatureFlags[networkName].fallbackToV1
  };
};
/**
 * @param {number} value
 * @returns number
 */


exports.getSwapsLivenessForNetwork = getSwapsLivenessForNetwork;

const countDecimals = value => {
  var _value$toString$split;

  if (!value || Math.floor(value) === value) {
    return 0;
  }

  return ((_value$toString$split = value.toString().split('.')[1]) === null || _value$toString$split === void 0 ? void 0 : _value$toString$split.length) || 0;
};

exports.countDecimals = countDecimals;

const showRemainingTimeInMinAndSec = remainingTimeInSec => {
  if (!Number.isInteger(remainingTimeInSec)) {
    return '0:00';
  }

  const minutes = Math.floor(remainingTimeInSec / 60);
  const seconds = remainingTimeInSec % 60;
  return `${minutes}:${seconds.toString().padStart(2, '0')}`;
};

exports.showRemainingTimeInMinAndSec = showRemainingTimeInMinAndSec;
const stxErrorTypes = {
  UNAVAILABLE: 'unavailable',
  NOT_ENOUGH_FUNDS: 'not_enough_funds',
  REGULAR_TX_IN_PROGRESS: 'regular_tx_pending'
};
exports.stxErrorTypes = stxErrorTypes;

const getTranslatedStxErrorMessage = (errorType, t) => {
  switch (errorType) {
    case stxErrorTypes.UNAVAILABLE:
    case stxErrorTypes.REGULAR_TX_IN_PROGRESS:
      return t('stxErrorUnavailable');

    case stxErrorTypes.NOT_ENOUGH_FUNDS:
      return t('stxErrorNotEnoughFunds');

    default:
      return t('stxErrorUnavailable');
  }
};

exports.getTranslatedStxErrorMessage = getTranslatedStxErrorMessage;

const parseSmartTransactionsError = errorMessage => {
  const errorJson = errorMessage.slice(12);
  return JSON.parse(errorJson.trim());
};

exports.parseSmartTransactionsError = parseSmartTransactionsError;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\confirm-transaction.js", {".":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/gas.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\gas.utils.js","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../helpers/utils/tx-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js","./custom-gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\custom-gas.js","./selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","reselect":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\confirm-transaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unconfirmedTransactionsListSelector = exports.unconfirmedTransactionsHashSelector = exports.unconfirmedTransactionsCountSelector = exports.unconfirmedMessagesHashSelector = exports.txDataSelector = exports.transactionFeeSelector = exports.tokenAddressSelector = exports.sendTokenTokenAmountAndToAddressSelector = exports.currentCurrencySelector = exports.conversionRateSelector = exports.contractExchangeRateSelector = void 0;

var _reselect = require("reselect");

var _txHelper = _interopRequireDefault(require("../helpers/utils/tx-helper"));

var _confirmTx = require("../helpers/utils/confirm-tx.util");

var _transactions = require("../helpers/utils/transactions.util");

var _transaction = require("../../shared/modules/transaction.utils");

var _metamask = require("../ducks/metamask/metamask");

var _transaction2 = require("../../shared/constants/transaction");

var _conversions = require("../helpers/utils/conversions.util");

var _gas = require("../../shared/constants/gas");

var _gas2 = require("../../shared/modules/gas.utils");

var _stringUtils = require("../../shared/modules/string-utils");

var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");

var _customGas = require("./custom-gas");

var _selectors = require("./selectors");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const unapprovedTxsSelector = state => state.metamask.unapprovedTxs;

const unapprovedMsgsSelector = state => state.metamask.unapprovedMsgs;

const unapprovedPersonalMsgsSelector = state => state.metamask.unapprovedPersonalMsgs;

const unapprovedDecryptMsgsSelector = state => state.metamask.unapprovedDecryptMsgs;

const unapprovedEncryptionPublicKeyMsgsSelector = state => state.metamask.unapprovedEncryptionPublicKeyMsgs;

const unapprovedTypedMessagesSelector = state => state.metamask.unapprovedTypedMessages;

const unconfirmedTransactionsListSelector = (0, _reselect.createSelector)(unapprovedTxsSelector, unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedTxs = {}, unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => (0, _txHelper.default)(unapprovedTxs, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedDecryptMsgs, unapprovedEncryptionPublicKeyMsgs, unapprovedTypedMessages, network, chainId) || []);
exports.unconfirmedTransactionsListSelector = unconfirmedTransactionsListSelector;
const unconfirmedTransactionsHashSelector = (0, _reselect.createSelector)(unapprovedTxsSelector, unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedTxs = {}, unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => {
  const filteredUnapprovedTxs = Object.keys(unapprovedTxs).reduce((acc, address) => {
    const transactions = { ...acc
    };

    if ((0, _transaction.transactionMatchesNetwork)(unapprovedTxs[address], chainId, network)) {
      transactions[address] = unapprovedTxs[address];
    }

    return transactions;
  }, {});
  return { ...filteredUnapprovedTxs,
    ...unapprovedMsgs,
    ...unapprovedPersonalMsgs,
    ...unapprovedDecryptMsgs,
    ...unapprovedEncryptionPublicKeyMsgs,
    ...unapprovedTypedMessages
  };
});
exports.unconfirmedTransactionsHashSelector = unconfirmedTransactionsHashSelector;
const unconfirmedMessagesHashSelector = (0, _reselect.createSelector)(unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, (unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}) => {
  return { ...unapprovedMsgs,
    ...unapprovedPersonalMsgs,
    ...unapprovedDecryptMsgs,
    ...unapprovedEncryptionPublicKeyMsgs,
    ...unapprovedTypedMessages
  };
});
exports.unconfirmedMessagesHashSelector = unconfirmedMessagesHashSelector;

const unapprovedMsgCountSelector = state => state.metamask.unapprovedMsgCount;

const unapprovedPersonalMsgCountSelector = state => state.metamask.unapprovedPersonalMsgCount;

const unapprovedDecryptMsgCountSelector = state => state.metamask.unapprovedDecryptMsgCount;

const unapprovedEncryptionPublicKeyMsgCountSelector = state => state.metamask.unapprovedEncryptionPublicKeyMsgCount;

const unapprovedTypedMessagesCountSelector = state => state.metamask.unapprovedTypedMessagesCount;

const unconfirmedTransactionsCountSelector = (0, _reselect.createSelector)(unapprovedTxsSelector, unapprovedMsgCountSelector, unapprovedPersonalMsgCountSelector, unapprovedDecryptMsgCountSelector, unapprovedEncryptionPublicKeyMsgCountSelector, unapprovedTypedMessagesCountSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedTxs = {}, unapprovedMsgCount = 0, unapprovedPersonalMsgCount = 0, unapprovedDecryptMsgCount = 0, unapprovedEncryptionPublicKeyMsgCount = 0, unapprovedTypedMessagesCount = 0, network, chainId) => {
  const filteredUnapprovedTxIds = Object.keys(unapprovedTxs).filter(txId => (0, _transaction.transactionMatchesNetwork)(unapprovedTxs[txId], chainId, network));
  return filteredUnapprovedTxIds.length + unapprovedTypedMessagesCount + unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedDecryptMsgCount + unapprovedEncryptionPublicKeyMsgCount;
});
exports.unconfirmedTransactionsCountSelector = unconfirmedTransactionsCountSelector;

const currentCurrencySelector = state => state.metamask.currentCurrency;

exports.currentCurrencySelector = currentCurrencySelector;

const conversionRateSelector = state => state.metamask.conversionRate;

exports.conversionRateSelector = conversionRateSelector;

const txDataSelector = state => state.confirmTransaction.txData;

exports.txDataSelector = txDataSelector;

const tokenDataSelector = state => state.confirmTransaction.tokenData;

const tokenPropsSelector = state => state.confirmTransaction.tokenProps;

const contractExchangeRatesSelector = state => state.metamask.contractExchangeRates;

const tokenDecimalsSelector = (0, _reselect.createSelector)(tokenPropsSelector, tokenProps => tokenProps && tokenProps.decimals);
const tokenDataArgsSelector = (0, _reselect.createSelector)(tokenDataSelector, tokenData => tokenData && tokenData.args || []);
const txParamsSelector = (0, _reselect.createSelector)(txDataSelector, txData => txData && txData.txParams || {});
const tokenAddressSelector = (0, _reselect.createSelector)(txParamsSelector, txParams => txParams && txParams.to);
exports.tokenAddressSelector = tokenAddressSelector;
const TOKEN_PARAM_TO = '_to';
const TOKEN_PARAM_VALUE = '_value';
const sendTokenTokenAmountAndToAddressSelector = (0, _reselect.createSelector)(tokenDataArgsSelector, tokenDecimalsSelector, (args, tokenDecimals) => {
  let toAddress = '';
  let tokenAmount = '0'; // Token params here are ethers BigNumbers, which have a different
  // interface than bignumber.js

  if (args && args.length) {
    toAddress = args[TOKEN_PARAM_TO];
    let value = args[TOKEN_PARAM_VALUE].toString();

    if (tokenDecimals) {
      // bignumber.js return value
      value = (0, _transactionsControllerUtils.calcTokenAmount)(value, tokenDecimals).toFixed();
    }

    tokenAmount = (0, _confirmTx.roundExponential)(value);
  }

  return {
    toAddress,
    tokenAmount
  };
});
exports.sendTokenTokenAmountAndToAddressSelector = sendTokenTokenAmountAndToAddressSelector;
const contractExchangeRateSelector = (0, _reselect.createSelector)(contractExchangeRatesSelector, tokenAddressSelector, (contractExchangeRates, tokenAddress) => contractExchangeRates[Object.keys(contractExchangeRates).find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress))]);
exports.contractExchangeRateSelector = contractExchangeRateSelector;

const transactionFeeSelector = function (state, txData) {
  var _txData$txParams$gas, _txData$txParams, _txData$txParams$gasP2, _txData$txParams8, _txData$txParams$gasP3, _txData$txParams9, _txData$txParams$gasP4, _txData$txParams10;

  const currentCurrency = currentCurrencySelector(state);
  const conversionRate = conversionRateSelector(state);
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state) || {};
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  const networkAndAccountSupportsEIP1559 = (0, _.checkNetworkAndAccountSupports1559)(state);
  const gasEstimationObject = {
    gasLimit: (_txData$txParams$gas = (_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.gas) !== null && _txData$txParams$gas !== void 0 ? _txData$txParams$gas : '0x0'
  };

  if (networkAndAccountSupportsEIP1559) {
    var _txData$txParams2;

    const {
      gasPrice = '0'
    } = gasFeeEstimates;
    const selectedGasEstimates = gasFeeEstimates[txData.userFeeLevel] || {};

    if (((_txData$txParams2 = txData.txParams) === null || _txData$txParams2 === void 0 ? void 0 : _txData$txParams2.type) === _transaction2.TRANSACTION_ENVELOPE_TYPES.LEGACY) {
      var _txData$txParams$gasP, _txData$txParams3;

      gasEstimationObject.gasPrice = (_txData$txParams$gasP = (_txData$txParams3 = txData.txParams) === null || _txData$txParams3 === void 0 ? void 0 : _txData$txParams3.gasPrice) !== null && _txData$txParams$gasP !== void 0 ? _txData$txParams$gasP : (0, _conversions.decGWEIToHexWEI)(gasPrice);
    } else {
      var _txData$txParams4, _txData$txParams5, _txData$txParams6, _txData$txParams7;

      const {
        suggestedMaxPriorityFeePerGas,
        suggestedMaxFeePerGas
      } = selectedGasEstimates;
      gasEstimationObject.maxFeePerGas = (_txData$txParams4 = txData.txParams) !== null && _txData$txParams4 !== void 0 && _txData$txParams4.maxFeePerGas && (txData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || !suggestedMaxFeePerGas) ? (_txData$txParams5 = txData.txParams) === null || _txData$txParams5 === void 0 ? void 0 : _txData$txParams5.maxFeePerGas : (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas || gasPrice);
      gasEstimationObject.maxPriorityFeePerGas = (_txData$txParams6 = txData.txParams) !== null && _txData$txParams6 !== void 0 && _txData$txParams6.maxPriorityFeePerGas && (txData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || !suggestedMaxPriorityFeePerGas) ? (_txData$txParams7 = txData.txParams) === null || _txData$txParams7 === void 0 ? void 0 : _txData$txParams7.maxPriorityFeePerGas : suggestedMaxPriorityFeePerGas && (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas) || gasEstimationObject.maxFeePerGas;
      gasEstimationObject.baseFeePerGas = (0, _conversions.decGWEIToHexWEI)(gasFeeEstimates.estimatedBaseFee);
    }
  } else {
    switch (gasEstimateType) {
      case _gas.GAS_ESTIMATE_TYPES.NONE:
        gasEstimationObject.gasPrice = (_txData$txParams$gasP2 = (_txData$txParams8 = txData.txParams) === null || _txData$txParams8 === void 0 ? void 0 : _txData$txParams8.gasPrice) !== null && _txData$txParams$gasP2 !== void 0 ? _txData$txParams$gasP2 : '0x0';
        break;

      case _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE:
        gasEstimationObject.gasPrice = (_txData$txParams$gasP3 = (_txData$txParams9 = txData.txParams) === null || _txData$txParams9 === void 0 ? void 0 : _txData$txParams9.gasPrice) !== null && _txData$txParams$gasP3 !== void 0 ? _txData$txParams$gasP3 : (0, _conversions.decGWEIToHexWEI)(gasFeeEstimates.gasPrice);
        break;

      case _gas.GAS_ESTIMATE_TYPES.LEGACY:
        gasEstimationObject.gasPrice = (_txData$txParams$gasP4 = (_txData$txParams10 = txData.txParams) === null || _txData$txParams10 === void 0 ? void 0 : _txData$txParams10.gasPrice) !== null && _txData$txParams$gasP4 !== void 0 ? _txData$txParams$gasP4 : (0, _customGas.getAveragePriceEstimateInHexWEI)(state);
        break;

      case _gas.GAS_ESTIMATE_TYPES.FEE_MARKET:
        break;

      default:
        break;
    }
  }

  const {
    txParams: {
      value = '0x0'
    } = {}
  } = txData;
  const fiatTransactionAmount = (0, _confirmTx.getValueFromWeiHex)({
    value,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    conversionRate,
    numberOfDecimals: 2
  });
  const ethTransactionAmount = (0, _confirmTx.getValueFromWeiHex)({
    value,
    fromCurrency: nativeCurrency,
    toCurrency: nativeCurrency,
    conversionRate,
    numberOfDecimals: 6
  });
  const hexMinimumTransactionFee = (0, _gas2.getMinimumGasTotalInHexWei)(gasEstimationObject);
  const hexMaximumTransactionFee = (0, _gas2.getMaximumGasTotalInHexWei)(gasEstimationObject);
  const fiatMinimumTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMinimumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    numberOfDecimals: 2,
    conversionRate
  });
  const fiatMaximumTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMaximumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: currentCurrency,
    numberOfDecimals: 2,
    conversionRate
  });
  const ethTransactionFee = (0, _confirmTx.getTransactionFee)({
    value: hexMinimumTransactionFee,
    fromCurrency: nativeCurrency,
    toCurrency: nativeCurrency,
    numberOfDecimals: 6,
    conversionRate
  });
  const fiatTransactionTotal = (0, _confirmTx.addFiat)(fiatMinimumTransactionFee, fiatTransactionAmount);
  const ethTransactionTotal = (0, _confirmTx.addEth)(ethTransactionFee, ethTransactionAmount);
  const hexTransactionTotal = (0, _transactions.sumHexes)(value, hexMinimumTransactionFee);
  return {
    hexTransactionAmount: value,
    fiatTransactionAmount,
    ethTransactionAmount,
    hexMinimumTransactionFee,
    fiatMinimumTransactionFee,
    hexMaximumTransactionFee,
    fiatMaximumTransactionFee,
    ethTransactionFee,
    fiatTransactionTotal,
    ethTransactionTotal,
    hexTransactionTotal,
    gasEstimationObject
  };
};

exports.transactionFeeSelector = transactionFeeSelector;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\custom-gas.js", {".":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../helpers/utils/formatters":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\formatters.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\custom-gas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basicPriceEstimateToETHTotal = basicPriceEstimateToETHTotal;
exports.getAverageEstimate = getAverageEstimate;
exports.getAveragePriceEstimateInHexWEI = getAveragePriceEstimateInHexWEI;
exports.getBasicGasEstimateLoadingStatus = getBasicGasEstimateLoadingStatus;
exports.getCustomGasLimit = getCustomGasLimit;
exports.getCustomGasPrice = getCustomGasPrice;
exports.getDefaultActiveButtonIndex = getDefaultActiveButtonIndex;
exports.getFastPriceEstimate = getFastPriceEstimate;
exports.getFastPriceEstimateInHexWEI = getFastPriceEstimateInHexWEI;
exports.getGasPriceInHexWei = getGasPriceInHexWei;
exports.getIsCustomNetworkGasPriceFetched = getIsCustomNetworkGasPriceFetched;
exports.getIsEthGasPriceFetched = getIsEthGasPriceFetched;
exports.getIsGasEstimatesFetched = getIsGasEstimatesFetched;
exports.getNoGasPriceFetched = getNoGasPriceFetched;
exports.getRenderableConvertedCurrencyFee = getRenderableConvertedCurrencyFee;
exports.getRenderableEthFee = getRenderableEthFee;
exports.getSafeLowEstimate = getSafeLowEstimate;
exports.isCustomPriceExcessive = isCustomPriceExcessive;
exports.isCustomPriceSafe = isCustomPriceSafe;
exports.isCustomPriceSafeForCustomNetwork = isCustomPriceSafeForCustomNetwork;
exports.priceEstimateToWei = priceEstimateToWei;

var _util = require("../../app/scripts/lib/util");

var _conversion = require("../../shared/modules/conversion.utils");

var _confirmTx = require("../helpers/utils/confirm-tx.util");

var _conversions = require("../helpers/utils/conversions.util");

var _formatters = require("../helpers/utils/formatters");

var _send = require("../ducks/send");

var _gas = require("../../shared/constants/gas");

var _metamask = require("../ducks/metamask/metamask");

var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");

var _ = require(".");

function getCustomGasLimit(state) {
  return state.gas.customData.limit;
}

function getCustomGasPrice(state) {
  return state.gas.customData.price;
}

function getBasicGasEstimateLoadingStatus(state) {
  return getIsGasEstimatesFetched(state) === false;
}

function getAveragePriceEstimateInHexWEI(state) {
  const averagePriceEstimate = getAverageEstimate(state);
  return getGasPriceInHexWei(averagePriceEstimate);
}

function getFastPriceEstimateInHexWEI(state) {
  const fastPriceEstimate = getFastPriceEstimate(state);
  return getGasPriceInHexWei(fastPriceEstimate || '0x0');
}

function getDefaultActiveButtonIndex(gasButtonInfo, customGasPriceInHex, gasPrice) {
  return gasButtonInfo.map(({
    priceInHexWei
  }) => priceInHexWei).lastIndexOf((0, _util.addHexPrefix)(customGasPriceInHex || gasPrice));
}

function getSafeLowEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low : null;
}

function getAverageEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.medium : null;
}

function getFastPriceEstimate(state) {
  const gasFeeEstimates = (0, _metamask.getGasFeeEstimates)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.high : null;
}

function isCustomPriceSafe(state) {
  const safeLow = getSafeLowEstimate(state);
  const customGasPrice = getCustomGasPrice(state);

  if (!customGasPrice) {
    return true;
  }

  if (!safeLow) {
    return false;
  }

  const customPriceSafe = (0, _conversion.conversionGreaterThan)({
    value: customGasPrice,
    fromNumericBase: 'hex',
    fromDenomination: 'WEI',
    toDenomination: 'GWEI'
  }, {
    value: safeLow,
    fromNumericBase: 'dec'
  });
  return customPriceSafe;
}

function isCustomPriceSafeForCustomNetwork(state) {
  const estimatedPrice = getAverageEstimate(state);
  const customGasPrice = getCustomGasPrice(state);

  if (!customGasPrice) {
    return true;
  }

  if (!estimatedPrice) {
    return false;
  }

  const customPriceSafe = (0, _conversion.conversionGreaterThan)({
    value: customGasPrice,
    fromNumericBase: 'hex',
    fromDenomination: 'WEI',
    toDenomination: 'GWEI'
  }, {
    value: estimatedPrice,
    fromNumericBase: 'dec'
  });
  return customPriceSafe;
}

function isCustomPriceExcessive(state, checkSend = false) {
  const customPrice = checkSend ? (0, _send.getGasPrice)(state) : getCustomGasPrice(state);
  const fastPrice = getFastPriceEstimate(state);

  if (!customPrice || !fastPrice) {
    return false;
  } // Custom gas should be considered excessive when it is 1.5 times greater than the fastest estimate.


  const customPriceExcessive = (0, _conversion.conversionGreaterThan)({
    value: customPrice,
    fromNumericBase: 'hex',
    fromDenomination: 'WEI',
    toDenomination: 'GWEI'
  }, {
    fromNumericBase: 'dec',
    value: Math.floor(fastPrice * 1.5)
  });
  return customPriceExcessive;
}

function basicPriceEstimateToETHTotal(estimate, gasLimit, numberOfDecimals = 9) {
  return (0, _conversion.conversionUtil)((0, _transactionsControllerUtils.calcGasTotal)(gasLimit, estimate), {
    fromNumericBase: 'hex',
    toNumericBase: 'dec',
    fromDenomination: 'GWEI',
    numberOfDecimals
  });
}

function getRenderableEthFee(estimate, gasLimit, numberOfDecimals = 9, nativeCurrency = 'ETH') {
  const value = (0, _conversion.conversionUtil)(estimate, {
    fromNumericBase: 'dec',
    toNumericBase: 'hex'
  });
  const fee = basicPriceEstimateToETHTotal(value, gasLimit, numberOfDecimals);
  return (0, _formatters.formatETHFee)(fee, nativeCurrency);
}

function getRenderableConvertedCurrencyFee(estimate, gasLimit, convertedCurrency, conversionRate) {
  const value = (0, _conversion.conversionUtil)(estimate, {
    fromNumericBase: 'dec',
    toNumericBase: 'hex'
  });
  const fee = basicPriceEstimateToETHTotal(value, gasLimit);
  const feeInCurrency = (0, _conversions.decEthToConvertedCurrency)(fee, convertedCurrency, conversionRate);
  return (0, _confirmTx.formatCurrency)(feeInCurrency, convertedCurrency);
}

function priceEstimateToWei(priceEstimate) {
  return (0, _conversion.conversionUtil)(priceEstimate, {
    fromNumericBase: 'hex',
    toNumericBase: 'hex',
    fromDenomination: 'GWEI',
    toDenomination: 'WEI',
    numberOfDecimals: 9
  });
}

function getGasPriceInHexWei(price) {
  const value = (0, _conversion.conversionUtil)(price, {
    fromNumericBase: 'dec',
    toNumericBase: 'hex'
  });
  return (0, _util.addHexPrefix)(priceEstimateToWei(value));
}

function getIsEthGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE && (0, _.getIsMainnet)(state);
}

function getIsCustomNetworkGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE && !(0, _.getIsMainnet)(state);
}

function getNoGasPriceFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  return gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE;
}

function getIsGasEstimatesFetched(state) {
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);

  if ((0, _metamask.isEIP1559Network)(state)) {
    return false;
  }

  return gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.NONE;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\first-time-flow.js", {"../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\first-time-flow.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFirstTimeFlowType = void 0;
exports.getFirstTimeFlowTypeRoute = getFirstTimeFlowTypeRoute;
exports.getOnboardingInitiator = void 0;

var _routes = require("../helpers/constants/routes");

function getFirstTimeFlowTypeRoute(state) {
  const {
    firstTimeFlowType
  } = state.metamask;
  let nextRoute;

  if (firstTimeFlowType === 'create') {
    nextRoute = false ? _routes.ONBOARDING_CREATE_PASSWORD_ROUTE : _routes.INITIALIZE_CREATE_PASSWORD_ROUTE;
  } else if (firstTimeFlowType === 'import') {
    nextRoute = false ? _routes.ONBOARDING_IMPORT_WITH_SRP_ROUTE : _routes.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE;
  } else {
    nextRoute = _routes.DEFAULT_ROUTE;
  }

  return nextRoute;
}

const getFirstTimeFlowType = state => {
  return state.metamask.firstTimeFlowType;
};

exports.getFirstTimeFlowType = getFirstTimeFlowType;

const getOnboardingInitiator = state => {
  const {
    onboardingTabs
  } = state.metamask;

  if (!onboardingTabs || Object.keys(onboardingTabs).length !== 1) {
    return null;
  }

  const location = Object.keys(onboardingTabs)[0];
  const tabId = onboardingTabs[location];
  return {
    location,
    tabId
  };
};

exports.getOnboardingInitiator = getOnboardingInitiator;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js", {"./confirm-transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\confirm-transaction.js","./custom-gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\custom-gas.js","./first-time-flow":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\first-time-flow.js","./metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\metametrics.js","./permissions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\permissions.js","./selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","./transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\transactions.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _confirmTransaction = require("./confirm-transaction");

Object.keys(_confirmTransaction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _confirmTransaction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _confirmTransaction[key];
    }
  });
});

var _customGas = require("./custom-gas");

Object.keys(_customGas).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _customGas[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _customGas[key];
    }
  });
});

var _firstTimeFlow = require("./first-time-flow");

Object.keys(_firstTimeFlow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _firstTimeFlow[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _firstTimeFlow[key];
    }
  });
});

var _metametrics = require("./metametrics");

Object.keys(_metametrics).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _metametrics[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _metametrics[key];
    }
  });
});

var _permissions = require("./permissions");

Object.keys(_permissions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _permissions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _permissions[key];
    }
  });
});

var _selectors = require("./selectors");

Object.keys(_selectors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _selectors[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selectors[key];
    }
  });
});

var _transactions = require("./transactions");

Object.keys(_transactions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _transactions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _transactions[key];
    }
  });
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\metametrics.js", {"reselect":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\metametrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectMatchingFragment = exports.selectFragments = exports.selectFragmentBySuccessEvent = exports.selectFragmentById = void 0;

var _reselect = require("reselect");

const selectFragments = state => state.metamask.fragments;

exports.selectFragments = selectFragments;
const selectFragmentBySuccessEvent = (0, _reselect.createSelector)(selectFragments, (_, fragmentOptions) => fragmentOptions, (fragments, fragmentOptions) => {
  if (fragmentOptions.persist) {
    return Object.values(fragments).find(fragment => fragment.successEvent === fragmentOptions.successEvent);
  }

  return undefined;
});
exports.selectFragmentBySuccessEvent = selectFragmentBySuccessEvent;
const selectFragmentById = (0, _reselect.createSelector)(selectFragments, (_, fragmentId) => fragmentId, (fragments, fragmentId) => {
  // A valid existing fragment must exist in state.
  // If these conditions are not meant we will create a new fragment.
  if (fragmentId && fragments !== null && fragments !== void 0 && fragments[fragmentId]) {
    return fragments[fragmentId];
  }

  return undefined;
});
exports.selectFragmentById = selectFragmentById;
const selectMatchingFragment = (0, _reselect.createSelector)((state, params) => selectFragmentBySuccessEvent(state, params.fragmentOptions), (state, params) => selectFragmentById(state, params.existingId), (matchedBySuccessEvent, matchedById) => matchedById !== null && matchedById !== void 0 ? matchedById : matchedBySuccessEvent);
exports.selectMatchingFragment = selectMatchingFragment;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\permissions.js", {".":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../shared/constants/permissions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\permissions.ts"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\permissions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activeTabHasPermissions = activeTabHasPermissions;
exports.getAccountToConnectToActiveTab = getAccountToConnectToActiveTab;
exports.getAddressConnectedSubjectMap = getAddressConnectedSubjectMap;
exports.getConnectedSubjectsForSelectedAddress = getConnectedSubjectsForSelectedAddress;
exports.getFirstPermissionRequest = getFirstPermissionRequest;
exports.getLastConnectedInfo = getLastConnectedInfo;
exports.getOrderedConnectedAccountsForActiveTab = getOrderedConnectedAccountsForActiveTab;
exports.getPermissionSubjects = getPermissionSubjects;
exports.getPermissions = getPermissions;
exports.getPermissionsForActiveTab = getPermissionsForActiveTab;
exports.getPermissionsRequests = getPermissionsRequests;
exports.getPermittedAccounts = getPermittedAccounts;
exports.getPermittedAccountsByOrigin = getPermittedAccountsByOrigin;
exports.getPermittedAccountsForCurrentTab = getPermittedAccountsForCurrentTab;
exports.getSubjectsWithPermission = getSubjectsWithPermission;

var _permissions = require("../../shared/constants/permissions");

var _ = require(".");

// selectors

/**
 * Get the permission subjects object.
 *
 * @param {object} state - The current state.
 * @returns {object} The permissions subjects object.
 */
function getPermissionSubjects(state) {
  return state.metamask.subjects || {};
}
/**
 * Selects the permitted accounts from the eth_accounts permission given state
 * and an origin.
 *
 * @param {object} state - The current state.
 * @param {string} origin - The origin/subject to get the permitted accounts for.
 * @returns {Array<string>} An empty array or an array of accounts.
 */


function getPermittedAccounts(state, origin) {
  return getAccountsFromPermission(getAccountsPermissionFromSubject(subjectSelector(state, origin)));
}
/**
 * Selects the permitted accounts from the eth_accounts permission for the
 * origin of the current tab.
 *
 * @param {object} state - The current state.
 * @returns {Array<string>} An empty array or an array of accounts.
 */


function getPermittedAccountsForCurrentTab(state) {
  return getPermittedAccounts(state, (0, _.getOriginOfCurrentTab)(state));
}
/**
 * Returns a map of permitted accounts by origin for all origins.
 *
 * @param {object} state - The current state.
 * @returns {object} Permitted accounts by origin.
 */


function getPermittedAccountsByOrigin(state) {
  const subjects = getPermissionSubjects(state);
  return Object.keys(subjects).reduce((acc, subjectKey) => {
    const accounts = getAccountsFromSubject(subjects[subjectKey]);

    if (accounts.length > 0) {
      acc[subjectKey] = accounts;
    }

    return acc;
  }, {});
}
/**
 * Returns an array of connected subject objects, with the following properties:
 * - extensionId
 * - key (i.e. origin)
 * - name
 * - icon
 *
 * @param {object} state - The current state.
 * @returns {Array<object>} An array of connected subject objects.
 */


function getConnectedSubjectsForSelectedAddress(state) {
  const {
    selectedAddress
  } = state.metamask;
  const subjects = getPermissionSubjects(state);
  const subjectMetadata = (0, _.getSubjectMetadata)(state);
  const connectedSubjects = [];
  Object.entries(subjects).forEach(([subjectKey, subjectValue]) => {
    const exposedAccounts = getAccountsFromSubject(subjectValue);

    if (!exposedAccounts.includes(selectedAddress)) {
      return;
    }

    const {
      extensionId,
      name,
      iconUrl
    } = subjectMetadata[subjectKey] || {};
    connectedSubjects.push({
      extensionId,
      origin: subjectKey,
      name,
      iconUrl
    });
  });
  return connectedSubjects;
}

function getSubjectsWithPermission(state, permissionName) {
  const subjects = getPermissionSubjects(state);
  const connectedSubjects = [];
  Object.entries(subjects).forEach(([origin, {
    permissions
  }]) => {
    if (permissions[permissionName]) {
      const {
        extensionId,
        name,
        iconUrl
      } = (0, _.getTargetSubjectMetadata)(state, origin) || {};
      connectedSubjects.push({
        extensionId,
        origin,
        name,
        iconUrl
      });
    }
  });
  return connectedSubjects;
}
/**
 * Returns an object mapping addresses to objects mapping origins to connected
 * subject info. Subject info objects have the following properties:
 * - iconUrl
 * - name
 *
 * @param {object} state - The current state.
 * @returns {object} A mapping of addresses to a mapping of origins to
 * connected subject info.
 */


function getAddressConnectedSubjectMap(state) {
  const subjectMetadata = (0, _.getSubjectMetadata)(state);
  const accountsMap = getPermittedAccountsByOrigin(state);
  const addressConnectedIconMap = {};
  Object.keys(accountsMap).forEach(subjectKey => {
    const {
      iconUrl,
      name
    } = subjectMetadata[subjectKey] || {};
    accountsMap[subjectKey].forEach(address => {
      const nameToRender = name || subjectKey;
      addressConnectedIconMap[address] = addressConnectedIconMap[address] ? { ...addressConnectedIconMap[address],
        [subjectKey]: {
          iconUrl,
          name: nameToRender
        }
      } : {
        [subjectKey]: {
          iconUrl,
          name: nameToRender
        }
      };
    });
  });
  return addressConnectedIconMap;
} // selector helpers


function getAccountsFromSubject(subject) {
  return getAccountsFromPermission(getAccountsPermissionFromSubject(subject));
}

function getAccountsPermissionFromSubject(subject = {}) {
  var _subject$permissions;

  return ((_subject$permissions = subject.permissions) === null || _subject$permissions === void 0 ? void 0 : _subject$permissions.eth_accounts) || {};
}

function getAccountsFromPermission(accountsPermission) {
  const accountsCaveat = getAccountsCaveatFromPermission(accountsPermission);
  return accountsCaveat && Array.isArray(accountsCaveat.value) ? accountsCaveat.value : [];
}

function getAccountsCaveatFromPermission(accountsPermission = {}) {
  return Array.isArray(accountsPermission.caveats) && accountsPermission.caveats.find(caveat => caveat.type === _permissions.CaveatTypes.restrictReturnedAccounts);
}

function subjectSelector(state, origin) {
  var _state$metamask$subje;

  return origin && ((_state$metamask$subje = state.metamask.subjects) === null || _state$metamask$subje === void 0 ? void 0 : _state$metamask$subje[origin]);
}

function getAccountToConnectToActiveTab(state) {
  const selectedAddress = (0, _.getSelectedAddress)(state);
  const connectedAccounts = getPermittedAccountsForCurrentTab(state);
  const {
    metamask: {
      identities
    }
  } = state;
  const numberOfAccounts = Object.keys(identities).length;

  if (connectedAccounts.length && connectedAccounts.length !== numberOfAccounts) {
    if (connectedAccounts.findIndex(address => address === selectedAddress) === -1) {
      return identities[selectedAddress];
    }
  }

  return undefined;
}

function getOrderedConnectedAccountsForActiveTab(state) {
  var _permissionHistory$ac, _permissionHistory$ac2;

  const {
    activeTab,
    metamask: {
      permissionHistory
    }
  } = state;
  const permissionHistoryByAccount = // eslint-disable-next-line camelcase
  (_permissionHistory$ac = permissionHistory[activeTab.origin]) === null || _permissionHistory$ac === void 0 ? void 0 : (_permissionHistory$ac2 = _permissionHistory$ac.eth_accounts) === null || _permissionHistory$ac2 === void 0 ? void 0 : _permissionHistory$ac2.accounts;
  const orderedAccounts = (0, _.getMetaMaskAccountsOrdered)(state);
  const connectedAccounts = getPermittedAccountsForCurrentTab(state);
  return orderedAccounts.filter(account => connectedAccounts.includes(account.address)).map(account => ({ ...account,
    lastActive: permissionHistoryByAccount === null || permissionHistoryByAccount === void 0 ? void 0 : permissionHistoryByAccount[account.address]
  })).sort(({
    lastSelected: lastSelectedA
  }, {
    lastSelected: lastSelectedB
  }) => {
    if (lastSelectedA === lastSelectedB) {
      return 0;
    } else if (lastSelectedA === undefined) {
      return 1;
    } else if (lastSelectedB === undefined) {
      return -1;
    }

    return lastSelectedB - lastSelectedA;
  });
}

function getPermissionsForActiveTab(state) {
  var _subjects$activeTab$o;

  const {
    activeTab,
    metamask
  } = state;
  const {
    subjects = {}
  } = metamask;
  return Object.keys(((_subjects$activeTab$o = subjects[activeTab.origin]) === null || _subjects$activeTab$o === void 0 ? void 0 : _subjects$activeTab$o.permissions) || {}).map(parentCapability => {
    return {
      key: parentCapability
    };
  });
}

function activeTabHasPermissions(state) {
  var _subjects$activeTab$o2;

  const {
    activeTab,
    metamask
  } = state;
  const {
    subjects = {}
  } = metamask;
  return Boolean(Object.keys(((_subjects$activeTab$o2 = subjects[activeTab.origin]) === null || _subjects$activeTab$o2 === void 0 ? void 0 : _subjects$activeTab$o2.permissions) || {}).length > 0);
}
/**
 * Get the connected accounts history for all origins.
 *
 * @param {Record<string, unknown>} state - The MetaMask state.
 * @returns {Record<string, { accounts: Record<string, number> }>} An object
 * with account connection histories by origin.
 */


function getLastConnectedInfo(state) {
  const {
    permissionHistory = {}
  } = state.metamask;
  return Object.keys(permissionHistory).reduce((lastConnectedInfo, origin) => {
    if (permissionHistory[origin].eth_accounts) {
      lastConnectedInfo[origin] = JSON.parse(JSON.stringify(permissionHistory[origin].eth_accounts));
    }

    return lastConnectedInfo;
  }, {});
}

function getPermissionsRequests(state) {
  return Object.values(state.metamask.pendingApprovals).filter(({
    type
  }) => type === 'wallet_requestPermissions').map(({
    requestData
  }) => requestData);
}

function getFirstPermissionRequest(state) {
  const requests = getPermissionsRequests(state);
  return requests && requests[0] ? requests[0] : null;
}

function getPermissions(state, origin) {
  var _getPermissionSubject;

  return (_getPermissionSubject = getPermissionSubjects(state)[origin]) === null || _getPermissionSubject === void 0 ? void 0 : _getPermissionSubject.permissions;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js", {"../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../shared/constants/labels":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\labels.js","../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../shared/constants/tokens":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\tokens.js","../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../helpers/utils/moonpay":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\moonpay.js","../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../pages/confirmation/templates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirmation\\templates\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","reselect":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\selectors.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accountsWithSendEtherInfoSelector = accountsWithSendEtherInfoSelector;
exports.checkNetworkAndAccountSupports1559 = checkNetworkAndAccountSupports1559;
exports.checkNetworkOrAccountNotSupports1559 = checkNetworkOrAccountNotSupports1559;
exports.deprecatedGetCurrentNetworkId = deprecatedGetCurrentNetworkId;
exports.doesAddressRequireLedgerHidConnection = doesAddressRequireLedgerHidConnection;
exports.getAccountName = getAccountName;
exports.getAccountType = getAccountType;
exports.getAccountsWithLabels = getAccountsWithLabels;
exports.getAddressBook = getAddressBook;
exports.getAddressBookEntry = getAddressBookEntry;
exports.getAddressBookEntryOrAccountName = getAddressBookEntryOrAccountName;
exports.getAdvancedGasFeeValues = getAdvancedGasFeeValues;
exports.getAdvancedInlineGasShown = getAdvancedInlineGasShown;
exports.getAllAccountsOnNetworkAreEmpty = getAllAccountsOnNetworkAreEmpty;
exports.getAppIsLoading = getAppIsLoading;
exports.getBlockExplorerLinkText = getBlockExplorerLinkText;
exports.getCurrentAccountWithSendEtherInfo = getCurrentAccountWithSendEtherInfo;
exports.getCurrentChainId = getCurrentChainId;
exports.getCurrentCurrency = getCurrentCurrency;
exports.getCurrentEthBalance = getCurrentEthBalance;
exports.getCurrentKeyring = getCurrentKeyring;
exports.getCurrentQRHardwareState = getCurrentQRHardwareState;
exports.getCustomNonceValue = getCustomNonceValue;
exports.getCustomTokenAmount = getCustomTokenAmount;
exports.getDetectedTokensInCurrentNetwork = getDetectedTokensInCurrentNetwork;
exports.getEIP1559V2Enabled = getEIP1559V2Enabled;
exports.getEnsResolutionByAddress = getEnsResolutionByAddress;
exports.getFeatureFlags = getFeatureFlags;
exports.getFrequentRpcListDetail = getFrequentRpcListDetail;
exports.getFullTxData = void 0;
exports.getGasIsLoading = getGasIsLoading;
exports.getHardwareWalletType = getHardwareWalletType;
exports.getInfuraBlocked = getInfuraBlocked;
exports.getIpfsGateway = getIpfsGateway;
exports.getIsAdvancedGasFeeDefault = getIsAdvancedGasFeeDefault;
exports.getIsBuyableChain = getIsBuyableChain;
exports.getIsBuyableCoinbasePayChain = getIsBuyableCoinbasePayChain;
exports.getIsBuyableCoinbasePayToken = getIsBuyableCoinbasePayToken;
exports.getIsBuyableMoonPayChain = getIsBuyableMoonPayChain;
exports.getIsBuyableMoonpayToken = getIsBuyableMoonpayToken;
exports.getIsBuyableTransakChain = getIsBuyableTransakChain;
exports.getIsBuyableTransakToken = getIsBuyableTransakToken;
exports.getIsBuyableWyreChain = getIsBuyableWyreChain;
exports.getIsBuyableWyreToken = getIsBuyableWyreToken;
exports.getIsCustomNetwork = getIsCustomNetwork;
exports.getIsDynamicTokenListAvailable = getIsDynamicTokenListAvailable;
exports.getIsImprovedTokenAllowanceEnabled = getIsImprovedTokenAllowanceEnabled;
exports.getIsMainnet = getIsMainnet;
exports.getIsMultiLayerFeeNetwork = getIsMultiLayerFeeNetwork;
exports.getIsNetworkUsed = getIsNetworkUsed;
exports.getIsNonStandardEthChain = getIsNonStandardEthChain;
exports.getIsOptimism = getIsOptimism;
exports.getIsSwapsChain = getIsSwapsChain;
exports.getIsTestnet = getIsTestnet;
exports.getIsTokenDetectionInactiveOnMainnet = getIsTokenDetectionInactiveOnMainnet;
exports.getIsTokenDetectionSupported = getIsTokenDetectionSupported;
exports.getIstokenDetectionInactiveOnNonMainnetSupportedNetwork = getIstokenDetectionInactiveOnNonMainnetSupportedNetwork;
exports.getKnownMethodData = getKnownMethodData;
exports.getMetaMaskAccountsOrdered = exports.getMetaMaskAccountsConnected = exports.getMetaMaskAccounts = void 0;
exports.getMetaMaskAccountsRaw = getMetaMaskAccountsRaw;
exports.getMetaMaskCachedBalances = getMetaMaskCachedBalances;
exports.getMetaMaskIdentities = getMetaMaskIdentities;
exports.getMetaMaskKeyrings = getMetaMaskKeyrings;
exports.getMetadataContractName = getMetadataContractName;
exports.getMetricsNetworkIdentifier = getMetricsNetworkIdentifier;
exports.getNativeCurrencyImage = getNativeCurrencyImage;
exports.getNetworkIdentifier = getNetworkIdentifier;
exports.getNetworkSupportsSettingGasFees = getNetworkSupportsSettingGasFees;
exports.getNetworksTabSelectedRpcUrl = getNetworksTabSelectedRpcUrl;
exports.getNewCollectibleAddedMessage = getNewCollectibleAddedMessage;
exports.getNewNetworkAdded = getNewNetworkAdded;
exports.getNewTokensImported = getNewTokensImported;
exports.getNextSuggestedNonce = getNextSuggestedNonce;
exports.getNumberOfAccounts = getNumberOfAccounts;
exports.getNumberOfTokens = getNumberOfTokens;
exports.getOpenSeaEnabled = getOpenSeaEnabled;
exports.getOriginOfCurrentTab = getOriginOfCurrentTab;
exports.getParticipateInMetaMetrics = getParticipateInMetaMetrics;
exports.getPreferences = getPreferences;
exports.getProvider = getProvider;
exports.getRpcPrefsForCurrentProvider = getRpcPrefsForCurrentProvider;
exports.getSelectedAccount = getSelectedAccount;
exports.getSelectedAccountCachedBalance = getSelectedAccountCachedBalance;
exports.getSelectedAddress = getSelectedAddress;
exports.getSelectedIdentity = getSelectedIdentity;
exports.getShouldHideZeroBalanceTokens = getShouldHideZeroBalanceTokens;
exports.getShouldShowFiat = getShouldShowFiat;
exports.getShouldShowSeedPhraseReminder = getShouldShowSeedPhraseReminder;
exports.getShowPortfolioTooltip = getShowPortfolioTooltip;
exports.getShowRecoveryPhraseReminder = getShowRecoveryPhraseReminder;
exports.getShowTestNetworks = getShowTestNetworks;
exports.getShowWhatsNewPopup = getShowWhatsNewPopup;
exports.getSortedAnnouncementsToShow = getSortedAnnouncementsToShow;
exports.getSubjectMetadata = getSubjectMetadata;
exports.getSuggestedAssets = getSuggestedAssets;
exports.getSwapsDefaultToken = getSwapsDefaultToken;
exports.getTargetAccount = getTargetAccount;
exports.getTargetAccountWithSendEtherInfo = getTargetAccountWithSendEtherInfo;
exports.getTargetSubjectMetadata = getTargetSubjectMetadata;
exports.getTheme = getTheme;
exports.getTokenExchangeRates = exports.getTokenDetectionSupportNetworkByChainId = void 0;
exports.getTokenList = getTokenList;
exports.getTotalUnapprovedCount = getTotalUnapprovedCount;
exports.getTotalUnapprovedMessagesCount = getTotalUnapprovedMessagesCount;
exports.getTxData = exports.getTransaction = void 0;
exports.getUSDConversionRate = getUSDConversionRate;
exports.getUnapprovedConfirmations = getUnapprovedConfirmations;
exports.getUnapprovedTemplatedConfirmations = getUnapprovedTemplatedConfirmations;
exports.getUnapprovedTransactions = exports.getUnapprovedTransaction = void 0;
exports.getUseCollectibleDetection = getUseCollectibleDetection;
exports.getUseNonceField = getUseNonceField;
exports.getUseTokenDetection = getUseTokenDetection;
exports.getWeb3ShimUsageStateForOrigin = getWeb3ShimUsageStateForOrigin;
exports.hasUnsignedQRHardwareMessage = hasUnsignedQRHardwareMessage;
exports.hasUnsignedQRHardwareTransaction = hasUnsignedQRHardwareTransaction;
exports.isBalanceCached = isBalanceCached;
exports.isCurrentProviderCustom = isCurrentProviderCustom;
exports.isEIP1559Account = isEIP1559Account;
exports.isHardwareWallet = isHardwareWallet;
exports.isNetworkLoading = isNetworkLoading;

var _reselect = require("reselect");

var _lodash = require("lodash");

var _util = require("../../app/scripts/lib/util");

var _network = require("../../shared/constants/network");

var _hardwareWallets = require("../../shared/constants/hardware-wallets");

var _app = require("../../shared/constants/app");

var _labels = require("../../shared/constants/labels");

var _swaps = require("../../shared/constants/swaps");

var _util2 = require("../helpers/utils/util");

var _conversions = require("../helpers/utils/conversions.util");

var _templates = require("../pages/confirmation/templates");

var _tokens = require("../../shared/constants/tokens");

var _hexstringUtils = require("../../shared/modules/hexstring-utils");

var _time = require("../../shared/constants/time");

var _metamask = require("../ducks/metamask/metamask");

var _app2 = require("../ducks/app/app");

var _stringUtils = require("../../shared/modules/string-utils");

var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");

var _moonpay = require("../helpers/utils/moonpay");

var _transaction = require("../../shared/constants/transaction");

/**
 * One of the only remaining valid uses of selecting the network subkey of the
 * metamask state tree is to determine if the network is currently 'loading'.
 *
 * This will be used for all cases where this state key is accessed only for that
 * purpose.
 *
 * @param {object} state - redux state object
 */
function isNetworkLoading(state) {
  return state.metamask.network === 'loading';
}

function getNetworkIdentifier(state) {
  const {
    metamask: {
      provider: {
        type,
        nickname,
        rpcUrl
      }
    }
  } = state;
  return nickname || rpcUrl || type;
}

function getMetricsNetworkIdentifier(state) {
  const {
    provider
  } = state.metamask;
  return provider.type === _network.NETWORK_TYPES.RPC ? provider.rpcUrl : provider.type;
}

function getCurrentChainId(state) {
  const {
    chainId
  } = state.metamask.provider;
  return chainId;
}

function isCurrentProviderCustom(state) {
  const provider = getProvider(state);
  return provider.type === _network.NETWORK_TYPES.RPC && !Object.values(_network.CHAIN_IDS).includes(provider.chainId);
}

function getCurrentQRHardwareState(state) {
  const {
    qrHardware
  } = state.metamask;
  return qrHardware || {};
}

function hasUnsignedQRHardwareTransaction(state) {
  const {
    txParams
  } = state.confirmTransaction.txData;

  if (!txParams) {
    return false;
  }

  const {
    from
  } = txParams;
  const {
    keyrings
  } = state.metamask;
  const qrKeyring = keyrings.find(kr => kr.type === _hardwareWallets.KEYRING_TYPES.QR);

  if (!qrKeyring) {
    return false;
  }

  return Boolean(qrKeyring.accounts.find(account => account.toLowerCase() === from.toLowerCase()));
}

function hasUnsignedQRHardwareMessage(state) {
  const {
    type,
    msgParams
  } = state.confirmTransaction.txData;

  if (!type || !msgParams) {
    return false;
  }

  const {
    from
  } = msgParams;
  const {
    keyrings
  } = state.metamask;
  const qrKeyring = keyrings.find(kr => kr.type === _hardwareWallets.KEYRING_TYPES.QR);

  if (!qrKeyring) {
    return false;
  }

  switch (type) {
    case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
    case _app.MESSAGE_TYPE.ETH_SIGN:
    case _app.MESSAGE_TYPE.PERSONAL_SIGN:
      return Boolean(qrKeyring.accounts.find(account => account.toLowerCase() === from.toLowerCase()));

    default:
      return false;
  }
}

function getCurrentKeyring(state) {
  const identity = getSelectedIdentity(state);

  if (!identity) {
    return null;
  }

  const keyring = (0, _metamask.findKeyringForAddress)(state, identity.address);
  return keyring;
}

function getParticipateInMetaMetrics(state) {
  return Boolean(state.metamask.participateInMetaMetrics);
}

function isEIP1559Account() {
  return true;
}
/**
 * The function returns true if network and account details are fetched and
 * both of them support EIP-1559.
 *
 * @param state
 */


function checkNetworkAndAccountSupports1559(state) {
  const networkSupports1559 = (0, _metamask.isEIP1559Network)(state);
  const accountSupports1559 = isEIP1559Account(state);
  return networkSupports1559 && accountSupports1559;
}
/**
 * The function returns true if network and account details are fetched and
 * either of them do not support EIP-1559.
 *
 * @param state
 */


function checkNetworkOrAccountNotSupports1559(state) {
  const networkNotSupports1559 = (0, _metamask.isNotEIP1559Network)(state);
  const accountSupports1559 = isEIP1559Account(state);
  return networkNotSupports1559 || accountSupports1559 === false;
}
/**
 * Checks if the current wallet is a hardware wallet.
 *
 * @param {object} state
 * @returns {boolean}
 */


function isHardwareWallet(state) {
  var _keyring$type;

  const keyring = getCurrentKeyring(state);
  return Boolean(keyring === null || keyring === void 0 ? void 0 : (_keyring$type = keyring.type) === null || _keyring$type === void 0 ? void 0 : _keyring$type.includes('Hardware'));
}
/**
 * Get a HW wallet type, e.g. "Ledger Hardware"
 *
 * @param {object} state
 * @returns {string | undefined}
 */


function getHardwareWalletType(state) {
  const keyring = getCurrentKeyring(state);
  return isHardwareWallet(state) ? keyring.type : undefined;
}

function getAccountType(state) {
  const currentKeyring = getCurrentKeyring(state);
  const type = currentKeyring && currentKeyring.type;

  switch (type) {
    case _hardwareWallets.KEYRING_TYPES.TREZOR:
    case _hardwareWallets.KEYRING_TYPES.LEDGER:
    case _hardwareWallets.KEYRING_TYPES.LATTICE:
      return 'hardware';

    case 'Simple Key Pair':
      return 'imported';

    default:
      return 'default';
  }
}
/**
 * get the currently selected networkId which will be 'loading' when the
 * network changes. The network id should not be used in most cases,
 * instead use chainId in most situations. There are a limited number of
 * use cases to use this method still, such as when comparing transaction
 * metadata that predates the switch to using chainId.
 *
 * @deprecated - use getCurrentChainId instead
 * @param {object} state - redux state object
 */


function deprecatedGetCurrentNetworkId(state) {
  return state.metamask.network;
}

const getMetaMaskAccounts = (0, _reselect.createSelector)(getMetaMaskAccountsRaw, getMetaMaskCachedBalances, (currentAccounts, cachedBalances) => Object.entries(currentAccounts).reduce((selectedAccounts, [accountID, account]) => {
  if (account.balance === null || account.balance === undefined) {
    return { ...selectedAccounts,
      [accountID]: { ...account,
        balance: cachedBalances && cachedBalances[accountID]
      }
    };
  }

  return { ...selectedAccounts,
    [accountID]: account
  };
}, {}));
exports.getMetaMaskAccounts = getMetaMaskAccounts;

function getSelectedAddress(state) {
  return state.metamask.selectedAddress;
}

function getSelectedIdentity(state) {
  const selectedAddress = getSelectedAddress(state);
  const {
    identities
  } = state.metamask;
  return identities[selectedAddress];
}

function getNumberOfAccounts(state) {
  return Object.keys(state.metamask.accounts).length;
}

function getNumberOfTokens(state) {
  const {
    tokens
  } = state.metamask;
  return tokens ? tokens.length : 0;
}

function getMetaMaskKeyrings(state) {
  return state.metamask.keyrings;
}

function getMetaMaskIdentities(state) {
  return state.metamask.identities;
}

function getMetaMaskAccountsRaw(state) {
  return state.metamask.accounts;
}

function getMetaMaskCachedBalances(state) {
  var _state$metamask$cache;

  const chainId = getCurrentChainId(state); // Fallback to fetching cached balances from network id
  // this can eventually be removed

  const network = deprecatedGetCurrentNetworkId(state);
  return (_state$metamask$cache = state.metamask.cachedBalances[chainId]) !== null && _state$metamask$cache !== void 0 ? _state$metamask$cache : state.metamask.cachedBalances[network];
}
/**
 * Get ordered (by keyrings) accounts with identity and balance
 */


const getMetaMaskAccountsOrdered = (0, _reselect.createSelector)(getMetaMaskKeyrings, getMetaMaskIdentities, getMetaMaskAccounts, (keyrings, identities, accounts) => keyrings.reduce((list, keyring) => list.concat(keyring.accounts), []).filter(address => Boolean(identities[address])).map(address => ({ ...identities[address],
  ...accounts[address]
})));
exports.getMetaMaskAccountsOrdered = getMetaMaskAccountsOrdered;
const getMetaMaskAccountsConnected = (0, _reselect.createSelector)(getMetaMaskAccountsOrdered, connectedAccounts => connectedAccounts.map(({
  address
}) => address.toLowerCase()));
exports.getMetaMaskAccountsConnected = getMetaMaskAccountsConnected;

function isBalanceCached(state) {
  const selectedAccountBalance = state.metamask.accounts[getSelectedAddress(state)].balance;
  const cachedBalance = getSelectedAccountCachedBalance(state);
  return Boolean(!selectedAccountBalance && cachedBalance);
}

function getSelectedAccountCachedBalance(state) {
  const cachedBalances = getMetaMaskCachedBalances(state);
  const selectedAddress = getSelectedAddress(state);
  return cachedBalances && cachedBalances[selectedAddress];
}

function getSelectedAccount(state) {
  const accounts = getMetaMaskAccounts(state);
  const selectedAddress = getSelectedAddress(state);
  return accounts[selectedAddress];
}

function getTargetAccount(state, targetAddress) {
  const accounts = getMetaMaskAccounts(state);
  return accounts[targetAddress];
}

const getTokenExchangeRates = state => state.metamask.contractExchangeRates;

exports.getTokenExchangeRates = getTokenExchangeRates;

function getAddressBook(state) {
  const chainId = getCurrentChainId(state);

  if (!state.metamask.addressBook[chainId]) {
    return [];
  }

  return Object.values(state.metamask.addressBook[chainId]);
}

function getEnsResolutionByAddress(state, address) {
  return state.metamask.ensResolutionsByAddress[address] || '';
}

function getAddressBookEntry(state, address) {
  const addressBook = getAddressBook(state);
  const entry = addressBook.find(contact => (0, _stringUtils.isEqualCaseInsensitive)(contact.address, (0, _hexstringUtils.toChecksumHexAddress)(address)));
  return entry;
}

function getAddressBookEntryOrAccountName(state, address) {
  const entry = getAddressBookEntry(state, address) || Object.values(state.metamask.identities).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, (0, _hexstringUtils.toChecksumHexAddress)(address)));
  return entry && entry.name !== '' ? entry.name : address;
}

function getAccountName(identities, address) {
  const entry = Object.values(identities).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, (0, _hexstringUtils.toChecksumHexAddress)(address)));
  return entry && entry.name !== '' ? entry.name : '';
}

function getMetadataContractName(state, address) {
  const tokenList = getTokenList(state);
  const entry = Object.values(tokenList).find(identity => (0, _stringUtils.isEqualCaseInsensitive)(identity.address, (0, _hexstringUtils.toChecksumHexAddress)(address)));
  return entry && entry.name !== '' ? entry.name : '';
}

function accountsWithSendEtherInfoSelector(state) {
  const accounts = getMetaMaskAccounts(state);
  const identities = getMetaMaskIdentities(state);
  const accountsWithSendEtherInfo = Object.entries(identities).map(([key, identity]) => {
    return { ...identity,
      ...accounts[key]
    };
  });
  return accountsWithSendEtherInfo;
}

function getAccountsWithLabels(state) {
  return getMetaMaskAccountsOrdered(state).map(({
    address,
    name,
    balance
  }) => ({
    address,
    addressLabel: `${name.length < _labels.TRUNCATED_NAME_CHAR_LIMIT ? name : `${name.slice(0, _labels.TRUNCATED_NAME_CHAR_LIMIT - 1)}...`} (${(0, _util2.shortenAddress)(address)})`,
    label: name,
    balance
  }));
}

function getCurrentAccountWithSendEtherInfo(state) {
  const currentAddress = getSelectedAddress(state);
  const accounts = accountsWithSendEtherInfoSelector(state);
  return (0, _util2.getAccountByAddress)(accounts, currentAddress);
}

function getTargetAccountWithSendEtherInfo(state, targetAddress) {
  const accounts = accountsWithSendEtherInfoSelector(state);
  return (0, _util2.getAccountByAddress)(accounts, targetAddress);
}

function getCurrentEthBalance(state) {
  var _getCurrentAccountWit;

  return (_getCurrentAccountWit = getCurrentAccountWithSendEtherInfo(state)) === null || _getCurrentAccountWit === void 0 ? void 0 : _getCurrentAccountWit.balance;
}

function getGasIsLoading(state) {
  return state.appState.gasIsLoading;
}

function getAppIsLoading(state) {
  return state.appState.isLoading;
}

function getCurrentCurrency(state) {
  return state.metamask.currentCurrency;
}

function getTotalUnapprovedCount(state) {
  const {
    unapprovedMsgCount = 0,
    unapprovedPersonalMsgCount = 0,
    unapprovedDecryptMsgCount = 0,
    unapprovedEncryptionPublicKeyMsgCount = 0,
    unapprovedTypedMessagesCount = 0,
    pendingApprovalCount = 0
  } = state.metamask;
  return unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedDecryptMsgCount + unapprovedEncryptionPublicKeyMsgCount + unapprovedTypedMessagesCount + getUnapprovedTxCount(state) + pendingApprovalCount + getSuggestedAssetCount(state);
}

function getTotalUnapprovedMessagesCount(state) {
  const {
    unapprovedMsgCount = 0,
    unapprovedPersonalMsgCount = 0,
    unapprovedDecryptMsgCount = 0,
    unapprovedEncryptionPublicKeyMsgCount = 0,
    unapprovedTypedMessagesCount = 0
  } = state.metamask;
  return unapprovedMsgCount + unapprovedPersonalMsgCount + unapprovedDecryptMsgCount + unapprovedEncryptionPublicKeyMsgCount + unapprovedTypedMessagesCount;
}

function getUnapprovedTxCount(state) {
  const {
    unapprovedTxs = {}
  } = state.metamask;
  return Object.keys(unapprovedTxs).length;
}

function getUnapprovedConfirmations(state) {
  const {
    pendingApprovals
  } = state.metamask;
  return Object.values(pendingApprovals);
}

function getUnapprovedTemplatedConfirmations(state) {
  const unapprovedConfirmations = getUnapprovedConfirmations(state);
  return unapprovedConfirmations.filter(approval => _templates.TEMPLATED_CONFIRMATION_MESSAGE_TYPES.includes(approval.type));
}

function getSuggestedAssetCount(state) {
  const {
    suggestedAssets = []
  } = state.metamask;
  return suggestedAssets.length;
}

function getSuggestedAssets(state) {
  return state.metamask.suggestedAssets;
}

function getIsMainnet(state) {
  const chainId = getCurrentChainId(state);
  return chainId === _network.CHAIN_IDS.MAINNET;
}

function getIsTestnet(state) {
  const chainId = getCurrentChainId(state);
  return _network.TEST_CHAINS.includes(chainId);
}

function getIsNonStandardEthChain(state) {
  return !(getIsMainnet(state) || getIsTestnet(state) || false);
}

function getPreferences({
  metamask
}) {
  return metamask.preferences;
}

function getShowTestNetworks(state) {
  const {
    showTestNetworks
  } = getPreferences(state);
  return Boolean(showTestNetworks);
}

function getShouldShowFiat(state) {
  const isMainNet = getIsMainnet(state);
  const isCustomNetwork = getIsCustomNetwork(state);
  const conversionRate = (0, _metamask.getConversionRate)(state);
  const {
    showFiatInTestnets
  } = getPreferences(state);
  return Boolean((isMainNet || isCustomNetwork || showFiatInTestnets) && conversionRate);
}

function getShouldHideZeroBalanceTokens(state) {
  const {
    hideZeroBalanceTokens
  } = getPreferences(state);
  return hideZeroBalanceTokens;
}

function getAdvancedInlineGasShown(state) {
  return Boolean(state.metamask.featureFlags.advancedInlineGas);
}

function getUseNonceField(state) {
  return Boolean(state.metamask.useNonceField);
}

function getCustomNonceValue(state) {
  return String(state.metamask.customNonceValue);
}

function getSubjectMetadata(state) {
  return state.metamask.subjectMetadata;
}

function getTargetSubjectMetadata(state, origin) {
  const metadata = getSubjectMetadata(state)[origin];
  return metadata;
}

function getRpcPrefsForCurrentProvider(state) {
  const {
    frequentRpcListDetail,
    provider
  } = state.metamask;
  const selectRpcInfo = frequentRpcListDetail.find(rpcInfo => rpcInfo.rpcUrl === provider.rpcUrl);
  const {
    rpcPrefs = {}
  } = selectRpcInfo || {};
  return rpcPrefs;
}

function getKnownMethodData(state, data) {
  if (!data) {
    return null;
  }

  const prefixedData = (0, _util.addHexPrefix)(data);
  const fourBytePrefix = prefixedData.slice(0, 10);
  const {
    knownMethodData
  } = state.metamask;
  return knownMethodData && knownMethodData[fourBytePrefix];
}

function getFeatureFlags(state) {
  return state.metamask.featureFlags;
}

function getOriginOfCurrentTab(state) {
  return state.activeTab.origin;
}

function getIpfsGateway(state) {
  return state.metamask.ipfsGateway;
}

function getInfuraBlocked(state) {
  return Boolean(state.metamask.infuraBlocked);
}

function getUSDConversionRate(state) {
  return state.metamask.usdConversionRate;
}

function getWeb3ShimUsageStateForOrigin(state, origin) {
  return state.metamask.web3ShimUsageOrigins[origin];
}
/**
 * @typedef {object} SwapsEthToken
 * @property {string} symbol - The symbol for ETH, namely "ETH"
 * @property {string} name - The name of the ETH currency, "Ether"
 * @property {string} address - A substitute address for the metaswap-api to
 * recognize the ETH token
 * @property {string} decimals - The number of ETH decimals, i.e. 18
 * @property {string} balance - The user's ETH balance in decimal wei, with a
 * precision of 4 decimal places
 * @property {string} string - The user's ETH balance in decimal ETH
 */

/**
 * Swaps related code uses token objects for various purposes. These objects
 * always have the following properties: `symbol`, `name`, `address`, and
 * `decimals`.
 *
 * When available for the current account, the objects can have `balance` and
 * `string` properties.
 * `balance` is the users token balance in decimal values, denominated in the
 * minimal token units (according to its decimals).
 * `string` is the token balance in a readable format, ready for rendering.
 *
 * Swaps treats the selected chain's currency as a token, and we use the token constants
 * in the SWAPS_CHAINID_DEFAULT_TOKEN_MAP to set the standard properties for
 * the token. The getSwapsDefaultToken selector extends that object with
 * `balance` and `string` values of the same type as in regular ERC-20 token
 * objects, per the above description.
 *
 * @param {object} state - the redux state object
 * @returns {SwapsEthToken} The token object representation of the currently
 * selected account's ETH balance, as expected by the Swaps API.
 */


function getSwapsDefaultToken(state) {
  const selectedAccount = getSelectedAccount(state);
  const {
    balance
  } = selectedAccount;
  const chainId = getCurrentChainId(state);
  const defaultTokenObject = _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId];
  return { ...defaultTokenObject,
    balance: (0, _metamaskControllerUtils.hexToDecimal)(balance),
    string: (0, _conversions.getValueFromWeiHex)({
      value: balance,
      numberOfDecimals: 4,
      toDenomination: 'ETH'
    })
  };
}

function getIsSwapsChain(state) {
  const chainId = getCurrentChainId(state);
  const isNotDevelopment = "development" !== 'development' && "development" !== 'testing';
  return isNotDevelopment ? _swaps.ALLOWED_PROD_SWAPS_CHAIN_IDS.includes(chainId) : _swaps.ALLOWED_DEV_SWAPS_CHAIN_IDS.includes(chainId);
}

function getIsBuyableChain(state) {
  const chainId = getCurrentChainId(state);
  return Object.keys(_network.BUYABLE_CHAINS_MAP).includes(chainId);
}

function getIsBuyableTransakChain(state) {
  var _BUYABLE_CHAINS_MAP$c;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c.transakCurrencies);
}

function getIsBuyableTransakToken(state, symbol) {
  var _BUYABLE_CHAINS_MAP$c2, _BUYABLE_CHAINS_MAP$c3;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c2 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c2 === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c3 = _BUYABLE_CHAINS_MAP$c2.transakCurrencies) === null || _BUYABLE_CHAINS_MAP$c3 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c3.includes(symbol));
}

function getIsBuyableMoonpayToken(state, symbol) {
  var _BUYABLE_CHAINS_MAP$c4, _BUYABLE_CHAINS_MAP$c5, _BUYABLE_CHAINS_MAP$c6;

  const chainId = getCurrentChainId(state);

  const _symbol = (0, _moonpay.formatMoonpaySymbol)(symbol, chainId);

  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c4 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c4 === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c5 = _BUYABLE_CHAINS_MAP$c4.moonPay) === null || _BUYABLE_CHAINS_MAP$c5 === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c6 = _BUYABLE_CHAINS_MAP$c5.showOnlyCurrencies) === null || _BUYABLE_CHAINS_MAP$c6 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c6.includes(_symbol));
}

function getIsBuyableWyreToken(state, symbol) {
  var _BUYABLE_CHAINS_MAP$c7, _BUYABLE_CHAINS_MAP$c8;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c7 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c7 === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c8 = _BUYABLE_CHAINS_MAP$c7.wyre) === null || _BUYABLE_CHAINS_MAP$c8 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c8.currencies.includes(symbol));
}

function getIsBuyableMoonPayChain(state) {
  var _BUYABLE_CHAINS_MAP$c9;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c9 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c9 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c9.moonPay);
}

function getIsBuyableWyreChain(state) {
  var _BUYABLE_CHAINS_MAP$c10;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c10 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c10 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c10.wyre);
}

function getIsBuyableCoinbasePayChain(state) {
  var _BUYABLE_CHAINS_MAP$c11;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c11 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c11 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c11.coinbasePayCurrencies);
}

function getIsBuyableCoinbasePayToken(state, symbol) {
  var _BUYABLE_CHAINS_MAP$c12, _BUYABLE_CHAINS_MAP$c13;

  const chainId = getCurrentChainId(state);
  return Boolean(_network.BUYABLE_CHAINS_MAP === null || _network.BUYABLE_CHAINS_MAP === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c12 = _network.BUYABLE_CHAINS_MAP[chainId]) === null || _BUYABLE_CHAINS_MAP$c12 === void 0 ? void 0 : (_BUYABLE_CHAINS_MAP$c13 = _BUYABLE_CHAINS_MAP$c12.coinbasePayCurrencies) === null || _BUYABLE_CHAINS_MAP$c13 === void 0 ? void 0 : _BUYABLE_CHAINS_MAP$c13.includes(symbol));
}

function getNativeCurrencyImage(state) {
  var _getNativeCurrency;

  const nativeCurrency = (_getNativeCurrency = (0, _metamask.getNativeCurrency)(state)) === null || _getNativeCurrency === void 0 ? void 0 : _getNativeCurrency.toUpperCase();
  return _network.NATIVE_CURRENCY_TOKEN_IMAGE_MAP[nativeCurrency];
}

function getNextSuggestedNonce(state) {
  return Number(state.metamask.nextNonce);
}

function getShowWhatsNewPopup(state) {
  return state.appState.showWhatsNewPopup;
}

const createDeepEqualSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _lodash.isEqual);

const getUnapprovedTransactions = state => state.metamask.unapprovedTxs;

exports.getUnapprovedTransactions = getUnapprovedTransactions;

const getCurrentNetworkTransactionList = state => state.metamask.currentNetworkTxList;

const getTxData = state => state.confirmTransaction.txData;

exports.getTxData = getTxData;
const getUnapprovedTransaction = createDeepEqualSelector(getUnapprovedTransactions, (_, transactionId) => transactionId, (unapprovedTxs, transactionId) => {
  return Object.values(unapprovedTxs).find(({
    id
  }) => id === transactionId) || {};
});
exports.getUnapprovedTransaction = getUnapprovedTransaction;
const getTransaction = createDeepEqualSelector(getCurrentNetworkTransactionList, (_, transactionId) => transactionId, (unapprovedTxs, transactionId) => {
  return Object.values(unapprovedTxs).find(({
    id
  }) => id === transactionId) || {};
});
exports.getTransaction = getTransaction;
const getFullTxData = createDeepEqualSelector(getTxData, (state, transactionId, status) => {
  if (status === _transaction.TRANSACTION_STATUSES.UNAPPROVED) {
    return getUnapprovedTransaction(state, transactionId);
  }

  return getTransaction(state, transactionId);
}, (_state, _transactionId, _status, customTxParamsData) => customTxParamsData, (txData, transaction, _status, customTxParamsData) => {
  let fullTxData = { ...txData,
    ...transaction
  };

  if (transaction && transaction.simulationFails) {
    txData.simulationFails = transaction.simulationFails;
  }

  if (customTxParamsData) {
    fullTxData = { ...fullTxData,
      txParams: { ...fullTxData.txParams,
        data: customTxParamsData
      }
    };
  }

  return fullTxData;
});
/**
 * Get an object of announcement IDs and if they are allowed or not.
 *
 * @param {object} state
 * @returns {object}
 */

exports.getFullTxData = getFullTxData;

function getAllowedAnnouncementIds(state) {
  const currentKeyring = getCurrentKeyring(state);
  const currentKeyringIsLedger = (currentKeyring === null || currentKeyring === void 0 ? void 0 : currentKeyring.type) === _hardwareWallets.KEYRING_TYPES.LEDGER;
  const supportsWebHid = window.navigator.hid !== undefined;

  const currentlyUsingLedgerLive = (0, _metamask.getLedgerTransportType)(state) === _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE;

  return {
    1: false,
    2: false,
    3: false,
    4: false,
    5: false,
    6: false,
    7: false,
    8: supportsWebHid && currentKeyringIsLedger && currentlyUsingLedgerLive,
    9: false,
    10: false,
    11: false,
    12: false,
    13: false,
    14: false,
    15: false,
    16: true
  };
}
/**
 * @typedef {object} Announcement
 * @property {number} id - A unique identifier for the announcement
 * @property {string} date - A date in YYYY-MM-DD format, identifying when the notification was first committed
 */

/**
 * Announcements are managed by the announcement controller and referenced by
 * `state.metamask.announcements`. This function returns a list of announcements
 * the can be shown to the user. This list includes all announcements that do not
 * have a truthy `isShown` property.
 *
 * The returned announcements are sorted by date.
 *
 * @param {object} state - the redux state object
 * @returns {Announcement[]} An array of announcements that can be shown to the user
 */


function getSortedAnnouncementsToShow(state) {
  const announcements = Object.values(state.metamask.announcements);
  const allowedAnnouncementIds = getAllowedAnnouncementIds(state);
  const announcementsToShow = announcements.filter(announcement => !announcement.isShown && allowedAnnouncementIds[announcement.id]);
  const announcementsSortedByDate = announcementsToShow.sort((a, b) => new Date(b.date) - new Date(a.date));
  return announcementsSortedByDate;
}

function getShowRecoveryPhraseReminder(state) {
  const {
    recoveryPhraseReminderLastShown,
    recoveryPhraseReminderHasBeenShown
  } = state.metamask;
  const currentTime = new Date().getTime();
  const frequency = recoveryPhraseReminderHasBeenShown ? _time.DAY * 90 : _time.DAY * 2;
  return currentTime - recoveryPhraseReminderLastShown >= frequency;
}

function getShowPortfolioTooltip(state) {
  return state.metamask.showPortfolioTooltip;
}
/**
 * To get the useTokenDetection flag which determines whether a static or dynamic token list is used
 *
 * @param {*} state
 * @returns Boolean
 */


function getUseTokenDetection(state) {
  return Boolean(state.metamask.useTokenDetection);
}
/**
 * To get the useCollectibleDetection flag which determines whether we autodetect NFTs
 *
 * @param {*} state
 * @returns Boolean
 */


function getUseCollectibleDetection(state) {
  return Boolean(state.metamask.useCollectibleDetection);
}
/**
 * To get the openSeaEnabled flag which determines whether we use OpenSea's API
 *
 * @param {*} state
 * @returns Boolean
 */


function getOpenSeaEnabled(state) {
  return Boolean(state.metamask.openSeaEnabled);
}
/**
 * To get the `theme` value which determines which theme is selected
 *
 * @param {*} state
 * @returns Boolean
 */


function getTheme(state) {
  return state.metamask.theme;
}
/**
 * To retrieve the token list for use throughout the UI. Will return the remotely fetched list
 * from the tokens controller if token detection is enabled, or the static list if not.
 *
 * @param {*} state
 * @returns {object}
 */


function getTokenList(state) {
  const isTokenDetectionInactiveOnMainnet = getIsTokenDetectionInactiveOnMainnet(state);
  const caseInSensitiveTokenList = isTokenDetectionInactiveOnMainnet ? _tokens.STATIC_MAINNET_TOKEN_LIST : state.metamask.tokenList;
  return caseInSensitiveTokenList;
}

function doesAddressRequireLedgerHidConnection(state, address) {
  const addressIsLedger = (0, _metamask.isAddressLedger)(state, address);

  const transportTypePreferenceIsWebHID = (0, _metamask.getLedgerTransportType)(state) === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID;

  const webHidIsNotConnected = (0, _app2.getLedgerWebHidConnectedStatus)(state) !== _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED;

  const ledgerTransportStatus = (0, _app2.getLedgerTransportStatus)(state);
  const transportIsNotSuccessfullyCreated = ledgerTransportStatus !== _hardwareWallets.TRANSPORT_STATES.VERIFIED;
  return addressIsLedger && transportTypePreferenceIsWebHID && (webHidIsNotConnected || transportIsNotSuccessfullyCreated);
}

function getNewCollectibleAddedMessage(state) {
  return state.appState.newCollectibleAddedMessage;
}
/**
 * To retrieve the name of the new Network added using add network form
 *
 * @param {*} state
 * @returns string
 */


function getNewNetworkAdded(state) {
  return state.appState.newNetworkAdded;
}

function getNetworksTabSelectedRpcUrl(state) {
  return state.appState.networksTabSelectedRpcUrl;
}

function getProvider(state) {
  return state.metamask.provider;
}

function getFrequentRpcListDetail(state) {
  return state.metamask.frequentRpcListDetail;
}

function getIsOptimism(state) {
  return getCurrentChainId(state) === _network.CHAIN_IDS.OPTIMISM || getCurrentChainId(state) === _network.CHAIN_IDS.OPTIMISM_TESTNET;
}

function getNetworkSupportsSettingGasFees(state) {
  return !getIsOptimism(state);
}

function getIsMultiLayerFeeNetwork(state) {
  return getIsOptimism(state);
}
/**
 *  To retrieve the maxBaseFee and priotitFee teh user has set as default
 *
 * @param {*} state
 * @returns Boolean
 */


function getAdvancedGasFeeValues(state) {
  return state.metamask.advancedGasFee;
}

function getEIP1559V2Enabled(state) {
  return state.metamask.eip1559V2Enabled;
}
/**
 *  To check if the user has set advanced gas fee settings as default with a non empty  maxBaseFee and priotityFee.
 *
 * @param {*} state
 * @returns Boolean
 */


function getIsAdvancedGasFeeDefault(state) {
  const {
    advancedGasFee
  } = state.metamask;
  return Boolean(advancedGasFee === null || advancedGasFee === void 0 ? void 0 : advancedGasFee.maxBaseFee) && Boolean(advancedGasFee === null || advancedGasFee === void 0 ? void 0 : advancedGasFee.priorityFee);
}
/**
 * To get the name of the network that support token detection based in chainId.
 *
 * @param state
 * @returns string e.g. ethereum, bsc or polygon
 */


const getTokenDetectionSupportNetworkByChainId = state => {
  const chainId = getCurrentChainId(state);

  switch (chainId) {
    case _network.CHAIN_IDS.MAINNET:
      return _network.MAINNET_DISPLAY_NAME;

    case _network.CHAIN_IDS.BSC:
      return _network.BSC_DISPLAY_NAME;

    case _network.CHAIN_IDS.POLYGON:
      return _network.POLYGON_DISPLAY_NAME;

    case _network.CHAIN_IDS.AVALANCHE:
      return _network.AVALANCHE_DISPLAY_NAME;

    default:
      return '';
  }
};
/**
 * To check if teh chainId supports token detection ,
 * currently it returns true for Ethereum Mainnet, Polygon, BSC and Avalanche
 *
 * @param {*} state
 * @returns Boolean
 */


exports.getTokenDetectionSupportNetworkByChainId = getTokenDetectionSupportNetworkByChainId;

function getIsDynamicTokenListAvailable(state) {
  const chainId = getCurrentChainId(state);
  return [_network.CHAIN_IDS.MAINNET, _network.CHAIN_IDS.BSC, _network.CHAIN_IDS.POLYGON, _network.CHAIN_IDS.AVALANCHE].includes(chainId);
}
/**
 * To retrieve the list of tokens detected and saved on the state to detectedToken object.
 *
 * @param {*} state
 * @returns list of token objects
 */


function getDetectedTokensInCurrentNetwork(state) {
  return state.metamask.detectedTokens;
}
/**
 * To fetch the name of the tokens that are imported from tokens found page
 *
 * @param {*} state
 * @returns
 */


function getNewTokensImported(state) {
  return state.appState.newTokensImported;
}
/**
 * To check if the token detection is OFF and the network is Mainnet
 * so that the user can skip third party token api fetch
 * and use the static tokenlist from contract-metadata
 *
 * @param {*} state
 * @returns Boolean
 */


function getIsTokenDetectionInactiveOnMainnet(state) {
  const isMainnet = getIsMainnet(state);
  const useTokenDetection = getUseTokenDetection(state);
  return !useTokenDetection && isMainnet;
}
/**
 * To check for the chainId that supports token detection ,
 * currently it returns true for Ethereum Mainnet, Polygon, BSC and Avalanche
 *
 * @param {*} state
 * @returns Boolean
 */


function getIsTokenDetectionSupported(state) {
  const useTokenDetection = getUseTokenDetection(state);
  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);
  return useTokenDetection && isDynamicTokenListAvailable;
}
/**
 * To check if the token detection is OFF for the token detection supported networks
 * and the network is not Mainnet
 *
 * @param {*} state
 * @returns Boolean
 */


function getIstokenDetectionInactiveOnNonMainnetSupportedNetwork(state) {
  const useTokenDetection = getUseTokenDetection(state);
  const isMainnet = getIsMainnet(state);
  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);
  return isDynamicTokenListAvailable && !useTokenDetection && !isMainnet;
}
/**
 * To get the `improvedTokenAllowanceEnabled` value which determines whether we use the improved token allowance
 *
 * @param {*} state
 * @returns Boolean
 */


function getIsImprovedTokenAllowanceEnabled(state) {
  return state.metamask.improvedTokenAllowanceEnabled;
}

function getIsCustomNetwork(state) {
  const chainId = getCurrentChainId(state);
  return !_network.CHAIN_ID_TO_RPC_URL_MAP[chainId];
}

function getBlockExplorerLinkText(state, accountDetailsModalComponent = false) {
  const isCustomNetwork = getIsCustomNetwork(state);
  const rpcPrefs = getRpcPrefsForCurrentProvider(state);
  let blockExplorerLinkText = {
    firstPart: 'addBlockExplorer',
    secondPart: ''
  };

  if (rpcPrefs.blockExplorerUrl) {
    blockExplorerLinkText = accountDetailsModalComponent ? {
      firstPart: 'blockExplorerView',
      secondPart: (0, _util2.getURLHostName)(rpcPrefs.blockExplorerUrl)
    } : {
      firstPart: 'viewinExplorer',
      secondPart: 'blockExplorerAccountAction'
    };
  } else if (isCustomNetwork === false) {
    blockExplorerLinkText = accountDetailsModalComponent ? {
      firstPart: 'etherscanViewOn',
      secondPart: ''
    } : {
      firstPart: 'viewOnEtherscan',
      secondPart: 'blockExplorerAccountAction'
    };
  }

  return blockExplorerLinkText;
}

function getIsNetworkUsed(state) {
  const chainId = getCurrentChainId(state);
  const {
    usedNetworks
  } = state.metamask;
  return Boolean(usedNetworks[chainId]);
}

function getAllAccountsOnNetworkAreEmpty(state) {
  var _getMetaMaskCachedBal;

  const balances = (_getMetaMaskCachedBal = getMetaMaskCachedBalances(state)) !== null && _getMetaMaskCachedBal !== void 0 ? _getMetaMaskCachedBal : {};
  const hasNoNativeFundsOnAnyAccounts = Object.values(balances).every(balance => balance === '0x0' || balance === '0x00');
  const hasNoTokens = getNumberOfTokens(state) === 0;
  return hasNoNativeFundsOnAnyAccounts && hasNoTokens;
}

function getShouldShowSeedPhraseReminder(state) {
  var _getCurrentEthBalance;

  const {
    tokens,
    seedPhraseBackedUp,
    dismissSeedBackUpReminder
  } = state.metamask;
  const accountBalance = (_getCurrentEthBalance = getCurrentEthBalance(state)) !== null && _getCurrentEthBalance !== void 0 ? _getCurrentEthBalance : 0;
  return seedPhraseBackedUp === false && (parseInt(accountBalance, 16) > 0 || tokens.length > 0) && dismissSeedBackUpReminder === false;
}

function getCustomTokenAmount(state) {
  return state.appState.customTokenAmount;
}


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\transactions.js", {"../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../helpers/constants/transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../helpers/utils/tx-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js","./selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","reselect":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\selectors\transactions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unapprovedTypedMessagesSelector = exports.unapprovedPersonalMsgsSelector = exports.unapprovedMsgsSelector = exports.unapprovedMessagesSelector = exports.unapprovedEncryptionPublicKeyMsgsSelector = exports.unapprovedDecryptMsgsSelector = exports.transactionsSelector = exports.transactionSubSelector = exports.submittedPendingTransactionsSelector = exports.smartTransactionsListSelector = exports.selectedAddressTxListSelector = exports.nonceSortedTransactionsSelector = exports.nonceSortedPendingTransactionsSelector = exports.nonceSortedCompletedTransactionsSelector = exports.incomingTxListSelector = exports.currentNetworkTxListSelector = void 0;

var _reselect = require("reselect");

var _transactions = require("../helpers/constants/transactions");

var _txHelper = _interopRequireDefault(require("../helpers/utils/tx-helper"));

var _transaction = require("../../shared/constants/transaction");

var _transaction2 = require("../../shared/modules/transaction.utils");

var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");

var _selectors = require("./selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INVALID_INITIAL_TRANSACTION_TYPES = [_transaction.TRANSACTION_TYPES.CANCEL, _transaction.TRANSACTION_TYPES.RETRY];

const incomingTxListSelector = state => {
  const {
    showIncomingTransactions
  } = state.metamask.featureFlags;

  if (!showIncomingTransactions) {
    return [];
  }

  const {
    network,
    provider: {
      chainId
    }
  } = state.metamask;
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  return Object.values(state.metamask.incomingTransactions).filter(tx => tx.txParams.to === selectedAddress && (0, _transaction2.transactionMatchesNetwork)(tx, chainId, network));
};

exports.incomingTxListSelector = incomingTxListSelector;

const unapprovedMsgsSelector = state => state.metamask.unapprovedMsgs;

exports.unapprovedMsgsSelector = unapprovedMsgsSelector;

const currentNetworkTxListSelector = state => state.metamask.currentNetworkTxList;

exports.currentNetworkTxListSelector = currentNetworkTxListSelector;

const unapprovedPersonalMsgsSelector = state => state.metamask.unapprovedPersonalMsgs;

exports.unapprovedPersonalMsgsSelector = unapprovedPersonalMsgsSelector;

const unapprovedDecryptMsgsSelector = state => state.metamask.unapprovedDecryptMsgs;

exports.unapprovedDecryptMsgsSelector = unapprovedDecryptMsgsSelector;

const unapprovedEncryptionPublicKeyMsgsSelector = state => state.metamask.unapprovedEncryptionPublicKeyMsgs;

exports.unapprovedEncryptionPublicKeyMsgsSelector = unapprovedEncryptionPublicKeyMsgsSelector;

const unapprovedTypedMessagesSelector = state => state.metamask.unapprovedTypedMessages;

exports.unapprovedTypedMessagesSelector = unapprovedTypedMessagesSelector;

const smartTransactionsListSelector = state => {
  var _state$metamask$smart, _state$metamask$smart2, _state$metamask$smart3;

  return (_state$metamask$smart = state.metamask.smartTransactionsState) === null || _state$metamask$smart === void 0 ? void 0 : (_state$metamask$smart2 = _state$metamask$smart.smartTransactions) === null || _state$metamask$smart2 === void 0 ? void 0 : (_state$metamask$smart3 = _state$metamask$smart2[(0, _selectors.getCurrentChainId)(state)]) === null || _state$metamask$smart3 === void 0 ? void 0 : _state$metamask$smart3.filter(stx => !stx.confirmed).map(stx => {
    var _stx$status;

    return { ...stx,
      transactionType: _transaction.TRANSACTION_TYPES.SMART,
      status: (_stx$status = stx.status) !== null && _stx$status !== void 0 && _stx$status.startsWith('cancelled') ? _transaction.SMART_TRANSACTION_STATUSES.CANCELLED : stx.status
    };
  });
};

exports.smartTransactionsListSelector = smartTransactionsListSelector;
const selectedAddressTxListSelector = (0, _reselect.createSelector)(_selectors.getSelectedAddress, currentNetworkTxListSelector, smartTransactionsListSelector, (selectedAddress, transactions = [], smTransactions = []) => {
  return transactions.filter(({
    txParams
  }) => txParams.from === selectedAddress).concat(smTransactions);
});
exports.selectedAddressTxListSelector = selectedAddressTxListSelector;
const unapprovedMessagesSelector = (0, _reselect.createSelector)(unapprovedMsgsSelector, unapprovedPersonalMsgsSelector, unapprovedDecryptMsgsSelector, unapprovedEncryptionPublicKeyMsgsSelector, unapprovedTypedMessagesSelector, _selectors.deprecatedGetCurrentNetworkId, _selectors.getCurrentChainId, (unapprovedMsgs = {}, unapprovedPersonalMsgs = {}, unapprovedDecryptMsgs = {}, unapprovedEncryptionPublicKeyMsgs = {}, unapprovedTypedMessages = {}, network, chainId) => (0, _txHelper.default)({}, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedDecryptMsgs, unapprovedEncryptionPublicKeyMsgs, unapprovedTypedMessages, network, chainId) || []);
exports.unapprovedMessagesSelector = unapprovedMessagesSelector;
const transactionSubSelector = (0, _reselect.createSelector)(unapprovedMessagesSelector, incomingTxListSelector, (unapprovedMessages = [], incomingTxList = []) => {
  return unapprovedMessages.concat(incomingTxList);
});
exports.transactionSubSelector = transactionSubSelector;
const transactionsSelector = (0, _reselect.createSelector)(transactionSubSelector, selectedAddressTxListSelector, (subSelectorTxList = [], selectedAddressTxList = []) => {
  const txsToRender = selectedAddressTxList.concat(subSelectorTxList);
  return txsToRender.sort((a, b) => b.time - a.time);
});
/**
 * @name insertOrderedNonce
 * @private
 * @description Inserts (mutates) a nonce into an array of ordered nonces, sorted in ascending
 * order.
 * @param {string[]} nonces - Array of nonce strings in hex
 * @param {string} nonceToInsert - Nonce string in hex to be inserted into the array of nonces.
 */

exports.transactionsSelector = transactionsSelector;

const insertOrderedNonce = (nonces, nonceToInsert) => {
  let insertIndex = nonces.length;

  for (let i = 0; i < nonces.length; i++) {
    const nonce = nonces[i];

    if (Number((0, _metamaskControllerUtils.hexToDecimal)(nonce)) > Number((0, _metamaskControllerUtils.hexToDecimal)(nonceToInsert))) {
      insertIndex = i;
      break;
    }
  }

  nonces.splice(insertIndex, 0, nonceToInsert);
};
/**
 * @name insertTransactionByTime
 * @private
 * @description Inserts (mutates) a transaction object into an array of ordered transactions, sorted
 * in ascending order by time.
 * @param {object[]} transactions - Array of transaction objects.
 * @param {object} transaction - Transaction object to be inserted into the array of transactions.
 */


const insertTransactionByTime = (transactions, transaction) => {
  const {
    time
  } = transaction;
  let insertIndex = transactions.length;

  for (let i = 0; i < transactions.length; i++) {
    const tx = transactions[i];

    if (tx.time > time) {
      insertIndex = i;
      break;
    }
  }

  transactions.splice(insertIndex, 0, transaction);
};
/**
 * Contains transactions and properties associated with those transactions of the same nonce.
 *
 * @typedef {object} transactionGroup
 * @property {string} nonce - The nonce that the transactions within this transactionGroup share.
 * @property {object[]} transactions - An array of transaction (txMeta) objects.
 * @property {object} initialTransaction - The transaction (txMeta) with the lowest "time".
 * @property {object} primaryTransaction - Either the latest transaction or the confirmed
 * transaction.
 * @property {boolean} hasRetried - True if a transaction in the group was a retry transaction.
 * @property {boolean} hasCancelled - True if a transaction in the group was a cancel transaction.
 */

/**
 * @name insertTransactionGroupByTime
 * @private
 * @description Inserts (mutates) a transactionGroup object into an array of ordered
 * transactionGroups, sorted in ascending order by nonce.
 * @param {transactionGroup[]} transactionGroups - Array of transactionGroup objects.
 * @param {transactionGroup} transactionGroup - transactionGroup object to be inserted into the
 * array of transactionGroups.
 */


const insertTransactionGroupByTime = (transactionGroups, transactionGroup) => {
  const {
    primaryTransaction: {
      time: groupToInsertTime
    } = {}
  } = transactionGroup;
  let insertIndex = transactionGroups.length;

  for (let i = 0; i < transactionGroups.length; i++) {
    const txGroup = transactionGroups[i];
    const {
      primaryTransaction: {
        time
      } = {}
    } = txGroup;

    if (time > groupToInsertTime) {
      insertIndex = i;
      break;
    }
  }

  transactionGroups.splice(insertIndex, 0, transactionGroup);
};
/**
 * @name mergeNonNonceTransactionGroups
 * @private
 * @description Inserts (mutates) transactionGroups that are not to be ordered by nonce into an array
 * of nonce-ordered transactionGroups by time.
 * @param {transactionGroup[]} orderedTransactionGroups - Array of transactionGroups ordered by
 * nonce.
 * @param {transactionGroup[]} nonNonceTransactionGroups - Array of transactionGroups not intended to be ordered by nonce,
 * but intended to be ordered by timestamp
 */


const mergeNonNonceTransactionGroups = (orderedTransactionGroups, nonNonceTransactionGroups) => {
  nonNonceTransactionGroups.forEach(transactionGroup => {
    insertTransactionGroupByTime(orderedTransactionGroups, transactionGroup);
  });
};
/**
 * @name nonceSortedTransactionsSelector
 * @description Returns an array of transactionGroups sorted by nonce in ascending order.
 * @returns {transactionGroup[]}
 */


const nonceSortedTransactionsSelector = (0, _reselect.createSelector)(transactionsSelector, (transactions = []) => {
  const unapprovedTransactionGroups = [];
  const incomingTransactionGroups = [];
  const orderedNonces = [];
  const nonceToTransactionsMap = {};
  transactions.forEach(transaction => {
    const {
      txParams: {
        nonce
      } = {},
      status,
      type,
      time: txTime,
      txReceipt
    } = transaction;

    if (typeof nonce === 'undefined' || type === _transaction.TRANSACTION_TYPES.INCOMING) {
      const transactionGroup = {
        transactions: [transaction],
        initialTransaction: transaction,
        primaryTransaction: transaction,
        hasRetried: false,
        hasCancelled: false,
        nonce
      };

      if (type === _transaction.TRANSACTION_TYPES.INCOMING) {
        incomingTransactionGroups.push(transactionGroup);
      } else {
        insertTransactionGroupByTime(unapprovedTransactionGroups, transactionGroup);
      }
    } else if (nonce in nonceToTransactionsMap) {
      var _nonceProps$primaryTr, _nonceProps$primaryTr2, _nonceProps$initialTr;

      const nonceProps = nonceToTransactionsMap[nonce];
      insertTransactionByTime(nonceProps.transactions, transaction);
      const {
        primaryTransaction: {
          time: primaryTxTime = 0
        } = {},
        initialTransaction: {
          time: initialTxTime = 0
        } = {}
      } = nonceProps; // Current Transaction Logic Cases
      // --------------------------------------------------------------------
      // Current transaction: The transaction we are examining in this loop.
      // Each iteration should be in time order, but that is not guaranteed.
      // --------------------------------------------------------------------

      const currentTransaction = {
        // A on chain failure means the current transaction was submitted and
        // considered for inclusion in a block but something prevented it
        // from being included, such as slippage on gas prices and conversion
        // when doing a swap. These transactions will have a '0x0' value in
        // the txReceipt.status field.
        isOnChainFailure: (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === '0x0',
        // Another type of failure is a "off chain" or "network" failure,
        // where the error occurs on the JSON RPC call to the network client
        // (Like Infura). These transactions are never broadcast for
        // inclusion and the nonce associated with them is not consumed. When
        // this occurs  the next transaction will have the same nonce as the
        // current, failed transaction. A failed on chain transaction will
        // not have the FAILED status although it should (future TODO: add a
        // new FAILED_ON_CHAIN) status. I use the word "Ephemeral" here
        // because a failed transaction that does not get broadcast is not
        // known outside of the user's local MetaMask and the nonce
        // associated will be applied to the next.
        isEphemeral: status === _transaction.TRANSACTION_STATUSES.FAILED && (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) !== '0x0',
        // We never want to use a speed up (retry) or cancel as the initial
        // transaction in a group, regardless of time order. This is because
        // useTransactionDisplayData cannot parse a retry or cancel because
        // it lacks information on whether its a simple send, token transfer,
        // etc.
        isRetryOrCancel: INVALID_INITIAL_TRANSACTION_TYPES.includes(type),
        // Primary transactions usually are the latest transaction by time,
        // but not always. This value shows whether this transaction occurred
        // after the current primary.
        occurredAfterPrimary: txTime > primaryTxTime,
        // Priority Statuses are those that are ones either already confirmed
        // on chain, submitted to the network, or waiting for user approval.
        // These statuses typically indicate a transaction that needs to have
        // its status reflected in the UI.
        hasPriorityStatus: status in _transactions.PRIORITY_STATUS_HASH,
        // A confirmed transaction is the most valid transaction status to
        // display because no other transaction of the same nonce can have a
        // more valid status.
        isConfirmed: status === _transaction.TRANSACTION_STATUSES.CONFIRMED,
        // Initial transactions usually are the earliest transaction by time,
        // but not always. THis value shows whether this transaction occurred
        // before the current initial.
        occurredBeforeInitial: txTime < initialTxTime,
        // We only allow users to retry the transaction in certain scenarios
        // to help shield from expensive operations and other unwanted side
        // effects. This value is used to determine if the entire transaction
        // group should be marked as having had a retry.
        isValidRetry: type === _transaction.TRANSACTION_TYPES.RETRY && (status in _transactions.PRIORITY_STATUS_HASH || status === _transaction.TRANSACTION_STATUSES.DROPPED),
        // We only allow users to cancel the transaction in certain scenarios
        // to help shield from expensive operations and other unwanted side
        // effects. This value is used to determine if the entire transaction
        // group should be marked as having had a cancel.
        isValidCancel: type === _transaction.TRANSACTION_TYPES.CANCEL && (status in _transactions.PRIORITY_STATUS_HASH || status === _transaction.TRANSACTION_STATUSES.DROPPED)
      }; // We should never assign a retry or cancel transaction as the initial,
      // likewise an ephemeral transaction should not be initial.

      currentTransaction.eligibleForInitial = !currentTransaction.isRetryOrCancel && !currentTransaction.isEphemeral; // If a transaction failed on chain or was confirmed then it should
      // always be the primary because no other transaction is more valid.

      currentTransaction.shouldBePrimary = currentTransaction.isConfirmed || currentTransaction.isOnChainFailure; // Primary Transaction Logic Cases
      // --------------------------------------------------------------------
      // Primary transaction: The transaction for any given nonce which has
      // the most valid status on the network.
      // Example:
      // 1. Submit transaction A
      // 2. Speed up Transaction A.
      // 3. This creates a new Transaction (B) with higher gas params.
      // 4. Transaction A and Transaction B are both submitted.
      // 5. We expect Transaction B to be the most valid transaction to use
      //    for the status of the transaction group because it has higher
      //    gas params and should be included first.
      // The following logic variables are used for edge cases that protect
      // against UI bugs when this breaks down.

      const previousPrimaryTransaction = {
        // As we loop through the transactions in state we may temporarily
        // assign a primaryTransaction that is an "Ephemeral" transaction,
        // which is one that failed before being broadcast for inclusion in a
        // block. When this happens, and we have another transaction to
        // consider in a nonce group, we should use the new transaction.
        isEphemeral: nonceProps.primaryTransaction.status === _transaction.TRANSACTION_STATUSES.FAILED && ((_nonceProps$primaryTr = nonceProps.primaryTransaction) === null || _nonceProps$primaryTr === void 0 ? void 0 : (_nonceProps$primaryTr2 = _nonceProps$primaryTr.txReceipt) === null || _nonceProps$primaryTr2 === void 0 ? void 0 : _nonceProps$primaryTr2.status) !== '0x0'
      }; // Initial Transaction Logic Cases
      // --------------------------------------------------------------------
      // Initial Transaction: The transaciton that most likely represents the
      // user's intent when creating/approving the transaction. In most cases
      // this is the first transaction of a nonce group, by time, but this
      // breaks down in the case of users with the advanced setting enabled
      // to set their own nonces manually. In that case a user may submit two
      // completely different transactions of the same nonce and they will be
      // bundled together by this selector as the same activity entry.

      const previousInitialTransaction = {
        // As we loop through the transactions in state we may temporarily
        // assign a initialTransaction that is an "Ephemeral" transaction,
        // which is one that failed before being broadcast for inclusion in a
        // block. When this happens, and we have another transaction to
        // consider in a nonce group, we should use the new transaction.
        isEphemeral: nonceProps.initialTransaction.status === _transaction.TRANSACTION_STATUSES.FAILED && ((_nonceProps$initialTr = nonceProps.initialTransaction.txReceipt) === null || _nonceProps$initialTr === void 0 ? void 0 : _nonceProps$initialTr.status) !== '0x0'
      }; // Check the above logic cases and assign a new primaryTransaction if
      // appropriate

      if (currentTransaction.shouldBePrimary || previousPrimaryTransaction.isEphemeral || currentTransaction.occurredAfterPrimary && currentTransaction.hasPriorityStatus) {
        nonceProps.primaryTransaction = transaction;
      } // Check the above logic cases and assign a new initialTransaction if
      // appropriate


      if (currentTransaction.occurredBeforeInitial && currentTransaction.eligibleForInitial || previousInitialTransaction.isEphemeral && currentTransaction.eligibleForInitial) {
        nonceProps.initialTransaction = transaction;
      }

      if (currentTransaction.isValidRetry) {
        nonceProps.hasRetried = true;
      }

      if (currentTransaction.isValidCancel) {
        nonceProps.hasCancelled = true;
      }
    } else {
      nonceToTransactionsMap[nonce] = {
        nonce,
        transactions: [transaction],
        initialTransaction: transaction,
        primaryTransaction: transaction,
        hasRetried: transaction.type === _transaction.TRANSACTION_TYPES.RETRY && (transaction.status in _transactions.PRIORITY_STATUS_HASH || transaction.status === _transaction.TRANSACTION_STATUSES.DROPPED),
        hasCancelled: transaction.type === _transaction.TRANSACTION_TYPES.CANCEL && (transaction.status in _transactions.PRIORITY_STATUS_HASH || transaction.status === _transaction.TRANSACTION_STATUSES.DROPPED)
      };
      insertOrderedNonce(orderedNonces, nonce);
    }
  });
  const orderedTransactionGroups = orderedNonces.map(nonce => nonceToTransactionsMap[nonce]);
  mergeNonNonceTransactionGroups(orderedTransactionGroups, incomingTransactionGroups);
  return unapprovedTransactionGroups.concat(orderedTransactionGroups).map(txGroup => {
    var _txGroup$initialTrans;

    // In the case that we have a cancel or retry as initial transaction
    // and there is a valid transaction in the group, we should reassign
    // the other valid transaction as initial. In this case validity of the
    // transaction is expanded to include off-chain failures because it is
    // valid to retry those with higher gas prices.
    if (INVALID_INITIAL_TRANSACTION_TYPES.includes((_txGroup$initialTrans = txGroup.initialTransaction) === null || _txGroup$initialTrans === void 0 ? void 0 : _txGroup$initialTrans.type)) {
      const nonRetryOrCancel = txGroup.transactions.find(tx => !INVALID_INITIAL_TRANSACTION_TYPES.includes(tx.type));

      if (nonRetryOrCancel) {
        return { ...txGroup,
          initialTransaction: nonRetryOrCancel
        };
      }
    }

    return txGroup;
  });
});
/**
 * @name nonceSortedPendingTransactionsSelector
 * @description Returns an array of transactionGroups where transactions are still pending sorted by
 * nonce in descending order.
 * @returns {transactionGroup[]}
 */

exports.nonceSortedTransactionsSelector = nonceSortedTransactionsSelector;
const nonceSortedPendingTransactionsSelector = (0, _reselect.createSelector)(nonceSortedTransactionsSelector, (transactions = []) => transactions.filter(({
  primaryTransaction
}) => primaryTransaction.status in _transactions.PENDING_STATUS_HASH));
/**
 * @name nonceSortedCompletedTransactionsSelector
 * @description Returns an array of transactionGroups where transactions are confirmed sorted by
 * nonce in descending order.
 * @returns {transactionGroup[]}
 */

exports.nonceSortedPendingTransactionsSelector = nonceSortedPendingTransactionsSelector;
const nonceSortedCompletedTransactionsSelector = (0, _reselect.createSelector)(nonceSortedTransactionsSelector, (transactions = []) => transactions.filter(({
  primaryTransaction
}) => !(primaryTransaction.status in _transactions.PENDING_STATUS_HASH)).reverse());
exports.nonceSortedCompletedTransactionsSelector = nonceSortedCompletedTransactionsSelector;
const submittedPendingTransactionsSelector = (0, _reselect.createSelector)(transactionsSelector, (transactions = []) => transactions.filter(transaction => transaction.status === _transaction.TRANSACTION_STATUSES.SUBMITTED));
exports.submittedPendingTransactionsSelector = submittedPendingTransactionsSelector;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\action-queue\\index.js", {"../../../shared/modules/mv3.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\mv3.utils.js","pify":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\pify\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\store\action-queue\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._setBackgroundConnection = _setBackgroundConnection;
exports.callBackgroundMethod = void 0;
exports.dropQueue = dropQueue;
exports.generateActionId = void 0;
exports.submitRequestToBackground = submitRequestToBackground;

var _pify = _interopRequireDefault(require("pify"));

var _mv = require("../../../shared/modules/mv3.utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// // A simplified pify maybe?
// function pify(apiObject) {
//   return Object.keys(apiObject).reduce((promisifiedAPI, key) => {
//     if (apiObject[key].apply) { // depending on our browser support we might use a nicer check for functions here
//       promisifiedAPI[key] = function (...args) {
//         return new Promise((resolve, reject) => {
//           return apiObject[key](
//             ...args,
//             (err, result) => {
//               if (err) {
//                 reject(err);
//               } else {
//                 resolve(result);
//               }
//             },
//           );
//         });
//       };
//     }
//     return promisifiedAPI;
//   }, {});
// }
let background = null;
let promisifiedBackground = null;
const actionRetryQueue = [];

const generateActionId = () => Date.now() + Math.random();

exports.generateActionId = generateActionId;

function failQueue() {
  actionRetryQueue.forEach(({
    reject
  }) => reject(Error('Background operation cancelled while waiting for connection.')));
}
/**
 * Drops the entire actions queue. Rejects all actions in the queue unless silently==true
 * Does not affect the single action that is currently being processed.
 *
 * @param {boolean} [silently]
 */


function dropQueue(silently) {
  if (!silently) {
    failQueue();
  }

  actionRetryQueue.length = 0;
} // add action to queue


const executeActionOrAddToRetryQueue = item => {
  if (actionRetryQueue.some(act => act.actionId === item.actionId)) {
    return;
  }

  if (background.connectionStream.readable) {
    executeAction({
      action: item,
      disconnectSideeffect: () => actionRetryQueue.push(item)
    });
  } else {
    actionRetryQueue.push(item);
  }
};
/**
 * Promise-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 *  the queue is then immediately processed if background connection is available.
 *  On completion (successful or error) the action is removed from the retry queue.
 *
 * @param {string} method - name of the background method
 * @param {Array} [args] - arguments to that method, if any
 * @param {any} [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue waiting for a retry.
 * @returns {Promise}
 */


function submitRequestToBackground(method, args = [], actionId = generateActionId() // current date is not guaranteed to be unique
) {
  if (_mv.isManifestV3) {
    return new Promise((resolve, reject) => {
      executeActionOrAddToRetryQueue({
        actionId,
        request: {
          method,
          args
        },
        resolve,
        reject
      });
    });
  }

  return promisifiedBackground[method](...args);
}
/**
 * Callback-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 *  the queue is then immediately processed if background connection is available.
 *  On completion (successful or error) the action is removed from the retry queue.
 *
 * @param {string} method - name of the background method
 * @param {Array} [args] - arguments to that method, if any
 * @param callback - Node style (error, result) callback for finishing the operation
 * @param {any} [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue.
 */


const callBackgroundMethod = (method, args = [], callback, actionId = generateActionId() // current date is not guaranteed to be unique
) => {
  if (_mv.isManifestV3) {
    const resolve = value => callback(null, value);

    const reject = err => callback(err);

    executeActionOrAddToRetryQueue({
      actionId,
      request: {
        method,
        args
      },
      resolve,
      reject
    });
  } else {
    background[method](...args, callback);
  }
};

exports.callBackgroundMethod = callBackgroundMethod;

async function executeAction({
  action,
  disconnectSideeffect
}) {
  const {
    request: {
      method,
      args
    },
    resolve,
    reject
  } = action;

  try {
    resolve(await promisifiedBackground[method](...args));
  } catch (err) {
    if (background.DisconnectError && // necessary to not break compatibility with background stubs or non-default implementations
    err instanceof background.DisconnectError) {
      disconnectSideeffect(action);
    } else {
      reject(err);
    }
  }
}

let processingQueue = false; // Clears list of pending action in actionRetryQueue
// The results of background calls are wired up to the original promises that's been returned
// The first method on the queue gets called synchronously to make testing and reasoning about
//  a single request to an open connection easier.

async function processActionRetryQueue() {
  if (processingQueue) {
    return;
  }

  processingQueue = true;

  try {
    while (background.connectionStream.readable && actionRetryQueue.length > 0) {
      // If background disconnects and fails the action, the next one will not be taken off the queue.
      // Retrying an action that failed because of connection loss while it was processing is not supported.
      const item = actionRetryQueue.shift();
      await executeAction({
        action: item,
        disconnectSideeffect: () => actionRetryQueue.unshift(item)
      });
    }
  } catch (e) {
    // error in the queue mechanism itself, the action was malformed
    console.error(e);
  }

  processingQueue = false;
}
/**
 * Sets/replaces the background connection reference
 * Under MV3 it also triggers queue processing if the new background is connected
 *
 * @param {*} backgroundConnection
 */


async function _setBackgroundConnection(backgroundConnection) {
  background = backgroundConnection;
  promisifiedBackground = (0, _pify.default)(background);

  if (_mv.isManifestV3) {
    if (processingQueue) {
      console.warn('_setBackgroundConnection called while a queue was processing and not disconnected yet');
    } // Process all actions collected while connection stream was not available.


    processActionRetryQueue();
  }
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\store\actionConstants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_TRANSACTION_PARAMS = exports.UPDATE_PREFERENCES = exports.UPDATE_METAMASK_STATE = exports.UPDATE_FEATURE_FLAGS = exports.UPDATE_CUSTOM_NONCE = exports.UNLOCK_SUCCEEDED = exports.UNLOCK_IN_PROGRESS = exports.UNLOCK_FAILED = exports.TRANSACTION_ERROR = exports.TOGGLE_GAS_LOADING_ANIMATION = exports.TOGGLE_CURRENCY_INPUT_SWITCH = exports.TOGGLE_ACCOUNT_MENU = exports.SHOW_SEND_TOKEN_PAGE = exports.SHOW_PRIVATE_KEY = exports.SHOW_LOADING = exports.SHOW_CONF_TX_PAGE = exports.SHOW_ACCOUNT_DETAIL = exports.SHOW_ACCOUNTS_PAGE = exports.SET_WEBHID_CONNECTED_STATUS = exports.SET_USE_NONCEFIELD = exports.SET_USE_BLOCKIE = exports.SET_SMART_TRANSACTIONS_ERROR = exports.SET_SELECTED_SETTINGS_RPC_URL = exports.SET_RPC_TARGET = exports.SET_REQUEST_ACCOUNT_TABS = exports.SET_PROVIDER_TYPE = exports.SET_PENDING_TOKENS = exports.SET_PARTICIPATE_IN_METAMETRICS = exports.SET_OPEN_METAMASK_TAB_IDS = exports.SET_NEXT_NONCE = exports.SET_NEW_TOKENS_IMPORTED = exports.SET_NEW_NETWORK_ADDED = exports.SET_NEW_CUSTOM_NETWORK_ADDED = exports.SET_NEW_COLLECTIBLE_ADDED_MESSAGE = exports.SET_MOUSE_USER_STATE = exports.SET_LEDGER_TRANSPORT_STATUS = exports.SET_IPFS_GATEWAY = exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = exports.SET_FIRST_TIME_FLOW_TYPE = exports.SET_CUSTOM_TOKEN_AMOUNT = exports.SET_CURRENT_WINDOW_TAB = exports.SET_CURRENT_LOCALE = exports.SET_ACCOUNT_LABEL = exports.SELECTED_ADDRESS_CHANGED = exports.SELECTED_ACCOUNT_CHANGED = exports.QR_CODE_DETECTED = exports.PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION = exports.ONBOARDED_IN_THIS_UI_SESSION = exports.NETWORK_DROPDOWN_OPEN = exports.NETWORK_DROPDOWN_CLOSE = exports.MODAL_OPEN = exports.MODAL_CLOSE = exports.LOCK_METAMASK = exports.LOADING_TOKEN_PARAMS_STARTED = exports.LOADING_TOKEN_PARAMS_FINISHED = exports.LOADING_METHOD_DATA_STARTED = exports.LOADING_METHOD_DATA_FINISHED = exports.HIDE_WHATS_NEW_POPUP = exports.HIDE_WARNING = exports.HIDE_LOADING = exports.GO_HOME = exports.GAS_FEE_ESTIMATES_UPDATED = exports.FORGOT_PASSWORD = exports.DISPLAY_WARNING = exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = exports.COMPLETE_ONBOARDING = exports.COMPLETED_TX = exports.CLOSE_WELCOME_SCREEN = exports.CLEAR_PENDING_TOKENS = exports.CLEAR_ACCOUNT_DETAILS = exports.CHAIN_CHANGED = exports.CAPTURE_SINGLE_EXCEPTION = exports.BUY = exports.ALERT_OPEN = exports.ALERT_CLOSE = exports.ADDRESS_BOOK_UPDATED = exports.ACCOUNT_CHANGED = void 0;
const GO_HOME = 'GO_HOME'; // modal state

exports.GO_HOME = GO_HOME;
const MODAL_OPEN = 'UI_MODAL_OPEN';
exports.MODAL_OPEN = MODAL_OPEN;
const MODAL_CLOSE = 'UI_MODAL_CLOSE'; // alert state

exports.MODAL_CLOSE = MODAL_CLOSE;
const ALERT_OPEN = 'UI_ALERT_OPEN';
exports.ALERT_OPEN = ALERT_OPEN;
const ALERT_CLOSE = 'UI_ALERT_CLOSE';
exports.ALERT_CLOSE = ALERT_CLOSE;
const QR_CODE_DETECTED = 'UI_QR_CODE_DETECTED'; // network dropdown open

exports.QR_CODE_DETECTED = QR_CODE_DETECTED;
const NETWORK_DROPDOWN_OPEN = 'UI_NETWORK_DROPDOWN_OPEN';
exports.NETWORK_DROPDOWN_OPEN = NETWORK_DROPDOWN_OPEN;
const NETWORK_DROPDOWN_CLOSE = 'UI_NETWORK_DROPDOWN_CLOSE'; // remote state

exports.NETWORK_DROPDOWN_CLOSE = NETWORK_DROPDOWN_CLOSE;
const UPDATE_METAMASK_STATE = 'UPDATE_METAMASK_STATE';
exports.UPDATE_METAMASK_STATE = UPDATE_METAMASK_STATE;
const SELECTED_ADDRESS_CHANGED = 'SELECTED_ADDRESS_CHANGED';
exports.SELECTED_ADDRESS_CHANGED = SELECTED_ADDRESS_CHANGED;
const SELECTED_ACCOUNT_CHANGED = 'SELECTED_ACCOUNT_CHANGED';
exports.SELECTED_ACCOUNT_CHANGED = SELECTED_ACCOUNT_CHANGED;
const ACCOUNT_CHANGED = 'ACCOUNT_CHANGED';
exports.ACCOUNT_CHANGED = ACCOUNT_CHANGED;
const CHAIN_CHANGED = 'CHAIN_CHANGED';
exports.CHAIN_CHANGED = CHAIN_CHANGED;
const ADDRESS_BOOK_UPDATED = 'ADDRESS_BOOK_UPDATED';
exports.ADDRESS_BOOK_UPDATED = ADDRESS_BOOK_UPDATED;
const GAS_FEE_ESTIMATES_UPDATED = 'GAS_FEE_ESTIMATES_UPDATED';
exports.GAS_FEE_ESTIMATES_UPDATED = GAS_FEE_ESTIMATES_UPDATED;
const FORGOT_PASSWORD = 'FORGOT_PASSWORD';
exports.FORGOT_PASSWORD = FORGOT_PASSWORD;
const CLOSE_WELCOME_SCREEN = 'CLOSE_WELCOME_SCREEN'; // unlock screen

exports.CLOSE_WELCOME_SCREEN = CLOSE_WELCOME_SCREEN;
const UNLOCK_IN_PROGRESS = 'UNLOCK_IN_PROGRESS';
exports.UNLOCK_IN_PROGRESS = UNLOCK_IN_PROGRESS;
const UNLOCK_FAILED = 'UNLOCK_FAILED';
exports.UNLOCK_FAILED = UNLOCK_FAILED;
const UNLOCK_SUCCEEDED = 'UNLOCK_SUCCEEDED';
exports.UNLOCK_SUCCEEDED = UNLOCK_SUCCEEDED;
const LOCK_METAMASK = 'LOCK_METAMASK'; // error handling

exports.LOCK_METAMASK = LOCK_METAMASK;
const DISPLAY_WARNING = 'DISPLAY_WARNING';
exports.DISPLAY_WARNING = DISPLAY_WARNING;
const HIDE_WARNING = 'HIDE_WARNING';
exports.HIDE_WARNING = HIDE_WARNING;
const CAPTURE_SINGLE_EXCEPTION = 'CAPTURE_SINGLE_EXCEPTION'; // accounts screen

exports.CAPTURE_SINGLE_EXCEPTION = CAPTURE_SINGLE_EXCEPTION;
const SHOW_ACCOUNT_DETAIL = 'SHOW_ACCOUNT_DETAIL';
exports.SHOW_ACCOUNT_DETAIL = SHOW_ACCOUNT_DETAIL;
const SHOW_ACCOUNTS_PAGE = 'SHOW_ACCOUNTS_PAGE';
exports.SHOW_ACCOUNTS_PAGE = SHOW_ACCOUNTS_PAGE;
const SHOW_CONF_TX_PAGE = 'SHOW_CONF_TX_PAGE'; // account detail screen

exports.SHOW_CONF_TX_PAGE = SHOW_CONF_TX_PAGE;
const SHOW_SEND_TOKEN_PAGE = 'SHOW_SEND_TOKEN_PAGE';
exports.SHOW_SEND_TOKEN_PAGE = SHOW_SEND_TOKEN_PAGE;
const SHOW_PRIVATE_KEY = 'SHOW_PRIVATE_KEY';
exports.SHOW_PRIVATE_KEY = SHOW_PRIVATE_KEY;
const SET_ACCOUNT_LABEL = 'SET_ACCOUNT_LABEL';
exports.SET_ACCOUNT_LABEL = SET_ACCOUNT_LABEL;
const CLEAR_ACCOUNT_DETAILS = 'CLEAR_ACCOUNT_DETAILS'; // tx conf screen

exports.CLEAR_ACCOUNT_DETAILS = CLEAR_ACCOUNT_DETAILS;
const COMPLETED_TX = 'COMPLETED_TX';
exports.COMPLETED_TX = COMPLETED_TX;
const TRANSACTION_ERROR = 'TRANSACTION_ERROR';
exports.TRANSACTION_ERROR = TRANSACTION_ERROR;
const UPDATE_TRANSACTION_PARAMS = 'UPDATE_TRANSACTION_PARAMS';
exports.UPDATE_TRANSACTION_PARAMS = UPDATE_TRANSACTION_PARAMS;
const SET_NEXT_NONCE = 'SET_NEXT_NONCE'; // config screen

exports.SET_NEXT_NONCE = SET_NEXT_NONCE;
const SET_RPC_TARGET = 'SET_RPC_TARGET';
exports.SET_RPC_TARGET = SET_RPC_TARGET;
const SET_PROVIDER_TYPE = 'SET_PROVIDER_TYPE';
exports.SET_PROVIDER_TYPE = SET_PROVIDER_TYPE;
const SET_HARDWARE_WALLET_DEFAULT_HD_PATH = 'SET_HARDWARE_WALLET_DEFAULT_HD_PATH'; // loading overlay

exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = SET_HARDWARE_WALLET_DEFAULT_HD_PATH;
const SHOW_LOADING = 'SHOW_LOADING_INDICATION';
exports.SHOW_LOADING = SHOW_LOADING;
const HIDE_LOADING = 'HIDE_LOADING_INDICATION';
exports.HIDE_LOADING = HIDE_LOADING;
const BUY = 'BUY';
exports.BUY = BUY;
const TOGGLE_ACCOUNT_MENU = 'TOGGLE_ACCOUNT_MENU'; // preferences

exports.TOGGLE_ACCOUNT_MENU = TOGGLE_ACCOUNT_MENU;
const SET_USE_BLOCKIE = 'SET_USE_BLOCKIE';
exports.SET_USE_BLOCKIE = SET_USE_BLOCKIE;
const SET_USE_NONCEFIELD = 'SET_USE_NONCEFIELD';
exports.SET_USE_NONCEFIELD = SET_USE_NONCEFIELD;
const UPDATE_CUSTOM_NONCE = 'UPDATE_CUSTOM_NONCE';
exports.UPDATE_CUSTOM_NONCE = UPDATE_CUSTOM_NONCE;
const SET_IPFS_GATEWAY = 'SET_IPFS_GATEWAY';
exports.SET_IPFS_GATEWAY = SET_IPFS_GATEWAY;
const SET_PARTICIPATE_IN_METAMETRICS = 'SET_PARTICIPATE_IN_METAMETRICS'; // locale

exports.SET_PARTICIPATE_IN_METAMETRICS = SET_PARTICIPATE_IN_METAMETRICS;
const SET_CURRENT_LOCALE = 'SET_CURRENT_LOCALE'; // Feature Flags

exports.SET_CURRENT_LOCALE = SET_CURRENT_LOCALE;
const UPDATE_FEATURE_FLAGS = 'UPDATE_FEATURE_FLAGS'; // Preferences

exports.UPDATE_FEATURE_FLAGS = UPDATE_FEATURE_FLAGS;
const UPDATE_PREFERENCES = 'UPDATE_PREFERENCES'; // Onboarding

exports.UPDATE_PREFERENCES = UPDATE_PREFERENCES;
const COMPLETE_ONBOARDING = 'COMPLETE_ONBOARDING';
exports.COMPLETE_ONBOARDING = COMPLETE_ONBOARDING;
const ONBOARDED_IN_THIS_UI_SESSION = 'ONBOARDED_IN_THIS_UI_SESSION';
exports.ONBOARDED_IN_THIS_UI_SESSION = ONBOARDED_IN_THIS_UI_SESSION;
const SET_MOUSE_USER_STATE = 'SET_MOUSE_USER_STATE'; // Ledger

exports.SET_MOUSE_USER_STATE = SET_MOUSE_USER_STATE;
const SET_WEBHID_CONNECTED_STATUS = 'SET_WEBHID_CONNECTED_STATUS';
exports.SET_WEBHID_CONNECTED_STATUS = SET_WEBHID_CONNECTED_STATUS;
const SET_LEDGER_TRANSPORT_STATUS = 'SET_LEDGER_TRANSPORT_STATUS'; // Network

exports.SET_LEDGER_TRANSPORT_STATUS = SET_LEDGER_TRANSPORT_STATUS;
const SET_PENDING_TOKENS = 'SET_PENDING_TOKENS';
exports.SET_PENDING_TOKENS = SET_PENDING_TOKENS;
const CLEAR_PENDING_TOKENS = 'CLEAR_PENDING_TOKENS';
exports.CLEAR_PENDING_TOKENS = CLEAR_PENDING_TOKENS;
const SET_FIRST_TIME_FLOW_TYPE = 'SET_FIRST_TIME_FLOW_TYPE';
exports.SET_FIRST_TIME_FLOW_TYPE = SET_FIRST_TIME_FLOW_TYPE;
const SET_SELECTED_SETTINGS_RPC_URL = 'SET_SELECTED_SETTINGS_RPC_URL';
exports.SET_SELECTED_SETTINGS_RPC_URL = SET_SELECTED_SETTINGS_RPC_URL;
const SET_NEW_NETWORK_ADDED = 'SET_NEW_NETWORK_ADDED';
exports.SET_NEW_NETWORK_ADDED = SET_NEW_NETWORK_ADDED;
const SET_NEW_COLLECTIBLE_ADDED_MESSAGE = 'SET_NEW_COLLECTIBLE_ADDED_MESSAGE';
exports.SET_NEW_COLLECTIBLE_ADDED_MESSAGE = SET_NEW_COLLECTIBLE_ADDED_MESSAGE;
const SET_NEW_CUSTOM_NETWORK_ADDED = 'SET_NEW_CUSTOM_NETWORK_ADDED';
exports.SET_NEW_CUSTOM_NETWORK_ADDED = SET_NEW_CUSTOM_NETWORK_ADDED;
const LOADING_METHOD_DATA_STARTED = 'LOADING_METHOD_DATA_STARTED';
exports.LOADING_METHOD_DATA_STARTED = LOADING_METHOD_DATA_STARTED;
const LOADING_METHOD_DATA_FINISHED = 'LOADING_METHOD_DATA_FINISHED';
exports.LOADING_METHOD_DATA_FINISHED = LOADING_METHOD_DATA_FINISHED;
const LOADING_TOKEN_PARAMS_STARTED = 'LOADING_TOKEN_PARAMS_STARTED';
exports.LOADING_TOKEN_PARAMS_STARTED = LOADING_TOKEN_PARAMS_STARTED;
const LOADING_TOKEN_PARAMS_FINISHED = 'LOADING_TOKEN_PARAMS_FINISHED';
exports.LOADING_TOKEN_PARAMS_FINISHED = LOADING_TOKEN_PARAMS_FINISHED;
const SET_REQUEST_ACCOUNT_TABS = 'SET_REQUEST_ACCOUNT_TABS';
exports.SET_REQUEST_ACCOUNT_TABS = SET_REQUEST_ACCOUNT_TABS;
const SET_CURRENT_WINDOW_TAB = 'SET_CURRENT_WINDOW_TAB';
exports.SET_CURRENT_WINDOW_TAB = SET_CURRENT_WINDOW_TAB;
const SET_OPEN_METAMASK_TAB_IDS = 'SET_OPEN_METAMASK_TAB_IDS'; // Home Screen

exports.SET_OPEN_METAMASK_TAB_IDS = SET_OPEN_METAMASK_TAB_IDS;
const HIDE_WHATS_NEW_POPUP = 'HIDE_WHATS_NEW_POPUP';
exports.HIDE_WHATS_NEW_POPUP = HIDE_WHATS_NEW_POPUP;
const PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION = 'PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION';
exports.PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION = PORTFOLIO_TOOLTIP_WAS_SHOWN_IN_THIS_SESSION;
const TOGGLE_GAS_LOADING_ANIMATION = 'TOGGLE_GAS_LOADING_ANIMATION'; // Smart Transactions

exports.TOGGLE_GAS_LOADING_ANIMATION = TOGGLE_GAS_LOADING_ANIMATION;
const SET_SMART_TRANSACTIONS_ERROR = 'SET_SMART_TRANSACTIONS_ERROR';
exports.SET_SMART_TRANSACTIONS_ERROR = SET_SMART_TRANSACTIONS_ERROR;
const DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = 'DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE';
exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE;
const TOGGLE_CURRENCY_INPUT_SWITCH = 'TOGGLE_CURRENCY_INPUT_SWITCH'; // Token detection v2

exports.TOGGLE_CURRENCY_INPUT_SWITCH = TOGGLE_CURRENCY_INPUT_SWITCH;
const SET_NEW_TOKENS_IMPORTED = 'SET_NEW_TOKENS_IMPORTED'; // Token allowance

exports.SET_NEW_TOKENS_IMPORTED = SET_NEW_TOKENS_IMPORTED;
const SET_CUSTOM_TOKEN_AMOUNT = 'SET_CUSTOM_TOKEN_AMOUNT';
exports.SET_CUSTOM_TOKEN_AMOUNT = SET_CUSTOM_TOKEN_AMOUNT;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js", {"../../app/scripts/lib/buy-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\buy-url.js","../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../shared/constants/hardware-wallets":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\hardware-wallets.js","../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../shared/lib/switch-direction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\switch-direction.js","../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../ducks/alerts/unconnected-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\unconnected-account.js","../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\index.js","../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../helpers/utils/i18n-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.js","../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../helpers/utils/tx-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js","../pages/swaps/swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./action-queue":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\action-queue\\index.js","./actionConstants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","buffer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\store\actions.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acceptWatchAsset = acceptWatchAsset;
exports.addCollectible = addCollectible;
exports.addCollectibleVerifyOwnership = addCollectibleVerifyOwnership;
exports.addCustomNetwork = addCustomNetwork;
exports.addDetectedTokens = addDetectedTokens;
exports.addImportedTokens = addImportedTokens;
exports.addNewAccount = addNewAccount;
exports.addPermittedAccount = addPermittedAccount;
exports.addPollingTokenToAppState = addPollingTokenToAppState;
exports.addToAddressBook = addToAddressBook;
exports.addToken = addToken;
exports.addTokens = addTokens;
exports.addUnapprovedTransaction = addUnapprovedTransaction;
exports.addUnapprovedTransactionAndRouteToConfirmationPage = addUnapprovedTransactionAndRouteToConfirmationPage;
exports.approvePermissionsRequest = approvePermissionsRequest;
exports.attemptLedgerTransportCreation = attemptLedgerTransportCreation;
exports.backupUserData = backupUserData;
exports.buy = buy;
exports.cancelDecryptMsg = cancelDecryptMsg;
exports.cancelEncryptionPublicKeyMsg = cancelEncryptionPublicKeyMsg;
exports.cancelMsg = cancelMsg;
exports.cancelMsgs = cancelMsgs;
exports.cancelPersonalMsg = cancelPersonalMsg;
exports.cancelQRHardwareSignRequest = cancelQRHardwareSignRequest;
exports.cancelSmartTransaction = cancelSmartTransaction;
exports.cancelSyncQRHardware = cancelSyncQRHardware;
exports.cancelTx = cancelTx;
exports.cancelTxs = cancelTxs;
exports.cancelTypedMsg = cancelTypedMsg;
exports.captureSingleException = captureSingleException;
exports.checkAndUpdateAllCollectiblesOwnershipStatus = checkAndUpdateAllCollectiblesOwnershipStatus;
exports.checkAndUpdateSingleCollectibleOwnershipStatus = checkAndUpdateSingleCollectibleOwnershipStatus;
exports.checkHardwareStatus = checkHardwareStatus;
exports.clearAccountDetails = clearAccountDetails;
exports.clearPendingTokens = clearPendingTokens;
exports.clearSmartTransactionFees = clearSmartTransactionFees;
exports.clearSwapsQuotes = clearSwapsQuotes;
exports.closeCurrentNotificationWindow = closeCurrentNotificationWindow;
exports.closeNotificationPopup = closeNotificationPopup;
exports.closeWelcomeScreen = closeWelcomeScreen;
exports.completeOnboarding = completeOnboarding;
exports.completedTx = completedTx;
exports.connectHardware = connectHardware;
exports.createCancelTransaction = createCancelTransaction;
exports.createEventFragment = createEventFragment;
exports.createNewVault = createNewVault;
exports.createNewVaultAndGetSeedPhrase = createNewVaultAndGetSeedPhrase;
exports.createNewVaultAndRestore = createNewVaultAndRestore;
exports.createRetryTransaction = createRetryTransaction;
exports.createSpeedUpTransaction = createSpeedUpTransaction;
exports.createTransactionEventFragment = createTransactionEventFragment;
exports.customSwapsGasParamsUpdated = customSwapsGasParamsUpdated;
exports.decryptMsg = decryptMsg;
exports.decryptMsgInline = decryptMsgInline;
exports.delRpcTarget = delRpcTarget;
exports.detectCollectibles = detectCollectibles;
exports.detectNewTokens = detectNewTokens;
exports.disconnectGasFeeEstimatePoller = disconnectGasFeeEstimatePoller;
exports.dismissSmartTransactionsErrorMessage = dismissSmartTransactionsErrorMessage;
exports.displayWarning = displayWarning;
exports.editRpc = editRpc;
exports.encryptionPublicKeyMsg = encryptionPublicKeyMsg;
exports.estimateGas = estimateGas;
exports.exportAccount = exportAccount;
exports.exportAccounts = exportAccounts;
exports.fetchAndSetQuotes = fetchAndSetQuotes;
exports.fetchInfoToSync = fetchInfoToSync;
exports.fetchSmartTransactionFees = fetchSmartTransactionFees;
exports.fetchSmartTransactionsLiveness = fetchSmartTransactionsLiveness;
exports.finalizeEventFragment = finalizeEventFragment;
exports.forceUpdateMetamaskState = forceUpdateMetamaskState;
exports.forgetDevice = forgetDevice;
exports.forgotPassword = forgotPassword;
exports.getBalancesInSingleCall = getBalancesInSingleCall;
exports.getContractMethodData = getContractMethodData;
exports.getCurrentWindowTab = getCurrentWindowTab;
exports.getGasFeeEstimatesAndStartPolling = getGasFeeEstimatesAndStartPolling;
exports.getGasFeeTimeEstimate = getGasFeeTimeEstimate;
exports.getNextNonce = getNextNonce;
exports.getOpenMetamaskTabsIds = getOpenMetamaskTabsIds;
exports.getRequestAccountTabIds = getRequestAccountTabIds;
exports.getTokenStandardAndDetails = getTokenStandardAndDetails;
exports.getTransactions = getTransactions;
exports.goHome = goHome;
exports.hideAlert = hideAlert;
exports.hideLoadingIndication = hideLoadingIndication;
exports.hideModal = hideModal;
exports.hideNetworkDropdown = hideNetworkDropdown;
exports.hidePortfolioTooltip = hidePortfolioTooltip;
exports.hideTestNetMessage = hideTestNetMessage;
exports.hideWarning = hideWarning;
exports.ignoreTokens = ignoreTokens;
exports.importNewAccount = importNewAccount;
exports.isCollectibleOwner = isCollectibleOwner;
exports.loadingMethodDataFinished = loadingMethodDataFinished;
exports.loadingMethodDataStarted = loadingMethodDataStarted;
exports.loadingTokenParamsFinished = loadingTokenParamsFinished;
exports.loadingTokenParamsStarted = loadingTokenParamsStarted;
exports.lockMetamask = lockMetamask;
exports.markPasswordForgotten = markPasswordForgotten;
exports.qrCodeDetected = qrCodeDetected;
exports.rejectPendingApproval = rejectPendingApproval;
exports.rejectPermissionsRequest = rejectPermissionsRequest;
exports.rejectWatchAsset = rejectWatchAsset;
exports.removeAccount = removeAccount;
exports.removeAndIgnoreCollectible = removeAndIgnoreCollectible;
exports.removeCollectible = removeCollectible;
exports.removeFromAddressBook = removeFromAddressBook;
exports.removePermissionsFor = removePermissionsFor;
exports.removePermittedAccount = removePermittedAccount;
exports.removePollingTokenFromAppState = removePollingTokenFromAppState;
exports.requestAccountsPermissionWithId = requestAccountsPermissionWithId;
exports.requestAddNetworkApproval = requestAddNetworkApproval;
exports.requestRevealSeedWords = requestRevealSeedWords;
exports.resetAccount = resetAccount;
exports.resetBackgroundSwapsState = resetBackgroundSwapsState;
exports.resetSwapsPostFetchState = resetSwapsPostFetchState;
exports.resolvePendingApproval = resolvePendingApproval;
exports.restoreUserData = restoreUserData;
exports.rollbackToPreviousProvider = rollbackToPreviousProvider;
exports.safeRefetchQuotes = safeRefetchQuotes;
exports.setAccountLabel = setAccountLabel;
exports.setAdvancedGasFee = setAdvancedGasFee;
exports.setAlertEnabledness = setAlertEnabledness;
exports.setApproveTxId = setApproveTxId;
exports.setAutoLockTimeLimit = setAutoLockTimeLimit;
exports.setBackgroundSwapRouteState = setBackgroundSwapRouteState;
exports.setCollectiblesDetectionNoticeDismissed = setCollectiblesDetectionNoticeDismissed;
exports.setCompletedOnboarding = setCompletedOnboarding;
exports.setConnectedStatusPopoverHasBeenShown = setConnectedStatusPopoverHasBeenShown;
exports.setCurrentCurrency = setCurrentCurrency;
exports.setCurrentLocale = setCurrentLocale;
exports.setCurrentWindowTab = setCurrentWindowTab;
exports.setCustomApproveTxData = setCustomApproveTxData;
exports.setDefaultHomeActiveTabName = setDefaultHomeActiveTabName;
exports.setDismissSeedBackUpReminder = setDismissSeedBackUpReminder;
exports.setEIP1559V2Enabled = setEIP1559V2Enabled;
exports.setEnableEIP1559V2NoticeDismissed = setEnableEIP1559V2NoticeDismissed;
exports.setFeatureFlag = setFeatureFlag;
exports.setFirstTimeFlowType = setFirstTimeFlowType;
exports.setFirstTimeUsedNetwork = setFirstTimeUsedNetwork;
exports.setHardwareWalletDefaultHdPath = setHardwareWalletDefaultHdPath;
exports.setHideZeroBalanceTokens = setHideZeroBalanceTokens;
exports.setImprovedTokenAllowanceEnabled = setImprovedTokenAllowanceEnabled;
exports.setInitialGasEstimate = setInitialGasEstimate;
exports.setIpfsGateway = setIpfsGateway;
exports.setLastActiveTime = setLastActiveTime;
exports.setLedgerTransportPreference = setLedgerTransportPreference;
exports.setMouseUserState = setMouseUserState;
exports.setNewCollectibleAddedMessage = setNewCollectibleAddedMessage;
exports.setNewNetworkAdded = setNewNetworkAdded;
exports.setNewTokensImported = setNewTokensImported;
exports.setNextNonce = setNextNonce;
exports.setOpenMetamaskTabsIDs = setOpenMetamaskTabsIDs;
exports.setOpenSeaEnabled = setOpenSeaEnabled;
exports.setParticipateInMetaMetrics = setParticipateInMetaMetrics;
exports.setPendingTokens = setPendingTokens;
exports.setPreference = setPreference;
exports.setProviderType = setProviderType;
exports.setRecoveryPhraseReminderHasBeenShown = setRecoveryPhraseReminderHasBeenShown;
exports.setRecoveryPhraseReminderLastShown = setRecoveryPhraseReminderLastShown;
exports.setRequestAccountTabIds = setRequestAccountTabIds;
exports.setRpcTarget = setRpcTarget;
exports.setSeedPhraseBackedUp = setSeedPhraseBackedUp;
exports.setSelectedAddress = setSelectedAddress;
exports.setSelectedQuoteAggId = setSelectedQuoteAggId;
exports.setSelectedSettingsRpcUrl = setSelectedSettingsRpcUrl;
exports.setShowFiatConversionOnTestnetsPreference = setShowFiatConversionOnTestnetsPreference;
exports.setShowTestNetworks = setShowTestNetworks;
exports.setSmartTransactionsOptInStatus = setSmartTransactionsOptInStatus;
exports.setSmartTransactionsRefreshInterval = setSmartTransactionsRefreshInterval;
exports.setSwapsErrorKey = setSwapsErrorKey;
exports.setSwapsFeatureFlags = setSwapsFeatureFlags;
exports.setSwapsLiveness = setSwapsLiveness;
exports.setSwapsQuotesPollingLimitEnabled = setSwapsQuotesPollingLimitEnabled;
exports.setSwapsTokens = setSwapsTokens;
exports.setSwapsTxGasLimit = setSwapsTxGasLimit;
exports.setSwapsTxGasPrice = setSwapsTxGasPrice;
exports.setTheme = setTheme;
exports.setTradeTxId = setTradeTxId;
exports.setUnconnectedAccountAlertShown = setUnconnectedAccountAlertShown;
exports.setUseBlockie = setUseBlockie;
exports.setUseCollectibleDetection = setUseCollectibleDetection;
exports.setUseNativeCurrencyAsPrimaryCurrencyPreference = setUseNativeCurrencyAsPrimaryCurrencyPreference;
exports.setUseNonceField = setUseNonceField;
exports.setUsePhishDetect = setUsePhishDetect;
exports.setUseTokenDetection = setUseTokenDetection;
exports.setWeb3ShimUsageAlertDismissed = setWeb3ShimUsageAlertDismissed;
exports.showAccountDetail = showAccountDetail;
exports.showAccountsPage = showAccountsPage;
exports.showAlert = showAlert;
exports.showConfTxPage = showConfTxPage;
exports.showLoadingIndication = showLoadingIndication;
exports.showModal = showModal;
exports.showNetworkDropdown = showNetworkDropdown;
exports.showPrivateKey = showPrivateKey;
exports.showQrScanner = showQrScanner;
exports.showSendTokenPage = showSendTokenPage;
exports.signAndSendSmartTransaction = signAndSendSmartTransaction;
exports.signMsg = signMsg;
exports.signPersonalMsg = signPersonalMsg;
exports.signTypedMsg = signTypedMsg;
exports.stopPollingForQuotes = stopPollingForQuotes;
exports.submitPassword = submitPassword;
exports.submitQRHardwareCryptoAccount = submitQRHardwareCryptoAccount;
exports.submitQRHardwareCryptoHDKey = submitQRHardwareCryptoHDKey;
exports.submitQRHardwareSignature = submitQRHardwareSignature;
exports.toggleAccountMenu = toggleAccountMenu;
exports.trackMetaMetricsEvent = trackMetaMetricsEvent;
exports.trackMetaMetricsPage = trackMetaMetricsPage;
exports.tryReverseResolveAddress = tryReverseResolveAddress;
exports.tryUnlockMetamask = tryUnlockMetamask;
exports.txError = txError;
exports.unMarkPasswordForgotten = unMarkPasswordForgotten;
exports.unlockAndGetSeedPhrase = unlockAndGetSeedPhrase;
exports.unlockFailed = unlockFailed;
exports.unlockHardwareWalletAccounts = unlockHardwareWalletAccounts;
exports.unlockInProgress = unlockInProgress;
exports.unlockSucceeded = unlockSucceeded;
exports.updateAndApproveTx = updateAndApproveTx;
exports.updateAndSetCustomRpc = updateAndSetCustomRpc;
exports.updateCollectibleDropDownState = updateCollectibleDropDownState;
exports.updateCurrentLocale = updateCurrentLocale;
exports.updateCustomNonce = updateCustomNonce;
exports.updateCustomSwapsEIP1559GasParams = updateCustomSwapsEIP1559GasParams;
exports.updateEditableParams = updateEditableParams;
exports.updateEventFragment = updateEventFragment;
exports.updateFeatureFlags = updateFeatureFlags;
exports.updateMetamaskState = updateMetamaskState;
exports.updatePreferences = updatePreferences;
exports.updatePreviousGasParams = updatePreviousGasParams;
exports.updateProviderType = updateProviderType;
exports.updateSmartTransaction = updateSmartTransaction;
exports.updateSwapApprovalTransaction = updateSwapApprovalTransaction;
exports.updateSwapTransaction = updateSwapTransaction;
exports.updateSwapsUserFeeLevel = updateSwapsUserFeeLevel;
exports.updateTokenType = updateTokenType;
exports.updateTransaction = updateTransaction;
exports.updateTransactionGasFees = updateTransactionGasFees;
exports.updateTransactionParams = updateTransactionParams;
exports.updateTransactionSendFlowHistory = updateTransactionSendFlowHistory;
exports.updateViewedNotifications = updateViewedNotifications;
exports.verifyPassword = verifyPassword;
exports.verifySeedPhrase = verifySeedPhrase;

var _loglevel = _interopRequireDefault(require("loglevel"));

var _browser = require("@sentry/browser");

var _lodash = require("lodash");

var _buyUrl = _interopRequireDefault(require("../../app/scripts/lib/buy-url"));

var _transactions = require("../helpers/utils/transactions.util");

var _switchDirection = _interopRequireDefault(require("../../shared/lib/switch-direction"));

var _app = require("../../shared/constants/app");

var _confirmTx = require("../helpers/utils/confirm-tx.util");

var _txHelper = _interopRequireDefault(require("../helpers/utils/tx-helper"));

var _util = require("../../app/scripts/lib/util");

var _selectors = require("../selectors");

var _send = require("../ducks/send");

var _unconnectedAccount = require("../ducks/alerts/unconnected-account");

var _metamask = require("../ducks/metamask/metamask");

var _hexstringUtils = require("../../shared/modules/hexstring-utils");

var _hardwareWallets = require("../../shared/constants/hardware-wallets");

var _metametrics = require("../../shared/constants/metametrics");

var _swaps = require("../pages/swaps/swaps.util");

var _stringUtils = require("../../shared/modules/string-utils");

var _app2 = require("../ducks/app/app");

var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");

var _i18nHelper = require("../helpers/utils/i18n-helper");

var actionConstants = _interopRequireWildcard(require("./actionConstants"));

var _actionQueue = require("./action-queue");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function goHome() {
  return {
    type: actionConstants.GO_HOME
  };
} // async actions


function tryUnlockMetamask(password) {
  return dispatch => {
    dispatch(showLoadingIndication());
    dispatch(unlockInProgress());

    _loglevel.default.debug(`background.submitPassword`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
        if (error) {
          reject(error);
          return;
        }

        resolve();
      });
    }).then(() => {
      dispatch(unlockSucceeded());
      return forceUpdateMetamaskState(dispatch);
    }).then(() => {
      dispatch(hideLoadingIndication());
    }).catch(err => {
      dispatch(unlockFailed(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}
/**
 * Adds a new account where all data is encrypted using the given password and
 * where all addresses are generated from a given seed phrase.
 *
 * @param {string} password - The password.
 * @param {string} seedPhrase - The seed phrase.
 * @returns {object} The updated state of the keyring controller.
 */


function createNewVaultAndRestore(password, seedPhrase) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.createNewVaultAndRestore`); // Encode the secret recovery phrase as an array of integers so that it is
    // serialized as JSON properly.


    const encodedSeedPhrase = Array.from(Buffer.from(seedPhrase, 'utf8').values());
    let vault;
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createNewVaultAndRestore', [password, encodedSeedPhrase], (err, _vault) => {
        if (err) {
          reject(err);
          return;
        }

        vault = _vault;
        resolve();
      });
    }).then(() => dispatch(unMarkPasswordForgotten())).then(() => {
      dispatch(showAccountsPage());
      dispatch(hideLoadingIndication());
      return vault;
    }).catch(err => {
      dispatch(displayWarning(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}

function createNewVaultAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await createNewVault(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw new Error(error.message);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function unlockAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await submitPassword(password);
      const seedPhrase = await verifySeedPhrase();
      await forceUpdateMetamaskState(dispatch);
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw new Error(error.message);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function submitPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }

      resolve();
    });
  });
}

function createNewVault(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('createNewVaultAndKeychain', [password], error => {
      if (error) {
        reject(error);
        return;
      }

      resolve(true);
    });
  });
}

function verifyPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }

      resolve(true);
    });
  });
}

async function verifySeedPhrase() {
  const encodedSeedPhrase = await (0, _actionQueue.submitRequestToBackground)('verifySeedPhrase');
  return Buffer.from(encodedSeedPhrase).toString('utf8');
}

function requestRevealSeedWords(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.verifyPassword`);

    try {
      await verifyPassword(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function tryReverseResolveAddress(address) {
  return () => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('tryReverseResolveAddress', [address], err => {
        if (err) {
          _loglevel.default.error(err);
        }

        resolve();
      });
    });
  };
}

function fetchInfoToSync() {
  return dispatch => {
    _loglevel.default.debug(`background.fetchInfoToSync`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('fetchInfoToSync', [], (err, result) => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        resolve(result);
      });
    });
  };
}

function resetAccount() {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('resetAccount', [], (err, account) => {
        dispatch(hideLoadingIndication());

        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        _loglevel.default.info(`Transaction history reset for ${account}`);

        dispatch(showAccountsPage());
        resolve(account);
      });
    });
  };
}

function removeAccount(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('removeAccount', [address], (error, account) => {
          if (error) {
            reject(error);
            return;
          }

          resolve(account);
        });
      });
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    _loglevel.default.info(`Account removed: ${address}`);

    dispatch(showAccountsPage());
  };
}

function importNewAccount(strategy, args) {
  return async dispatch => {
    let newState;
    dispatch(showLoadingIndication('This may take a while, please be patient.'));

    try {
      _loglevel.default.debug(`background.importAccountWithStrategy`);

      await (0, _actionQueue.submitRequestToBackground)('importAccountWithStrategy', [strategy, args]);

      _loglevel.default.debug(`background.getState`);

      newState = await (0, _actionQueue.submitRequestToBackground)('getState');
    } catch (err) {
      dispatch(displayWarning(err.message));
      throw err;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));

    if (newState.selectedAddress) {
      dispatch({
        type: actionConstants.SHOW_ACCOUNT_DETAIL,
        value: newState.selectedAddress
      });
    }

    return newState;
  };
}

function addNewAccount() {
  _loglevel.default.debug(`background.addNewAccount`);

  return async (dispatch, getState) => {
    const oldIdentities = getState().metamask.identities;
    dispatch(showLoadingIndication());
    let newIdentities;

    try {
      const {
        identities
      } = await (0, _actionQueue.submitRequestToBackground)('addNewAccount', [Object.keys(oldIdentities).length]);
      newIdentities = identities;
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    const newAccountAddress = Object.keys(newIdentities).find(address => !oldIdentities[address]);
    await forceUpdateMetamaskState(dispatch);
    return newAccountAddress;
  };
}

function checkHardwareStatus(deviceName, hdPath) {
  _loglevel.default.debug(`background.checkHardwareStatus`, deviceName, hdPath);

  return async dispatch => {
    dispatch(showLoadingIndication());
    let unlocked;

    try {
      unlocked = await (0, _actionQueue.submitRequestToBackground)('checkHardwareStatus', [deviceName, hdPath]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    await forceUpdateMetamaskState(dispatch);
    return unlocked;
  };
}

function forgetDevice(deviceName) {
  _loglevel.default.debug(`background.forgetDevice`, deviceName);

  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await (0, _actionQueue.submitRequestToBackground)('forgetDevice', [deviceName]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    await forceUpdateMetamaskState(dispatch);
  };
}

function connectHardware(deviceName, page, hdPath, t) {
  _loglevel.default.debug(`background.connectHardware`, deviceName, page, hdPath);

  return async (dispatch, getState) => {
    const {
      ledgerTransportType
    } = getState().metamask;
    dispatch(showLoadingIndication(`Looking for your ${(0, _lodash.capitalize)(deviceName)}...`));
    let accounts;

    try {
      if (deviceName === _hardwareWallets.DEVICE_NAMES.LEDGER) {
        await (0, _actionQueue.submitRequestToBackground)('establishLedgerTransportPreference');
      }

      if (deviceName === _hardwareWallets.DEVICE_NAMES.LEDGER && ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const userApprovedWebHidConnection = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));

        if (!userApprovedWebHidConnection) {
          throw new Error(t('ledgerWebHIDNotConnectedErrorMessage'));
        }
      }

      accounts = await (0, _actionQueue.submitRequestToBackground)('connectHardware', [deviceName, page, hdPath]);
    } catch (error) {
      _loglevel.default.error(error);

      if (deviceName === _hardwareWallets.DEVICE_NAMES.LEDGER && ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && error.message.match('Failed to open the device')) {
        dispatch(displayWarning(t('ledgerDeviceOpenFailureMessage')));
        throw new Error(t('ledgerDeviceOpenFailureMessage'));
      } else {
        if (deviceName !== _hardwareWallets.DEVICE_NAMES.QR) {
          dispatch(displayWarning(error.message));
        }

        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }

    await forceUpdateMetamaskState(dispatch);
    return accounts;
  };
}

function unlockHardwareWalletAccounts(indexes, deviceName, hdPath, hdPathDescription) {
  _loglevel.default.debug(`background.unlockHardwareWalletAccount`, indexes, deviceName, hdPath, hdPathDescription);

  return async dispatch => {
    dispatch(showLoadingIndication());

    for (const index of indexes) {
      try {
        await (0, _actionQueue.submitRequestToBackground)('unlockHardwareWalletAccount', [index, deviceName, hdPath, hdPathDescription]);
      } catch (e) {
        _loglevel.default.error(e);

        dispatch(displayWarning(e.message));
        dispatch(hideLoadingIndication());
        throw e;
      }
    }

    dispatch(hideLoadingIndication());
    return undefined;
  };
}

function showQrScanner() {
  return dispatch => {
    dispatch(showModal({
      name: 'QR_SCANNER'
    }));
  };
}

function setCurrentCurrency(currencyCode) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setCurrentCurrency`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setCurrentCurrency', [currencyCode]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function signMsg(msgData) {
  _loglevel.default.debug('action - signMsg');

  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`actions calling background.signMessage`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signMessage', [msgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function signPersonalMsg(msgData) {
  _loglevel.default.debug('action - signPersonalMsg');

  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`actions calling background.signPersonalMessage`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signPersonalMessage', [msgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function decryptMsgInline(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsgInline');

  return async dispatch => {
    _loglevel.default.debug(`actions calling background.decryptMessageInline`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessageInline', [decryptedMsgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    }

    dispatch(updateMetamaskState(newState));
    return newState.unapprovedDecryptMsgs[decryptedMsgData.metamaskId];
  };
}

function decryptMsg(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsg');

  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`actions calling background.decryptMessage`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessage', [decryptedMsgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(decryptedMsgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return decryptedMsgData;
  };
}

function encryptionPublicKeyMsg(msgData) {
  _loglevel.default.debug('action - encryptionPublicKeyMsg');

  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`actions calling background.encryptionPublicKey`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('encryptionPublicKey', [msgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function signTypedMsg(msgData) {
  _loglevel.default.debug('action - signTypedMsg');

  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`actions calling background.signTypedMessage`);

    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signTypedMessage', [msgData]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function updateCustomNonce(value) {
  return {
    type: actionConstants.UPDATE_CUSTOM_NONCE,
    value
  };
}

const updateMetamaskStateFromBackground = () => {
  _loglevel.default.debug(`background.getState`);

  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('getState', [], (error, newState) => {
      if (error) {
        reject(error);
        return;
      }

      resolve(newState);
    });
  });
};

function updatePreviousGasParams(txId, previousGasParams) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updatePreviousGasParams', [txId, previousGasParams]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    return updatedTransaction;
  };
}

function updateSwapApprovalTransaction(txId, txSwapApproval) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateSwapApprovalTransaction', [txId, txSwapApproval]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    return updatedTransaction;
  };
}

function updateEditableParams(txId, editableParams) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateEditableParams', [txId, editableParams]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    await forceUpdateMetamaskState(dispatch);
    return updatedTransaction;
  };
}
/**
 * Appends new send flow history to a transaction
 *
 * @param {string} txId - the id of the transaction to update
 * @param {number} currentSendFlowHistoryLength - sendFlowHistory entries currently
 * @param {Array<{event: string, timestamp: number}>} sendFlowHistory - the new send flow history to append to the
 *  transaction
 * @returns {__import__('../../shared/constants/transaction').TransactionMeta}
 */


function updateTransactionSendFlowHistory(txId, currentSendFlowHistoryLength, sendFlowHistory) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionSendFlowHistory', [txId, currentSendFlowHistoryLength, sendFlowHistory]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    return updatedTransaction;
  };
}

async function backupUserData() {
  let backedupData;

  try {
    backedupData = await (0, _actionQueue.submitRequestToBackground)('backupUserData');
  } catch (error) {
    _loglevel.default.error(error.message);

    throw error;
  }

  return backedupData;
}

async function restoreUserData(jsonString) {
  try {
    await (0, _actionQueue.submitRequestToBackground)('restoreUserData', [jsonString]);
  } catch (error) {
    _loglevel.default.error(error.message);

    throw error;
  }

  return true;
}

function updateTransactionGasFees(txId, txGasFees) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionGasFees', [txId, txGasFees]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    return updatedTransaction;
  };
}

function updateSwapTransaction(txId, txSwap) {
  return async dispatch => {
    let updatedTransaction;

    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateSwapTransaction', [txId, txSwap]);
    } catch (error) {
      dispatch(txError(error));

      _loglevel.default.error(error.message);

      throw error;
    }

    return updatedTransaction;
  };
}

function updateTransaction(txData, dontShowLoadingIndicator) {
  return async dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());

    try {
      await (0, _actionQueue.submitRequestToBackground)('updateTransaction', [txData]);
    } catch (error) {
      dispatch(updateTransactionParams(txData.id, txData.txParams));
      dispatch(hideLoadingIndication());
      dispatch(txError(error));
      dispatch(goHome());

      _loglevel.default.error(error.message);

      throw error;
    }

    try {
      dispatch(updateTransactionParams(txData.id, txData.txParams));
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch(showConfTxPage({
        id: txData.id
      }));
      return txData;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
/**
 * Action to create a new transaction in the controller and route to the
 * confirmation page. Returns the newly created txMeta in case additional logic
 * should be applied to the transaction after creation.
 *
 * @param {__import__('../../shared/constants/transaction').TxParams} txParams -
 *  The transaction parameters
 * @param {__import__(
 *  '../../shared/constants/transaction'
 * ).TransactionTypeString} type - The type of the transaction being added.
 * @param {Array<{event: string, timestamp: number}>} sendFlowHistory - The
 *  history of the send flow at time of creation.
 * @returns {__import__('../../shared/constants/transaction').TransactionMeta}
 */


function addUnapprovedTransactionAndRouteToConfirmationPage(txParams, type, sendFlowHistory) {
  return async dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();

    try {
      _loglevel.default.debug('background.addUnapprovedTransaction');

      const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [txParams, _app.ORIGIN_METAMASK, type, sendFlowHistory, actionId], actionId);
      dispatch(showConfTxPage());
      return txMeta;
    } catch (error) {
      dispatch(hideLoadingIndication());
      dispatch(displayWarning(error.message));
    }

    return null;
  };
}
/**
 * Wrapper around the promisifedBackground to create a new unapproved
 * transaction in the background and return the newly created txMeta.
 * This method does not show errors or route to a confirmation page and is
 * used primarily for swaps functionality.
 *
 * @param {__import__('../../shared/constants/transaction').TxParams} txParams -
 *  The transaction parameters
 * @param {__import__(
 *  '../../shared/constants/transaction'
 * ).TransactionTypeString} type - The type of the transaction being added.
 * @returns {__import__('../../shared/constants/transaction').TransactionMeta}
 */


async function addUnapprovedTransaction(txParams, type) {
  _loglevel.default.debug('background.addUnapprovedTransaction');

  const actionId = (0, _actionQueue.generateActionId)();
  const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [txParams, _app.ORIGIN_METAMASK, type, undefined, actionId], actionId);
  return txMeta;
}

function updateAndApproveTx(txData, dontShowLoadingIndicator) {
  return dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('updateAndApproveTransaction', [txData, actionId], err => {
        dispatch(updateTransactionParams(txData.id, txData.txParams));
        dispatch((0, _send.resetSendState)());

        if (err) {
          dispatch(txError(err));
          dispatch(goHome());

          _loglevel.default.error(err.message);

          reject(err);
          return;
        }

        resolve(txData);
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txData.id));
      dispatch(hideLoadingIndication());
      dispatch(updateCustomNonce(''));
      dispatch(closeCurrentNotificationWindow());
      return txData;
    }).catch(err => {
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}

async function getTransactions(filters = {}) {
  return await (0, _actionQueue.submitRequestToBackground)('getTransactions', [filters]);
}

function completedTx(id) {
  return (dispatch, getState) => {
    const state = getState();
    const {
      unapprovedTxs,
      unapprovedMsgs,
      unapprovedPersonalMsgs,
      unapprovedTypedMessages,
      network,
      provider: {
        chainId
      }
    } = state.metamask;
    const unconfirmedActions = (0, _txHelper.default)(unapprovedTxs, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedTypedMessages, network, chainId);
    const otherUnconfirmedActions = unconfirmedActions.filter(tx => tx.id !== id);
    dispatch({
      type: actionConstants.COMPLETED_TX,
      value: {
        id,
        unconfirmedActionsCount: otherUnconfirmedActions.length
      }
    });
  };
}

function updateTransactionParams(id, txParams) {
  return {
    type: actionConstants.UPDATE_TRANSACTION_PARAMS,
    id,
    value: txParams
  };
}

function txError(err) {
  return {
    type: actionConstants.TRANSACTION_ERROR,
    message: err.message
  };
}

function cancelMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
/**
 * Cancels all of the given messages
 *
 * @param {Array<object>} msgDataList - a list of msg data objects
 * @returns {function(*): Promise<void>}
 */


function cancelMsgs(msgDataList) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      const msgIds = msgDataList.map(id => id);
      const cancellations = msgDataList.map(({
        id,
        type
      }) => new Promise((resolve, reject) => {
        switch (type) {
          case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
            (0, _actionQueue.callBackgroundMethod)('cancelTypedMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
            return;

          case _app.MESSAGE_TYPE.PERSONAL_SIGN:
            (0, _actionQueue.callBackgroundMethod)('cancelPersonalMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
            return;

          case _app.MESSAGE_TYPE.ETH_DECRYPT:
            (0, _actionQueue.callBackgroundMethod)('cancelDecryptMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
            return;

          case _app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY:
            (0, _actionQueue.callBackgroundMethod)('cancelEncryptionPublicKey', [id], err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
            return;

          case _app.MESSAGE_TYPE.ETH_SIGN:
            (0, _actionQueue.callBackgroundMethod)('cancelMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }

              resolve();
            });
            return;

          default:
            reject(new Error(`MetaMask Message Signature: Unknown message type: ${id}`));
        }
      }));
      await Promise.all(cancellations);
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      msgIds.forEach(id => {
        dispatch(completedTx(id));
      });
    } catch (err) {
      _loglevel.default.error(err);
    } finally {
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
        closeNotificationPopup();
      } else {
        dispatch(hideLoadingIndication());
      }
    }
  };
}

function cancelPersonalMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelPersonalMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function cancelDecryptMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelDecryptMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function cancelEncryptionPublicKeyMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelEncryptionPublicKey', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function cancelTypedMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;

    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelTypedMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

function cancelTx(txData, _showLoadingIndication = true) {
  return dispatch => {
    _showLoadingIndication && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('cancelTransaction', [txData.id, actionId], error => {
        if (error) {
          reject(error);
          return;
        }

        resolve();
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txData.id));
      dispatch(hideLoadingIndication());
      dispatch(closeCurrentNotificationWindow());
      return txData;
    }).catch(error => {
      dispatch(hideLoadingIndication());
      throw error;
    });
  };
}
/**
 * Cancels all of the given transactions
 *
 * @param {Array<object>} txDataList - a list of tx data objects
 * @returns {function(*): Promise<void>}
 */


function cancelTxs(txDataList) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      const txIds = txDataList.map(({
        id
      }) => id);
      const cancellations = txIds.map(id => new Promise((resolve, reject) => {
        const actionId = (0, _actionQueue.generateActionId)();
        (0, _actionQueue.callBackgroundMethod)('cancelTransaction', [id, actionId], err => {
          if (err) {
            reject(err);
            return;
          }

          resolve();
        });
      }));
      await Promise.all(cancellations);
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch((0, _send.resetSendState)());
      txIds.forEach(id => {
        dispatch(completedTx(id));
      });
    } finally {
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
        closeNotificationPopup();
      } else {
        dispatch(hideLoadingIndication());
      }
    }
  };
}

function markPasswordForgotten() {
  return async dispatch => {
    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('markPasswordForgotten', [], error => {
          if (error) {
            reject(error);
            return;
          }

          resolve();
        });
      });
    } finally {
      // TODO: handle errors
      dispatch(hideLoadingIndication());
      dispatch(forgotPassword());
      await forceUpdateMetamaskState(dispatch);
    }
  };
}

function unMarkPasswordForgotten() {
  return dispatch => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('unMarkPasswordForgotten', [], () => {
        dispatch(forgotPassword(false));
        resolve();
      });
    }).then(() => forceUpdateMetamaskState(dispatch));
  };
}

function forgotPassword(forgotPasswordState = true) {
  return {
    type: actionConstants.FORGOT_PASSWORD,
    value: forgotPasswordState
  };
}

function closeWelcomeScreen() {
  return {
    type: actionConstants.CLOSE_WELCOME_SCREEN
  };
} //
// unlock screen
//


function unlockInProgress() {
  return {
    type: actionConstants.UNLOCK_IN_PROGRESS
  };
}

function unlockFailed(message) {
  return {
    type: actionConstants.UNLOCK_FAILED,
    value: message
  };
}

function unlockSucceeded(message) {
  return {
    type: actionConstants.UNLOCK_SUCCEEDED,
    value: message
  };
}

function updateMetamaskState(newState) {
  return (dispatch, getState) => {
    var _newState$addressBook, _newState$addressBook2, _currentState$address, _currentState$address2;

    const {
      metamask: currentState
    } = getState();
    const {
      currentLocale,
      selectedAddress,
      provider
    } = currentState;
    const {
      currentLocale: newLocale,
      selectedAddress: newSelectedAddress,
      provider: newProvider
    } = newState;

    if (currentLocale && newLocale && currentLocale !== newLocale) {
      dispatch(updateCurrentLocale(newLocale));
    }

    if (selectedAddress !== newSelectedAddress) {
      dispatch({
        type: actionConstants.SELECTED_ADDRESS_CHANGED
      });
    }

    const newAddressBook = (_newState$addressBook = (_newState$addressBook2 = newState.addressBook) === null || _newState$addressBook2 === void 0 ? void 0 : _newState$addressBook2[newProvider === null || newProvider === void 0 ? void 0 : newProvider.chainId]) !== null && _newState$addressBook !== void 0 ? _newState$addressBook : {};
    const oldAddressBook = (_currentState$address = (_currentState$address2 = currentState.addressBook) === null || _currentState$address2 === void 0 ? void 0 : _currentState$address2[provider === null || provider === void 0 ? void 0 : provider.chainId]) !== null && _currentState$address !== void 0 ? _currentState$address : {};
    const newAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: newState
    });
    const oldAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: currentState
    });
    const newSelectedAccount = newAccounts[newSelectedAddress];
    const oldSelectedAccount = newAccounts[selectedAddress]; // dispatch an ACCOUNT_CHANGED for any account whose balance or other
    // properties changed in this update

    Object.entries(oldAccounts).forEach(([address, oldAccount]) => {
      if (!(0, _lodash.isEqual)(oldAccount, newAccounts[address])) {
        dispatch({
          type: actionConstants.ACCOUNT_CHANGED,
          payload: {
            account: newAccounts[address]
          }
        });
      }
    }); // Also emit an event for the selected account changing, either due to a
    // property update or if the entire account changes.

    if ((0, _lodash.isEqual)(oldSelectedAccount, newSelectedAccount) === false) {
      dispatch({
        type: actionConstants.SELECTED_ACCOUNT_CHANGED,
        payload: {
          account: newSelectedAccount
        }
      });
    } // We need to keep track of changing address book entries


    if ((0, _lodash.isEqual)(oldAddressBook, newAddressBook) === false) {
      dispatch({
        type: actionConstants.ADDRESS_BOOK_UPDATED,
        payload: {
          addressBook: newAddressBook
        }
      });
    } // track when gasFeeEstimates change


    if ((0, _lodash.isEqual)(currentState.gasFeeEstimates, newState.gasFeeEstimates) === false) {
      dispatch({
        type: actionConstants.GAS_FEE_ESTIMATES_UPDATED,
        payload: {
          gasFeeEstimates: newState.gasFeeEstimates,
          gasEstimateType: newState.gasEstimateType
        }
      });
    }

    dispatch({
      type: actionConstants.UPDATE_METAMASK_STATE,
      value: newState
    });

    if (provider.chainId !== newProvider.chainId) {
      dispatch({
        type: actionConstants.CHAIN_CHANGED,
        payload: newProvider.chainId
      }); // We dispatch this action to ensure that the send state stays up to date
      // after the chain changes. This async thunk will fail gracefully in the
      // event that we are not yet on the send flow with a draftTransaction in
      // progress.

      dispatch((0, _send.initializeSendState)({
        chainHasChanged: true
      }));
    }
  };
}

const backgroundSetLocked = () => {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('setLocked', [], error => {
      if (error) {
        reject(error);
        return;
      }

      resolve();
    });
  });
};

function lockMetamask() {
  _loglevel.default.debug(`background.setLocked`);

  return dispatch => {
    dispatch(showLoadingIndication());
    return backgroundSetLocked().then(() => updateMetamaskStateFromBackground()).catch(error => {
      dispatch(displayWarning(error.message));
      return Promise.reject(error);
    }).then(newState => {
      dispatch(updateMetamaskState(newState));
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    }).catch(() => {
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    });
  };
}

async function _setSelectedAddress(address) {
  _loglevel.default.debug(`background.setSelectedAddress`);

  await (0, _actionQueue.submitRequestToBackground)('setSelectedAddress', [address]);
}

function setSelectedAddress(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setSelectedAddress`);

    try {
      await _setSelectedAddress(address);
    } catch (error) {
      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function showAccountDetail(address) {
  return async (dispatch, getState) => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setSelectedAddress`);

    const state = getState();
    const unconnectedAccountAccountAlertIsEnabled = (0, _metamask.getUnconnectedAccountAlertEnabledness)(state);
    const activeTabOrigin = state.activeTab.origin;
    const selectedAddress = (0, _selectors.getSelectedAddress)(state);
    const permittedAccountsForCurrentTab = (0, _selectors.getPermittedAccountsForCurrentTab)(state);
    const currentTabIsConnectedToPreviousAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(selectedAddress);
    const currentTabIsConnectedToNextAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(address);
    const switchingToUnconnectedAddress = currentTabIsConnectedToPreviousAddress && !currentTabIsConnectedToNextAddress;

    try {
      await _setSelectedAddress(address);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch({
      type: actionConstants.SHOW_ACCOUNT_DETAIL,
      value: address
    });

    if (unconnectedAccountAccountAlertIsEnabled && switchingToUnconnectedAddress) {
      dispatch((0, _unconnectedAccount.switchedToUnconnectedAccount)());
      await setUnconnectedAccountAlertShown(activeTabOrigin);
    }
  };
}

function addPermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('addPermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }

        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}

function removePermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('removePermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }

        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}

function showAccountsPage() {
  return {
    type: actionConstants.SHOW_ACCOUNTS_PAGE
  };
}

function showConfTxPage({
  id
} = {}) {
  return {
    type: actionConstants.SHOW_CONF_TX_PAGE,
    id
  };
}

function addToken(address, symbol, decimals, image, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add token without address');
    }

    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('addToken', [address, symbol, decimals, image]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
/**
 * To add detected tokens to state
 *
 * @param newDetectedTokens
 */


function addDetectedTokens(newDetectedTokens) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('addDetectedTokens', [newDetectedTokens]);
    } catch (error) {
      _loglevel.default.error(error);
    } finally {
      await forceUpdateMetamaskState(dispatch);
    }
  };
}
/**
 * To add the tokens user selected to state
 *
 * @param tokensToImport
 */


function addImportedTokens(tokensToImport) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('addImportedTokens', [tokensToImport]);
    } catch (error) {
      _loglevel.default.error(error);
    } finally {
      await forceUpdateMetamaskState(dispatch);
    }
  };
}
/**
 * To add ignored token addresses to state
 *
 * @param options
 * @param options.tokensToIgnore
 * @param options.dontShowLoadingIndicator
 */


function ignoreTokens({
  tokensToIgnore,
  dontShowLoadingIndicator = false
}) {
  const _tokensToIgnore = Array.isArray(tokensToIgnore) ? tokensToIgnore : [tokensToIgnore];

  return async dispatch => {
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('ignoreTokens', [_tokensToIgnore]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
/**
 * To fetch the ERC20 tokens with non-zero balance in a single call
 *
 * @param tokens
 */


async function getBalancesInSingleCall(tokens) {
  return await (0, _actionQueue.submitRequestToBackground)('getBalancesInSingleCall', [tokens]);
}

function addCollectible(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add collectible without address');
    }

    if (!tokenID) {
      throw new Error('MetaMask - Cannot add collectible without tokenID');
    }

    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('addCollectible', [address, tokenID]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

function addCollectibleVerifyOwnership(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add collectible without address');
    }

    if (!tokenID) {
      throw new Error('MetaMask - Cannot add collectible without tokenID');
    }

    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('addCollectibleVerifyOwnership', [address, tokenID]);
    } catch (error) {
      if (error.message.includes('This collectible is not owned by the user') || error.message.includes('Unable to verify ownership.')) {
        throw error;
      } else {
        _loglevel.default.error(error);

        dispatch(displayWarning(error.message));
      }
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

function removeAndIgnoreCollectible(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot ignore collectible without address');
    }

    if (!tokenID) {
      throw new Error('MetaMask - Cannot ignore collectible without tokenID');
    }

    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('removeAndIgnoreCollectible', [address, tokenID]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

function removeCollectible(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot remove collectible without address');
    }

    if (!tokenID) {
      throw new Error('MetaMask - Cannot remove collectible without tokenID');
    }

    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('removeCollectible', [address, tokenID]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

async function checkAndUpdateAllCollectiblesOwnershipStatus() {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateAllCollectiblesOwnershipStatus');
}

async function isCollectibleOwner(ownerAddress, collectibleAddress, collectibleId) {
  return await (0, _actionQueue.submitRequestToBackground)('isCollectibleOwner', [ownerAddress, collectibleAddress, collectibleId]);
}

async function checkAndUpdateSingleCollectibleOwnershipStatus(collectible) {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateSingleCollectibleOwnershipStatus', [collectible, false]);
}

async function getTokenStandardAndDetails(address, userAddress, tokenId) {
  return await (0, _actionQueue.submitRequestToBackground)('getTokenStandardAndDetails', [address, userAddress, tokenId]);
}

function addTokens(tokens) {
  return dispatch => {
    if (Array.isArray(tokens)) {
      return Promise.all(tokens.map(({
        address,
        symbol,
        decimals
      }) => dispatch(addToken(address, symbol, decimals))));
    }

    return Promise.all(Object.entries(tokens).map(([_, {
      address,
      symbol,
      decimals
    }]) => dispatch(addToken(address, symbol, decimals))));
  };
}

function rejectWatchAsset(suggestedAssetID) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await (0, _actionQueue.submitRequestToBackground)('rejectWatchAsset', [suggestedAssetID]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(closeCurrentNotificationWindow());
  };
}

function acceptWatchAsset(suggestedAssetID) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await (0, _actionQueue.submitRequestToBackground)('acceptWatchAsset', [suggestedAssetID]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }

    dispatch(closeCurrentNotificationWindow());
  };
}

function clearPendingTokens() {
  return {
    type: actionConstants.CLEAR_PENDING_TOKENS
  };
}

function createCancelTransaction(txId, customGasSettings, options) {
  _loglevel.default.debug('background.cancelTransaction');

  let newTxId;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createCancelTransaction', [txId, customGasSettings, { ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        const {
          currentNetworkTxList
        } = newState;
        const {
          id
        } = currentNetworkTxList[currentNetworkTxList.length - 1];
        newTxId = id;
        resolve(newState);
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTxId);
  };
}

function createSpeedUpTransaction(txId, customGasSettings, options) {
  _loglevel.default.debug('background.createSpeedUpTransaction');

  let newTx;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, { ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        const {
          currentNetworkTxList
        } = newState;
        newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
        resolve(newState);
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
}

function createRetryTransaction(txId, customGasSettings) {
  let newTx;
  return dispatch => {
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, {
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        const {
          currentNetworkTxList
        } = newState;
        newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
        resolve(newState);
      });
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
} //
// config
//


function setProviderType(type) {
  return async dispatch => {
    _loglevel.default.debug(`background.setProviderType`, type);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setProviderType', [type]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
      return;
    }

    dispatch(updateProviderType(type));
  };
}

function updateProviderType(type) {
  return {
    type: actionConstants.SET_PROVIDER_TYPE,
    value: type
  };
}

function updateAndSetCustomRpc(newRpc, chainId, ticker = 'ETH', nickname, rpcPrefs) {
  return async dispatch => {
    _loglevel.default.debug(`background.updateAndSetCustomRpc: ${newRpc} ${chainId} ${ticker} ${nickname}`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('updateAndSetCustomRpc', [newRpc, chainId, ticker, nickname || newRpc, rpcPrefs]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
      return;
    }

    dispatch({
      type: actionConstants.SET_RPC_TARGET,
      value: newRpc
    });
  };
}

function editRpc(oldRpc, newRpc, chainId, ticker = 'ETH', nickname, rpcPrefs) {
  return async dispatch => {
    _loglevel.default.debug(`background.delRpcTarget: ${oldRpc}`);

    try {
      (0, _actionQueue.submitRequestToBackground)('delCustomRpc', [oldRpc]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem removing network!'));
      return;
    }

    try {
      await (0, _actionQueue.submitRequestToBackground)('updateAndSetCustomRpc', [newRpc, chainId, ticker, nickname || newRpc, rpcPrefs]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
      return;
    }

    dispatch({
      type: actionConstants.SET_RPC_TARGET,
      value: newRpc
    });
  };
}

function setRpcTarget(newRpc, chainId, ticker = 'ETH', nickname) {
  return async dispatch => {
    _loglevel.default.debug(`background.setRpcTarget: ${newRpc} ${chainId} ${ticker} ${nickname}`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setCustomRpc', [newRpc, chainId, ticker, nickname || newRpc]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}

function rollbackToPreviousProvider() {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('rollbackToPreviousProvider');
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}

function delRpcTarget(oldRpc) {
  return dispatch => {
    _loglevel.default.debug(`background.delRpcTarget: ${oldRpc}`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('delCustomRpc', [oldRpc], err => {
        if (err) {
          _loglevel.default.error(err);

          dispatch(displayWarning('Had a problem removing network!'));
          reject(err);
          return;
        }

        resolve();
      });
    });
  };
} // Calls the addressBookController to add a new address.


function addToAddressBook(recipient, nickname = '', memo = '') {
  _loglevel.default.debug(`background.addToAddressBook`);

  return async (dispatch, getState) => {
    const {
      chainId
    } = getState().metamask.provider;
    let set;

    try {
      set = await (0, _actionQueue.submitRequestToBackground)('setAddressBook', [(0, _hexstringUtils.toChecksumHexAddress)(recipient), nickname, chainId, memo]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Address book failed to update'));
      throw error;
    }

    if (!set) {
      dispatch(displayWarning('Address book failed to update'));
    }
  };
}
/**
 * @description Calls the addressBookController to remove an existing address.
 * @param chainId
 * @param {string} addressToRemove - Address of the entry to remove from the address book
 */


function removeFromAddressBook(chainId, addressToRemove) {
  _loglevel.default.debug(`background.removeFromAddressBook`);

  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('removeFromAddressBook', [chainId, (0, _hexstringUtils.toChecksumHexAddress)(addressToRemove)]);
  };
}

function showNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_OPEN
  };
}

function hideNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_CLOSE
  };
}

function showModal(payload) {
  return {
    type: actionConstants.MODAL_OPEN,
    payload
  };
}

function hideModal(payload) {
  return {
    type: actionConstants.MODAL_CLOSE,
    payload
  };
}

function closeCurrentNotificationWindow() {
  return (_, getState) => {
    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION && !(0, _confirmTx.hasUnconfirmedTransactions)(getState())) {
      closeNotificationPopup();
    }
  };
}

function showAlert(msg) {
  return {
    type: actionConstants.ALERT_OPEN,
    value: msg
  };
}

function hideAlert() {
  return {
    type: actionConstants.ALERT_CLOSE
  };
}

function updateCollectibleDropDownState(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('updateCollectibleDropDownState', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}
/**
 * This action will receive two types of values via qrCodeData
 * an object with the following structure {type, values}
 * or null (used to clear the previous value)
 *
 * @param qrCodeData
 */


function qrCodeDetected(qrCodeData) {
  return async dispatch => {
    await dispatch({
      type: actionConstants.QR_CODE_DETECTED,
      value: qrCodeData
    }); // If on the send page, the send slice will listen for the QR_CODE_DETECTED
    // action and update its state. Address changes need to recompute gasLimit
    // so we fire this method so that the send page gasLimit can be recomputed

    dispatch((0, _send.computeEstimatedGasLimit)());
  };
}

function showLoadingIndication(message) {
  return {
    type: actionConstants.SHOW_LOADING,
    value: message
  };
}

function setHardwareWalletDefaultHdPath({
  device,
  path
}) {
  return {
    type: actionConstants.SET_HARDWARE_WALLET_DEFAULT_HD_PATH,
    value: {
      device,
      path
    }
  };
}

function hideLoadingIndication() {
  return {
    type: actionConstants.HIDE_LOADING
  };
}

function displayWarning(text) {
  return {
    type: actionConstants.DISPLAY_WARNING,
    value: text
  };
}

function hideWarning() {
  return {
    type: actionConstants.HIDE_WARNING
  };
}

function exportAccount(password, address) {
  return function (dispatch) {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.verifyPassword`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in verifying password.');

          dispatch(hideLoadingIndication());
          dispatch(displayWarning('Incorrect Password.'));
          reject(err);
          return;
        }

        _loglevel.default.debug(`background.exportAccount`);

        (0, _actionQueue.callBackgroundMethod)('exportAccount', [address], function (err2, result) {
          dispatch(hideLoadingIndication());

          if (err2) {
            _loglevel.default.error(err2);

            dispatch(displayWarning('Had a problem exporting the account.'));
            reject(err2);
            return;
          }

          dispatch(showPrivateKey(result));
          resolve(result);
        });
      });
    });
  };
}

function exportAccounts(password, addresses) {
  return function (dispatch) {
    _loglevel.default.debug(`background.verifyPassword`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in submitting password.');

          reject(err);
          return;
        }

        _loglevel.default.debug(`background.exportAccounts`);

        const accountPromises = addresses.map(address => new Promise((resolve2, reject2) => (0, _actionQueue.callBackgroundMethod)('exportAccount', [address], function (err2, result) {
          if (err2) {
            _loglevel.default.error(err2);

            dispatch(displayWarning('Had a problem exporting the account.'));
            reject2(err2);
            return;
          }

          resolve2(result);
        })));
        resolve(Promise.all(accountPromises));
      });
    });
  };
}

function showPrivateKey(key) {
  return {
    type: actionConstants.SHOW_PRIVATE_KEY,
    value: key
  };
}

function setAccountLabel(account, label) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setAccountLabel`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setAccountLabel', [account, label], err => {
        dispatch(hideLoadingIndication());

        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        dispatch({
          type: actionConstants.SET_ACCOUNT_LABEL,
          value: {
            account,
            label
          }
        });
        resolve(account);
      });
    });
  };
}

function clearAccountDetails() {
  return {
    type: actionConstants.CLEAR_ACCOUNT_DETAILS
  };
}

function showSendTokenPage() {
  return {
    type: actionConstants.SHOW_SEND_TOKEN_PAGE
  };
}

function buy(opts) {
  return async dispatch => {
    const url = await (0, _buyUrl.default)(opts);

    if (url) {
      global.platform.openTab({
        url
      });
      dispatch({
        type: actionConstants.BUY
      });
    }
  };
}

function setFeatureFlag(feature, activated, notificationType) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setFeatureFlag', [feature, activated], (err, updatedFeatureFlags) => {
        dispatch(hideLoadingIndication());

        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        dispatch(updateFeatureFlags(updatedFeatureFlags));
        notificationType && dispatch(showModal({
          name: notificationType
        }));
        resolve(updatedFeatureFlags);
      });
    });
  };
}

function updateFeatureFlags(updatedFeatureFlags) {
  return {
    type: actionConstants.UPDATE_FEATURE_FLAGS,
    value: updatedFeatureFlags
  };
}

function setPreference(preference, value) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setPreference', [preference, value], (err, updatedPreferences) => {
        dispatch(hideLoadingIndication());

        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        dispatch(updatePreferences(updatedPreferences));
        resolve(updatedPreferences);
      });
    });
  };
}

function updatePreferences(value) {
  return {
    type: actionConstants.UPDATE_PREFERENCES,
    value
  };
}

function setDefaultHomeActiveTabName(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setDefaultHomeActiveTabName', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setUseNativeCurrencyAsPrimaryCurrencyPreference(value) {
  return setPreference('useNativeCurrencyAsPrimaryCurrency', value);
}

function setHideZeroBalanceTokens(value) {
  return setPreference('hideZeroBalanceTokens', value);
}

function setShowFiatConversionOnTestnetsPreference(value) {
  return setPreference('showFiatInTestnets', value);
}

function setShowTestNetworks(value) {
  return setPreference('showTestNetworks', value);
}

function setAutoLockTimeLimit(value) {
  return setPreference('autoLockTimeLimit', value);
}

function setCompletedOnboarding() {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await (0, _actionQueue.submitRequestToBackground)('completeOnboarding');
      dispatch(completeOnboarding());
    } catch (err) {
      dispatch(displayWarning(err.message));
      throw err;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function completeOnboarding() {
  return {
    type: actionConstants.COMPLETE_ONBOARDING
  };
}

function setMouseUserState(isMouseUser) {
  return {
    type: actionConstants.SET_MOUSE_USER_STATE,
    value: isMouseUser
  };
}

async function forceUpdateMetamaskState(dispatch) {
  _loglevel.default.debug(`background.getState`);

  let newState;

  try {
    newState = await (0, _actionQueue.submitRequestToBackground)('getState');
  } catch (error) {
    dispatch(displayWarning(error.message));
    throw error;
  }

  dispatch(updateMetamaskState(newState));
  return newState;
}

function toggleAccountMenu() {
  return {
    type: actionConstants.TOGGLE_ACCOUNT_MENU
  };
}

function setParticipateInMetaMetrics(val) {
  return dispatch => {
    _loglevel.default.debug(`background.setParticipateInMetaMetrics`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setParticipateInMetaMetrics', [val], (err, metaMetricsId) => {
        _loglevel.default.debug(err);

        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        dispatch({
          type: actionConstants.SET_PARTICIPATE_IN_METAMETRICS,
          value: val
        });
        resolve([val, metaMetricsId]);
      });
    });
  };
}

function setUseBlockie(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setUseBlockie`);

    (0, _actionQueue.callBackgroundMethod)('setUseBlockie', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
    dispatch({
      type: actionConstants.SET_USE_BLOCKIE,
      value: val
    });
  };
}

function setUseNonceField(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setUseNonceField`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setUseNonceField', [val]);
    } catch (error) {
      dispatch(displayWarning(error.message));
    }

    dispatch(hideLoadingIndication());
    dispatch({
      type: actionConstants.SET_USE_NONCEFIELD,
      value: val
    });
  };
}

function setUsePhishDetect(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setUsePhishDetect`);

    (0, _actionQueue.callBackgroundMethod)('setUsePhishDetect', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function setUseTokenDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setUseTokenDetection`);

    (0, _actionQueue.callBackgroundMethod)('setUseTokenDetection', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function setUseCollectibleDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setUseCollectibleDetection`);

    (0, _actionQueue.callBackgroundMethod)('setUseCollectibleDetection', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function setOpenSeaEnabled(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setOpenSeaEnabled`);

    (0, _actionQueue.callBackgroundMethod)('setOpenSeaEnabled', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function detectCollectibles() {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.detectCollectibles`);

    await (0, _actionQueue.submitRequestToBackground)('detectCollectibles');
    dispatch(hideLoadingIndication());
    await forceUpdateMetamaskState(dispatch);
  };
}

function setAdvancedGasFee(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setAdvancedGasFee`);

    (0, _actionQueue.callBackgroundMethod)('setAdvancedGasFee', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function setEIP1559V2Enabled(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setEIP1559V2Enabled`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setEIP1559V2Enabled', [val]);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function setTheme(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setTheme`);

    try {
      await (0, _actionQueue.submitRequestToBackground)('setTheme', [val]);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function setIpfsGateway(val) {
  return dispatch => {
    dispatch(showLoadingIndication());

    _loglevel.default.debug(`background.setIpfsGateway`);

    (0, _actionQueue.callBackgroundMethod)('setIpfsGateway', [val], err => {
      dispatch(hideLoadingIndication());

      if (err) {
        dispatch(displayWarning(err.message));
      } else {
        dispatch({
          type: actionConstants.SET_IPFS_GATEWAY,
          value: val
        });
      }
    });
  };
}

function updateCurrentLocale(key) {
  return async dispatch => {
    dispatch(showLoadingIndication());

    try {
      await (0, _i18nHelper.loadRelativeTimeFormatLocaleData)(key);
      const localeMessages = await (0, _i18nHelper.fetchLocale)(key);
      const textDirection = await (0, _actionQueue.submitRequestToBackground)('setCurrentLocale', [key]);
      await (0, _switchDirection.default)(textDirection);
      dispatch(setCurrentLocale(key, localeMessages));
    } catch (error) {
      dispatch(displayWarning(error.message));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

function setCurrentLocale(locale, messages) {
  return {
    type: actionConstants.SET_CURRENT_LOCALE,
    value: {
      locale,
      messages
    }
  };
}

function setPendingTokens(pendingTokens) {
  const {
    customToken = {},
    selectedTokens = {},
    tokenAddressList = []
  } = pendingTokens;
  const {
    address,
    symbol,
    decimals
  } = customToken;
  const tokens = address && symbol && decimals >= 0 <= 36 ? { ...selectedTokens,
    [address]: { ...customToken,
      isCustom: true
    }
  } : selectedTokens;
  Object.keys(tokens).forEach(tokenAddress => {
    tokens[tokenAddress].unlisted = !tokenAddressList.find(addr => (0, _stringUtils.isEqualCaseInsensitive)(addr, tokenAddress));
  });
  return {
    type: actionConstants.SET_PENDING_TOKENS,
    payload: tokens
  };
} // Swaps


function setSwapsLiveness(swapsLiveness) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsLiveness', [swapsLiveness]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsFeatureFlags(featureFlags) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsFeatureFlags', [featureFlags]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function fetchAndSetQuotes(fetchParams, fetchParamsMetaData) {
  return async dispatch => {
    const [quotes, selectedAggId] = await (0, _actionQueue.submitRequestToBackground)('fetchAndSetQuotes', [fetchParams, fetchParamsMetaData]);
    await forceUpdateMetamaskState(dispatch);
    return [quotes, selectedAggId];
  };
}

function setSelectedQuoteAggId(aggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSelectedQuoteAggId', [aggId]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsTokens(tokens) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTokens', [tokens]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function clearSwapsQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('clearSwapsQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}

function resetBackgroundSwapsState() {
  return async dispatch => {
    const id = await (0, _actionQueue.submitRequestToBackground)('resetSwapsState');
    await forceUpdateMetamaskState(dispatch);
    return id;
  };
}

function setCustomApproveTxData(data) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setCustomApproveTxData', [data]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsTxGasPrice(gasPrice) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasPrice', [gasPrice]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsTxGasLimit(gasLimit) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit, true]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function updateCustomSwapsEIP1559GasParams({
  gasLimit,
  maxFeePerGas,
  maxPriorityFeePerGas
}) {
  return async dispatch => {
    await Promise.all([(0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePerGas', [maxFeePerGas]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePriorityPerGas', [maxPriorityFeePerGas])]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function updateSwapsUserFeeLevel(swapsCustomUserFeeLevel) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsUserFeeLevel', [swapsCustomUserFeeLevel]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsQuotesPollingLimitEnabled(quotesPollingLimitEnabled) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsQuotesPollingLimitEnabled', [quotesPollingLimitEnabled]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function customSwapsGasParamsUpdated(gasLimit, gasPrice) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasPrice', [gasPrice]);
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit, true]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setTradeTxId(tradeTxId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setTradeTxId', [tradeTxId]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setApproveTxId(approveTxId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setApproveTxId', [approveTxId]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function safeRefetchQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('safeRefetchQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}

function stopPollingForQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('stopPollingForQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}

function setBackgroundSwapRouteState(routeState) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setBackgroundSwapRouteState', [routeState]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function resetSwapsPostFetchState() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resetPostFetchState');
    await forceUpdateMetamaskState(dispatch);
  };
}

function setSwapsErrorKey(errorKey) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsErrorKey', [errorKey]);
    await forceUpdateMetamaskState(dispatch);
  };
}

function setInitialGasEstimate(initialAggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setInitialGasEstimate', [initialAggId]);
    await forceUpdateMetamaskState(dispatch);
  };
} // Permissions


function requestAccountsPermissionWithId(origin) {
  return async dispatch => {
    const id = await (0, _actionQueue.submitRequestToBackground)('requestAccountsPermissionWithId', [origin]);
    await forceUpdateMetamaskState(dispatch);
    return id;
  };
}
/**
 * Approves the permissions request.
 *
 * @param {object} request - The permissions request to approve.
 */


function approvePermissionsRequest(request) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('approvePermissionsRequest', [request], err => {
      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}
/**
 * Rejects the permissions request with the given ID.
 *
 * @param {string} requestId - The id of the request to be rejected
 */


function rejectPermissionsRequest(requestId) {
  return dispatch => {
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('rejectPermissionsRequest', [requestId], err => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}
/**
 * Clears the given permissions for the given origin.
 *
 * @param subjects
 */


function removePermissionsFor(subjects) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('removePermissionsFor', [subjects], err => {
      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
} // Pending Approvals

/**
 * Resolves a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param {string} id - The pending approval id
 * @param {any} [value] - The value required to confirm a pending approval
 */


function resolvePendingApproval(id, value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resolvePendingApproval', [id, value]); // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being accepted

    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);

    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}
/**
 * Rejects a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param {string} id - The pending approval id
 * @param {Error} [error] - The error to throw when rejecting the approval
 */


function rejectPendingApproval(id, error) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('rejectPendingApproval', [id, error]); // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being rejected

    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);

    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}

function setFirstTimeFlowType(type) {
  return dispatch => {
    _loglevel.default.debug(`background.setFirstTimeFlowType`);

    (0, _actionQueue.callBackgroundMethod)('setFirstTimeFlowType', [type], err => {
      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
    dispatch({
      type: actionConstants.SET_FIRST_TIME_FLOW_TYPE,
      value: type
    });
  };
}

function setSelectedSettingsRpcUrl(newRpcUrl) {
  return {
    type: actionConstants.SET_SELECTED_SETTINGS_RPC_URL,
    value: newRpcUrl
  };
}

function setNewNetworkAdded(newNetworkAdded) {
  return {
    type: actionConstants.SET_NEW_NETWORK_ADDED,
    value: newNetworkAdded
  };
}

function setNewCollectibleAddedMessage(newCollectibleAddedMessage) {
  return {
    type: actionConstants.SET_NEW_COLLECTIBLE_ADDED_MESSAGE,
    value: newCollectibleAddedMessage
  };
}

function setNewTokensImported(newTokensImported) {
  return {
    type: actionConstants.SET_NEW_TOKENS_IMPORTED,
    value: newTokensImported
  };
}

function setLastActiveTime() {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('setLastActiveTime', [], err => {
      if (err) {
        dispatch(displayWarning(err.message));
      }
    });
  };
}

function setDismissSeedBackUpReminder(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setDismissSeedBackUpReminder', [value]);
    dispatch(hideLoadingIndication());
  };
}

function setConnectedStatusPopoverHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setConnectedStatusPopoverHasBeenShown', [], err => {
      if (err) {
        throw new Error(err.message);
      }
    });
  };
}

function setRecoveryPhraseReminderHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderHasBeenShown', [], err => {
      if (err) {
        throw new Error(err.message);
      }
    });
  };
}

function setRecoveryPhraseReminderLastShown(lastShown) {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderLastShown', [lastShown], err => {
      if (err) {
        throw new Error(err.message);
      }
    });
  };
}

function loadingMethodDataStarted() {
  return {
    type: actionConstants.LOADING_METHOD_DATA_STARTED
  };
}

function loadingMethodDataFinished() {
  return {
    type: actionConstants.LOADING_METHOD_DATA_FINISHED
  };
}

function getContractMethodData(data = '') {
  return (dispatch, getState) => {
    const prefixedData = (0, _util.addHexPrefix)(data);
    const fourBytePrefix = prefixedData.slice(0, 10);

    if (fourBytePrefix.length < 10) {
      return Promise.resolve({});
    }

    const {
      knownMethodData
    } = getState().metamask;

    if (knownMethodData && knownMethodData[fourBytePrefix] && Object.keys(knownMethodData[fourBytePrefix]).length !== 0) {
      return Promise.resolve(knownMethodData[fourBytePrefix]);
    }

    dispatch(loadingMethodDataStarted());

    _loglevel.default.debug(`loadingMethodData`);

    return (0, _transactions.getMethodDataAsync)(fourBytePrefix).then(({
      name,
      params
    }) => {
      dispatch(loadingMethodDataFinished());
      (0, _actionQueue.callBackgroundMethod)('addKnownMethodData', [fourBytePrefix, {
        name,
        params
      }], err => {
        if (err) {
          dispatch(displayWarning(err.message));
        }
      });
      return {
        name,
        params
      };
    });
  };
}

function loadingTokenParamsStarted() {
  return {
    type: actionConstants.LOADING_TOKEN_PARAMS_STARTED
  };
}

function loadingTokenParamsFinished() {
  return {
    type: actionConstants.LOADING_TOKEN_PARAMS_FINISHED
  };
}

function setSeedPhraseBackedUp(seedPhraseBackupState) {
  return dispatch => {
    _loglevel.default.debug(`background.setSeedPhraseBackedUp`);

    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setSeedPhraseBackedUp', [seedPhraseBackupState], err => {
        if (err) {
          dispatch(displayWarning(err.message));
          reject(err);
          return;
        }

        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}

function setNextNonce(nextNonce) {
  return {
    type: actionConstants.SET_NEXT_NONCE,
    value: nextNonce
  };
}

function getNextNonce() {
  return async (dispatch, getState) => {
    const address = getState().metamask.selectedAddress;
    let nextNonce;

    try {
      nextNonce = await (0, _actionQueue.submitRequestToBackground)('getNextNonce', [address]);
    } catch (error) {
      dispatch(displayWarning(error.message));
      throw error;
    }

    dispatch(setNextNonce(nextNonce));
    return nextNonce;
  };
}

function setRequestAccountTabIds(requestAccountTabIds) {
  return {
    type: actionConstants.SET_REQUEST_ACCOUNT_TABS,
    value: requestAccountTabIds
  };
}

function getRequestAccountTabIds() {
  return async dispatch => {
    const requestAccountTabIds = await (0, _actionQueue.submitRequestToBackground)('getRequestAccountTabIds');
    dispatch(setRequestAccountTabIds(requestAccountTabIds));
  };
}

function setOpenMetamaskTabsIDs(openMetaMaskTabIDs) {
  return {
    type: actionConstants.SET_OPEN_METAMASK_TAB_IDS,
    value: openMetaMaskTabIDs
  };
}

function getOpenMetamaskTabsIds() {
  return async dispatch => {
    const openMetaMaskTabIDs = await (0, _actionQueue.submitRequestToBackground)('getOpenMetamaskTabsIds');
    dispatch(setOpenMetamaskTabsIDs(openMetaMaskTabIDs));
  };
}

function setCurrentWindowTab(currentWindowTab) {
  return {
    type: actionConstants.SET_CURRENT_WINDOW_TAB,
    value: currentWindowTab
  };
}

function getCurrentWindowTab() {
  return async dispatch => {
    const currentWindowTab = await global.platform.currentTab();
    dispatch(setCurrentWindowTab(currentWindowTab));
  };
}

function setLedgerTransportPreference(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setLedgerTransportPreference', [value]);
    dispatch(hideLoadingIndication());
  };
}

async function attemptLedgerTransportCreation() {
  return await (0, _actionQueue.submitRequestToBackground)('attemptLedgerTransportCreation');
}

function captureSingleException(error) {
  return async (dispatch, getState) => {
    const {
      singleExceptions
    } = getState().appState;

    if (!(error in singleExceptions)) {
      dispatch({
        type: actionConstants.CAPTURE_SINGLE_EXCEPTION,
        value: error
      });
      (0, _browser.captureException)(Error(error));
    }
  };
} // Wrappers around promisifedBackground

/**
 * The "actions" below are not actions nor action creators. They cannot use
 * dispatch nor should they be dispatched when used. Instead they can be
 * called directly. These wrappers will be moved into their location at some
 * point in the future.
 */


function estimateGas(params) {
  return (0, _actionQueue.submitRequestToBackground)('estimateGas', [params]);
}

async function updateTokenType(tokenAddress) {
  let token = {};

  try {
    token = await (0, _actionQueue.submitRequestToBackground)('updateTokenType', [tokenAddress]);
  } catch (error) {
    _loglevel.default.error(error);
  }

  return token;
}
/**
 * initiates polling for gas fee estimates.
 *
 * @returns {string} a unique identify of the polling request that can be used
 *  to remove that request from consideration of whether polling needs to
 *  continue.
 */


function getGasFeeEstimatesAndStartPolling() {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeEstimatesAndStartPolling');
}
/**
 * Informs the GasFeeController that a specific token is no longer requiring
 * gas fee estimates. If all tokens unsubscribe the controller stops polling.
 *
 * @param {string} pollToken - Poll token received from calling
 *  `getGasFeeEstimatesAndStartPolling`.
 */


function disconnectGasFeeEstimatePoller(pollToken) {
  return (0, _actionQueue.submitRequestToBackground)('disconnectGasFeeEstimatePoller', [pollToken]);
}

async function addPollingTokenToAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('addPollingTokenToAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}

async function removePollingTokenFromAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('removePollingTokenFromAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}

function getGasFeeTimeEstimate(maxPriorityFeePerGas, maxFeePerGas) {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeTimeEstimate', [maxPriorityFeePerGas, maxFeePerGas]);
}

async function closeNotificationPopup() {
  await (0, _actionQueue.submitRequestToBackground)('markNotificationPopupAsAutomaticallyClosed');
  global.platform.closeCurrentWindow();
} // MetaMetrics

/**
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsEventPayload} MetaMetricsEventPayload
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsPagePayload} MetaMetricsPagePayload
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsPageOptions} MetaMetricsPageOptions
 */

/**
 * @param {MetaMetricsEventPayload} payload - details of the event to track
 * @param {MetaMetricsEventOptions} options - options for routing/handling of event
 * @returns {Promise<void>}
 */


function trackMetaMetricsEvent(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsEvent', [{ ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}

function createEventFragment(options) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createEventFragment', [{ ...options,
    actionId
  }]);
}

function createTransactionEventFragment(transactionId, event) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createTransactionEventFragment', [transactionId, event, actionId]);
}

function updateEventFragment(id, payload) {
  return (0, _actionQueue.submitRequestToBackground)('updateEventFragment', [id, payload]);
}

function finalizeEventFragment(id, options) {
  return (0, _actionQueue.submitRequestToBackground)('finalizeEventFragment', [id, options]);
}
/**
 * @param {MetaMetricsPagePayload} payload - details of the page viewed
 * @param {MetaMetricsPageOptions} options - options for handling the page view
 */


function trackMetaMetricsPage(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsPage', [{ ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}

function updateViewedNotifications(notificationIdViewedStatusMap) {
  return (0, _actionQueue.submitRequestToBackground)('updateViewedNotifications', [notificationIdViewedStatusMap]);
}

async function setAlertEnabledness(alertId, enabledness) {
  await (0, _actionQueue.submitRequestToBackground)('setAlertEnabledness', [alertId, enabledness]);
}

async function setUnconnectedAccountAlertShown(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setUnconnectedAccountAlertShown', [origin]);
}

async function setWeb3ShimUsageAlertDismissed(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setWeb3ShimUsageAlertDismissed', [origin]);
} // Smart Transactions Controller


async function setSmartTransactionsOptInStatus(optInState, prevOptInState) {
  trackMetaMetricsEvent({
    actionId: (0, _actionQueue.generateActionId)(),
    event: 'STX OptIn',
    category: _metametrics.EVENT.CATEGORIES.SWAPS,
    sensitiveProperties: {
      stx_enabled: true,
      current_stx_enabled: true,
      stx_user_opt_in: optInState,
      stx_prev_user_opt_in: prevOptInState
    }
  });
  await (0, _actionQueue.submitRequestToBackground)('setSmartTransactionsOptInStatus', [optInState]);
}

function clearSmartTransactionFees() {
  (0, _actionQueue.submitRequestToBackground)('clearSmartTransactionFees');
}

function fetchSmartTransactionFees(unsignedTransaction, approveTxParams) {
  return async dispatch => {
    if (approveTxParams) {
      approveTxParams.value = '0x0';
    }

    try {
      const smartTransactionFees = await await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionFees', [unsignedTransaction, approveTxParams]);
      dispatch({
        type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
      return smartTransactionFees;
    } catch (e) {
      _loglevel.default.error(e);

      if (e.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }

      throw e;
    }
  };
}

const createSignedTransactions = async (unsignedTransaction, fees, areCancelTransactions) => {
  const unsignedTransactionsWithFees = fees.map(fee => {
    const unsignedTransactionWithFees = { ...unsignedTransaction,
      maxFeePerGas: (0, _transactionsControllerUtils.decimalToHex)(fee.maxFeePerGas),
      maxPriorityFeePerGas: (0, _transactionsControllerUtils.decimalToHex)(fee.maxPriorityFeePerGas),
      gas: areCancelTransactions ? (0, _transactionsControllerUtils.decimalToHex)(21000) // It has to be 21000 for cancel transactions, otherwise the API would reject it.
      : unsignedTransaction.gas,
      value: unsignedTransaction.value
    };

    if (areCancelTransactions) {
      unsignedTransactionWithFees.to = unsignedTransactionWithFees.from;
      unsignedTransactionWithFees.data = '0x';
    }

    return unsignedTransactionWithFees;
  });
  const signedTransactions = await (0, _actionQueue.submitRequestToBackground)('approveTransactionsWithSameNonce', [unsignedTransactionsWithFees]);
  return signedTransactions;
};

function signAndSendSmartTransaction({
  unsignedTransaction,
  smartTransactionFees
}) {
  return async dispatch => {
    const signedTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.fees);
    const signedCanceledTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.cancelFees, true);

    try {
      const response = await (0, _actionQueue.submitRequestToBackground)('submitSignedTransactions', [{
        signedTransactions,
        signedCanceledTransactions,
        txParams: unsignedTransaction
      }]); // Returns e.g.: { uuid: 'dP23W7c2kt4FK9TmXOkz1UM2F20' }

      return response.uuid;
    } catch (e) {
      _loglevel.default.error(e);

      if (e.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }

      throw e;
    }
  };
}

function updateSmartTransaction(uuid, txData) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('updateSmartTransaction', [{
        uuid,
        ...txData
      }]);
    } catch (e) {
      _loglevel.default.error(e);

      if (e.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }

      throw e;
    }
  };
}

function setSmartTransactionsRefreshInterval(refreshInterval) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setStatusRefreshInterval', [refreshInterval]);
    } catch (e) {
      _loglevel.default.error(e);
    }
  };
}

function cancelSmartTransaction(uuid) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('cancelSmartTransaction', [uuid]);
    } catch (e) {
      _loglevel.default.error(e);

      if (e.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }

      throw e;
    }
  };
}

function fetchSmartTransactionsLiveness() {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionsLiveness');
    } catch (e) {
      _loglevel.default.error(e);
    }
  };
}

function dismissSmartTransactionsErrorMessage() {
  return {
    type: actionConstants.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE
  };
} // DetectTokenController


async function detectNewTokens() {
  return (0, _actionQueue.submitRequestToBackground)('detectNewTokens');
} // App state


function hideTestNetMessage() {
  return (0, _actionQueue.submitRequestToBackground)('setShowTestnetMessageInDropdown', [false]);
}

function hidePortfolioTooltip() {
  return (0, _actionQueue.submitRequestToBackground)('setShowPortfolioTooltip', [false]);
}

function setCollectiblesDetectionNoticeDismissed() {
  return (0, _actionQueue.submitRequestToBackground)('setCollectiblesDetectionNoticeDismissed', [true]);
}

function setEnableEIP1559V2NoticeDismissed() {
  return (0, _actionQueue.submitRequestToBackground)('setEnableEIP1559V2NoticeDismissed', [true]);
}

function setImprovedTokenAllowanceEnabled(improvedTokenAllowanceEnabled) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setImprovedTokenAllowanceEnabled', [improvedTokenAllowanceEnabled]);
    } catch (error) {
      _loglevel.default.error(error);
    }
  };
}

function setFirstTimeUsedNetwork(chainId) {
  return (0, _actionQueue.submitRequestToBackground)('setFirstTimeUsedNetwork', [chainId]);
} // QR Hardware Wallets


async function submitQRHardwareCryptoHDKey(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoHDKey', [cbor]);
}

async function submitQRHardwareCryptoAccount(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoAccount', [cbor]);
}

function cancelSyncQRHardware() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelSyncQRHardware');
  };
}

async function submitQRHardwareSignature(requestId, cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareSignature', [requestId, cbor]);
}

function cancelQRHardwareSignRequest() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelQRHardwareSignRequest');
  };
}

function addCustomNetwork(customRpc) {
  return async dispatch => {
    try {
      dispatch((0, _app2.setNewCustomNetworkAdded)(customRpc));
      await (0, _actionQueue.submitRequestToBackground)('addCustomNetwork', [customRpc, (0, _actionQueue.generateActionId)()]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}

function requestAddNetworkApproval(customRpc, originIsMetaMask) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('requestAddNetworkApproval', [customRpc, originIsMetaMask]);
    } catch (error) {
      _loglevel.default.error(error);

      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}


}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"$root$",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
