LavaPack.loadBundle([
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\dropdown.js", {"../icon/icon-caret-down":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-down.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\dropdown\dropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconCaretDown = _interopRequireDefault(require("../icon/icon-caret-down"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Dropdown = ({
  className,
  disabled = false,
  onChange,
  options,
  selectedOption = null,
  style,
  title
}) => {
  const _onChange = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();
    onChange(event.target.value);
  }, [onChange]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown', className)
  }, /*#__PURE__*/_react.default.createElement("select", {
    className: "dropdown__select",
    disabled: disabled,
    title: title,
    onChange: _onChange,
    style: style,
    value: selectedOption
  }, options.map(option => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: option.value,
      value: option.value
    }, option.name || option.value);
  })), /*#__PURE__*/_react.default.createElement(_iconCaretDown.default, {
    size: 16,
    className: "dropdown__icon-caret-down"
  }));
};

Dropdown.propTypes = {
  /**
   * Additional css className to add to root of Dropdown component
   */
  className: _propTypes.default.string,

  /**
   * Disable dropdown by setting to true
   */
  disabled: _propTypes.default.bool,

  /**
   * Title of the dropdown
   */
  title: _propTypes.default.string,

  /**
   * On options change handler
   */
  onChange: _propTypes.default.func.isRequired,

  /**
   * Predefined options for component
   */
  options: _propTypes.default.arrayOf(_propTypes.default.exact({
    name: _propTypes.default.string,
    value: _propTypes.default.string.isRequired
  })).isRequired,

  /**
   * Selected options of dropdown
   */
  selectedOption: _propTypes.default.string,

  /**
   * Add inline style for the component
   */
  style: _propTypes.default.object
};
var _default = Dropdown;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js", {"./dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\dropdown.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\dropdown\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _dropdown.default;
  }
});

var _dropdown = _interopRequireDefault(require("./dropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\editable-label\\editable-label.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\editable-label\editable-label.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class EditableLabel extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isEditing: false,
      value: this.props.defaultValue || ''
    });
  }

  handleSubmit() {
    const {
      value
    } = this.state;
    const {
      accountsNames
    } = this.props;

    if (value === '' || accountsNames.includes(value)) {
      return;
    }

    Promise.resolve(this.props.onSubmit(value)).then(() => this.setState({
      isEditing: false
    }));
  }

  renderEditing() {
    const {
      value
    } = this.state;
    const {
      accountsNames
    } = this.props;
    return [/*#__PURE__*/_react.default.createElement("input", {
      key: 1,
      type: "text",
      required: true,
      dir: "auto",
      value: this.state.value,
      onKeyPress: event => {
        if (event.key === 'Enter') {
          this.handleSubmit();
        }
      },
      onChange: event => this.setState({
        value: event.target.value
      }),
      "data-testid": "editable-input",
      className: (0, _classnames.default)('large-input', 'editable-label__input', {
        'editable-label__input--error': value === '' || accountsNames.includes(value)
      }),
      autoFocus: true
    }), /*#__PURE__*/_react.default.createElement("button", {
      className: "editable-label__icon-button",
      key: 2,
      onClick: () => this.handleSubmit()
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check editable-label__icon"
    }))];
  }

  renderReadonly() {
    return [/*#__PURE__*/_react.default.createElement("div", {
      key: 1,
      className: "editable-label__value"
    }, this.state.value), /*#__PURE__*/_react.default.createElement("button", {
      key: 2,
      className: "editable-label__icon-button",
      "data-testid": "editable-label-button",
      onClick: () => this.setState({
        isEditing: true
      })
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fas fa-pencil-alt editable-label__icon"
    }))];
  }

  render() {
    const {
      isEditing,
      value
    } = this.state;
    const {
      className,
      accountsNames
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('editable-label', className)
    }, isEditing ? this.renderEditing() : this.renderReadonly()), accountsNames.includes(value) ? /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('editable-label__error', 'editable-label__error-amount')
    }, this.context.t('accountNameDuplicate')) : null);
  }

}

_defineProperty(EditableLabel, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  defaultValue: _propTypes.default.string,
  className: _propTypes.default.string,
  accountsNames: _propTypes.default.array
});

_defineProperty(EditableLabel, "contextTypes", {
  t: _propTypes.default.func
});

var _default = EditableLabel;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\editable-label\\index.js", {"./editable-label":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\editable-label\\editable-label.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\editable-label\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editableLabel.default;
  }
});

var _editableLabel = _interopRequireDefault(require("./editable-label"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\error-message.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\error-message\error-message.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @deprecated - Please use ActionableMessage type danger
 * @see ActionableMessage
 * @param {object} props
 * @param {string} props.errorMessage
 * @param {string} props.errorKey
 * @param {object} context
 */
const ErrorMessage = (props, context) => {
  const {
    errorMessage,
    errorKey
  } = props;
  const error = errorKey ? context.t(errorKey) : errorMessage;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "error-message"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-exclamation-circle error-message__icon"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "error-message__text"
  }, error));
};

ErrorMessage.propTypes = {
  /**
   * The text content for the error message
   */
  errorMessage: _propTypes.default.string,

  /**
   * The translate key for localization. Uses context.t(). Will override the error message
   */
  errorKey: _propTypes.default.string
};
ErrorMessage.contextTypes = {
  t: _propTypes.default.func
};
var _default = ErrorMessage;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\index.js", {"./error-message.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\error-message\\error-message.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\error-message\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _errorMessage.default;
  }
});

var _errorMessage = _interopRequireDefault(require("./error-message.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\export-text-container\\export-text-container.component.js", {"../../../helpers/utils/export-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\export-utils.js","../../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\export-text-container\export-text-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyIcon = _interopRequireDefault(require("../icon/copy-icon.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

var _exportUtils = require("../../../helpers/utils/export-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ExportTextContainer({
  text = '',
  onClickCopy = null,
  onClickDownload = null
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__text-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__text notranslate"
  }, text)), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__buttons-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button export-text-container__button--copy",
    onClick: () => {
      if (onClickCopy) {
        onClickCopy();
      }

      handleCopy(text);
    }
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 17,
    color: "var(--color-primary-default)"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button-text"
  }, copied ? t('copiedExclamation') : t('copyToClipboard'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button",
    onClick: () => {
      if (onClickDownload) {
        onClickDownload();
      }

      (0, _exportUtils.exportAsFile)('', text);
    }
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "images/download.svg",
    alt: ""
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button-text"
  }, t('saveAsCsvFile')))));
}

ExportTextContainer.propTypes = {
  text: _propTypes.default.string,
  onClickCopy: _propTypes.default.func,
  onClickDownload: _propTypes.default.func
};

var _default = /*#__PURE__*/_react.default.memo(ExportTextContainer);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\export-text-container\\index.js", {"./export-text-container.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\export-text-container\\export-text-container.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\export-text-container\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _exportTextContainer = _interopRequireDefault(require("./export-text-container.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _exportTextContainer.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\form-field\\form-field.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../box/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\box.js","../info-tooltip/info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","../numeric-input/numeric-input.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\numeric-input\\numeric-input.component.js","../typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\form-field\form-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormField;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _typography = _interopRequireDefault(require("../typography/typography"));

var _box = _interopRequireDefault(require("../box/box"));

var _designSystem = require("../../../helpers/constants/design-system");

var _numericInput = _interopRequireDefault(require("../numeric-input/numeric-input.component"));

var _infoTooltip = _interopRequireDefault(require("../info-tooltip/info-tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function FormField({
  dataTestId,
  titleText = '',
  TitleTextCustomComponent,
  titleUnit = '',
  TitleUnitCustomComponent,
  tooltipText = '',
  TooltipCustomComponent,
  titleDetail = '',
  titleDetailWrapperProps,
  error,
  onChange = undefined,
  value = 0,
  numeric,
  detailText = '',
  autoFocus = false,
  password = false,
  allowDecimals = false,
  disabled = false,
  placeholder,
  warning,
  passwordStrength,
  passwordStrengthText,
  id,
  inputProps,
  wrappingLabelProps
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('form-field', {
      'form-field__row--error': error
    })
  }, /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    as: "label"
  }, wrappingLabelProps), /*#__PURE__*/_react.default.createElement("div", {
    className: "form-field__heading"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "form-field__heading-title",
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER
  }, TitleTextCustomComponent || titleText && /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "label",
    htmlFor: id,
    html: true,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    }
  }, titleText), TitleUnitCustomComponent || titleUnit && /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: _designSystem.TYPOGRAPHY.H6,
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    }
  }, titleUnit), TooltipCustomComponent || tooltipText && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: tooltipText
  })), titleDetail && /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: "form-field__heading-detail",
    textAlign: _designSystem.TEXT_ALIGN.END,
    marginBottom: 3,
    marginRight: 2
  }, titleDetailWrapperProps), titleDetail)), numeric ? /*#__PURE__*/_react.default.createElement(_numericInput.default, {
    error: error,
    onChange: onChange,
    value: value,
    detailText: detailText,
    autoFocus: autoFocus,
    allowDecimals: allowDecimals,
    disabled: disabled,
    dataTestId: dataTestId,
    placeholder: placeholder,
    id: id
  }) : /*#__PURE__*/_react.default.createElement("input", _extends({
    className: (0, _classnames.default)('form-field__input', {
      'form-field__input--error': error,
      'form-field__input--warning': warning
    }),
    onChange: e => onChange(e.target.value),
    value: value,
    type: password ? 'password' : 'text',
    autoFocus: autoFocus,
    disabled: disabled,
    "data-testid": dataTestId,
    placeholder: placeholder,
    id: id
  }, inputProps)), error && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.ERROR_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H7,
    className: "form-field__error"
  }, error), warning && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H7,
    className: "form-field__warning"
  }, warning), passwordStrength && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H7,
    className: "form-field__password-strength"
  }, passwordStrength), passwordStrengthText && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H8,
    className: "form-field__password-strength-text"
  }, passwordStrengthText)));
}

FormField.propTypes = {
  /**
   * Identifier for testing purpose
   */
  dataTestId: _propTypes.default.string,

  /**
   * Form Fields Title
   */
  titleText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * A custom component to replace the title text Typography component
   * titleText will be ignored if this is provided
   */
  TitleTextCustomComponent: _propTypes.default.node,

  /**
   * Show unit (eg. ETH)
   */
  titleUnit: _propTypes.default.string,

  /**
   * A custom component to replace the title unit Typography component
   * titleUnit will be ignored if this is provided
   */
  TitleUnitCustomComponent: _propTypes.default.node,

  /**
   * Add Tooltip and text content
   */
  tooltipText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * A custom component to replace the tooltip component
   * tooltipText will be ignored if this is provided
   */
  TooltipCustomComponent: _propTypes.default.node,

  /**
   * Show content (text, image, component) in title
   */
  titleDetail: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Props to pass to wrapping Box component of the titleDetail component
   * Accepts all props of the Box component
   */
  titleDetailWrapperProps: _propTypes.default.shape({ ..._box.default.propTypes
  }),

  /**
   * Show error message
   */
  error: _propTypes.default.string,

  /**
   * Show warning message
   */
  warning: _propTypes.default.string,

  /**
   * Handler when fields change
   */
  onChange: _propTypes.default.func,

  /**
   * Field value
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Show detail text if field mode is numeric
   */
  detailText: _propTypes.default.string,

  /**
   * Set autofocus on render
   */
  autoFocus: _propTypes.default.bool,

  /**
   * Set numeric mode, the default is text
   */
  numeric: _propTypes.default.bool,

  /**
   * Set password mode
   */
  password: _propTypes.default.bool,

  /**
   * Allow decimals on the field
   */
  allowDecimals: _propTypes.default.bool,

  /**
   * Check if the form disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Set the placeholder text for the input field
   */
  placeholder: _propTypes.default.string,

  /**
   * Show password strength according to the score
   */
  passwordStrength: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /**
   * Show password strength description
   */
  passwordStrengthText: _propTypes.default.string,

  /**
   * The id of the input element. Should be used when the wrapping label is changed to a div to ensure accessibility.
   */
  id: _propTypes.default.string,

  /**
   * Any additional input attributes or overrides not provided by exposed props
   */
  inputProps: _propTypes.default.object,

  /**
   * The FormField is wrapped in a Box component that is rendered as a <label/> using the polymorphic "as" prop.
   * This object allows you to override the rendering of the label by using the wrapperProps={{ as: 'div' }} prop.
   * If used ensure the id prop is set on the input and a label element is present using htmlFor with the same id to ensure accessibility.
   */
  wrappingLabelProps: _propTypes.default.object
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\form-field\\index.js", {"./form-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\form-field\\form-field.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\form-field\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _formField.default;
  }
});

var _formField = _interopRequireDefault(require("./form-field"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\hex-to-decimal\\hex-to-decimal.component.js", {"../../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\hex-to-decimal\hex-to-decimal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _metamaskControllerUtils = require("../../../../shared/lib/metamask-controller-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class HexToDecimal extends _react.PureComponent {
  render() {
    const {
      className,
      value
    } = this.props;
    const decimalValue = (0, _metamaskControllerUtils.hexToDecimal)(value);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, decimalValue);
  }

}

exports.default = HexToDecimal;

_defineProperty(HexToDecimal, "propTypes", {
  className: _propTypes.default.string,
  value: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\hex-to-decimal\\index.js", {"./hex-to-decimal.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\hex-to-decimal\\hex-to-decimal.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\hex-to-decimal\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _hexToDecimal.default;
  }
});

var _hexToDecimal = _interopRequireDefault(require("./hex-to-decimal.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-border\\icon-border.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-border\icon-border.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IconBorder;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function IconBorder({
  children,
  size,
  className
}) {
  const borderStyle = {
    height: `${size}px`,
    width: `${size}px`
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('icon-border', className),
    style: borderStyle
  }, children);
}

IconBorder.propTypes = {
  className: _propTypes.default.string,
  children: _propTypes.default.node.isRequired,
  size: _propTypes.default.number.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-border\\index.js", {"./icon-border":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-border\\icon-border.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-border\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconBorder.default;
  }
});

var _iconBorder = _interopRequireDefault(require("./icon-border"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-button\\icon-button.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-button\icon-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IconButton;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultRender = inner => inner;

function IconButton({
  onClick,
  Icon,
  disabled,
  label,
  tooltipRender,
  className,
  ...props
}) {
  var _props$dataTestid;

  const renderWrapper = tooltipRender !== null && tooltipRender !== void 0 ? tooltipRender : defaultRender;
  return /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('icon-button', className, {
      'icon-button--disabled': disabled
    }),
    "data-testid": (_props$dataTestid = props['data-testid']) !== null && _props$dataTestid !== void 0 ? _props$dataTestid : undefined,
    onClick: onClick,
    disabled: disabled
  }, renderWrapper( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "icon-button__circle"
  }, /*#__PURE__*/_react.default.createElement(Icon, null)), /*#__PURE__*/_react.default.createElement("span", null, label))));
}

IconButton.propTypes = {
  onClick: _propTypes.default.func.isRequired,
  Icon: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool,
  label: _propTypes.default.string.isRequired,
  tooltipRender: _propTypes.default.func,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-button\\index.js", {"./icon-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-button\\icon-button.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-button\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconButton.default;
  }
});

var _iconButton = _interopRequireDefault(require("./icon-button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\icon-with-fallback.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-with-fallback\icon-with-fallback.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const IconWithFallback = ({
  name = '',
  icon = null,
  size,
  className,
  fallbackClassName,
  wrapperClassName,
  ...props
}) => {
  const [iconError, setIconError] = (0, _react.useState)(false);
  const style = size ? {
    height: `${size}px`,
    width: `${size}px`
  } : {};

  const handleOnError = () => {
    setIconError(true);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(wrapperClassName)
  }, !iconError && icon ? /*#__PURE__*/_react.default.createElement("img", _extends({
    onError: handleOnError,
    src: icon,
    style: style,
    className: className,
    alt: name || 'icon'
  }, props)) : /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('icon-with-fallback__fallback', fallbackClassName)
  }, (name === null || name === void 0 ? void 0 : name.charAt(0).toUpperCase()) || ''));
};

IconWithFallback.propTypes = {
  /**
   * The img src of the icon
   */
  icon: _propTypes.default.string,

  /**
   * The name of the icon also used for the alt attribute of the image
   */
  name: _propTypes.default.string,

  /**
   * The size of the icon. Recommended sizes adhere to 8px grid: 16, 24, 32, 40
   */
  size: _propTypes.default.number,

  /**
   * className to apply to the image tag
   */
  className: _propTypes.default.string,

  /**
   * className to apply to the div that wraps the icon
   */
  wrapperClassName: _propTypes.default.string,

  /**
   * Additional className to apply to the fallback span tag
   */
  fallbackClassName: _propTypes.default.string
};
var _default = IconWithFallback;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js", {"./icon-with-fallback.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\icon-with-fallback.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon-with-fallback\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconWithFallback.default;
  }
});

var _iconWithFallback = _interopRequireDefault(require("./icon-with-fallback.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\approve-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\approve-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Approve = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M15 29C22.732 29 29 22.732 29 15C29 7.26801 22.732 1 15 1C7.26801 1 1 7.26801 1 15C1 22.732 7.26801 29 15 29Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M5.34426 16.0923C5.15708 16.2694 5.15656 16.5672 5.34311 16.745L9.49708 20.7032C9.67134 20.8692 9.94541 20.8687 10.1191 20.7021L10.682 20.1619C10.867 19.9844 10.8665 19.6883 10.6808 19.5114L6.53084 15.557C6.35747 15.3918 6.08509 15.3914 5.91113 15.556L5.34426 16.0923ZM24.0891 10.2959C23.9152 10.1303 23.6419 10.1303 23.4681 10.2961L14.9882 18.3839C14.8143 18.5498 14.5407 18.5497 14.3668 18.3837L11.4072 15.5567C11.2343 15.3916 10.9625 15.3905 10.7882 15.5542L10.2154 16.0924C10.0272 16.2692 10.0261 16.5679 10.2131 16.7461L14.367 20.7042C14.5408 20.8698 14.814 20.8698 14.9878 20.7042L24.6581 11.4897C24.8442 11.3124 24.8442 11.0155 24.6581 10.8382L24.0891 10.2959ZM19.7905 11.4886C19.9761 11.3117 19.9767 11.0156 19.7916 10.8381L19.2288 10.2979C19.0551 10.1313 18.781 10.1308 18.6068 10.2968L13.799 14.878C13.6125 15.0557 13.613 15.3535 13.8002 15.5306L14.367 16.067C14.541 16.2316 14.8134 16.2311 14.9868 16.0659L19.7905 11.4886Z",
  fill: color
}));

Approve.defaultProps = {
  className: undefined
};
Approve.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Approve;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\copy-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Copy = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 11 11",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M0 0H1H9V1H1V9H0V0ZM2 2H11V11H2V2ZM3 3H10V10H3V3Z",
  fill: color
}));

Copy.defaultProps = {
  className: undefined
};
Copy.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Copy;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-block-explorer.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-block-explorer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconBlockExplorer = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className,
  onClick
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  onClick: onClick,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m316 444l-106 0c-96 0-141-43-141-140l0-107c0-96 45-140 141-140l35 0c5 0 9 2 12 5 3 3 4 7 4 11 0 4-1 8-4 11-3 3-7 5-12 5l-35 0c-80 0-109 28-109 108l0 107c0 80 29 108 109 108l106 0c80 0 109-28 109-108l0-36c0-4 1-8 4-11 3-3 8-5 12-5 4 0 8 2 11 5 3 3 5 7 5 11l0 36c0 97-44 140-141 140z m-35-195c-4 0-9-2-12-5-3-3-4-7-4-11 0-4 1-8 4-11l133-133-47 0c-4 0-8-2-11-5-3-3-5-7-5-11 0-4 2-8 5-11 3-3 7-5 11-5l86 0c2 0 4 0 6 1 2 1 4 2 5 3 2 2 3 4 4 6 0 2 1 4 1 6l0 85c0 4-2 9-5 12-3 3-7 4-11 4-4 0-9-1-12-4-3-3-4-8-4-12l0-47-133 133c-3 3-7 5-11 5z"
}));

IconBlockExplorer.propTypes = {
  /**
   * The size of the icon in pixels. Should follow 8px grid 16, 24, 32, etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The onClick handler
   */
  onClick: _propTypes.default.func,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconBlockExplorer;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-down.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-caret-down.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCaretDown = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m399 177c-8-8-22-8-30 0l-113 113-113-113c-8-8-22-8-30 0-8 8-8 22 0 30l128 128c8 8 22 8 30 0l128-128c8-8 8-22 0-30z"
}));

IconCaretDown.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCaretDown;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-left.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-caret-left.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCaretLeft = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className,
  onClick
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  onClick: onClick,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m335 113c8 8 8 22 0 30l-113 113 113 113c8 8 8 22 0 30-8 8-22 8-30 0l-128-128c-8-8-8-22 0-30l128-128c8-8 22-8 30 0z"
}));

IconCaretLeft.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The onClick handler
   */
  onClick: _propTypes.default.func,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCaretLeft;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-right.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-caret-right.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCaretRight = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m177 113c-8 8-8 22 0 30l113 113-113 113c-8 8-8 22 0 30 8 8 22 8 30 0l128-128c8-8 8-22 0-30l-128-128c-8-8-22-8-30 0z"
}));

IconCaretRight.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCaretRight;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-chart.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-chart.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconChart = ({
  size = 12,
  color = 'var(--color-primary-default)',
  className,
  ariaLabel
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  viewBox: "0 0 12 12",
  fill: "none",
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "M1.5 9.375C1.5 9.58125 1.66781 9.75 1.875 9.75H11.25C11.6648 9.75 12 10.0852 12 10.5C12 10.9148 11.6648 11.25 11.25 11.25H1.875C0.839531 11.25 0 10.4109 0 9.375V1.5C0 1.08586 0.335859 0.75 0.75 0.75C1.16414 0.75 1.5 1.08586 1.5 1.5V9.375ZM8.02969 6.52969C7.73672 6.82266 7.26328 6.82266 6.97031 6.52969L5.625 5.18672L3.52969 7.27969C3.23672 7.57266 2.76328 7.57266 2.47031 7.27969C2.17688 6.98672 2.17688 6.51328 2.47031 6.22031L5.09531 3.59531C5.38828 3.30234 5.86172 3.30234 6.15469 3.59531L7.5 4.93828L9.97031 2.47031C10.2633 2.17687 10.7367 2.17687 11.0297 2.47031C11.3227 2.76328 11.3227 3.23672 11.0297 3.52969L8.02969 6.52969Z",
  fill: color
}));

IconChart.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconChart;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-check.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-check.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCheck = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m420 134c9 9 9 22 0 30l-213 214c-8 8-22 8-30 0l-85-86c-9-8-9-21 0-30 8-8 21-8 30 0l70 70 198-198c9-8 22-8 30 0z"
}));

IconCheck.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCheck;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-cog.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-cog.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCog = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m256 326c-9 0-18-2-27-5-8-4-16-9-23-15-6-7-11-15-15-23-3-9-5-18-5-27 0-9 2-18 5-27 4-8 9-16 15-23 7-6 15-11 23-15 9-3 18-5 27-5 19 0 37 7 50 20 13 13 20 31 20 50 0 19-7 37-20 50-13 13-31 20-50 20z m176-35c3 0 7-2 10-4 2-2 4-6 5-9 0 0 1-10 1-22 0-12-1-22-1-22-1-3-3-7-5-9-3-2-7-4-10-4l-37 0c-7 0-15-4-17-10-2-6-4-23 1-29l26-26c2-2 4-6 4-9 0-4-1-7-3-10l-31-31c-3-2-6-3-10-3-3 0-7 2-9 4l-26 26c-6 5-14 7-19 5-6-3-20-14-20-21l0-37c0-3-2-7-4-10-2-2-6-4-9-5 0 0-10-1-22-1-12 0-22 1-22 1-3 1-7 3-9 5-2 3-4 7-4 10l0 37c0 7-4 15-10 17-6 2-23 4-29-1l-26-26c-2-2-6-4-9-4-4 0-7 1-10 3l-31 31c-2 3-3 6-3 10 0 3 2 7 4 9l26 26c5 6 7 14 5 19-3 6-14 20-21 20l-37 0c-3 0-7 2-10 4-2 2-4 6-5 9 0 0-1 10-1 22 0 12 1 22 1 22 1 7 8 13 15 13l37 0c7 0 15 4 17 10 2 6 4 23-1 29l-26 26c-2 2-4 6-4 9 0 4 1 7 3 10l31 31c3 2 6 3 10 3 3 0 7-2 9-4l26-26c6-5 14-7 19-5 6 3 20 14 20 21l0 37c0 7 6 14 13 15 0 0 10 1 22 1 12 0 22-1 22-1 3-1 7-3 9-5 2-3 4-7 4-10l0-37c0-7 4-15 10-17 6-2 23-4 29 1l26 26c2 2 6 4 9 4 4 0 7-1 10-3l31-31c2-3 3-6 3-10 0-3-2-7-4-9l-26-26c-5-6-7-14-5-19 3-6 14-20 21-20z"
}));

IconCog.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCog;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-connect.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-connect.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconConnect = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m213 79l22-31c6-7 15-7 21 0l23 33c6 7 3 15-7 15l-18 0 0 175c0 4 4 4 7 1l37-37c6-6 8-15 8-24l0-35c-10 0-17-8-17-18l0-18c0-9 7-18 17-18l18 0c10 0 17 8 17 18l0 18c0 10-7 18-17 18l0 35c0 15-4 27-15 37l-45 46c-6 6-10 9-10 24l0 73c18 4 31 19 31 38 0 23-18 40-40 40-21 0-39-17-39-40 0-19 13-34 31-38l0-20c0-14-5-19-11-25l-45-46c-8-9-14-20-14-35l0-37c-10-3-18-14-18-26 0-14 12-26 27-26 14 0 26 12 26 26 0 12-8 23-18 26l0 37c0 10 5 18 10 23l37 38c3 2 6 2 6-2l0-228-18 0c-10 0-13-8-6-17z"
}));

IconConnect.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconConnect;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-copy.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-copy.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconCopy = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className,
  onClick
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  onClick: onClick,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m333 274l0 86c0 72-28 101-100 101l-86 0c-72 0-100-29-100-101l0-86c0-71 28-100 100-100l86 0c72 0 100 29 100 100z m23-223l-86 0c-63 0-93 23-99 77-1 11 8 20 20 20l42 0c86 0 126 40 126 126l0 43c0 11 9 21 21 19 54-6 76-35 76-98l0-86c0-72-28-101-100-101z"
}));

IconCopy.propTypes = {
  /**
   * The size of the icon in pixels. Should follow 8px grid 16, 24, 32, etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The onClick handler
   */
  onClick: _propTypes.default.func,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconCopy;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-eye-slash.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-eye-slash.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconEyeSlash = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) =>
/*#__PURE__*/
// This SVG is copied from `@fortawesome/fontawesome-free@5.13.0/regular/eye-slash.svg`.
_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 640 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z"
}));

IconEyeSlash.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconEyeSlash;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-eye.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-eye.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconEye = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) =>
/*#__PURE__*/
// This SVG copied from `@fortawesome/fontawesome-free@5.13.0/regular/eye.svg`.
_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 576 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z"
}));

IconEye.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconEye;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-import.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-import.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconImport = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m256 85c12 0 21 10 21 22l0 183 71-70c8-9 21-9 30 0 8 8 8 21 0 30l-107 106 0 1c-4 3-9 6-15 6l0 0c-3 0-6-1-8-2-3-1-5-3-7-5l-107-106c-8-9-8-22 0-30 9-9 22-9 30 0l71 70 0-183c0-12 9-22 21-22z m-149 299c-12 0-22 10-22 21 0 12 10 22 22 22l298 0c12 0 22-10 22-22 0-11-10-21-22-21z"
}));

IconImport.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconImport;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-plus.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-plus.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconPlus = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m277 107c0-12-9-22-21-22-12 0-21 10-21 22l0 128-128 0c-12 0-22 9-22 21 0 12 10 21 22 21l128 0 0 128c0 12 9 22 21 22 12 0 21-10 21-22l0-128 128 0c12 0 22-9 22-21 0-12-10-21-22-21l-128 0z"
}));

IconPlus.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconPlus;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-speech-bubbles.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-speech-bubbles.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconSpeechBubbles = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m357 221c0-63-66-114-146-114-81 0-146 51-146 114 0 25 10 47 27 66-10 22-25 39-25 39-2 1-3 4-2 6 2 3 3 3 6 3 25 0 46-8 61-18 23 12 50 18 79 18 80 0 146-50 146-114z m86 157c16-18 26-41 26-66 0-47-38-88-91-105 1 5 2 10 2 14 0 76-76 137-169 137-8 0-15 0-22-1 21 41 73 70 134 70 29 0 56-7 78-18 16 9 37 18 63 18 2 0 4-1 5-3 0-2 0-5-2-7 0 0-15-17-24-39z"
}));

IconSpeechBubbles.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconSpeechBubbles;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-token-search.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\icon-token-search.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IconTokenSearch = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m233 103c82 0 151 40 152 88-1 47-70 87-152 87-83 0-152-40-152-87 0-48 69-88 152-88z m0 212c-76 0-141-34-151-76 28 34 84 57 151 57 66 0 123-23 150-57-10 42-75 76-150 76z m0 110c-76 0-141-34-151-77 28 35 84 58 151 58 27 0 53-4 76-12 4-1 6-5 6-9 0 0-1-1-1-1 0-5-5-8-10-7-21 7-46 11-71 11-76 0-141-34-151-76 28 34 84 57 151 57 28 0 55-4 78-12 3-1 5-3 6-6l0 0c1-7-4-13-11-11-22 7-47 12-73 12-76 0-141-34-151-77 28 34 84 58 151 58 66 0 123-24 150-58l0 20c0 5 4 10 9 10 5 0 9-5 9-10 0-44 0-104 0-104 0 0 0 0 0 0 0 0 0-1 0-1l0 0c-1-59-74-105-168-105-95 0-168 46-169 105l0 0c0 0 0 1 0 1 0 0 0 0 0 0l0 36 0 0c0 0 0 1 0 1 0 11 0 23 0 35l0 0c0 1 0 3 0 4 0 11 0 23 0 33l0 0c0 2 0 3 0 5l0 32 0 0c0 2 0 4 0 5l0 1c0 1 1 2 1 3 0 1 0 1 0 2 0 1 0 2 1 3 0 1 0 1 0 2 0 1 0 1 0 2 10 35 46 64 96 78l0 0c2 0 4 1 5 1 21 6 43 9 66 9 23 0 45-3 65-9 2 0 3-1 5-1 7-2 13-4 19-6 5-2 6-9 4-13l-1-1c-1-1-2-3-4-3-2-1-4-1-6 0-24 9-52 15-82 15m211 0l-23-24c6-8 9-18 9-29 1-33-30-59-62-48-17 6-29 22-32 41-1 7 0 15 1 22 2 7 6 13 10 19 5 5 10 10 17 13 6 3 13 4 20 4 8 0 17-3 24-8l23 25c1 0 2 1 3 2 1 0 2 0 3 0 2 0 3 0 4 0 1-1 2-2 3-2 1-1 2-2 2-4 1-1 1-2 1-3 0-2 0-3-1-4 0-1-1-3-2-4z m-94-53c0-19 15-35 34-35 18 0 33 15 33 35 0 5-1 10-3 14-1 4-4 8-7 11-3 4-7 6-11 8-4 2-8 3-12 3-20 0-34-16-34-36z"
}));

IconTokenSearch.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = IconTokenSearch;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\info-icon-inverted.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\info-icon-inverted.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoIconInverted;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InfoIconInverted({
  severity
}) {
  const className = (0, _classnames.default)('info-icon', {
    'info-icon--success': severity === _designSystem.SEVERITIES.SUCCESS,
    'info-icon--warning': severity === _designSystem.SEVERITIES.WARNING,
    'info-icon--danger': severity === _designSystem.SEVERITIES.DANGER,
    'info-icon--info': severity === _designSystem.SEVERITIES.INFO
  });
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M15.75 8C15.75 3.75 12.25 0.25 8 0.25C3.71875 0.25 0.25 3.75 0.25 8C0.25 12.2812 3.71875 15.75 8 15.75C12.25 15.75 15.75 12.2812 15.75 8ZM8 9.5625C8.78125 9.5625 9.4375 10.2188 9.4375 11C9.4375 11.8125 8.78125 12.4375 8 12.4375C7.1875 12.4375 6.5625 11.8125 6.5625 11C6.5625 10.2188 7.1875 9.5625 8 9.5625ZM6.625 4.40625C6.59375 4.1875 6.78125 4 7 4H8.96875C9.1875 4 9.375 4.1875 9.34375 4.40625L9.125 8.65625C9.09375 8.875 8.9375 9 8.75 9H7.21875C7.03125 9 6.875 8.875 6.84375 8.65625L6.625 4.40625Z"
  }));
}

InfoIconInverted.propTypes = {
  /**
   * Severity can be 1 of 4 states:'danger', 'warning', 'info' or 'success'
   */
  severity: _propTypes.default.oneOf(Object.values(_designSystem.SEVERITIES))
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\info-icon.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\info-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoIcon;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InfoIcon({
  severity
}) {
  const className = (0, _classnames.default)('info-icon', {
    'info-icon--success': severity === _designSystem.SEVERITIES.SUCCESS,
    'info-icon--warning': severity === _designSystem.SEVERITIES.WARNING,
    'info-icon--danger': severity === _designSystem.SEVERITIES.DANGER,
    'info-icon--info': severity === _designSystem.SEVERITIES.INFO
  });
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M7.2 5.6H8.8V4H7.2V5.6ZM8 14.4C4.472 14.4 1.6 11.528 1.6 8C1.6 4.472 4.472 1.6 8 1.6C11.528 1.6 14.4 4.472 14.4 8C14.4 11.528 11.528 14.4 8 14.4ZM8 0C6.94943 0 5.90914 0.206926 4.93853 0.608964C3.96793 1.011 3.08601 1.60028 2.34315 2.34315C0.842855 3.84344 0 5.87827 0 8C0 10.1217 0.842855 12.1566 2.34315 13.6569C3.08601 14.3997 3.96793 14.989 4.93853 15.391C5.90914 15.7931 6.94943 16 8 16C10.1217 16 12.1566 15.1571 13.6569 13.6569C15.1571 12.1566 16 10.1217 16 8C16 6.94943 15.7931 5.90914 15.391 4.93853C14.989 3.96793 14.3997 3.08601 13.6569 2.34315C12.914 1.60028 12.0321 1.011 11.0615 0.608964C10.0909 0.206926 9.05058 0 8 0ZM7.2 12H8.8V7.2H7.2V12Z"
  }));
}

InfoIcon.propTypes = {
  /**
   * Severity can be 1 of 4 states:'danger', 'warning', 'info' or 'success'
   */
  severity: _propTypes.default.oneOf(Object.values(_designSystem.SEVERITIES))
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\interaction-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\interaction-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Interaction = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M15 29C22.732 29 29 22.732 29 15C29 7.26801 22.732 1 15 1C7.26801 1 1 7.26801 1 15C1 22.732 7.26801 29 15 29Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M18.8889 18.65C18.8889 18.8433 18.7322 19 18.5389 19H11.4611C11.2678 19 11.1111 18.8433 11.1111 18.65V17.4621C11.1111 17.1479 10.7292 16.9928 10.5102 17.2181L8.2372 19.556C8.10513 19.6919 8.10513 19.9081 8.2372 20.044L10.5102 22.3819C10.7292 22.6072 11.1111 22.4521 11.1111 22.1379V20.95C11.1111 20.7567 11.2678 20.6 11.4611 20.6H20.0944C20.2877 20.6 20.4444 20.4433 20.4444 20.25V16.15C20.4444 15.9567 20.2877 15.8 20.0944 15.8H19.2389C19.0456 15.8 18.8889 15.9567 18.8889 16.15V18.65ZM11.1111 12.35C11.1111 12.1567 11.2678 12 11.4611 12H18.5389C18.7322 12 18.8889 12.1567 18.8889 12.35V13.5379C18.8889 13.8521 19.2708 14.0072 19.4898 13.7819L21.7628 11.444C21.8949 11.3081 21.8949 11.0919 21.7628 10.956L19.4898 8.61812C19.2708 8.39284 18.8889 8.5479 18.8889 8.8621V10.05C18.8889 10.2433 18.7322 10.4 18.5389 10.4H9.90556C9.71226 10.4 9.55556 10.5567 9.55556 10.75V14.85C9.55556 15.0433 9.71226 15.2 9.90556 15.2H10.7611C10.9544 15.2 11.1111 15.0433 11.1111 14.85V12.35Z",
  fill: color
}));

Interaction.defaultProps = {
  className: undefined
};
Interaction.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Interaction;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-buy-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\overview-buy-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BuyIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BuyIcon({
  width = '17',
  height = '21',
  fill = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M8.62829 14.3216C8.65369 14.2947 8.67756 14.2664 8.69978 14.2368L12.8311 10.1286C13.0886 9.87975 13.1913 9.51233 13.1 9.16703C13.0087 8.82174 12.7375 8.55207 12.3903 8.46129C12.0431 8.37051 11.6736 8.47268 11.4233 8.72869L8.89913 11.2387L8.89913 1.3293C8.90647 0.970874 8.71837 0.636511 8.40739 0.455161C8.0964 0.273811 7.71112 0.27381 7.40014 0.45516C7.08915 0.636511 6.90105 0.970873 6.90839 1.3293L6.90839 11.2387L4.38422 8.72869C4.13396 8.47268 3.76446 8.37051 3.41722 8.46129C3.06998 8.55207 2.79879 8.82174 2.7075 9.16703C2.61621 9.51233 2.71896 9.87975 2.97641 10.1286L7.11049 14.2395C7.28724 14.4717 7.55784 14.6148 7.85026 14.6306C8.14268 14.6464 8.42727 14.5333 8.62829 14.3216Z",
    fill: fill
  }), /*#__PURE__*/_react.default.createElement("rect", {
    x: "0.260986",
    y: "15.75",
    width: "15.8387",
    height: "2.25",
    rx: "1",
    fill: "white"
  }));
}

BuyIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Fill  of the icon should be a valid design system color
   */
  fill: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\overview-send-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\overview-send-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SwapIcon({
  width = '15',
  height = '15',
  fill = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.6827 0.889329C13.6458 0.890495 13.609 0.893722 13.5725 0.898996H7.76263C7.40564 0.893947 7.07358 1.08151 6.89361 1.38986C6.71364 1.69821 6.71364 2.07958 6.89361 2.38793C7.07358 2.69628 7.40564 2.88384 7.76263 2.87879H11.3124L1.12335 13.0678C0.864749 13.3161 0.760577 13.6848 0.851011 14.0315C0.941446 14.3786 1.21235 14.6495 1.55926 14.7399C1.90616 14.8303 2.27485 14.7262 2.52313 14.4676L12.7121 4.27857V7.82829C12.7071 8.18528 12.8946 8.51734 13.203 8.69731C13.5113 8.87728 13.8927 8.87728 14.2011 8.69731C14.5094 8.51734 14.697 8.18528 14.6919 7.82829V2.01457C14.7318 1.7261 14.6427 1.43469 14.4483 1.2179C14.2538 1.00111 13.9738 0.880924 13.6827 0.889329Z",
    fill: fill
  }));
}

SwapIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Fill  of the icon should be a valid design system color
   */
  fill: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\receive-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\receive-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Receive = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 28 28",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("rect", {
  x: "0.5",
  y: "0.5",
  width: "27",
  height: "27",
  rx: "13.5",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M14.3465 17.3611C14.3661 17.3402 14.3846 17.3181 14.4018 17.2952L17.597 14.0999C17.7961 13.9063 17.8756 13.6206 17.805 13.352C17.7344 13.0834 17.5246 12.8737 17.2561 12.8031C16.9875 12.7325 16.7017 12.812 16.5082 13.0111L14.5559 14.9633L14.5559 7.25598C14.5616 6.97721 14.4161 6.71715 14.1756 6.5761C13.9351 6.43505 13.6371 6.43505 13.3966 6.5761C13.1561 6.71715 13.0106 6.97721 13.0163 7.25598L13.0163 14.9633L11.064 13.0111C10.8705 12.812 10.5847 12.7325 10.3161 12.8031C10.0476 12.8737 9.83782 13.0834 9.76721 13.352C9.69661 13.6206 9.77608 13.9063 9.97519 14.0999L13.1726 17.2973C13.3093 17.4779 13.5186 17.5891 13.7447 17.6014C13.9709 17.6137 14.191 17.5258 14.3465 17.3611Z",
  fill: color
}), /*#__PURE__*/_react.default.createElement("rect", {
  x: "7.875",
  y: "19.25",
  width: "12.25",
  height: "1.75",
  rx: "0.875",
  fill: color
}));

Receive.defaultProps = {
  className: undefined
};
Receive.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Receive;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\search-icon.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\search-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SearchIcon = ({
  size = 24,
  color = 'currentColor',
  ariaLabel,
  className
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  fill: color,
  className: className,
  "aria-label": ariaLabel,
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, /*#__PURE__*/_react.default.createElement("path", {
  d: "m235 427c-51 0-100-21-136-57-36-36-56-84-56-135 0-26 5-51 14-74 10-23 24-44 42-62 18-18 39-32 62-42 23-9 48-14 74-14 25 0 50 5 73 14 23 10 45 24 62 42 18 18 32 39 42 62 10 23 15 48 15 74 0 43-15 86-42 119l78 79c2 2 4 4 5 7 1 2 1 5 1 8 0 3 0 6-1 8-1 3-3 5-5 7-2 2-4 4-7 5-2 1-5 1-8 1-3 0-6 0-8-1-3-1-5-3-7-5l-79-78c-33 27-76 42-119 42z m0-43c82 0 149-67 149-149 0-83-67-150-149-150-83 0-150 67-150 150 0 82 67 149 150 149z"
}));

SearchIcon.propTypes = {
  /**
   * The size of the Icon follows an 8px grid 2 = 16px, 3 = 24px etc
   */
  size: _propTypes.default.number,

  /**
   * The color of the icon accepts design token css variables
   */
  color: _propTypes.default.string,

  /**
   * An additional className to assign the Icon
   */
  className: _propTypes.default.string,

  /**
   * The aria-label of the icon for accessibility purposes
   */
  ariaLabel: _propTypes.default.string
};
var _default = SearchIcon;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\send-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\send-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Send = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("rect", {
  x: "0.5",
  y: "0.5",
  width: "29",
  height: "29",
  rx: "14.5",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M18.5851 9.88921C18.5586 9.89005 18.5321 9.89238 18.5057 9.89618H14.3207C14.0635 9.89254 13.8243 10.0276 13.6947 10.2497C13.565 10.4719 13.565 10.7466 13.6947 10.9687C13.8243 11.1908 14.0635 11.3259 14.3207 11.3222H16.8777L9.53811 18.6614C9.35182 18.8402 9.27679 19.1058 9.34193 19.3557C9.40707 19.6056 9.60222 19.8007 9.85211 19.8658C10.102 19.931 10.3676 19.8559 10.5464 19.6697L17.886 12.3305V14.8874C17.8823 15.1445 18.0175 15.3837 18.2396 15.5133C18.4617 15.643 18.7364 15.643 18.9585 15.5133C19.1806 15.3837 19.3158 15.1445 19.3121 14.8874V10.6997C19.3409 10.4919 19.2767 10.282 19.1366 10.1259C18.9965 9.96973 18.7948 9.88316 18.5851 9.88921Z",
  fill: color
}));

Send.defaultProps = {
  className: undefined
};
Send.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Send;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\sign-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\sign-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Sign;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Sign({
  className,
  size,
  color
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: size,
    height: size,
    viewBox: "0 0 34 34",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17 33C25.8366 33 33 25.8366 33 17C33 8.16344 25.8366 1 17 1C8.16344 1 1 8.16344 1 17C1 25.8366 8.16344 33 17 33Z",
    stroke: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.2073 9.65858C21.2854 9.58047 21.4121 9.58047 21.4902 9.65858L23.8722 12.0406C23.9503 12.1187 23.9503 12.2453 23.8722 12.3234L22.3941 13.8015L19.7293 11.1367L21.2073 9.65858ZM18.5979 12.268L10.7361 20.1299C10.7086 20.1573 10.6898 20.1921 10.6818 20.2301L10.0466 23.2473C10.0168 23.3886 10.1421 23.5139 10.2835 23.4842L13.3007 22.849C13.3386 22.841 13.3734 22.8221 13.4009 22.7947L21.2627 14.9328L18.5979 12.268ZM22.6215 8.52721C21.9186 7.82426 20.7789 7.82427 20.076 8.52721L9.60469 18.9985C9.35778 19.2454 9.18802 19.5588 9.11609 19.9005L8.48089 22.9176C8.21306 24.1898 9.34091 25.3177 10.6131 25.0498L13.6303 24.4146C13.972 24.3427 14.2853 24.173 14.5323 23.9261L25.0035 13.4548C25.7065 12.7518 25.7065 11.6121 25.0035 10.9092L22.6215 8.52721Z",
    fill: color
  }));
}

Sign.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\sun-check-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\sun-check-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SunCheck;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SunCheck({
  reverseColors
}) {
  const sunColor = reverseColors ? 'var(--color-primary-default)' : 'var(--color-primary-inverse)';
  const checkColor = reverseColors ? 'var(--color-primary-inverse)' : 'var(--color-primary-default)';
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.2148 9.05384C13.432 8.40203 14.8878 7.92403 14.8878 7.20703C14.8878 6.49003 13.432 6.01204 13.2148 5.36022C12.9975 4.68668 13.8883 3.44823 13.4755 2.88332C13.0627 2.31842 11.607 2.77469 11.0421 2.3836C10.4771 1.97078 10.4771 0.449879 9.80361 0.232608C9.15179 0.0153358 8.26098 1.25378 7.54398 1.25378C6.82698 1.25378 5.91444 0.0153358 5.28435 0.232608C4.61081 0.449879 4.61081 1.99251 4.04591 2.3836C3.481 2.79641 2.02528 2.31842 1.61246 2.88332C1.19965 3.44823 2.09046 4.68668 1.87319 5.36022C1.65592 6.01204 0.200195 6.49003 0.200195 7.20703C0.200195 7.92403 1.65592 8.40203 1.87319 9.05384C2.09046 9.72738 1.19965 10.9658 1.61246 11.5307C2.02528 12.0956 3.481 11.6394 4.04591 12.0305C4.61081 12.4433 4.61081 13.9642 5.28435 14.1815C5.93617 14.3987 6.82698 13.1603 7.54398 13.1603C8.26098 13.1603 9.17352 14.3987 9.80361 14.1815C10.4771 13.9642 10.4771 12.4216 11.0421 12.0305C11.607 11.6176 13.0627 12.0956 13.4755 11.5307C13.8883 10.9658 12.9975 9.70566 13.2148 9.05384Z",
    fill: sunColor
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M6.42285 10.084L4.13965 7.81445C4.07585 7.75065 4.04395 7.66862 4.04395 7.56836C4.04395 7.4681 4.07585 7.38607 4.13965 7.32227L4.64551 6.83008C4.70931 6.75716 4.78678 6.7207 4.87793 6.7207C4.97819 6.7207 5.06478 6.75716 5.1377 6.83008L6.66895 8.36133L9.9502 5.08008C10.0231 5.00716 10.1051 4.9707 10.1963 4.9707C10.2965 4.9707 10.3786 5.00716 10.4424 5.08008L10.9482 5.57227C11.012 5.63607 11.0439 5.7181 11.0439 5.81836C11.0439 5.91862 11.012 6.00065 10.9482 6.06445L6.91504 10.084C6.85124 10.1569 6.76921 10.1934 6.66895 10.1934C6.56868 10.1934 6.48665 10.1569 6.42285 10.084Z",
    fill: checkColor
  }));
}

SunCheck.propTypes = {
  /**
   * If true reverses the colors of the SunCheck icon
   */
  reverseColors: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon-for-list.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\swap-icon-for-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Swap = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  viewBox: "0 0 34 34",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  className: className
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M17 33C25.8366 33 33 25.8366 33 17C33 8.16344 25.8366 1 17 1C8.16344 1 1 8.16344 1 17C1 25.8366 8.16344 33 17 33Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M21.4444 21.2214C21.4444 21.4147 21.2877 21.5714 21.0944 21.5714H12.9056C12.7123 21.5714 12.5556 21.4147 12.5556 21.2214V19.6907C12.5556 19.3765 12.1736 19.2214 11.9546 19.4467L9.2372 22.2417C9.10513 22.3776 9.10513 22.5938 9.2372 22.7297L11.9546 25.5247C12.1736 25.75 12.5556 25.595 12.5556 25.2808V23.75C12.5556 23.5567 12.7123 23.4 12.9056 23.4H22.8722C23.0655 23.4 23.2222 23.2433 23.2222 23.05V18.2643C23.2222 18.071 23.0655 17.9143 22.8722 17.9143H21.7944C21.6011 17.9143 21.4444 18.071 21.4444 18.2643V21.2214ZM12.5556 13.9214C12.5556 13.7281 12.7123 13.5714 12.9056 13.5714H21.0944C21.2877 13.5714 21.4444 13.7281 21.4444 13.9214V15.4522C21.4444 15.7664 21.8264 15.9214 22.0454 15.6962L24.7628 12.9011C24.8949 12.7653 24.8949 12.549 24.7628 12.4132L22.0454 9.61812C21.8264 9.39284 21.4444 9.5479 21.4444 9.8621V11.3929C21.4444 11.5862 21.2877 11.7429 21.0944 11.7429H11.1278C10.9345 11.7429 10.7778 11.8996 10.7778 12.0929V16.8786C10.7778 17.0719 10.9345 17.2286 11.1278 17.2286H12.2056C12.3989 17.2286 12.5556 17.0719 12.5556 16.8786V13.9214Z",
  fill: color
}));

Swap.defaultProps = {
  className: undefined
};
Swap.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Swap;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\icon\swap-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SwapIcon({
  width = '17',
  height = '17',
  color = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.1714 9.66035V12.3786H4.68253C4.51685 12.3786 4.38253 12.2443 4.38253 12.0786V10.5478C4.38253 10.1888 3.94605 10.0116 3.69574 10.269L0.978328 13.0641C0.827392 13.2193 0.827392 13.4665 0.978328 13.6217L3.69573 16.4168C3.94604 16.6742 4.38253 16.497 4.38253 16.1379V14.6072C4.38253 14.4415 4.51685 14.3072 4.68253 14.3072H14.9992H15.0492V14.2572V9.66035C15.0492 9.14182 14.6288 8.72146 14.1103 8.72146C13.5918 8.72146 13.1714 9.14182 13.1714 9.66035ZM2.55476 2.55003H2.50476V2.60003V7.19686C2.50476 7.71539 2.92511 8.13575 3.44364 8.13575C3.96218 8.13575 4.38253 7.71539 4.38253 7.19686V4.70619C4.38253 4.5805 4.48443 4.47861 4.61012 4.47861H12.8714C13.0371 4.47861 13.1714 4.61292 13.1714 4.77861V6.30937C13.1714 6.66845 13.6079 6.84566 13.8582 6.5882L16.5756 3.79315C16.7266 3.6379 16.7266 3.39074 16.5756 3.23549L13.8582 0.440443C13.6079 0.182981 13.1714 0.360188 13.1714 0.719273V2.25004C13.1714 2.41572 13.0371 2.55003 12.8714 2.55003H2.55476Z",
    fill: color,
    stroke: color,
    strokeWidth: "0.1"
  }));
}

SwapIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Color of the icon should be a valid design system color
   */
  color: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\blockieIdenticon.component.js", {"@download/blockies":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@download\\blockies\\dist\\blockies.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\identicon\blockieIdenticon\blockieIdenticon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _blockies = require("@download/blockies");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const BlockieIdenticon = ({
  address,
  diameter,
  alt = '',
  borderRadius
}) => {
  const [dataUrl, setDataUrl] = (0, _react.useState)(null);
  const canvasRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    const canvas = canvasRef.current;
    (0, _blockies.renderIcon)({
      seed: address.toLowerCase()
    }, canvas);
    const updatedDataUrl = canvas.toDataURL();

    if (updatedDataUrl !== dataUrl) {
      setDataUrl(updatedDataUrl);
    }
  }, [dataUrl, address]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("canvas", {
    ref: canvasRef,
    style: {
      display: 'none'
    }
  }), /*#__PURE__*/_react.default.createElement("img", {
    src: dataUrl,
    height: diameter,
    width: diameter,
    style: {
      borderRadius
    },
    alt: alt
  }));
};

BlockieIdenticon.propTypes = {
  address: _propTypes.default.string.isRequired,
  diameter: _propTypes.default.number.isRequired,
  alt: _propTypes.default.string,
  borderRadius: _propTypes.default.string
};
var _default = BlockieIdenticon;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\index.js", {"./blockieIdenticon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\blockieIdenticon.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\identicon\blockieIdenticon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _blockieIdenticon.default;
  }
});

var _blockieIdenticon = _interopRequireDefault(require("./blockieIdenticon.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\identicon.component.js", {"../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../jazzicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\jazzicon\\index.js","./blockieIdenticon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\identicon\identicon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _jazzicon = _interopRequireDefault(require("../jazzicon"));

var _util = require("../../../helpers/utils/util");

var _blockieIdenticon = _interopRequireDefault(require("./blockieIdenticon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getStyles = diameter => ({
  height: diameter,
  width: diameter,
  borderRadius: diameter / 2
});

class Identicon extends _react.Component {
  renderImage() {
    const {
      className,
      diameter,
      alt,
      imageBorder,
      ipfsGateway
    } = this.props;
    let {
      image
    } = this.props;

    if (Array.isArray(image) && image.length) {
      image = image[0];
    }

    if (typeof image === 'string' && image.toLowerCase().startsWith('ipfs://')) {
      image = (0, _util.getAssetImageURL)(image, ipfsGateway);
    }

    return /*#__PURE__*/_react.default.createElement("img", {
      className: (0, _classnames.default)('identicon', className, {
        'identicon__image-border': imageBorder
      }),
      src: image,
      style: getStyles(diameter),
      alt: alt
    });
  }

  renderJazzicon() {
    const {
      address,
      className,
      diameter,
      alt,
      tokenList
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_jazzicon.default, {
      address: address,
      diameter: diameter,
      className: (0, _classnames.default)('identicon', className),
      style: getStyles(diameter),
      alt: alt,
      tokenList: tokenList
    });
  }

  renderBlockie() {
    const {
      address,
      className,
      diameter,
      alt
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('identicon', className),
      style: getStyles(diameter)
    }, /*#__PURE__*/_react.default.createElement(_blockieIdenticon.default, {
      address: address,
      diameter: diameter,
      alt: alt
    }));
  }

  shouldComponentUpdate(nextProps) {
    // We only want to re-render if props are different.
    return !(0, _lodash.isEqual)(nextProps, this.props);
  }

  render() {
    const {
      address,
      image,
      useBlockie,
      addBorder,
      diameter,
      tokenList
    } = this.props;
    const size = diameter + 8;

    if (image) {
      return this.renderImage();
    }

    if (address) {
      var _tokenList$address$to;

      if ((_tokenList$address$to = tokenList[address.toLowerCase()]) !== null && _tokenList$address$to !== void 0 && _tokenList$address$to.iconUrl) {
        return this.renderJazzicon();
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)({
          'identicon__address-wrapper': addBorder
        }),
        style: addBorder ? getStyles(size) : null
      }, useBlockie ? this.renderBlockie() : this.renderJazzicon());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      style: getStyles(diameter),
      className: "identicon__image-border"
    });
  }

}

exports.default = Identicon;

_defineProperty(Identicon, "propTypes", {
  /**
   * Adds blue border around the Identicon used for selected account.
   * Increases the width and height of the Identicon by 8px
   */
  addBorder: _propTypes.default.bool,

  /**
   * Address used for generating random image
   */
  address: _propTypes.default.string,

  /**
   * Add custom css class
   */
  className: _propTypes.default.string,

  /**
   * Sets the width and height of the inner img element
   * If addBorder is true will increase components height and width by 8px
   */
  diameter: _propTypes.default.number,

  /**
   * Used as the image source of the Identicon
   */
  image: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array]),

  /**
   * Use the blockie type random image generator
   */
  useBlockie: _propTypes.default.bool,

  /**
   * The alt text of the image
   */
  alt: _propTypes.default.string,

  /**
   * Check if show image border
   */
  imageBorder: _propTypes.default.bool,

  /**
   * Add list of token in object
   */
  tokenList: _propTypes.default.object,

  /**
   * User preferred IPFS gateway
   */
  ipfsGateway: _propTypes.default.string
});

_defineProperty(Identicon, "defaultProps", {
  addBorder: false,
  address: undefined,
  className: undefined,
  diameter: 46,
  image: undefined,
  useBlockie: false,
  alt: '',
  tokenList: {}
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\identicon.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./identicon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\identicon.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\identicon\identicon.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _identicon = _interopRequireDefault(require("./identicon.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      useBlockie,
      ipfsGateway
    }
  } = state;
  return {
    useBlockie,
    tokenList: (0, _selectors.getTokenList)(state),
    ipfsGateway
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_identicon.default);

exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js", {"./identicon.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\identicon.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\identicon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _identicon.default;
  }
});

var _identicon = _interopRequireDefault(require("./identicon.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js", {"./info-tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\info-tooltip\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _infoTooltip.default;
  }
});

var _infoTooltip = _interopRequireDefault(require("./info-tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip-icon.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\info-tooltip\info-tooltip-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoTooltipIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InfoTooltipIcon({
  fillColor = 'var(--color-icon-default)'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    viewBox: "0 0 10 10",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M5 0C2.2 0 0 2.2 0 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 2c.4 0 .7.3.7.7s-.3.7-.7.7-.7-.2-.7-.6.3-.8.7-.8zm.7 6H4.3V4.3h1.5V8z",
    fill: fillColor
  }));
}

InfoTooltipIcon.propTypes = {
  fillColor: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js", {"../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","./info-tooltip-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip-icon.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\info-tooltip\info-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoTooltip;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _infoTooltipIcon = _interopRequireDefault(require("./info-tooltip-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const positionArrowClassMap = {
  top: 'info-tooltip__top-tooltip-arrow',
  bottom: 'info-tooltip__bottom-tooltip-arrow',
  left: 'info-tooltip__left-tooltip-arrow',
  right: 'info-tooltip__right-tooltip-arrow'
};

function InfoTooltip({
  contentText = '',
  position = '',
  containerClassName,
  wrapperClassName,
  iconFillColor = 'var(--color-icon-alternative)'
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "info-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    interactive: true,
    position: position,
    containerClassName: (0, _classnames.default)('info-tooltip__tooltip-container', containerClassName),
    wrapperClassName: wrapperClassName,
    tooltipInnerClassName: "info-tooltip__tooltip-content",
    tooltipArrowClassName: positionArrowClassMap[position],
    html: contentText,
    theme: "tippy-tooltip-info"
  }, /*#__PURE__*/_react.default.createElement(_infoTooltipIcon.default, {
    fillColor: iconFillColor
  })));
}

InfoTooltip.propTypes = {
  /**
   * Text label that shows up after hover
   */
  contentText: _propTypes.default.node,

  /**
   * Shows position of the tooltip
   */
  position: _propTypes.default.oneOf(['top', 'left', 'bottom', 'right']),

  /**
   * Add custom CSS class for container
   */
  containerClassName: _propTypes.default.string,

  /**
   * Add custom CSS class for the wrapper
   */
  wrapperClassName: _propTypes.default.string,

  /**
   * Add color for the icon
   */
  iconFillColor: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\jazzicon\\index.js", {"./jazzicon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\jazzicon\\jazzicon.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\jazzicon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _jazzicon.default;
  }
});

var _jazzicon = _interopRequireDefault(require("./jazzicon.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\jazzicon\\jazzicon.component.js", {"../../../helpers/utils/icon-factory":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\icon-factory.js","@metamask/jazzicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\jazzicon\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\jazzicon\jazzicon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _jazzicon = _interopRequireDefault(require("@metamask/jazzicon"));

var _iconFactory = _interopRequireDefault(require("../../../helpers/utils/icon-factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const iconFactory = (0, _iconFactory.default)(_jazzicon.default);
/**
 * Wrapper around the jazzicon library to return a React component, as the library returns an
 * HTMLDivElement which needs to be appended.
 */

function Jazzicon({
  address,
  className,
  diameter = 46,
  style,
  tokenList = {}
}) {
  const container = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    const _container = container.current; // add icon

    const imageNode = iconFactory.iconForAddress(address, diameter, tokenList[address === null || address === void 0 ? void 0 : address.toLowerCase()]);
    _container === null || _container === void 0 ? void 0 : _container.appendChild(imageNode); // remove icon

    return () => {
      while (_container.firstChild) {
        _container.firstChild.remove();
      }
    };
  }, [address, diameter, tokenList]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: container,
    className: className,
    style: style
  });
}

Jazzicon.propTypes = {
  /**
   * Address used for generating random image
   */
  address: _propTypes.default.string.isRequired,

  /**
   * Add custom css class
   */
  className: _propTypes.default.string,

  /**
   * Sets the width and height of the inner img element
   * Jazzicon accepts a pixel diameter
   */
  diameter: _propTypes.default.number,

  /**
   * Add inline style for the component
   */
  style: _propTypes.default.object,

  /**
   * Add list of token in object
   */
  tokenList: _propTypes.default.object
};
var _default = Jazzicon;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\list-item\\index.js", {"./list-item.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\list-item\\list-item.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\list-item\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _listItem.default;
  }
});

var _listItem = _interopRequireDefault(require("./list-item.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\list-item\\list-item.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\list-item\list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListItem;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ListItem({
  title,
  subtitle,
  onClick,
  children,
  titleIcon,
  icon,
  rightContent,
  midContent,
  className,
  'data-testid': dataTestId
}) {
  const primaryClassName = (0, _classnames.default)('list-item', className, subtitle || children ? '' : 'list-item--single-content-row');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: primaryClassName,
    onClick: onClick,
    "data-testid": dataTestId,
    role: "button",
    tabIndex: 0,
    onKeyPress: event => {
      if (event.key === 'Enter') {
        onClick();
      }
    }
  }, icon ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__icon"
  }, icon) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__heading"
  }, /*#__PURE__*/_react.default.isValidElement(title) ? title : /*#__PURE__*/_react.default.createElement("h2", {
    className: "list-item__title"
  }, title), titleIcon && /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__heading-wrap"
  }, titleIcon)), subtitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__subheading"
  }, subtitle) : null, children ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__actions"
  }, children) : null, midContent ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__mid-content"
  }, midContent) : null, rightContent ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__right-content"
  }, rightContent) : null);
}

ListItem.propTypes = {
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  titleIcon: _propTypes.default.node,
  subtitle: _propTypes.default.node,
  children: _propTypes.default.node,
  icon: _propTypes.default.node,
  rightContent: _propTypes.default.node,
  midContent: _propTypes.default.node,
  className: _propTypes.default.string,
  onClick: _propTypes.default.func,
  'data-testid': _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js", {"../../../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","../../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../hooks/useShouldAnimateGasEstimations":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useShouldAnimateGasEstimations.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\loading-heartbeat\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadingHeartBeat;

var _reactRedux = require("react-redux");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _gas = require("../../../helpers/utils/gas");

var _app = require("../../../ducks/app/app");

var _useShouldAnimateGasEstimations = require("../../../hooks/useShouldAnimateGasEstimations");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BASE_CLASS = 'loading-heartbeat';
const LOADING_CLASS = `${BASE_CLASS}--active`;

function LoadingHeartBeat({
  estimateUsed,
  backgroundColor = 'var(--color-background-default)'
}) {
  (0, _useShouldAnimateGasEstimations.useShouldAnimateGasEstimations)();
  const active = (0, _reactRedux.useSelector)(_app.getGasLoadingAnimationIsShowing);

  if (false || estimateUsed && !(0, _gas.isMetamaskSuggestedGasEstimate)(estimateUsed)) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('loading-heartbeat', {
      [LOADING_CLASS]: active
    }),
    onClick: e => {
      e.preventDefault();
      e.stopPropagation();
    },
    style: {
      backgroundColor
    }
  });
}

LoadingHeartBeat.propTypes = {
  backgroundColor: _propTypes.default.string,
  estimateUsed: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-indicator\\index.js", {"./loading-indicator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-indicator\\loading-indicator.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\loading-indicator\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingIndicator.default;
  }
});

var _loadingIndicator = _interopRequireDefault(require("./loading-indicator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-indicator\\loading-indicator.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\loading-indicator\loading-indicator.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadingIndicator;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LoadingIndicator({
  alt,
  title,
  isLoading,
  children = null
}) {
  return isLoading ? /*#__PURE__*/_react.default.createElement("span", {
    className: "loading-indicator"
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "loading-indicator__spinner",
    alt: alt,
    title: title,
    src: "images/loading.svg"
  })) : children;
}

LoadingIndicator.propTypes = {
  isLoading: _propTypes.default.bool.isRequired,
  alt: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired,
  children: _propTypes.default.node
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js", {"./loading-screen.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\loading-screen.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\loading-screen\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _loadingScreen = _interopRequireDefault(require("./loading-screen.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _loadingScreen.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\loading-screen\\loading-screen.component.js", {"../spinner":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\loading-screen\loading-screen.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _spinner = _interopRequireDefault(require("../spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LoadingScreen extends _react.Component {
  renderMessage() {
    const {
      loadingMessage
    } = this.props;

    if (!loadingMessage) {
      return null;
    }

    return /*#__PURE__*/(0, _react.isValidElement)(loadingMessage) ? loadingMessage : /*#__PURE__*/_react.default.createElement("span", null, loadingMessage);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-overlay"
    }, this.props.header, /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-overlay__container"
    }, this.props.showLoadingSpinner && /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-warning-default)",
      className: "loading-overlay__spinner"
    }), this.renderMessage()));
  }

}

_defineProperty(LoadingScreen, "defaultProps", {
  loadingMessage: null,
  showLoadingSpinner: true
});

_defineProperty(LoadingScreen, "propTypes", {
  loadingMessage: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  showLoadingSpinner: _propTypes.default.bool,
  header: _propTypes.default.element
});

var _default = LoadingScreen;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\lock-icon\\index.js", {"./lock-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\lock-icon\\lock-icon.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\lock-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _lockIcon.default;
  }
});

var _lockIcon = _interopRequireDefault(require("./lock-icon.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\lock-icon\\lock-icon.component.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\lock-icon\lock-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LockIcon;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function LockIcon(props) {
  return /*#__PURE__*/_react.default.createElement("svg", _extends({
    version: "1.1",
    id: "Capa_1",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    width: "401.998px",
    height: "401.998px",
    viewBox: "0 0 401.998 401.998",
    style: {
      enableBackground: 'new 0 0 401.998 401.998'
    },
    xmlSpace: "preserve"
  }, props), /*#__PURE__*/_react.default.createElement("g", null, /*#__PURE__*/_react.default.createElement("path", {
    d: "M357.45,190.721c-5.331-5.33-11.8-7.993-19.417-7.993h-9.131v-54.821c0-35.022-12.559-65.093-37.685-90.218\r C266.093,12.563,236.025,0,200.998,0c-35.026,0-65.1,12.563-90.222,37.688C85.65,62.814,73.091,92.884,73.091,127.907v54.821\r h-9.135c-7.611,0-14.084,2.663-19.414,7.993c-5.33,5.326-7.994,11.799-7.994,19.417V374.59c0,7.611,2.665,14.086,7.994,19.417\r c5.33,5.325,11.803,7.991,19.414,7.991H338.04c7.617,0,14.085-2.663,19.417-7.991c5.325-5.331,7.994-11.806,7.994-19.417V210.135\r C365.455,202.523,362.782,196.051,357.45,190.721z M274.087,182.728H127.909v-54.821c0-20.175,7.139-37.402,21.414-51.675\r c14.277-14.275,31.501-21.411,51.678-21.411c20.179,0,37.399,7.135,51.677,21.411c14.271,14.272,21.409,31.5,21.409,51.675V182.728\r z"
  })));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-coinbasepay.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-coinbasepay.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoCoinbasePay = ({
  width = '100%',
  className,
  ariaLabel,
  color = 'var(--color-text-default)'
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    viewBox: "0 0 125 24",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    className: `logo-coinbasepay ${className}`,
    "aria-label": ariaLabel
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M28.4278 4.10732C28.2105 4.09956 27.9938 4.13626 27.7911 4.21515C27.5885 4.29405 27.404 4.41349 27.2491 4.56615C27.0942 4.71882 26.9721 4.9015 26.8903 5.103C26.8085 5.3045 26.7686 5.52059 26.7732 5.73803C26.7913 6.1643 26.9734 6.56711 27.2815 6.86233C27.5895 7.15755 27.9996 7.32237 28.4263 7.32237C28.853 7.32237 29.2631 7.15755 29.5712 6.86233C29.8792 6.56711 30.0613 6.1643 30.0794 5.73803C30.0844 5.52074 30.0449 5.30471 29.9634 5.10322C29.8819 4.90172 29.7601 4.71901 29.6055 4.5663C29.4508 4.41359 29.2666 4.2941 29.064 4.21517C28.8615 4.13625 28.645 4.09955 28.4278 4.10732ZM84.799 8.47177C81.4928 8.47177 79.0661 10.9611 79.0661 14.2433C79.0661 17.7015 81.6657 19.997 84.8407 19.997C87.5238 19.997 89.6285 18.408 90.1651 16.1543H87.482C87.0945 17.141 86.1494 17.7015 84.8854 17.7015C83.2309 17.7015 81.9877 16.67 81.7075 14.8664H90.2277V13.8737C90.2277 10.6957 87.9113 8.47177 84.799 8.47177ZM81.8565 13.0211C82.265 11.4768 83.4246 10.7255 84.7542 10.7255C86.215 10.7255 87.33 11.5603 87.5894 13.0211H81.8565ZM19.0102 8.47177C18.2476 8.45519 17.4894 8.59283 16.7812 8.87644C16.0731 9.16005 15.4295 9.58378 14.8891 10.1222C14.3487 10.6607 13.9227 11.3027 13.6365 12.0099C13.3503 12.717 13.2099 13.4747 13.2238 14.2374C13.2238 17.5435 15.6922 19.9911 18.9983 19.9911C19.7652 20.0134 20.5287 19.8797 21.2423 19.5982C21.956 19.3166 22.6051 18.8929 23.1501 18.3529C23.6951 17.8129 24.1247 17.1678 24.4129 16.4568C24.7011 15.7458 24.8418 14.9836 24.8265 14.2165C24.8265 10.9551 22.3581 8.47177 19.0102 8.47177ZM19.0311 17.6151C17.1858 17.6151 15.8323 16.1751 15.8323 14.2433C15.8323 12.3115 17.1649 10.8567 19.0102 10.8567C20.8556 10.8567 22.2299 12.3145 22.2299 14.2463C22.2299 16.1781 20.8765 17.6091 19.0311 17.6091V17.6151ZM37.7917 8.47177C36.1163 8.47177 35.0222 9.15744 34.3782 10.1233V8.68045H31.8234V19.7764H34.3902V13.7455C34.3902 12.0492 35.4723 10.8567 37.0732 10.8567C38.5638 10.8567 39.4761 11.9091 39.4761 13.4325V19.7764H42.0518V13.2417C42.0399 10.4394 40.6029 8.47177 37.7917 8.47177ZM6.75461 10.8567C7.38882 10.8516 8.0076 11.0523 8.51819 11.4285C9.02879 11.8047 9.4037 12.3363 9.58673 12.9435H12.3115C11.8196 10.2813 9.62847 8.47177 6.77548 8.47177C6.0138 8.45681 5.25693 8.59565 4.55016 8.87999C3.84338 9.16433 3.20123 9.58832 2.66212 10.1266C2.12302 10.6649 1.69803 11.3064 1.4126 12.0127C1.12716 12.719 0.987147 13.4757 1.00093 14.2374C1.00093 17.5435 3.46935 19.9911 6.77548 19.9911C9.56586 19.9911 11.7988 18.2023 12.2907 15.5193H9.58673C9.41182 16.1287 9.04244 16.6642 8.5349 17.0442C8.02735 17.4242 7.40949 17.6278 6.77548 17.624C4.90628 17.624 3.59754 16.1841 3.59754 14.2523C3.59754 12.3205 4.87646 10.8567 6.75461 10.8567ZM25.5361 10.9849H27.1459V19.7764H29.7216V8.68045H25.548L25.5361 10.9849ZM66.2322 12.4755C66.2322 10.0727 64.7714 8.46283 61.6799 8.46283C58.7613 8.46283 57.1306 9.95342 56.8087 12.2191H59.3635C59.4917 11.3248 60.1774 10.6093 61.6382 10.6093C62.9469 10.6093 63.5908 11.1876 63.5908 11.8971C63.5908 12.8183 62.3984 13.0538 60.9525 13.2059C58.976 13.4205 56.5284 14.1002 56.5284 16.6819C56.5284 18.6793 58.019 19.9612 60.3712 19.9612C62.2165 19.9612 63.3762 19.1891 63.9486 17.9639C64.0321 19.0579 64.8429 19.7675 65.9877 19.7675H67.4783V17.472H66.2113L66.2322 12.4755ZM63.6982 15.2659C63.6982 16.7565 62.4103 17.8416 60.8452 17.8416C59.8793 17.8416 59.0565 17.4332 59.0565 16.5746C59.0565 15.4805 60.3652 15.1794 61.5666 15.0512C62.768 14.923 63.3553 14.6875 63.6922 14.1927L63.6982 15.2659ZM74.4751 13.1612L72.5851 12.8839C71.6907 12.7557 71.0408 12.4546 71.0408 11.7451C71.0408 10.973 71.8755 10.5854 73.0144 10.5854C74.2605 10.5854 75.0535 11.122 75.2264 12.0045H77.7157C77.4354 9.77157 75.7183 8.46283 73.0799 8.46283C70.3522 8.46283 68.5485 9.85802 68.5485 11.8316C68.5485 13.7216 69.741 14.8127 72.126 15.1586L74.0131 15.4388C74.9372 15.567 75.453 15.9307 75.453 16.6313C75.453 17.5107 74.5586 17.8744 73.3065 17.8744C71.7801 17.8744 70.9216 17.2514 70.7934 16.3093H68.2624C68.4979 18.4766 70.1942 20 73.2827 20C76.0969 20 77.9631 18.7121 77.9631 16.5001C77.9512 14.5176 76.5977 13.4861 74.4751 13.1642V13.1612ZM50.0265 8.47177C49.36 8.4623 48.6998 8.60194 48.0943 8.88048C47.4887 9.15901 46.9531 9.5694 46.5266 10.0816V4H43.9508V19.7764H46.4848V18.3097C46.9093 18.8394 47.4488 19.2656 48.0624 19.5559C48.676 19.8462 49.3477 19.993 50.0265 19.9851C53.1179 19.9851 55.4552 17.5375 55.4552 14.2314C55.4552 10.9253 53.0732 8.47177 50.0265 8.47177ZM49.6389 17.6151C47.7936 17.6151 46.4401 16.1751 46.4401 14.2433C46.4401 12.3115 47.8055 10.8567 49.6598 10.8567C51.5141 10.8567 52.8377 12.2936 52.8377 14.2463C52.8377 16.199 51.4843 17.6091 49.6389 17.6091V17.6151Z",
    fill: "#0052FF"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M97.314 8.67746H102.111C104.496 8.67746 105.846 10.016 105.846 11.9568C105.846 13.8975 104.508 15.2689 102.111 15.2689H98.9864V19.7794H97.314V8.67746ZM104.15 11.8792C104.15 10.7911 103.455 10.1114 102.063 10.1114H98.9864V13.8379H102.063C103.449 13.8379 104.15 13.1582 104.15 12.0492V11.8792Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M113.025 17.1172H108.055L107.077 19.7675H105.342L109.602 8.66556H111.51L115.815 19.7675H114.026L113.025 17.1172ZM108.577 15.6833H112.497L110.541 10.4483H110.509L108.577 15.6833Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M118.543 15.4269L114.602 8.67746H116.429L119.381 13.7872H119.41L122.362 8.67746H124.174L120.215 15.4269V19.7794H118.543V15.4269Z",
    fill: color
  }));
};

LogoCoinbasePay.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoCoinbasePay;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-deposit-eth.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-deposit-eth.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoDepositEth = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 80 78",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M46.82 37.7L34.405 44.9489L22 37.7L34.407 55L46.82 37.7ZM34.405 44.9489L34.407 44.95H34.403L34.405 44.9489Z"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M22.187 35.37L34.593 15L47 35.378L34.593 42.628L22.187 35.37Z"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M71.5 59.423H65.077V53H60.923V59.423H54.5V63.577H60.923V70H65.077V63.577H71.5V59.423Z"
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M34 68C38.4608 68 42.7208 67.141 46.6239 65.5793C48.6231 72.7439 55.1978 78 63 78C72.3889 78 80 70.3889 80 61C80 52.7752 74.1592 45.9147 66.3992 44.3399C67.4389 41.0794 68 37.6052 68 34C68 15.2223 52.7777 0 34 0C15.2223 0 0 15.2223 0 34C0 52.7777 15.2223 68 34 68ZM34 3C16.8792 3 3 16.8792 3 34C3 51.1208 16.8792 65 34 65C38.2818 65 42.3609 64.1319 46.0708 62.5621C46.0239 62.0477 46 61.5266 46 61C46 51.6111 53.6111 44 63 44C63.1171 44 63.2339 44.0012 63.3505 44.0035C64.4199 40.8651 65 37.5003 65 34C65 16.8792 51.1208 3 34 3ZM63 47C55.268 47 49 53.268 49 61C49 68.732 55.268 75 63 75C70.732 75 77 68.732 77 61C77 53.268 70.732 47 63 47Z"
  }));
};

LogoDepositEth.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoDepositEth;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-lattice.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-lattice.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoLattice = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 2546 491",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2460 15V30H2488H2516V140V250H2531H2546V125V0H2503H2460V15ZM1861 116.038C1796.99 123.881 1741.39 163.865 1712.97 222.5C1680.8 288.855 1690.83 365.835 1739.17 423.5C1778.97 470.987 1839.99 496.383 1898.79 489.935C1937.49 485.692 1976.26 467.949 2005.03 441.315L2010.98 435.803L1997.36 421.444L1983.74 407.085L1974.62 415.109C1953.06 434.078 1931.7 444.965 1904.88 450.669C1893.48 453.093 1867.95 453.103 1855.82 450.689C1837.26 446.995 1819.5 439.522 1802.54 428.264C1790.63 420.354 1773.3 403.429 1764.69 391.295C1752.74 374.459 1743.39 352.909 1738.81 331.648C1735.63 316.902 1735.66 289.005 1738.87 274C1751.85 213.28 1797.55 166.907 1855.82 155.311C1867.95 152.897 1893.48 152.907 1904.88 155.331C1931.7 161.035 1953.06 171.922 1974.62 190.891L1983.74 198.915L1997.38 184.534L2011.02 170.153L2003.26 163.053C1977.39 139.393 1945.42 123.844 1909.5 117.465C1898.75 115.555 1871.49 114.753 1861 116.038ZM0 303V485H120H240V465.5V446H140.5H41V283.5V121H20.5H0V303ZM407.496 297.75C364.676 394.963 328.599 476.871 327.325 479.769L325.009 485.038L347.632 484.769L370.256 484.5L386.106 448.5C394.823 428.7 403.087 410.135 404.469 407.245L406.983 401.99L508.152 402.245L609.321 402.5L627.41 443.719L645.5 484.938L668.135 484.969L690.769 485L655.85 405.75C636.645 362.163 600.584 280.269 575.716 223.763L530.5 121.027L507.925 121.013L485.35 121L407.496 297.75ZM749 140.5V160H810H871V322.5V485H891.5H912V322.5V160H973H1034V140.5V121H891.5H749V140.5ZM1133 140.5V160H1194H1255V322.5V485H1275.5H1296V322.5V160H1357H1418V140.5V121H1275.5H1133V140.5ZM1534 303V485H1554.5H1575V303V121H1554.5H1534V303ZM2120 303V485H2250.5H2381V465.5V446H2271.5H2162V382.5V319H2260.5H2359V299.5V280H2260.5H2162V220V160H2271.5H2381V140.5V121H2250.5H2120V303ZM550.073 267.125C572.858 318.894 591.65 361.644 591.833 362.125C592.022 362.621 555.677 363 507.976 363C428.21 363 423.821 362.908 424.447 361.25C426.983 354.537 507.62 173.036 508.073 173.02C508.388 173.009 527.288 215.356 550.073 267.125Z"
  }));
};

LogoLattice.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoLattice;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-ledger.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-ledger.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoLedger = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 198 49",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M34.1 0H15.5V25.1H40.6V6.5C40.6 2.9 37.7 0 34.1 0ZM9.7 0H6.5C2.9 0 0 2.9 0 6.5V9.7H9.7V0ZM0 15.5H9.7V25.2H0V15.5ZM31 40.6H34.2C37.8 40.6 40.7 37.7 40.7 34.1V31H31V40.6ZM15.5 31H25.2V40.7H15.5V31ZM0 31V34.2C0 37.8 2.9 40.7 6.5 40.7H9.7V31H0ZM65.4 2.6H61.6V38.1H81.7V34.7H65.4V2.6ZM93.9 12C86.5 12 81.3 17.5 81.3 25.4V26.3C81.4 29.7 82.9 32.9 85.4 35.3C87.8 37.5 90.9 38.8 94.2 38.8H94.7C98.2 38.8 101.5 37.5 104.1 35.3L104.2 35.2L102.5 32.4L102.3 32.5C100.2 34.4 97.6 35.5 94.8 35.5C90.2 35.5 85.5 32.5 85.2 25.8H104.4V25.6C104.4 25.6 104.5 24.4 104.5 23.8C104.5 16.6 100.3 12 93.9 12ZM85.3 22.6C86.1 18.1 89.4 15.2 93.7 15.2C96.9 15.2 100.4 17.1 100.7 22.6H85.3ZM126.5 15V16.3C124.9 13.6 121.9 11.9 118.8 11.9H118.5C111.7 11.9 107 17.3 107 25.2C107 33.2 111.5 38.6 118.2 38.6C123.5 38.6 125.9 35.4 126.7 34V37.9H130.3V2.6H126.6V15H126.5ZM118.7 35.3C114 35.3 110.9 31.3 110.9 25.3C110.9 19.5 114.2 15.4 118.8 15.4C122.7 15.4 126.6 18.5 126.6 25.3C126.6 32.7 122.5 35.3 118.7 35.3ZM152.2 15.5V15.7C151.5 14.5 149.3 11.9 144 11.9C137.3 11.9 132.9 17 132.9 24.8C132.9 32.6 137.5 37.9 144.3 37.9C148 37.9 150.5 36.6 152.2 33.9V37.4C152.2 42.3 149.1 45.1 143.6 45.1C141.3 45.1 138.9 44.5 136.8 43.4L136.6 43.3L135.2 46.4L135.4 46.5C138 47.8 140.9 48.5 143.7 48.5C149.6 48.5 155.9 45.5 155.9 37.2V12.6H152.2V15.5ZM144.8 34.6C139.9 34.6 136.7 30.8 136.7 24.9C136.7 18.9 139.5 15.5 144.3 15.5C149.6 15.5 152.1 18.6 152.1 24.9C152.2 31.1 149.6 34.6 144.8 34.6ZM171 12C163.6 12 158.5 17.5 158.5 25.3V26.2C158.6 29.6 160.1 32.8 162.6 35.2C165 37.4 168.1 38.7 171.4 38.7H171.9C175.4 38.7 178.7 37.4 181.3 35.2L181.4 35.1L179.6 32.3L179.4 32.4C177.3 34.3 174.7 35.4 171.9 35.4C167.3 35.4 162.6 32.4 162.3 25.7H181.6V25.5C181.6 25.5 181.7 24.3 181.7 23.7C181.7 16.6 177.5 12 171 12V12ZM162.5 22.6C163.3 18.1 166.6 15.2 170.9 15.2C174.1 15.2 177.6 17.1 177.9 22.6H162.5ZM197.3 12.5C196.8 12.4 196.4 12.4 195.9 12.3C192.4 12.3 189.5 14.5 188 18.2V12.5H184.3L184.4 37.8V38H188.2V27.3C188.2 25.7 188.4 24 188.9 22.5C190.1 18.6 192.8 16.1 196 16.1C196.4 16.1 196.8 16.1 197.2 16.2H197.4V12.5H197.3Z"
  }));
};

LogoLedger.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoLedger;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-moonpay.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-moonpay.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const COLOR_MOONPAY_CIRCLES = '#7D00FF';

const LogoMoonPay = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 1920 350",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M1790.37 287.486L1718.37 122.098H1766.58L1815.75 240.711L1872.58 122.098H1920L1807.93 349.906H1759.72L1790.37 287.486ZM1615.05 253.243C1619.31 252.274 1623.41 250.744 1627.26 248.693C1630.99 246.712 1634.45 244.272 1637.56 241.43C1640.67 238.581 1643.36 235.301 1645.54 231.691C1647.83 227.899 1649.6 223.819 1650.81 219.559C1652.12 214.91 1652.76 210.1 1652.73 205.271C1652.77 200.389 1652.13 195.525 1650.81 190.823C1649.6 186.563 1647.83 182.483 1645.54 178.691C1643.35 175.066 1640.66 171.762 1637.56 168.873C1634.48 166.006 1631.02 163.587 1627.26 161.689C1623.39 159.737 1619.28 158.263 1615.05 157.299C1610.6 156.279 1606.05 155.77 1601.48 155.782C1596.94 155.767 1592.42 156.275 1587.99 157.299C1583.81 158.263 1579.76 159.738 1575.94 161.689C1572.2 163.613 1568.74 166.029 1565.64 168.873C1562.5 171.746 1559.79 175.052 1557.58 178.691C1555.3 182.475 1553.55 186.558 1552.39 190.823C1551.13 195.534 1550.51 200.394 1550.56 205.271C1550.52 210.095 1551.14 214.901 1552.39 219.559C1553.55 223.824 1555.3 227.907 1557.58 231.691C1559.77 235.316 1562.49 238.597 1565.64 241.43C1568.78 244.248 1572.23 246.687 1575.94 248.693C1579.73 250.743 1583.79 252.274 1587.99 253.243C1592.41 254.268 1596.94 254.777 1601.48 254.76C1606.05 254.774 1610.6 254.265 1615.05 253.243V253.243ZM1566.44 290.28C1559.05 288.399 1551.94 285.554 1545.29 281.819C1532.34 274.536 1521.65 263.819 1514.4 250.849C1510.66 244.143 1507.82 236.979 1505.94 229.537C1502 213.546 1502 196.838 1505.94 180.846C1507.81 173.427 1510.65 166.288 1514.4 159.614C1521.68 146.69 1532.36 136.007 1545.29 128.723C1551.94 124.989 1559.05 122.144 1566.44 120.262C1574.34 118.258 1582.47 117.265 1590.63 117.309C1595.03 117.299 1599.43 117.566 1603.8 118.107C1607.81 118.605 1611.79 119.405 1615.69 120.502C1619.3 121.527 1622.85 122.78 1626.31 124.253C1629.54 125.63 1632.66 127.258 1635.64 129.122C1638.45 130.878 1641.07 132.91 1643.47 135.189C1645.71 137.318 1647.79 139.613 1649.69 142.053V122.098H1695.51V288.444H1649.69V268.489C1646.76 272.164 1643.41 275.486 1639.71 278.387C1635.63 281.598 1631.15 284.28 1626.39 286.369C1621.09 288.695 1615.55 290.408 1609.86 291.477C1603.52 292.678 1597.08 293.266 1590.63 293.233C1582.47 293.277 1574.34 292.285 1566.44 290.28V290.28ZM1400.11 164.243C1406.67 164.363 1413.22 163.612 1419.58 162.008C1424.54 160.755 1429.17 158.44 1433.15 155.223C1436.74 152.228 1439.49 148.349 1441.13 143.969C1442.92 139.005 1443.79 133.758 1443.69 128.484C1443.79 123.235 1442.92 118.013 1441.13 113.078C1439.49 108.745 1436.74 104.919 1433.15 101.983C1429.15 98.8142 1424.53 96.529 1419.58 95.2782C1413.22 93.6764 1406.67 92.9249 1400.11 93.0432H1355.09V164.243L1400.11 164.243ZM1307.67 53.7714H1404.58C1419.8 53.7714 1432.99 55.6339 1444.17 59.3589C1455.34 63.0839 1464.55 68.2456 1471.79 74.8441C1478.98 81.3866 1484.54 89.5366 1487.99 98.6307C1491.61 108.218 1493.43 118.394 1493.34 128.643C1493.45 138.868 1491.64 149.023 1487.99 158.576C1484.48 167.594 1478.93 175.68 1471.79 182.203C1464.55 188.856 1455.34 194.045 1444.17 197.768C1432.99 201.496 1419.8 203.358 1404.58 203.355H1355.09V288.444H1307.67V53.7714ZM1104.08 122.098H1149.57V142.053C1152.38 138.18 1155.71 134.715 1159.47 131.756C1163.45 128.635 1167.79 126.008 1172.4 123.934C1177.48 121.662 1182.82 120.001 1188.29 118.985C1194.37 117.842 1200.54 117.28 1206.73 117.309C1216.36 117.171 1225.93 118.794 1234.98 122.098C1243.04 125.068 1250.35 129.783 1256.37 135.907C1262.43 142.253 1267.01 149.857 1269.78 158.177C1272.99 167.743 1274.55 177.782 1274.41 187.87V288.444H1228.92V199.684C1229.03 193.195 1228.11 186.73 1226.2 180.527C1224.62 175.405 1221.99 170.673 1218.46 166.638C1215.07 162.889 1210.83 160.014 1206.09 158.257C1200.72 156.314 1195.04 155.367 1189.33 155.463C1183.59 155.372 1177.88 156.319 1172.48 158.257C1167.71 159.999 1163.44 162.876 1160.03 166.638C1156.51 170.673 1153.87 175.405 1152.29 180.527C1150.38 186.73 1149.47 193.195 1149.57 199.684V288.444H1104.08V122.098ZM992.117 252.764C996.46 251.714 1000.67 250.161 1004.65 248.134C1008.44 246.197 1011.91 243.694 1014.95 240.711C1017.95 237.768 1020.55 234.439 1022.69 230.813C1024.86 227.079 1026.48 223.044 1027.48 218.84C1028.56 214.291 1029.1 209.628 1029.07 204.951C1029.1 200.301 1028.57 195.664 1027.48 191.142C1025.46 182.809 1021.12 175.222 1014.95 169.272C1011.87 166.315 1008.41 163.79 1004.65 161.768C1000.7 159.649 996.485 158.066 992.117 157.059C987.379 155.971 982.531 155.435 977.669 155.463C972.861 155.441 968.066 155.977 963.381 157.059C959.036 158.056 954.847 159.64 950.929 161.768C947.205 163.804 943.769 166.327 940.712 169.272C937.701 172.17 935.145 175.507 933.129 179.169C931.07 182.931 929.462 186.924 928.34 191.063C927.134 195.593 926.543 200.264 926.584 204.952C926.557 209.638 927.147 214.308 928.34 218.841C929.433 223.015 931.041 227.037 933.129 230.814C935.17 234.459 937.724 237.792 940.712 240.711C943.729 243.681 947.173 246.183 950.929 248.135C954.88 250.17 959.061 251.724 963.381 252.765C968.058 253.901 972.856 254.463 977.669 254.441C982.535 254.469 987.387 253.907 992.117 252.765V252.764ZM950.849 290.2C942.64 288.29 934.684 285.423 927.142 281.659C920.049 278.123 913.47 273.639 907.586 268.329C901.884 263.17 896.94 257.232 892.899 250.689C888.804 244.029 885.66 236.829 883.56 229.297C879.197 213.36 879.197 196.543 883.56 180.607C885.651 173.097 888.796 165.922 892.899 159.294C896.969 152.773 901.91 146.838 907.586 141.654C913.454 136.303 920.036 131.79 927.142 128.244C934.684 124.482 942.641 121.616 950.849 119.704C968.608 115.659 987.049 115.659 1004.81 119.704C1012.97 121.599 1020.88 124.466 1028.36 128.244C1035.43 131.842 1042.01 136.351 1047.91 141.654C1053.68 146.819 1058.7 152.755 1062.84 159.294C1066.99 165.908 1070.16 173.086 1072.26 180.607C1076.62 196.543 1076.62 213.36 1072.26 229.297C1070.15 236.84 1066.98 244.043 1062.84 250.689C1058.73 257.25 1053.7 263.19 1047.91 268.329C1041.99 273.591 1035.42 278.071 1028.36 281.659C1020.9 285.431 1013.02 288.298 1004.89 290.2C987.102 294.244 968.635 294.244 950.849 290.2V290.2ZM773.31 252.764C777.653 251.715 781.859 250.161 785.842 248.134C789.631 246.197 793.103 243.694 796.139 240.711C799.145 237.768 801.748 234.439 803.881 230.813C806.058 227.079 807.672 223.045 808.671 218.84C809.756 214.291 810.292 209.628 810.267 204.951C810.295 200.301 809.759 195.664 808.671 191.142C806.658 182.809 802.311 175.222 796.139 169.272C793.063 166.315 789.599 163.79 785.842 161.768C781.892 159.649 777.678 158.065 773.31 157.059C768.572 155.971 763.724 155.435 758.862 155.463C754.054 155.441 749.26 155.977 744.575 157.059C740.229 158.056 736.04 159.64 732.122 161.768C728.399 163.805 724.963 166.328 721.906 169.272C718.894 172.171 716.338 175.507 714.323 179.169C712.265 182.932 710.657 186.924 709.533 191.063C708.327 195.592 707.737 200.264 707.777 204.951C707.75 209.638 708.34 214.308 709.533 218.84C710.628 223.014 712.236 227.036 714.323 230.813C716.363 234.459 718.917 237.792 721.906 240.711C724.923 243.68 728.366 246.182 732.122 248.134C736.073 250.169 740.254 251.724 744.575 252.764C749.252 253.9 754.05 254.463 758.862 254.441C763.728 254.469 768.58 253.906 773.31 252.764V252.764ZM732.043 290.2C723.834 288.29 715.877 285.424 708.336 281.66C701.243 278.124 694.664 273.639 688.78 268.33C683.078 263.171 678.134 257.232 674.093 250.69C669.997 244.03 666.854 236.829 664.754 229.298C660.39 213.361 660.39 196.544 664.754 180.607C666.845 173.098 669.989 165.923 674.093 159.295C678.163 152.774 683.104 146.839 688.78 141.655C694.648 136.304 701.23 131.791 708.336 128.245C715.878 124.483 723.834 121.617 732.043 119.704C749.802 115.66 768.243 115.66 786.002 119.704C794.164 121.599 802.069 124.467 809.549 128.245C816.625 131.843 823.199 136.351 829.105 141.655C834.869 146.819 839.892 152.756 844.031 159.295C848.182 165.908 851.354 173.086 853.45 180.607C857.813 196.544 857.813 213.361 853.45 229.298C851.345 236.841 848.174 244.044 844.031 250.69C839.921 257.251 834.895 263.191 829.105 268.33C823.183 273.592 816.611 278.072 809.549 281.66C802.094 285.431 794.216 288.299 786.081 290.2C768.295 294.244 749.829 294.244 732.043 290.2V290.2ZM372.943 53.7714H420.836L502.732 178.93L584.947 53.7714H632.84V288.444H585.426V127.526L517.419 231.293H488.364L420.357 127.526V288.444H372.943V53.7714Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M263.588 95.7848C273.06 95.7848 282.32 92.976 290.195 87.7135C298.071 82.451 304.21 74.9712 307.835 66.2201C311.46 57.4689 312.408 47.8393 310.56 38.5491C308.712 29.2589 304.151 20.7253 297.453 14.0274C290.755 7.32951 282.221 2.7682 272.931 0.920261C263.641 -0.927678 254.011 0.020751 245.26 3.64561C236.509 7.27048 229.029 13.409 223.767 21.2848C218.504 29.1607 215.695 38.4202 215.695 47.8924C215.695 54.1819 216.934 60.4098 219.34 66.2205C221.747 72.0313 225.275 77.311 229.722 81.7583C234.169 86.2056 239.449 89.7334 245.26 92.14C251.071 94.5467 257.298 95.7852 263.588 95.7848V95.7848ZM116.738 311.48C93.6492 311.48 71.0791 304.634 51.8817 291.806C32.6842 278.979 17.7216 260.747 8.88603 239.416C0.050415 218.085 -2.26137 194.613 2.243 171.968C6.74738 149.323 17.8656 128.522 34.1917 112.196C50.5178 95.87 71.3185 84.7518 93.9635 80.2475C116.608 75.7432 140.081 78.055 161.412 86.8907C182.743 95.7263 200.975 110.689 213.802 129.886C226.629 149.084 233.476 171.654 233.475 194.743C233.476 210.073 230.457 225.253 224.59 239.417C218.724 253.58 210.125 266.449 199.285 277.289C188.445 288.13 175.575 296.728 161.412 302.595C147.248 308.461 132.068 311.48 116.738 311.48",
    fill: COLOR_MOONPAY_CIRCLES
  }));
};

LogoMoonPay.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoMoonPay;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-qr-based.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-qr-based.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoQRBased = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 107 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M1.3333 8H6.6667C7.403 8 8 7.403 8 6.6667V1.3333C8 0.597002 7.403 0 6.6667 0H1.3333C0.597 0 0 0.597002 0 1.3333V6.6667C0 7.403 0.597 8 1.3333 8ZM2.6667 2.6667H5.3333V5.3333H2.6667V2.6667ZM0.6667 13.3333H2C2.3682 13.3333 2.6667 13.0349 2.6667 12.6667V11.3333C2.6667 10.9651 2.3682 10.6667 2 10.6667H0.6667C0.2985 10.6667 0 10.9651 0 11.3333V12.6667C0 13.0349 0.2985 13.3333 0.6667 13.3333ZM6.6667 16H1.3333C0.597 16 0 16.597 0 17.3333V22.6667C0 23.403 0.597 24 1.3333 24H6.6667C7.403 24 8 23.403 8 22.6667V17.3333C8 16.597 7.403 16 6.6667 16ZM5.3333 21.3333H2.6667V18.6667H5.3333V21.3333ZM19.3333 24H23.3333C23.7015 24 24 23.7015 24 23.3333V19.3333C24 18.9651 23.7015 18.6667 23.3333 18.6667H22C21.6318 18.6667 21.3333 18.9651 21.3333 19.3333V21.3333H18.6667V23.3333C18.6667 23.7015 18.9651 24 19.3333 24ZM22.6667 0H17.3333C16.597 0 16 0.597002 16 1.3333V6.6667C16 7.403 16.597 8 17.3333 8H22.6667C23.403 8 24 7.403 24 6.6667V1.3333C24 0.597002 23.403 0 22.6667 0ZM21.3333 5.3333H18.6667V2.6667H21.3333V5.3333ZM6 10.6667C5.6318 10.6667 5.3333 10.9651 5.3333 11.3333V12.6667C5.3333 13.0349 5.6318 13.3333 6 13.3333H10.6667V10.6667H6ZM10.6667 15.3333C10.6667 15.7015 10.9651 16 11.3333 16H13.3333V18C13.3333 18.3682 13.6318 18.6667 14 18.6667H16V13.3333H10.6667V15.3333ZM10.6667 22V23.3333C10.6667 23.7015 10.9651 24 11.3333 24H15.3333C15.7015 24 16 23.7015 16 23.3333V21.3333H11.3333C10.9651 21.3333 10.6667 21.6318 10.6667 22ZM23.3333 10.6667H16.6667C16.2985 10.6667 16 10.9651 16 11.3333V13.3333H18.6667V15.3333C18.6667 15.7015 18.9651 16 19.3333 16H20.6667C21.0349 16 21.3333 15.7015 21.3333 15.3333V13.3333H23.3333C23.7015 13.3333 24 13.0349 24 12.6667V11.3333C24 10.9651 23.7015 10.6667 23.3333 10.6667ZM18.6667 21.3333V18.6667H16V21.3333H18.6667ZM11.3333 5.3333H12.6667C13.0349 5.3333 13.3333 5.0349 13.3333 4.6667V0.666698C13.3333 0.298498 13.0349 0 12.6667 0H11.3333C10.9651 0 10.6667 0.298498 10.6667 0.666698V4.6667C10.6667 5.0349 10.9651 5.3333 11.3333 5.3333ZM13.3333 10V8.6667C13.3333 8.2985 13.0349 8 12.6667 8H11.3333C10.9651 8 10.6667 8.2985 10.6667 8.6667V10.6667H12.6667C13.0349 10.6667 13.3333 10.3682 13.3333 10Z"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M38.592 18.192C37.7707 18.192 37.0027 18.0427 36.288 17.744C35.584 17.4347 34.9653 17.0187 34.432 16.496C33.8987 15.9627 33.4773 15.3387 33.168 14.624C32.8693 13.9093 32.72 13.1413 32.72 12.32C32.72 11.4987 32.8693 10.7307 33.168 10.016C33.4773 9.3013 33.8987 8.6827 34.432 8.16C34.9653 7.6267 35.584 7.2107 36.288 6.912C37.0027 6.6027 37.7707 6.448 38.592 6.448C39.4133 6.448 40.1813 6.6027 40.896 6.912C41.6107 7.2107 42.2293 7.6267 42.752 8.16C43.2853 8.6827 43.7013 9.3013 44 10.016C44.3093 10.7307 44.464 11.4987 44.464 12.32C44.464 13.0347 44.3467 13.7067 44.112 14.336C43.888 14.9653 43.5733 15.536 43.168 16.048L45.28 18H43.248L42.16 17.008C41.6693 17.3813 41.12 17.6747 40.512 17.888C39.904 18.0907 39.264 18.192 38.592 18.192ZM38.592 16.784C39.5413 16.784 40.3787 16.528 41.104 16.016L39.296 14.336L40.208 13.312L42.08 15.056C42.3573 14.6827 42.576 14.2667 42.736 13.808C42.896 13.3387 42.976 12.8427 42.976 12.32C42.976 11.7013 42.864 11.12 42.64 10.576C42.416 10.032 42.1067 9.5573 41.712 9.152C41.328 8.7467 40.864 8.432 40.32 8.208C39.7867 7.9733 39.2107 7.856 38.592 7.856C37.9733 7.856 37.3973 7.9733 36.864 8.208C36.3307 8.432 35.8667 8.7467 35.472 9.152C35.088 9.5573 34.784 10.032 34.56 10.576C34.336 11.12 34.224 11.7013 34.224 12.32C34.224 12.9493 34.336 13.536 34.56 14.08C34.784 14.6133 35.088 15.0827 35.472 15.488C35.8667 15.8933 36.3307 16.2133 36.864 16.448C37.3973 16.672 37.9733 16.784 38.592 16.784ZM46.9259 6.64H50.7979C51.3205 6.64 51.7899 6.7147 52.2059 6.864C52.6325 7.0133 52.9899 7.2267 53.2779 7.504C53.5765 7.7813 53.8005 8.112 53.9499 8.496C54.1099 8.88 54.1899 9.3067 54.1899 9.776C54.1899 10.608 53.9392 11.2907 53.4379 11.824C52.9472 12.3573 52.2592 12.688 51.3739 12.816L55.7579 18H53.8859L49.5179 12.832H48.4139V18H46.9259V6.64ZM50.6219 11.504C51.2725 11.504 51.7792 11.36 52.1419 11.072C52.5152 10.784 52.7019 10.352 52.7019 9.776C52.7019 9.2 52.5152 8.7627 52.1419 8.464C51.7792 8.1653 51.2725 8.016 50.6219 8.016H48.4139V11.504H50.6219ZM55.8681 12.832H59.948V14.208H55.8681V12.832ZM66.488 18.16C65.88 18.16 65.325 18.0267 64.824 17.76C64.323 17.4827 63.939 17.152 63.672 16.768V18H62.296V6H63.672V11.232C63.939 10.848 64.323 10.5227 64.824 10.256C65.325 9.9787 65.88 9.84 66.488 9.84C67.043 9.84 67.56 9.952 68.04 10.176C68.52 10.3893 68.936 10.688 69.288 11.072C69.64 11.4453 69.912 11.8827 70.104 12.384C70.307 12.8853 70.408 13.424 70.408 14C70.408 14.576 70.307 15.1147 70.104 15.616C69.912 16.1173 69.64 16.56 69.288 16.944C68.936 17.3173 68.52 17.616 68.04 17.84C67.56 18.0533 67.043 18.16 66.488 18.16ZM66.28 16.896C66.685 16.896 67.053 16.8213 67.384 16.672C67.715 16.5227 67.997 16.32 68.232 16.064C68.477 15.7973 68.664 15.488 68.792 15.136C68.931 14.784 69 14.4053 69 14C69 13.5947 68.931 13.216 68.792 12.864C68.664 12.512 68.477 12.208 68.232 11.952C67.997 11.6853 67.715 11.4773 67.384 11.328C67.053 11.1787 66.685 11.104 66.28 11.104C65.875 11.104 65.507 11.1787 65.176 11.328C64.845 11.4773 64.557 11.6853 64.312 11.952C64.077 12.208 63.891 12.512 63.752 12.864C63.624 13.216 63.56 13.5947 63.56 14C63.56 14.4053 63.624 14.784 63.752 15.136C63.891 15.488 64.077 15.7973 64.312 16.064C64.557 16.32 64.845 16.5227 65.176 16.672C65.507 16.8213 65.875 16.896 66.28 16.896ZM75.67 18.16C75.105 18.16 74.582 18.0533 74.102 17.84C73.633 17.616 73.222 17.3173 72.87 16.944C72.518 16.56 72.241 16.1173 72.038 15.616C71.846 15.1147 71.75 14.576 71.75 14C71.75 13.424 71.846 12.8853 72.038 12.384C72.241 11.8827 72.518 11.4453 72.87 11.072C73.222 10.688 73.633 10.3893 74.102 10.176C74.582 9.952 75.105 9.84 75.67 9.84C76.278 9.84 76.833 9.9787 77.334 10.256C77.835 10.5227 78.219 10.848 78.486 11.232V10H79.862V18H78.486V16.768C78.219 17.152 77.835 17.4827 77.334 17.76C76.833 18.0267 76.278 18.16 75.67 18.16ZM75.878 16.896C76.283 16.896 76.651 16.8213 76.982 16.672C77.313 16.5227 77.595 16.32 77.83 16.064C78.075 15.7973 78.262 15.488 78.39 15.136C78.529 14.784 78.598 14.4053 78.598 14C78.598 13.5947 78.529 13.216 78.39 12.864C78.262 12.512 78.075 12.208 77.83 11.952C77.595 11.6853 77.313 11.4773 76.982 11.328C76.651 11.1787 76.283 11.104 75.878 11.104C75.473 11.104 75.099 11.1787 74.758 11.328C74.427 11.4773 74.139 11.6853 73.894 11.952C73.659 12.208 73.473 12.512 73.334 12.864C73.206 13.216 73.142 13.5947 73.142 14C73.142 14.4053 73.206 14.784 73.334 15.136C73.473 15.488 73.659 15.7973 73.894 16.064C74.139 16.32 74.427 16.5227 74.758 16.672C75.099 16.8213 75.473 16.896 75.878 16.896ZM85.028 18.16C84.602 18.16 84.196 18.1067 83.812 18C83.428 17.8933 83.092 17.7387 82.804 17.536C82.516 17.3227 82.282 17.0613 82.1 16.752C81.919 16.4427 81.812 16.0853 81.78 15.68H83.188C83.231 15.9253 83.311 16.1333 83.428 16.304C83.556 16.464 83.706 16.5973 83.876 16.704C84.047 16.8107 84.228 16.8853 84.42 16.928C84.623 16.9707 84.831 16.992 85.044 16.992C85.482 16.992 85.844 16.9067 86.132 16.736C86.431 16.5547 86.58 16.288 86.58 15.936C86.58 15.616 86.479 15.3547 86.276 15.152C86.074 14.9493 85.732 14.784 85.252 14.656L84.1 14.352C83.407 14.1707 82.89 13.8773 82.548 13.472C82.207 13.0667 82.036 12.576 82.036 12C82.036 11.6693 82.106 11.3707 82.244 11.104C82.383 10.8373 82.575 10.6133 82.82 10.432C83.066 10.24 83.354 10.096 83.684 10C84.026 9.8933 84.399 9.84 84.804 9.84C85.231 9.84 85.615 9.8987 85.956 10.016C86.298 10.1333 86.591 10.2987 86.836 10.512C87.092 10.7147 87.295 10.9547 87.444 11.232C87.594 11.5093 87.684 11.808 87.716 12.128H86.34C86.234 11.776 86.042 11.4987 85.764 11.296C85.498 11.0933 85.178 10.992 84.804 10.992C84.42 10.992 84.095 11.0827 83.828 11.264C83.562 11.4347 83.428 11.6747 83.428 11.984C83.428 12.2827 83.524 12.5227 83.716 12.704C83.908 12.8747 84.218 13.0187 84.644 13.136L85.924 13.472C86.596 13.6427 87.103 13.9307 87.444 14.336C87.796 14.7307 87.972 15.232 87.972 15.84C87.972 16.2347 87.898 16.5813 87.748 16.88C87.599 17.168 87.391 17.408 87.124 17.6C86.858 17.792 86.543 17.9307 86.18 18.016C85.828 18.112 85.444 18.16 85.028 18.16ZM93.329 18.16C92.742 18.16 92.204 18.0587 91.713 17.856C91.222 17.6427 90.796 17.3493 90.433 16.976C90.081 16.6027 89.804 16.1653 89.601 15.664C89.398 15.152 89.297 14.5973 89.297 14C89.297 13.4133 89.388 12.8693 89.569 12.368C89.761 11.856 90.033 11.4133 90.385 11.04C90.737 10.6667 91.164 10.3733 91.665 10.16C92.166 9.9467 92.732 9.84 93.361 9.84C93.99 9.84 94.55 9.9627 95.041 10.208C95.542 10.4427 95.958 10.768 96.289 11.184C96.63 11.5893 96.876 12.0693 97.025 12.624C97.185 13.168 97.244 13.7493 97.201 14.368H90.689C90.7 14.7307 90.774 15.0667 90.913 15.376C91.062 15.6853 91.254 15.9573 91.489 16.192C91.724 16.416 92.001 16.592 92.321 16.72C92.641 16.848 92.982 16.912 93.345 16.912C93.846 16.912 94.294 16.8107 94.689 16.608C95.094 16.3947 95.42 16.048 95.665 15.568H97.073C96.977 15.92 96.822 16.256 96.609 16.576C96.396 16.8853 96.129 17.1573 95.809 17.392C95.5 17.6267 95.137 17.8133 94.721 17.952C94.305 18.0907 93.841 18.16 93.329 18.16ZM93.313 11.056C93.025 11.056 92.742 11.0987 92.465 11.184C92.188 11.2693 91.932 11.4027 91.697 11.584C91.473 11.7653 91.276 11.9947 91.105 12.272C90.934 12.5493 90.817 12.8853 90.753 13.28H95.745C95.617 12.5333 95.329 11.9787 94.881 11.616C94.433 11.2427 93.91 11.056 93.313 11.056ZM102.483 18.16C101.917 18.16 101.395 18.0533 100.915 17.84C100.445 17.616 100.035 17.3173 99.683 16.944C99.331 16.56 99.053 16.1173 98.851 15.616C98.659 15.1147 98.563 14.576 98.563 14C98.563 13.424 98.659 12.8853 98.851 12.384C99.053 11.8827 99.331 11.4453 99.683 11.072C100.035 10.688 100.445 10.3893 100.915 10.176C101.395 9.952 101.917 9.84 102.483 9.84C103.091 9.84 103.645 9.9787 104.147 10.256C104.648 10.5227 105.032 10.848 105.299 11.232V6H106.675V18H105.299V16.768C105.032 17.152 104.648 17.4827 104.147 17.76C103.645 18.0267 103.091 18.16 102.483 18.16ZM102.691 16.896C103.096 16.896 103.464 16.8213 103.795 16.672C104.125 16.5227 104.408 16.32 104.643 16.064C104.888 15.7973 105.075 15.488 105.203 15.136C105.341 14.784 105.411 14.4053 105.411 14C105.411 13.5947 105.341 13.216 105.203 12.864C105.075 12.512 104.888 12.208 104.643 11.952C104.408 11.6853 104.125 11.4773 103.795 11.328C103.464 11.1787 103.096 11.104 102.691 11.104C102.285 11.104 101.912 11.1787 101.571 11.328C101.24 11.4773 100.952 11.6853 100.707 11.952C100.472 12.208 100.285 12.512 100.147 12.864C100.019 13.216 99.955 13.5947 99.955 14C99.955 14.4053 100.019 14.784 100.147 15.136C100.285 15.488 100.472 15.7973 100.707 16.064C100.952 16.32 101.24 16.5227 101.571 16.672C101.912 16.8213 102.285 16.896 102.691 16.896Z"
  }));
};

LogoQRBased.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoQRBased;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-transak.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-transak.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoTransak = ({
  width = '100%',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    viewBox: "0 0 1813 480",
    xmlns: "http://www.w3.org/2000/svg",
    className: className,
    "aria-label": ariaLabel
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M431.4 479.4H40.3C18.3 479.4 0.5 461.6 0.5 439.6V40.5C0.5 18.5 18.3 0.699997 40.3 0.699997H431.5C453.5 0.699997 471.3 18.5 471.3 40.5V439.6C471.3 461.5 453.5 479.4 431.4 479.4Z",
    fill: "url(#paint0_linear_9_13)"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M471.3 290.6V439.5C471.3 461.5 453.5 479.3 431.5 479.3H282.6L471.3 290.6Z",
    fill: "#2970E2"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M158.4 288.7L297.3 144.3C307.9 133.7 324.5 134.5 335.6 145.5L415.9 222.9C424.4 231.1 424.2 247.3 416.3 256C406 266.3 394.4 267 378.8 256.4L320.6 193.4L174.3 332.5C164.5 340.1 154.5 346.5 139.1 336.6C133.8 329.5 144.3 315.6 140.2 311.5L158.4 288.7Z",
    fill: "#D1D9E6"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M152.1 337.2C140.2 336.8 130.9 329.1 130.9 319.9L131.6 154.8C131.6 145.7 140.1 134.6 152 134.2C167.8 134.2 174.7 147 174.7 156.5V320.3C174.8 329.8 164.5 337.5 152.1 337.2Z",
    fill: "#D1D9E6"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M314.1 341.7C299.4 341.7 293.2 330.8 293.2 322.2V170.8C293.2 162.3 302.3 151.9 314.1 151.5C326.4 151.1 336.6 161.5 336.6 170.4V320.1C336.6 330.7 329.3 341.7 314.1 341.7Z",
    fill: "#D1D9E6"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M147.1 339C138 338.6 130.9 330.9 130.9 321.7V156.6C130.9 147.5 138 136.4 147.1 136C156.6 135.6 164.6 146.6 164.6 156.2V322.2C164.6 331.7 156.7 339.4 147.1 339Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M309.5 340.7C300.2 340.7 292.6 329.9 292.6 320.5V157.9C292.6 148.6 300.2 141 309.5 141C318.8 141 326.4 148.6 326.4 157.9V320.6C326.3 329.8 318.8 340.7 309.5 340.7Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M147.8 337.4C142.3 337.4 136.8 335.3 132.7 331.1L56.2 254.4C47.9 246 47.9 232.5 56.3 224.1C64.7 215.8 78.2 215.8 86.6 224.2L148.2 286.2L295.6 145.9C303.9 138 316.9 138 325.2 146L405.4 223.4C413.9 231.6 414.1 245.1 406 253.7C397.9 262.2 384.3 262.4 375.7 254.3L310.2 191.2L162.5 331.5C158.4 335.4 153.1 337.4 147.8 337.4Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M294.7 217.8L285.4 226.6C285.4 226.6 288 211.9 280.5 219C272.9 226.2 292.1 200.8 292.1 200.8L296 205.7L294.7 217.8Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M326.3 215.6C326.3 215.6 326.8 206.6 336.6 222V209.9L326 204.4L326.3 215.6Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M164.7 258.2C164.7 258.2 166.1 268.2 174.9 255.3V267.4L164.3 272.9L164.7 258.2Z",
    fill: "white"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M674.3 176.3L676.4 177C676.7 182.7 676.9 193.4 676.9 209.1C676.9 210.1 675.4 210.5 672.4 210.5H651.7C649.8 210.5 648.8 212 648.8 215V337.8C648.8 338 648.4 338.3 647.6 338.9C646.8 339.5 646.3 339.7 645.9 339.7H608.5L606.8 338.3C606.3 337.8 606.1 300.5 606.1 226.4V211.6C586.9 211.6 577.3 210.4 577.3 208V177.5C577.3 177.3 577.9 176.9 579.2 176.1H622C624.2 176.4 625.6 176.7 626 176.8C626.5 176.8 626.7 176.6 626.7 176.1H674.3V176.3ZM733.1 175.9H799C814.1 175.9 827.4 181.4 838.9 192.4C850.4 203.4 856.2 216.6 856.2 231.8C856.2 243.7 852.8 254 846.1 262.7C839.4 271.4 830.3 278.2 818.8 282.9C818.3 282.9 818.1 283.3 818.1 284.1V284.3C818.3 284.5 818.3 284.6 818.3 284.8L859 334.5C859.5 335.3 860 336.2 860.4 337.1C860.8 338 861.2 338.7 861.5 339.1C861.7 339.5 861.9 339.8 861.9 339.9C861.9 340.4 859.3 340.8 854 341.2C848.8 341.6 845.3 341.8 843.5 341.8C842.2 341.8 841.4 341.6 840.9 341.1H815.4C813.8 340.9 812.5 340.1 811.4 338.5L778.3 299.5C778.1 299.3 777.8 298.9 777.3 298.3C776.8 297.7 776.3 297.2 775.9 296.9C775.4 296.6 774.9 296.4 774.5 296.4C774.2 296.4 773.8 297.4 773.3 299.5V338.1C773.3 339.4 772.8 340 771.9 340H739.5C736.6 340 734.7 339.4 733.8 338.1C732.8 336.8 732.2 334.7 731.9 331.7C731.9 317.6 732 299.7 732.3 278C732.5 256.3 732.7 240 732.7 229.1C732.7 227.4 732.6 221 732.5 210.1L732 193.7C732.4 182.1 732.8 176.2 733.1 175.9ZM813.3 231.3C813.3 226.9 812.3 223 810.2 219.6C806.2 213.4 798 210.3 785.4 210.3C783.2 210.3 779.8 210.5 775.4 210.8L773.3 213.2C773.3 215.3 773.2 218.5 773.1 222.8C772.9 227.2 772.8 230.9 772.7 233.9C772.6 236.9 772.6 239.1 772.6 240.3C772.6 250.9 773.6 256.9 775.5 258.2H778.1C791.3 257.9 800.4 256.1 805.6 252.7C810.8 249.4 813.3 242.3 813.3 231.3ZM967.8 174H996.1C996.9 174 999.2 178.4 1002.9 187.1C1006.6 195.8 1008.5 200.7 1008.5 201.6C1011.8 210.3 1029.8 254.7 1062.5 334.6C1062.5 336.8 1061.5 338.2 1059.6 338.8C1057.7 339.4 1054.2 339.6 1049.1 339.6L1037 339.4C1028.9 339.2 1022.8 339.2 1018.7 339.2C1018.4 338.2 1017.7 336.6 1016.8 334.2C1015.8 331.8 1015.1 330 1014.5 328.7C1013.9 327.4 1013.1 325.8 1012 323.9C1010.9 322 1009.7 320.3 1008.4 318.7C1007.3 318.7 1005.1 318.5 1001.7 318.1C998.4 317.7 995.4 317.5 992.7 317.5L962.9 318C962.4 318 961 317.9 958.6 317.8C956.2 317.6 954.9 317.6 954.8 317.6C951.9 317.6 949.5 321.3 947.4 328.8C945.3 336.3 943.6 340.5 942.2 341.4C937.9 341.6 932.6 341.4 926.4 341C920.1 340.6 914.9 340.4 910.6 340.4C903.9 340.4 900.6 339.4 900.6 337.5C900.6 337.2 900.6 336.8 900.7 336.3C900.8 335.8 900.8 335.5 900.8 335.3L914.6 295.3C916.7 291.2 919.2 285 922.1 276.7C925 268.5 926.9 263.4 927.7 261.5C930.9 253.3 936.3 239.5 944 220.3C951.7 201.1 957.5 186.3 961.5 175.8C961.8 174.6 963.8 174 967.8 174ZM970.2 285.1H976.4C987.8 284.8 993.5 284.1 993.5 283.2C993.5 280.3 991 273.1 986.1 261.5C984.2 256.9 983.1 254.4 982.8 253.9L979.7 246.5C978.9 246.5 976.2 252 971.7 262.9C967.2 273.8 964.9 280.3 964.9 282.2C964.9 284.1 966.7 285.1 970.2 285.1ZM1253.2 265.3C1253.2 265.6 1253.1 266.3 1253 267.4C1252.8 268.5 1252.7 269.6 1252.5 270.7L1252.3 272.1C1252.3 278.9 1252.5 289.2 1252.8 302.8C1253.1 316.4 1253.3 326.6 1253.3 333.3C1253.3 337.9 1252.3 340.2 1250.4 340.2H1219.5C1217 340.2 1215.1 339.3 1214 337.6L1184.7 293.8C1184.5 293.2 1183.8 292.1 1182.6 290.7C1181.3 289.3 1180.7 288.5 1180.7 288.3L1156.7 253.6L1153.8 250.5L1153.3 251.5C1153.3 310.4 1152.6 339.8 1151.2 339.8H1113.6L1112.2 339.1C1112.2 326.9 1112.4 305.9 1112.7 276.1C1113 246.3 1113.2 224.3 1113.2 209.8C1113.2 198.9 1113 190.6 1112.7 185L1113.7 178.1L1118.5 177.1L1148.5 178.1C1149.3 178.1 1150.2 178.9 1151.4 180.5C1152.5 182.1 1153.2 183.4 1153.5 184.3L1175.9 216.7C1176.2 217.3 1176.8 218.2 1177.7 219.4C1178.6 220.6 1179.2 221.5 1179.5 222.1L1210.2 264.2C1210.7 265.3 1211.3 265.9 1212.1 265.9C1212.6 265.9 1212.8 265.7 1212.8 265.2V179.3L1214.2 178.1C1214.4 177.9 1217.8 177.9 1224.4 177.9C1243.1 177.9 1252.5 178.2 1252.5 178.9L1253.5 180.3V265.3H1253.2ZM1378.3 287.5C1375.9 285.1 1372.9 282.7 1369.1 280.2C1365.4 277.7 1361.1 275.1 1356.2 272.3C1351.4 269.5 1348.4 267.7 1347.3 266.9C1326.8 253.9 1316.6 238.2 1316.6 219.8C1316.6 204.4 1322 192.9 1332.8 185.3C1343.6 177.7 1357.6 173.9 1374.7 173.9C1384.1 173.9 1393.5 175.8 1403 179.6C1404.7 180.2 1407.6 181.5 1411.4 183.4C1415.3 185.3 1417.2 186.7 1417.2 187.4L1417 188.6C1417 188.8 1416.8 189 1416.5 189.4C1416.2 189.8 1416 190.2 1416 190.5C1411.1 200.7 1406.3 208.9 1401.7 215.3C1401.5 215.8 1401.1 216 1400.5 216C1399.9 216 1396.2 214.7 1389.6 212.1C1382.9 209.5 1377.8 208.2 1374.1 208.2C1370.6 208.2 1367.4 209.2 1364.3 211.1C1361.3 213 1359.8 215.6 1359.8 219C1359.8 223.3 1362.2 227.3 1366.9 231.1C1370.1 233.5 1376.4 237.7 1385.9 243.7C1388 245.1 1390.7 247 1394 249.3C1397.3 251.6 1399.9 253.4 1401.9 254.8C1403.8 256.1 1405.9 257.8 1408.3 259.8C1410.7 261.8 1412.7 263.7 1414.2 265.6C1418 270.5 1420.6 275 1421.9 278.9C1423.2 282.9 1423.9 287.7 1423.9 293.4C1423.9 308.3 1418.3 320.6 1407 330.2C1395.7 339.8 1382.3 344.6 1366.8 344.6C1349.8 344.6 1333.9 340.5 1319 332.2C1312.3 328.1 1309 325.6 1309 324.8V323.8C1316 311.1 1321.8 301.3 1326.4 294.3C1328.6 294.3 1331.2 295.4 1334.1 297.6C1337 299.8 1338.7 301 1339.2 301.2C1347.6 305.5 1357.2 307.6 1368 307.6C1377.4 307.6 1382 304.1 1382 297.1C1382.4 294.2 1381 291 1378.3 287.5ZM1536.1 174H1564.4C1565.2 174 1567.5 178.4 1571.2 187.1C1574.9 195.8 1576.8 200.7 1576.8 201.6C1580.1 210.3 1598.1 254.7 1630.8 334.6C1630.8 336.8 1629.8 338.2 1627.9 338.8C1626 339.4 1622.5 339.6 1617.4 339.6L1605.3 339.4C1597.2 339.2 1591.1 339.2 1587 339.2C1586.7 338.2 1586 336.6 1585.1 334.2C1584.1 331.8 1583.4 330 1582.8 328.7C1582.2 327.4 1581.4 325.8 1580.3 323.9C1579.2 322 1578 320.3 1576.7 318.7C1575.6 318.7 1573.4 318.5 1570 318.1C1566.7 317.7 1563.7 317.5 1561 317.5L1531.2 318C1530.7 318 1529.3 317.9 1526.9 317.8C1524.5 317.6 1523.2 317.6 1523.1 317.6C1520.2 317.6 1517.8 321.3 1515.7 328.8C1513.6 336.3 1511.9 340.5 1510.5 341.4C1506.2 341.6 1500.9 341.4 1494.7 341C1488.4 340.6 1483.2 340.4 1478.9 340.4C1472.2 340.4 1468.9 339.4 1468.9 337.5C1468.9 337.2 1468.9 336.8 1469 336.3C1469.1 335.8 1469.1 335.5 1469.1 335.3L1482.9 295.3C1485 291.2 1487.5 285 1490.4 276.7C1493.3 268.5 1495.2 263.4 1496 261.5C1499.2 253.3 1504.6 239.5 1512.3 220.3C1520 201.1 1525.8 186.3 1529.8 175.8C1530.1 174.6 1532.2 174 1536.1 174ZM1538.5 285.1H1544.7C1556.1 284.8 1561.8 284.1 1561.8 283.2C1561.8 280.3 1559.3 273.1 1554.4 261.5C1552.5 256.9 1551.4 254.4 1551.1 253.9L1548 246.5C1547.2 246.5 1544.5 252 1540 262.9C1535.5 273.8 1533.2 280.3 1533.2 282.2C1533.3 284.1 1535 285.1 1538.5 285.1ZM1716.1 173C1721 173 1723.5 173.9 1723.5 175.6V224.2C1723.5 225.8 1723.7 226.6 1724 226.6C1725.1 226.6 1726.5 225.6 1728.2 223.5C1729.9 221.4 1731.6 219.1 1733.3 216.5C1735 213.9 1736.4 212.2 1737.3 211.4L1764 175.2C1764.8 174.2 1765.9 173.8 1767.3 173.8H1802.5L1808.2 174.8C1808.5 174.8 1808.7 175.1 1808.7 175.8C1808.7 176.9 1808.5 177.6 1808.2 177.9L1798 194.1L1796.6 195.1L1766.1 235.8C1765.6 236.3 1765.4 236.9 1765.4 237.7C1765.4 238.8 1765.6 239.8 1766.1 240.6L1812.3 336C1812.3 336.2 1812.3 336.4 1812.3 336.7L1812.5 337.4C1812.5 340.1 1807.7 341.4 1798.2 341.4C1792.6 341.4 1786.2 341.2 1778.8 340.7C1771.4 340.2 1767.3 340 1766.5 340L1764.8 338.8C1763.8 337.8 1755 319.5 1738.1 283.8C1737.9 282.5 1736.8 280 1734.8 276.2C1734.3 276.2 1732.5 278.4 1729.2 282.9C1725.9 287.3 1724.2 290 1723.8 290.8C1723.8 293.7 1723.8 298.3 1723.9 304.6C1724 310.9 1724 316.9 1724 322.4C1724 333.7 1722.7 339.5 1720.2 340C1717 340 1713.1 340.1 1708.3 340.4C1703.5 340.6 1700.3 340.8 1698.5 340.8C1695.8 340.8 1692.2 340.5 1687.6 339.8C1683 339.2 1680.7 338.6 1680.7 338.1V256.2C1681.7 248.6 1682.1 244.2 1682.1 243.1C1682.1 236 1681.8 225.3 1681.1 211C1680.5 196.7 1680.1 186.1 1680.1 179.1C1680.1 176.2 1680.7 174.5 1682 173.9C1690.4 173.2 1701.6 173 1716.1 173Z",
    fill: "url(#paint1_linear_9_13)"
  }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint0_linear_9_13",
    x1: "-15.068",
    y1: "44.9459",
    x2: "489.022",
    y2: "436.843",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.1304",
    stopColor: "#3495F7"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.3063",
    stopColor: "#2B87F2"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.6392",
    stopColor: "#1461E5"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.7232",
    stopColor: "#0E57E1"
  })), /*#__PURE__*/_react.default.createElement("linearGradient", {
    id: "paint1_linear_9_13",
    x1: "577.482",
    y1: "258.803",
    x2: "1812.46",
    y2: "258.803",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_react.default.createElement("stop", {
    stopColor: "#3495F7"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "0.4939",
    stopColor: "#1461E5"
  }), /*#__PURE__*/_react.default.createElement("stop", {
    offset: "1",
    stopColor: "#0E57E1"
  }))));
};

LogoTransak.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoTransak;
exports.default = _default;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-trezor.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-trezor.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoTrezor = ({
  width = '100%',
  color = 'var(--color-text-default)',
  className,
  ariaLabel
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    fill: color,
    className: className,
    "aria-label": ariaLabel,
    viewBox: "0 0 2568 723",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M249 0C149.9 0 69.7 80.2 69.7 179.3V246.5C34.9 252.8 0 261.2 0 272.1V622.8C0 622.8 0 632.5 10.9 637.1C50.4 653.1 205.8 708.1 241.5 720.7C246.1 722.4 247.4 722.4 248.6 722.4C250.3 722.4 251.1 722.4 255.7 720.7C291.4 708.1 447.2 653.1 486.7 637.1C496.8 632.9 497.2 623.2 497.2 623.2V272.1C497.2 261.2 462.8 252.4 427.9 246.5V179.3C428.4 80.2 347.7 0 249 0ZM249 85.7C307.4 85.7 342.7 121 342.7 179.4V237.8C277.2 233.2 221.3 233.2 155.4 237.8V179.4C155.4 120.9 190.7 85.7 249 85.7V85.7ZM248.6 323.8C330.1 323.8 398.5 330.1 398.5 341.4V560.2C398.5 563.6 398.1 564 395.1 565.2C392.2 566.5 256.1 615.6 256.1 615.6C256.1 615.6 250.6 617.3 249 617.3C247.3 617.3 241.9 615.2 241.9 615.2C241.9 615.2 105.8 566.1 102.9 564.8C100 563.5 99.5 563.1 99.5 559.8V341C98.7 329.7 167.1 323.8 248.6 323.8V323.8ZM728.466 563.183V323.577H640.919V237.655H913.881V323.577H827.195V563.183H728.466ZM1135.04 563.183L1090.12 460.823H1054.38V563.183H955.647V237.655H1129.4C1205.67 237.655 1246.58 288.215 1246.58 349.191C1246.58 405.389 1214.08 435.113 1187.99 447.92L1246.96 563.088H1135.04V563.183ZM1146.7 349.191C1146.7 331.51 1131.03 323.864 1114.59 323.864H1054.38V375.283H1114.59C1131.03 374.901 1146.7 367.255 1146.7 349.191ZM1298.38 563.183V237.655H1545.25V323.577H1396.73V355.69H1541.62V441.612H1396.73V477.357H1545.25V563.183H1298.38ZM1596.57 563.566V485.29L1720.63 323.96H1596.57V238.037H1850.61V315.549L1726.17 477.739H1854.24V563.661L1596.57 563.566ZM1878.33 400.993C1878.33 301.021 1955.84 232.398 2056.58 232.398C2156.93 232.398 2234.82 300.639 2234.82 400.993C2234.82 500.964 2157.31 569.205 2056.58 569.205C1955.84 569.205 1878.33 500.965 1878.33 400.993V400.993ZM2134.47 400.993C2134.47 355.595 2103.6 319.467 2056.19 319.467C2008.79 319.467 1977.92 355.595 1977.92 400.993C1977.92 446.391 2008.79 482.518 2056.19 482.518C2103.98 482.518 2134.47 446.391 2134.47 400.993H2134.47ZM2455.51 563.566L2410.59 461.205H2374.84V563.565H2276.11V238.038H2449.87C2526.14 238.038 2567.04 288.598 2567.04 349.574C2567.04 405.772 2534.55 435.496 2508.46 448.304L2567.43 563.471H2455.51V563.566ZM2467.55 349.191C2467.55 331.51 2451.87 323.864 2435.44 323.864H2375.22V375.283H2435.44C2451.97 374.901 2467.55 367.255 2467.55 349.191Z"
  }));
};

LogoTrezor.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string,

  /**
   * Additional className to add to the root svg
   */
  className: _propTypes.default.string,

  /**
   * Aria label to add to the logo component
   */
  ariaLabel: _propTypes.default.string
};
var _default = LogoTrezor;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\logo\\logo-wyre.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\logo\logo-wyre.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LogoWyre = ({
  width = '100%',
  color = 'var(--color-text-default)'
}) => {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    viewBox: "0 0 261 61",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M126.836 10.6396L122.859 29.3287C122.696 30.0922 122.614 30.8707 122.614 31.6514V40.6187H118.34V32.1939C118.34 31.1775 118.2 30.1659 117.924 29.1875L112.714 10.6396H102.145L96.9868 29.0463C96.7113 30.0247 96.5712 31.0363 96.5706 32.0527V40.6001H92.2969V31.8223C92.2964 31.0419 92.2155 30.2635 92.0554 29.4997L88.0342 10.6396H77.3464V11.7545L87.2391 50.032H99.4284L104.739 31.1497C105.014 30.1662 105.155 29.1497 105.155 28.1284V20.1644H109.429V28.1061C109.428 29.1251 109.568 30.1394 109.845 31.1199L115.155 50.032H127.315L137.241 11.7545V10.6396H126.836Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M260.142 28.8865C260.142 16.7752 252.917 9.73291 240.914 9.73291C230.88 9.73291 223.611 14.408 221.385 23.7692C221.277 24.2073 221.271 24.6642 221.366 25.1053C221.461 25.5464 221.655 25.96 221.933 26.3149C222.212 26.6698 222.568 26.9566 222.974 27.1536C223.38 27.3506 223.825 27.4527 224.276 27.452H229.137V31.7257H223.983C223.551 31.7254 223.125 31.819 222.733 32C222.341 32.181 221.994 32.4451 221.714 32.774C221.435 33.1028 221.23 33.4886 221.115 33.9044C221 34.3202 220.976 34.7561 221.047 35.1819C222.782 45.6803 230.337 50.9351 241.021 50.9351C253.255 50.9351 258.146 43.9374 259.387 38.5228V37.4079H249.755C249.156 39.816 246.745 42.789 240.836 42.789C234.849 42.789 231.385 38.7272 231.24 33.3832H260.138L260.142 28.8865ZM231.352 25.8429C231.805 21.5097 234.89 17.786 240.758 17.786C246.819 17.786 249.718 21.3982 249.792 25.8429H231.352Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M212.172 10.4834C207.293 10.4834 203.87 15.203 202.138 20.1828H197.53C197.53 20.1828 201.51 15.2105 201.904 10.6395H191.164V50.0318H202.228V29.4884C202.228 22.5278 205.234 19.5176 211.332 19.5176H216.977V10.4834H212.172Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M173.761 10.6396L166.488 31.0791C166.06 32.2803 165.842 33.5461 165.842 34.8213V40.6261H161.568V34.8176C161.568 33.5512 161.35 32.2942 160.925 31.1014L153.671 10.6619H142.151V11.7768L156.153 46.364L160.316 46.4049L158.424 51.4702L146.16 51.4367V60.876H157.989C160.087 60.8757 162.137 60.2515 163.878 59.0829C165.62 57.9142 166.975 56.2539 167.77 54.3131L185.014 11.7545V10.6396H173.761Z",
    fill: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M51.4405 30.2466L54.681 22.4759V14.4897H43.7478L46.442 8.0011V0H16.1769L6.10352e-05 39.0988V46.5313H11.1078L8.23898 53.4361V60.5862L34.2045 60.471H42.9711L61.5896 36.5828V30.2652L51.4405 30.2466ZM51.8938 21.9185L48.4228 30.2466H33.595L15.5191 53.4955H11.2343L26.2813 17.2769H51.8976L51.8938 21.9185ZM18.0424 2.78719H43.6548V7.44739L40.7301 14.4897L24.4306 14.5083L7.2542 39.1619H2.99158L18.0424 2.78719Z",
    fill: color
  }));
};

LogoWyre.propTypes = {
  /**
   * The width of the logo. Defaults to 100%
   */
  width: _propTypes.default.string,

  /**
   * The color of the logo defaults to var(--color-text-default)
   */
  color: _propTypes.default.string
};
var _default = LogoWyre;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\mascot\\index.js", {"./mascot.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\mascot\\mascot.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\mascot\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _mascot.default;
  }
});

var _mascot = _interopRequireDefault(require("./mascot.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\mascot\\mascot.component.js", {"../../../helpers/utils/build-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\build-types.js","@metamask/logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\logo\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\mascot\mascot.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _logo = _interopRequireDefault(require("@metamask/logo"));

var _lodash = require("lodash");

var _buildTypes = require("../../../helpers/utils/build-types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const directionTargetGenerator = ({
  top,
  left,
  height,
  width
}) => {
  const horizontalMiddle = left + width / 2;
  const verticalMiddle = top + height / 2;
  return {
    up: {
      x: horizontalMiddle,
      y: top - height
    },
    down: {
      x: horizontalMiddle,
      y: top + height * 2
    },
    left: {
      x: left - width,
      y: verticalMiddle
    },
    right: {
      x: left + width * 2,
      y: verticalMiddle
    },
    middle: {
      x: horizontalMiddle,
      y: verticalMiddle
    }
  };
};

class Mascot extends _react.Component {
  constructor(props) {
    super(props);
    const {
      width,
      height,
      followMouse
    } = props;
    this.logo = (0, _logo.default)({
      followMouse,
      pxNotRatio: true,
      width,
      height,
      meshJson: (0, _buildTypes.getBuildSpecificAsset)('foxMeshJson')
    });
    this.mascotContainer = /*#__PURE__*/(0, _react.createRef)();
    this.refollowMouse = (0, _lodash.debounce)(this.logo.setFollowMouse.bind(this.logo, true), 1000);
    this.unfollowMouse = this.logo.setFollowMouse.bind(this.logo, false);
  }

  handleAnimationEvents() {
    // only setup listeners once
    if (this.animations) {
      return;
    }

    this.animations = this.props.animationEventEmitter;
    this.animations.on('point', this.lookAt.bind(this));
    this.animations.on('setFollowMouse', this.logo.setFollowMouse.bind(this.logo));
  }

  lookAt(target) {
    this.unfollowMouse();
    this.logo.lookAt(target);
    this.refollowMouse();
  }

  componentDidMount() {
    this.mascotContainer.current.appendChild(this.logo.container);
    this.directionTargetMap = directionTargetGenerator(this.mascotContainer.current.getBoundingClientRect());
    const {
      lookAtTarget,
      lookAtDirection
    } = this.props;

    if (lookAtTarget !== null && lookAtTarget !== void 0 && lookAtTarget.x && lookAtTarget !== null && lookAtTarget !== void 0 && lookAtTarget.y) {
      this.logo.lookAtAndRender(lookAtTarget);
    } else if (lookAtDirection) {
      this.logo.lookAtAndRender(this.directionTargetMap[lookAtDirection]);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      lookAtTarget: prevTarget = {},
      lookAtDirection: prevDirection = null,
      followMouse: prevFollowMouse
    } = prevProps;
    const {
      lookAtTarget = {},
      followMouse,
      lookAtDirection
    } = this.props;

    if (lookAtDirection && prevDirection !== lookAtDirection) {
      this.logo.lookAtAndRender(this.directionTargetMap[lookAtDirection]);
    } else if ((lookAtTarget === null || lookAtTarget === void 0 ? void 0 : lookAtTarget.x) !== (prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.x) || (lookAtTarget === null || lookAtTarget === void 0 ? void 0 : lookAtTarget.y) !== (prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.y)) {
      this.logo.lookAtAndRender(lookAtTarget);
    }

    if (prevFollowMouse !== followMouse) {
      this.unfollowMouse();
      followMouse && this.refollowMouse();
    }
  }

  componentWillUnmount() {
    this.animations = this.props.animationEventEmitter;
    this.animations.removeAllListeners();
    this.logo.container.remove();
    this.logo.stopAnimation();
  }

  render() {
    // this is a bit hacky
    // the event emitter is on `this.props`
    // and we dont get that until render
    this.handleAnimationEvents();
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.mascotContainer,
      style: {
        zIndex: 0
      }
    });
  }

}

exports.default = Mascot;

_defineProperty(Mascot, "propTypes", {
  animationEventEmitter: _propTypes.default.object.isRequired,
  width: _propTypes.default.string,
  height: _propTypes.default.string,
  followMouse: _propTypes.default.bool,
  lookAtTarget: _propTypes.default.object,
  lookAtDirection: _propTypes.default.oneOf(['up', 'down', 'left', 'right', 'middle'])
});

_defineProperty(Mascot, "defaultProps", {
  width: '200',
  height: '200',
  followMouse: true,
  lookAtTarget: {},
  lookAtDirection: null
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\index.js", {"./menu":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\menu.js","./menu-item":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\menu-item.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\menu\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Menu", {
  enumerable: true,
  get: function () {
    return _menu.default;
  }
});
Object.defineProperty(exports, "MenuItem", {
  enumerable: true,
  get: function () {
    return _menuItem.default;
  }
});

var _menu = _interopRequireDefault(require("./menu"));

var _menuItem = _interopRequireDefault(require("./menu-item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\menu-item.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\menu\menu-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MenuItem = ({
  children,
  className,
  'data-testid': dataTestId,
  iconClassName,
  onClick,
  subtitle
}) => /*#__PURE__*/_react.default.createElement("button", {
  className: (0, _classnames.default)('menu-item', className),
  "data-testid": dataTestId,
  onClick: onClick
}, iconClassName ? /*#__PURE__*/_react.default.createElement("i", {
  className: (0, _classnames.default)('menu-item__icon', iconClassName)
}) : null, /*#__PURE__*/_react.default.createElement("span", null, children), subtitle);

MenuItem.propTypes = {
  children: _propTypes.default.node.isRequired,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  iconClassName: _propTypes.default.string,
  onClick: _propTypes.default.func,
  subtitle: _propTypes.default.node
};
MenuItem.defaultProps = {
  className: undefined,
  'data-testid': undefined,
  iconClassName: undefined,
  onClick: undefined,
  subtitle: undefined
};
var _default = MenuItem;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\menu.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dom\\index.js","react-popper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-popper\\lib\\cjs\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\menu\menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _reactPopper = require("react-popper");

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Menu = ({
  anchorElement,
  children,
  className,
  onHide,
  popperOptions
}) => {
  const [popperElement, setPopperElement] = (0, _react.useState)(null);
  const popoverContainerElement = (0, _react.useRef)(document.getElementById('popover-content'));
  const {
    attributes,
    styles
  } = (0, _reactPopper.usePopper)(anchorElement, popperElement, popperOptions);
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "menu__background",
    onClick: onHide
  }), /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('menu__container', className),
    "data-testid": className,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper), children)), popoverContainerElement.current);
};

Menu.propTypes = {
  anchorElement: _propTypes.default.instanceOf(window.Element),
  children: _propTypes.default.node.isRequired,
  className: _propTypes.default.string,
  onHide: _propTypes.default.func.isRequired,
  popperOptions: _propTypes.default.object
};
Menu.defaultProps = {
  anchorElement: undefined,
  className: undefined,
  popperOptions: undefined
};
var _default = Menu;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\horizontal-logo.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\metafox-logo\horizontal-logo.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MetaFoxHorizontalLogo;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LOGO_WIDTH = 162;
const LOGO_HEIGHT = 30;
const TEXT_COLOR = 'var(--color-text-default)';
const FLASK_PILL_BACKGROUND = 'var(--color-overlay-alternative)';
const FLASK_PILL_TEXT = 'var(--color-overlay-inverse)';
const BETA_PILL_BACKGROUND = 'var(--color-warning-default)';
const BETA_PIL_TEXT = 'var(--color-secondary-inverse)';

function MetaFoxHorizontalLogo({
  className
}) {
  switch ("main") {
    case 'beta':
      return /*#__PURE__*/_react.default.createElement("svg", {
        width: LOGO_WIDTH,
        height: LOGO_HEIGHT,
        viewBox: "0 0 1533 242",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        className: className
      }, /*#__PURE__*/_react.default.createElement("g", {
        clipPath: "url(#clip0)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "M1157.95 121.694C1151.15 117.195 1143.65 113.996 1136.55 109.997C1131.95 107.398 1127.05 105.098 1123.05 101.799C1116.24 96.2 1117.64 85.2024 1124.75 80.4035C1134.95 73.605 1151.85 77.4042 1153.65 91.3011C1153.65 91.601 1153.95 91.801 1154.25 91.801H1169.66C1170.06 91.801 1170.36 91.501 1170.26 91.1011C1169.46 81.5033 1165.75 73.505 1158.95 68.4062C1152.45 63.5073 1145.05 60.9078 1137.15 60.9078C1096.44 60.9078 1092.74 103.998 1114.64 117.595C1117.14 119.195 1138.65 129.992 1146.25 134.691C1153.85 139.39 1156.25 147.988 1152.95 154.787C1149.95 160.986 1142.15 165.285 1134.35 164.785C1125.85 164.285 1119.24 159.686 1116.94 152.487C1116.54 151.188 1116.34 148.688 1116.34 147.589C1116.34 147.289 1116.04 146.989 1115.74 146.989H1099.04C1098.74 146.989 1098.44 147.289 1098.44 147.589C1098.44 159.686 1101.44 166.384 1109.64 172.483C1117.34 178.282 1125.75 180.681 1134.45 180.681C1157.25 180.681 1169.06 167.784 1171.46 154.387C1173.56 141.29 1169.66 129.493 1157.95 121.694V121.694Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M432.694 63.1091H425.293H417.191C416.891 63.1091 416.691 63.3091 416.591 63.509L402.888 108.698C402.688 109.298 401.888 109.298 401.688 108.698L387.985 63.509C387.885 63.2091 387.685 63.1091 387.384 63.1091H379.283H371.881H361.879C361.579 63.1091 361.279 63.4091 361.279 63.709V179.082C361.279 179.382 361.579 179.682 361.879 179.682H378.583C378.883 179.682 379.183 179.382 379.183 179.082V91.4025C379.183 90.7027 380.183 90.6027 380.383 91.2025L394.186 136.692L395.186 139.891C395.286 140.191 395.486 140.291 395.786 140.291H408.589C408.889 140.291 409.089 140.091 409.189 139.891L410.189 136.692L423.992 91.2025C424.192 90.5027 425.193 90.7027 425.193 91.4025V179.082C425.193 179.382 425.493 179.682 425.793 179.682H442.496C442.796 179.682 443.097 179.382 443.097 179.082V63.709C443.097 63.4091 442.796 63.1091 442.496 63.1091H432.694Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M902.197 63.1091C901.897 63.1091 901.697 63.3091 901.597 63.509L887.894 108.698C887.694 109.298 886.894 109.298 886.694 108.698L872.991 63.509C872.891 63.2091 872.691 63.1091 872.39 63.1091H846.985C846.685 63.1091 846.385 63.4091 846.385 63.709V179.082C846.385 179.382 846.685 179.682 846.985 179.682H863.689C863.989 179.682 864.289 179.382 864.289 179.082V91.4025C864.289 90.7027 865.289 90.6027 865.489 91.2025L879.292 136.692L880.292 139.891C880.392 140.191 880.592 140.291 880.892 140.291H893.695C893.995 140.291 894.195 140.091 894.295 139.891L895.295 136.692L909.098 91.2025C909.299 90.5027 910.299 90.7027 910.299 91.4025V179.082C910.299 179.382 910.599 179.682 910.899 179.682H927.603C927.903 179.682 928.203 179.382 928.203 179.082V63.709C928.203 63.4091 927.903 63.1091 927.603 63.1091H902.197Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M686.749 63.1091H655.642H638.938H607.832C607.532 63.1091 607.231 63.4091 607.231 63.709V78.1056C607.231 78.4055 607.532 78.7055 607.832 78.7055H638.338V179.082C638.338 179.382 638.638 179.682 638.938 179.682H655.642C655.942 179.682 656.242 179.382 656.242 179.082V78.7055H686.749C687.049 78.7055 687.349 78.4055 687.349 78.1056V63.709C687.349 63.4091 687.149 63.1091 686.749 63.1091V63.1091Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M785.272 179.681H800.475C800.875 179.681 801.175 179.281 801.075 178.881L769.668 63.1082C769.568 62.8082 769.368 62.7083 769.068 62.7083H763.267H753.065H747.264C746.964 62.7083 746.763 62.9082 746.663 63.1082L715.257 178.881C715.157 179.281 715.457 179.681 715.857 179.681H731.06C731.36 179.681 731.56 179.481 731.66 179.281L740.762 145.589C740.862 145.289 741.062 145.189 741.362 145.189H774.97C775.27 145.189 775.47 145.389 775.57 145.589L784.672 179.281C784.772 179.481 785.072 179.681 785.272 179.681V179.681ZM745.363 128.693L757.566 83.6034C757.766 83.0035 758.566 83.0035 758.766 83.6034L770.969 128.693C771.069 129.093 770.769 129.493 770.369 129.493H745.963C745.563 129.493 745.263 129.093 745.363 128.693V128.693Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1044.53 179.681H1059.73C1060.13 179.681 1060.43 179.281 1060.33 178.881L1028.93 63.1082C1028.83 62.8082 1028.63 62.7083 1028.33 62.7083H1022.52H1012.32H1006.52C1006.22 62.7083 1006.02 62.9082 1005.92 63.1082L974.514 178.881C974.414 179.281 974.714 179.681 975.114 179.681H990.317C990.618 179.681 990.818 179.481 990.918 179.281L1000.02 145.589C1000.12 145.289 1000.32 145.189 1000.62 145.189H1034.23C1034.53 145.189 1034.73 145.389 1034.83 145.589L1043.93 179.281C1044.03 179.481 1044.23 179.681 1044.53 179.681V179.681ZM1004.62 128.693L1016.82 83.6034C1017.02 83.0035 1017.82 83.0035 1018.02 83.6034L1030.23 128.693C1030.33 129.093 1030.03 129.493 1029.63 129.493H1005.22C1004.82 129.493 1004.52 129.093 1004.62 128.693V128.693Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M510.909 162.584V126.793C510.909 126.493 511.209 126.193 511.509 126.193H556.019C556.319 126.193 556.619 125.893 556.619 125.593V111.196C556.619 110.896 556.319 110.596 556.019 110.596H511.509C511.209 110.596 510.909 110.296 510.909 109.997V79.4037C510.909 79.1038 511.209 78.8039 511.509 78.8039H562.121C562.421 78.8039 562.721 78.5039 562.721 78.204V63.8074C562.721 63.5074 562.421 63.2075 562.121 63.2075H510.909H493.606C493.305 63.2075 493.005 63.5074 493.005 63.8074V78.8039V110.696V126.293V163.284V179.08C493.005 179.38 493.305 179.68 493.606 179.68H510.909H564.221C564.521 179.68 564.821 179.38 564.821 179.08V163.884C564.821 163.584 564.521 163.284 564.221 163.284H511.409C511.109 163.184 510.909 162.984 510.909 162.584Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1310.58 178.681L1252.77 118.995C1252.57 118.795 1252.57 118.395 1252.77 118.195L1304.78 64.2074C1305.18 63.8075 1304.88 63.2076 1304.38 63.2076H1283.08C1282.88 63.2076 1282.78 63.3076 1282.68 63.4076L1238.57 109.197C1238.17 109.597 1237.57 109.297 1237.57 108.797V63.8075C1237.57 63.5076 1237.27 63.2076 1236.97 63.2076H1220.26C1219.96 63.2076 1219.66 63.5076 1219.66 63.8075V179.181C1219.66 179.48 1219.96 179.78 1220.26 179.78H1236.97C1237.27 179.78 1237.57 179.48 1237.57 179.181V128.392C1237.57 127.893 1238.27 127.593 1238.57 127.993L1288.58 179.58C1288.68 179.68 1288.88 179.78 1288.98 179.78H1310.28C1310.68 179.68 1310.98 178.981 1310.58 178.681V178.681Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1512.38 110.091H1359.98C1348.59 110.091 1339.36 100.86 1339.36 89.4845V44.6061C1339.36 33.231 1348.59 24 1359.98 24H1512.38C1523.76 24 1533 33.231 1533 44.6061V89.4845C1533 100.876 1523.76 110.091 1512.38 110.091Z",
        fill: BETA_PILL_BACKGROUND
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1371.47 48.027H1386.48C1388.08 48.027 1389.62 48.3377 1391.06 48.9592C1392.5 49.5807 1393.76 50.4149 1394.86 51.478C1395.94 52.5411 1396.79 53.8004 1397.41 55.2397C1398.04 56.679 1398.35 58.2164 1398.35 59.8683C1398.35 61.2912 1398.09 62.567 1397.56 63.7118C1397.04 64.8567 1396.35 65.8544 1395.48 66.7213C1397.17 67.5881 1398.53 68.8311 1399.59 70.483C1400.64 72.1349 1401.17 74.0158 1401.17 76.1583C1401.17 77.8102 1400.85 79.3313 1400.23 80.7542C1399.61 82.1771 1398.76 83.4202 1397.68 84.4833C1396.6 85.5464 1395.3 86.3805 1393.83 86.9856C1392.35 87.5908 1390.75 87.8852 1389.03 87.8852H1371.49V48.027H1371.47ZM1385.46 64.1371C1386.66 64.1371 1387.65 63.7609 1388.44 62.9922C1389.23 62.2235 1389.62 61.3076 1389.62 60.2118C1389.62 59.1323 1389.23 58.1837 1388.44 57.3823C1387.65 56.5809 1386.66 56.172 1385.46 56.172H1380.4V64.1371H1385.46V64.1371ZM1388.28 79.6748C1389.47 79.6748 1390.47 79.2986 1391.26 78.5299C1392.04 77.7612 1392.44 76.8126 1392.44 75.7004C1392.44 74.6209 1392.03 73.6723 1391.22 72.8873C1390.42 72.1022 1389.42 71.7097 1388.21 71.7097H1380.4V79.6748H1388.28Z",
        fill: BETA_PIL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1407.16 48.0112H1432.45V56.5488H1416.08V63.6798H1429.07V72.2173H1416.08V79.3483H1432.45V87.8858H1407.16V48.0112Z",
        fill: BETA_PIL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1446.43 56.5311H1436.26V47.9935H1465.71V56.5311H1455.42V87.8518H1446.43V56.5311Z",
        fill: BETA_PIL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1479.92 48.0112H1488.01L1505.09 87.8531H1495.76L1492.22 79.43H1475.69L1472.16 87.8531H1462.82L1479.92 48.0112ZM1478.92 71.6939H1488.98L1483.98 59.7381L1478.92 71.6939Z",
        fill: BETA_PIL_TEXT
      }), /*#__PURE__*/_react.default.createElement("g", {
        clipPath: "url(#clip1)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "M145.555 130.761L149.839 72.3187L167.281 30.6899H92.7188L110.161 72.3187L114.445 130.761L115.771 149.195L115.873 194.572H144.127L144.229 149.195L145.555 130.761Z",
        fill: "url(#paint0_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M240.11 119.518L186.764 104.021L202.88 128.229L178.808 174.821L210.632 174.416H257.96L240.11 119.518Z",
        fill: "url(#paint1_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M73.2366 104.021L19.8902 119.518L2.14209 174.416H49.4705L81.1927 174.821L57.1205 128.229L73.2366 104.021Z",
        fill: "url(#paint2_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M150.859 160.033L144.127 194.572L149.023 197.914L178.807 174.821L179.725 151.626L150.859 160.033Z",
        fill: "url(#paint3_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M80.3765 151.626L81.1925 174.821L110.977 197.914L115.873 194.572L109.141 160.033L80.3765 151.626Z",
        fill: "url(#paint4_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M251.432 79.7125L260 38.3876L247.148 0L149.023 72.3186L185.642 104.933L240.11 119.518L251.84 105.844L246.74 102.198L254.9 94.8042L248.678 89.9425L256.838 83.764L251.432 79.7125Z",
        fill: "url(#paint5_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M0 38.3876L8.67007 79.7125L3.16202 83.764L11.3221 89.9425L5.10004 94.8042L13.2601 102.198L8.16006 105.844L19.8902 119.518L74.4606 104.933L110.977 72.3186L12.8521 0L0 38.3876Z",
        fill: "url(#paint6_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M57.1206 128.229L80.3768 151.626L81.1928 174.821L57.1206 128.229Z",
        fill: "url(#paint7_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M202.88 128.229L178.808 174.821L179.726 151.626L202.88 128.229Z",
        fill: "url(#paint8_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M183.602 214.626L149.023 197.914L151.777 220.298L151.471 229.718L183.602 214.626Z",
        fill: "#D7C1B3",
        stroke: "#D7C1B3",
        strokeWidth: "1.42167",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M76.3989 214.626L108.529 229.718L108.325 220.298L110.977 197.914L76.3989 214.626Z",
        fill: "#D7C1B3",
        stroke: "#D7C1B3",
        strokeWidth: "1.42167",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M210.632 174.415L183.602 214.626L241.436 230.427L257.96 174.415H210.632Z",
        fill: "url(#paint9_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M2.14209 174.415L18.5642 230.427L76.3987 214.626L49.4705 174.415H2.14209Z",
        fill: "url(#paint10_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M12.8521 0L110.977 72.3186L95.5747 30.6898L12.8521 0Z",
        fill: "url(#paint11_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M164.425 30.6898L149.023 72.3186L247.148 0L164.425 30.6898Z",
        fill: "url(#paint12_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M73.2367 104.021L57.1206 128.229L114.445 130.761L110.977 72.3186L73.2367 104.021Z",
        fill: "url(#paint13_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M186.763 104.021L149.023 72.3186L145.555 130.761L202.879 128.229L186.763 104.021Z",
        fill: "url(#paint14_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M76.3989 214.626L110.977 197.914L81.193 174.821L76.3989 214.626Z",
        fill: "url(#paint15_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M149.023 197.914L183.602 214.626L178.808 174.821L149.023 197.914Z",
        fill: "url(#paint16_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M76.3989 214.626L81.1929 174.82L49.4707 174.415L76.3989 214.626Z",
        fill: "url(#paint17_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M178.808 174.82L183.602 214.626L210.632 174.415L178.808 174.82Z",
        fill: "url(#paint18_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M202.88 128.229L145.556 130.761L150.86 160.033L159.326 142.409L179.726 151.626L202.88 128.229Z",
        fill: "url(#paint19_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M80.3773 151.626L100.675 142.409L109.141 160.033L114.446 130.761L57.1211 128.229L80.3773 151.626Z",
        fill: "url(#paint20_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M144.229 149.195L150.859 160.033L145.555 130.761L144.229 149.195ZM144.229 149.195L144.229 149.195L144.127 194.571L150.859 160.033L144.229 149.195Z",
        fill: "url(#paint21_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M114.445 130.761L109.141 160.033L115.873 194.571L115.771 149.195L115.771 149.195L114.445 130.761Z",
        fill: "url(#paint22_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M151.655 229.596L151.778 220.298L149.228 218.07H110.773L108.325 220.298L108.529 229.718L76.3989 214.626L87.619 223.742L110.467 239.441H149.534L172.382 223.742L183.602 214.626L151.655 229.596Z",
        fill: "#C0AD9E",
        stroke: "#C0AD9E",
        strokeWidth: "1.42167",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M149.023 197.914L144.127 194.571H115.873L110.977 197.914L108.325 220.298L110.773 218.07H149.227L151.777 220.298L149.023 197.914Z",
        fill: "#161616",
        stroke: "#161616",
        strokeWidth: "0.142167",
        strokeMiterlimit: "10",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M159.325 142.409L150.859 160.033L179.726 151.626L159.325 142.409Z",
        fill: "#161616"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M100.675 142.409L109.141 160.033L80.377 151.626L100.675 142.409Z",
        fill: "#161616"
      }))), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint0_linear",
        x1: "130",
        y1: "30.6899",
        x2: "130",
        y2: "194.572",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#21FF47"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#BCD8F0"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint1_linear",
        x1: "218.384",
        y1: "104.021",
        x2: "218.384",
        y2: "174.821",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#1CAD68"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#77BDD4"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint2_linear",
        x1: "41.6674",
        y1: "104.021",
        x2: "41.6674",
        y2: "174.821",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#1CAD68"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#77BDD4"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint3_linear",
        x1: "161.926",
        y1: "151.626",
        x2: "161.926",
        y2: "197.914",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7BCBC8"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#87B9E6"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint4_linear",
        x1: "98.1246",
        y1: "151.626",
        x2: "98.1246",
        y2: "197.914",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7BCBC8"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#87B9E6"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint5_linear",
        x1: "204.512",
        y1: "0",
        x2: "204.512",
        y2: "119.518",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#007715"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#0A3424"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint6_linear",
        x1: "55.4884",
        y1: "0",
        x2: "55.4884",
        y2: "119.518",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#007715"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#0A3424"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint7_linear",
        x1: "69.1567",
        y1: "128.229",
        x2: "69.1567",
        y2: "174.821",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#42C4A0"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#51ACC7"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint8_linear",
        x1: "190.844",
        y1: "128.229",
        x2: "190.844",
        y2: "174.821",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#42C4A0"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#51ACC7"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint9_linear",
        x1: "220.781",
        y1: "174.415",
        x2: "220.781",
        y2: "230.427",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#5BAECB"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4160C1"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint10_linear",
        x1: "39.2704",
        y1: "174.415",
        x2: "39.2704",
        y2: "230.427",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#5BAECB"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4160C1"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint11_linear",
        x1: "61.9144",
        y1: "0",
        x2: "61.9144",
        y2: "72.3186",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#01EA28"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#10D24F"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint12_linear",
        x1: "198.085",
        y1: "0",
        x2: "198.085",
        y2: "72.3186",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#01EA28"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#10D24F"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint13_linear",
        x1: "85.7828",
        y1: "72.3186",
        x2: "85.7828",
        y2: "130.761",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#12DB56"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4CC9A3"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint14_linear",
        x1: "174.217",
        y1: "72.3186",
        x2: "174.217",
        y2: "130.761",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#12DB56"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4CC9A3"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint15_linear",
        x1: "93.6881",
        y1: "174.821",
        x2: "93.6881",
        y2: "214.626",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#5BAECB"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4160C1"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint16_linear",
        x1: "166.313",
        y1: "174.821",
        x2: "166.313",
        y2: "214.626",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#5BAECB"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#4160C1"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint17_linear",
        x1: "65.3318",
        y1: "174.415",
        x2: "65.3318",
        y2: "214.626",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#32809D"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#477DD5"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint18_linear",
        x1: "194.72",
        y1: "174.415",
        x2: "194.72",
        y2: "214.626",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#32809D"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#477DD5"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint19_linear",
        x1: "174.218",
        y1: "128.229",
        x2: "174.218",
        y2: "160.033",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#239777"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#2C8A8D"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint20_linear",
        x1: "85.7833",
        y1: "128.229",
        x2: "85.7833",
        y2: "160.033",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#239777"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#2C8A8D"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint21_linear",
        x1: "147.493",
        y1: "130.761",
        x2: "147.493",
        y2: "194.571",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#42C4A0"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#51ACC7"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint22_linear",
        x1: "112.507",
        y1: "130.761",
        x2: "112.507",
        y2: "194.571",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#42C4A0"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#51ACC7"
      })), /*#__PURE__*/_react.default.createElement("clipPath", {
        id: "clip0"
      }, /*#__PURE__*/_react.default.createElement("rect", {
        width: "1533",
        height: "242",
        fill: "white"
      })), /*#__PURE__*/_react.default.createElement("clipPath", {
        id: "clip1"
      }, /*#__PURE__*/_react.default.createElement("rect", {
        width: "260",
        height: "239.948",
        fill: "white"
      }))));

    case 'flask':
      return /*#__PURE__*/_react.default.createElement("svg", {
        width: LOGO_WIDTH,
        height: LOGO_HEIGHT,
        viewBox: "0 0 1532 247",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        className: className
      }, /*#__PURE__*/_react.default.createElement("g", {
        clipPath: "url(#clip0)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "M148.354 134.603L152.72 74.4431L170.498 31.5908H94.5015L112.279 74.4431L116.645 134.603L117.997 153.579L118.101 200.289H146.898L147.002 153.579L148.354 134.603Z",
        fill: "url(#paint0_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M244.727 123.029L190.355 107.077L206.781 131.996L182.246 179.957L214.682 179.54H262.92L244.727 123.029Z",
        fill: "url(#paint1_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M74.6449 107.077L20.2726 123.029L2.18311 179.54H50.4216L82.7539 179.957L58.2188 131.996L74.6449 107.077Z",
        fill: "url(#paint2_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M153.76 164.735L146.899 200.289L151.889 203.729L182.246 179.957L183.182 156.081L153.76 164.735Z",
        fill: "#ACACAC"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M81.9224 156.081L82.7541 179.957L113.111 203.729L118.101 200.289L111.24 164.735L81.9224 156.081Z",
        fill: "#ACACAC"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M256.267 82.0553L265 39.5158L251.9 0L151.889 74.4441L189.211 108.017L244.727 123.031L256.683 108.955L251.485 105.202L259.802 97.5906L253.46 92.5859L261.777 86.2258L256.267 82.0553Z",
        fill: "url(#paint3_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M8.73266 82.0553L-0.000171178 39.5158L13.0991 0L113.111 74.4441L75.7884 108.017L20.2725 123.031L8.31682 108.955L13.5149 105.202L5.19795 97.5906L11.5396 92.5859L3.22265 86.2258L8.73266 82.0553Z",
        fill: "url(#paint4_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M58.2188 131.997L81.9222 156.082L82.7539 179.958L58.2188 131.997Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M206.781 131.997L182.246 179.958L183.181 156.082L206.781 131.997Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M187.132 220.935L151.889 203.731L154.696 226.774L154.384 236.47L187.132 220.935Z",
        fill: "#FF9F5A"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M77.8677 220.934L110.616 236.469L110.408 226.773L113.111 203.73L77.8677 220.934Z",
        fill: "#FF9F5A"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M214.682 179.542L187.132 220.935L246.079 237.2L262.921 179.542H214.682Z",
        fill: "url(#paint5_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M2.18311 179.542L18.921 237.2L77.8677 220.935L50.4216 179.542H2.18311Z",
        fill: "url(#paint6_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M13.0991 0L113.111 74.4441L97.4126 31.5918L13.0991 0Z",
        fill: "#757575"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M167.587 31.5918L151.889 74.4441L251.9 0L167.587 31.5918Z",
        fill: "#757575"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M74.6448 107.079L58.2188 131.998L116.646 134.604L113.111 74.4443L74.6448 107.079Z",
        fill: "url(#paint7_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M190.355 107.079L151.889 74.4443L148.354 134.604L206.781 131.998L190.355 107.079Z",
        fill: "url(#paint8_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M77.8677 220.934L113.111 203.731L82.7539 179.959L77.8677 220.934Z",
        fill: "url(#paint9_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M151.889 203.731L187.132 220.934L182.246 179.959L151.889 203.731Z",
        fill: "url(#paint10_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M182.246 179.958L187.132 220.934L214.682 179.541L182.246 179.958Z",
        fill: "url(#paint11_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M82.7539 179.958L77.8677 220.934L50.3177 179.541L82.7539 179.958Z",
        fill: "url(#paint12_linear)"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M206.781 131.997L148.354 134.604L153.761 164.736L162.389 146.594L183.182 156.082L206.781 131.997Z",
        fill: "#666666"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M81.9222 156.082L102.611 146.594L111.24 164.736L116.646 134.604L58.2188 131.997L81.9222 156.082Z",
        fill: "#666666"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M153.76 164.736L147.002 153.579L148.354 134.604L153.76 164.736Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M111.24 164.736L116.646 134.604L117.997 153.579L111.24 164.736Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M147.003 153.58L153.76 164.736L146.899 200.29L147.003 153.58Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M117.997 153.58L118.101 200.29L111.24 164.736L117.997 153.58Z",
        fill: "#8D8D8D"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M154.571 236.345L154.696 226.773L152.097 224.48H112.903L110.408 226.773L110.616 236.47L77.8677 220.935L89.3035 230.318L112.591 246.479H152.409L175.696 230.318L187.132 220.935L154.571 236.345Z",
        fill: "#DF7554"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M151.889 203.731L146.899 200.29H118.101L113.111 203.731L110.408 226.773L112.903 224.479H152.097L154.696 226.773L151.889 203.731Z",
        fill: "#161616",
        stroke: "#161616",
        strokeWidth: "0.0657594",
        strokeMiterlimit: "10",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M162.389 146.594L153.76 164.736L183.182 156.082L162.389 146.594Z",
        fill: "#161616"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M102.611 146.594L111.24 164.736L81.9224 156.082L102.611 146.594Z",
        fill: "#161616"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M256.683 108.955L251.485 105.202L259.802 97.5905L253.46 92.5859L261.777 86.2258L256.267 82.0553L265 39.5158L251.901 0L167.587 31.5918H97.4127L13.0993 0L0 39.5158L8.8368 82.0553L3.22283 86.2258L11.5398 92.5859L5.19812 97.5905L13.5151 105.202L8.31699 108.955L20.2727 123.031L2.18321 179.542L18.9211 237.199L77.8678 220.934L113.111 203.731L110.231 227.044L112.903 224.583L152.097 224.479L154.696 226.773L151.889 203.731L187.132 220.934L246.079 237.199L262.921 179.542L244.727 123.031L256.683 108.955Z",
        fill: "url(#paint13_linear)",
        fillOpacity: "0.1",
        style: {
          'mix-blend-mode': 'color-dodge'
        }
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M256.683 108.955L251.485 105.202L259.802 97.5905L253.46 92.5859L261.777 86.2258L256.267 82.0553L265 39.5158L251.901 0L167.587 31.5918H97.4127L13.0993 0L0 39.5158L8.8368 82.0553L3.22283 86.2258L11.5398 92.5859L5.19812 97.5905L13.5151 105.202L8.31699 108.955L20.2727 123.031L2.18321 179.542L18.9211 237.199L77.8678 220.934L113.111 203.731L117.997 200.186H125.275H139.829H147.107L151.889 203.731L187.132 220.934L246.079 237.199L262.921 179.542L244.727 123.031L256.683 108.955Z",
        fill: "url(#paint14_radial)",
        style: {
          'mix-blend-mode': 'overlay'
        }
      })), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1166.17 120.732C1159.42 116.127 1151.72 112.742 1144.35 108.759C1139.75 106.295 1134.84 103.855 1130.83 100.47C1124.08 94.944 1125.3 83.5933 1132.67 78.6647C1143.11 71.9189 1160.02 75.603 1161.86 89.7167C1161.86 90.0154 1162.16 90.339 1162.48 90.339H1178.15C1178.44 90.339 1178.77 90.0403 1178.77 89.7167C1177.85 79.8844 1174.16 71.9189 1167.41 66.6916C1160.94 61.763 1153.27 59 1145.27 59C1104.11 59 1100.42 102.611 1122.54 116.426C1125 117.969 1146.82 129.021 1154.49 133.626C1162.16 138.53 1164.62 147.143 1161.24 153.888C1158.17 160.335 1150.18 164.318 1142.48 164.019C1133.89 163.721 1127.12 158.792 1124.98 151.424C1124.68 150.204 1124.36 147.74 1124.36 146.52C1124.36 146.222 1124.06 145.898 1123.73 145.898H1106.85C1106.55 145.898 1106.23 146.197 1106.23 146.52C1106.23 158.792 1109.29 165.563 1117.58 171.711C1125.25 177.536 1133.87 180 1142.78 180C1165.82 180 1177.8 166.807 1180.26 153.291C1182.13 140.372 1178.14 128.399 1166.17 120.732Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M433.192 61.4634H425.522H417.229C416.931 61.4634 416.607 61.7621 416.607 61.7621L402.786 107.514C402.487 108.136 401.865 108.136 401.566 107.514L388.044 61.7621C388.044 61.4634 387.745 61.4634 387.421 61.4634H379.129H371.758H361.623C361.299 61.4634 361 61.7621 361 62.0608V178.754C361 179.053 361.299 179.377 361.623 179.377H378.506C378.805 179.377 379.129 179.078 379.129 178.754V90.0145C379.129 89.3922 380.05 89.0935 380.349 89.7158L394.469 135.766L395.39 138.828C395.39 139.126 395.689 139.126 396.013 139.126H408.912C409.211 139.126 409.535 138.828 409.535 138.828L410.456 135.766L424.576 89.7158C424.576 89.0935 425.497 89.4171 425.497 90.0145V178.754C425.497 179.053 425.796 179.377 426.12 179.377H443.003C443.302 179.377 443.626 179.078 443.626 178.754V62.0608C443.626 61.7621 443.327 61.4385 443.003 61.4385L433.192 61.4634Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M907.506 61.4634C907.207 61.4634 906.883 61.7621 906.883 61.7621L893.063 107.514C892.764 108.136 892.141 108.136 891.842 107.514L878.022 61.7621C878.022 61.4634 877.723 61.4634 877.399 61.4634H851.6C851.301 61.4634 850.978 61.7621 850.978 62.0857V178.779C850.978 179.078 851.276 179.402 851.6 179.402H868.484C868.783 179.402 869.106 179.103 869.106 178.779V90.0145C869.106 89.3922 870.028 89.0935 870.327 89.7158L884.446 135.766L885.368 138.828C885.368 139.126 885.667 139.126 885.99 139.126H898.89C899.189 139.126 899.512 138.828 899.512 138.828L900.434 135.766L914.553 89.7158C914.852 89.0935 915.773 89.0935 915.773 90.0145V178.754C915.773 179.053 916.072 179.377 916.396 179.377H933.28C933.579 179.377 933.902 179.078 933.902 178.754V62.0608C933.902 61.7621 933.604 61.4385 933.28 61.4385L907.506 61.4634Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M690.01 61.4648H658.359H641.475H610.148C609.849 61.4648 609.525 61.7635 609.525 62.0871V76.5245C609.525 76.8232 609.824 77.1468 610.148 77.1468H640.877V178.482C640.877 178.781 641.176 179.104 641.5 179.104H658.384C658.683 179.104 659.006 178.806 659.006 178.482V77.1219H689.711C690.01 77.1219 690.333 76.8232 690.333 76.4996V62.0623C690.632 61.7635 690.309 61.4648 690.01 61.4648Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M789.545 179.377H804.91C805.208 179.377 805.532 179.078 805.532 178.456L773.582 61.4637C773.582 61.165 773.284 61.165 772.96 61.165H767.133H756.699H751.17C750.872 61.165 750.548 61.4637 750.548 61.4637L718.897 178.456C718.897 178.755 719.196 179.377 719.52 179.377H734.884C735.183 179.377 735.507 179.078 735.507 179.078L744.721 145.001C744.721 144.703 745.02 144.703 745.343 144.703H779.435C779.733 144.703 780.057 145.001 780.057 145.001L789.271 179.078C788.922 179.054 789.246 179.377 789.545 179.377ZM749.004 127.776L761.281 82.3232C761.58 81.7009 762.202 81.7009 762.501 82.3232L774.778 127.776C774.778 128.075 774.479 128.697 774.155 128.697H749.577C749.303 128.398 749.004 128.1 749.004 127.776Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1051.59 179.377H1066.96C1067.26 179.377 1067.58 179.078 1067.58 178.456L1035.63 61.4637C1035.63 61.165 1035.33 61.165 1035.01 61.165H1029.18H1018.75H1012.92C1012.62 61.165 1012.3 61.4637 1012.3 61.4637L980.646 178.456C980.646 178.755 980.944 179.377 981.268 179.377H996.633C996.932 179.377 997.255 179.078 997.255 179.078L1006.47 145.001C1006.47 144.703 1006.77 144.703 1007.09 144.703H1041.18C1041.48 144.703 1041.81 145.001 1041.81 145.001L1051.02 179.078C1050.97 179.054 1051.27 179.377 1051.59 179.377ZM1011.03 127.776L1023.3 82.3232C1023.6 81.7009 1024.22 81.7009 1024.52 82.3232L1036.8 127.776C1036.8 128.075 1036.5 128.697 1036.18 128.697H1011.6C1011.35 128.398 1011.03 128.1 1011.03 127.776Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M512.132 162.176V125.934C512.132 125.635 512.431 125.311 512.755 125.311H557.604C557.903 125.311 558.227 125.013 558.227 124.689V110.252C558.227 109.953 557.928 109.629 557.604 109.629H512.755C512.456 109.629 512.132 109.331 512.132 109.007V77.7427C512.132 77.444 512.431 77.1204 512.755 77.1204H563.755C564.054 77.1204 564.377 76.8217 564.377 76.4981V62.0608C564.377 61.7621 564.079 61.4385 563.755 61.4385H512.132H494.626C494.327 61.4385 494.003 61.7372 494.003 62.0608V77.0955V109.331V124.988V162.45V178.406C494.003 178.705 494.302 179.028 494.626 179.028H512.132H566.195C566.494 179.028 566.818 178.73 566.818 178.406V163.048C566.818 162.749 566.519 162.425 566.195 162.425H512.755C512.456 162.799 512.132 162.475 512.132 162.176Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1320.39 178.132L1262.02 117.645C1261.72 117.346 1261.72 117.022 1262.02 116.724L1314.54 62.3844C1314.83 62.0857 1314.54 61.4634 1314.24 61.4634H1292.72C1292.42 61.4634 1292.42 61.4634 1292.42 61.7621L1247.87 108.136C1247.57 108.435 1246.95 108.136 1246.95 107.837V62.0608C1246.95 61.7621 1246.65 61.4385 1246.33 61.4385H1229.44C1229.15 61.4385 1228.82 61.7372 1228.82 62.0608V178.754C1228.82 179.053 1229.12 179.377 1229.44 179.377H1246.33C1246.63 179.377 1246.95 179.078 1246.95 178.754V127.178C1246.95 126.556 1247.57 126.257 1247.87 126.88L1298.25 179.078L1298.55 179.377H1320.06C1320.69 179.377 1320.99 178.754 1320.39 178.132Z",
        fill: TEXT_COLOR
      }), /*#__PURE__*/_react.default.createElement("rect", {
        x: "1338",
        y: "27",
        width: "194",
        height: "84",
        rx: "12",
        fill: FLASK_PILL_BACKGROUND
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1358 50.6376H1380.89V58.7139H1366.33V65.515H1377.7V73.5913H1366.33V88.3624H1358V50.6376Z",
        fill: FLASK_PILL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1386.55 50.6376H1394.87V80.2861H1410.28V88.3624H1386.55V50.6376Z",
        fill: FLASK_PILL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1427.39 50.6376H1434.94L1450.86 88.3624H1442.17L1438.87 80.3924H1423.46L1420.16 88.3624H1411.47L1427.39 50.6376ZM1426.45 73.0599H1435.83L1431.16 61.7425L1426.45 73.0599Z",
        fill: FLASK_PILL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1464.82 89C1461.85 89 1459.18 88.4155 1456.81 87.2466C1454.43 86.0422 1452.51 84.3774 1451.04 82.252L1457.43 76.7793C1458.34 78.1253 1459.51 79.188 1460.94 79.9673C1462.38 80.7112 1463.77 81.0831 1465.13 81.0831C1466.53 81.0831 1467.63 80.7997 1468.43 80.233C1469.24 79.6308 1469.64 78.8692 1469.64 77.9482C1469.64 76.9918 1469.24 76.1594 1468.43 75.451C1467.67 74.7425 1466.34 74.0695 1464.45 73.4319L1461.83 72.5286C1458.8 71.5014 1456.47 70.0845 1454.87 68.2779C1453.26 66.436 1452.46 64.2221 1452.46 61.6362C1452.46 59.7943 1452.77 58.1649 1453.4 56.748C1454.06 55.2956 1454.95 54.0736 1456.07 53.0817C1457.22 52.0899 1458.59 51.3283 1460.16 50.797C1461.73 50.2657 1463.44 50 1465.29 50C1467.56 50 1469.69 50.3896 1471.68 51.1689C1473.67 51.9482 1475.54 53.2943 1477.29 55.2071L1471.84 61.0518C1470.97 59.9891 1469.97 59.2098 1468.85 58.7139C1467.74 58.1826 1466.58 57.9169 1465.4 57.9169C1464.84 57.9169 1464.28 57.97 1463.72 58.0763C1463.2 58.1826 1462.73 58.3597 1462.31 58.6076C1461.89 58.8556 1461.54 59.1567 1461.26 59.5109C1461.01 59.8651 1460.89 60.2902 1460.89 60.7861C1460.89 61.8134 1461.35 62.6281 1462.25 63.2302C1463.2 63.797 1464.66 64.4346 1466.65 65.1431L1469.27 66.0995C1471.96 67.0913 1474.11 68.5082 1475.72 70.3501C1477.36 72.1921 1478.16 74.53 1478.13 77.3638C1478.13 79.064 1477.79 80.6403 1477.13 82.0926C1476.47 83.5095 1475.54 84.7316 1474.35 85.7589C1473.2 86.7861 1471.81 87.5831 1470.16 88.1499C1468.56 88.7166 1466.78 89 1464.82 89Z",
        fill: FLASK_PILL_TEXT
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "M1492.17 71.4659V88.3624H1483.9V50.6376H1492.17V66.4183L1504.8 50.6376H1515.01L1500.35 68.7561L1518 88.3624H1507.31L1492.17 71.4659Z",
        fill: FLASK_PILL_TEXT
      }), /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint0_linear",
        x1: "132.5",
        y1: "31.5908",
        x2: "132.5",
        y2: "200.289",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#8F8F8F"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#AEAEAE"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint1_linear",
        x1: "222.583",
        y1: "107.077",
        x2: "222.583",
        y2: "179.957",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#696969"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#A6A6A6"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint2_linear",
        x1: "42.4685",
        y1: "107.077",
        x2: "42.4685",
        y2: "179.957",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#696969"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#A6A6A6"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint3_linear",
        x1: "184.533",
        y1: "102.178",
        x2: "279.867",
        y2: "27.8973",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#1B1B1B"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#565656"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint4_linear",
        x1: "80.4668",
        y1: "102.178",
        x2: "-14.8672",
        y2: "27.8973",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#1B1B1B"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#565656"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint5_linear",
        x1: "225.027",
        y1: "179.542",
        x2: "225.027",
        y2: "237.2",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#787878"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#5E5E5E"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint6_linear",
        x1: "40.0254",
        y1: "179.542",
        x2: "40.0254",
        y2: "237.2",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#787878"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#5E5E5E"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint7_linear",
        x1: "87.4322",
        y1: "74.4443",
        x2: "87.4322",
        y2: "134.604",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7A7A7A"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#949494"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint8_linear",
        x1: "177.568",
        y1: "74.4443",
        x2: "177.568",
        y2: "134.604",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7A7A7A"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#949494"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint9_linear",
        x1: "95.4893",
        y1: "245.645",
        x2: "95.4893",
        y2: "-25.2885",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7A7C7D"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#CECECF"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint10_linear",
        x1: "169.51",
        y1: "245.645",
        x2: "169.51",
        y2: "-25.2885",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#7A7C7D"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#CECECF"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint11_linear",
        x1: "198.464",
        y1: "126.784",
        x2: "198.464",
        y2: "234.065",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#3E3E3E"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#616161"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint12_linear",
        x1: "66.5358",
        y1: "126.784",
        x2: "66.5358",
        y2: "234.065",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#3E3E3E"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#616161"
      })), /*#__PURE__*/_react.default.createElement("linearGradient", {
        id: "paint13_linear",
        x1: "132.032",
        y1: "31.279",
        x2: "132.032",
        y2: "258.573",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#FF60DC"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#6B71FF"
      })), /*#__PURE__*/_react.default.createElement("radialGradient", {
        id: "paint14_radial",
        cx: "0",
        cy: "0",
        r: "1",
        gradientUnits: "userSpaceOnUse",
        gradientTransform: "translate(132.032 26.5872) rotate(90) scale(218.953 244.615)"
      }, /*#__PURE__*/_react.default.createElement("stop", {
        stopColor: "#FF60DC"
      }), /*#__PURE__*/_react.default.createElement("stop", {
        offset: "1",
        stopColor: "#6B71FF"
      })), /*#__PURE__*/_react.default.createElement("clipPath", {
        id: "clip0"
      }, /*#__PURE__*/_react.default.createElement("rect", {
        width: "265",
        height: "247",
        fill: "white"
      }))));

    default:
      return /*#__PURE__*/_react.default.createElement("svg", {
        height: LOGO_HEIGHT,
        viewBox: "0 0 1311 242",
        width: LOGO_WIDTH,
        xmlns: "http://www.w3.org/2000/svg",
        className: className
      }, /*#__PURE__*/_react.default.createElement("g", {
        fill: "none"
      }, /*#__PURE__*/_react.default.createElement("g", {
        fill: TEXT_COLOR,
        transform: "translate(361 61)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m796.7 60.9c-6.8-4.5-14.3-7.7-21.4-11.7-4.6-2.6-9.5-4.9-13.5-8.2-6.8-5.6-5.4-16.6 1.7-21.4 10.2-6.8 27.1-3 28.9 10.9 0 .3.3.5.6.5h15.4c.4 0 .7-.3.6-.7-.8-9.6-4.5-17.6-11.3-22.7-6.5-4.9-13.9-7.5-21.8-7.5-40.7 0-44.4 43.1-22.5 56.7 2.5 1.6 24 12.4 31.6 17.1s10 13.3 6.7 20.1c-3 6.2-10.8 10.5-18.6 10-8.5-.5-15.1-5.1-17.4-12.3-.4-1.3-.6-3.8-.6-4.9 0-.3-.3-.6-.6-.6h-16.7c-.3 0-.6.3-.6.6 0 12.1 3 18.8 11.2 24.9 7.7 5.8 16.1 8.2 24.8 8.2 22.8 0 34.6-12.9 37-26.3 2.1-13.1-1.8-24.9-13.5-32.7z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m71.6 2.3h-7.4-8.1c-.3 0-.5.2-.6.4l-13.7 45.2c-.2.6-1 .6-1.2 0l-13.7-45.2c-.1-.3-.3-.4-.6-.4h-8.1-7.4-10c-.3 0-.6.3-.6.6v115.4c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-87.7c0-.7 1-.8 1.2-.2l13.8 45.5 1 3.2c.1.3.3.4.6.4h12.8c.3 0 .5-.2.6-.4l1-3.2 13.8-45.5c.2-.7 1.2-.5 1.2.2v87.7c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-115.4c0-.3-.3-.6-.6-.6z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m541 2.3c-.3 0-.5.2-.6.4l-13.7 45.2c-.2.6-1 .6-1.2 0l-13.7-45.2c-.1-.3-.3-.4-.6-.4h-25.4c-.3 0-.6.3-.6.6v115.4c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-87.7c0-.7 1-.8 1.2-.2l13.8 45.5 1 3.2c.1.3.3.4.6.4h12.8c.3 0 .5-.2.6-.4l1-3.2 13.8-45.5c.2-.7 1.2-.5 1.2.2v87.7c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-115.4c0-.3-.3-.6-.6-.6z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m325.6 2.3h-31.1-16.7-31.1c-.3 0-.6.3-.6.6v14.4c0 .3.3.6.6.6h30.5v100.4c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-100.4h30.5c.3 0 .6-.3.6-.6v-14.4c0-.3-.2-.6-.6-.6z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m424.1 118.9h15.2c.4 0 .7-.4.6-.8l-31.4-115.8c-.1-.3-.3-.4-.6-.4h-5.8-10.2-5.8c-.3 0-.5.2-.6.4l-31.4 115.8c-.1.4.2.8.6.8h15.2c.3 0 .5-.2.6-.4l9.1-33.7c.1-.3.3-.4.6-.4h33.6c.3 0 .5.2.6.4l9.1 33.7c.1.2.4.4.6.4zm-39.9-51 12.2-45.1c.2-.6 1-.6 1.2 0l12.2 45.1c.1.4-.2.8-.6.8h-24.4c-.4 0-.7-.4-.6-.8z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m683.3 118.9h15.2c.4 0 .7-.4.6-.8l-31.4-115.8c-.1-.3-.3-.4-.6-.4h-5.8-10.2-5.8c-.3 0-.5.2-.6.4l-31.4 115.8c-.1.4.2.8.6.8h15.2c.3 0 .5-.2.6-.4l9.1-33.7c.1-.3.3-.4.6-.4h33.6c.3 0 .5.2.6.4l9.1 33.7c.1.2.3.4.6.4zm-39.9-51 12.2-45.1c.2-.6 1-.6 1.2 0l12.2 45.1c.1.4-.2.8-.6.8h-24.4c-.4 0-.7-.4-.6-.8z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m149.8 101.8v-35.8c0-.3.3-.6.6-.6h44.5c.3 0 .6-.3.6-.6v-14.4c0-.3-.3-.6-.6-.6h-44.5c-.3 0-.6-.3-.6-.6v-30.6c0-.3.3-.6.6-.6h50.6c.3 0 .6-.3.6-.6v-14.4c0-.3-.3-.6-.6-.6h-51.2-17.3c-.3 0-.6.3-.6.6v15 31.9 15.6 37 15.8c0 .3.3.6.6.6h17.3 53.3c.3 0 .6-.3.6-.6v-15.2c0-.3-.3-.6-.6-.6h-52.8c-.3-.1-.5-.3-.5-.7z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m949.3 117.9-57.8-59.7c-.2-.2-.2-.6 0-.8l52-54c.4-.4.1-1-.4-1h-21.3c-.2 0-.3.1-.4.2l-44.1 45.8c-.4.4-1 .1-1-.4v-45c0-.3-.3-.6-.6-.6h-16.7c-.3 0-.6.3-.6.6v115.4c0 .3.3.6.6.6h16.7c.3 0 .6-.3.6-.6v-50.8c0-.5.7-.8 1-.4l50 51.6c.1.1.3.2.4.2h21.3c.4-.1.7-.8.3-1.1z"
      })), /*#__PURE__*/_react.default.createElement("g", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        transform: "translate(1 1)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m246.1.2-101.1 75 18.8-44.2z",
        fill: "#e17726",
        stroke: "#e17726"
      }), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#e27625",
        stroke: "#e27625",
        transform: "translate(2)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m10.9.2 100.2 75.7-17.9-44.9z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m207.7 174.1-26.9 41.2 57.6 15.9 16.5-56.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m.2 175 16.4 56.2 57.5-15.9-26.8-41.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m71 104.5-16 24.2 57 2.6-1.9-61.5z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m184 104.5-39.7-35.4-1.3 62.2 57-2.6z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m74.1 215.3 34.5-16.7-29.7-23.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m146.4 198.6 34.4 16.7-4.7-39.9z"
      })), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#d5bfb2",
        stroke: "#d5bfb2",
        transform: "translate(76 198)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m106.8 17.3-34.4-16.7 2.8 22.4-.3 9.5z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m.1 17.3 32 15.2-.2-9.5 2.7-22.4z"
      })), /*#__PURE__*/_react.default.createElement("path", {
        d: "m108.7 160.6-28.6-8.4 20.2-9.3z",
        fill: "#233447",
        stroke: "#233447"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m150.3 160.6 8.4-17.7 20.3 9.3z",
        fill: "#233447",
        stroke: "#233447"
      }), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#cc6228",
        stroke: "#cc6228",
        transform: "translate(49 128)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m27.1 87.3 5-41.2-31.8.9z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m128.9 46.1 4.9 41.2 26.9-40.3z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m153 .7-57 2.6 5.3 29.3 8.4-17.7 20.3 9.3z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m31.1 24.2 20.2-9.3 8.4 17.7 5.3-29.3-57-2.6z"
      })), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#e27525",
        stroke: "#e27525",
        transform: "translate(57 128)"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m0 .7 23.9 46.7-.8-23.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m122 24.2-.9 23.2 23.9-46.7z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m57 3.3-5.3 29.3 6.7 34.6 1.5-45.6z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m88 3.3-2.8 18.2 1.4 45.7 6.7-34.6z"
      })), /*#__PURE__*/_react.default.createElement("path", {
        d: "m150.3 160.6-6.7 34.6 4.8 3.4 29.7-23.2.9-23.2z",
        fill: "#f5841f",
        stroke: "#f5841f"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m80.1 152.2.8 23.2 29.7 23.2 4.8-3.4-6.7-34.6z",
        fill: "#f5841f",
        stroke: "#f5841f"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m150.9 230.5.3-9.5-2.6-2.2h-38.2l-2.5 2.2.2 9.5-32-15.2 11.2 9.2 22.7 15.7h38.9l22.8-15.7 11.1-9.2z",
        fill: "#c0ac9d",
        stroke: "#c0ac9d"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m148.4 198.6-4.8-3.4h-28.2l-4.8 3.4-2.7 22.4 2.5-2.2h38.2l2.6 2.2z",
        fill: "#161616",
        stroke: "#161616"
      }), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#763e1a",
        stroke: "#763e1a"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m250.4 80.1 8.5-41.4-12.8-38.5-97.7 72.5 37.6 31.8 53.1 15.5 11.7-13.7-5.1-3.7 8.1-7.4-6.2-4.8 8.1-6.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m.1 38.7 8.6 41.4-5.5 4.1 8.2 6.2-6.2 4.8 8.1 7.4-5.1 3.7 11.7 13.7 53.1-15.5 37.6-31.8-97.7-72.5z"
      })), /*#__PURE__*/_react.default.createElement("g", {
        fill: "#f5841f",
        stroke: "#f5841f"
      }, /*#__PURE__*/_react.default.createElement("path", {
        d: "m239.1 120-53.1-15.5 16 24.2-23.9 46.7 31.6-.4h47.2z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m73 104.5-53.1 15.5-17.7 55h47.1l31.6.4-23.9-46.7z"
      }), /*#__PURE__*/_react.default.createElement("path", {
        d: "m145 131.3 3.4-58.6 15.4-41.7h-68.6l15.4 41.7 3.4 58.6 1.3 18.4.1 45.5h28.2l.1-45.5z"
      })))));
  }
}

MetaFoxHorizontalLogo.propTypes = {
  className: _propTypes.default.string
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js", {"./metafox-logo.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\metafox-logo.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\metafox-logo\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metafoxLogo.default;
  }
});

var _metafoxLogo = _interopRequireDefault(require("./metafox-logo.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\metafox-logo.component.js", {"./horizontal-logo":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\metafox-logo\\horizontal-logo.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\metafox-logo\metafox-logo.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _horizontalLogo = _interopRequireDefault(require("./horizontal-logo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MetaFoxLogo extends _react.PureComponent {
  render() {
    const {
      onClick,
      unsetIconHeight,
      isOnboarding
    } = this.props;
    const iconProps = unsetIconHeight ? {} : {
      height: 42,
      width: 42
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      onClick: onClick,
      className: (0, _classnames.default)({
        'app-header__logo-container': !isOnboarding,
        'onboarding-app-header__logo-container': isOnboarding,
        'app-header__logo-container--clickable': Boolean(onClick)
      }),
      "data-testid": "app-header-logo"
    }, /*#__PURE__*/_react.default.createElement(_horizontalLogo.default, {
      className: (0, _classnames.default)({
        'app-header__metafox-logo--horizontal': !isOnboarding,
        'onboarding-app-header__metafox-logo--horizontal': isOnboarding
      })
    }), /*#__PURE__*/_react.default.createElement("img", _extends({}, iconProps, {
      src: "./images/logo/metamask-fox.svg",
      className: (0, _classnames.default)({
        'app-header__metafox-logo--icon': !isOnboarding,
        'onboarding-app-header__metafox-logo--icon': isOnboarding
      }),
      alt: ""
    })));
  }

}

exports.default = MetaFoxLogo;

_defineProperty(MetaFoxLogo, "propTypes", {
  onClick: _propTypes.default.func,
  unsetIconHeight: _propTypes.default.bool,
  isOnboarding: _propTypes.default.bool
});

_defineProperty(MetaFoxLogo, "defaultProps", {
  onClick: undefined
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\new-network-info\\new-network-info.js", {"../../../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/tokens":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\tokens.js","../../../../shared/lib/fetch-with-cache":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../chip/chip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\chip.js","../identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\new-network-info\new-network-info.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _i18n = require("../../../contexts/i18n");

var _popover = _interopRequireDefault(require("../popover"));

var _button = _interopRequireDefault(require("../button"));

var _identicon = _interopRequireDefault(require("../identicon"));

var _box = _interopRequireDefault(require("../box"));

var _designSystem = require("../../../helpers/constants/design-system");

var _typography = _interopRequireDefault(require("../typography"));

var _tokens = require("../../../../shared/constants/tokens");

var _fetchWithCache = _interopRequireDefault(require("../../../../shared/lib/fetch-with-cache"));

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

var _chip = _interopRequireDefault(require("../chip/chip"));

var _actions = require("../../../store/actions");

var _network = require("../../../../shared/constants/network");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NewNetworkInfo = () => {
  var _currentProvider$nick;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [tokenDetectionSupported, setTokenDetectionSupported] = (0, _react.useState)(false);
  const [showPopup, setShowPopup] = (0, _react.useState)(true);
  const autoDetectToken = (0, _reactRedux.useSelector)(_selectors.getUseTokenDetection);
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const currentProvider = (0, _reactRedux.useSelector)(_selectors.getProvider);

  const onCloseClick = () => {
    setShowPopup(false);
    (0, _actions.setFirstTimeUsedNetwork)(currentProvider.chainId);
  };

  const addTokenManually = () => {
    history.push(_routes.IMPORT_TOKEN_ROUTE);
    setShowPopup(false);
    (0, _actions.setFirstTimeUsedNetwork)(currentProvider.chainId);
  };

  const getIsTokenDetectionSupported = async () => {
    const fetchedTokenData = await (0, _fetchWithCache.default)(`${_tokens.TOKEN_API_METASWAP_CODEFI_URL}${currentProvider.chainId}`);
    return !fetchedTokenData.error;
  };

  const checkTokenDetection = async () => {
    const fetchedData = await getIsTokenDetectionSupported();
    setTokenDetectionSupported(fetchedData);
  };

  (0, _react.useEffect)(() => {
    checkTokenDetection();
  });

  if (!showPopup) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: onCloseClick,
    className: "new-network-info__wrapper",
    footer: /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onCloseClick
    }, t('recoveryPhraseReminderConfirm'))
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('switchedTo')), /*#__PURE__*/_react.default.createElement(_chip.default, {
    className: "new-network-info__token-box",
    backgroundColor: _designSystem.COLORS.BACKGROUND_ALTERNATIVE,
    maxContent: false,
    label: currentProvider.type === _network.NETWORK_TYPES.RPC ? (_currentProvider$nick = currentProvider.nickname) !== null && _currentProvider$nick !== void 0 ? _currentProvider$nick : t('privateNetwork') : t(currentProvider.type),
    labelProps: {
      color: _designSystem.COLORS.TEXT_DEFAULT
    },
    leftIcon: primaryTokenImage ? /*#__PURE__*/_react.default.createElement(_identicon.default, {
      image: primaryTokenImage,
      diameter: 14
    }) : /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-question-circle"
    })
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    align: _designSystem.TEXT_ALIGN.CENTER,
    margin: [8, 0, 0, 0]
  }, t('thingsToKeep')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 4,
    marginLeft: 5,
    marginTop: 6
  }, currentProvider.ticker ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    marginBottom: 2,
    paddingBottom: 2,
    className: "new-network-info__bullet-paragraph"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 4,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, "\u2022"), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    },
    key: "nativeTokenInfo"
  }, t('nativeToken', [/*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    },
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    key: "ticker"
  }, currentProvider.ticker)]))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    marginBottom: 2,
    paddingBottom: 2,
    className: !autoDetectToken || !tokenDetectionSupported ? 'new-network-info__bullet-paragraph' : null
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 4,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, "\u2022"), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    },
    className: "new-network-info__bullet-paragraph__text"
  }, t('attemptSendingAssets'), ' ', /*#__PURE__*/_react.default.createElement("a", {
    href: "https://metamask.zendesk.com/hc/en-us/articles/4404424659995",
    target: "_blank",
    rel: "noreferrer"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.INFO_DEFAULT,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    }
  }, t('learnMoreUpperCase'))))), !autoDetectToken || !tokenDetectionSupported ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    marginBottom: 2,
    paddingBottom: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 4,
    color: _designSystem.COLORS.TEXT_DEFAULT
  }, "\u2022"), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.TEXT_DEFAULT,
    className: "new-network-info__token-show-up"
  }, t('tokenShowUp'), ' ', /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: addTokenManually,
    className: "new-network-info__button"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.INFO_DEFAULT,
    className: "new-network-info__manually-add-tokens"
  }, t('clickToManuallyAdd')))))) : null));
};

var _default = NewNetworkInfo;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\nickname-popover\\index.js", {"./nickname-popover.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\nickname-popover\\nickname-popover.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\nickname-popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nicknamePopover.default;
  }
});

var _nicknamePopover = _interopRequireDefault(require("./nickname-popover.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\nickname-popover\\nickname-popover.component.js", {"../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\nickname-popover\nickname-popover.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _i18n = require("../../../contexts/i18n");

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _popover = _interopRequireDefault(require("../popover"));

var _button = _interopRequireDefault(require("../button"));

var _identicon = _interopRequireDefault(require("../identicon"));

var _util = require("../../../helpers/utils/util");

var _copyIcon = _interopRequireDefault(require("../icon/copy-icon.component"));

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NicknamePopover = ({
  address,
  nickname,
  onClose = null,
  onAdd = null,
  explorerLink
}) => {
  var _tokenList$address$to;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const onAddClick = (0, _react.useCallback)(() => {
    onAdd();
  }, [onAdd]);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);

  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };

  const openBlockExplorer = () => {
    global.platform.openTab({
      url: explorerLink
    });
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: onClose,
    className: "nickname-popover__popover-wrap"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    diameter: 36,
    className: "nickname-popover__identicon",
    image: (_tokenList$address$to = tokenList[address.toLowerCase()]) === null || _tokenList$address$to === void 0 ? void 0 : _tokenList$address$to.iconUrl
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__address"
  }, nickname || (0, _util.shortenAddress)(address)), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__public-address"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__public-address__constant"
  }, address), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement("button", {
    type: "link",
    onClick: () => {
      handleCopy(address);
    },
    title: ""
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 11,
    color: "var(--color-icon-default)"
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__view-on-block-explorer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "nickname-popover__etherscan-link",
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer,
    target: "_blank",
    rel: "noopener noreferrer",
    title: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? t('addBlockExplorer') : t('etherscanView')
  }, blockExplorerLinkText.firstPart === 'addBlockExplorer' ? t('addBlockExplorer') : t('viewOnBlockExplorer'))), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "nickname-popover__footer-button",
    onClick: onAddClick
  }, nickname ? t('editANickname') : t('addANickname'))));
};

NicknamePopover.propTypes = {
  address: _propTypes.default.string,
  nickname: _propTypes.default.string,
  onClose: _propTypes.default.func,
  onAdd: _propTypes.default.func,
  explorerLink: _propTypes.default.string
};
var _default = NicknamePopover;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\numeric-input\\numeric-input.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\numeric-input\numeric-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NumericInput;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _typography = _interopRequireDefault(require("../typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DECIMAL_REGEX = /\.(\d*)/u;

function NumericInput({
  detailText = '',
  value = 0,
  onChange,
  error = '',
  autoFocus = false,
  allowDecimals = true,
  disabled = false,
  dataTestId,
  placeholder,
  id,
  name
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('numeric-input', {
      'numeric-input--error': error
    })
  }, /*#__PURE__*/_react.default.createElement("input", {
    type: "number",
    value: value,
    onKeyDown: e => {
      if (!allowDecimals && e.key === '.') {
        e.preventDefault();
      }
    },
    onChange: e => {
      var _match$;

      const newValue = e.target.value;
      const match = DECIMAL_REGEX.exec(newValue);

      if ((match === null || match === void 0 ? void 0 : (_match$ = match[1]) === null || _match$ === void 0 ? void 0 : _match$.length) >= 15) {
        return;
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(parseFloat(newValue || 0, 10));
    },
    min: "0",
    autoFocus: autoFocus,
    disabled: disabled,
    "data-testid": dataTestId,
    placeholder: placeholder,
    id: id,
    name: name
  }), detailText && /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.TEXT_ALTERNATIVE,
    variant: _designSystem.TYPOGRAPHY.H7,
    as: "span"
  }, detailText));
}

NumericInput.propTypes = {
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  detailText: _propTypes.default.string,
  onChange: _propTypes.default.func,
  error: _propTypes.default.string,
  autoFocus: _propTypes.default.bool,
  allowDecimals: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  dataTestId: _propTypes.default.string,
  placeholder: _propTypes.default.string,

  /**
   * The name of the input
   */
  name: _propTypes.default.string,

  /**
   * The id of the input element. Should be used with htmlFor with a label element.
   */
  id: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js", {"./page-container-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","./page-container-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-header\\index.js","./page-container.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PageContainerFooter", {
  enumerable: true,
  get: function () {
    return _pageContainerFooter.default;
  }
});
Object.defineProperty(exports, "PageContainerHeader", {
  enumerable: true,
  get: function () {
    return _pageContainerHeader.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _pageContainer.default;
  }
});

var _pageContainerHeader = _interopRequireDefault(require("./page-container-header"));

var _pageContainerFooter = _interopRequireDefault(require("./page-container-footer"));

var _pageContainer = _interopRequireDefault(require("./page-container.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-content.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PageContainerContent extends _react.Component {
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.props.children);
  }

}

exports.default = PageContainerContent;

_defineProperty(PageContainerContent, "propTypes", {
  children: _propTypes.default.node.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js", {"./page-container-footer.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container-footer\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _pageContainerFooter.default;
  }
});

var _pageContainerFooter = _interopRequireDefault(require("./page-container-footer.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js", {"../../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container-footer\page-container-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PageContainerFooter extends _react.Component {
  render() {
    const {
      children,
      onCancel,
      cancelText,
      onSubmit,
      submitText,
      disabled,
      submitButtonType,
      hideCancel,
      cancelButtonType,
      buttonSizeLarge = false,
      footerClassName,
      footerButtonClassName
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('page-container__footer', footerClassName)
    }, /*#__PURE__*/_react.default.createElement("footer", null, !hideCancel && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: cancelButtonType || 'secondary',
      large: buttonSizeLarge,
      className: (0, _classnames.default)('page-container__footer-button', footerButtonClassName),
      onClick: e => onCancel(e),
      "data-testid": "page-container-footer-cancel"
    }, cancelText || this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: submitButtonType || 'primary',
      large: buttonSizeLarge,
      className: (0, _classnames.default)('page-container__footer-button', footerButtonClassName),
      disabled: disabled,
      onClick: e => onSubmit(e),
      "data-testid": "page-container-footer-next"
    }, submitText || this.context.t('next'))), children && /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer-secondary"
    }, children));
  }

}

exports.default = PageContainerFooter;

_defineProperty(PageContainerFooter, "propTypes", {
  children: _propTypes.default.node,
  onCancel: _propTypes.default.func,
  cancelText: _propTypes.default.string,
  cancelButtonType: _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  submitText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  submitButtonType: _propTypes.default.string,
  hideCancel: _propTypes.default.bool,
  buttonSizeLarge: _propTypes.default.bool,
  footerClassName: _propTypes.default.string,
  footerButtonClassName: _propTypes.default.string
});

_defineProperty(PageContainerFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-header\\index.js", {"./page-container-header.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-header\\page-container-header.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container-header\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _pageContainerHeader.default;
  }
});

var _pageContainerHeader = _interopRequireDefault(require("./page-container-header.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-header\\page-container-header.component.js", {"../../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container-header\page-container-header.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PageContainerHeader extends _react.Component {
  renderTabs() {
    const {
      tabs
    } = this.props;
    return tabs ? /*#__PURE__*/_react.default.createElement("ul", {
      className: "page-container__tabs"
    }, tabs) : null;
  }

  renderCloseAction() {
    const {
      hideClose,
      onClose,
      headerCloseText
    } = this.props;

    if (hideClose) {
      return null;
    }

    if (headerCloseText) {
      return onClose && /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        className: "page-container__header-close-text",
        onClick: () => onClose()
      }, headerCloseText);
    }

    return onClose && /*#__PURE__*/_react.default.createElement("button", {
      className: "page-container__header-close",
      onClick: () => onClose(),
      "aria-label": "close"
    });
  }

  renderHeaderRow() {
    const {
      showBackButton,
      onBackButtonClick,
      backButtonStyles,
      backButtonString
    } = this.props;
    return showBackButton && /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header-row"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "page-container__back-button",
      onClick: onBackButtonClick,
      style: backButtonStyles
    }, backButtonString || 'Back'));
  }

  render() {
    const {
      title,
      subtitle,
      tabs,
      className,
      hideClose
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('page-container__header', className, {
        'page-container__header--no-padding-bottom': Boolean(tabs)
      }),
      "data-testid": "page-container__header"
    }, this.renderHeaderRow(), title && /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('page-container__title', {
        'page-container__title--no-margin-right': hideClose
      })
    }, title), subtitle ? /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, subtitle) : null, this.renderCloseAction(), this.renderTabs());
  }

}

exports.default = PageContainerHeader;

_defineProperty(PageContainerHeader, "propTypes", {
  title: _propTypes.default.string,
  subtitle: _propTypes.default.string,
  onClose: _propTypes.default.func,
  showBackButton: _propTypes.default.bool,
  onBackButtonClick: _propTypes.default.func,
  backButtonStyles: _propTypes.default.object,
  backButtonString: _propTypes.default.string,
  tabs: _propTypes.default.node,
  headerCloseText: _propTypes.default.string,
  className: _propTypes.default.string,
  hideClose: _propTypes.default.bool
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container.component.js", {"./page-container-footer":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\index.js","./page-container-header":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-header\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\page-container\page-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pageContainerHeader = _interopRequireDefault(require("./page-container-header"));

var _pageContainerFooter = _interopRequireDefault(require("./page-container-footer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PageContainer extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      activeTabIndex: this.props.defaultActiveTabIndex || 0
    });
  }

  handleTabClick(activeTabIndex) {
    this.setState({
      activeTabIndex
    });
  }

  renderTabs() {
    const {
      tabsComponent
    } = this.props;

    if (!tabsComponent) {
      return null;
    }

    const numberOfTabs = _react.default.Children.count(tabsComponent.props.children);

    return _react.default.Children.map(tabsComponent.props.children, (child, tabIndex) => {
      return child && /*#__PURE__*/_react.default.cloneElement(child, {
        onClick: index => this.handleTabClick(index),
        tabIndex,
        isActive: numberOfTabs > 1 && tabIndex === this.state.activeTabIndex,
        key: tabIndex,
        className: 'page-container__tab'
      });
    });
  }

  renderActiveTabContent() {
    const {
      tabsComponent
    } = this.props;
    let {
      children
    } = tabsComponent.props;
    children = children.filter(Boolean);
    const {
      activeTabIndex
    } = this.state;
    return (children[activeTabIndex] || children[0]).props.children;
  }

  renderContent() {
    const {
      contentComponent,
      tabsComponent
    } = this.props;

    if (contentComponent) {
      return contentComponent;
    } else if (tabsComponent) {
      return this.renderActiveTabContent();
    }

    return null;
  }

  getTabSubmitText() {
    const {
      tabsComponent
    } = this.props;
    const {
      activeTabIndex
    } = this.state;

    if (tabsComponent) {
      var _children$activeTabIn;

      let {
        children
      } = tabsComponent.props;
      children = children.filter(Boolean);

      if (((_children$activeTabIn = children[activeTabIndex]) === null || _children$activeTabIn === void 0 ? void 0 : _children$activeTabIn.key) === 'custom-tab') {
        return this.context.t('addCustomToken');
      }
    }

    return null;
  }

  render() {
    const {
      title,
      subtitle,
      onClose,
      showBackButton,
      onBackButtonClick,
      backButtonStyles,
      backButtonString,
      onCancel,
      cancelText,
      onSubmit,
      submitText,
      disabled,
      headerCloseText,
      hideCancel
    } = this.props;
    const tabSubmitText = this.getTabSubmitText();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement(_pageContainerHeader.default, {
      title: title,
      subtitle: subtitle,
      onClose: onClose,
      showBackButton: showBackButton,
      onBackButtonClick: onBackButtonClick,
      backButtonStyles: backButtonStyles,
      backButtonString: backButtonString,
      tabs: this.renderTabs(),
      headerCloseText: headerCloseText
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__bottom"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.renderContent()), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: onCancel,
      cancelText: cancelText,
      hideCancel: hideCancel,
      onSubmit: onSubmit,
      submitText: tabSubmitText || submitText,
      disabled: disabled
    })));
  }

}

exports.default = PageContainer;

_defineProperty(PageContainer, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(PageContainer, "propTypes", {
  // PageContainerHeader props
  backButtonString: _propTypes.default.string,
  backButtonStyles: _propTypes.default.object,
  headerCloseText: _propTypes.default.string,
  onBackButtonClick: _propTypes.default.func,
  onClose: _propTypes.default.func,
  showBackButton: _propTypes.default.bool,
  subtitle: _propTypes.default.string,
  title: _propTypes.default.string.isRequired,
  // Tabs-related props
  defaultActiveTabIndex: _propTypes.default.number,
  tabsComponent: _propTypes.default.node,
  // Content props
  contentComponent: _propTypes.default.node,
  // PageContainerFooter props
  cancelText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  hideCancel: _propTypes.default.bool,
  onCancel: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  submitText: _propTypes.default.string
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js", {"./popover.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\popover.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\popover\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popover = _interopRequireDefault(require("./popover.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _popover.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\popover.component.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\popover\popover.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../box"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const defaultHeaderProps = {
  padding: [6, 4, 4],
  display: 'flex',
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
  backgroundColor: _designSystem.COLORS.BACKGROUND_DEFAULT,
  borderRadius: 'xl'
};
const defaultContentProps = {
  display: 'flex',
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
  justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_START,
  alignItems: _designSystem.ALIGN_ITEMS.STRETCH,
  borderRadius: 'xl'
};
const defaultFooterProps = {
  display: 'flex',
  justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN,
  padding: [4, 6, 6]
};

const Popover = ({
  title,
  subtitle = '',
  children,
  footer,
  footerClassName,
  onBack,
  onClose,
  className,
  contentClassName,
  showArrow,
  CustomBackground,
  popoverRef,
  centerTitle,
  headerProps = defaultHeaderProps,
  contentProps = defaultContentProps,
  footerProps = defaultFooterProps
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const showHeader = title || onBack || subtitle || onClose;

  const Header = () => {
    return /*#__PURE__*/_react.default.createElement(_box.default, _extends({}, defaultHeaderProps, headerProps, {
      className: "popover-header"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('popover-header__title', centerTitle ? 'center' : '')
    }, /*#__PURE__*/_react.default.createElement("h2", {
      title: "popover"
    }, onBack ? /*#__PURE__*/_react.default.createElement("button", {
      className: "fas fa-chevron-left popover-header__button",
      title: t('back'),
      onClick: onBack
    }) : null, title), onClose ? /*#__PURE__*/_react.default.createElement("button", {
      className: "fas fa-times popover-header__button",
      title: t('close'),
      "data-testid": "popover-close",
      onClick: onClose
    }) : null), subtitle ? /*#__PURE__*/_react.default.createElement("p", {
      className: "popover-header__subtitle"
    }, subtitle) : null);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-container"
  }, CustomBackground ? /*#__PURE__*/_react.default.createElement(CustomBackground, {
    onClose: onClose
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-bg",
    onClick: onClose
  }), /*#__PURE__*/_react.default.createElement("section", {
    className: (0, _classnames.default)('popover-wrap', className),
    ref: popoverRef
  }, showArrow ? /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-arrow"
  }) : null, showHeader && /*#__PURE__*/_react.default.createElement(Header, null), children ? /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('popover-content', contentClassName)
  }, defaultContentProps, contentProps), children) : null, footer ? /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('popover-footer', footerClassName)
  }, defaultFooterProps, footerProps), footer) : null));
};

Popover.propTypes = {
  /**
   * Show title of the popover
   */
  title: _propTypes.default.node,

  /**
   * Show subtitle label on popover
   */
  subtitle: _propTypes.default.string,

  /**
   * Show children content could be react child or text
   */
  children: _propTypes.default.node,

  /**
   * Show footer content could be react child or text
   */
  footer: _propTypes.default.node,

  /**
   * Add custom CSS class for footer
   */
  footerClassName: _propTypes.default.string,

  /**
   * onBack handler
   */
  onBack: _propTypes.default.func,

  /**
   * onClose handler
   */
  onClose: _propTypes.default.func,
  CustomBackground: _propTypes.default.func,

  /**
   * Add custom CSS class for content
   */
  contentClassName: _propTypes.default.string,

  /**
   * Add custom CSS class
   */
  className: _propTypes.default.string,

  /**
   * Check if component would show arror
   */
  showArrow: _propTypes.default.bool,

  /**
   * The ref of the popover-wrap element
   */
  popoverRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(window.Element)
  }),

  /**
   * Check if use centered title
   */
  centerTitle: _propTypes.default.bool,

  /**
   * Box props for the header
   */
  headerProps: _propTypes.default.shape({ ..._box.default.propTypes
  }),

  /**
   * Box props for the content
   */
  contentProps: _propTypes.default.shape({ ..._box.default.propTypes
  }),

  /**
   * Box props for the footer
   */
  footerProps: _propTypes.default.shape({ ..._box.default.propTypes
  })
};

class PopoverPortal extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "rootNode", document.getElementById('popover-content'));

    _defineProperty(this, "instanceNode", document.createElement('div'));
  }

  componentDidMount() {
    if (!this.rootNode) {
      return;
    }

    this.rootNode.appendChild(this.instanceNode);
  }

  componentWillUnmount() {
    if (!this.rootNode) {
      return;
    }

    this.rootNode.removeChild(this.instanceNode);
  }

  render() {
    const children = /*#__PURE__*/_react.default.createElement(Popover, this.props);

    return this.rootNode ? /*#__PURE__*/_reactDom.default.createPortal(children, this.instanceNode) : children;
  }

}

exports.default = PopoverPortal;

_defineProperty(PopoverPortal, "propTypes", Popover.propTypes);

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\pulse-loader\\index.js", {"./pulse-loader":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\pulse-loader\\pulse-loader.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\pulse-loader\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _pulseLoader.default;
  }
});

var _pulseLoader = _interopRequireDefault(require("./pulse-loader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\pulse-loader\\pulse-loader.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\pulse-loader\pulse-loader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PulseLoader;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PulseLoader() {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-one"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-two"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-three"
  }));
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\qr-code\\index.js", {"./qr-code":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\qr-code\\qr-code.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\qr-code\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _qrCode.default;
  }
});

var _qrCode = _interopRequireDefault(require("./qr-code"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\qr-code\\qr-code.js", {"../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../hooks/useCopyToClipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../icon/copy-icon.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\copy-icon.component.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","ethereumjs-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","qrcode-generator":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\qrcode-generator\\qrcode.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\qr-code\qr-code.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _qrcodeGenerator = _interopRequireDefault(require("qrcode-generator"));

var _reactRedux = require("react-redux");

var _ethereumjsUtil = require("ethereumjs-util");

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _copyIcon = _interopRequireDefault(require("../icon/copy-icon.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _reactRedux.connect)(mapStateToProps)(QrCodeView);

exports.default = _default;

function mapStateToProps(state) {
  const {
    buyView,
    warning
  } = state.appState;
  return {
    // Qr code is not fetched from state. 'message' and 'data' props are passed instead.
    buyView,
    warning
  };
}

function QrCodeView(props) {
  const {
    Qr,
    warning
  } = props;
  const {
    message,
    data
  } = Qr;
  const address = `${(0, _ethereumjsUtil.isHexPrefixed)(data) ? 'ethereum:' : ''}${(0, _hexstringUtils.toChecksumHexAddress)(data)}`;
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const t = (0, _useI18nContext.useI18nContext)();
  const qrImage = (0, _qrcodeGenerator.default)(4, 'M');
  qrImage.addData(address);
  qrImage.make();
  const header = message ? /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__header"
  }, message) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code"
  }, Array.isArray(message) ? /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__message-container"
  }, message.map((msg, index) => /*#__PURE__*/_react.default.createElement("div", {
    className: "qr_code__message",
    key: index
  }, msg))) : header, warning ? /*#__PURE__*/_react.default.createElement("span", {
    className: "qr-code__error"
  }, warning) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__wrapper",
    dangerouslySetInnerHTML: {
      __html: qrImage.createTableTag(4)
    }
  }), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    wrapperClassName: "qr-code__address-container__tooltip-wrapper",
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__address-container",
    onClick: () => {
      handleCopy((0, _hexstringUtils.toChecksumHexAddress)(data));
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__address"
  }, (0, _hexstringUtils.toChecksumHexAddress)(data)), /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-code__copy-icon"
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 11,
    className: "qr-code__copy-icon__svg",
    color: ""
  })))));
}

QrCodeView.propTypes = {
  warning: _propTypes.default.node,
  Qr: _propTypes.default.shape({
    message: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),
    data: _propTypes.default.string.isRequired
  }).isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\radio-group\\radio-group.component.js", {"../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../typography/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\radio-group\radio-group.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RadioGroup;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _typography = _interopRequireDefault(require("../typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Connector({
  isFirst,
  isLast
}) {
  if (isFirst) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "radio-group__column-start-connector"
    });
  } else if (isLast) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "radio-group__column-end-connector"
    });
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "radio-group__column-vertical-line"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "radio-group__column-horizontal-line"
  }));
}

Connector.propTypes = {
  isFirst: _propTypes.default.bool,
  isLast: _propTypes.default.bool
};

function RadioGroup({
  options,
  name,
  selectedValue,
  onChange
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const hasRecommendation = Boolean(options.find(option => option.recommended));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('radio-group', {
      'radio-group--has-recommendation': hasRecommendation
    })
  }, options.map((option, index) => {
    const checked = option.value === selectedValue;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "radio-group__column",
      key: `${name}-${option.value}`
    }, /*#__PURE__*/_react.default.createElement("label", {
      className: "radio-group__column-inner"
    }, hasRecommendation && /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.COLORS.SUCCESS_DEFAULT,
      className: "radio-group__column-recommended",
      variant: _designSystem.TYPOGRAPHY.H7
    }, option.recommended ? t('recommendedGasLabel') : ''), /*#__PURE__*/_react.default.createElement("div", {
      className: "radio-group__column-radio"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      name: name,
      checked: checked,
      value: option.value,
      onChange: () => onChange === null || onChange === void 0 ? void 0 : onChange(option.value)
    })), /*#__PURE__*/_react.default.createElement(Connector, {
      isFirst: index === 0,
      isLast: index === options.length - 1
    }), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: checked ? _designSystem.COLORS.TEXT_DEFAULT : _designSystem.COLORS.TEXT_MUTED,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      variant: _designSystem.TYPOGRAPHY.H7,
      className: "radio-group__column-label"
    }, option.label)));
  }));
}

RadioGroup.propTypes = {
  /**
   * Predefined options for radio group
   */
  options: _propTypes.default.array,

  /**
   * Show selected value
   */
  selectedValue: _propTypes.default.string,

  /**
   * Show name as label
   */
  name: _propTypes.default.string,

  /**
   * Handler for onChange
   */
  onChange: _propTypes.default.func
};
RadioGroup.defaultProps = {
  options: []
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\review-spending-cap\\review-spending-cap.js", {"../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\review-spending-cap\review-spending-cap.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReviewSpendingCap;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../contexts/i18n");

var _box = _interopRequireDefault(require("../box"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _typography = _interopRequireDefault(require("../typography"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ReviewSpendingCap({
  tokenName,
  currentTokenBalance,
  tokenValue,
  onEdit
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "review-spending-cap",
    borderRadius: _designSystem.SIZES.SM,
    paddingTop: 4,
    paddingRight: 4,
    paddingLeft: 4,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.FLEX_START,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    backgroundColor: _designSystem.COLORS.BACKGROUND_ALTERNATIVE,
    gap: 1
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    className: "review-spending-cap__heading"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "review-spending-cap__heading-title"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H6,
    boxProps: {
      display: _designSystem.DISPLAY.INLINE_BLOCK
    }
  }, t('customSpendingCap')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 2,
    display: _designSystem.DISPLAY.INLINE_BLOCK
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    interactive: true,
    position: "top",
    html: /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      color: _designSystem.COLORS.TEXT_ALTERNATIVE,
      className: "review-spending-cap__heading-title__tooltip"
    }, tokenValue > currentTokenBalance && t('warningTooltipText', [/*#__PURE__*/_react.default.createElement(_typography.default, {
      key: "tooltip-text",
      variant: _designSystem.TYPOGRAPHY.H7,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      color: _designSystem.COLORS.ERROR_DEFAULT
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-exclamation-circle"
    }), ' ', t('beCareful'))]), tokenValue === 0 && t('revokeSpendingCapTooltipText'))
  }, tokenValue > currentTokenBalance && /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-exclamation-triangle review-spending-cap__heading-title__tooltip__warning-icon"
  }), tokenValue === 0 && /*#__PURE__*/_react.default.createElement("i", {
    className: "far fa-question-circle review-spending-cap__heading-title__tooltip__question-icon"
  })))), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "review-spending-cap__heading-detail",
    textAlign: _designSystem.TEXT_ALIGN.END
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "review-spending-cap__heading-detail__button",
    type: "link",
    onClick: e => {
      e.preventDefault();
      onEdit();
    }
  }, t('edit')))), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: _designSystem.TYPOGRAPHY.H6,
    color: tokenValue > currentTokenBalance ? _designSystem.COLORS.ERROR_DEFAULT : _designSystem.COLORS.TEXT_DEFAULT,
    variant: _designSystem.TYPOGRAPHY.H6,
    marginBottom: 3
  }, tokenValue, " ", tokenName)));
}

ReviewSpendingCap.propTypes = {
  tokenName: _propTypes.default.string,
  currentTokenBalance: _propTypes.default.number,
  tokenValue: _propTypes.default.number,
  onEdit: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\index.js", {"./sender-to-recipient.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\sender-to-recipient\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _senderToRecipient.default;
  }
});

var _senderToRecipient = _interopRequireDefault(require("./sender-to-recipient.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.component.js", {"../../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../app/modals/nickname-popovers":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\index.js","../account-mismatch-warning/account-mismatch-warning.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\account-mismatch-warning\\account-mismatch-warning.component.js","../icon/icon-caret-right":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-caret-right.js","../identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","./sender-to-recipient.constants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.constants.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\sender-to-recipient\sender-to-recipient.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecipientWithAddress = RecipientWithAddress;
exports.default = SenderToRecipient;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _iconCaretRight = _interopRequireDefault(require("../icon/icon-caret-right"));

var _identicon = _interopRequireDefault(require("../identicon"));

var _util = require("../../../helpers/utils/util");

var _accountMismatchWarning = _interopRequireDefault(require("../account-mismatch-warning/account-mismatch-warning.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _nicknamePopovers = _interopRequireDefault(require("../../app/modals/nickname-popovers"));

var _senderToRecipient = require("./sender-to-recipient.constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const variantHash = {
  [_senderToRecipient.DEFAULT_VARIANT]: 'sender-to-recipient--default',
  [_senderToRecipient.CARDS_VARIANT]: 'sender-to-recipient--cards',
  [_senderToRecipient.FLAT_VARIANT]: 'sender-to-recipient--flat'
};

function SenderAddress({
  addressOnly,
  checksummedSenderAddress,
  senderName,
  onSenderClick,
  senderAddress,
  warnUserOnAccountMismatch
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [addressCopied, setAddressCopied] = (0, _react.useState)(false);

  let tooltipHtml = /*#__PURE__*/_react.default.createElement("p", null, t('copiedExclamation'));

  if (!addressCopied) {
    tooltipHtml = addressOnly ? /*#__PURE__*/_react.default.createElement("p", null, t('copyAddress')) : /*#__PURE__*/_react.default.createElement("p", null, (0, _util.shortenAddress)(checksummedSenderAddress), /*#__PURE__*/_react.default.createElement("br", null), t('copyAddress'));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('sender-to-recipient__party sender-to-recipient__party--sender'),
    onClick: () => {
      setAddressCopied(true);
      (0, _copyToClipboard.default)(checksummedSenderAddress);

      if (onSenderClick) {
        onSenderClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: (0, _hexstringUtils.toChecksumHexAddress)(senderAddress),
    diameter: 24
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    html: tooltipHtml,
    wrapperClassName: "sender-to-recipient__tooltip-wrapper",
    containerClassName: "sender-to-recipient__tooltip-container",
    onHidden: () => setAddressCopied(false)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, addressOnly ? /*#__PURE__*/_react.default.createElement("span", null, `${senderName || (0, _util.shortenAddress)(checksummedSenderAddress)}`) : senderName)), warnUserOnAccountMismatch && /*#__PURE__*/_react.default.createElement(_accountMismatchWarning.default, {
    address: senderAddress
  }));
}

SenderAddress.propTypes = {
  senderName: _propTypes.default.string,
  checksummedSenderAddress: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  senderAddress: _propTypes.default.string,
  onSenderClick: _propTypes.default.func,
  warnUserOnAccountMismatch: _propTypes.default.bool
};

function RecipientWithAddress({
  checksummedRecipientAddress,
  onRecipientClick,
  addressOnly,
  recipientNickname,
  recipientEns,
  recipientName
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [showNicknamePopovers, setShowNicknamePopovers] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__party sender-to-recipient__party--recipient sender-to-recipient__party--recipient-with-address",
    onClick: () => {
      setShowNicknamePopovers(true);

      if (onRecipientClick) {
        onRecipientClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: checksummedRecipientAddress,
    diameter: 24
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, addressOnly ? recipientNickname || recipientEns || (0, _util.shortenAddress)(checksummedRecipientAddress) : recipientNickname || recipientEns || recipientName || t('newContract'))), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
    onClose: () => setShowNicknamePopovers(false),
    address: checksummedRecipientAddress
  }) : null);
}

RecipientWithAddress.propTypes = {
  checksummedRecipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  recipientNickname: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func
};

function Arrow({
  variant
}) {
  return variant === _senderToRecipient.DEFAULT_VARIANT ? /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-circle"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-right sender-to-recipient__arrow-circle__icon"
  }))) : /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-container"
  }, /*#__PURE__*/_react.default.createElement(_iconCaretRight.default, null));
}

Arrow.propTypes = {
  variant: _propTypes.default.oneOf([_senderToRecipient.DEFAULT_VARIANT, _senderToRecipient.CARDS_VARIANT, _senderToRecipient.FLAT_VARIANT])
};

function SenderToRecipient({
  senderAddress,
  addressOnly,
  senderName,
  recipientNickname,
  recipientName,
  recipientEns,
  onRecipientClick,
  onSenderClick,
  recipientAddress,
  variant,
  warnUserOnAccountMismatch
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const checksummedSenderAddress = (0, _hexstringUtils.toChecksumHexAddress)(senderAddress);
  const checksummedRecipientAddress = (0, _hexstringUtils.toChecksumHexAddress)(recipientAddress);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('sender-to-recipient', variantHash[variant]),
    "data-testid": "sender-to-recipient"
  }, /*#__PURE__*/_react.default.createElement(SenderAddress, {
    checksummedSenderAddress: checksummedSenderAddress,
    addressOnly: addressOnly,
    senderName: senderName,
    onSenderClick: onSenderClick,
    senderAddress: senderAddress,
    warnUserOnAccountMismatch: warnUserOnAccountMismatch
  }), /*#__PURE__*/_react.default.createElement(Arrow, {
    variant: variant
  }), recipientAddress ? /*#__PURE__*/_react.default.createElement(RecipientWithAddress, {
    checksummedRecipientAddress: checksummedRecipientAddress,
    onRecipientClick: onRecipientClick,
    addressOnly: addressOnly,
    recipientNickname: recipientNickname,
    recipientEns: recipientEns,
    recipientName: recipientName
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__party sender-to-recipient__party--recipient"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-file-text-o"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, t('newContract'))));
}

SenderToRecipient.defaultProps = {
  variant: _senderToRecipient.DEFAULT_VARIANT,
  warnUserOnAccountMismatch: true
};
SenderToRecipient.propTypes = {
  senderName: _propTypes.default.string,
  senderAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  recipientAddress: _propTypes.default.string,
  recipientNickname: _propTypes.default.string,
  variant: _propTypes.default.oneOf([_senderToRecipient.DEFAULT_VARIANT, _senderToRecipient.CARDS_VARIANT, _senderToRecipient.FLAT_VARIANT]),
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func,
  onSenderClick: _propTypes.default.func,
  warnUserOnAccountMismatch: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\sender-to-recipient\sender-to-recipient.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FLAT_VARIANT = exports.DEFAULT_VARIANT = exports.CARDS_VARIANT = void 0;
// Component design variants
const DEFAULT_VARIANT = 'DEFAULT_VARIANT';
exports.DEFAULT_VARIANT = DEFAULT_VARIANT;
const CARDS_VARIANT = 'CARDS_VARIANT';
exports.CARDS_VARIANT = CARDS_VARIANT;
const FLAT_VARIANT = 'FLAT_VARIANT';
exports.FLAT_VARIANT = FLAT_VARIANT;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\show-hide-toggle\\index.js", {"./show-hide-toggle":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\show-hide-toggle\\show-hide-toggle.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\show-hide-toggle\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _showHideToggle.default;
  }
});

var _showHideToggle = _interopRequireDefault(require("./show-hide-toggle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\show-hide-toggle\\show-hide-toggle.js", {"../icon/icon-eye":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-eye.js","../icon/icon-eye-slash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon\\icon-eye-slash.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\show-hide-toggle\show-hide-toggle.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconEye = _interopRequireDefault(require("../icon/icon-eye"));

var _iconEyeSlash = _interopRequireDefault(require("../icon/icon-eye-slash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ShowHideToggle = ({
  id,
  shown,
  onChange,
  ariaLabelHidden,
  ariaLabelShown,
  className,
  'data-testid': dataTestId,
  disabled,
  title
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('show-hide-toggle', className)
  }, /*#__PURE__*/_react.default.createElement("input", {
    className: "show-hide-toggle__input",
    id: id,
    type: "checkbox",
    checked: shown,
    onChange: onChange,
    "data-testid": dataTestId,
    disabled: disabled
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: id,
    className: "show-hide-toggle__label",
    title: title
  }, shown ? /*#__PURE__*/_react.default.createElement(_iconEye.default, {
    ariaLabel: ariaLabelShown,
    className: "show-hide-toggle__icon"
  }) : /*#__PURE__*/_react.default.createElement(_iconEyeSlash.default, {
    ariaLabel: ariaLabelHidden,
    className: "show-hide-toggle__icon"
  })));
};

ShowHideToggle.propTypes = {
  /**
   * The id of the ShowHideToggle for htmlFor
   */
  id: _propTypes.default.string.isRequired,

  /**
   * If the ShowHideToggle is in the "shown" state or not
   */
  shown: _propTypes.default.bool.isRequired,

  /**
   * The onChange handler of the ShowHideToggle
   */
  onChange: _propTypes.default.func.isRequired,

  /**
   * The aria-label of the icon representing the "hidden" state
   */
  ariaLabelHidden: _propTypes.default.string.isRequired,

  /**
   * The aria-label of the icon representing the "shown" state
   */
  ariaLabelShown: _propTypes.default.string.isRequired,

  /**
   * An additional className to give the ShowHideToggle
   */
  className: _propTypes.default.string,

  /**
   * The data test id of the input
   */
  'data-testid': _propTypes.default.string,

  /**
   * Whether the input is disabled or not
   */
  disabled: _propTypes.default.bool,

  /**
   * The title for the toggle. This is shown in a tooltip on hover.
   */
  title: _propTypes.default.string
};
var _default = ShowHideToggle;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-icon\\index.js", {"./site-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-icon\\site-icon.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\site-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _siteIcon.default;
  }
});

var _siteIcon = _interopRequireDefault(require("./site-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-icon\\site-icon.js", {"../icon-border":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-border\\index.js","../icon-with-fallback":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\site-icon\site-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SiteIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _iconBorder = _interopRequireDefault(require("../icon-border"));

var _iconWithFallback = _interopRequireDefault(require("../icon-with-fallback"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SiteIcon({
  icon = null,
  name = '',
  size,
  className
}) {
  const iconSize = Math.floor(size * 0.75);
  return /*#__PURE__*/_react.default.createElement(_iconBorder.default, {
    size: size,
    className: className
  }, /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
    icon: icon,
    name: name,
    size: iconSize
  }));
}

SiteIcon.propTypes = {
  /**
   * Additional className to add to the root element of SiteIcon.
   */
  className: _propTypes.default.string,

  /**
   * The img src of the icon.
   * Used in IconWithFallback
   */
  icon: _propTypes.default.string,

  /**
   * The name of the icon also used for the alt tag of the image and fallback letter.
   * Used in IconWithFallback
   */
  name: _propTypes.default.string,

  /**
   * The size of the icon.
   * Used in IconWithFallback
   */
  size: _propTypes.default.number.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js", {"./site-origin":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\site-origin.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\site-origin\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _siteOrigin.default;
  }
});

var _siteOrigin = _interopRequireDefault(require("./site-origin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\site-origin\\site-origin.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../chip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\chip\\index.js","../icon-with-fallback":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\site-origin\site-origin.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SiteOrigin;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _chip = _interopRequireDefault(require("../chip"));

var _iconWithFallback = _interopRequireDefault(require("../icon-with-fallback"));

var _designSystem = require("../../../helpers/constants/design-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SiteOrigin({
  siteOrigin,
  iconSrc,
  iconName,
  chip,
  className,
  title,
  leftIcon,
  rightIcon
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('site-origin', className),
    title: title
  }, chip ? /*#__PURE__*/_react.default.createElement(_chip.default, {
    borderColor: _designSystem.COLORS.BORDER_MUTED,
    label: siteOrigin,
    maxContent: false,
    leftIcon: leftIcon || /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
      icon: iconSrc,
      name: iconName,
      size: 24
    }),
    rightIcon: rightIcon
  }) : /*#__PURE__*/_react.default.createElement("span", null, siteOrigin));
}

SiteOrigin.propTypes = {
  /**
   * The origin of the site generally the URL
   */
  siteOrigin: _propTypes.default.string.isRequired,

  /**
   * Icon name is used for the fallback icon and will display the first letter of the string
   * when iconSrc errors or is not provided.
   */
  iconName: _propTypes.default.string,

  /**
   * The image src of the icon
   */
  iconSrc: _propTypes.default.string,

  /**
   * Additional className added to the root html element
   */
  className: _propTypes.default.string,

  /**
   * title specifies extra information and is added to a title attribute added to the root html element
   * It is most often shown as a tooltip text when the mouse moves over the element.
   */
  title: _propTypes.default.string,

  /**
   * Whether the SiteOrigin is displayed as a chip or plain text.
   * if false iconSrc and iconName props will not be used.
   */
  chip: _propTypes.default.bool,

  /**
   * The icon to display on the left side of the chip. If not provided, the iconSrc and iconName will be used.
   */
  leftIcon: _propTypes.default.node,

  /**
   * The icon to display on the right side of the chip.
   */
  rightIcon: _propTypes.default.node
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\snackbar\\index.js", {"./snackbar.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\snackbar\\snackbar.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\snackbar\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _snackbar.default;
  }
});

var _snackbar = _interopRequireDefault(require("./snackbar.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\snackbar\\snackbar.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\snackbar\snackbar.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Snackbar = ({
  className = '',
  content
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('snackbar', className)
  }, content);
};

Snackbar.propTypes = {
  className: _propTypes.default.string,
  content: _propTypes.default.string.isRequired
};
var _default = Snackbar;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\index.js", {"./spinner.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\spinner.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\spinner\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spinner = _interopRequireDefault(require("./spinner.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _spinner.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\spinner\\spinner.component.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\spinner\spinner.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Spinner = ({
  className = '',
  color = 'var(--color-text-default)'
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: `spinner ${className}`
  }, /*#__PURE__*/_react.default.createElement("svg", {
    className: "lds-spinner",
    width: "100%",
    height: "100%",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    viewBox: "0 0 100 100",
    preserveAspectRatio: "xMidYMid",
    style: {
      background: 'none'
    }
  }, /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(0 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.9166666666666666s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(30 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.8333333333333334s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(60 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.75s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(90 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.6666666666666666s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(120 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.5833333333333334s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(150 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.5s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(180 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.4166666666666667s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(210 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.3333333333333333s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(240 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.25s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(270 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.16666666666666666s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(300 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "-0.08333333333333333s",
    repeatCount: "indefinite"
  }))), /*#__PURE__*/_react.default.createElement("g", {
    transform: "rotate(330 50 50)"
  }, /*#__PURE__*/_react.default.createElement("rect", {
    x: 45,
    y: 0,
    rx: 0,
    ry: 0,
    width: 10,
    height: 30,
    fill: color
  }, /*#__PURE__*/_react.default.createElement("animate", {
    attributeName: "opacity",
    values: "1;0",
    dur: "1s",
    begin: "0s",
    repeatCount: "indefinite"
  })))));
};

Spinner.propTypes = {
  className: _propTypes.default.string,
  color: _propTypes.default.string
};
var _default = Spinner;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\dropdown-tab\\dropdown-tab.js", {"../../dropdown":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\dropdown-tab\dropdown-tab.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownTab = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dropdown = _interopRequireDefault(require("../../dropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DropdownTab = props => {
  const {
    activeClassName,
    className,
    'data-testid': dataTestId,
    isActive,
    onClick,
    onChange,
    tabIndex,
    options,
    selectedOption
  } = props;
  return /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)('tab', className, {
      'tab--active': isActive,
      [activeClassName]: activeClassName && isActive
    }),
    "data-testid": dataTestId,
    onClick: event => {
      event.preventDefault();
      onClick(tabIndex);
    }
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    options: options,
    selectedOption: selectedOption,
    onChange: onChange
  }));
};

exports.DropdownTab = DropdownTab;
DropdownTab.propTypes = {
  activeClassName: _propTypes.default.string,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  isActive: _propTypes.default.bool,
  // required, but added using React.cloneElement
  options: _propTypes.default.arrayOf(_propTypes.default.exact({
    name: _propTypes.default.string,
    value: _propTypes.default.string.isRequired
  })).isRequired,
  selectedOption: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onClick: _propTypes.default.func,
  tabIndex: _propTypes.default.number // required, but added using React.cloneElement

};
DropdownTab.defaultProps = {
  activeClassName: undefined,
  className: undefined,
  onChange: undefined,
  onClick: undefined,
  selectedOption: undefined
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\dropdown-tab\\index.js", {"./dropdown-tab":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\dropdown-tab\\dropdown-tab.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\dropdown-tab\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dropdownTab = require("./dropdown-tab");

var _default = _dropdownTab.DropdownTab;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\index.js", {"./dropdown-tab":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\dropdown-tab\\index.js","./tab":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tab\\index.js","./tabs.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tabs.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DropdownTab", {
  enumerable: true,
  get: function () {
    return _dropdownTab.default;
  }
});
Object.defineProperty(exports, "Tab", {
  enumerable: true,
  get: function () {
    return _tab.default;
  }
});
Object.defineProperty(exports, "Tabs", {
  enumerable: true,
  get: function () {
    return _tabs.default;
  }
});

var _tabs = _interopRequireDefault(require("./tabs.component"));

var _tab = _interopRequireDefault(require("./tab"));

var _dropdownTab = _interopRequireDefault(require("./dropdown-tab"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tab\\index.js", {"./tab.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tab\\tab.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\tab\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tab = _interopRequireDefault(require("./tab.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _tab.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tab\\tab.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\tab\tab.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Tab = props => {
  const {
    activeClassName,
    className,
    'data-testid': dataTestId,
    isActive,
    name,
    onClick,
    tabIndex
  } = props;
  return /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)('tab', className, {
      'tab--active': isActive,
      [activeClassName]: activeClassName && isActive
    }),
    "data-testid": dataTestId,
    onClick: event => {
      event.preventDefault();
      onClick(tabIndex);
    }
  }, /*#__PURE__*/_react.default.createElement("button", null, name));
};

Tab.propTypes = {
  activeClassName: _propTypes.default.string,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  isActive: _propTypes.default.bool,
  // required, but added using React.cloneElement
  name: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func,
  tabIndex: _propTypes.default.number // required, but added using React.cloneElement

};
Tab.defaultProps = {
  activeClassName: undefined,
  className: undefined,
  onClick: undefined
};
var _default = Tab;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tabs\\tabs.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tabs\tabs.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Tabs extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      activeTabIndex: Math.max(this._findChildByName(this.props.defaultActiveTabName), 0)
    });
  }

  handleTabClick(tabIndex, tabName) {
    const {
      onTabClick
    } = this.props;
    const {
      activeTabIndex
    } = this.state;

    if (tabIndex !== activeTabIndex) {
      this.setState({
        activeTabIndex: tabIndex
      }, () => {
        if (onTabClick) {
          onTabClick(tabName);
        }
      });
    }
  }

  renderTabs() {
    const numberOfTabs = _react.default.Children.count(this._getValidChildren());

    return _react.default.Children.map(this._getValidChildren(), (child, index) => {
      const tabName = child === null || child === void 0 ? void 0 : child.props.name;
      return child && /*#__PURE__*/_react.default.cloneElement(child, {
        onClick: idx => this.handleTabClick(idx, tabName),
        tabIndex: index,
        isActive: numberOfTabs > 1 && index === this.state.activeTabIndex
      });
    });
  }

  renderActiveTabContent() {
    const children = this._getValidChildren();

    const {
      activeTabIndex
    } = this.state;

    if (Array.isArray(children) && !children[activeTabIndex] || !Array.isArray(children) && activeTabIndex !== 0) {
      throw new Error(`Tab at index '${activeTabIndex}' does not exist`);
    }

    return children[activeTabIndex] ? children[activeTabIndex].props.children : children.props.children;
  }

  render() {
    const {
      tabsClassName,
      subHeader
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "tabs"
    }, /*#__PURE__*/_react.default.createElement("ul", {
      className: (0, _classnames.default)('tabs__list', tabsClassName)
    }, this.renderTabs()), subHeader, /*#__PURE__*/_react.default.createElement("div", {
      className: "tabs__content"
    }, this.renderActiveTabContent()));
  }
  /**
   * Returns the index of the child with the given name
   *
   * @param {string} name - the name to search for
   * @returns {number} the index of the child with the given name
   * @private
   */


  _findChildByName(name) {
    return this._getValidChildren().findIndex(c => (c === null || c === void 0 ? void 0 : c.props.name) === name);
  } // This ignores any 'null' child elements that are a result of a conditional
  // based on a feature flag setting.


  _getValidChildren() {
    return _react.default.Children.toArray(this.props.children).filter(Boolean);
  }

}

exports.default = Tabs;

_defineProperty(Tabs, "defaultProps", {
  defaultActiveTabName: null,
  onTabClick: null,
  tabsClassName: undefined,
  subHeader: null
});

_defineProperty(Tabs, "propTypes", {
  defaultActiveTabName: _propTypes.default.string,
  onTabClick: _propTypes.default.func,
  children: _propTypes.default.node.isRequired,
  tabsClassName: _propTypes.default.string,
  subHeader: _propTypes.default.node
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js", {"./text-field.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\text-field.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\text-field\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _textField = _interopRequireDefault(require("./text-field.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _textField.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\text-field.component.js", {"@material-ui/core/TextField":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@material-ui\\core\\TextField\\index.js","@material-ui/core/styles":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@material-ui\\core\\styles\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\text-field\text-field.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const inputLabelBase = {
  transform: 'none',
  transition: 'none',
  position: 'initial',
  color: 'var(--color-text-default)'
};
const styles = {
  materialLabel: {
    '&$materialFocused': {
      color: 'var(--color-text-alternative)'
    },
    '&$materialError': {
      color: 'var(--color-text-alternative)'
    },
    fontWeight: '400',
    color: 'var(--color-text-alternative)'
  },
  materialFocused: {},
  materialUnderline: {
    '&:before': {
      borderBottom: '1px solid var(--color-text-default) !important' // Visible bottom border

    },
    '&:after': {
      borderBottom: `2px solid var(--color-primary-default)` // Animated bottom border

    }
  },
  materialError: {},
  materialWhitePaddedRoot: {
    color: 'var(--color-text-alternative)'
  },
  materialWhitePaddedInput: {
    padding: '8px',
    '&::placeholder': {
      color: 'var(--color-text-alternative)'
    }
  },
  materialWhitePaddedFocused: {
    color: 'var(--color-background-default)'
  },
  materialWhitePaddedUnderline: {
    '&:after': {
      borderBottom: '2px solid var(--color-background-default)' // @TODO: Replace with border-muted ?

    }
  },
  // Non-material styles
  formLabel: {
    '&$formLabelFocused': {
      color: 'var(--color-text-alternative)'
    },
    '&$materialError': {
      color: 'var(--color-text-alternative)'
    }
  },
  formLabelFocused: {},
  inputFocused: {},
  inputRoot: {
    'label + &': {
      marginTop: '9px'
    },
    backgroundColor: 'var(--color-background-default)',
    border: '1px solid var(--color-border-default)',
    color: 'var(--color-text-default)',
    height: '48px',
    borderRadius: '6px',
    padding: '0 16px',
    display: 'flex',
    alignItems: 'center',
    '&$inputFocused': {
      border: '1px solid var(--color-primary-default)'
    }
  },
  largeInputLabel: { ...inputLabelBase,
    fontSize: '1rem'
  },
  inputLabel: { ...inputLabelBase,
    fontSize: '.75rem'
  },
  inputMultiline: {
    lineHeight: 'initial !important'
  }
};

const getMaterialThemeInputProps = ({
  dir,
  classes: {
    materialLabel,
    materialFocused,
    materialError,
    materialUnderline
  },
  startAdornment,
  endAdornment,
  min,
  max,
  autoComplete
}) => ({
  InputLabelProps: {
    classes: {
      root: materialLabel,
      focused: materialFocused,
      error: materialError
    }
  },
  InputProps: {
    startAdornment,
    endAdornment,
    classes: {
      underline: materialUnderline
    },
    inputProps: {
      dir,
      min,
      max,
      autoComplete
    }
  }
});

const getMaterialWhitePaddedThemeInputProps = ({
  dir,
  classes: {
    materialWhitePaddedRoot,
    materialWhitePaddedFocused,
    materialWhitePaddedInput,
    materialWhitePaddedUnderline
  },
  startAdornment,
  endAdornment,
  min,
  max,
  autoComplete
}) => ({
  InputProps: {
    startAdornment,
    endAdornment,
    classes: {
      root: materialWhitePaddedRoot,
      focused: materialWhitePaddedFocused,
      input: materialWhitePaddedInput,
      underline: materialWhitePaddedUnderline
    },
    inputProps: {
      dir,
      min,
      max,
      autoComplete
    }
  }
});

const getBorderedThemeInputProps = ({
  dir,
  classes: {
    formLabel,
    formLabelFocused,
    materialError,
    largeInputLabel,
    inputLabel,
    inputRoot,
    input,
    inputFocused
  },
  largeLabel,
  startAdornment,
  endAdornment,
  min,
  max,
  autoComplete
}) => ({
  InputLabelProps: {
    shrink: true,
    className: largeLabel ? largeInputLabel : inputLabel,
    classes: {
      root: formLabel,
      focused: formLabelFocused,
      error: materialError
    }
  },
  InputProps: {
    startAdornment,
    endAdornment,
    disableUnderline: true,
    classes: {
      root: inputRoot,
      input,
      focused: inputFocused
    },
    inputProps: {
      dir,
      min,
      max,
      autoComplete
    }
  }
});

const themeToInputProps = {
  material: getMaterialThemeInputProps,
  bordered: getBorderedThemeInputProps,
  'material-white-padded': getMaterialWhitePaddedThemeInputProps
};

const TextField = ({
  'data-testid': dataTestId,
  error,
  classes,
  theme,
  startAdornment,
  endAdornment,
  largeLabel,
  dir,
  min,
  max,
  autoComplete,
  onPaste,
  ...textFieldProps
}) => {
  const inputProps = themeToInputProps[theme]({
    classes,
    startAdornment,
    endAdornment,
    largeLabel,
    dir,
    min,
    max,
    autoComplete
  });

  if (onPaste || dataTestId) {
    if (!inputProps.InputProps) {
      inputProps.InputProps = {};
    }

    if (!inputProps.InputProps.inputProps) {
      inputProps.InputProps.inputProps = {};
    }

    inputProps.InputProps.inputProps.onPaste = onPaste;
    inputProps.InputProps.inputProps['data-testid'] = dataTestId;
  }

  return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({
    error: Boolean(error),
    helperText: error
  }, inputProps, textFieldProps));
};

TextField.defaultProps = {
  error: null,
  dir: 'auto',
  theme: 'bordered'
};
TextField.propTypes = {
  /**
   * A test ID that gets set on the input element
   */
  'data-testid': _propTypes.default.string,

  /**
   * Show error message
   */
  error: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),

  /**
   * Add custom CSS class
   */
  classes: _propTypes.default.object,
  dir: _propTypes.default.string,

  /**
   * Give theme to the text field
   */
  theme: _propTypes.default.oneOf(['bordered', 'material', 'material-white-padded']),
  startAdornment: _propTypes.default.element,
  endAdornment: _propTypes.default.element,

  /**
   * Show large label
   */
  largeLabel: _propTypes.default.bool,

  /**
   * Define min number input
   */
  min: _propTypes.default.number,

  /**
   * Define max number input
   */
  max: _propTypes.default.number,

  /**
   * Show auto complete text
   */
  autoComplete: _propTypes.default.string,
  onPaste: _propTypes.default.func
};

var _default = (0, _styles.withStyles)(styles)(TextField);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\textarea\\textarea.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\textarea\textarea.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _designSystem = require("../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../box"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const TextArea = ({
  className,
  value,
  onChange,
  resize = _designSystem.RESIZE.BOTH,
  scrollable = false,
  height,
  boxProps,
  ...props
}) => {
  const textAreaClassnames = (0, _classnames.default)('textarea', className, `textarea--resize-${resize}`, {
    'textarea--scrollable': scrollable,
    'textarea--not-scrollable': !scrollable
  });
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    backgroundColor: _designSystem.COLORS.BACKGROUND_DEFAULT,
    borderColor: _designSystem.COLORS.BORDER_DEFAULT,
    borderRadius: _designSystem.SIZES.SM,
    borderStyle: _designSystem.BORDER_STYLE.SOLID,
    padding: 4,
    width: _designSystem.BLOCK_SIZES.FULL
  }, boxProps), boxClassName => /*#__PURE__*/_react.default.createElement("textarea", _extends({
    required: true,
    style: {
      height
    },
    className: (0, _classnames.default)(boxClassName, textAreaClassnames),
    value,
    onChange
  }, props)));
};

TextArea.propTypes = {
  /**
   * The height of the Textarea component. Accepts any number, px or % value
   */
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Optional additional className to add to the Textarea component
   */
  className: _propTypes.default.string,

  /**
   * Value is the text of the TextArea component
   */
  value: _propTypes.default.string,

  /**
   * The onChange function of the textarea
   */
  onChange: _propTypes.default.func,

  /**
   * Resize is the resize capability of the textarea accepts all valid css values
   * Defaults to "both"
   */
  resize: _propTypes.default.oneOf(Object.values(_designSystem.RESIZE)),

  /**
   * Whether the Textarea should be scrollable. Applies overflow-y: scroll to the textarea
   * Defaults to false
   */
  scrollable: _propTypes.default.bool,

  /**
   * The Textarea component accepts all Box component props inside the boxProps object
   */
  boxProps: _propTypes.default.shape({ ..._box.default.propTypes
  })
};
var _default = TextArea;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\toggle-button\\index.js", {"./toggle-button.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\toggle-button\\toggle-button.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\toggle-button\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toggleButton = _interopRequireDefault(require("./toggle-button.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _toggleButton.default;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\toggle-button\\toggle-button.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-toggle-button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-toggle-button\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\toggle-button\toggle-button.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactToggleButton = _interopRequireDefault(require("react-toggle-button"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const trackStyle = {
  width: '40px',
  height: '24px',
  padding: '0px',
  borderRadius: '26px',
  border: '2px solid var(--color-primary-default)',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
};
const offTrackStyle = { ...trackStyle,
  border: '2px solid var(--color-border-default)'
};
const thumbStyle = {
  width: '18px',
  height: '18px',
  display: 'flex',
  boxShadow: 'none',
  alignSelf: 'center',
  borderRadius: '50%',
  position: 'relative'
};
const colors = {
  activeThumb: {
    base: '#037DD6'
  },
  inactiveThumb: {
    base: '#6A737D'
  },
  active: {
    base: '#F2F4F6',
    hover: '#F2F4F6'
  },
  inactive: {
    base: '#F2F4F6',
    hover: '#F2F4F6'
  }
};

const ToggleButton = props => {
  const {
    value,
    onToggle,
    offLabel,
    onLabel,
    disabled,
    className
  } = props;
  const modifier = value ? 'on' : 'off';
  return /*#__PURE__*/_react.default.createElement("label", {
    tabIndex: "0",
    onKeyDown: e => {
      if (e.key === 'Enter') {
        onToggle(value);
      }
    },
    className: (0, _classnames.default)('toggle-button', `toggle-button--${modifier}`, {
      'toggle-button--disabled': disabled
    }, className)
  }, /*#__PURE__*/_react.default.createElement(_reactToggleButton.default, {
    value: value,
    onToggle: disabled ? undefined : onToggle,
    activeLabel: "",
    inactiveLabel: "",
    trackStyle: value ? trackStyle : offTrackStyle,
    thumbStyle: thumbStyle,
    thumbAnimateRange: [3, 18],
    colors: colors
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "toggle-button__status"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "toggle-button__label-off"
  }, offLabel), /*#__PURE__*/_react.default.createElement("span", {
    className: "toggle-button__label-on"
  }, onLabel)));
};

ToggleButton.propTypes = {
  /**
   * ToggleButton value
   */
  value: _propTypes.default.bool,

  /**
   * The onChange handler of the ToggleButton
   */
  onToggle: _propTypes.default.func,

  /**
   * Label text when toggle is off
   */
  offLabel: _propTypes.default.string,

  /**
   * Label text when toggle is on
   */
  onLabel: _propTypes.default.string,

  /**
   * Disables ToggleButton if true. Set to false as default
   */
  disabled: _propTypes.default.bool,

  /**
   * Additional className to add to the ToggleButton
   */
  className: _propTypes.default.string
};
var _default = ToggleButton;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js", {"./token-balance":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\token-balance.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\token-balance\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenBalance.default;
  }
});

var _tokenBalance = _interopRequireDefault(require("./token-balance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\token-balance.js", {"../../../hooks/useTokenTracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\token-balance\token-balance.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenBalance;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _currencyDisplay = _interopRequireDefault(require("../currency-display"));

var _useTokenTracker = require("../../../hooks/useTokenTracker");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TokenBalance({
  className,
  token
}) {
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const {
    string,
    symbol
  } = tokensWithBalances[0] || {};
  return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
    className: className,
    displayValue: string || '',
    suffix: symbol || ''
  });
}

TokenBalance.propTypes = {
  className: _propTypes.default.string,
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};
TokenBalance.defaultProps = {
  className: undefined
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\index.js", {"./token-input.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\token-input.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\token-input\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenInput.default;
  }
});

var _tokenInput = _interopRequireDefault(require("./token-input.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\token-input.component.js", {"../../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../currency-display":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../unit-input":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\unit-input\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\token-input\token-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _unitInput = _interopRequireDefault(require("../unit-input"));

var _currencyDisplay = _interopRequireDefault(require("../currency-display"));

var _conversions = require("../../../helpers/utils/conversions.util");

var _conversion = require("../../../../shared/modules/conversion.utils");

var _common = require("../../../helpers/constants/common");

var _util = require("../../../../app/scripts/lib/util");

var _stringUtils = require("../../../../shared/modules/string-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Component that allows user to enter token values as a number, and props receive a converted
 * hex value. props.value, used as a default or forced value, should be a hex value, which
 * gets converted into a decimal value.
 */
class TokenInput extends _react.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleChange", (decimalValue, applyDecimals = false) => {
      const {
        token: {
          decimals
        } = {},
        onChange
      } = this.props;
      let newDecimalValue = decimalValue;

      if (decimals && decimalValue && applyDecimals) {
        newDecimalValue = new _bignumber.default(decimalValue, 10).toFixed(decimals);
      }

      const multiplier = Math.pow(10, Number(decimals || 0));
      const hexValue = (0, _conversion.multiplyCurrencies)(newDecimalValue || 0, multiplier, {
        multiplicandBase: 10,
        multiplierBase: 10,
        toNumericBase: 'hex'
      });
      this.setState({
        hexValue,
        decimalValue
      });
      onChange(hexValue);
    });

    _defineProperty(this, "handleBlur", decimalValue => {
      this.handleChange(decimalValue, true);
    });

    const {
      value: _hexValue
    } = props;

    const _decimalValue = _hexValue ? this.getValue(props) : 0;

    this.state = {
      decimalValue: _decimalValue,
      hexValue: _hexValue
    };
  }

  componentDidUpdate(prevProps) {
    const {
      value: prevPropsHexValue
    } = prevProps;
    const {
      value: propsHexValue
    } = this.props;
    const {
      hexValue: stateHexValue
    } = this.state;

    if (prevPropsHexValue !== propsHexValue && propsHexValue !== stateHexValue) {
      const decimalValue = this.getValue(this.props);
      this.setState({
        hexValue: propsHexValue,
        decimalValue
      });
    }
  }

  getValue(props) {
    const {
      value: hexValue,
      token: {
        decimals,
        symbol
      } = {}
    } = props;
    const multiplier = Math.pow(10, Number(decimals || 0));
    const decimalValueString = (0, _conversion.conversionUtil)((0, _util.addHexPrefix)(hexValue), {
      fromNumericBase: 'hex',
      toNumericBase: 'dec',
      toCurrency: symbol,
      conversionRate: multiplier,
      invertConversionRate: true
    });
    return Number(decimalValueString) ? decimalValueString : '';
  }

  renderConversionComponent() {
    var _tokenExchangeRates$e;

    const {
      tokenExchangeRates,
      showFiat,
      currentCurrency,
      hideConversion,
      token,
      tokens
    } = this.props;
    const {
      decimalValue
    } = this.state;
    const existingToken = tokens.find(({
      address
    }) => (0, _stringUtils.isEqualCaseInsensitive)(address, token.address));
    const tokenExchangeRate = (_tokenExchangeRates$e = tokenExchangeRates === null || tokenExchangeRates === void 0 ? void 0 : tokenExchangeRates[existingToken === null || existingToken === void 0 ? void 0 : existingToken.address]) !== null && _tokenExchangeRates$e !== void 0 ? _tokenExchangeRates$e : 0;
    let currency, numberOfDecimals;

    if (hideConversion) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "currency-input__conversion-component"
      }, this.context.t('noConversionRateAvailable'));
    }

    if (showFiat) {
      // Display Fiat
      currency = currentCurrency;
      numberOfDecimals = 2;
    } else {
      // Display ETH
      currency = _common.ETH;
      numberOfDecimals = 6;
    }

    const decimalEthValue = decimalValue * tokenExchangeRate || 0;
    const hexWeiValue = (0, _conversions.getWeiHexFromDecimalValue)({
      value: decimalEthValue,
      fromCurrency: _common.ETH,
      fromDenomination: _common.ETH
    });
    return tokenExchangeRate ? /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "currency-input__conversion-component",
      currency: currency,
      value: hexWeiValue,
      numberOfDecimals: numberOfDecimals
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "currency-input__conversion-component"
    }, this.context.t('noConversionRateAvailable'));
  }

  render() {
    const {
      token,
      ...restProps
    } = this.props;
    const {
      decimalValue
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_unitInput.default, _extends({}, restProps, {
      suffix: token.symbol,
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      value: decimalValue
    }), this.renderConversionComponent());
  }

}

exports.default = TokenInput;

_defineProperty(TokenInput, "contextTypes", {
  t: _propTypes.default.func
});

_defineProperty(TokenInput, "propTypes", {
  currentCurrency: _propTypes.default.string,
  onChange: _propTypes.default.func,
  value: _propTypes.default.string,
  showFiat: _propTypes.default.bool,
  hideConversion: _propTypes.default.bool,
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired,
  tokenExchangeRates: _propTypes.default.object,
  tokens: _propTypes.default.array.isRequired
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\token-input.container.js", {"../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./token-input.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-input\\token-input.component.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\token-input\token-input.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _selectors = require("../../../selectors");

var _tokenInput = _interopRequireDefault(require("./token-input.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      currentCurrency,
      tokens
    }
  } = state;
  return {
    currentCurrency,
    tokenExchangeRates: (0, _selectors.getTokenExchangeRates)(state),
    hideConversion: !(0, _selectors.getShouldShowFiat)(state),
    tokens
  };
};

const TokenInputContainer = (0, _reactRedux.connect)(mapStateToProps)(_tokenInput.default);
TokenInputContainer.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};
var _default = TokenInputContainer;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js", {"./tooltip":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tooltip\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tooltip.default;
  }
});

var _tooltip = _interopRequireDefault(require("./tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-tippy":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-tippy\\dist\\react-tippy.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\tooltip\tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactTippy = require("react-tippy");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Tooltip extends _react.PureComponent {
  render() {
    const {
      arrow,
      children,
      containerClassName,
      disabled,
      position,
      html,
      interactive,
      size,
      title,
      trigger,
      onHidden,
      offset,
      open,
      wrapperClassName,
      style,
      theme,
      tabIndex,
      tag
    } = this.props;

    if (!title && !html) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: wrapperClassName
      }, children);
    }

    return /*#__PURE__*/_react.default.createElement(tag, {
      className: wrapperClassName
    }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
      arrow: arrow,
      className: containerClassName,
      disabled: disabled,
      hideOnClick: false,
      html: html,
      interactive: interactive,
      onHidden: onHidden,
      position: position,
      size: size,
      offset: offset,
      style: style,
      title: disabled ? '' : title,
      trigger: trigger,
      open: open,
      theme: `tippy-tooltip--mm-custom ${theme}` // Required for correct theming
      ,
      tabIndex: tabIndex || 0,
      tag: tag
    }, children));
  }

}

exports.default = Tooltip;

_defineProperty(Tooltip, "defaultProps", {
  arrow: true,
  children: null,
  containerClassName: '',
  html: null,
  interactive: undefined,
  onHidden: null,
  position: 'left',
  offset: 0,
  open: undefined,
  size: 'small',
  title: null,
  trigger: 'mouseenter focus',
  wrapperClassName: undefined,
  theme: '',
  tag: 'div'
});

_defineProperty(Tooltip, "propTypes", {
  arrow: _propTypes.default.bool,
  children: _propTypes.default.node,
  containerClassName: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  html: _propTypes.default.node,
  interactive: _propTypes.default.bool,
  offset: _propTypes.default.number,
  onHidden: _propTypes.default.func,
  open: _propTypes.default.bool,
  position: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),
  size: _propTypes.default.oneOf(['small', 'regular', 'big']),
  title: _propTypes.default.string,
  trigger: _propTypes.default.any,
  wrapperClassName: _propTypes.default.string,
  style: _propTypes.default.object,
  theme: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  tag: _propTypes.default.string
});


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\truncated-definition-list\\index.js", {"./truncated-definition-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\truncated-definition-list\\truncated-definition-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\truncated-definition-list\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _truncatedDefinitionList.default;
  }
});

var _truncatedDefinitionList = _interopRequireDefault(require("./truncated-definition-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\truncated-definition-list\\truncated-definition-list.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../definition-list/definition-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\definition-list\\definition-list.js","../popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\truncated-definition-list\truncated-definition-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TruncatedDefinitionList;

var _lodash = require("lodash");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../box"));

var _button = _interopRequireDefault(require("../button"));

var _definitionList = _interopRequireDefault(require("../definition-list/definition-list"));

var _popover = _interopRequireDefault(require("../popover"));

var _useI18nContext = require("../../../hooks/useI18nContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TruncatedDefinitionList({
  dictionary,
  tooltips,
  prefaceKeys,
  title
}) {
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 6,
    padding: 4,
    paddingBottom: 3,
    borderRadius: _designSystem.SIZES.LG,
    borderColor: _designSystem.COLORS.BORDER_MUTED
  }, /*#__PURE__*/_react.default.createElement(_definitionList.default, {
    dictionary: (0, _lodash.pick)(dictionary, prefaceKeys),
    tooltips: tooltips
  }), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "truncated-definition-list__view-more",
    type: "link",
    onClick: () => setIsPopoverOpen(true)
  }, t('viewAllDetails'))), isPopoverOpen && /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    open: isPopoverOpen,
    onClose: () => setIsPopoverOpen(false),
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      style: {
        width: '50%'
      },
      onClick: () => setIsPopoverOpen(false)
    }, "Close"))
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: 6,
    paddingTop: 0
  }, /*#__PURE__*/_react.default.createElement(_definitionList.default, {
    gap: _designSystem.SIZES.MD,
    tooltips: tooltips,
    dictionary: dictionary
  }))));
}

TruncatedDefinitionList.propTypes = {
  dictionary: _definitionList.default.propTypes.dictionary,
  tooltips: _definitionList.default.propTypes.dictionary,
  title: _propTypes.default.string,
  prefaceKeys: _propTypes.default.arrayOf(_propTypes.default.string)
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js", {"./typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\typography\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _typography.default;
  }
});

var _typography = _interopRequireDefault(require("./typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\typography.js", {"../../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\typography\typography.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidTags = exports.ValidColors = void 0;
exports.default = Typography;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

var _box = _interopRequireWildcard(require("../box"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const {
  H6,
  H7,
  H8,
  H9
} = _designSystem.TYPOGRAPHY;
const ValidColors = [_designSystem.COLORS.TEXT_DEFAULT, _designSystem.COLORS.TEXT_ALTERNATIVE, _designSystem.COLORS.TEXT_MUTED, _designSystem.COLORS.OVERLAY_INVERSE, _designSystem.COLORS.PRIMARY_DEFAULT, _designSystem.COLORS.PRIMARY_INVERSE, _designSystem.COLORS.ERROR_DEFAULT, _designSystem.COLORS.ERROR_INVERSE, _designSystem.COLORS.SUCCESS_DEFAULT, _designSystem.COLORS.SUCCESS_INVERSE, _designSystem.COLORS.WARNING_DEFAULT, _designSystem.COLORS.WARNING_INVERSE, _designSystem.COLORS.INFO_DEFAULT, _designSystem.COLORS.INFO_INVERSE];
exports.ValidColors = ValidColors;
const ValidTags = ['dd', 'div', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'p', 'span', 'strong', 'ul', 'label'];
exports.ValidTags = ValidTags;

function Typography({
  variant = _designSystem.TYPOGRAPHY.Paragraph,
  color = _designSystem.COLORS.TEXT_DEFAULT,
  fontWeight = 'normal',
  fontStyle = 'normal',
  align,
  overflowWrap,
  title,
  as,
  margin,
  marginTop = 1,
  marginRight,
  marginBottom = 1,
  marginLeft,
  boxProps = {},
  className,
  children
}) {
  let Tag = as !== null && as !== void 0 ? as : variant;
  let strongTagFontWeight;

  if (Tag === 'strong') {
    strongTagFontWeight = _designSystem.FONT_WEIGHT.BOLD;
  }

  const computedClassName = (0, _classnames.default)('typography', className, `typography--${variant}`, `typography--weight-${strongTagFontWeight || fontWeight}`, `typography--style-${fontStyle}`, {
    [`typography--align-${align}`]: Boolean(align),
    [`typography--color-${color}`]: Boolean(color),
    [`typography--overflowwrap-${overflowWrap}`]: Boolean(overflowWrap)
  });

  if (Tag === _designSystem.TYPOGRAPHY.Paragraph) {
    Tag = 'p';
  } else if ([H7, H8, H9].includes(Tag)) {
    Tag = H6;
  }

  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    margin,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft
  }, boxProps), boxClassName => /*#__PURE__*/_react.default.createElement(Tag, {
    className: (0, _classnames.default)(boxClassName, computedClassName),
    title: title
  }, children));
}

Typography.propTypes = {
  /**
   * The variation of font sizes of the Typography component
   */
  variant: _propTypes.default.oneOf(Object.values(_designSystem.TYPOGRAPHY)),

  /**
   * The color of the Typography component Should use the COLOR object from
   * ./ui/helpers/constants/design-system.js
   */
  color: _propTypes.default.oneOf(ValidColors),

  /**
   * The font-weight of the Typography component. Should use the FONT_WEIGHT object from
   * ./ui/helpers/constants/design-system.js
   */
  fontWeight: _propTypes.default.oneOf(Object.values(_designSystem.FONT_WEIGHT)),

  /**
   * The font-style of the Typography component. Should use the FONT_STYLE object from
   * ./ui/helpers/constants/design-system.js
   */
  fontStyle: _propTypes.default.oneOf(Object.values(_designSystem.FONT_STYLE)),

  /**
   * The text-align of the Typography component. Should use the TEXT_ALIGN object from
   * ./ui/helpers/constants/design-system.js
   */
  align: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)),

  /**
   * The overflow-wrap of the Typography component. Should use the OVERFLOW_WRAP object from
   * ./ui/helpers/constants/design-system.js
   */
  overflowWrap: _propTypes.default.oneOf(Object.values(_designSystem.OVERFLOW_WRAP)),

  /**
   * Changes the root html element of the Typography component.
   */
  as: _propTypes.default.oneOf(ValidTags),

  /**
   * Adds margin to the Typography component should use valid size
   */
  margin: _box.MultipleSizesAndAuto,
  marginTop: _box.MultipleSizesAndAuto,
  marginBottom: _box.MultipleSizesAndAuto,
  marginRight: _box.MultipleSizesAndAuto,
  marginLeft: _box.MultipleSizesAndAuto,

  /**
   * Used to pass any valid Box component props such as margin or padding
   * to the Typography component
   */
  boxProps: _propTypes.default.shape({ ..._box.default.propTypes
  }),

  /**
   * Additional className to assign the Typography component
   */
  className: _propTypes.default.string,

  /**
   * Title attribute to include on the element. Will show as tooltip on hover.
   */
  title: _propTypes.default.string,

  /**
   * The text content of the Typography component
   */
  children: _propTypes.default.node.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\unit-input\\index.js", {"./unit-input.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\unit-input\\unit-input.component.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\unit-input\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _unitInput.default;
  }
});

var _unitInput = _interopRequireDefault(require("./unit-input.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\unit-input\\unit-input.component.js", {"classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\unit-input\unit-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function removeLeadingZeroes(str) {
  return str.replace(/^0*(?=\d)/u, '');
}
/**
 * Component that attaches a suffix or unit of measurement trailing user input, ex. 'ETH'. Also
 * allows rendering a child component underneath the input to, for example, display conversions of
 * the shown suffix.
 */


class UnitInput extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      value: this.props.value
    });

    _defineProperty(this, "handleFocus", () => {
      this.unitInput.focus();
    });

    _defineProperty(this, "handleInputFocus", ({
      target: {
        value
      }
    }) => {
      if (value === '0') {
        this.setState({
          value: ''
        });
      }
    });

    _defineProperty(this, "handleInputBlur", ({
      target: {
        value
      }
    }) => {
      if (value === '') {
        this.setState({
          value: '0'
        });
      }

      this.props.onBlur && this.props.onBlur(value);
    });

    _defineProperty(this, "handleChange", event => {
      const {
        value: userInput
      } = event.target;
      let value = userInput;

      if (userInput.length && userInput.length > 1) {
        value = removeLeadingZeroes(userInput);
      }

      this.setState({
        value
      });
      this.props.onChange(value);
    });
  }

  componentDidUpdate(prevProps) {
    const {
      value: prevPropsValue
    } = prevProps;
    const {
      value: propsValue
    } = this.props;
    const {
      value: stateValue
    } = this.state;

    if (prevPropsValue !== propsValue && propsValue !== stateValue) {
      this.setState({
        value: propsValue
      });
    }
  }

  getInputWidth(value) {
    const valueString = String(value);
    const valueLength = valueString.length || 1;
    const decimalPointDeficit = valueString.match(/\./u) ? -0.5 : 0;
    return `${valueLength + decimalPointDeficit + 0.5}ch`;
  }

  render() {
    const {
      error,
      placeholder,
      suffix,
      actionComponent,
      children,
      dataTestId
    } = this.props;
    const {
      value
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('unit-input', {
        'unit-input--error': error
      }),
      onClick: this.handleFocus
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unit-input__inputs"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unit-input__input-container"
    }, /*#__PURE__*/_react.default.createElement("input", {
      "data-testid": dataTestId,
      type: "number",
      dir: "ltr",
      className: (0, _classnames.default)('unit-input__input'),
      value: value,
      placeholder: placeholder,
      onChange: this.handleChange,
      onBlur: this.handleInputBlur,
      onFocus: this.handleInputFocus,
      style: {
        width: this.getInputWidth(value)
      },
      ref: ref => {
        this.unitInput = ref;
      },
      autoFocus: true
    }), suffix ? /*#__PURE__*/_react.default.createElement("div", {
      className: "unit-input__suffix"
    }, suffix) : null), children), actionComponent);
  }

}

exports.default = UnitInput;

_defineProperty(UnitInput, "propTypes", {
  dataTestId: _propTypes.default.string,
  children: _propTypes.default.node,
  actionComponent: _propTypes.default.node,
  error: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  placeholder: _propTypes.default.string,
  suffix: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
});

_defineProperty(UnitInput, "defaultProps", {
  value: '',
  placeholder: '0'
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\update-nickname-popover\\update-nickname-popover.js", {"../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../popover":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../text-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\update-nickname-popover\update-nickname-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UpdateNicknamePopover;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _popover = _interopRequireDefault(require("../popover"));

var _button = _interopRequireDefault(require("../button"));

var _textField = _interopRequireDefault(require("../text-field"));

var _i18n = require("../../../contexts/i18n");

var _identicon = _interopRequireDefault(require("../identicon"));

var _selectors = require("../../../selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function UpdateNicknamePopover({
  address,
  nickname = '',
  memo = '',
  onAdd,
  onClose
}) {
  var _tokenList$address$to;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [nicknameInput, setNicknameInput] = (0, _react.useState)(nickname === null ? '' : nickname);
  const [memoInput, setMemoInput] = (0, _react.useState)(memo === null ? '' : memo);

  const handleNicknameChange = event => {
    setNicknameInput(event.target.value);
  };

  const handleMemoChange = event => {
    setMemoInput(event.target.value);
  };

  const closePopover = (0, _react.useCallback)(() => {
    onClose();
  }, [onClose]);

  const onCancel = () => {
    onClose();
  };

  const onSubmit = () => {
    onAdd(address, nicknameInput, memoInput);
    onClose();
  };

  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: nickname ? t('editAddressNickname') : t('addANickname'),
    onClose: closePopover,
    className: "update-nickname__wrapper",
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "update-nickname__cancel",
      type: "secondary",
      onClick: onCancel
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "update-nickname__save",
      type: "primary",
      onClick: onSubmit,
      disabled: !nicknameInput
    }, t('save')))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "update-nickname__content__indenticon",
    address: address,
    diameter: 36,
    image: (_tokenList$address$to = tokenList[address.toLowerCase()]) === null || _tokenList$address$to === void 0 ? void 0 : _tokenList$address$to.iconUrl
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "update-nickname__content__label--capitalized"
  }, t('address')), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__address"
  }, address), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__nickname-label"
  }, t('nickname')), /*#__PURE__*/_react.default.createElement(_textField.default, {
    className: "update-nickname__content__text-field",
    value: nicknameInput,
    onChange: handleNicknameChange,
    placeholder: t('addANickname'),
    fullWidth: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__label--capitalized"
  }, t('memo')), /*#__PURE__*/_react.default.createElement(_textField.default, {
    type: "text",
    id: "memo",
    value: memoInput,
    onChange: handleMemoChange,
    placeholder: t('addMemo'),
    fullWidth: true,
    margin: "dense",
    multiline: true,
    rows: 3,
    classes: {
      inputMultiline: 'update-nickname__content__text-area',
      inputRoot: 'update-nickname__content__text-area-wrapper'
    }
  })));
}

UpdateNicknamePopover.propTypes = {
  nickname: _propTypes.default.string,
  address: _propTypes.default.string,
  memo: _propTypes.default.string,
  onAdd: _propTypes.default.func,
  onClose: _propTypes.default.func
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js", {"./url-icon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\url-icon.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\url-icon\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _urlIcon.default;
  }
});

var _urlIcon = _interopRequireDefault(require("./url-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\url-icon\\url-icon.js", {"../icon-with-fallback":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js","classnames":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\components\ui\url-icon\url-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UrlIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconWithFallback = _interopRequireDefault(require("../icon-with-fallback"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UrlIcon({
  url,
  className,
  name,
  fallbackClassName
}) {
  return /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
    className: (0, _classnames.default)('url-icon', className),
    icon: url,
    name: name,
    fallbackClassName: (0, _classnames.default)('url-icon__fallback', fallbackClassName)
  });
}

UrlIcon.propTypes = {
  url: _propTypes.default.string,
  className: _propTypes.default.string,
  name: _propTypes.default.string,
  fallbackClassName: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js", {"../hooks/gasFeeInput/useGasFeeInputs":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\contexts\gasFee.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GasFeeContextProvider = exports.GasFeeContext = void 0;
exports.useGasFeeContext = useGasFeeContext;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useGasFeeInputs = require("../hooks/gasFeeInput/useGasFeeInputs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GasFeeContext = /*#__PURE__*/(0, _react.createContext)({});
exports.GasFeeContext = GasFeeContext;

const GasFeeContextProvider = ({
  children,
  defaultEstimateToUse,
  transaction,
  minimumGasLimit,
  editGasMode
}) => {
  const gasFeeDetails = (0, _useGasFeeInputs.useGasFeeInputs)(defaultEstimateToUse, transaction, minimumGasLimit, editGasMode);
  return /*#__PURE__*/_react.default.createElement(GasFeeContext.Provider, {
    value: gasFeeDetails
  }, children);
};

exports.GasFeeContextProvider = GasFeeContextProvider;

function useGasFeeContext() {
  return (0, _react.useContext)(GasFeeContext);
}

GasFeeContextProvider.propTypes = {
  children: _propTypes.default.node.isRequired,
  defaultEstimateToUse: _propTypes.default.string,
  transaction: _propTypes.default.object,
  minimumGasLimit: _propTypes.default.string,
  editGasMode: _propTypes.default.string
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js", {"../ducks/locale/locale":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\locale\\locale.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/i18n-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\contexts\i18n.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegacyI18nProvider = exports.I18nProvider = exports.I18nContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _i18nHelper = require("../helpers/utils/i18n-helper");

var _metamask = require("../ducks/metamask/metamask");

var _locale = require("../ducks/locale/locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const I18nContext = /*#__PURE__*/(0, _react.createContext)(key => `[${key}]`);
exports.I18nContext = I18nContext;

const I18nProvider = props => {
  const currentLocale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);
  const current = (0, _reactRedux.useSelector)(_locale.getCurrentLocaleMessages);
  const en = (0, _reactRedux.useSelector)(_locale.getEnLocaleMessages);
  const t = (0, _react.useMemo)(() => {
    return (key, ...args) => (0, _i18nHelper.getMessage)(currentLocale, current, key, ...args) || (0, _i18nHelper.getMessage)(currentLocale, en, key, ...args);
  }, [currentLocale, current, en]);
  return /*#__PURE__*/_react.default.createElement(I18nContext.Provider, {
    value: t
  }, props.children);
};

exports.I18nProvider = I18nProvider;
I18nProvider.propTypes = {
  children: _propTypes.default.node
};
I18nProvider.defaultProps = {
  children: undefined
};

class LegacyI18nProvider extends _react.Component {
  getChildContext() {
    return {
      t: this.context
    };
  }

  render() {
    return this.props.children;
  }

}

exports.LegacyI18nProvider = LegacyI18nProvider;

_defineProperty(LegacyI18nProvider, "propTypes", {
  children: _propTypes.default.node
});

_defineProperty(LegacyI18nProvider, "defaultProps", {
  children: undefined
});

_defineProperty(LegacyI18nProvider, "contextType", I18nContext);

_defineProperty(LegacyI18nProvider, "childContextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js", {"../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../hooks/useSegmentContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSegmentContext.js","../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\contexts\metametrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetaMetricsContext = exports.LegacyMetaMetricsProvider = void 0;
exports.MetaMetricsProvider = MetaMetricsProvider;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _browser = require("@sentry/browser");

var _lodash = require("lodash");

var _util = require("../../app/scripts/lib/util");

var _routes = require("../helpers/constants/routes");

var _metametrics = require("../../shared/constants/metametrics");

var _useSegmentContext = require("../hooks/useSegmentContext");

var _actions = require("../store/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// type imports

/**
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsEventPayload} MetaMetricsEventPayload
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsPageObject} MetaMetricsPageObject
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsReferrerObject} MetaMetricsReferrerObject
 */
// types

/**
 * @typedef {Omit<MetaMetricsEventPayload, 'environmentType' | 'page' | 'referrer'>} UIMetricsEventPayload
 */

/**
 * @typedef {(
 *  payload: UIMetricsEventPayload,
 *  options: MetaMetricsEventOptions
 * ) => Promise<void>} UITrackEventMethod
 */

/**
 * @type {React.Context<UITrackEventMethod>}
 */
const MetaMetricsContext = /*#__PURE__*/(0, _react.createContext)(() => {
  (0, _browser.captureException)(Error(`MetaMetrics context function was called from a react node that is not a descendant of a MetaMetrics context provider`));
});
exports.MetaMetricsContext = MetaMetricsContext;
const PATHS_TO_CHECK = Object.keys(_routes.PATH_NAME_MAP);

function MetaMetricsProvider({
  children
}) {
  const location = (0, _reactRouterDom.useLocation)();
  const context = (0, _useSegmentContext.useSegmentContext)(); // Sometimes we want to track context properties inside the event's "properties" object.

  const addContextPropsIntoEventProperties = (payload, options) => {
    const fields = options === null || options === void 0 ? void 0 : options.contextPropsIntoEventProperties;

    if (!fields || fields.length === 0) {
      return;
    }

    if (!payload.properties) {
      payload.properties = {};
    }

    if (fields.includes(_metametrics.CONTEXT_PROPS.PAGE_TITLE)) {
      var _context$page;

      payload.properties[_metametrics.CONTEXT_PROPS.PAGE_TITLE] = (_context$page = context.page) === null || _context$page === void 0 ? void 0 : _context$page.title;
    }
  };
  /**
   * @type {UITrackEventMethod}
   */


  const trackEvent = (0, _react.useCallback)((payload, options) => {
    addContextPropsIntoEventProperties(payload, options);
    (0, _actions.trackMetaMetricsEvent)({ ...payload,
      environmentType: (0, _util.getEnvironmentType)(),
      ...context
    }, options);
  }, [context]); // Used to prevent double tracking page calls

  const previousMatch = (0, _react.useRef)();
  /**
   * Anytime the location changes, track a page change with segment.
   * Previously we would manually track changes to history and keep a
   * reference to the previous url, but with page tracking we can see
   * which page the user is on and their navigation path.
   */

  (0, _react.useEffect)(() => {
    const environmentType = (0, _util.getEnvironmentType)();
    const match = (0, _reactRouterDom.matchPath)(location.pathname, {
      path: PATHS_TO_CHECK,
      exact: true,
      strict: true
    }); // Start by checking for a missing match route. If this falls through to
    // the else if, then we know we have a matched route for tracking.

    if (!match) {
      (0, _browser.captureMessage)(`Segment page tracking found unmatched route`, {
        extra: {
          previousMatch,
          currentPath: location.pathname
        }
      });
    } else if (previousMatch.current !== match.path && !(environmentType === 'notification' && match.path === '/' && previousMatch.current === undefined)) {
      // When a notification window is open by a Dapp we do not want to track
      // the initial home route load that can sometimes happen. To handle
      // this we keep track of the previousMatch, and we skip the event track
      // in the event that we are dealing with the initial load of the
      // homepage
      const {
        path,
        params
      } = match;
      const name = _routes.PATH_NAME_MAP[path];
      (0, _actions.trackMetaMetricsPage)({
        name,
        // We do not want to send addresses or accounts in any events
        // Some routes include these as params.
        params: (0, _lodash.omit)(params, ['account', 'address']),
        environmentType,
        page: context.page,
        referrer: context.referrer
      }, {
        isOptInPath: location.pathname.startsWith('/initialize')
      });
    }

    previousMatch.current = match === null || match === void 0 ? void 0 : match.path;
  }, [location, context]);
  return /*#__PURE__*/_react.default.createElement(MetaMetricsContext.Provider, {
    value: trackEvent
  }, children);
}

MetaMetricsProvider.propTypes = {
  children: _propTypes.default.node
};

class LegacyMetaMetricsProvider extends _react.Component {
  getChildContext() {
    return {
      trackEvent: this.context
    };
  }

  render() {
    return this.props.children;
  }

}

exports.LegacyMetaMetricsProvider = LegacyMetaMetricsProvider;

_defineProperty(LegacyMetaMetricsProvider, "propTypes", {
  children: _propTypes.default.node
});

_defineProperty(LegacyMetaMetricsProvider, "defaultProps", {
  children: undefined
});

_defineProperty(LegacyMetaMetricsProvider, "contextType", MetaMetricsContext);

_defineProperty(LegacyMetaMetricsProvider, "childContextTypes", {
  // This has to be different than the type name for the old metametrics file
  // using the same name would result in whichever was lower in the tree to be
  // used.
  trackEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\transaction-modal.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\contexts\transaction-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransactionModalContextProvider = exports.TransactionModalContext = void 0;
exports.useTransactionModalContext = useTransactionModalContext;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TransactionModalContext = /*#__PURE__*/(0, _react.createContext)({});
exports.TransactionModalContext = TransactionModalContext;

const TransactionModalContextProvider = ({
  children
}) => {
  const [openModals, setOpenModals] = (0, _react.useState)([]);

  const closeModal = modalNames => {
    if (openModals < 0) {
      return;
    }

    const modals = [...openModals];
    modalNames.forEach(modal => {
      const index = openModals.indexOf(modal);
      modals.splice(index, 1);
    });
    setOpenModals(modals);
  };

  const closeAllModals = () => {
    setOpenModals([]);
  };

  const openModal = modalName => {
    if (openModals.includes(modalName)) {
      return;
    }

    const modals = [...openModals];
    modals.push(modalName);
    setOpenModals(modals);
  };

  return /*#__PURE__*/_react.default.createElement(TransactionModalContext.Provider, {
    value: {
      closeModal,
      closeAllModals,
      currentModal: openModals[openModals.length - 1],
      openModal,
      openModalCount: openModals.length
    }
  }, children);
};

exports.TransactionModalContextProvider = TransactionModalContextProvider;

function useTransactionModalContext() {
  return (0, _react.useContext)(TransactionModalContext);
}

TransactionModalContextProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\index.js", {"./enums":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\enums.js","./invalid-custom-network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\invalid-custom-network.js","./unconnected-account":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\unconnected-account.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\alerts\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ALERT_STATE", {
  enumerable: true,
  get: function () {
    return _enums.ALERT_STATE;
  }
});
Object.defineProperty(exports, "invalidCustomNetwork", {
  enumerable: true,
  get: function () {
    return _invalidCustomNetwork.default;
  }
});
Object.defineProperty(exports, "unconnectedAccount", {
  enumerable: true,
  get: function () {
    return _unconnectedAccount.default;
  }
});

var _unconnectedAccount = _interopRequireDefault(require("./unconnected-account"));

var _invalidCustomNetwork = _interopRequireDefault(require("./invalid-custom-network"));

var _enums = require("./enums");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\invalid-custom-network.js", {"../../../shared/constants/alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js","./enums":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\enums.js","@reduxjs/toolkit":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\alerts\invalid-custom-network.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openAlert = exports.getNetworkName = exports.getAlertState = exports.dismissAlert = exports.default = exports.alertIsOpen = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _alerts = require("../../../shared/constants/alerts");

var _enums = require("./enums");

// Constants
const name = _alerts.ALERT_TYPES.invalidCustomNetwork;
const initialState = {
  state: _enums.ALERT_STATE.CLOSED,
  networkName: ''
}; // Slice (reducer plus auto-generated actions and action creators)

const slice = (0, _toolkit.createSlice)({
  name,
  initialState,
  reducers: {
    openAlert: (state, action) => {
      state.state = _enums.ALERT_STATE.OPEN;
      state.networkName = action.payload;
    },
    dismissAlert: state => {
      state.state = _enums.ALERT_STATE.CLOSED;
      state.networkName = '';
    }
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer; // Selectors

exports.default = _default;

const getAlertState = state => state[name].state;

exports.getAlertState = getAlertState;

const getNetworkName = state => state[name].networkName;

exports.getNetworkName = getNetworkName;

const alertIsOpen = state => state[name].state !== _enums.ALERT_STATE.CLOSED; // Actions / action-creators


exports.alertIsOpen = alertIsOpen;
const {
  openAlert,
  dismissAlert
} = actions;
exports.dismissAlert = dismissAlert;
exports.openAlert = openAlert;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js", {"../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../selectors/custom-gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\custom-gas.js","../metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\confirm-transaction\confirm-transaction.duck.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearConfirmTransaction = clearConfirmTransaction;
exports.default = reducer;
exports.setTransactionToConfirm = setTransactionToConfirm;
exports.updateNonce = updateNonce;
exports.updateTokenData = updateTokenData;
exports.updateTokenProps = updateTokenProps;
exports.updateTransactionAmounts = updateTransactionAmounts;
exports.updateTransactionFees = updateTransactionFees;
exports.updateTransactionTotals = updateTransactionTotals;
exports.updateTxData = updateTxData;
exports.updateTxDataAndCalculate = updateTxDataAndCalculate;

var _selectors = require("../../selectors");

var _metamask = require("../metamask/metamask");

var _confirmTx = require("../../helpers/utils/confirm-tx.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _conversion = require("../../../shared/modules/conversion.utils");

var _customGas = require("../../selectors/custom-gas");

var _stringUtils = require("../../../shared/modules/string-utils");

var _transaction = require("../../../shared/modules/transaction.utils");

// Actions
const createActionType = action => `metamask/confirm-transaction/${action}`;

const UPDATE_TX_DATA = createActionType('UPDATE_TX_DATA');
const UPDATE_TOKEN_DATA = createActionType('UPDATE_TOKEN_DATA');
const UPDATE_TOKEN_PROPS = createActionType('UPDATE_TOKEN_PROPS');
const CLEAR_CONFIRM_TRANSACTION = createActionType('CLEAR_CONFIRM_TRANSACTION');
const UPDATE_TRANSACTION_AMOUNTS = createActionType('UPDATE_TRANSACTION_AMOUNTS');
const UPDATE_TRANSACTION_FEES = createActionType('UPDATE_TRANSACTION_FEES');
const UPDATE_TRANSACTION_TOTALS = createActionType('UPDATE_TRANSACTION_TOTALS');
const UPDATE_NONCE = createActionType('UPDATE_NONCE'); // Initial state

const initState = {
  txData: {},
  tokenData: {},
  tokenProps: {},
  fiatTransactionAmount: '',
  fiatTransactionFee: '',
  fiatTransactionTotal: '',
  ethTransactionAmount: '',
  ethTransactionFee: '',
  ethTransactionTotal: '',
  hexTransactionAmount: '',
  hexTransactionFee: '',
  hexTransactionTotal: '',
  nonce: ''
}; // Reducer

function reducer(state = initState, action = {}) {
  switch (action.type) {
    case UPDATE_TX_DATA:
      return { ...state,
        txData: { ...action.payload
        }
      };

    case UPDATE_TOKEN_DATA:
      return { ...state,
        tokenData: { ...action.payload
        }
      };

    case UPDATE_TOKEN_PROPS:
      return { ...state,
        tokenProps: { ...action.payload
        }
      };

    case UPDATE_TRANSACTION_AMOUNTS:
      {
        const {
          fiatTransactionAmount,
          ethTransactionAmount,
          hexTransactionAmount
        } = action.payload;
        return { ...state,
          fiatTransactionAmount: fiatTransactionAmount || state.fiatTransactionAmount,
          ethTransactionAmount: ethTransactionAmount || state.ethTransactionAmount,
          hexTransactionAmount: hexTransactionAmount || state.hexTransactionAmount
        };
      }

    case UPDATE_TRANSACTION_FEES:
      {
        const {
          fiatTransactionFee,
          ethTransactionFee,
          hexTransactionFee
        } = action.payload;
        return { ...state,
          fiatTransactionFee: fiatTransactionFee || state.fiatTransactionFee,
          ethTransactionFee: ethTransactionFee || state.ethTransactionFee,
          hexTransactionFee: hexTransactionFee || state.hexTransactionFee
        };
      }

    case UPDATE_TRANSACTION_TOTALS:
      {
        const {
          fiatTransactionTotal,
          ethTransactionTotal,
          hexTransactionTotal
        } = action.payload;
        return { ...state,
          fiatTransactionTotal: fiatTransactionTotal || state.fiatTransactionTotal,
          ethTransactionTotal: ethTransactionTotal || state.ethTransactionTotal,
          hexTransactionTotal: hexTransactionTotal || state.hexTransactionTotal
        };
      }

    case UPDATE_NONCE:
      return { ...state,
        nonce: action.payload
      };

    case CLEAR_CONFIRM_TRANSACTION:
      return initState;

    default:
      return state;
  }
} // Action Creators


function updateTxData(txData) {
  return {
    type: UPDATE_TX_DATA,
    payload: txData
  };
}

function updateTokenData(tokenData) {
  return {
    type: UPDATE_TOKEN_DATA,
    payload: tokenData
  };
}

function updateTokenProps(tokenProps) {
  return {
    type: UPDATE_TOKEN_PROPS,
    payload: tokenProps
  };
}

function updateTransactionAmounts(amounts) {
  return {
    type: UPDATE_TRANSACTION_AMOUNTS,
    payload: amounts
  };
}

function updateTransactionFees(fees) {
  return {
    type: UPDATE_TRANSACTION_FEES,
    payload: fees
  };
}

function updateTransactionTotals(totals) {
  return {
    type: UPDATE_TRANSACTION_TOTALS,
    payload: totals
  };
}

function updateNonce(nonce) {
  return {
    type: UPDATE_NONCE,
    payload: nonce
  };
}

function updateTxDataAndCalculate(txData) {
  return (dispatch, getState) => {
    const state = getState();
    const currentCurrency = (0, _selectors.currentCurrencySelector)(state);
    const conversionRate = (0, _selectors.conversionRateSelector)(state);
    const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
    dispatch(updateTxData(txData));
    const {
      txParams: {
        value = '0x0',
        gas: gasLimit = '0x0'
      } = {}
    } = txData; // if the gas price from our infura endpoint is null or undefined
    // use the metaswap average price estimation as a fallback

    let {
      txParams: {
        gasPrice
      } = {}
    } = txData;

    if (!gasPrice) {
      gasPrice = (0, _customGas.getAveragePriceEstimateInHexWEI)(state) || '0x0';
    }

    const fiatTransactionAmount = (0, _confirmTx.getValueFromWeiHex)({
      value,
      fromCurrency: nativeCurrency,
      toCurrency: currentCurrency,
      conversionRate,
      numberOfDecimals: 2
    });
    const ethTransactionAmount = (0, _confirmTx.getValueFromWeiHex)({
      value,
      fromCurrency: nativeCurrency,
      toCurrency: nativeCurrency,
      conversionRate,
      numberOfDecimals: 6
    });
    dispatch(updateTransactionAmounts({
      fiatTransactionAmount,
      ethTransactionAmount,
      hexTransactionAmount: value
    }));
    const hexTransactionFee = (0, _confirmTx.getHexGasTotal)({
      gasLimit,
      gasPrice
    });
    const fiatTransactionFee = (0, _confirmTx.getTransactionFee)({
      value: hexTransactionFee,
      fromCurrency: nativeCurrency,
      toCurrency: currentCurrency,
      numberOfDecimals: 2,
      conversionRate
    });
    const ethTransactionFee = (0, _confirmTx.getTransactionFee)({
      value: hexTransactionFee,
      fromCurrency: nativeCurrency,
      toCurrency: nativeCurrency,
      numberOfDecimals: 6,
      conversionRate
    });
    dispatch(updateTransactionFees({
      fiatTransactionFee,
      ethTransactionFee,
      hexTransactionFee
    }));
    const fiatTransactionTotal = (0, _confirmTx.addFiat)(fiatTransactionFee, fiatTransactionAmount);
    const ethTransactionTotal = (0, _confirmTx.addEth)(ethTransactionFee, ethTransactionAmount);
    const hexTransactionTotal = (0, _transactions.sumHexes)(value, hexTransactionFee);
    dispatch(updateTransactionTotals({
      fiatTransactionTotal,
      ethTransactionTotal,
      hexTransactionTotal
    }));
  };
}

function setTransactionToConfirm(transactionId) {
  return (dispatch, getState) => {
    const state = getState();
    const unconfirmedTransactionsHash = (0, _selectors.unconfirmedTransactionsHashSelector)(state);
    const transaction = unconfirmedTransactionsHash[transactionId];

    if (!transaction) {
      console.error(`Transaction with id ${transactionId} not found`);
      return;
    }

    if (transaction.txParams) {
      dispatch(updateTxDataAndCalculate(transaction));
      const {
        txParams
      } = transaction;

      if (txParams.data) {
        const {
          to: tokenAddress,
          data
        } = txParams;
        const tokenData = (0, _transaction.parseStandardTokenTransactionData)(data);
        const tokens = (0, _metamask.getTokens)(state);
        const currentToken = tokens === null || tokens === void 0 ? void 0 : tokens.find(({
          address
        }) => (0, _stringUtils.isEqualCaseInsensitive)(tokenAddress, address));
        dispatch(updateTokenProps({
          decimals: currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals,
          symbol: currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol
        }));
        dispatch(updateTokenData(tokenData));
      }

      if (txParams.nonce) {
        const nonce = (0, _conversion.conversionUtil)(txParams.nonce, {
          fromNumericBase: 'hex',
          toNumericBase: 'dec'
        });
        dispatch(updateNonce(nonce));
      }
    } else {
      dispatch(updateTxData(transaction));
    }
  };
}

function clearConfirmTransaction() {
  return {
    type: CLEAR_CONFIRM_TRANSACTION
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js", {"../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","@reduxjs/toolkit":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\history\history.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pageChanged = exports.getMostRecentOverviewPage = exports.default = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _routes = require("../../helpers/constants/routes");

// Constants
const initialState = {
  mostRecentOverviewPage: _routes.DEFAULT_ROUTE
};
const name = 'history'; // Slice (reducer plus auto-generated actions and action creators)

const slice = (0, _toolkit.createSlice)({
  name,
  initialState,
  reducers: {
    pageChanged: (state, action) => {
      const path = action.payload;

      if (path === _routes.DEFAULT_ROUTE || path.startsWith(_routes.ASSET_ROUTE)) {
        state.mostRecentOverviewPage = path;
      }
    }
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer; // Selectors

exports.default = _default;

const getMostRecentOverviewPage = state => state[name].mostRecentOverviewPage; // Actions / action-creators


exports.getMostRecentOverviewPage = getMostRecentOverviewPage;
const {
  pageChanged
} = actions;
exports.pageChanged = pageChanged;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\index.js", {"../../shared/constants/alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js","./alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\index.js","./app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","./confirm-transaction/confirm-transaction.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","./ens":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\ens.js","./gas/gas.duck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\gas\\gas.duck.js","./history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","./locale/locale":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\locale\\locale.js","./metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./send/send":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\send\\send.js","./swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _alerts = require("../../shared/constants/alerts");

var _metamask = _interopRequireDefault(require("./metamask/metamask"));

var _locale = _interopRequireDefault(require("./locale/locale"));

var _send = _interopRequireDefault(require("./send/send"));

var _ens = _interopRequireDefault(require("./ens"));

var _app = _interopRequireDefault(require("./app/app"));

var _confirmTransaction = _interopRequireDefault(require("./confirm-transaction/confirm-transaction.duck"));

var _gas = _interopRequireDefault(require("./gas/gas.duck"));

var _alerts2 = require("./alerts");

var _swaps = _interopRequireDefault(require("./swaps/swaps"));

var _history = _interopRequireDefault(require("./history/history"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _redux.combineReducers)({
  [_alerts.ALERT_TYPES.invalidCustomNetwork]: _alerts2.invalidCustomNetwork,
  [_alerts.ALERT_TYPES.unconnectedAccount]: _alerts2.unconnectedAccount,
  activeTab: s => s === undefined ? null : s,
  metamask: _metamask.default,
  appState: _app.default,
  ENS: _ens.default,
  history: _history.default,
  send: _send.default,
  confirmTransaction: _confirmTransaction.default,
  swaps: _swaps.default,
  gas: _gas.default,
  localeMessages: _locale.default
});

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\locale\\locale.js", {"../../store/actionConstants":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actionConstants.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\locale\locale.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reduceLocaleMessages;
exports.getEnLocaleMessages = exports.getCurrentLocaleMessages = void 0;

var actionConstants = _interopRequireWildcard(require("../../store/actionConstants"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function reduceLocaleMessages(state = {}, {
  type,
  value
}) {
  switch (type) {
    case actionConstants.SET_CURRENT_LOCALE:
      return { ...state,
        current: value.messages
      };

    default:
      return state;
  }
}

const getCurrentLocaleMessages = state => state.localeMessages.current;

exports.getCurrentLocaleMessages = getCurrentLocaleMessages;

const getEnLocaleMessages = state => state.localeMessages.en;

exports.getEnLocaleMessages = getEnLocaleMessages;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js", {"../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../pages/swaps/swaps.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\swaps\\swaps.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","../metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","@reduxjs/toolkit":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","@sentry/browser":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\ducks\swaps\swaps.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GAS_PRICES_LOADING_STATES = exports.FALLBACK_GAS_MULTIPLIER = void 0;
exports.cancelSwapsSmartTransaction = cancelSwapsSmartTransaction;
exports.fetchAndSetSwapsGasPriceInfo = exports.dismissCurrentSmartTransactionsErrorMessage = exports.default = exports.clearSwapsState = void 0;
exports.fetchMetaSwapsGasPriceEstimates = fetchMetaSwapsGasPriceEstimates;
exports.fetchSwapsLivenessAndFeatureFlags = exports.fetchQuotesAndSetQuoteState = void 0;
exports.fetchSwapsSmartTransactionFees = fetchSwapsSmartTransactionFees;
exports.setTopAssets = exports.setSwapsFromToken = exports.setSwapToToken = exports.setSwapQuotesFetchStartTime = exports.setReviewSwapClickedTimestamp = exports.setMaxSlippage = exports.setIsFeatureFlagLoaded = exports.setFromTokenInputValue = exports.setFromTokenError = exports.setFetchingQuotes = exports.setBalanceError = exports.setAggregatorMetadata = exports.prepareToLeaveSwaps = exports.prepareForRetryGetQuotes = exports.navigateBackToBuildQuote = exports.getUsedSwapsGasPrice = exports.getUsedQuote = exports.getTradeTxId = exports.getTopQuote = exports.getTopAssets = exports.getToToken = exports.getSwapsWelcomeMessageSeenStatus = exports.getSwapsUserFeeLevel = exports.getSwapsTokens = exports.getSwapsSTXLoading = exports.getSwapsQuoteRefreshTime = exports.getSwapsQuotePrefetchingRefreshTime = exports.getSwapsNetworkConfig = exports.getSwapsFeatureIsLive = exports.getSwapsFallbackGasPrice = exports.getSwapsErrorKey = exports.getSwapsCustomizationModalPrice = exports.getSwapsCustomizationModalLimit = exports.getSwapGasPriceEstimateData = exports.getSmartTransactionsOptInStatus = exports.getSmartTransactionsErrorMessageDismissed = exports.getSmartTransactionsError = exports.getSmartTransactionsEnabled = exports.getSmartTransactionFees = exports.getSmartTransactionEstimatedGas = exports.getShowQuoteLoadingScreen = exports.getSelectedQuote = exports.getReviewSwapClickedTimestamp = exports.getQuotesLastFetched = exports.getQuotesFetchStartTime = exports.getQuotes = exports.getPendingSmartTransactions = exports.getMaxSlippage = exports.getIsFeatureFlagLoaded = exports.getFromTokenInputValue = exports.getFromTokenError = exports.getFromToken = exports.getFetchingQuotes = exports.getFetchParams = exports.getDestinationTokenInfo = exports.getCustomSwapsGasPrice = exports.getCustomSwapsGas = exports.getCustomMaxPriorityFeePerGas = exports.getCustomMaxFeePerGas = exports.getCurrentSmartTransactionsErrorMessageDismissed = exports.getCurrentSmartTransactionsError = exports.getCurrentSmartTransactionsEnabled = exports.getCurrentSmartTransactions = exports.getBalanceError = exports.getBackgroundSwapRouteState = exports.getApproveTxParams = exports.getApproveTxId = exports.getAggregatorMetadata = void 0;
exports.shouldShowCustomPriceTooLowWarning = shouldShowCustomPriceTooLowWarning;
exports.swapsQuoteSelected = exports.swapGasPriceEstimateIsLoading = exports.swapGasEstimateLoadingHasFailed = exports.swapCustomGasModalPriceEdited = exports.swapCustomGasModalLimitEdited = exports.swapCustomGasModalClosed = exports.signAndSendTransactions = exports.signAndSendSwapsSmartTransaction = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _browser = require("@sentry/browser");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _swaps = require("../../pages/swaps/swaps.util");

var _conversions = require("../../helpers/utils/conversions.util");

var _conversion = require("../../../shared/modules/conversion.utils");

var _selectors = require("../../selectors");

var _metametrics = require("../../../shared/constants/metametrics");

var _swaps2 = require("../../../shared/constants/swaps");

var _transaction = require("../../../shared/constants/transaction");

var _metamask = require("../metamask/metamask");

var _app = require("../../../shared/constants/app");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GAS_PRICES_LOADING_STATES = {
  INITIAL: 'INITIAL',
  LOADING: 'LOADING',
  FAILED: 'FAILED',
  COMPLETED: 'COMPLETED'
};
exports.GAS_PRICES_LOADING_STATES = GAS_PRICES_LOADING_STATES;
const FALLBACK_GAS_MULTIPLIER = 1.5;
exports.FALLBACK_GAS_MULTIPLIER = FALLBACK_GAS_MULTIPLIER;
const initialState = {
  aggregatorMetadata: null,
  approveTxId: null,
  tradeTxId: null,
  balanceError: false,
  fetchingQuotes: false,
  fromToken: null,
  fromTokenInputValue: '',
  fromTokenError: null,
  isFeatureFlagLoaded: false,
  maxSlippage: _swaps2.SLIPPAGE.DEFAULT,
  quotesFetchStartTime: null,
  reviewSwapClickedTimestamp: null,
  topAssets: {},
  toToken: null,
  customGas: {
    price: null,
    limit: null,
    loading: GAS_PRICES_LOADING_STATES.INITIAL,
    priceEstimates: {},
    fallBackPrice: null
  },
  currentSmartTransactionsError: '',
  currentSmartTransactionsErrorMessageDismissed: false,
  swapsSTXLoading: false
};
const slice = (0, _toolkit.createSlice)({
  name: 'swaps',
  initialState,
  reducers: {
    clearSwapsState: () => initialState,
    navigatedBackToBuildQuote: state => {
      state.approveTxId = null;
      state.tradeTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
      state.customGas.limit = null;
      state.customGas.price = null;
    },
    retriedGetQuotes: state => {
      state.approveTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
    },
    setAggregatorMetadata: (state, action) => {
      state.aggregatorMetadata = action.payload;
    },
    setBalanceError: (state, action) => {
      state.balanceError = action.payload;
    },
    setFetchingQuotes: (state, action) => {
      state.fetchingQuotes = action.payload;
    },
    setFromToken: (state, action) => {
      state.fromToken = action.payload;
    },
    setFromTokenInputValue: (state, action) => {
      state.fromTokenInputValue = action.payload;
    },
    setFromTokenError: (state, action) => {
      state.fromTokenError = action.payload;
    },
    setIsFeatureFlagLoaded: (state, action) => {
      state.isFeatureFlagLoaded = action.payload;
    },
    setMaxSlippage: (state, action) => {
      state.maxSlippage = action.payload;
    },
    setQuotesFetchStartTime: (state, action) => {
      state.quotesFetchStartTime = action.payload;
    },
    setReviewSwapClickedTimestamp: (state, action) => {
      state.reviewSwapClickedTimestamp = action.payload;
    },
    setTopAssets: (state, action) => {
      state.topAssets = action.payload;
    },
    setToToken: (state, action) => {
      state.toToken = action.payload;
    },
    swapCustomGasModalClosed: state => {
      state.customGas.price = null;
      state.customGas.limit = null;
    },
    swapCustomGasModalPriceEdited: (state, action) => {
      state.customGas.price = action.payload;
    },
    swapCustomGasModalLimitEdited: (state, action) => {
      state.customGas.limit = action.payload;
    },
    swapGasPriceEstimatesFetchStarted: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.LOADING;
    },
    swapGasPriceEstimatesFetchFailed: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.FAILED;
    },
    swapGasPriceEstimatesFetchCompleted: (state, action) => {
      state.customGas.priceEstimates = action.payload.priceEstimates;
      state.customGas.loading = GAS_PRICES_LOADING_STATES.COMPLETED;
    },
    retrievedFallbackSwapsGasPrice: (state, action) => {
      state.customGas.fallBackPrice = action.payload;
    },
    setCurrentSmartTransactionsError: (state, action) => {
      const errorType = Object.values(_swaps.stxErrorTypes).includes(action.payload) ? action.payload : _swaps.stxErrorTypes.UNAVAILABLE;
      state.currentSmartTransactionsError = errorType;
    },
    dismissCurrentSmartTransactionsErrorMessage: state => {
      state.currentSmartTransactionsErrorMessageDismissed = true;
    },
    setSwapsSTXSubmitLoading: (state, action) => {
      state.swapsSTXLoading = action.payload || false;
    }
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer; // Selectors

exports.default = _default;

const getAggregatorMetadata = state => state.swaps.aggregatorMetadata;

exports.getAggregatorMetadata = getAggregatorMetadata;

const getBalanceError = state => state.swaps.balanceError;

exports.getBalanceError = getBalanceError;

const getFromToken = state => state.swaps.fromToken;

exports.getFromToken = getFromToken;

const getFromTokenError = state => state.swaps.fromTokenError;

exports.getFromTokenError = getFromTokenError;

const getFromTokenInputValue = state => state.swaps.fromTokenInputValue;

exports.getFromTokenInputValue = getFromTokenInputValue;

const getIsFeatureFlagLoaded = state => state.swaps.isFeatureFlagLoaded;

exports.getIsFeatureFlagLoaded = getIsFeatureFlagLoaded;

const getSwapsSTXLoading = state => state.swaps.swapsSTXLoading;

exports.getSwapsSTXLoading = getSwapsSTXLoading;

const getMaxSlippage = state => state.swaps.maxSlippage;

exports.getMaxSlippage = getMaxSlippage;

const getTopAssets = state => state.swaps.topAssets;

exports.getTopAssets = getTopAssets;

const getToToken = state => state.swaps.toToken;

exports.getToToken = getToToken;

const getFetchingQuotes = state => state.swaps.fetchingQuotes;

exports.getFetchingQuotes = getFetchingQuotes;

const getQuotesFetchStartTime = state => state.swaps.quotesFetchStartTime;

exports.getQuotesFetchStartTime = getQuotesFetchStartTime;

const getReviewSwapClickedTimestamp = state => state.swaps.reviewSwapClickedTimestamp;

exports.getReviewSwapClickedTimestamp = getReviewSwapClickedTimestamp;

const getSwapsCustomizationModalPrice = state => state.swaps.customGas.price;

exports.getSwapsCustomizationModalPrice = getSwapsCustomizationModalPrice;

const getSwapsCustomizationModalLimit = state => state.swaps.customGas.limit;

exports.getSwapsCustomizationModalLimit = getSwapsCustomizationModalLimit;

const swapGasPriceEstimateIsLoading = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.LOADING;

exports.swapGasPriceEstimateIsLoading = swapGasPriceEstimateIsLoading;

const swapGasEstimateLoadingHasFailed = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.INITIAL;

exports.swapGasEstimateLoadingHasFailed = swapGasEstimateLoadingHasFailed;

const getSwapGasPriceEstimateData = state => state.swaps.customGas.priceEstimates;

exports.getSwapGasPriceEstimateData = getSwapGasPriceEstimateData;

const getSwapsFallbackGasPrice = state => state.swaps.customGas.fallBackPrice;

exports.getSwapsFallbackGasPrice = getSwapsFallbackGasPrice;

const getCurrentSmartTransactionsError = state => state.swaps.currentSmartTransactionsError;

exports.getCurrentSmartTransactionsError = getCurrentSmartTransactionsError;

const getCurrentSmartTransactionsErrorMessageDismissed = state => state.swaps.currentSmartTransactionsErrorMessageDismissed;

exports.getCurrentSmartTransactionsErrorMessageDismissed = getCurrentSmartTransactionsErrorMessageDismissed;

function shouldShowCustomPriceTooLowWarning(state) {
  const {
    average
  } = getSwapGasPriceEstimateData(state);
  const customGasPrice = getSwapsCustomizationModalPrice(state);

  if (!customGasPrice || average === undefined) {
    return false;
  }

  const customPriceRisksSwapFailure = (0, _conversion.conversionLessThan)({
    value: customGasPrice,
    fromNumericBase: 'hex',
    fromDenomination: 'WEI',
    toDenomination: 'GWEI'
  }, {
    value: average,
    fromNumericBase: 'dec'
  });
  return customPriceRisksSwapFailure;
} // Background selectors


const getSwapsState = state => state.metamask.swapsState;

const getSwapsFeatureIsLive = state => state.metamask.swapsState.swapsFeatureIsLive;

exports.getSwapsFeatureIsLive = getSwapsFeatureIsLive;

const getSmartTransactionsError = state => state.appState.smartTransactionsError;

exports.getSmartTransactionsError = getSmartTransactionsError;

const getSmartTransactionsErrorMessageDismissed = state => state.appState.smartTransactionsErrorMessageDismissed;

exports.getSmartTransactionsErrorMessageDismissed = getSmartTransactionsErrorMessageDismissed;

const getSmartTransactionsEnabled = state => {
  var _state$metamask$swaps, _state$metamask$swaps2, _state$metamask$swaps3, _state$metamask$smart;

  const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
  const chainId = (0, _selectors.getCurrentChainId)(state);

  const isAllowedNetwork = _swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId);

  const smartTransactionsFeatureFlagEnabled = (_state$metamask$swaps = state.metamask.swapsState) === null || _state$metamask$swaps === void 0 ? void 0 : (_state$metamask$swaps2 = _state$metamask$swaps.swapsFeatureFlags) === null || _state$metamask$swaps2 === void 0 ? void 0 : (_state$metamask$swaps3 = _state$metamask$swaps2.smartTransactions) === null || _state$metamask$swaps3 === void 0 ? void 0 : _state$metamask$swaps3.extensionActive;
  const smartTransactionsLiveness = (_state$metamask$smart = state.metamask.smartTransactionsState) === null || _state$metamask$smart === void 0 ? void 0 : _state$metamask$smart.liveness;
  return Boolean(isAllowedNetwork && !hardwareWalletUsed && smartTransactionsFeatureFlagEnabled && smartTransactionsLiveness);
};

exports.getSmartTransactionsEnabled = getSmartTransactionsEnabled;

const getCurrentSmartTransactionsEnabled = state => {
  const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
  const currentSmartTransactionsError = getCurrentSmartTransactionsError(state);
  return smartTransactionsEnabled && !currentSmartTransactionsError;
};

exports.getCurrentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled;

const getSwapsQuoteRefreshTime = state => state.metamask.swapsState.swapsQuoteRefreshTime;

exports.getSwapsQuoteRefreshTime = getSwapsQuoteRefreshTime;

const getSwapsQuotePrefetchingRefreshTime = state => state.metamask.swapsState.swapsQuotePrefetchingRefreshTime;

exports.getSwapsQuotePrefetchingRefreshTime = getSwapsQuotePrefetchingRefreshTime;

const getBackgroundSwapRouteState = state => state.metamask.swapsState.routeState;

exports.getBackgroundSwapRouteState = getBackgroundSwapRouteState;

const getCustomSwapsGas = state => state.metamask.swapsState.customMaxGas;

exports.getCustomSwapsGas = getCustomSwapsGas;

const getCustomSwapsGasPrice = state => state.metamask.swapsState.customGasPrice;

exports.getCustomSwapsGasPrice = getCustomSwapsGasPrice;

const getCustomMaxFeePerGas = state => state.metamask.swapsState.customMaxFeePerGas;

exports.getCustomMaxFeePerGas = getCustomMaxFeePerGas;

const getCustomMaxPriorityFeePerGas = state => state.metamask.swapsState.customMaxPriorityFeePerGas;

exports.getCustomMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas;

const getSwapsUserFeeLevel = state => state.metamask.swapsState.swapsUserFeeLevel;

exports.getSwapsUserFeeLevel = getSwapsUserFeeLevel;

const getFetchParams = state => state.metamask.swapsState.fetchParams;

exports.getFetchParams = getFetchParams;

const getQuotes = state => state.metamask.swapsState.quotes;

exports.getQuotes = getQuotes;

const getQuotesLastFetched = state => state.metamask.swapsState.quotesLastFetched;

exports.getQuotesLastFetched = getQuotesLastFetched;

const getSelectedQuote = state => {
  const {
    selectedAggId,
    quotes
  } = getSwapsState(state);
  return quotes[selectedAggId];
};

exports.getSelectedQuote = getSelectedQuote;

const getSwapsErrorKey = state => {
  var _getSwapsState;

  return (_getSwapsState = getSwapsState(state)) === null || _getSwapsState === void 0 ? void 0 : _getSwapsState.errorKey;
};

exports.getSwapsErrorKey = getSwapsErrorKey;

const getShowQuoteLoadingScreen = state => state.swaps.showQuoteLoadingScreen;

exports.getShowQuoteLoadingScreen = getShowQuoteLoadingScreen;

const getSwapsTokens = state => state.metamask.swapsState.tokens;

exports.getSwapsTokens = getSwapsTokens;

const getSwapsWelcomeMessageSeenStatus = state => state.metamask.swapsWelcomeMessageHasBeenShown;

exports.getSwapsWelcomeMessageSeenStatus = getSwapsWelcomeMessageSeenStatus;

const getTopQuote = state => {
  const {
    topAggId,
    quotes
  } = getSwapsState(state);
  return quotes[topAggId];
};

exports.getTopQuote = getTopQuote;

const getApproveTxId = state => state.metamask.swapsState.approveTxId;

exports.getApproveTxId = getApproveTxId;

const getTradeTxId = state => state.metamask.swapsState.tradeTxId;

exports.getTradeTxId = getTradeTxId;

const getUsedQuote = state => getSelectedQuote(state) || getTopQuote(state); // Compound selectors


exports.getUsedQuote = getUsedQuote;

const getDestinationTokenInfo = state => {
  var _getFetchParams, _getFetchParams$metaD;

  return (_getFetchParams = getFetchParams(state)) === null || _getFetchParams === void 0 ? void 0 : (_getFetchParams$metaD = _getFetchParams.metaData) === null || _getFetchParams$metaD === void 0 ? void 0 : _getFetchParams$metaD.destinationTokenInfo;
};

exports.getDestinationTokenInfo = getDestinationTokenInfo;

const getUsedSwapsGasPrice = state => getCustomSwapsGasPrice(state) || getSwapsFallbackGasPrice(state);

exports.getUsedSwapsGasPrice = getUsedSwapsGasPrice;

const getApproveTxParams = state => {
  var _getSwapsState2;

  const {
    approvalNeeded
  } = getSelectedQuote(state) || getTopQuote(state) || {};

  if (!approvalNeeded) {
    return null;
  }

  const data = ((_getSwapsState2 = getSwapsState(state)) === null || _getSwapsState2 === void 0 ? void 0 : _getSwapsState2.customApproveTxData) || approvalNeeded.data;
  const gasPrice = getUsedSwapsGasPrice(state);
  return { ...approvalNeeded,
    gasPrice,
    data
  };
};

exports.getApproveTxParams = getApproveTxParams;

const getSmartTransactionsOptInStatus = state => {
  var _state$metamask$smart2;

  return (_state$metamask$smart2 = state.metamask.smartTransactionsState) === null || _state$metamask$smart2 === void 0 ? void 0 : _state$metamask$smart2.userOptIn;
};

exports.getSmartTransactionsOptInStatus = getSmartTransactionsOptInStatus;

const getCurrentSmartTransactions = state => {
  var _state$metamask$smart3, _state$metamask$smart4;

  return (_state$metamask$smart3 = state.metamask.smartTransactionsState) === null || _state$metamask$smart3 === void 0 ? void 0 : (_state$metamask$smart4 = _state$metamask$smart3.smartTransactions) === null || _state$metamask$smart4 === void 0 ? void 0 : _state$metamask$smart4[(0, _selectors.getCurrentChainId)(state)];
};

exports.getCurrentSmartTransactions = getCurrentSmartTransactions;

const getPendingSmartTransactions = state => {
  const currentSmartTransactions = getCurrentSmartTransactions(state);

  if (!currentSmartTransactions || currentSmartTransactions.length === 0) {
    return [];
  }

  return currentSmartTransactions.filter(stx => stx.status === _transaction.SMART_TRANSACTION_STATUSES.PENDING);
};

exports.getPendingSmartTransactions = getPendingSmartTransactions;

const getSmartTransactionFees = state => {
  var _state$metamask$smart5;

  return (_state$metamask$smart5 = state.metamask.smartTransactionsState) === null || _state$metamask$smart5 === void 0 ? void 0 : _state$metamask$smart5.fees;
};

exports.getSmartTransactionFees = getSmartTransactionFees;

const getSmartTransactionEstimatedGas = state => {
  var _state$metamask$smart6;

  return (_state$metamask$smart6 = state.metamask.smartTransactionsState) === null || _state$metamask$smart6 === void 0 ? void 0 : _state$metamask$smart6.estimatedGas;
};

exports.getSmartTransactionEstimatedGas = getSmartTransactionEstimatedGas;

const getSwapsNetworkConfig = state => {
  const {
    swapsQuoteRefreshTime,
    swapsQuotePrefetchingRefreshTime,
    swapsStxGetTransactionsRefreshTime,
    swapsStxBatchStatusRefreshTime,
    swapsStxStatusDeadline,
    swapsStxMaxFeeMultiplier
  } = state.metamask.swapsState;
  return {
    quoteRefreshTime: swapsQuoteRefreshTime,
    quotePrefetchingRefreshTime: swapsQuotePrefetchingRefreshTime,
    stxGetTransactionsRefreshTime: swapsStxGetTransactionsRefreshTime,
    stxBatchStatusRefreshTime: swapsStxBatchStatusRefreshTime,
    stxStatusDeadline: swapsStxStatusDeadline,
    stxMaxFeeMultiplier: swapsStxMaxFeeMultiplier
  };
}; // Actions / action-creators


exports.getSwapsNetworkConfig = getSwapsNetworkConfig;
const {
  clearSwapsState,
  navigatedBackToBuildQuote,
  retriedGetQuotes,
  swapGasPriceEstimatesFetchCompleted,
  swapGasPriceEstimatesFetchStarted,
  swapGasPriceEstimatesFetchFailed,
  setAggregatorMetadata,
  setBalanceError,
  setFetchingQuotes,
  setFromToken,
  setFromTokenError,
  setFromTokenInputValue,
  setIsFeatureFlagLoaded,
  setMaxSlippage,
  setQuotesFetchStartTime,
  setReviewSwapClickedTimestamp,
  setTopAssets,
  setToToken,
  swapCustomGasModalPriceEdited,
  swapCustomGasModalLimitEdited,
  retrievedFallbackSwapsGasPrice,
  swapCustomGasModalClosed,
  setCurrentSmartTransactionsError,
  dismissCurrentSmartTransactionsErrorMessage,
  setSwapsSTXSubmitLoading
} = actions;
exports.dismissCurrentSmartTransactionsErrorMessage = dismissCurrentSmartTransactionsErrorMessage;
exports.swapCustomGasModalClosed = swapCustomGasModalClosed;
exports.swapCustomGasModalLimitEdited = swapCustomGasModalLimitEdited;
exports.swapCustomGasModalPriceEdited = swapCustomGasModalPriceEdited;
exports.setSwapToToken = setToToken;
exports.setTopAssets = setTopAssets;
exports.setReviewSwapClickedTimestamp = setReviewSwapClickedTimestamp;
exports.setSwapQuotesFetchStartTime = setQuotesFetchStartTime;
exports.setMaxSlippage = setMaxSlippage;
exports.setIsFeatureFlagLoaded = setIsFeatureFlagLoaded;
exports.setFromTokenInputValue = setFromTokenInputValue;
exports.setFromTokenError = setFromTokenError;
exports.setSwapsFromToken = setFromToken;
exports.setFetchingQuotes = setFetchingQuotes;
exports.setBalanceError = setBalanceError;
exports.setAggregatorMetadata = setAggregatorMetadata;
exports.clearSwapsState = clearSwapsState;

const navigateBackToBuildQuote = history => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.setBackgroundSwapRouteState)(''));
    dispatch(navigatedBackToBuildQuote());
    history.push(_routes.BUILD_QUOTE_ROUTE);
  };
};

exports.navigateBackToBuildQuote = navigateBackToBuildQuote;

const prepareForRetryGetQuotes = () => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.resetSwapsPostFetchState)());
    dispatch(retriedGetQuotes());
  };
};

exports.prepareForRetryGetQuotes = prepareForRetryGetQuotes;

const prepareToLeaveSwaps = () => {
  return async dispatch => {
    dispatch(clearSwapsState());
    await dispatch((0, _actions.resetBackgroundSwapsState)());
  };
};

exports.prepareToLeaveSwaps = prepareToLeaveSwaps;

const swapsQuoteSelected = aggId => {
  return dispatch => {
    dispatch(swapCustomGasModalLimitEdited(null));
    dispatch((0, _actions.setSelectedQuoteAggId)(aggId));
    dispatch((0, _actions.setSwapsTxGasLimit)(''));
  };
};

exports.swapsQuoteSelected = swapsQuoteSelected;

const fetchAndSetSwapsGasPriceInfo = () => {
  return async dispatch => {
    const basicEstimates = await dispatch(fetchMetaSwapsGasPriceEstimates());

    if (basicEstimates !== null && basicEstimates !== void 0 && basicEstimates.fast) {
      dispatch((0, _actions.setSwapsTxGasPrice)((0, _conversions.decGWEIToHexWEI)(basicEstimates.fast)));
    }
  };
};

exports.fetchAndSetSwapsGasPriceInfo = fetchAndSetSwapsGasPriceInfo;

const disableStxIfRegularTxInProgress = (dispatch, transactions) => {
  if ((transactions === null || transactions === void 0 ? void 0 : transactions.length) <= 0) {
    return;
  }

  for (const transaction of transactions) {
    if (_transaction.IN_PROGRESS_TRANSACTION_STATUSES.includes(transaction.status)) {
      dispatch(setCurrentSmartTransactionsError(_swaps.stxErrorTypes.REGULAR_TX_IN_PROGRESS));
      break;
    }
  }
};

const fetchSwapsLivenessAndFeatureFlags = () => {
  return async (dispatch, getState) => {
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      await dispatch((0, _actions.setSwapsFeatureFlags)(swapsFeatureFlags));

      if (_swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId)) {
        var _state$metamask;

        await dispatch((0, _actions.fetchSmartTransactionsLiveness)());
        const transactions = await (0, _actions.getTransactions)({
          searchCriteria: {
            from: (_state$metamask = state.metamask) === null || _state$metamask === void 0 ? void 0 : _state$metamask.selectedAddress
          }
        });
        disableStxIfRegularTxInProgress(dispatch, transactions);
      }

      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps feature flags and Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));
    dispatch(setIsFeatureFlagLoaded(true));
    return swapsLivenessForNetwork;
  };
};

exports.fetchSwapsLivenessAndFeatureFlags = fetchSwapsLivenessAndFeatureFlags;

const isTokenAlreadyAdded = (tokenAddress, tokens) => {
  if (!Array.isArray(tokens)) {
    return false;
  }

  return tokens.find(token => token.address.toLowerCase() === tokenAddress.toLowerCase());
};

const fetchQuotesAndSetQuoteState = (history, inputValue, maxSlippage, trackEvent, pageRedirectionDisabled) => {
  return async (dispatch, getState) => {
    var _fetchParams$metaData, _fetchParams$metaData2, _fetchParams$metaData3, _fetchParams$metaData4;

    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));

    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }

    const fetchParams = getFetchParams(state);
    const selectedAccount = (0, _selectors.getSelectedAccount)(state);
    const balanceError = getBalanceError(state);
    const swapsDefaultToken = (0, _selectors.getSwapsDefaultToken)(state);
    const fetchParamsFromToken = (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData = fetchParams.metaData) === null || _fetchParams$metaData === void 0 ? void 0 : (_fetchParams$metaData2 = _fetchParams$metaData.sourceTokenInfo) === null || _fetchParams$metaData2 === void 0 ? void 0 : _fetchParams$metaData2.symbol) === swapsDefaultToken.symbol ? swapsDefaultToken : fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData3 = fetchParams.metaData) === null || _fetchParams$metaData3 === void 0 ? void 0 : _fetchParams$metaData3.sourceTokenInfo;
    const selectedFromToken = getFromToken(state) || fetchParamsFromToken || {};
    const selectedToToken = getToToken(state) || (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData4 = fetchParams.metaData) === null || _fetchParams$metaData4 === void 0 ? void 0 : _fetchParams$metaData4.destinationTokenInfo) || {};
    const {
      address: fromTokenAddress,
      symbol: fromTokenSymbol,
      decimals: fromTokenDecimals,
      iconUrl: fromTokenIconUrl,
      balance: fromTokenBalance
    } = selectedFromToken;
    const {
      address: toTokenAddress,
      symbol: toTokenSymbol,
      decimals: toTokenDecimals,
      iconUrl: toTokenIconUrl
    } = selectedToToken; // pageRedirectionDisabled is true if quotes prefetching is active (a user is on the Build Quote page).
    // In that case we just want to silently prefetch quotes without redirecting to the quotes loading page.

    if (!pageRedirectionDisabled) {
      await dispatch((0, _actions.setBackgroundSwapRouteState)('loading'));
      history.push(_routes.LOADING_QUOTES_ROUTE);
    }

    dispatch(setFetchingQuotes(true));
    const contractExchangeRates = (0, _selectors.getTokenExchangeRates)(state);
    let destinationTokenAddedForSwap = false;

    if (toTokenAddress && toTokenSymbol !== swapsDefaultToken.symbol && contractExchangeRates[toTokenAddress] === undefined && !isTokenAlreadyAdded(toTokenAddress, (0, _metamask.getTokens)(state))) {
      destinationTokenAddedForSwap = true;
      await dispatch((0, _actions.addToken)(toTokenAddress, toTokenSymbol, toTokenDecimals, toTokenIconUrl, true));
    }

    if (fromTokenAddress && fromTokenSymbol !== swapsDefaultToken.symbol && !contractExchangeRates[fromTokenAddress] && fromTokenBalance && new _bignumber.default(fromTokenBalance, 16).gt(0)) {
      dispatch((0, _actions.addToken)(fromTokenAddress, fromTokenSymbol, fromTokenDecimals, fromTokenIconUrl, true));
    }

    const swapsTokens = getSwapsTokens(state);
    const sourceTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === fromTokenAddress)) || selectedFromToken;
    const destinationTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === toTokenAddress)) || selectedToToken;
    dispatch(setFromToken(selectedFromToken));
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const hardwareWalletType = (0, _selectors.getHardwareWalletType)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    trackEvent({
      event: 'Quotes Requested',
      category: _metametrics.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: {
        token_from: fromTokenSymbol,
        token_from_amount: String(inputValue),
        token_to: toTokenSymbol,
        request_type: balanceError ? 'Quote' : 'Order',
        slippage: maxSlippage,
        custom_slippage: maxSlippage !== _swaps2.SLIPPAGE.DEFAULT,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus,
        anonymizedData: true
      }
    });

    try {
      var _Object$values;

      const fetchStartTime = Date.now();
      dispatch(setQuotesFetchStartTime(fetchStartTime));
      const fetchAndSetQuotesPromise = dispatch((0, _actions.fetchAndSetQuotes)({
        slippage: maxSlippage,
        sourceToken: fromTokenAddress,
        destinationToken: toTokenAddress,
        value: inputValue,
        fromAddress: selectedAccount.address,
        destinationTokenAddedForSwap,
        balanceError,
        sourceDecimals: fromTokenDecimals
      }, {
        sourceTokenInfo,
        destinationTokenInfo,
        accountBalance: selectedAccount.balance,
        chainId
      }));
      const gasPriceFetchPromise = networkAndAccountSupports1559 ? null // For EIP 1559 we can get gas prices via "useGasFeeEstimates".
      : dispatch(fetchAndSetSwapsGasPriceInfo());
      const [[fetchedQuotes, selectedAggId]] = await Promise.all([fetchAndSetQuotesPromise, gasPriceFetchPromise]);

      if (((_Object$values = Object.values(fetchedQuotes)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) === 0) {
        trackEvent({
          event: 'No Quotes Available',
          category: _metametrics.EVENT.CATEGORIES.SWAPS,
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== _swaps2.SLIPPAGE.DEFAULT,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus
          }
        });
        dispatch((0, _actions.setSwapsErrorKey)(_swaps2.QUOTES_NOT_AVAILABLE_ERROR));
      } else {
        var _Object$values2;

        const newSelectedQuote = fetchedQuotes[selectedAggId];
        trackEvent({
          event: 'Quotes Received',
          category: _metametrics.EVENT.CATEGORIES.SWAPS,
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            token_to_amount: (0, _transactionsControllerUtils.calcTokenAmount)(newSelectedQuote.destinationAmount, newSelectedQuote.decimals || 18),
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== _swaps2.SLIPPAGE.DEFAULT,
            response_time: Date.now() - fetchStartTime,
            best_quote_source: newSelectedQuote.aggregator,
            available_quotes: (_Object$values2 = Object.values(fetchedQuotes)) === null || _Object$values2 === void 0 ? void 0 : _Object$values2.length,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus,
            anonymizedData: true
          }
        });
        dispatch((0, _actions.setInitialGasEstimate)(selectedAggId));
      }
    } catch (e) {
      // A newer swap request is running, so simply bail and let the newer request respond
      if (e.message === _swaps2.SWAPS_FETCH_ORDER_CONFLICT) {
        _loglevel.default.debug(`Swap fetch order conflict detected; ignoring older request`);

        return;
      } // TODO: Check for any errors we should expect to occur in production, and report others to Sentry


      _loglevel.default.error(`Error fetching quotes: `, e);

      dispatch((0, _actions.setSwapsErrorKey)(_swaps2.ERROR_FETCHING_QUOTES));
    }

    dispatch(setFetchingQuotes(false));
  };
};

exports.fetchQuotesAndSetQuoteState = fetchQuotesAndSetQuoteState;

const signAndSendSwapsSmartTransaction = ({
  unsignedTransaction,
  trackEvent,
  history,
  additionalTrackingParams
}) => {
  return async (dispatch, getState) => {
    var _getTopQuote, _getQuotes, _getTopQuote2, _getTopQuote3, _usedQuote$savings, _usedQuote$savings2, _usedQuote$savings3, _usedQuote$savings4;

    dispatch(setSwapsSTXSubmitLoading(true));
    const state = getState();
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    const usedQuote = getUsedQuote(state);
    const swapsNetworkConfig = getSwapsNetworkConfig(state);
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch((0, _actions.setSmartTransactionsRefreshInterval)(swapsNetworkConfig === null || swapsNetworkConfig === void 0 ? void 0 : swapsNetworkConfig.stxBatchStatusRefreshTime));
    const usedTradeTxParams = usedQuote.trade; // update stx with data

    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote = getTopQuote(state)) === null || _getTopQuote === void 0 ? void 0 : _getTopQuote.aggregator,
      available_quotes: (_getQuotes = getQuotes(state)) === null || _getQuotes === void 0 ? void 0 : _getQuotes.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote2 = getTopQuote(state)) === null || _getTopQuote2 === void 0 ? void 0 : _getTopQuote2.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote3 = getTopQuote(state)) === null || _getTopQuote3 === void 0 ? void 0 : _getTopQuote3.aggregator) ? '' : usedQuote.aggregator,
      average_savings: (_usedQuote$savings = usedQuote.savings) === null || _usedQuote$savings === void 0 ? void 0 : _usedQuote$savings.total,
      performance_savings: (_usedQuote$savings2 = usedQuote.savings) === null || _usedQuote$savings2 === void 0 ? void 0 : _usedQuote$savings2.performance,
      fee_savings: (_usedQuote$savings3 = usedQuote.savings) === null || _usedQuote$savings3 === void 0 ? void 0 : _usedQuote$savings3.fee,
      median_metamask_fee: (_usedQuote$savings4 = usedQuote.savings) === null || _usedQuote$savings4 === void 0 ? void 0 : _usedQuote$savings4.medianMetaMaskFee,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus,
      ...additionalTrackingParams
    };
    trackEvent({
      event: 'STX Swap Started',
      category: _metametrics.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: swapMetaData
    });

    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    const approveTxParams = getApproveTxParams(state);
    let approvalTxUuid;
    let updatedApproveTxParams;

    try {
      var _fees$tradeTxFees;

      if (approveTxParams) {
        updatedApproveTxParams = { ...approveTxParams,
          value: '0x0'
        };
      }

      const fees = await dispatch(fetchSwapsSmartTransactionFees({
        unsignedTransaction,
        approveTxParams: updatedApproveTxParams,
        fallbackOnNotEnoughFunds: true
      }));

      if (!fees) {
        _loglevel.default.error('"fetchSwapsSmartTransactionFees" failed');

        dispatch(setSwapsSTXSubmitLoading(false));
        dispatch(setCurrentSmartTransactionsError(_swaps.stxErrorTypes.UNAVAILABLE));
        return;
      }

      if (approveTxParams) {
        var _fees$approvalTxFees;

        updatedApproveTxParams.gas = `0x${(0, _transactionsControllerUtils.decimalToHex)(((_fees$approvalTxFees = fees.approvalTxFees) === null || _fees$approvalTxFees === void 0 ? void 0 : _fees$approvalTxFees.gasLimit) || 0)}`;
        approvalTxUuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
          unsignedTransaction: updatedApproveTxParams,
          smartTransactionFees: fees.approvalTxFees
        }));
      }

      unsignedTransaction.gas = `0x${(0, _transactionsControllerUtils.decimalToHex)(((_fees$tradeTxFees = fees.tradeTxFees) === null || _fees$tradeTxFees === void 0 ? void 0 : _fees$tradeTxFees.gasLimit) || 0)}`;
      const uuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
        unsignedTransaction,
        smartTransactionFees: fees.tradeTxFees
      }));
      const destinationTokenAddress = destinationTokenInfo.address;
      const destinationTokenDecimals = destinationTokenInfo.decimals;
      const destinationTokenSymbol = destinationTokenInfo.symbol;
      const sourceTokenSymbol = sourceTokenInfo.symbol;
      await dispatch((0, _actions.updateSmartTransaction)(uuid, {
        origin: _app.ORIGIN_METAMASK,
        destinationTokenAddress,
        destinationTokenDecimals,
        destinationTokenSymbol,
        sourceTokenSymbol,
        swapMetaData,
        swapTokenValue,
        type: _transaction.TRANSACTION_TYPES.SWAP
      }));

      if (approvalTxUuid) {
        await dispatch((0, _actions.updateSmartTransaction)(approvalTxUuid, {
          origin: _app.ORIGIN_METAMASK,
          type: _transaction.TRANSACTION_TYPES.SWAP_APPROVAL,
          sourceTokenSymbol
        }));
      }

      history.push(_routes.SMART_TRANSACTION_STATUS_ROUTE);
      dispatch(setSwapsSTXSubmitLoading(false));
    } catch (e) {
      console.log('signAndSendSwapsSmartTransaction error', e);
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();

      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
      }
    }
  };
};

exports.signAndSendSwapsSmartTransaction = signAndSendSwapsSmartTransaction;

const signAndSendTransactions = (history, trackEvent, additionalTrackingParams) => {
  return async (dispatch, getState) => {
    var _usedQuote$approvalNe, _getTopQuote4, _getQuotes2, _getTopQuote5, _getTopQuote6, _usedQuote$savings5, _usedQuote$savings6, _usedQuote$savings7, _usedQuote$savings8, _finalApproveTxMeta;

    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));

    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }

    const customSwapsGas = getCustomSwapsGas(state);
    const customMaxFeePerGas = getCustomMaxFeePerGas(state);
    const customMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas(state);
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    await dispatch((0, _actions.setBackgroundSwapRouteState)('awaiting'));
    await dispatch((0, _actions.stopPollingForQuotes)());

    if (!hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }

    const {
      fast: fastGasEstimate
    } = getSwapGasPriceEstimateData(state);
    let maxFeePerGas;
    let maxPriorityFeePerGas;
    let baseAndPriorityFeePerGas;
    let decEstimatedBaseFee;

    if (networkAndAccountSupports1559) {
      const {
        high: {
          suggestedMaxFeePerGas,
          suggestedMaxPriorityFeePerGas
        },
        estimatedBaseFee = '0'
      } = (0, _metamask.getGasFeeEstimates)(state);
      decEstimatedBaseFee = (0, _conversions.decGWEIToHexWEI)(estimatedBaseFee);
      maxFeePerGas = customMaxFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas);
      maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
      baseAndPriorityFeePerGas = (0, _conversions.addHexes)(decEstimatedBaseFee, maxPriorityFeePerGas);
    }

    const usedQuote = getUsedQuote(state);
    const usedTradeTxParams = usedQuote.trade;
    const estimatedGasLimit = new _bignumber.default((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`, 16);
    const estimatedGasLimitWithMultiplier = estimatedGasLimit.times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
    const maxGasLimit = customSwapsGas || (usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? estimatedGasLimitWithMultiplier : `0x${(0, _transactionsControllerUtils.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`);
    const usedGasPrice = getUsedSwapsGasPrice(state);
    usedTradeTxParams.gas = maxGasLimit;

    if (networkAndAccountSupports1559) {
      usedTradeTxParams.maxFeePerGas = maxFeePerGas;
      usedTradeTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
      delete usedTradeTxParams.gasPrice;
    } else {
      usedTradeTxParams.gasPrice = usedGasPrice;
    }

    const usdConversionRate = (0, _selectors.getUSDConversionRate)(state);
    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const usedGasLimitEstimate = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _transactionsControllerUtils.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
    const totalGasLimitEstimate = new _bignumber.default(usedGasLimitEstimate, 16).plus(((_usedQuote$approvalNe = usedQuote.approvalNeeded) === null || _usedQuote$approvalNe === void 0 ? void 0 : _usedQuote$approvalNe.gas) || '0x0', 16).toString(16);
    const gasEstimateTotalInUSD = (0, _conversions.getValueFromWeiHex)({
      value: (0, _transactionsControllerUtils.calcGasTotal)(totalGasLimitEstimate, networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : usedGasPrice),
      toCurrency: 'usd',
      conversionRate: usdConversionRate,
      numberOfDecimals: 6
    });
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote4 = getTopQuote(state)) === null || _getTopQuote4 === void 0 ? void 0 : _getTopQuote4.aggregator,
      available_quotes: (_getQuotes2 = getQuotes(state)) === null || _getQuotes2 === void 0 ? void 0 : _getQuotes2.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote5 = getTopQuote(state)) === null || _getTopQuote5 === void 0 ? void 0 : _getTopQuote5.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote6 = getTopQuote(state)) === null || _getTopQuote6 === void 0 ? void 0 : _getTopQuote6.aggregator) ? '' : usedQuote.aggregator,
      gas_fees: gasEstimateTotalInUSD,
      estimated_gas: estimatedGasLimit.toString(10),
      suggested_gas_price: fastGasEstimate,
      used_gas_price: (0, _transactionsControllerUtils.hexWEIToDecGWEI)(usedGasPrice),
      average_savings: (_usedQuote$savings5 = usedQuote.savings) === null || _usedQuote$savings5 === void 0 ? void 0 : _usedQuote$savings5.total,
      performance_savings: (_usedQuote$savings6 = usedQuote.savings) === null || _usedQuote$savings6 === void 0 ? void 0 : _usedQuote$savings6.performance,
      fee_savings: (_usedQuote$savings7 = usedQuote.savings) === null || _usedQuote$savings7 === void 0 ? void 0 : _usedQuote$savings7.fee,
      median_metamask_fee: (_usedQuote$savings8 = usedQuote.savings) === null || _usedQuote$savings8 === void 0 ? void 0 : _usedQuote$savings8.medianMetaMaskFee,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: (0, _selectors.getHardwareWalletType)(state),
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus,
      ...additionalTrackingParams
    };

    if (networkAndAccountSupports1559) {
      swapMetaData.max_fee_per_gas = maxFeePerGas;
      swapMetaData.max_priority_fee_per_gas = maxPriorityFeePerGas;
      swapMetaData.base_and_priority_fee_per_gas = baseAndPriorityFeePerGas;
    }

    trackEvent({
      event: 'Swap Started',
      category: _metametrics.EVENT.CATEGORIES.SWAPS,
      sensitiveProperties: swapMetaData
    });

    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    let finalApproveTxMeta;
    const approveTxParams = getApproveTxParams(state); // For hardware wallets we go to the Awaiting Signatures page first and only after a user
    // completes 1 or 2 confirmations, we redirect to the Awaiting Swap page.

    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SIGNATURES_ROUTE);
    }

    if (approveTxParams) {
      if (networkAndAccountSupports1559) {
        approveTxParams.maxFeePerGas = maxFeePerGas;
        approveTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
        delete approveTxParams.gasPrice;
      }

      const approveTxMeta = await (0, _actions.addUnapprovedTransaction)({ ...approveTxParams,
        amount: '0x0'
      }, _transaction.TRANSACTION_TYPES.SWAP_APPROVAL);
      await dispatch((0, _actions.setApproveTxId)(approveTxMeta.id));
      finalApproveTxMeta = await dispatch((0, _actions.updateSwapApprovalTransaction)(approveTxMeta.id, {
        type: _transaction.TRANSACTION_TYPES.SWAP_APPROVAL,
        sourceTokenSymbol: sourceTokenInfo.symbol
      }));

      try {
        await dispatch((0, _actions.updateAndApproveTx)(finalApproveTxMeta, true));
      } catch (e) {
        await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
        history.push(_routes.SWAPS_ERROR_ROUTE);
        return;
      }
    }

    const tradeTxMeta = await (0, _actions.addUnapprovedTransaction)(usedTradeTxParams, _transaction.TRANSACTION_TYPES.SWAP);
    dispatch((0, _actions.setTradeTxId)(tradeTxMeta.id)); // The simulationFails property is added during the transaction controllers
    // addUnapprovedTransaction call if the estimateGas call fails. In cases
    // when no approval is required, this indicates that the swap will likely
    // fail. There was an earlier estimateGas call made by the swaps controller,
    // but it is possible that external conditions have change since then, and
    // a previously succeeding estimate gas call could now fail. By checking for
    // the `simulationFails` property here, we can reduce the number of swap
    // transactions that get published to the blockchain only to fail and thereby
    // waste the user's funds on gas.

    if (!approveTxParams && tradeTxMeta.simulationFails) {
      await dispatch((0, _actions.cancelTx)(tradeTxMeta, false));
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    const finalTradeTxMeta = await dispatch((0, _actions.updateSwapTransaction)(tradeTxMeta.id, {
      estimatedBaseFee: decEstimatedBaseFee,
      sourceTokenSymbol: sourceTokenInfo.symbol,
      destinationTokenSymbol: destinationTokenInfo.symbol,
      type: _transaction.TRANSACTION_TYPES.SWAP,
      destinationTokenDecimals: destinationTokenInfo.decimals,
      destinationTokenAddress: destinationTokenInfo.address,
      swapMetaData,
      swapTokenValue,
      approvalTxId: (_finalApproveTxMeta = finalApproveTxMeta) === null || _finalApproveTxMeta === void 0 ? void 0 : _finalApproveTxMeta.id
    }));

    try {
      await dispatch((0, _actions.updateAndApproveTx)(finalTradeTxMeta, true));
    } catch (e) {
      const errorKey = e.message.includes('EthAppPleaseEnableContractData') ? _swaps2.CONTRACT_DATA_DISABLED_ERROR : _swaps2.SWAP_FAILED_ERROR;
      await dispatch((0, _actions.setSwapsErrorKey)(errorKey));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    } // Only after a user confirms swapping on a hardware wallet (second `updateAndApproveTx` call above),
    // we redirect to the Awaiting Swap page.


    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }

    await (0, _actions.forceUpdateMetamaskState)(dispatch);
  };
};

exports.signAndSendTransactions = signAndSendTransactions;

function fetchMetaSwapsGasPriceEstimates() {
  return async (dispatch, getState) => {
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch(swapGasPriceEstimatesFetchStarted());
    let priceEstimates;

    try {
      priceEstimates = await (0, _swaps.fetchSwapsGasPrices)(chainId);
    } catch (e) {
      var _e$message;

      _loglevel.default.warn('Fetching swaps gas prices failed:', e);

      if (!((_e$message = e.message) !== null && _e$message !== void 0 && _e$message.match(/NetworkError|Fetch failed with status:/u))) {
        throw e;
      }

      dispatch(swapGasPriceEstimatesFetchFailed());

      try {
        const gasPrice = await global.ethQuery.gasPrice();
        const gasPriceInDecGWEI = (0, _transactionsControllerUtils.hexWEIToDecGWEI)(gasPrice.toString(10));
        dispatch(retrievedFallbackSwapsGasPrice(gasPriceInDecGWEI));
        return null;
      } catch (networkGasPriceError) {
        console.error(`Failed to retrieve fallback gas price: `, networkGasPriceError);
        return null;
      }
    }

    dispatch(swapGasPriceEstimatesFetchCompleted({
      priceEstimates
    }));
    return priceEstimates;
  };
}

function fetchSwapsSmartTransactionFees({
  unsignedTransaction,
  approveTxParams,
  fallbackOnNotEnoughFunds = false
}) {
  return async (dispatch, getState) => {
    const {
      swaps: {
        isFeatureFlagLoaded
      }
    } = getState();

    try {
      return await dispatch((0, _actions.fetchSmartTransactionFees)(unsignedTransaction, approveTxParams));
    } catch (e) {
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);

        if (fallbackOnNotEnoughFunds || (errorObj === null || errorObj === void 0 ? void 0 : errorObj.error) !== _swaps.stxErrorTypes.NOT_ENOUGH_FUNDS) {
          dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
        }
      }
    }

    return null;
  };
}

function cancelSwapsSmartTransaction(uuid) {
  return async (dispatch, getState) => {
    try {
      await dispatch((0, _actions.cancelSmartTransaction)(uuid));
    } catch (e) {
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();

      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
      }
    }
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\available-conversions.json", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\available-conversions.json
      return function (require, module, exports) {
module.exports=[
  {
    "code": "aud",
    "name": "Australian Dollar"
  },
  {
    "code": "hkd",
    "name": "Hong Kong Dollar"
  },
  {
    "code": "sgd",
    "name": "Singapore Dollar"
  },
  {
    "code": "idr",
    "name": "Indonesian Rupiah"
  },
  {
    "code": "inr",
    "name": "Indian Rupee"
  },
  {
    "code": "nzd",
    "name": "New Zealand Dollar"
  },
  {
    "code": "php",
    "name": "Philippine Peso"
  },
  {
    "code": "1st",
    "name": "FirstBlood"
  },
  {
    "code": "adt",
    "name": "adToken"
  },
  {
    "code": "adx",
    "name": "AdEx"
  },
  {
    "code": "ant",
    "name": "Aragon"
  },
  {
    "code": "bat",
    "name": "Basic Attention Token"
  },
  {
    "code": "bnt",
    "name": "Bancor"
  },
  {
    "code": "btc",
    "name": "Bitcoin"
  },
  {
    "code": "cad",
    "name": "Canadian Dollar"
  },
  {
    "code": "cfi",
    "name": "Cofound.it"
  },
  {
    "code": "crb",
    "name": "CreditBit"
  },
  {
    "code": "cvc",
    "name": "Civic"
  },
  {
    "code": "dash",
    "name": "Dash"
  },
  {
    "code": "dgd",
    "name": "DigixDAO"
  },
  {
    "code": "etc",
    "name": "Ethereum Classic"
  },
  {
    "code": "eur",
    "name": "Euro"
  },
  {
    "code": "fun",
    "name": "FunFair"
  },
  {
    "code": "gbp",
    "name": "Pound Sterling"
  },
  {
    "code": "gno",
    "name": "Gnosis"
  },
  {
    "code": "gnt",
    "name": "Golem"
  },
  {
    "code": "gup",
    "name": "Matchpool"
  },
  {
    "code": "hmq",
    "name": "Humaniq"
  },
  {
    "code": "jpy",
    "name": "Japanese Yen"
  },
  {
    "code": "lgd",
    "name": "Legends Room"
  },
  {
    "code": "lsk",
    "name": "Lisk"
  },
  {
    "code": "ltc",
    "name": "Litecoin"
  },
  {
    "code": "lun",
    "name": "Lunyr"
  },
  {
    "code": "mco",
    "name": "Monaco"
  },
  {
    "code": "mtl",
    "name": "Metal"
  },
  {
    "code": "myst",
    "name": "Mysterium"
  },
  {
    "code": "nmr",
    "name": "Numeraire"
  },
  {
    "code": "omg",
    "name": "OmiseGO"
  },
  {
    "code": "pay",
    "name": "TenX"
  },
  {
    "code": "ptoy",
    "name": "Patientory"
  },
  {
    "code": "qrl",
    "name": "Quantum-Resistant Ledger"
  },
  {
    "code": "qtum",
    "name": "Qtum"
  },
  {
    "code": "rep",
    "name": "Augur"
  },
  {
    "code": "rlc",
    "name": "iEx.ec"
  },
  {
    "code": "rub",
    "name": "Russian Ruble"
  },
  {
    "code": "sc",
    "name": "Siacoin"
  },
  {
    "code": "sngls",
    "name": "SingularDTV"
  },
  {
    "code": "snt",
    "name": "Status"
  },
  {
    "code": "steem",
    "name": "Steem"
  },
  {
    "code": "storj",
    "name": "Storj"
  },
  {
    "code": "time",
    "name": "ChronoBank"
  },
  {
    "code": "tkn",
    "name": "TokenCard"
  },
  {
    "code": "trst",
    "name": "WeTrust"
  },
  {
    "code": "uah",
    "name": "Ukrainian Hryvnia"
  },
  {
    "code": "usd",
    "name": "United States Dollar"
  },
  {
    "code": "wings",
    "name": "Wings"
  },
  {
    "code": "xem",
    "name": "NEM"
  },
  {
    "code": "xlm",
    "name": "Stellar Lumen"
  },
  {
    "code": "xmr",
    "name": "Monero"
  },
  {
    "code": "xrp",
    "name": "Ripple"
  },
  {
    "code": "zec",
    "name": "Zcash"
  },
  {
    "code": "dai",
    "name": "DAI"
  },
  {
    "code": "sai",
    "name": "SAI"
  }
]

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\connected-sites.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\connected-sites.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATUS_NOT_CONNECTED = exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = exports.STATUS_CONNECTED = void 0;
const STATUS_CONNECTED = 'STATUS_CONNECTED';
exports.STATUS_CONNECTED = STATUS_CONNECTED;
const STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = 'STATUS_CONNECTED_TO_ANOTHER_ACCOUNT';
exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;
const STATUS_NOT_CONNECTED = 'STATUS_NOT_CONNECTED';
exports.STATUS_NOT_CONNECTED = STATUS_NOT_CONNECTED;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\gas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PRIORITY_LEVEL_ICON_MAP = exports.GAS_FORM_ERRORS = void 0;
exports.getGasFormErrorText = getGasFormErrorText;
const GAS_FORM_ERRORS = {
  GAS_LIMIT_OUT_OF_BOUNDS: 'editGasLimitOutOfBounds',
  MAX_PRIORITY_FEE_TOO_LOW: 'editGasMaxPriorityFeeLow',
  MAX_FEE_TOO_LOW: 'editGasMaxFeeLow',
  MAX_PRIORITY_FEE_BELOW_MINIMUM: 'editGasMaxPriorityFeeBelowMinimum',
  MAX_PRIORITY_FEE_HIGH_WARNING: 'editGasMaxPriorityFeeHigh',
  MAX_FEE_HIGH_WARNING: 'editGasMaxFeeHigh',
  MAX_FEE_IMBALANCE: 'editGasMaxFeeImbalance',
  GAS_PRICE_TOO_LOW: 'editGasPriceTooLow'
};
exports.GAS_FORM_ERRORS = GAS_FORM_ERRORS;

function getGasFormErrorText(type, t, {
  minimumGasLimit
} = {}) {
  switch (type) {
    case GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS:
      return t('editGasLimitOutOfBounds', [minimumGasLimit]);

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW:
      return t('editGasMaxPriorityFeeLow');

    case GAS_FORM_ERRORS.MAX_FEE_TOO_LOW:
      return t('editGasMaxFeeLow');

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM:
      return t('editGasMaxPriorityFeeBelowMinimum');

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING:
      return t('editGasMaxPriorityFeeHigh');

    case GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING:
      return t('editGasMaxFeeHigh');

    case GAS_FORM_ERRORS.MAX_FEE_IMBALANCE:
      return t('editGasMaxFeePriorityImbalance');

    case GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW:
      return t('editGasPriceTooLow');

    default:
      return '';
  }
}

const PRIORITY_LEVEL_ICON_MAP = {
  low: '🐢',
  medium: '🦊',
  high: '🦍',
  dappSuggested: '🌐',
  swapSuggested: '🔄',
  custom: '⚙️'
};
exports.PRIORITY_LEVEL_ICON_MAP = PRIORITY_LEVEL_ICON_MAP;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\onboarding.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\onboarding.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FIRST_TIME_FLOW_TYPES = void 0;
const FIRST_TIME_FLOW_TYPES = {
  IMPORT: 'import',
  CREATE: 'create'
};
exports.FIRST_TIME_FLOW_TYPES = FIRST_TIME_FLOW_TYPES;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\settings.js", {"./routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\constants\settings.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SETTINGS_CONSTANTS = void 0;

var _routes = require("./routes");

const SETTINGS_CONSTANTS = [{
  tabMessage: t => t('general'),
  sectionMessage: t => t('currencyConversion'),
  descriptionMessage: t => t('currencyConversion'),
  route: `${_routes.GENERAL_ROUTE}#currency-conversion`,
  icon: 'fa fa-cog'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('primaryCurrencySetting'),
  descriptionMessage: t => t('primaryCurrencySettingDescription'),
  route: `${_routes.GENERAL_ROUTE}#primary-currency`,
  icon: 'fa fa-cog'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('currentLanguage'),
  descriptionMessage: t => t('currentLanguage'),
  route: `${_routes.GENERAL_ROUTE}#current-language`,
  icon: 'fa fa-cog'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('theme'),
  descriptionMessage: t => t('themeDescription'),
  route: `${_routes.GENERAL_ROUTE}#theme`,
  icon: 'fa fa-flask'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('accountIdenticon'),
  descriptionMessage: t => t('accountIdenticon'),
  route: `${_routes.GENERAL_ROUTE}#account-identicon`,
  icon: 'fa fa-cog'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('hideZeroBalanceTokens'),
  descriptionMessage: t => t('hideZeroBalanceTokens'),
  route: `${_routes.GENERAL_ROUTE}#zero-balancetokens`,
  icon: 'fa fa-cog'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('stateLogs'),
  descriptionMessage: t => t('stateLogsDescription'),
  route: `${_routes.ADVANCED_ROUTE}#state-logs`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('syncWithMobile'),
  descriptionMessage: t => t('syncWithMobile'),
  route: `${_routes.ADVANCED_ROUTE}#sync-withmobile`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('resetAccount'),
  descriptionMessage: t => t('resetAccountDescription'),
  route: `${_routes.ADVANCED_ROUTE}#reset-account`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showAdvancedGasInline'),
  descriptionMessage: t => t('showAdvancedGasInlineDescription'),
  route: `${_routes.ADVANCED_ROUTE}#advanced-gascontrols`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showHexData'),
  descriptionMessage: t => t('showHexDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#show-hexdata`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showFiatConversionInTestnets'),
  descriptionMessage: t => t('showFiatConversionInTestnetsDescription'),
  route: `${_routes.ADVANCED_ROUTE}#conversion-testnetworks`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showTestnetNetworks'),
  descriptionMessage: t => t('showTestnetNetworksDescription'),
  route: `${_routes.ADVANCED_ROUTE}#show-testnets`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('nonceField'),
  descriptionMessage: t => t('nonceFieldDescription'),
  route: `${_routes.ADVANCED_ROUTE}#customize-nonce`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('autoLockTimeLimit'),
  descriptionMessage: t => t('autoLockTimeLimitDescription'),
  route: `${_routes.ADVANCED_ROUTE}#autolock-timer`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('ipfsGateway'),
  descriptionMessage: t => t('ipfsGatewayDescription'),
  route: `${_routes.ADVANCED_ROUTE}#ipfs-gateway`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('preferredLedgerConnectionType'),
  descriptionMessage: t => t('preferredLedgerConnectionType'),
  route: `${_routes.ADVANCED_ROUTE}#ledger-connection`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('dismissReminderField'),
  descriptionMessage: t => t('dismissReminderDescriptionField'),
  route: `${_routes.ADVANCED_ROUTE}#dimiss-secretrecovery`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('contacts'),
  sectionMessage: t => t('contacts'),
  descriptionMessage: t => t('contacts'),
  route: _routes.CONTACT_LIST_ROUTE,
  icon: 'fa fa-address-book'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('revealSeedWords'),
  descriptionMessage: t => t('revealSeedWords'),
  route: `${_routes.SECURITY_ROUTE}#reveal-secretrecovery`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('showIncomingTransactions'),
  descriptionMessage: t => t('showIncomingTransactionsDescription'),
  route: `${_routes.SECURITY_ROUTE}#incoming-transaction`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('usePhishingDetection'),
  descriptionMessage: t => t('usePhishingDetectionDescription'),
  route: `${_routes.SECURITY_ROUTE}#phishing-detection`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('participateInMetaMetrics'),
  descriptionMessage: t => t('participateInMetaMetricsDescription'),
  route: `${_routes.SECURITY_ROUTE}#metrametrics`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('alerts'),
  sectionMessage: t => t('alertSettingsUnconnectedAccount'),
  descriptionMessage: t => t('alertSettingsUnconnectedAccount'),
  route: `${_routes.ALERTS_ROUTE}#unconnected-account`,
  icon: 'fa fa-bell'
}, {
  tabMessage: t => t('alerts'),
  sectionMessage: t => t('alertSettingsWeb3ShimUsage'),
  descriptionMessage: t => t('alertSettingsWeb3ShimUsage'),
  route: `${_routes.ALERTS_ROUTE}#web3-shimusage`,
  icon: 'fa fa-bell'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('mainnet'),
  descriptionMessage: t => t('mainnet'),
  route: `${_routes.NETWORKS_ROUTE}#networks-mainnet`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('goerli'),
  descriptionMessage: t => t('goerli'),
  route: `${_routes.NETWORKS_ROUTE}#networks-goerli`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('sepolia'),
  descriptionMessage: t => t('sepolia'),
  route: `${_routes.NETWORKS_ROUTE}#networks-sepolia`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('localhost'),
  descriptionMessage: t => t('localhost'),
  route: `${_routes.NETWORKS_ROUTE}#networks-localhost`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('metamaskVersion'),
  descriptionMessage: t => t('builtAroundTheWorld'),
  route: `${_routes.ABOUT_US_ROUTE}#version`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('links'),
  descriptionMessage: t => t('links'),
  route: `${_routes.ABOUT_US_ROUTE}#links`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('privacyMsg'),
  descriptionMessage: t => t('privacyMsg'),
  route: `${_routes.ABOUT_US_ROUTE}#privacy-policy`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('terms'),
  descriptionMessage: t => t('terms'),
  route: `${_routes.ABOUT_US_ROUTE}#terms`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('attributions'),
  descriptionMessage: t => t('attributions'),
  route: `${_routes.ABOUT_US_ROUTE}#attributions`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('supportCenter'),
  descriptionMessage: t => t('supportCenter'),
  route: `${_routes.ABOUT_US_ROUTE}#supportcenter`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('visitWebSite'),
  descriptionMessage: t => t('visitWebSite'),
  route: `${_routes.ABOUT_US_ROUTE}#visitwebsite`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('contactUs'),
  descriptionMessage: t => t('contactUs'),
  route: `${_routes.ABOUT_US_ROUTE}#contactus`,
  icon: 'fa fa-info-circle'
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('enableEIP1559V2'),
  descriptionMessage: t => t('enableEIP1559V2Description'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#enable-advanced-gas`,
  icon: 'fa fa-flask'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('enhancedTokenDetection'),
  descriptionMessage: t => t('enhancedTokenDetectionDescription'),
  route: `${_routes.ADVANCED_ROUTE}#token-description`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('enableOpenSeaAPI'),
  descriptionMessage: t => t('enableOpenSeaAPIDescription'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#opensea-api`,
  icon: 'fa fa-flask',
  featureFlag: 'COLLECTIBLES_V1'
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('useCollectibleDetection'),
  descriptionMessage: t => t('useCollectibleDetectionDescription'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#autodetect-nfts`,
  icon: 'fa fa-flask',
  featureFlag: 'COLLECTIBLES_V1'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('backupUserData'),
  descriptionMessage: t => t('backupUserDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#backup-userdata`,
  icon: 'fas fa-download'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('restoreUserData'),
  descriptionMessage: t => t('restoreUserDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#restore-userdata`,
  icon: 'fas fa-upload'
}];
exports.SETTINGS_CONSTANTS = SETTINGS_CONSTANTS;


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js", {"../../constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\authenticated\authenticated.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Authenticated;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Authenticated(props) {
  const {
    isUnlocked,
    completedOnboarding
  } = props;

  switch (true) {
    case isUnlocked && completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);

    case !completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: false ? _routes.ONBOARDING_ROUTE : _routes.INITIALIZE_ROUTE
        }
      });

    default:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.UNLOCK_ROUTE
        }
      });
  }
}

Authenticated.propTypes = {
  isUnlocked: _propTypes.default.bool,
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js", {"./authenticated.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\authenticated\authenticated.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _authenticated = _interopRequireDefault(require("./authenticated.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked,
      completedOnboarding
    }
  } = state;
  return {
    isUnlocked,
    completedOnboarding
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_authenticated.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\index.js", {"./authenticated.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\authenticated\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _authenticated.default;
  }
});

var _authenticated = _interopRequireDefault(require("./authenticated.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\feature-toggled-route.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\feature-toggled-route.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FeatureToggledRoute;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function FeatureToggledRoute({
  flag,
  redirectRoute,
  ...props
}) {
  if (flag) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);
  }

  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: redirectRoute
    }
  });
}

FeatureToggledRoute.propTypes = {
  flag: _propTypes.default.bool.isRequired,
  redirectRoute: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\index.js", {"./initialized.container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\initialized\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _initialized.default;
  }
});

var _initialized = _interopRequireDefault(require("./initialized.container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js", {"../../constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\initialized\initialized.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Initialized;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Initialized(props) {
  return props.completedOnboarding ? /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: false ? _routes.ONBOARDING_ROUTE : _routes.INITIALIZE_ROUTE
    }
  });
}

Initialized.propTypes = {
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js", {"./initialized.component":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\initialized\initialized.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _initialized = _interopRequireDefault(require("./initialized.component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mapStateToProps = state => {
  const {
    metamask: {
      completedOnboarding
    }
  } = state;
  return {
    completedOnboarding
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_initialized.default);

exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js", {"./with-modal-props":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\with-modal-props.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\with-modal-props\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _withModalProps.default;
  }
});

var _withModalProps = _interopRequireDefault(require("./with-modal-props"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\with-modal-props.js", {"../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\higher-order-components\with-modal-props\with-modal-props.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withModalProps;

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

const mapStateToProps = state => {
  const {
    appState
  } = state;
  const {
    props: modalProps
  } = appState.modal.modalState;
  return { ...modalProps
  };
};

const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)())
  };
};

function withModalProps(Component) {
  return (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\build-types.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\build-types.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBuildSpecificAsset = getBuildSpecificAsset;
exports.isBeta = isBeta;
const assetList = {
  main: {
    // Will use default provided by the @metamask/logo library
    foxMeshJson: undefined
  }
};

function isBeta() {
  return "main" === 'beta';
} // Returns a specific version of an asset based on
// the current metamask version (i.e. main, beta, etc.)


function getBuildSpecificAsset(assetName) {
  const buildType = "main";

  if (!assetList[buildType] || !Object.keys(assetList[buildType]).includes(assetName)) {
    console.error(`Cannot find asset "${assetName}" for build "${buildType}", returning main build asset.`);
    return assetList.main[assetName];
  }

  return assetList[buildType][assetName];
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\common.util.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\common.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camelCaseToCapitalize = camelCaseToCapitalize;

function camelCaseToCapitalize(str = '') {
  return str.replace(/([A-Z])/gu, ' $1').replace(/^./u, s => s.toUpperCase());
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\export-utils.js", {"./util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\export-utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportAsFile = exportAsFile;

var _util = require("./util");

function exportAsFile(filename, data, type = 'text/csv') {
  // eslint-disable-next-line no-param-reassign
  filename = filename || (0, _util.getRandomFileName)(); // source: https://stackoverflow.com/a/33542499 by Ludovic Feltz

  const blob = new window.Blob([data], {
    type
  });

  if (window.navigator.msSaveOrOpenBlob) {
    window.navigator.msSaveBlob(blob, filename);
  } else {
    const elem = window.document.createElement('a');
    elem.target = '_blank';
    elem.href = window.URL.createObjectURL(blob);
    elem.download = filename;
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  }
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","./util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","ethereumjs-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\gas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addTenPercent = addTenPercent;
exports.addTenPercentAndRound = addTenPercentAndRound;
exports.editGasModeIsSpeedUpOrCancel = editGasModeIsSpeedUpOrCancel;
exports.formatGasFeeOrFeeRange = formatGasFeeOrFeeRange;
exports.gasEstimateGreaterThanGasUsedPlusTenPercent = void 0;
exports.isMetamaskSuggestedGasEstimate = isMetamaskSuggestedGasEstimate;

var _lodash = require("lodash");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethereumjsUtil = require("ethereumjs-util");

var _gas = require("../../../shared/constants/gas");

var _conversion = require("../../../shared/modules/conversion.utils");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const gasEstimateGreaterThanGasUsedPlusTenPercent = (gasUsed, gasFeeEstimates, estimate) => {
  var _gasFeeEstimates$esti;

  let {
    maxFeePerGas: maxFeePerGasInTransaction
  } = gasUsed;
  maxFeePerGasInTransaction = new _bignumber.default((0, _transactionsControllerUtils.hexWEIToDecGWEI)(addTenPercentAndRound(maxFeePerGasInTransaction)));
  const maxFeePerGasFromEstimate = (_gasFeeEstimates$esti = gasFeeEstimates[estimate]) === null || _gasFeeEstimates$esti === void 0 ? void 0 : _gasFeeEstimates$esti.suggestedMaxFeePerGas;
  return (0, _util.bnGreaterThan)(maxFeePerGasFromEstimate, maxFeePerGasInTransaction);
};
/**
 * Simple helper to save on duplication to multiply the supplied wei hex string
 * by 1.10 to get bare minimum new gas fee.
 *
 * @param {string | undefined} hexStringValue - hex value in wei to be incremented
 * @param conversionOptions
 * @returns {string | undefined} hex value in WEI 10% higher than the param.
 */


exports.gasEstimateGreaterThanGasUsedPlusTenPercent = gasEstimateGreaterThanGasUsedPlusTenPercent;

function addTenPercent(hexStringValue, conversionOptions = {}) {
  if (hexStringValue === undefined) {
    return undefined;
  }

  return (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(hexStringValue, 1.1, {
    toNumericBase: 'hex',
    multiplicandBase: 16,
    multiplierBase: 10,
    numberOfDecimals: 0,
    ...conversionOptions
  }));
}
/**
 * Simple helper to save on duplication to multiply the supplied wei hex string
 * by 1.10 to get bare minimum new gas fee.
 *
 * @param {string | undefined} hexStringValue - hex value in wei to be incremented
 * @returns {string | undefined} hex value in WEI 10% higher than the param.
 */


function addTenPercentAndRound(hexStringValue) {
  return addTenPercent(hexStringValue, {
    numberOfDecimals: 0
  });
}

function isMetamaskSuggestedGasEstimate(estimate) {
  return [_gas.GAS_RECOMMENDATIONS.HIGH, _gas.GAS_RECOMMENDATIONS.MEDIUM, _gas.GAS_RECOMMENDATIONS.LOW].includes(estimate);
}
/**
 * Formats a singular gas fee or a range of gas fees by rounding them to the
 * given precisions and then arranging them as a string.
 *
 * @param {string | [string, string] | null | undefined} feeOrFeeRange - The fee
 * in GWEI or range of fees in GWEI.
 * @param {object} options - The options.
 * @param {number | [number, number]} options.precision - The precision(s) to
 * use when formatting the fee(s).
 * @returns A string which represents the formatted version of the fee or fee
 * range.
 */


function formatGasFeeOrFeeRange(feeOrFeeRange, {
  precision: precisionOrPrecisions = 2
} = {}) {
  if ((0, _util.isNullish)(feeOrFeeRange) || Array.isArray(feeOrFeeRange) && feeOrFeeRange.length === 0) {
    return null;
  }

  const range = Array.isArray(feeOrFeeRange) ? feeOrFeeRange.slice(0, 2) : [feeOrFeeRange];
  const precisions = Array.isArray(precisionOrPrecisions) ? precisionOrPrecisions.slice(0, 2) : (0, _lodash.times)(range.length, (0, _lodash.constant)(precisionOrPrecisions));
  const formattedRange = (0, _lodash.uniq)((0, _lodash.zip)(range, precisions).map(([fee, precision]) => {
    return precision === undefined ? fee : (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(fee, precision);
  })).join(' - ');
  return `${formattedRange} GWEI`;
}
/**
 * Helper method for determining whether an edit gas mode is either a speed up or cancel transaction
 *
 * @param {string | undefined} editGasMode - One of 'speed-up', 'cancel', 'modify-in-place', or 'swaps'
 * @returns boolean
 */


function editGasModeIsSpeedUpOrCancel(editGasMode) {
  return editGasMode === _gas.EDIT_GAS_MODES.CANCEL || editGasMode === _gas.EDIT_GAS_MODES.SPEED_UP;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\hardware.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\hardware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHardwareKeyring = isHardwareKeyring;

function isHardwareKeyring(keyringType = '') {
  return keyringType.includes('Hardware');
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\icon-factory.js", {"../../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\icon-factory.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = iconFactoryGenerator;

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

let iconFactory;

function iconFactoryGenerator(jazzicon) {
  if (!iconFactory) {
    iconFactory = new IconFactory(jazzicon);
  }

  return iconFactory;
}

function IconFactory(jazzicon) {
  this.jazzicon = jazzicon;
  this.cache = {};
}

IconFactory.prototype.iconForAddress = function (address, diameter, tokenMetadata) {
  if (iconExistsFor(address, tokenMetadata)) {
    return imageElFor(tokenMetadata);
  }

  return this.generateIdenticonSvg(address, diameter);
}; // returns svg dom element


IconFactory.prototype.generateIdenticonSvg = function (address, diameter) {
  const cacheId = `${address}:${diameter}`; // check cache, lazily generate and populate cache

  const identicon = this.cache[cacheId] || (this.cache[cacheId] = this.generateNewIdenticon(address, diameter)); // create a clean copy so you can modify it

  const cleanCopy = identicon.cloneNode(true);
  return cleanCopy;
}; // creates a new identicon


IconFactory.prototype.generateNewIdenticon = function (address, diameter) {
  const numericRepresentation = jsNumberForAddress(address);
  const identicon = this.jazzicon(diameter, numericRepresentation);
  return identicon;
}; // util


function iconExistsFor(address, tokenMetadata) {
  return (0, _hexstringUtils.isValidHexAddress)(address, {
    allowNonPrefixed: false
  }) && tokenMetadata && tokenMetadata.iconUrl;
}

function imageElFor(tokenMetadata = {}) {
  const img = document.createElement('img');
  img.src = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : tokenMetadata.iconUrl;
  img.style.width = '100%';
  return img;
}

function jsNumberForAddress(address) {
  const addr = address.slice(2, 10);
  const seed = parseInt(addr, 16);
  return seed;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\is-mobile-view.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\is-mobile-view.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Checks if viewport at invoke time fits mobile dimensions
// isMobileView :: () => Bool
const isMobileView = () => window.matchMedia('screen and (max-width: 575px)').matches;

var _default = isMobileView;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\metrics.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\metrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMethodName = getMethodName;

function getMethodName(camelCase) {
  if (!camelCase || typeof camelCase !== 'string') {
    return '';
  }

  return camelCase.replace(/([a-z])([A-Z])/gu, '$1 $2').replace(/([A-Z])([a-z])/gu, ' $1$2').replace(/ +/gu, ' ');
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\permission.js", {"../../../shared/constants/permissions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\permissions.ts","deep-freeze-strict":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\deep-freeze-strict\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\permission.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPermissionDescription = void 0;

var _deepFreezeStrict = _interopRequireDefault(require("deep-freeze-strict"));

var _permissions = require("../../../shared/constants/permissions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const UNKNOWN_PERMISSION = Symbol('unknown');
const PERMISSION_DESCRIPTIONS = (0, _deepFreezeStrict.default)({
  [_permissions.RestrictedMethods.eth_accounts]: {
    label: t => t('permission_ethereumAccounts'),
    leftIcon: 'fas fa-eye',
    rightIcon: null
  },
  [UNKNOWN_PERMISSION]: {
    label: (t, permissionName) => t('permission_unknown', [permissionName !== null && permissionName !== void 0 ? permissionName : 'undefined']),
    leftIcon: 'fas fa-times-circle',
    rightIcon: null
  }
});
/**
 * @typedef {object} PermissionLabelObject
 * @property {string} label - The text label.
 * @property {string} leftIcon - The left icon.
 * @property {string} rightIcon - The right icon.
 */

/**
 * @param {Function} t - The translation function
 * @param {string} permissionName - The name of the permission to request
 * @param {object} permissionValue - The value of the permission to request
 * @returns {(permissionName:string) => PermissionLabelObject}
 */

const getPermissionDescription = (t, permissionName, permissionValue) => {
  let value = PERMISSION_DESCRIPTIONS[UNKNOWN_PERMISSION];

  if (Object.hasOwnProperty.call(PERMISSION_DESCRIPTIONS, permissionName)) {
    value = PERMISSION_DESCRIPTIONS[permissionName];
  }

  return { ...value,
    label: value.label(t, permissionName, permissionValue)
  };
};

exports.getPermissionDescription = getPermissionDescription;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\settings-search.js", {"../constants/settings":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\settings.js","_process":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\process\\browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\settings-search.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNumberOfSettingsInSection = getNumberOfSettingsInSection;
exports.getSettingsRoutes = getSettingsRoutes;
exports.handleSettingsRefs = handleSettingsRefs;
exports.highlightSearchedText = highlightSearchedText;

var _settings = require("../constants/settings");

/* eslint-disable require-unicode-regexp */
let settingsRoutes;

function getSettingsRoutes() {
  if (settingsRoutes) {
    return settingsRoutes;
  }

  settingsRoutes = _settings.SETTINGS_CONSTANTS.filter(routeObject => routeObject.featureFlag ? process.env[routeObject.featureFlag] : true);
  return settingsRoutes;
}

function getFilteredSettingsRoutes(t, tabMessage) {
  return getSettingsRoutes().filter(routeObject => {
    return routeObject.tabMessage(t) === tabMessage;
  });
}

function getNumberOfSettingsInSection(t, tabMessage) {
  return getFilteredSettingsRoutes(t, tabMessage).length;
}

function handleSettingsRefs(t, tabMessage, settingsRefs) {
  const settingsSearchJsonFiltered = getFilteredSettingsRoutes(t, tabMessage);
  const settingsRefsIndex = settingsSearchJsonFiltered.findIndex(routeObject => routeObject.route.substring(1) === window.location.hash.substring(1));

  if (settingsRefsIndex === -1) {
    return;
  }

  const settingsRef = settingsSearchJsonFiltered.length === 1 ? settingsRefs : settingsRefs[settingsRefsIndex];

  if (settingsRef !== null && settingsRef !== void 0 && settingsRef.current) {
    settingsRef.current.scrollIntoView({
      behavior: 'smooth'
    });
    settingsRef.current.focus();
    const historySettingsUrl = window.location.hash.split('#')[1];
    window.location.hash = historySettingsUrl;
  }
}

function colorText(menuElement, regex) {
  if (menuElement !== null) {
    let elemText = menuElement.innerHTML;
    elemText = elemText.replace('&amp;', '&');
    elemText = elemText.replace(/(<span style="background:#ffd33d">|<\/span>)/gim, '');
    menuElement.innerHTML = elemText.replace(regex, '<span style="background:#ffd33d">$&</span>');
  }
}

function highlightSearchedText() {
  const searchElem = document.getElementById('search-settings');
  const searchRegex = new RegExp(searchElem.value, 'gi');
  const results = document.querySelectorAll('.settings-page__header__search__list__item');
  [...results].forEach(element => {
    const menuTabElement = element.querySelector('.settings-page__header__search__list__item__tab');
    const menuSectionElement = element.querySelector('.settings-page__header__search__list__item__section');
    colorText(menuTabElement, searchRegex);
    colorText(menuSectionElement, searchRegex);
  });
}


}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js", {"../../../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\helpers\utils\webcam-utils.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _app = require("../../../shared/constants/app");

var _util = require("../../../app/scripts/lib/util");

class WebcamUtils {
  static async checkStatus() {
    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

    const isFirefoxOrBrave = (0, _util.getPlatform)() === (_app.PLATFORM_FIREFOX || _app.PLATFORM_BRAVE);

    const devices = await window.navigator.mediaDevices.enumerateDevices();
    const webcams = devices.filter(device => device.kind === 'videoinput');
    const hasWebcam = webcams.length > 0; // A non-empty-string label implies that the webcam has been granted permission, as
    // otherwise the label is kept blank to prevent fingerprinting

    const hasWebcamPermissions = webcams.some(webcam => webcam.label && webcam.label.length > 0);

    if (hasWebcam) {
      let environmentReady = true;

      if (isFirefoxOrBrave && isPopup || isPopup && !hasWebcamPermissions) {
        environmentReady = false;
      }

      return {
        permissions: hasWebcamPermissions,
        environmentReady
      };
    }

    const error = new Error('No webcam found');
    error.type = 'NO_WEBCAM_FOUND';
    throw error;
  }

}

var _default = WebcamUtils;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasEstimates.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/gas.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\gas.utils.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../useCurrencyDisplay":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","../useUserPreferencedCurrency":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useGasEstimates.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasEstimates = useGasEstimates;

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _gas2 = require("../../../shared/modules/gas.utils");

var _common = require("../../helpers/constants/common");

var _selectors = require("../../selectors");

var _conversions = require("../../helpers/utils/conversions.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

/**
 * @typedef {object} GasEstimatesReturnType
 * @property {string} [estimatedMinimumFiat] - The amount estimated to be paid
 *  based on current network conditions. Expressed in user's preferred currency.
 * @property {string} [estimatedMaximumFiat] - the maximum amount estimated to be paid if current
 *  network transaction volume increases. Expressed in user's preferred currency.
 * @property {string} [estimatedMaximumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {string} [estimatedMinimumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {HexWeiString} [estimatedBaseFee] - estimatedBaseFee from fee-market gasFeeEstimates
 *  in HexWei.
 * @property {HexWeiString} [minimumCostInHexWei] - the minimum amount this transaction will cost.
 */

/**
 * @param options
 * @param options.editGasMode
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.gasLimit
 * @param options.gasPrice
 * @param options.maxFeePerGas
 * @param options.maxPriorityFeePerGas
 * @param options.minimumGasLimit
 * @param options.transaction
 * @returns {GasEstimatesReturnType} The gas estimates.
 */
function useGasEstimates({
  editGasMode,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  gasPrice,
  maxFeePerGas,
  maxPriorityFeePerGas,
  minimumGasLimit,
  transaction
}) {
  var _gasFeeEstimates$esti2;

  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const {
    currency: primaryCurrency,
    numberOfDecimals: primaryNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.PRIMARY); // We have two helper methods that take an object that can have either
  // gasPrice OR the EIP-1559 fields on it, plus gasLimit. This object is
  // conditionally set to the appropriate fields to compute the minimum
  // and maximum cost of a transaction given the current estimates or selected
  // gas fees.

  let gasSettings = {
    gasLimit: (0, _transactionsControllerUtils.decimalToHex)(gasLimit)
  };

  if (supportsEIP1559) {
    var _gasFeeEstimates$esti;

    gasSettings = { ...gasSettings,
      maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxFeePerGas || gasPrice || '0'),
      maxPriorityFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxPriorityFeePerGas || maxFeePerGas || gasPrice || '0'),
      baseFeePerGas: (0, _conversions.decGWEIToHexWEI)((_gasFeeEstimates$esti = gasFeeEstimates.estimatedBaseFee) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : '0')
    };
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE) {
    gasSettings = { ...gasSettings,
      gasPrice: '0x0'
    };
  } else {
    gasSettings = { ...gasSettings,
      gasPrice: (0, _conversions.decGWEIToHexWEI)(gasPrice)
    };
  } // The maximum amount this transaction will cost


  const maximumCostInHexWei = (0, _gas2.getMaximumGasTotalInHexWei)(gasSettings);

  if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
    gasSettings = { ...gasSettings,
      gasLimit: minimumGasLimit
    };
  } // The minimum amount this transaction will cost


  const minimumCostInHexWei = (0, _gas2.getMinimumGasTotalInHexWei)(gasSettings); // The estimated total amount of native currency that will be expended
  // given the selected gas fees.

  const [estimatedMaximumNative] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  });
  const [, {
    value: estimatedMaximumFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  const [estimatedMinimumNative] = (0, _useCurrencyDisplay.useCurrencyDisplay)(minimumCostInHexWei, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  }); // We also need to display our closest estimate of the low end of estimation
  // in fiat.

  const [, {
    value: estimatedMinimumFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(minimumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  return {
    estimatedMaximumFiat: showFiat ? estimatedMaximumFiat : '',
    estimatedMinimumFiat: showFiat ? estimatedMinimumFiat : '',
    estimatedMaximumNative,
    estimatedMinimumNative,
    estimatedBaseFee: supportsEIP1559 ? (0, _conversions.decGWEIToHexWEI)((_gasFeeEstimates$esti2 = gasFeeEstimates.estimatedBaseFee) !== null && _gasFeeEstimates$esti2 !== void 0 ? _gasFeeEstimates$esti2 : '0') : undefined,
    maximumCostInHexWei,
    minimumCostInHexWei
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeErrors.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../helpers/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useGasFeeErrors.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeErrors = useGasFeeErrors;

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _conversion = require("../../../shared/modules/conversion.utils");

var _selectors = require("../../selectors");

var _conversions = require("../../helpers/utils/conversions.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _util = require("../../helpers/utils/util");

var _gas2 = require("../../helpers/constants/gas");

const HIGH_FEE_WARNING_MULTIPLIER = 1.5;

const validateGasLimit = (gasLimit, minimumGasLimit) => {
  const gasLimitTooLow = (0, _conversion.conversionLessThan)({
    value: gasLimit,
    fromNumericBase: 'dec'
  }, {
    value: minimumGasLimit || _gas.GAS_LIMITS.SIMPLE,
    fromNumericBase: 'hex'
  });

  if (gasLimitTooLow) {
    return _gas2.GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS;
  }

  return undefined;
};

const validateMaxPriorityFee = (maxPriorityFeePerGas, supportsEIP1559) => {
  if (!supportsEIP1559) {
    return undefined;
  }

  if ((0, _util.bnLessThanEqualTo)(maxPriorityFeePerGas, 0)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM;
  }

  return undefined;
};

const validateMaxFee = (maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559) => {
  if (maxPriorityFeeError || !supportsEIP1559) {
    return undefined;
  }

  if ((0, _util.bnGreaterThan)(maxPriorityFeePerGas, maxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_IMBALANCE;
  }

  return undefined;
};

const validateGasPrice = (isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction) => {
  var _transaction$txParams;

  if (supportsEIP1559 && isFeeMarketGasEstimate) {
    return undefined;
  }

  if ((!supportsEIP1559 || transaction !== null && transaction !== void 0 && (_transaction$txParams = transaction.txParams) !== null && _transaction$txParams !== void 0 && _transaction$txParams.gasPrice) && (0, _util.bnLessThanEqualTo)(gasPrice, 0)) {
    return _gas2.GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW;
  }

  return undefined;
};

const getMaxPriorityFeeWarning = (gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low;

  if (!supportsEIP1559 || !isFeeMarketGasEstimate || isGasEstimatesLoading) {
    return undefined;
  }

  if ((0, _util.bnLessThan)(maxPriorityFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low = gasFeeEstimates.low) === null || _gasFeeEstimates$low === void 0 ? void 0 : _gasFeeEstimates$low.suggestedMaxPriorityFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW;
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxPriorityFeePerGas, gasFeeEstimates.high.suggestedMaxPriorityFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING;
  }

  return undefined;
};

const getMaxFeeWarning = (gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low2;

  if (maxPriorityFeeError || maxFeeError || !isFeeMarketGasEstimate || !supportsEIP1559 || isGasEstimatesLoading) {
    return undefined;
  }

  if ((0, _util.bnLessThan)(maxFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low2 = gasFeeEstimates.low) === null || _gasFeeEstimates$low2 === void 0 ? void 0 : _gasFeeEstimates$low2.suggestedMaxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW;
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxFeePerGas, gasFeeEstimates.high.suggestedMaxFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING;
  }

  return undefined;
};

const hasBalanceError = (minimumCostInHexWei, transaction, ethBalance) => {
  var _transaction$txParams2;

  if (minimumCostInHexWei === undefined || ethBalance === undefined) {
    return false;
  }

  const minimumTxCostInHexWei = (0, _conversions.addHexes)(minimumCostInHexWei, (transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.value) || '0x0');
  return (0, _conversion.conversionGreaterThan)({
    value: minimumTxCostInHexWei,
    fromNumericBase: 'hex'
  }, {
    value: ethBalance,
    fromNumericBase: 'hex'
  });
};
/**
 * @typedef {object} GasFeeErrorsReturnType
 * @property {object} [gasErrors] - combined map of errors and warnings.
 * @property {boolean} [hasGasErrors] - true if there are errors that can block submission.
 * @property {object} gasWarnings - map of gas warnings for EIP-1559 fields.
 * @property {boolean} [balanceError] - true if user balance is less than transaction value.
 * @property {boolean} [estimatesUnavailableWarning] - true if supportsEIP1559 is true and
 * estimate is not of type fee-market.
 */

/**
 * @param options
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.isGasEstimatesLoading
 * @param options.gasLimit
 * @param options.gasPrice
 * @param options.maxPriorityFeePerGas
 * @param options.maxFeePerGas
 * @param options.minimumCostInHexWei
 * @param options.minimumGasLimit
 * @param options.transaction
 * @returns {GasFeeErrorsReturnType}
 */


function useGasFeeErrors({
  gasEstimateType,
  gasFeeEstimates,
  isGasEstimatesLoading,
  gasLimit,
  gasPrice,
  maxPriorityFeePerGas,
  maxFeePerGas,
  minimumCostInHexWei,
  minimumGasLimit,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const isFeeMarketGasEstimate = gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET; // Get all errors

  const gasLimitError = validateGasLimit(gasLimit, minimumGasLimit);
  const maxPriorityFeeError = validateMaxPriorityFee(maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeError = validateMaxFee(maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559);
  const gasPriceError = validateGasPrice(isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction); // Get all warnings

  const maxPriorityFeeWarning = getMaxPriorityFeeWarning(gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeWarning = getMaxFeeWarning(gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559); // Separating errors from warnings so we can know which value problems
  // are blocking or simply useful information for the users

  const gasErrors = (0, _react.useMemo)(() => {
    const errors = {};

    if (gasLimitError) {
      errors.gasLimit = gasLimitError;
    }

    if (maxPriorityFeeError) {
      errors.maxPriorityFee = maxPriorityFeeError;
    }

    if (maxFeeError) {
      errors.maxFee = maxFeeError;
    }

    if (gasPriceError) {
      errors.gasPrice = gasPriceError;
    }

    return errors;
  }, [gasLimitError, maxPriorityFeeError, maxFeeError, gasPriceError]);
  const gasWarnings = (0, _react.useMemo)(() => {
    const warnings = {};

    if (maxPriorityFeeWarning) {
      warnings.maxPriorityFee = maxPriorityFeeWarning;
    }

    if (maxFeeWarning) {
      warnings.maxFee = maxFeeWarning;
    }

    return warnings;
  }, [maxPriorityFeeWarning, maxFeeWarning]);
  const estimatesUnavailableWarning = supportsEIP1559 && !isFeeMarketGasEstimate; // Determine if we have any errors which should block submission

  const hasGasErrors = Boolean(Object.keys(gasErrors).length); // Combine the warnings and errors into one object for easier use within the UI.
  // This object should have no effect on whether or not the user can submit the form

  const errorsAndWarnings = (0, _react.useMemo)(() => ({ ...gasWarnings,
    ...gasErrors
  }), [gasErrors, gasWarnings]);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const balanceError = hasBalanceError(minimumCostInHexWei, transaction, ethBalance);
  return {
    gasErrors: errorsAndWarnings,
    hasGasErrors,
    gasWarnings,
    balanceError,
    estimatesUnavailableWarning,
    hasSimulationError: Boolean(transaction === null || transaction === void 0 ? void 0 : transaction.simulationFails)
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../helpers/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../useGasFeeEstimates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","./useGasEstimates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasEstimates.js","./useGasFeeErrors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeErrors.js","./useGasPriceInput":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasPriceInput.js","./useMaxFeePerGasInput":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxFeePerGasInput.js","./useMaxPriorityFeePerGasInput":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxPriorityFeePerGasInput.js","./useTransactionFunctions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useTransactionFunctions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useGasFeeInputs.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeInputs = useGasFeeInputs;

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _gas2 = require("../../helpers/constants/gas");

var _selectors = require("../../selectors");

var _transactions = require("../../helpers/utils/transactions.util");

var _useGasFeeEstimates = require("../useGasFeeEstimates");

var _gas3 = require("../../helpers/utils/gas");

var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");

var _useGasFeeErrors = require("./useGasFeeErrors");

var _useGasPriceInput = require("./useGasPriceInput");

var _useMaxFeePerGasInput = require("./useMaxFeePerGasInput");

var _useMaxPriorityFeePerGasInput = require("./useMaxPriorityFeePerGasInput");

var _useGasEstimates = require("./useGasEstimates");

var _useTransactionFunctions = require("./useTransactionFunctions");

/**
 * In EIP_1559_V2 implementation as used by useGasfeeInputContext() the use of this hook is evolved.
 * It is no longer used to keep transient state of advance gas fee inputs.
 * Transient state of inputs is maintained locally in /ui/components/app/advance-gas-fee-popover component.
 *
 * This hook is used now as source of shared data about transaction, it shares details of gas fee in transaction,
 * estimate used, is EIP-1559 supported and other details. It also  have methods to update transaction.
 *
 * Transaction is used as single source of truth and as transaction is updated the fields shared by hook are
 * also updated using useEffect hook.
 *
 * It will be useful to plan a task to create a new hook of this shared information from this hook.
 * Methods like setEstimateToUse, onManualChange are deprecated in context of EIP_1559_V2 implementation.
 */

/**
 * @typedef {object} GasFeeInputReturnType
 * @property {DecGweiString} [maxFeePerGas] - the maxFeePerGas input value.
 * @property {string} [maxFeePerGasFiat] - the maxFeePerGas converted to the
 *  user's preferred currency.
 * @property {(DecGweiString) => void} setMaxFeePerGas - state setter method to
 *  update the maxFeePerGas.
 * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas
 *  input value.
 * @property {string} [maxPriorityFeePerGasFiat] - the maxPriorityFeePerGas
 *  converted to the user's preferred currency.
 * @property {(DecGweiString) => void} setMaxPriorityFeePerGas - state setter
 *  method to update the maxPriorityFeePerGas.
 * @property {DecGweiString} [gasPrice] - the gasPrice input value.
 * @property {(DecGweiString) => void} setGasPrice - state setter method to
 *  update the gasPrice.
 * @property {DecGweiString} gasLimit - the gasLimit input value.
 * @property {(DecGweiString) => void} setGasLimit - state setter method to
 *  update the gasLimit.
 * @property {EstimateLevel} [estimateToUse] - the estimate level currently
 *  selected. This will be null if the user has ejected from using the
 *  estimates.
 * @property {([EstimateLevel]) => void} setEstimateToUse - Setter method for
 *  choosing which EstimateLevel to use.
 * @property {string} [estimatedMinimumFiat] - The amount estimated to be paid
 *  based on current network conditions. Expressed in user's preferred
 *  currency.
 * @property {string} [estimatedMaximumFiat] - the maximum amount estimated to be
 *  paid if current network transaction volume increases. Expressed in user's
 *  preferred currency.
 * @property {string} [estimatedMaximumNative] - the maximum amount estimated to
 *  be paid if the current network transaction volume increases. Expressed in
 *  the network's native currency.
 */

/**
 * Uses gasFeeEstimates and state to keep track of user gas fee inputs.
 * Will update the gas fee state when estimates update if the user has not yet
 * modified the fields.
 *
 * @param {EstimateLevel} [defaultEstimateToUse] - which estimate
 *  level to default the 'estimateToUse' state variable to.
 * @param {object} [_transaction]
 * @param {string} [minimumGasLimit]
 * @param {EDIT_GAS_MODES[keyof EDIT_GAS_MODES]} editGasMode
 * @returns {GasFeeInputReturnType & __import__(
 *  './useGasFeeEstimates'
 * ).GasEstimates} gas fee input state and the GasFeeEstimates object
 */
function useGasFeeInputs(defaultEstimateToUse = _gas.GAS_RECOMMENDATIONS.MEDIUM, _transaction, minimumGasLimit = '0x5208', editGasMode = _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE) {
  const initialRetryTxMeta = {
    txParams: _transaction === null || _transaction === void 0 ? void 0 : _transaction.txParams,
    id: _transaction === null || _transaction === void 0 ? void 0 : _transaction.id,
    userFeeLevel: _transaction === null || _transaction === void 0 ? void 0 : _transaction.userFeeLevel,
    originalGasEstimate: _transaction === null || _transaction === void 0 ? void 0 : _transaction.originalGasEstimate,
    userEditedGasLimit: _transaction === null || _transaction === void 0 ? void 0 : _transaction.userEditedGasLimit
  };

  if (_transaction !== null && _transaction !== void 0 && _transaction.previousGas) {
    initialRetryTxMeta.previousGas = _transaction === null || _transaction === void 0 ? void 0 : _transaction.previousGas;
  }

  const [retryTxMeta, setRetryTxMeta] = (0, _react.useState)(initialRetryTxMeta);
  const transaction = (0, _gas3.editGasModeIsSpeedUpOrCancel)(editGasMode) ? retryTxMeta : _transaction;
  const eip1559V2Enabled = (0, _reactRedux.useSelector)(_selectors.getEIP1559V2Enabled);
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const supportsEIP1559V2 = supportsEIP1559 && eip1559V2Enabled; // We need the gas estimates from the GasFeeController in the background.
  // Calling this hooks initiates polling for new gas estimates and returns the
  // current estimate.

  const {
    gasEstimateType,
    gasFeeEstimates,
    isGasEstimatesLoading,
    estimatedGasFeeTimeBounds,
    isNetworkBusy
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)();
  const userPrefersAdvancedGas = (0, _reactRedux.useSelector)(_selectors.getAdvancedInlineGasShown);
  const [estimateToUse, setInternalEstimateToUse] = (0, _react.useState)(() => {
    var _transaction$txParams, _transaction$txParams2;

    if (userPrefersAdvancedGas && transaction !== null && transaction !== void 0 && (_transaction$txParams = transaction.txParams) !== null && _transaction$txParams !== void 0 && _transaction$txParams.maxPriorityFeePerGas && transaction !== null && transaction !== void 0 && (_transaction$txParams2 = transaction.txParams) !== null && _transaction$txParams2 !== void 0 && _transaction$txParams2.maxFeePerGas) {
      return null;
    }

    if (transaction) {
      return (transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) || null;
    }

    return defaultEstimateToUse;
  });
  const [estimateUsed, setEstimateUsed] = (0, _react.useState)(() => {
    if (estimateToUse) {
      return estimateToUse;
    }

    return _gas.PRIORITY_LEVELS.CUSTOM;
  });
  const [gasLimit, setGasLimit] = (0, _react.useState)(() => {
    var _transaction$txParams3, _transaction$txParams4;

    return Number((0, _metamaskControllerUtils.hexToDecimal)((_transaction$txParams3 = transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams4 = transaction.txParams) === null || _transaction$txParams4 === void 0 ? void 0 : _transaction$txParams4.gas) !== null && _transaction$txParams3 !== void 0 ? _transaction$txParams3 : '0x0'));
  });
  const properGasLimit = Number((0, _metamaskControllerUtils.hexToDecimal)(transaction === null || transaction === void 0 ? void 0 : transaction.originalGasEstimate));
  const [userEditedGasLimit, setUserEditedGasLimit] = (0, _react.useState)(() => Boolean(transaction === null || transaction === void 0 ? void 0 : transaction.userEditedGasLimit));
  /**
   * In EIP-1559 V2 designs change to gas estimate is always updated to transaction
   * Thus callback setEstimateToUse can be deprecate in favour of this useEffect
   * so that transaction is source of truth whenever possible.
   */

  (0, _react.useEffect)(() => {
    if (supportsEIP1559V2) {
      var _transaction$txParams5, _transaction$txParams6;

      if (transaction !== null && transaction !== void 0 && transaction.userFeeLevel) {
        setEstimateUsed(transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel);
        setInternalEstimateToUse(transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel);
      }

      setGasLimit(Number((0, _metamaskControllerUtils.hexToDecimal)((_transaction$txParams5 = transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams6 = transaction.txParams) === null || _transaction$txParams6 === void 0 ? void 0 : _transaction$txParams6.gas) !== null && _transaction$txParams5 !== void 0 ? _transaction$txParams5 : '0x0')));
    }
  }, [setEstimateUsed, setGasLimit, setInternalEstimateToUse, supportsEIP1559V2, transaction]);
  const {
    gasPrice,
    setGasPrice,
    setGasPriceHasBeenManuallySet
  } = (0, _useGasPriceInput.useGasPriceInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    transaction
  });
  const {
    maxFeePerGas,
    maxFeePerGasFiat,
    setMaxFeePerGas
  } = (0, _useMaxFeePerGasInput.useMaxFeePerGasInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    gasLimit,
    gasPrice,
    supportsEIP1559V2,
    transaction
  });
  const {
    maxPriorityFeePerGas,
    maxPriorityFeePerGasFiat,
    setMaxPriorityFeePerGas
  } = (0, _useMaxPriorityFeePerGasInput.useMaxPriorityFeePerGasInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    gasLimit,
    supportsEIP1559V2,
    transaction
  });
  const {
    estimatedBaseFee,
    estimatedMaximumFiat,
    estimatedMinimumFiat,
    estimatedMaximumNative,
    estimatedMinimumNative,
    maximumCostInHexWei,
    minimumCostInHexWei
  } = (0, _useGasEstimates.useGasEstimates)({
    editGasMode,
    gasEstimateType,
    gasFeeEstimates,
    gasLimit,
    gasPrice,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minimumGasLimit,
    transaction
  });
  const {
    balanceError,
    estimatesUnavailableWarning,
    gasErrors,
    gasWarnings,
    hasGasErrors,
    hasSimulationError
  } = (0, _useGasFeeErrors.useGasFeeErrors)({
    gasEstimateType,
    gasFeeEstimates,
    isGasEstimatesLoading,
    gasLimit,
    gasPrice,
    maxPriorityFeePerGas,
    maxFeePerGas,
    minimumCostInHexWei,
    minimumGasLimit,
    transaction
  });
  const handleGasLimitOutOfBoundError = (0, _react.useCallback)(() => {
    if (gasErrors.gasLimit === _gas2.GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS) {
      var _transaction$txParams7;

      const transactionGasLimitDec = (0, _metamaskControllerUtils.hexToDecimal)(transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams7 = transaction.txParams) === null || _transaction$txParams7 === void 0 ? void 0 : _transaction$txParams7.gas);
      const minimumGasLimitDec = (0, _metamaskControllerUtils.hexToDecimal)(minimumGasLimit);
      setGasLimit(transactionGasLimitDec > minimumGasLimitDec ? transactionGasLimitDec : minimumGasLimitDec);
    }
  }, [minimumGasLimit, gasErrors.gasLimit, transaction]);
  const {
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  } = (0, _useTransactionFunctions.useTransactionFunctions)({
    defaultEstimateToUse,
    editGasMode,
    gasFeeEstimates,
    gasLimit,
    maxPriorityFeePerGas,
    minimumGasLimit,
    transaction,
    setRetryTxMeta
  }); // When a user selects an estimate level, it will wipe out what they have
  // previously put in the inputs. This returns the inputs to the estimated
  // values at the level specified.

  const setEstimateToUse = (0, _react.useCallback)(estimateLevel => {
    setInternalEstimateToUse(estimateLevel);
    handleGasLimitOutOfBoundError();
    setMaxFeePerGas(null);
    setMaxPriorityFeePerGas(null);
    setGasPrice(null);
    setGasPriceHasBeenManuallySet(false);
    setEstimateUsed(estimateLevel);
  }, [setInternalEstimateToUse, handleGasLimitOutOfBoundError, setMaxFeePerGas, setMaxPriorityFeePerGas, setGasPrice, setGasPriceHasBeenManuallySet, setEstimateUsed]);
  const onManualChange = (0, _react.useCallback)(() => {
    setInternalEstimateToUse(_gas.CUSTOM_GAS_ESTIMATE);
    handleGasLimitOutOfBoundError(); // Restore existing values

    setGasPrice(gasPrice);
    setGasLimit(gasLimit);
    setUserEditedGasLimit(true);
    setMaxFeePerGas(maxFeePerGas);
    setMaxPriorityFeePerGas(maxPriorityFeePerGas);
    setGasPriceHasBeenManuallySet(true);
    setEstimateUsed('custom');
  }, [setInternalEstimateToUse, handleGasLimitOutOfBoundError, setGasPrice, gasPrice, setGasLimit, gasLimit, setUserEditedGasLimit, setMaxFeePerGas, maxFeePerGas, setMaxPriorityFeePerGas, maxPriorityFeePerGas, setGasPriceHasBeenManuallySet]);
  return {
    transaction,
    maxFeePerGas,
    maxFeePerGasFiat,
    setMaxFeePerGas,
    maxPriorityFeePerGas,
    maxPriorityFeePerGasFiat,
    setMaxPriorityFeePerGas,
    gasPrice,
    setGasPrice,
    gasLimit,
    setGasLimit,
    properGasLimit,
    userEditedGasLimit,
    editGasMode,
    estimateToUse,
    setEstimateToUse,
    estimatedMinimumFiat,
    estimatedMaximumFiat,
    estimatedMaximumNative,
    estimatedMinimumNative,
    isGasEstimatesLoading,
    maximumCostInHexWei,
    minimumCostInHexWei,
    estimateUsed,
    gasFeeEstimates,
    gasEstimateType,
    estimatedGasFeeTimeBounds,
    isNetworkBusy,
    onManualChange,
    estimatedBaseFee,
    // error and warnings
    balanceError,
    estimatesUnavailableWarning,
    gasErrors,
    gasWarnings,
    hasGasErrors,
    hasSimulationError,
    minimumGasLimitDec: (0, _metamaskControllerUtils.hexToDecimal)(minimumGasLimit),
    supportsEIP1559,
    supportsEIP1559V2,
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasPriceInput.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","./utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useGasPriceInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasPriceInput = useGasPriceInput;

var _react = require("react");

var _lodash = require("lodash");

var _gas = require("../../../shared/constants/gas");

var _transactions = require("../../helpers/utils/transactions.util");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _utils = require("./utils");

function getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse) {
  if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY) {
    var _gasFeeEstimates$esti;

    return (_gasFeeEstimates$esti = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates[estimateToUse]) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : '0';
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
    var _gasFeeEstimates$gasP;

    return (_gasFeeEstimates$gasP = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.gasPrice) !== null && _gasFeeEstimates$gasP !== void 0 ? _gasFeeEstimates$gasP : '0';
  }

  return '0';
}
/**
 * @typedef {object} GasPriceInputsReturnType
 * @property {DecGweiString} [gasPrice] - the gasPrice input value.
 * @property {(DecGweiString) => void} setGasPrice - state setter method to update the gasPrice.
 * @property {(boolean) => true} setGasPriceHasBeenManuallySet - state setter method to update gasPriceHasBeenManuallySet
 * field gasPriceHasBeenManuallySet is used in gasPrice calculations.
 */

/**
 * @param options
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.transaction
 * @returns {GasPriceInputsReturnType}
 */


function useGasPriceInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  transaction
}) {
  const [gasPriceHasBeenManuallySet, setGasPriceHasBeenManuallySet] = (0, _react.useState)((transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE);
  const [gasPrice, setGasPrice] = (0, _react.useState)(() => {
    const {
      gasPrice: txGasPrice
    } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
    return txGasPrice && (0, _utils.feeParamsAreCustom)(transaction) ? Number((0, _transactionsControllerUtils.hexWEIToDecGWEI)(txGasPrice)) : null;
  });
  const [initialGasPriceEstimates] = (0, _react.useState)(gasFeeEstimates);
  const gasPriceEstimatesHaveNotChanged = (0, _lodash.isEqual)(initialGasPriceEstimates, gasFeeEstimates);
  const gasPriceToUse = gasPrice !== null && (gasPriceHasBeenManuallySet || gasPriceEstimatesHaveNotChanged || (0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams)) ? gasPrice : getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse);
  return {
    gasPrice: gasPriceToUse,
    setGasPrice,
    setGasPriceHasBeenManuallySet
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxFeePerGasInput.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/gas.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\gas.utils.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../useCurrencyDisplay":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","../useUserPreferencedCurrency":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","./utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useMaxFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxFeePerGasInput = useMaxFeePerGasInput;

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _common = require("../../helpers/constants/common");

var _gas2 = require("../../../shared/modules/gas.utils");

var _conversions = require("../../helpers/utils/conversions.util");

var _selectors = require("../../selectors");

var _transactions = require("../../helpers/utils/transactions.util");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _utils = require("./utils");

const getMaxFeePerGasFromTransaction = (transaction, gasFeeEstimates) => {
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel]) {
    return gasFeeEstimates[transaction.userFeeLevel].suggestedMaxFeePerGas;
  }

  const {
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  return Number((0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxFeePerGas || gasPrice));
};
/**
 * @typedef {object} MaxFeePerGasInputReturnType
 * @property {(DecGweiString) => void} setMaxFeePerGas - state setter method to
 *  update the maxFeePerGas.
 * @property {string} [maxFeePerGasFiat] - the maxFeePerGas converted to the
 *  user's preferred currency.
 */

/**
 * @param options
 * @param options.supportsEIP1559V2
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.gasLimit
 * @param options.gasPrice
 * @param options.transaction
 * @returns {MaxFeePerGasInputReturnType}
 */


function useMaxFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  gasPrice,
  supportsEIP1559V2,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const initialMaxFeePerGas = supportsEIP1559 ? getMaxFeePerGasFromTransaction(transaction, gasFeeEstimates) : 0; // This hook keeps track of a few pieces of transitional state. It is
  // transitional because it is only used to modify a transaction in the
  // metamask (background) state tree.

  const [maxFeePerGas, setMaxFeePerGas] = (0, _react.useState)(() => {
    if (initialMaxFeePerGas && (0, _utils.feeParamsAreCustom)(transaction)) {
      return initialMaxFeePerGas;
    }

    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559V2 && initialMaxFeePerGas) {
      setMaxFeePerGas(initialMaxFeePerGas);
    }
  }, [initialMaxFeePerGas, setMaxFeePerGas, supportsEIP1559V2]);
  let gasSettings = {
    gasLimit: (0, _transactionsControllerUtils.decimalToHex)(gasLimit)
  };

  if (supportsEIP1559) {
    gasSettings = { ...gasSettings,
      maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxFeePerGas || gasPrice || '0')
    };
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE) {
    gasSettings = { ...gasSettings,
      gasPrice: '0x0'
    };
  } else {
    gasSettings = { ...gasSettings,
      gasPrice: (0, _conversions.decGWEIToHexWEI)(gasPrice)
    };
  }

  const maximumCostInHexWei = (0, _gas2.getMaximumGasTotalInHexWei)(gasSettings); // We need to display thee estimated fiat currency impact of the maxFeePerGas
  // field to the user. This hook calculates that amount. This also works for
  // the gasPrice amount because in legacy transactions cost is always gasPrice
  // * gasLimit.

  const [, {
    value: maxFeePerGasFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  }); // We specify whether to use the estimate value by checking if the state
  // value has been set. The state value is only set by user input and is wiped
  // when the user selects an estimate. Default here is '0' to avoid bignumber
  // errors in later calculations for nullish values.

  const maxFeePerGasToUse = maxFeePerGas !== null && maxFeePerGas !== void 0 ? maxFeePerGas : (0, _utils.getGasFeeEstimate)('suggestedMaxFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxFeePerGas || 0);
  return {
    maxFeePerGas: maxFeePerGasToUse,
    maxFeePerGasFiat: showFiat ? maxFeePerGasFiat : '',
    setMaxFeePerGas
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxPriorityFeePerGasInput.js", {"../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../useCurrencyDisplay":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","../useUserPreferencedCurrency":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","./utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","ethereumjs-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useMaxPriorityFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxPriorityFeePerGasInput = useMaxPriorityFeePerGasInput;

var _reactRedux = require("react-redux");

var _react = require("react");

var _ethereumjsUtil = require("ethereumjs-util");

var _common = require("../../helpers/constants/common");

var _selectors = require("../../selectors");

var _transactions = require("../../helpers/utils/transactions.util");

var _conversion = require("../../../shared/modules/conversion.utils");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _utils = require("./utils");

const getMaxPriorityFeePerGasFromTransaction = (transaction, gasFeeEstimates) => {
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel]) {
    return gasFeeEstimates[transaction.userFeeLevel].suggestedMaxPriorityFeePerGas;
  }

  const {
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  return Number((0, _transactionsControllerUtils.hexWEIToDecGWEI)(maxPriorityFeePerGas || maxFeePerGas || gasPrice));
};
/**
 * @typedef {object} MaxPriorityFeePerGasInputReturnType
 * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas
 *  input value.
 * @property {string} [maxPriorityFeePerGasFiat] - the maxPriorityFeePerGas
 *  converted to the user's preferred currency.
 * @property {(DecGweiString) => void} setMaxPriorityFeePerGas - state setter
 *  method to update the maxPriorityFeePerGas.
 */

/**
 * @param options
 * @param options.supportsEIP1559V2
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.gasLimit
 * @param options.transaction
 * @returns {MaxPriorityFeePerGasInputReturnType}
 */


function useMaxPriorityFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  supportsEIP1559V2,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const initialMaxPriorityFeePerGas = supportsEIP1559 ? getMaxPriorityFeePerGasFromTransaction(transaction, gasFeeEstimates) : 0;
  const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = (0, _react.useState)(() => {
    if (initialMaxPriorityFeePerGas && (0, _utils.feeParamsAreCustom)(transaction)) {
      return initialMaxPriorityFeePerGas;
    }

    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559V2 && initialMaxPriorityFeePerGas) {
      setMaxPriorityFeePerGas(initialMaxPriorityFeePerGas);
    }
  }, [initialMaxPriorityFeePerGas, setMaxPriorityFeePerGas, supportsEIP1559V2]);
  const maxPriorityFeePerGasToUse = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : (0, _utils.getGasFeeEstimate)('suggestedMaxPriorityFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxPriorityFeePerGas || 0); // We need to display the estimated fiat currency impact of the
  // maxPriorityFeePerGas field to the user. This hook calculates that amount.

  const [, {
    value: maxPriorityFeePerGasFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)((0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(maxPriorityFeePerGasToUse, gasLimit, {
    toNumericBase: 'hex',
    fromDenomination: 'GWEI',
    toDenomination: 'WEI',
    multiplicandBase: 10,
    multiplierBase: 10
  })), {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  return {
    maxPriorityFeePerGas: maxPriorityFeePerGasToUse,
    maxPriorityFeePerGasFiat: showFiat ? maxPriorityFeePerGasFiat : '',
    setMaxPriorityFeePerGas
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\useTransactionFunctions.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js","../../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\useTransactionFunctions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionFunctions = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");

var _gas = require("../../../shared/constants/gas");

var _conversions = require("../../helpers/utils/conversions.util");

var _gas2 = require("../../helpers/utils/gas");

var _actions = require("../../store/actions");

const useTransactionFunctions = ({
  defaultEstimateToUse,
  editGasMode,
  estimatedBaseFee,
  gasFeeEstimates,
  gasLimit: gasLimitValue,
  maxPriorityFeePerGas: maxPriorityFeePerGasValue,
  transaction,
  setRetryTxMeta
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const getTxMeta = (0, _react.useCallback)(() => {
    var _transaction$txParams;

    if (editGasMode !== _gas.EDIT_GAS_MODES.CANCEL && editGasMode !== _gas.EDIT_GAS_MODES.SPEED_UP || transaction.previousGas) {
      return {};
    }

    const {
      maxFeePerGas,
      maxPriorityFeePerGas,
      gasLimit
    } = (_transaction$txParams = transaction === null || transaction === void 0 ? void 0 : transaction.txParams) !== null && _transaction$txParams !== void 0 ? _transaction$txParams : {};
    return {
      previousGas: {
        maxFeePerGas,
        maxPriorityFeePerGas,
        gasLimit
      }
    };
  }, [editGasMode, transaction === null || transaction === void 0 ? void 0 : transaction.previousGas, transaction === null || transaction === void 0 ? void 0 : transaction.txParams]);
  const updateTransaction = (0, _react.useCallback)(async ({
    estimateUsed,
    gasLimit,
    maxFeePerGas,
    maxPriorityFeePerGas,
    estimateSuggested
  }) => {
    const newGasSettings = {
      gas: (0, _transactionsControllerUtils.decimalToHex)(gasLimit || gasLimitValue),
      gasLimit: (0, _transactionsControllerUtils.decimalToHex)(gasLimit || gasLimitValue),
      estimateSuggested: estimateSuggested || defaultEstimateToUse,
      estimateUsed
    };

    if (maxFeePerGas) {
      newGasSettings.maxFeePerGas = maxFeePerGas;
    }

    if (maxPriorityFeePerGas) {
      newGasSettings.maxPriorityFeePerGas = maxPriorityFeePerGas || (0, _conversions.decGWEIToHexWEI)(maxPriorityFeePerGasValue);
    }

    const txMeta = getTxMeta();
    const updatedTxMeta = { ...transaction,
      userFeeLevel: estimateUsed || _gas.PRIORITY_LEVELS.CUSTOM,
      txParams: { ...transaction.txParams,
        ...newGasSettings
      },
      ...txMeta
    };

    if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
      dispatch((0, _actions.updateSwapsUserFeeLevel)(estimateUsed || _gas.PRIORITY_LEVELS.CUSTOM));
      dispatch((0, _actions.updateCustomSwapsEIP1559GasParams)(newGasSettings));
    } else if ((0, _gas2.editGasModeIsSpeedUpOrCancel)(editGasMode)) {
      setRetryTxMeta(updatedTxMeta);
    } else {
      newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;
      newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;

      if (txMeta && txMeta.previousGas) {
        await dispatch((0, _actions.updatePreviousGasParams)(updatedTxMeta.id, txMeta.previousGas));
      }

      await dispatch((0, _actions.updateTransactionGasFees)(updatedTxMeta.id, newGasSettings));
    }
  }, [defaultEstimateToUse, dispatch, editGasMode, gasLimitValue, getTxMeta, maxPriorityFeePerGasValue, transaction, setRetryTxMeta]);
  const cancelTransaction = (0, _react.useCallback)(() => {
    dispatch((0, _actions.createCancelTransaction)(transaction.id, transaction.txParams, {
      estimatedBaseFee
    }));
  }, [dispatch, estimatedBaseFee, transaction]);
  const speedUpTransaction = (0, _react.useCallback)(() => {
    dispatch((0, _actions.createSpeedUpTransaction)(transaction.id, transaction.txParams, {
      estimatedBaseFee
    }));
  }, [dispatch, estimatedBaseFee, transaction]);
  const updateTransactionToTenPercentIncreasedGasFee = (0, _react.useCallback)((initTransaction = false) => {
    const {
      gas: gasLimit,
      maxFeePerGas,
      maxPriorityFeePerGas
    } = transaction.previousGas || transaction.txParams;
    updateTransaction({
      estimateSuggested: initTransaction ? defaultEstimateToUse : _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED,
      estimateUsed: _gas.PRIORITY_LEVELS.TEN_PERCENT_INCREASED,
      gasLimit,
      maxFeePerGas: (0, _gas2.addTenPercentAndRound)(maxFeePerGas),
      maxPriorityFeePerGas: (0, _gas2.addTenPercentAndRound)(maxPriorityFeePerGas)
    });
  }, [defaultEstimateToUse, transaction, updateTransaction]);
  const updateTransactionUsingEstimate = (0, _react.useCallback)(gasFeeEstimateToUse => {
    if (!gasFeeEstimates[gasFeeEstimateToUse]) {
      return;
    }

    const {
      suggestedMaxFeePerGas,
      suggestedMaxPriorityFeePerGas
    } = gasFeeEstimates[gasFeeEstimateToUse];
    updateTransaction({
      estimateUsed: gasFeeEstimateToUse,
      maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas),
      maxPriorityFeePerGas: (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas)
    });
  }, [gasFeeEstimates, updateTransaction]);
  const updateTransactionUsingDAPPSuggestedValues = (0, _react.useCallback)(() => {
    var _transaction$dappSugg;

    const {
      maxFeePerGas,
      maxPriorityFeePerGas
    } = (_transaction$dappSugg = transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees) !== null && _transaction$dappSugg !== void 0 ? _transaction$dappSugg : {};
    updateTransaction({
      estimateUsed: _gas.PRIORITY_LEVELS.DAPP_SUGGESTED,
      maxFeePerGas,
      maxPriorityFeePerGas
    });
  }, [transaction, updateTransaction]);
  return {
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  };
};

exports.useTransactionFunctions = useTransactionFunctions;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js", {"../../../shared/constants/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\gas.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\gasFeeInput\utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.feeParamsAreCustom = void 0;
exports.getGasFeeEstimate = getGasFeeEstimate;

var _gas = require("../../../shared/constants/gas");

function getGasFeeEstimate(field, gasFeeEstimates, gasEstimateType, estimateToUse, fallback = '0') {
  if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET) {
    var _gasFeeEstimates$esti, _gasFeeEstimates$esti2;

    return (_gasFeeEstimates$esti = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$esti2 = gasFeeEstimates[estimateToUse]) === null || _gasFeeEstimates$esti2 === void 0 ? void 0 : _gasFeeEstimates$esti2[field]) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : String(fallback);
  }

  return String(fallback);
}

const feeParamsAreCustom = transaction => !(transaction !== null && transaction !== void 0 && transaction.userFeeLevel) || (transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE;

exports.feeParamsAreCustom = feeParamsAreCustom;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useAddressDetails.js", {"../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useAddressDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _hexstringUtils = require("../../shared/modules/hexstring-utils");

var _selectors = require("../selectors");

var _util = require("../helpers/utils/util");

const useAddressDetails = toAddress => {
  var _identities$toAddress, _tokenList$toAddress$;

  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const identities = (0, _reactRedux.useSelector)(_selectors.getMetaMaskIdentities);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(toAddress);

  if (!toAddress) {
    return {};
  }

  const addressBookEntryObject = addressBook.find(entry => entry.address === checksummedAddress);

  if (addressBookEntryObject !== null && addressBookEntryObject !== void 0 && addressBookEntryObject.name) {
    return {
      toName: addressBookEntryObject.name,
      isTrusted: true
    };
  }

  if ((_identities$toAddress = identities[toAddress]) !== null && _identities$toAddress !== void 0 && _identities$toAddress.name) {
    return {
      toName: identities[toAddress].name,
      isTrusted: true
    };
  }

  if ((_tokenList$toAddress$ = tokenList[toAddress === null || toAddress === void 0 ? void 0 : toAddress.toLowerCase()]) !== null && _tokenList$toAddress$ !== void 0 && _tokenList$toAddress$.name) {
    return {
      toName: tokenList[toAddress === null || toAddress === void 0 ? void 0 : toAddress.toLowerCase()].name,
      isTrusted: true
    };
  }

  return {
    toName: (0, _util.shortenAddress)(checksummedAddress),
    isTrusted: false
  };
};

var _default = useAddressDetails;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useApproveTransaction.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useApproveTransaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useApproveTransaction = useApproveTransaction;

var _react = require("react");

/**
 * Determine whether a transaction can be approved and provide a method to
 * kick off the approval process.
 *
 * Provides a reusable hook that, given a transactionGroup, will manage
 * the process of editing gas for approvals
 *
 * @returns {[boolean, Function]}
 */
function useApproveTransaction() {
  const [showCustomizeGasPopover, setShowCustomizeGasPopover] = (0, _react.useState)(false);

  const closeCustomizeGasPopover = () => setShowCustomizeGasPopover(false);

  const approveTransaction = (0, _react.useCallback)(() => {
    return setShowCustomizeGasPopover(true);
  }, []);
  return {
    approveTransaction,
    showCustomizeGasPopover,
    closeCustomizeGasPopover
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useAssetDetails.js", {"../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useAssetDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAssetDetails = useAssetDetails;

var _react = require("react");

var _reactRedux = require("react-redux");

var _metamask = require("../ducks/metamask/metamask");

var _tokenUtil = require("../helpers/utils/token-util");

var _actions = require("../store/actions");

var _usePrevious = require("./usePrevious");

function useAssetDetails(tokenAddress, userAddress, transactionData) {
  const dispatch = (0, _reactRedux.useDispatch)(); // state selectors

  const collectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles); // in-hook state

  const [currentAsset, setCurrentAsset] = (0, _react.useState)(null); // previous state checkers

  const prevTokenAddress = (0, _usePrevious.usePrevious)(tokenAddress);
  const prevUserAddress = (0, _usePrevious.usePrevious)(userAddress);
  const prevTransactionData = (0, _usePrevious.usePrevious)(transactionData);
  (0, _react.useEffect)(() => {
    async function getAndSetAssetDetails() {
      dispatch((0, _actions.showLoadingIndication)());
      const assetDetails = await (0, _tokenUtil.getAssetDetails)(tokenAddress, userAddress, transactionData, collectibles);
      setCurrentAsset(assetDetails);
      dispatch((0, _actions.hideLoadingIndication)());
    }

    if (tokenAddress !== prevTokenAddress || userAddress !== prevUserAddress || transactionData !== prevTransactionData) {
      getAndSetAssetDetails();
    }
  }, [dispatch, prevTokenAddress, prevTransactionData, prevUserAddress, tokenAddress, userAddress, transactionData, collectibles]);

  if (currentAsset) {
    const {
      standard,
      symbol,
      image,
      name,
      balance,
      tokenId,
      toAddress,
      tokenAmount,
      decimals
    } = currentAsset;
    return {
      toAddress,
      tokenId,
      decimals,
      tokenAmount,
      assetAddress: tokenAddress,
      assetStandard: standard,
      tokenSymbol: symbol !== null && symbol !== void 0 ? symbol : '',
      tokenImage: image,
      userBalance: balance,
      assetName: name
    };
  }

  return {};
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCollectiblesCollections.js", {"../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./usePrevious":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useCollectiblesCollections.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCollectiblesCollections = useCollectiblesCollections;

var _react = require("react");

var _reactRedux = require("react-redux");

var _lodash = require("lodash");

var _metamask = require("../ducks/metamask/metamask");

var _selectors = require("../selectors");

var _usePrevious = require("./usePrevious");

function useCollectiblesCollections() {
  const [collections, setCollections] = (0, _react.useState)({});
  const [previouslyOwnedCollection, setPreviouslyOwnedCollection] = (0, _react.useState)({
    collectionName: 'Previously Owned',
    collectibles: []
  });
  const collectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const [collectiblesLoading, setCollectiblesLoading] = (0, _react.useState)(() => (collectibles === null || collectibles === void 0 ? void 0 : collectibles.length) >= 0);
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const collectibleContracts = (0, _reactRedux.useSelector)(_metamask.getCollectibleContracts);
  const prevCollectibles = (0, _usePrevious.usePrevious)(collectibles);
  const prevChainId = (0, _usePrevious.usePrevious)(chainId);
  const prevSelectedAddress = (0, _usePrevious.usePrevious)(selectedAddress);
  (0, _react.useEffect)(() => {
    const getCollections = () => {
      setCollectiblesLoading(true);

      if (selectedAddress === undefined || chainId === undefined) {
        return;
      }

      const newCollections = {};
      const newPreviouslyOwnedCollections = {
        collectionName: 'Previously Owned',
        collectibles: []
      };
      collectibles.forEach(collectible => {
        if ((collectible === null || collectible === void 0 ? void 0 : collectible.isCurrentlyOwned) === false) {
          newPreviouslyOwnedCollections.collectibles.push(collectible);
        } else if (newCollections[collectible.address]) {
          newCollections[collectible.address].collectibles.push(collectible);
        } else {
          const collectionContract = collectibleContracts.find(({
            address
          }) => address === collectible.address);
          newCollections[collectible.address] = {
            collectionName: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.name) || collectible.name,
            collectionImage: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.logo) || collectible.collectionImage,
            collectibles: [collectible]
          };
        }
      });
      setCollections(newCollections);
      setPreviouslyOwnedCollection(newPreviouslyOwnedCollections);
      setCollectiblesLoading(false);
    };

    if (!(0, _lodash.isEqual)(prevCollectibles, collectibles) || !(0, _lodash.isEqual)(prevSelectedAddress, selectedAddress) || !(0, _lodash.isEqual)(prevChainId, chainId)) {
      getCollections();
    }
  }, [collectibles, prevCollectibles, collectibleContracts, setCollectiblesLoading, chainId, prevChainId, selectedAddress, prevSelectedAddress]);
  return {
    collectiblesLoading,
    collections,
    previouslyOwnedCollection
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js", {"../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","./useTimeout":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTimeout.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useCopyToClipboard.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyToClipboard = useCopyToClipboard;

var _react = require("react");

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _time = require("../../shared/constants/time");

var _useTimeout = require("./useTimeout");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * useCopyToClipboard
 *
 * @param {number} [delay=3000] - delay in ms
 * @returns {[boolean, Function]}
 */
const DEFAULT_DELAY = _time.SECOND * 3;

function useCopyToClipboard(delay = DEFAULT_DELAY) {
  const [copied, setCopied] = (0, _react.useState)(false);
  const startTimeout = (0, _useTimeout.useTimeout)(() => setCopied(false), delay, false);
  const handleCopy = (0, _react.useCallback)(text => {
    setCopied(true);
    startTimeout();
    (0, _copyToClipboard.default)(text);
  }, [startTimeout]);
  return [copied, handleCopy];
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js", {"../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../shared/modules/conversion.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\conversion.utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useCurrencyDisplay.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurrencyDisplay = useCurrencyDisplay;

var _react = require("react");

var _reactRedux = require("react-redux");

var _confirmTx = require("../helpers/utils/confirm-tx.util");

var _selectors = require("../selectors");

var _metamask = require("../ducks/metamask/metamask");

var _conversion = require("../../shared/modules/conversion.utils");

var _network = require("../../shared/constants/network");

/**
 * Defines the shape of the options parameter for useCurrencyDisplay
 *
 * @typedef {object} UseCurrencyOptions
 * @property {string} [displayValue] - When present is used in lieu of formatting the inputValue
 * @property {string} [prefix] - String to prepend to the final result
 * @property {number} [numberOfDecimals] - Number of significant decimals to display
 * @property {string} [denomination] - Denomination (wei, gwei) to convert to for display
 * @property {string} [currency] - Currency type to convert to. Will override nativeCurrency
 */

/**
 * Defines the return shape of the second value in the tuple
 *
 * @typedef {object} CurrencyDisplayParts
 * @property {string} [prefix] - string to prepend to the value for display
 * @property {string} value - string representing the value, formatted for display
 * @property {string} [suffix] - string to append to the value for display
 */

/**
 * useCurrencyDisplay hook
 *
 * Given a hexadecimal encoded value string and an object of parameters used for formatting the
 * display, produce both a fully formed string and the pieces of that string used for displaying
 * the currency to the user
 *
 * @param {string} inputValue - The value to format for display
 * @param {UseCurrencyOptions} opts - An object for options to format the inputValue
 * @returns {[string, CurrencyDisplayParts]}
 */
function useCurrencyDisplay(inputValue, {
  displayValue,
  prefix,
  numberOfDecimals,
  denomination,
  currency,
  ...opts
}) {
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const isUserPreferredCurrency = currency === currentCurrency;
  const value = (0, _react.useMemo)(() => {
    if (displayValue) {
      return displayValue;
    }

    if (currency === nativeCurrency || !isUserPreferredCurrency && !nativeCurrency) {
      return (0, _conversion.conversionUtil)(inputValue, {
        fromNumericBase: 'hex',
        toNumericBase: 'dec',
        fromDenomination: 'WEI',
        numberOfDecimals: numberOfDecimals || 2,
        toDenomination: denomination
      });
    } else if (isUserPreferredCurrency && conversionRate) {
      return (0, _confirmTx.formatCurrency)((0, _confirmTx.getValueFromWeiHex)({
        value: inputValue,
        fromCurrency: nativeCurrency,
        toCurrency: currency,
        conversionRate,
        numberOfDecimals: numberOfDecimals || 2,
        toDenomination: denomination
      }), currency);
    }

    return null;
  }, [inputValue, nativeCurrency, conversionRate, displayValue, numberOfDecimals, denomination, currency, isUserPreferredCurrency]);
  let suffix;

  if (!opts.hideLabel) {
    // if the currency we are displaying is the native currency of one of our preloaded test-nets (goerli, sepolia etc.)
    // then we allow lowercase characters, otherwise we force to uppercase any suffix passed as a currency
    const currencyTickerSymbol = Object.values(_network.TEST_NETWORK_TICKER_MAP).includes(currency) ? currency : currency === null || currency === void 0 ? void 0 : currency.toUpperCase();
    suffix = opts.suffix || currencyTickerSymbol;
  }

  return [`${prefix || ''}${value}${suffix ? ` ${suffix}` : ''}`, {
    prefix,
    value,
    suffix
  }];
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrentAsset.js", {"../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useCurrentAsset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurrentAsset = useCurrentAsset;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _metamask = require("../ducks/metamask/metamask");

var _selectors = require("../selectors");

var _routes = require("../helpers/constants/routes");

var _swaps = require("../../shared/constants/swaps");

var _stringUtils = require("../../shared/modules/string-utils");

/**
 * Returns a token object for the asset that is currently being viewed.
 * Will return the default token object for the current chain when the
 * user is viewing either the primary, unfiltered, activity list or the
 * default token asset page.
 *
 * @returns {__import__('./useTokenDisplayValue').Token}
 */
function useCurrentAsset() {
  var _match$params;

  // To determine which primary currency to display for swaps transactions we need to be aware
  // of which asset, if any, we are viewing at present
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: `${_routes.ASSET_ROUTE}/:asset`,
    exact: true,
    strict: true
  });
  const tokenAddress = match === null || match === void 0 ? void 0 : (_match$params = match.params) === null || _match$params === void 0 ? void 0 : _match$params.asset;
  const knownTokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const token = tokenAddress && knownTokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  return token !== null && token !== void 0 ? token : _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId] || _swaps.ETH_SWAPS_TOKEN_OBJECT;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEqualityCheck.js", {"lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useEqualityCheck.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEqualityCheck = useEqualityCheck;

var _react = require("react");

var _lodash = require("lodash");

/**
 * Given a value and a function to determine equality, return a
 * referentially equal value if the equality function returns true.
 * This hook is helpful in avoiding re-renders and effects running
 * based on an object or value that always changes references but
 * infrequently changes it's value. By default, uses isEqual from
 * lodash. This is typically only useful with objects and arrays.
 *
 * @param {T} value - any value to check equality of
 * @param {(T, T) => boolean} equalityFn - A function to determine equality
 * @returns {T}
 */
function useEqualityCheck(value, equalityFn = _lodash.isEqual) {
  const [computedValue, setComputedValue] = (0, _react.useState)(value);
  (0, _react.useLayoutEffect)(() => {
    if (!equalityFn(value, computedValue)) {
      setComputedValue(value);
    }
  }, [value, equalityFn, computedValue]);
  return computedValue;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js", {"../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.js","../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useEthFiatAmount.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEthFiatAmount = useEthFiatAmount;

var _react = require("react");

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _conversions = require("../helpers/utils/conversions.util");

var _confirmTx = require("../helpers/utils/confirm-tx.util");

var _metamask = require("../ducks/metamask/metamask");

/**
 * Get an Eth amount converted to fiat and formatted for display
 *
 * @param {string} [ethAmount] - The eth amount to convert
 * @param {object} [overrides] - A configuration object that allows the called to explicitly
 *                              ensure fiat is shown even if the property is not set in state.
 * @param {boolean} [overrides.showFiat] - If truthy, ensures the fiat value is shown even if the showFiat value from state is falsey
 * @param {boolean} hideCurrencySymbol - Indicates whether the returned formatted amount should include the trailing currency symbol
 * @returns {string} The formatted token amount in the user's chosen fiat currency
 */
function useEthFiatAmount(ethAmount, overrides = {}, hideCurrencySymbol) {
  var _overrides$showFiat;

  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const userPrefersShownFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const showFiat = (_overrides$showFiat = overrides.showFiat) !== null && _overrides$showFiat !== void 0 ? _overrides$showFiat : userPrefersShownFiat;
  const formattedFiat = (0, _react.useMemo)(() => (0, _conversions.decEthToConvertedCurrency)(ethAmount, currentCurrency, conversionRate), [conversionRate, currentCurrency, ethAmount]);

  if (!showFiat || currentCurrency.toUpperCase() === 'ETH' || conversionRate <= 0 || ethAmount === undefined) {
    return undefined;
  }

  return hideCurrencySymbol ? (0, _confirmTx.formatCurrency)(formattedFiat, currentCurrency) : `${(0, _confirmTx.formatCurrency)(formattedFiat, currentCurrency)} ${currentCurrency.toUpperCase()}`;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js", {"../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./useSafeGasEstimatePolling":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSafeGasEstimatePolling.js","lodash/isEqual":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\isEqual.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useGasFeeEstimates.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeEstimates = useGasFeeEstimates;

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _reactRedux = require("react-redux");

var _metamask = require("../ducks/metamask/metamask");

var _useSafeGasEstimatePolling = require("./useSafeGasEstimatePolling");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {object} GasEstimates
 * @property {GasEstimateTypes} gasEstimateType - The type of estimate provided
 * @property {__import__(
 *   '@metamask/controllers'
 * ).GasFeeState['gasFeeEstimates']} gasFeeEstimates - The estimate object
 * @property {__import__(
 *   '@metamask/controllers'
 * ).GasFeeState['estimatedGasFeeTimeBounds']} [estimatedGasFeeTimeBounds] -
 *  estimated time boundaries for fee-market type estimates
 * @property {boolean} isGasEstimateLoading - indicates whether the gas
 *  estimates are currently loading.
 */

/**
 * Gets the current gasFeeEstimates from state and begins polling for new
 * estimates. When this hook is removed from the tree it will signal to the
 * GasFeeController that it is done requiring new gas estimates. Also checks
 * the returned gas estimate for validity on the current network.
 *
 * @returns {GasFeeEstimates} GasFeeEstimates object
 */
function useGasFeeEstimates() {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates, _isEqual.default);
  const estimatedGasFeeTimeBounds = (0, _reactRedux.useSelector)(_metamask.getEstimatedGasFeeTimeBounds, _reactRedux.shallowEqual);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const isNetworkBusy = (0, _reactRedux.useSelector)(_metamask.getIsNetworkBusy);
  (0, _useSafeGasEstimatePolling.useSafeGasEstimatePolling)();
  return {
    gasFeeEstimates,
    gasEstimateType,
    estimatedGasFeeTimeBounds,
    isGasEstimatesLoading,
    isNetworkBusy
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js", {"../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useI18nContext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useI18nContext = useI18nContext;

var _react = require("react");

var _i18n = require("../contexts/i18n");

/**
 * useI18ncContext
 *
 * A time saving shortcut to using useContext + I18ncontext in many
 * different places.
 *
 * @returns {Function} I18n function from contexts/I18n.js
 */
function useI18nContext() {
  return (0, _react.useContext)(_i18n.I18nContext);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useIncrementedGasFees.js", {"../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","../helpers/utils/conversions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\conversions.util.js","../helpers/utils/gas":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\gas.js","./useGasFeeEstimates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useIncrementedGasFees.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIncrementedGasFees = useIncrementedGasFees;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _react = require("react");

var _transaction = require("../../shared/modules/transaction.utils");

var _conversions = require("../helpers/utils/conversions.util");

var _gas = require("../helpers/utils/gas");

var _useGasFeeEstimates = require("./useGasFeeEstimates");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Helper that returns the higher of two options for a new gas fee:
 * The original fee + 10% or
 * the current medium suggested fee from our gas estimation api
 *
 * @param {string} originalFee - hexWei vale of the original fee (maxFee or maxPriority)
 * @param {string} currentEstimate - decGwei value of the current medium gasFee estimate (maxFee or maxPriorityfee)
 * @returns {string} hexWei value of the higher of the two inputs.
 */
function getHighestIncrementedFee(originalFee, currentEstimate) {
  const buffedOriginalHexWei = (0, _gas.addTenPercent)(originalFee);
  const currentEstimateHexWei = (0, _conversions.decGWEIToHexWEI)(currentEstimate);
  return new _bignumber.default(buffedOriginalHexWei, 16).greaterThan(new _bignumber.default(currentEstimateHexWei, 16)) ? buffedOriginalHexWei : currentEstimateHexWei;
}
/**
 * When initializing cancellations or speed ups we need to set the baseline
 * gas fees to be 10% higher, which is the bare minimum that the network will
 * accept for transactions of the same nonce. Anything lower than this will be
 * discarded by the network to avoid DoS attacks. This hook returns an object
 * that either has gasPrice or maxFeePerGas/maxPriorityFeePerGas specified. In
 * addition the gasLimit will also be included.
 *
 * @param {} transaction
 * @returns {__import__(
 *   '../../app/scripts/controllers/transactions'
 * ).CustomGasSettings} Gas settings for cancellations/speed ups
 */


function useIncrementedGasFees(transaction) {
  const {
    gasFeeEstimates = {}
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)(); // We memoize this value so that it can be relied upon in other hooks.

  const customGasSettings = (0, _react.useMemo)(() => {
    var _transaction$txParams, _transaction$txParams2, _gasFeeEstimates$medi, _gasFeeEstimates$medi2, _gasFeeEstimates$medi3, _gasFeeEstimates$medi4;

    // This hook is called indiscriminantly on all transactions appearing in
    // the activity list. This includes transitional items such as signature
    // requests. These types of "transactions" are not really transactions and
    // do not have txParams. This is why we use optional chaining on the
    // txParams object in this hook.
    const temporaryGasSettings = {
      gasLimit: (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.gas,
      gas: (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.gas
    };
    const suggestedMaxFeePerGas = (_gasFeeEstimates$medi = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi2 = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi2 === void 0 ? void 0 : _gasFeeEstimates$medi2.suggestedMaxFeePerGas) !== null && _gasFeeEstimates$medi !== void 0 ? _gasFeeEstimates$medi : '0';
    const suggestedMaxPriorityFeePerGas = (_gasFeeEstimates$medi3 = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi4 = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi4 === void 0 ? void 0 : _gasFeeEstimates$medi4.suggestedMaxPriorityFeePerGas) !== null && _gasFeeEstimates$medi3 !== void 0 ? _gasFeeEstimates$medi3 : '0';

    if ((0, _transaction.isEIP1559Transaction)(transaction)) {
      var _transaction$txParams3, _transaction$txParams4;

      const transactionMaxFeePerGas = (_transaction$txParams3 = transaction.txParams) === null || _transaction$txParams3 === void 0 ? void 0 : _transaction$txParams3.maxFeePerGas;
      const transactionMaxPriorityFeePerGas = (_transaction$txParams4 = transaction.txParams) === null || _transaction$txParams4 === void 0 ? void 0 : _transaction$txParams4.maxPriorityFeePerGas;
      temporaryGasSettings.maxFeePerGas = transactionMaxFeePerGas === undefined || transactionMaxFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxFeePerGas, suggestedMaxFeePerGas);
      temporaryGasSettings.maxPriorityFeePerGas = transactionMaxPriorityFeePerGas === undefined || transactionMaxPriorityFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxPriorityFeePerGas, suggestedMaxPriorityFeePerGas);
    } else {
      var _transaction$txParams5;

      const transactionGasPrice = (_transaction$txParams5 = transaction.txParams) === null || _transaction$txParams5 === void 0 ? void 0 : _transaction$txParams5.gasPrice;
      temporaryGasSettings.gasPrice = transactionGasPrice === undefined || transactionGasPrice.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionGasPrice, suggestedMaxFeePerGas);
    }

    return temporaryGasSettings;
  }, [transaction, gasFeeEstimates]);
  return customGasSettings;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useOriginMetadata.js", {"../../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useOriginMetadata.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOriginMetadata = useOriginMetadata;

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _app = require("../../shared/constants/app");

/**
 * @typedef {object} OriginMetadata
 * @property {string} hostname - The hostname of the origin (host + port)
 * @property {string} origin - The original origin string itself
 * @property {string} [iconUrl] - The origin's site icon URL, if available
 * @property {string} [name] - The registered name of the origin if available
 */

/**
 * Gets origin metadata from redux and formats it appropriately.
 *
 * @param {string} origin - The fully formed url of the site interacting with
 * MetaMask
 * @returns {OriginMetadata | null} The origin metadata available for the
 * current origin
 */
function useOriginMetadata(origin) {
  const targetSubjectMetadata = (0, _reactRedux.useSelector)(state => (0, _selectors.getTargetSubjectMetadata)(state, origin));

  if (!origin) {
    return null;
  }

  let minimumOriginMetadata = null;

  try {
    const url = new URL(origin);
    minimumOriginMetadata = {
      host: url.host,
      hostname: url.hostname,
      origin,
      subjectType: _app.SUBJECT_TYPES.UNKNOWN
    };
  } catch (_) {// do nothing
  }

  if (targetSubjectMetadata && minimumOriginMetadata) {
    return { ...minimumOriginMetadata,
      ...targetSubjectMetadata
    };
  } else if (targetSubjectMetadata) {
    return targetSubjectMetadata;
  }

  return minimumOriginMetadata;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\usePrevious.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\usePrevious.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePrevious = usePrevious;

var _react = require("react");

function usePrevious(value) {
  const ref = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSafeGasEstimatePolling.js", {"../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useSafeGasEstimatePolling.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSafeGasEstimatePolling = useSafeGasEstimatePolling;

var _react = require("react");

var _actions = require("../store/actions");

/**
 * Provides a reusable hook that can be used for safely updating the polling
 * data in the gas fee controller. It makes a request to get estimates and
 * begin polling, keeping track of the poll token for the lifetime of the hook.
 * It then disconnects polling upon unmount. If the hook is unmounted while waiting
 * for `getGasFeeEstimatesAndStartPolling` to resolve, the `active` flag ensures
 * that a call to disconnect happens after promise resolution.
 */
function useSafeGasEstimatePolling() {
  (0, _react.useEffect)(() => {
    let active = true;
    let pollToken;

    const cleanup = () => {
      active = false;

      if (pollToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollToken);
        (0, _actions.removePollingTokenFromAppState)(pollToken);
      }
    };

    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(newPollToken => {
      if (active) {
        pollToken = newPollToken;
        (0, _actions.addPollingTokenToAppState)(pollToken);
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(newPollToken);
        (0, _actions.removePollingTokenFromAppState)(pollToken);
      }
    });
    window.addEventListener('beforeunload', cleanup);
    return () => {
      cleanup();
      window.removeEventListener('beforeunload', cleanup);
    };
  }, []);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSegmentContext.js", {"../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useSegmentContext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSegmentContext = useSegmentContext;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../helpers/constants/routes");

var _selectors = require("../selectors");

const PATHS_TO_CHECK = Object.keys(_routes.PATH_NAME_MAP);
/**
 * Returns the current page if it matches our route map, as well as the origin
 * if there is a confirmation that was triggered by a dapp. These values are
 * not required but add valuable context to events, and should be included in
 * the context object on the event payload.
 *
 * @returns {{
 *  page?: MetaMetricsPageObject
 *  referrer?: MetaMetricsReferrerObject
 * }}
 */

function useSegmentContext() {
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: PATHS_TO_CHECK,
    exact: true,
    strict: true
  });
  const txData = (0, _reactRedux.useSelector)(_selectors.txDataSelector) || {};
  const confirmTransactionOrigin = txData.origin;
  const referrer = confirmTransactionOrigin ? {
    url: confirmTransactionOrigin
  } : undefined;
  const page = match ? {
    path: match.path,
    title: _routes.PATH_NAME_MAP[match.path],
    url: match.path
  } : undefined;
  return {
    page,
    referrer
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useShouldAnimateGasEstimations.js", {"../ducks/app/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\app\\app.js","./useGasFeeEstimates":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useShouldAnimateGasEstimations.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShouldAnimateGasEstimations = useShouldAnimateGasEstimations;

var _react = require("react");

var _reactRedux = require("react-redux");

var _lodash = require("lodash");

var _app = require("../ducks/app/app");

var _useGasFeeEstimates = require("./useGasFeeEstimates");

function useShouldAnimateGasEstimations() {
  const {
    isGasEstimatesLoading,
    gasFeeEstimates
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const isGasLoadingAnimationActive = (0, _reactRedux.useSelector)(_app.getGasLoadingAnimationIsShowing); // Do the animation only when gas prices have changed...

  const lastGasEstimates = (0, _react.useRef)(gasFeeEstimates);
  const gasEstimatesChanged = !(0, _lodash.isEqual)(lastGasEstimates.current, gasFeeEstimates); // ... and only if gas didn't just load
  // Removing this line will cause the initial loading screen to stay empty

  const gasJustLoaded = (0, _lodash.isEqual)(lastGasEstimates.current, {});

  if (gasEstimatesChanged) {
    lastGasEstimates.current = gasFeeEstimates;
  }

  const showLoadingAnimation = isGasEstimatesLoading || gasEstimatesChanged && !gasJustLoaded;
  (0, _react.useEffect)(() => {
    if (isGasLoadingAnimationActive === false && showLoadingAnimation === true) {
      dispatch((0, _app.toggleGasLoadingAnimation)(true));
    }
  }, [dispatch, isGasLoadingAnimationActive, showLoadingAnimation]);
  (0, _react.useEffect)(() => {
    if (isGasLoadingAnimationActive === true && showLoadingAnimation === false) {
      setTimeout(() => {
        dispatch((0, _app.toggleGasLoadingAnimation)(false));
      }, 2000);
    }
  }, [dispatch, isGasLoadingAnimationActive, showLoadingAnimation]);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useShouldShowSpeedUp.js", {"../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useShouldShowSpeedUp.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShouldShowSpeedUp = useShouldShowSpeedUp;

var _react = require("react");

var _time = require("../../shared/constants/time");

/**
 * Evaluates whether the transaction is eligible to be sped up, and registers
 * an effect to check the logic again after the transaction has surpassed 5 seconds
 * of queue time.
 *
 * @param {object} transactionGroup - the transaction group to check against
 * @param {boolean} isEarliestNonce - Whether this group is currently the earliest nonce
 */
function useShouldShowSpeedUp(transactionGroup, isEarliestNonce) {
  const {
    transactions,
    hasRetried
  } = transactionGroup;
  const [earliestTransaction = {}] = transactions;
  const {
    submittedTime
  } = earliestTransaction;
  const [speedUpEnabled, setSpeedUpEnabled] = (0, _react.useState)(() => {
    return Date.now() - submittedTime > 5000 && isEarliestNonce && !hasRetried;
  });
  (0, _react.useEffect)(() => {
    // because this hook is optimized to only run on changes we have to
    // key into the changing time delta between submittedTime and now()
    // and if the status of the transaction changes based on that difference
    // trigger a setState call to tell react to re-render. This effect will
    // also immediately set retryEnabled and not create a timeout if the
    // condition is already met. This effect will run anytime the variables
    // for determining enabled status change
    let timeoutId;

    if (!hasRetried && isEarliestNonce && !speedUpEnabled) {
      if (Date.now() - submittedTime > _time.SECOND * 5) {
        setSpeedUpEnabled(true);
      } else {
        timeoutId = setTimeout(() => {
          setSpeedUpEnabled(true);
          clearTimeout(timeoutId);
        }, 5001 - (Date.now() - submittedTime));
      }
    } // Anytime the effect is re-ran, make sure to remove a previously set timeout
    // so as to avoid multiple timers potentially overlapping


    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [submittedTime, speedUpEnabled, hasRetried, isEarliestNonce]);
  return speedUpEnabled;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSwappedTokenValue.js", {"../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/swaps.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\swaps.utils.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./useTokenFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useSwappedTokenValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwappedTokenValue = useSwappedTokenValue;

var _reactRedux = require("react-redux");

var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");

var _transaction = require("../../shared/constants/transaction");

var _swaps = require("../../shared/modules/swaps.utils");

var _selectors = require("../selectors");

var _useTokenFiatAmount = require("./useTokenFiatAmount");

/**
 * @typedef {object} SwappedTokenValue
 * @property {string} swapTokenValue - a primary currency string formatted for display
 * @property {string} swapTokenFiatAmount - a secondary currency string formatted for display
 * @property {boolean} isViewingReceivedTokenFromSwap - true if user is on the asset page for the
 *                                                      destination/received asset in a swap.
 */

/**
 * A Swap transaction group's primaryTransaction contains details of the swap,
 * including the source (from) and destination (to) token type (ETH, DAI, etc..)
 * When viewing an asset page that is not for the current chain's default token, we
 * need to determine if that asset is the token that was received (destination) from
 * the swap. In that circumstance we would want to show the primaryCurrency in the
 * activity list that is most relevant for that token (- 1000 DAI, for example, when
 * swapping DAI for ETH).
 *
 * @param {__import__('../selectors').transactionGroup} transactionGroup - Group of transactions by nonce
 * @param {__import__('./useTokenDisplayValue').Token} currentAsset - The current asset the user is looking at
 * @returns {SwappedTokenValue}
 */
function useSwappedTokenValue(transactionGroup, currentAsset) {
  const {
    symbol,
    decimals,
    address
  } = currentAsset;
  const {
    primaryTransaction,
    initialTransaction
  } = transactionGroup;
  const {
    type
  } = initialTransaction;
  const {
    from: senderAddress
  } = initialTransaction.txParams || {};
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isViewingReceivedTokenFromSwap = (currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.symbol) === primaryTransaction.destinationTokenSymbol || (0, _swaps.isSwapsDefaultTokenAddress)(currentAsset.address, chainId) && (0, _swaps.isSwapsDefaultTokenSymbol)(primaryTransaction.destinationTokenSymbol, chainId);
  const swapTokenValue = type === _transaction.TRANSACTION_TYPES.SWAP && isViewingReceivedTokenFromSwap ? (0, _transactionsControllerUtils.getSwapsTokensReceivedFromTxMeta)(primaryTransaction.destinationTokenSymbol, initialTransaction, address, senderAddress, decimals, null, chainId) : type === _transaction.TRANSACTION_TYPES.SWAP && primaryTransaction.swapTokenValue;
  const isNegative = typeof swapTokenValue === 'string' ? Math.sign(swapTokenValue) === -1 : false;

  const _swapTokenFiatAmount = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, swapTokenValue || '', symbol);

  const swapTokenFiatAmount = swapTokenValue && isViewingReceivedTokenFromSwap && _swapTokenFiatAmount;
  return {
    swapTokenValue,
    swapTokenFiatAmount,
    isViewingReceivedTokenFromSwap,
    isNegative
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTimeout.js", {"react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTimeout.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimeout = useTimeout;

var _react = require("react");

/**
 * useTimeout
 *
 * @param {Function} cb - callback function inside setTimeout
 * @param {number} delay - delay in ms
 * @param {boolean} [immediate] - determines whether the timeout is invoked immediately
 * @returns {Function|undefined}
 */
function useTimeout(cb, delay, immediate = true) {
  const saveCb = (0, _react.useRef)();
  const [timeoutId, setTimeoutId] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    saveCb.current = cb;
  }, [cb]);
  (0, _react.useEffect)(() => {
    if (timeoutId !== 'start') {
      return undefined;
    }

    const id = setTimeout(() => {
      saveCb.current();
    }, delay);
    setTimeoutId(id);
    return () => {
      clearTimeout(timeoutId);
    };
  }, [delay, timeoutId]);
  const startTimeout = (0, _react.useCallback)(() => {
    clearTimeout(timeoutId);
    setTimeoutId('start');
  }, [timeoutId]);

  if (immediate) {
    startTimeout();
  }

  return startTimeout;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenData.js", {"../../shared/modules/transaction.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\transaction.utils.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTokenData.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenData = useTokenData;

var _react = require("react");

var _transaction = require("../../shared/modules/transaction.utils");

/**
 * useTokenData
 * Given the data string from txParams return a decoded object of the details of the
 * transaction data.
 *
 * @param {string} [transactionData] - Raw data string from token transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @returns {object} Decoded token data
 */
function useTokenData(transactionData, isTokenTransaction = true) {
  return (0, _react.useMemo)(() => {
    if (!isTokenTransaction || !transactionData) {
      return null;
    }

    return (0, _transaction.parseStandardTokenTransactionData)(transactionData);
  }, [isTokenTransaction, transactionData]);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenDisplayValue.js", {"../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/lib/transactions-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","./useTokenData":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenData.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTokenDisplayValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenDisplayValue = useTokenDisplayValue;

var _react = require("react");

var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");

var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");

var _useTokenData = require("./useTokenData");

/**
 * Defines the shape for the Token input parameter for useTokenDisplayValue
 *
 * @typedef {object} Token
 * @property {string} symbol - The string to use as a suffix for the token (eg. DAI)
 * @property {number} decimals - The number of decimals to show when displaying this type of token
 */

/**
 * useTokenDisplayValue
 * Given the data string from txParams and a token object with symbol and decimals, return
 * a displayValue that represents a string representing that token amount as a string. Also
 * return a tokenData object for downstream usage and the suffix for the token to use as props
 * for other hooks and/or components
 *
 * @param {string} [transactionData] - Raw data string from token transaction
 * @param {Token} [token] - The token associated with this transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @returns {string} The computed displayValue of the provided transactionData and token
 */
function useTokenDisplayValue(transactionData, token, isTokenTransaction = true) {
  const tokenData = (0, _useTokenData.useTokenData)(transactionData, isTokenTransaction);
  const tokenValue = (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const shouldCalculateTokenValue = Boolean( // If we are currently processing a token transaction
  isTokenTransaction && // and raw transaction data string is provided
  transactionData && // and a token object has been provided
  token && // and the provided token object contains a defined decimal value we need to calculate amount
  token.decimals && // and we are able to parse the token detail we to calculate amount from the raw data
  tokenValue);
  const displayValue = (0, _react.useMemo)(() => {
    if (!shouldCalculateTokenValue) {
      return null;
    }

    return (0, _transactionsControllerUtils.calcTokenAmount)(tokenValue, token.decimals).toString(10);
  }, [shouldCalculateTokenValue, tokenValue, token]);
  return displayValue;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js", {"../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTokenFiatAmount.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenFiatAmount = useTokenFiatAmount;

var _react = require("react");

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _tokenUtil = require("../helpers/utils/token-util");

var _metamask = require("../ducks/metamask/metamask");

var _stringUtils = require("../../shared/modules/string-utils");

/**
 * Get the token balance converted to fiat and formatted for display
 *
 * @param {string} [tokenAddress] - The token address
 * @param {string} [tokenAmount] - The token balance
 * @param {string} [tokenSymbol] - The token symbol
 * @param {object} [overrides] - A configuration object that allows the caller to explicitly pass an exchange rate or
 *                              ensure fiat is shown even if the property is not set in state.
 * @param {number} [overrides.exchangeRate] -  An exhchange rate to use instead of the one selected from state
 * @param {boolean} [overrides.showFiat] - If truthy, ensures the fiat value is shown even if the showFiat value from state is falsey
 * @param {boolean} hideCurrencySymbol - Indicates whether the returned formatted amount should include the trailing currency symbol
 * @returns {string} The formatted token amount in the user's chosen fiat currency
 */
function useTokenFiatAmount(tokenAddress, tokenAmount, tokenSymbol, overrides = {}, hideCurrencySymbol) {
  var _overrides$showFiat, _overrides$exchangeRa;

  const contractExchangeRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _reactRedux.shallowEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const userPrefersShownFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const showFiat = (_overrides$showFiat = overrides.showFiat) !== null && _overrides$showFiat !== void 0 ? _overrides$showFiat : userPrefersShownFiat;
  const contractExchangeTokenKey = Object.keys(contractExchangeRates).find(key => (0, _stringUtils.isEqualCaseInsensitive)(key, tokenAddress));
  const tokenExchangeRate = (_overrides$exchangeRa = overrides.exchangeRate) !== null && _overrides$exchangeRa !== void 0 ? _overrides$exchangeRa : contractExchangeTokenKey && contractExchangeRates[contractExchangeTokenKey];
  const formattedFiat = (0, _react.useMemo)(() => (0, _tokenUtil.getTokenFiatAmount)(tokenExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, true, hideCurrencySymbol), [tokenExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, hideCurrencySymbol]);

  if (!showFiat || currentCurrency.toUpperCase() === tokenSymbol) {
    return undefined;
  }

  return formattedFiat;
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenTracker.js", {"../../shared/constants/time":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\time.ts","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./useEqualityCheck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","@metamask/eth-token-tracker":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\eth-token-tracker\\dist\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTokenTracker.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenTracker = useTokenTracker;

var _react = require("react");

var _ethTokenTracker = _interopRequireDefault(require("@metamask/eth-token-tracker"));

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _time = require("../../shared/constants/time");

var _stringUtils = require("../../shared/modules/string-utils");

var _useEqualityCheck = require("./useEqualityCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useTokenTracker(tokens, includeFailedTokens = false, hideZeroBalanceTokens = false) {
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress, _reactRedux.shallowEqual);
  const [loading, setLoading] = (0, _react.useState)(() => (tokens === null || tokens === void 0 ? void 0 : tokens.length) >= 0);
  const [tokensWithBalances, setTokensWithBalances] = (0, _react.useState)([]);
  const [error, setError] = (0, _react.useState)(null);
  const tokenTracker = (0, _react.useRef)(null);
  const memoizedTokens = (0, _useEqualityCheck.useEqualityCheck)(tokens);
  const updateBalances = (0, _react.useCallback)(tokenWithBalances => {
    const matchingTokens = hideZeroBalanceTokens ? tokenWithBalances.filter(token => Number(token.balance) > 0) : tokenWithBalances; // TODO: improve this pattern for adding this field when we improve support for
    // EIP721 tokens.

    const matchingTokensWithIsERC721Flag = matchingTokens.map(token => {
      const additionalTokenData = memoizedTokens.find(t => (0, _stringUtils.isEqualCaseInsensitive)(t.address, token.address));
      return { ...token,
        isERC721: additionalTokenData === null || additionalTokenData === void 0 ? void 0 : additionalTokenData.isERC721,
        image: additionalTokenData === null || additionalTokenData === void 0 ? void 0 : additionalTokenData.image
      };
    });
    setTokensWithBalances(matchingTokensWithIsERC721Flag);
    setLoading(false);
    setError(null);
  }, [hideZeroBalanceTokens, memoizedTokens]);
  const showError = (0, _react.useCallback)(err => {
    setError(err);
    setLoading(false);
  }, []);
  const teardownTracker = (0, _react.useCallback)(() => {
    if (tokenTracker.current) {
      tokenTracker.current.stop();
      tokenTracker.current.removeAllListeners('update');
      tokenTracker.current.removeAllListeners('error');
      tokenTracker.current = null;
    }
  }, []);
  const buildTracker = (0, _react.useCallback)((address, tokenList) => {
    // clear out previous tracker, if it exists.
    teardownTracker();
    tokenTracker.current = new _ethTokenTracker.default({
      userAddress: address,
      provider: global.ethereumProvider,
      tokens: tokenList,
      includeFailedTokens,
      pollingInterval: _time.SECOND * 8,
      balanceDecimals: 5
    });
    tokenTracker.current.on('update', updateBalances);
    tokenTracker.current.on('error', showError);
    tokenTracker.current.updateBalances();
  }, [updateBalances, includeFailedTokens, showError, teardownTracker]); // Effect to remove the tracker when the component is removed from DOM
  // Do not overload this effect with additional dependencies. teardownTracker
  // is the only dependency here, which itself has no dependencies and will
  // never update. The lack of dependencies that change is what confirms
  // that this effect only runs on mount/unmount

  (0, _react.useEffect)(() => {
    return teardownTracker;
  }, [teardownTracker]); // Effect to set loading state and initialize tracker when values change

  (0, _react.useEffect)(() => {
    // This effect will only run initially and when:
    // 1. chainId is updated,
    // 2. userAddress is changed,
    // 3. token list is updated and not equal to previous list
    // in any of these scenarios, we should indicate to the user that their token
    // values are in the process of updating by setting loading state.
    setLoading(true);

    if (!userAddress || chainId === undefined || !global.ethereumProvider) {
      // If we do not have enough information to build a TokenTracker, we exit early
      // When the values above change, the effect will be restarted. We also teardown
      // tracker because inevitably this effect will run again momentarily.
      teardownTracker();
      return;
    }

    if (memoizedTokens.length === 0) {
      // sets loading state to false and token list to empty
      updateBalances([]);
    }

    buildTracker(userAddress, memoizedTokens);
  }, [userAddress, teardownTracker, chainId, memoizedTokens, updateBalances, buildTracker]);
  return {
    loading,
    tokensWithBalances,
    error
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokensToSearch.js", {"../../shared/constants/network":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\network.ts","../../shared/constants/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\swaps.js","../../shared/modules/hexstring-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\hexstring-utils.js","../../shared/modules/swaps.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\swaps.utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/swaps/swaps":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./useEqualityCheck":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","@metamask/controllers":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\controllers\\dist\\index.js","bignumber.js":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTokensToSearch.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRenderableTokenData = getRenderableTokenData;
exports.useTokensToSearch = useTokensToSearch;

var _react = require("react");

var _reactRedux = require("react-redux");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _lodash = require("lodash");

var _controllers = require("@metamask/controllers");

var _tokenUtil = require("../helpers/utils/token-util");

var _selectors = require("../selectors");

var _metamask = require("../ducks/metamask/metamask");

var _swaps = require("../ducks/swaps/swaps");

var _swaps2 = require("../../shared/modules/swaps.utils");

var _hexstringUtils = require("../../shared/modules/hexstring-utils");

var _swaps3 = require("../../shared/constants/swaps");

var _network = require("../../shared/constants/network");

var _useEqualityCheck = require("./useEqualityCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getRenderableTokenData(token, contractExchangeRates, conversionRate, currentCurrency, chainId, tokenList) {
  var _tokenList$address$to, _tokenList$address$to2;

  const {
    symbol,
    name,
    address,
    iconUrl,
    string,
    balance,
    decimals
  } = token;
  let contractExchangeRate;

  if ((0, _swaps2.isSwapsDefaultTokenSymbol)(symbol, chainId)) {
    contractExchangeRate = 1;
  } else if (string && conversionRate > 0) {
    // This condition improves performance significantly, because it only gets a contract exchange rate
    // if a token amount is truthy and conversion rate is higher than 0.
    contractExchangeRate = contractExchangeRates[(0, _hexstringUtils.toChecksumHexAddress)(address)];
  }

  const formattedFiat = (0, _tokenUtil.getTokenFiatAmount)(contractExchangeRate, conversionRate, currentCurrency, string, symbol, true) || '';
  const rawFiat = formattedFiat ? (0, _tokenUtil.getTokenFiatAmount)(contractExchangeRate, conversionRate, currentCurrency, string, symbol, false) : '';
  const chainIdForTokenIcons = chainId === _network.CHAIN_IDS.GOERLI ? _network.CHAIN_IDS.MAINNET : chainId;
  const tokenIconUrl = symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.MAINNET || symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.GOERLI || symbol === _network.CURRENCY_SYMBOLS.BNB && chainId === _network.CHAIN_IDS.BSC || symbol === _network.CURRENCY_SYMBOLS.MATIC && chainId === _network.CHAIN_IDS.POLYGON || symbol === _network.CURRENCY_SYMBOLS.AVALANCHE && chainId === _network.CHAIN_IDS.AVALANCHE ? iconUrl : (0, _controllers.formatIconUrlWithProxy)({
    chainId: chainIdForTokenIcons,
    tokenAddress: address || ''
  });
  const usedIconUrl = tokenIconUrl || (token === null || token === void 0 ? void 0 : token.image);
  return { ...token,
    primaryLabel: symbol,
    secondaryLabel: name || ((_tokenList$address$to = tokenList[address === null || address === void 0 ? void 0 : address.toLowerCase()]) === null || _tokenList$address$to === void 0 ? void 0 : _tokenList$address$to.name),
    rightPrimaryLabel: string && `${new _bignumber.default(string).round(6).toString()} ${symbol}`,
    rightSecondaryLabel: formattedFiat,
    iconUrl: usedIconUrl,
    identiconAddress: usedIconUrl ? null : address,
    balance,
    decimals,
    name: name || ((_tokenList$address$to2 = tokenList[address === null || address === void 0 ? void 0 : address.toLowerCase()]) === null || _tokenList$address$to2 === void 0 ? void 0 : _tokenList$address$to2.name),
    rawFiat
  };
}

function useTokensToSearch({
  usersTokens = [],
  topTokens = {},
  shuffledTokensList,
  tokenBucketPriority = _swaps3.TOKEN_BUCKET_PRIORITY.OWNED
}) {
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _reactRedux.shallowEqual);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const memoizedTopTokens = (0, _useEqualityCheck.useEqualityCheck)(topTokens);
  const memoizedUsersToken = (0, _useEqualityCheck.useEqualityCheck)(usersTokens);
  const defaultToken = getRenderableTokenData(defaultSwapsToken, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);
  const memoizedDefaultToken = (0, _useEqualityCheck.useEqualityCheck)(defaultToken);
  const swapsTokens = (0, _reactRedux.useSelector)(_swaps.getSwapsTokens, _lodash.isEqual) || [];
  const tokensToSearch = swapsTokens.length ? swapsTokens : [memoizedDefaultToken, ...shuffledTokensList.filter(token => token.symbol !== memoizedDefaultToken.symbol)];
  const memoizedTokensToSearch = (0, _useEqualityCheck.useEqualityCheck)(tokensToSearch);
  return (0, _react.useMemo)(() => {
    const usersTokensAddressMap = memoizedUsersToken.reduce((acc, token) => ({ ...acc,
      [token.address.toLowerCase()]: token
    }), {});
    const tokensToSearchBuckets = {
      owned: [],
      top: [],
      others: []
    };
    const memoizedSwapsAndUserTokensWithoutDuplicities = (0, _lodash.uniqBy)([memoizedDefaultToken, ...memoizedTokensToSearch, ...memoizedUsersToken], token => token.address.toLowerCase());
    memoizedSwapsAndUserTokensWithoutDuplicities.forEach(token => {
      const renderableDataToken = getRenderableTokenData({ ...usersTokensAddressMap[token.address.toLowerCase()],
        ...token
      }, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);

      if (tokenBucketPriority === _swaps3.TOKEN_BUCKET_PRIORITY.OWNED) {
        if ((0, _swaps2.isSwapsDefaultTokenSymbol)(renderableDataToken.symbol, chainId) || usersTokensAddressMap[token.address.toLowerCase()]) {
          tokensToSearchBuckets.owned.push(renderableDataToken);
        } else if (memoizedTopTokens[token.address.toLowerCase()]) {
          tokensToSearchBuckets.top[memoizedTopTokens[token.address.toLowerCase()].index] = renderableDataToken;
        } else {
          tokensToSearchBuckets.others.push(renderableDataToken);
        }
      } else if (memoizedTopTokens[token.address.toLowerCase()]) {
        tokensToSearchBuckets.top[memoizedTopTokens[token.address.toLowerCase()].index] = renderableDataToken;
      } else if ((0, _swaps2.isSwapsDefaultTokenSymbol)(renderableDataToken.symbol, chainId) || usersTokensAddressMap[token.address.toLowerCase()]) {
        tokensToSearchBuckets.owned.push(renderableDataToken);
      } else {
        tokensToSearchBuckets.others.push(renderableDataToken);
      }
    });
    tokensToSearchBuckets.owned = tokensToSearchBuckets.owned.sort(({
      rawFiat
    }, {
      rawFiat: secondRawFiat
    }) => {
      return new _bignumber.default(rawFiat || 0).gt(secondRawFiat || 0) ? -1 : 1;
    });
    tokensToSearchBuckets.top = tokensToSearchBuckets.top.filter(Boolean);

    if (tokenBucketPriority === _swaps3.TOKEN_BUCKET_PRIORITY.OWNED) {
      return [...tokensToSearchBuckets.owned, ...tokensToSearchBuckets.top, ...tokensToSearchBuckets.others];
    }

    return [...tokensToSearchBuckets.top, ...tokensToSearchBuckets.owned, ...tokensToSearchBuckets.others];
  }, [memoizedTokensToSearch, memoizedUsersToken, memoizedTopTokens, tokenConversionRates, conversionRate, currentCurrency, memoizedDefaultToken, chainId, tokenList, tokenBucketPriority]);
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js", {"../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../shared/lib/metamask-controller-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../helpers/constants/transactions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../helpers/utils/common.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\common.util.js","../helpers/utils/token-util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../helpers/utils/transactions.util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./useCurrencyDisplay":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","./useCurrentAsset":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useCurrentAsset.js","./useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","./useSwappedTokenValue":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useSwappedTokenValue.js","./useTokenData":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenData.js","./useTokenDisplayValue":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenDisplayValue.js","./useTokenFiatAmount":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","./useUserPreferencedCurrency":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTransactionDisplayData.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionDisplayData = useTransactionDisplayData;

var _reactRedux = require("react-redux");

var _selectors = require("../selectors/selectors");

var _transactions = require("../helpers/utils/transactions.util");

var _common = require("../helpers/utils/common.util");

var _common2 = require("../helpers/constants/common");

var _tokenUtil = require("../helpers/utils/token-util");

var _util = require("../helpers/utils/util");

var _transactions2 = require("../helpers/constants/transactions");

var _metamask = require("../ducks/metamask/metamask");

var _transaction = require("../../shared/constants/transaction");

var _actions = require("../store/actions");

var _stringUtils = require("../../shared/modules/string-utils");

var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");

var _useI18nContext = require("./useI18nContext");

var _useTokenFiatAmount = require("./useTokenFiatAmount");

var _useUserPreferencedCurrency = require("./useUserPreferencedCurrency");

var _useCurrencyDisplay = require("./useCurrencyDisplay");

var _useTokenDisplayValue = require("./useTokenDisplayValue");

var _useTokenData = require("./useTokenData");

var _useSwappedTokenValue = require("./useSwappedTokenValue");

var _useCurrentAsset = require("./useCurrentAsset");

/**
 *  There are seven types of transaction entries that are currently differentiated in the design:
 *  1. Signature request
 *  2. Send (sendEth sendTokens)
 *  3. Deposit
 *  4. Site interaction
 *  5. Approval
 *  6. Swap
 *  7. Swap Approval
 */
const signatureTypes = [null, undefined, _transaction.TRANSACTION_TYPES.SIGN, _transaction.TRANSACTION_TYPES.PERSONAL_SIGN, _transaction.TRANSACTION_TYPES.SIGN_TYPED_DATA, _transaction.TRANSACTION_TYPES.ETH_DECRYPT, _transaction.TRANSACTION_TYPES.ETH_GET_ENCRYPTION_PUBLIC_KEY];
/**
 * @typedef {(__import__('../../selectors/transactions').TransactionGroup} TransactionGroup
 */

/**
 * @typedef {object} TransactionDisplayData
 * @property {string} category - the transaction category that will be used for rendering the icon in the activity list
 * @property {string} primaryCurrency - the currency string to display in the primary position
 * @property {string} recipientAddress - the Ethereum address of the recipient
 * @property {string} senderAddress - the Ethereum address of the sender
 * @property {string} status - the status of the transaction
 * @property {string} subtitle - the supporting text describing the transaction
 * @property {boolean} subtitleContainsOrigin - true if the subtitle includes the origin of the tx
 * @property {string} title - the primary title of the tx that will be displayed in the activity list
 * @property {string} [secondaryCurrency] - the currency string to display in the secondary position
 */

/**
 * Get computed values used for displaying transaction data to a user
 *
 * The goal of this method is to perform all of the necessary computation and
 * state access required to take a transactionGroup and derive from it a shape
 * of data that can power all views related to a transaction. Presently the main
 * case is for shared logic between transaction-list-item and transaction-detail-view
 *
 * @param {TransactionGroup} transactionGroup - group of transactions of the same nonce
 * @returns {TransactionDisplayData}
 */

function useTransactionDisplayData(transactionGroup) {
  var _primaryTransaction$t, _initialTransaction$t2, _getTokenIdParam, _initialTransaction$t3, _initialTransaction$m;

  // To determine which primary currency to display for swaps transactions we need to be aware
  // of which asset, if any, we are viewing at present
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentAsset = (0, _useCurrentAsset.useCurrentAsset)();
  const knownTokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const knownCollectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    initialTransaction,
    primaryTransaction
  } = transactionGroup; // initialTransaction contains the data we need to derive the primary purpose of this transaction group

  const {
    type
  } = initialTransaction;
  const {
    from: senderAddress,
    to
  } = initialTransaction.txParams || {}; // for smart contract interactions, methodData can be used to derive the name of the action being taken

  const methodData = (0, _reactRedux.useSelector)(state => {
    var _initialTransaction$t;

    return (0, _selectors.getKnownMethodData)(state, initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t = initialTransaction.txParams) === null || _initialTransaction$t === void 0 ? void 0 : _initialTransaction$t.data);
  }) || {};
  const displayedStatusKey = (0, _transactions.getStatusKey)(primaryTransaction);
  const isPending = (displayedStatusKey in _transactions2.PENDING_STATUS_HASH);
  const isSubmitted = displayedStatusKey === _transaction.TRANSACTION_STATUSES.SUBMITTED;
  const primaryValue = (_primaryTransaction$t = primaryTransaction.txParams) === null || _primaryTransaction$t === void 0 ? void 0 : _primaryTransaction$t.value;
  const date = (0, _util.formatDateWithYearContext)(initialTransaction.time);
  let prefix = '-';
  let subtitle;
  let subtitleContainsOrigin = false;
  let recipientAddress = to; // This value is used to determine whether we should look inside txParams.data
  // to pull out and render token related information

  const isTokenCategory = _transactions2.TOKEN_CATEGORY_HASH[type]; // these values are always instantiated because they are either
  // used by or returned from hooks. Hooks must be called at the top level,
  // so as an additional safeguard against inappropriately associating token
  // transfers, we pass an additional argument to these hooks that will be
  // false for non-token transactions. This additional argument forces the
  // hook to return null

  const token = isTokenCategory && knownTokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, recipientAddress));
  const tokenData = (0, _useTokenData.useTokenData)(initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t2 = initialTransaction.txParams) === null || _initialTransaction$t2 === void 0 ? void 0 : _initialTransaction$t2.data, isTokenCategory); // Sometimes the tokenId value is parsed as "_value" param. Not seeing this often any more, but still occasionally:
  // i.e. call approve() on BAYC contract - https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#writeContract, and tokenId shows up as _value,
  // not sure why since it doesn't match the ERC721 ABI spec we use to parse these transactions - https://github.com/MetaMask/metamask-eth-abis/blob/d0474308a288f9252597b7c93a3a8deaad19e1b2/src/abis/abiERC721.ts#L62.

  const transactionDataTokenId = (_getTokenIdParam = (0, _tokenUtil.getTokenIdParam)(tokenData)) !== null && _getTokenIdParam !== void 0 ? _getTokenIdParam : (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const collectible = isTokenCategory && knownCollectibles.find(({
    address,
    tokenId
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, recipientAddress) && tokenId === transactionDataTokenId);
  const tokenDisplayValue = (0, _useTokenDisplayValue.useTokenDisplayValue)(initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t3 = initialTransaction.txParams) === null || _initialTransaction$t3 === void 0 ? void 0 : _initialTransaction$t3.data, token, isTokenCategory);
  const tokenFiatAmount = (0, _useTokenFiatAmount.useTokenFiatAmount)(token === null || token === void 0 ? void 0 : token.address, tokenDisplayValue, token === null || token === void 0 ? void 0 : token.symbol);
  const origin = (0, _util.stripHttpSchemes)(initialTransaction.origin || ((_initialTransaction$m = initialTransaction.msgParams) === null || _initialTransaction$m === void 0 ? void 0 : _initialTransaction$m.origin) || ''); // used to append to the primary display value. initialized to either token.symbol or undefined
  // but can later be modified if dealing with a swap

  let primarySuffix = isTokenCategory ? token === null || token === void 0 ? void 0 : token.symbol : undefined; // used to display the primary value of tx. initialized to either tokenDisplayValue or undefined
  // but can later be modified if dealing with a swap

  let primaryDisplayValue = isTokenCategory ? tokenDisplayValue : undefined; // used to display fiat amount of tx. initialized to either tokenFiatAmount or undefined
  // but can later be modified if dealing with a swap

  let secondaryDisplayValue = isTokenCategory ? tokenFiatAmount : undefined;
  let category;
  let title;
  const {
    swapTokenValue,
    isNegative,
    swapTokenFiatAmount,
    isViewingReceivedTokenFromSwap
  } = (0, _useSwappedTokenValue.useSwappedTokenValue)(transactionGroup, currentAsset);

  if (signatureTypes.includes(type)) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST;
    title = t('signatureRequest');
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TRANSACTION_TYPES.SWAP) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.SWAP;
    title = t('swapTokenToToken', [initialTransaction.sourceTokenSymbol, initialTransaction.destinationTokenSymbol]);
    subtitle = origin;
    subtitleContainsOrigin = true;
    primarySuffix = isViewingReceivedTokenFromSwap ? currentAsset.symbol : initialTransaction.sourceTokenSymbol;
    primaryDisplayValue = swapTokenValue;
    secondaryDisplayValue = swapTokenFiatAmount;

    if (isNegative) {
      prefix = '';
    } else if (isViewingReceivedTokenFromSwap) {
      prefix = '+';
    } else {
      prefix = '-';
    }
  } else if (type === _transaction.TRANSACTION_TYPES.SWAP_APPROVAL) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL;
    title = t('swapApproval', [primaryTransaction.sourceTokenSymbol]);
    subtitle = origin;
    subtitleContainsOrigin = true;
    primarySuffix = primaryTransaction.sourceTokenSymbol;
  } else if (type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL;
    prefix = '';
    title = t('approveSpendLimit', [(token === null || token === void 0 ? void 0 : token.symbol) || t('token')]);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SET_APPROVAL_FOR_ALL) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL;
    prefix = '';
    title = t('setApprovalForAllTitle', [(token === null || token === void 0 ? void 0 : token.symbol) || t('token')]);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION;
    const transactionTypeTitle = (0, _transactions.getTransactionTypeTitle)(t, type);
    title = (methodData === null || methodData === void 0 ? void 0 : methodData.name) && (0, _common.camelCaseToCapitalize)(methodData.name) || transactionTypeTitle;
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT) {
    // @todo Should perhaps be a separate group?
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION;
    title = (0, _transactions.getTransactionTypeTitle)(t, type);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TRANSACTION_TYPES.INCOMING) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.RECEIVE;
    title = t('receive');
    prefix = '';
    subtitle = t('fromAddress', [(0, _util.shortenAddress)(senderAddress)]);
  } else if (type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM || type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.SEND;
    title = t('sendSpecifiedTokens', [(token === null || token === void 0 ? void 0 : token.symbol) || (collectible === null || collectible === void 0 ? void 0 : collectible.name) || t('token')]);
    recipientAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else if (type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_SAFE_TRANSFER_FROM) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.SEND;
    title = t('safeTransferFrom');
    recipientAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else if (type === _transaction.TRANSACTION_TYPES.SIMPLE_SEND) {
    category = _transaction.TRANSACTION_GROUP_CATEGORIES.SEND;
    title = t('send');
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else {
    dispatch((0, _actions.captureSingleException)(`useTransactionDisplayData does not recognize transaction type. Type received is: ${type}`));
  }

  const primaryCurrencyPreferences = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common2.PRIMARY);
  const secondaryCurrencyPreferences = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common2.SECONDARY);
  const [primaryCurrency] = (0, _useCurrencyDisplay.useCurrencyDisplay)(primaryValue, {
    prefix,
    displayValue: primaryDisplayValue,
    suffix: primarySuffix,
    ...primaryCurrencyPreferences
  });
  const [secondaryCurrency] = (0, _useCurrencyDisplay.useCurrencyDisplay)(primaryValue, {
    prefix,
    displayValue: secondaryDisplayValue,
    hideLabel: isTokenCategory || Boolean(swapTokenValue),
    ...secondaryCurrencyPreferences
  });
  return {
    title,
    category,
    date,
    subtitle,
    subtitleContainsOrigin,
    primaryCurrency: type === _transaction.TRANSACTION_TYPES.SWAP && isPending ? '' : primaryCurrency,
    senderAddress,
    recipientAddress,
    secondaryCurrency: isTokenCategory && !tokenFiatAmount || type === _transaction.TRANSACTION_TYPES.SWAP && !swapTokenFiatAmount ? undefined : secondaryCurrency,
    displayedStatusKey,
    isPending,
    isSubmitted
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js", {"../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../contexts/gasFee":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\gasFee.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useTransactionEventFragment.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionEventFragment = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _gasFee = require("../contexts/gasFee");

var _actions = require("../store/actions");

var _selectors = require("../selectors");

var _transaction = require("../../shared/constants/transaction");

const useTransactionEventFragment = () => {
  const {
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const fragment = (0, _reactRedux.useSelector)(state => (0, _selectors.selectMatchingFragment)(state, {
    fragmentOptions: {},
    existingId: `transaction-added-${transaction === null || transaction === void 0 ? void 0 : transaction.id}`
  }));
  const updateTransactionEventFragment = (0, _react.useCallback)(async params => {
    if (!transaction || !transaction.id) {
      return;
    }

    if (!fragment) {
      await (0, _actions.createTransactionEventFragment)(transaction.id, _transaction.TRANSACTION_EVENTS.APPROVED);
    }

    (0, _actions.updateEventFragment)(`transaction-added-${transaction.id}`, params);
  }, [fragment, transaction]);
  return {
    updateTransactionEventFragment
  };
};

exports.useTransactionEventFragment = useTransactionEventFragment;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js", {"../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/common":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\common.js","../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\hooks\useUserPreferencedCurrency.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserPreferencedCurrency = useUserPreferencedCurrency;

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _metamask = require("../ducks/metamask/metamask");

var _common = require("../helpers/constants/common");

/**
 * Defines the shape of the options parameter for useUserPreferencedCurrency
 *
 * @typedef {object} UseUserPreferencedCurrencyOptions
 * @property {number} [numberOfDecimals] - Number of significant decimals to display
 * @property {number} [ethNumberOfDecimals] - Number of significant decimals to display
 *                                             when using ETH
 * @property {number} [fiatNumberOfDecimals] - Number of significant decimals to display
 *                                            when using fiat
 */

/**
 * Defines the return shape of useUserPreferencedCurrency
 *
 * @typedef {object} UserPreferredCurrency
 * @property {string} currency - the currency type to use (eg: 'ETH', 'usd')
 * @property {number} numberOfDecimals - Number of significant decimals to display
 */

/**
 * useUserPreferencedCurrency
 *
 * returns an object that contains what currency to use for displaying values based
 * on the user's preference settings, as well as the significant number of decimals
 * to display based on the currency
 *
 * @param {"PRIMARY" | "SECONDARY"} type - what display type is being rendered
 * @param {UseUserPreferencedCurrencyOptions} opts - options to override default values
 * @returns {UserPreferredCurrency}
 */
function useUserPreferencedCurrency(type, opts = {}) {
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences, _reactRedux.shallowEqual);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat) || opts.showFiatOverride;
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  let currency, numberOfDecimals;

  if (!showFiat || type === _common.PRIMARY && useNativeCurrencyAsPrimaryCurrency || type === _common.SECONDARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display ETH
    currency = nativeCurrency || _common.ETH;
    numberOfDecimals = opts.numberOfDecimals || opts.ethNumberOfDecimals || 8;
  } else if (type === _common.SECONDARY && useNativeCurrencyAsPrimaryCurrency || type === _common.PRIMARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display Fiat
    currency = currentCurrency;
    numberOfDecimals = opts.numberOfDecimals || opts.fiatNumberOfDecimals || 2;
  }

  return {
    currency,
    numberOfDecimals
  };
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\index.js", {"../app/scripts/lib/setupSentry":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\setupSentry.js","../app/scripts/lib/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\app\\scripts\\lib\\util.js","../shared/constants/alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\alerts.js","../shared/constants/app":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\app.ts","../shared/lib/error-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\error-utils.js","../shared/lib/switch-direction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\lib\\switch-direction.js","../shared/modules/object.utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\object.utils.js","./ducks/alerts":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\alerts\\index.js","./ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./helpers/utils/tx-helper":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\tx-helper.js","./pages":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\index.js","./selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","./store/action-queue":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\action-queue\\index.js","./store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./store/store":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\store.js","copy-to-clipboard":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","lodash":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-dom\\index.js","webextension-polyfill":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = launchMetamaskUi;
exports.updateBackgroundConnection = void 0;

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _lodash = require("lodash");

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));

var _util = require("../app/scripts/lib/util");

var _alerts = require("../shared/constants/alerts");

var _object = require("../shared/modules/object.utils");

var _setupSentry = require("../app/scripts/lib/setupSentry");

var _app = require("../shared/constants/app");

var _switchDirection = _interopRequireDefault(require("../shared/lib/switch-direction"));

var _errorUtils = require("../shared/lib/error-utils");

var actions = _interopRequireWildcard(require("./store/actions"));

var _store = _interopRequireDefault(require("./store/store"));

var _selectors = require("./selectors");

var _alerts2 = require("./ducks/alerts");

var _metamask = require("./ducks/metamask/metamask");

var _pages = _interopRequireDefault(require("./pages"));

var _txHelper = _interopRequireDefault(require("./helpers/utils/tx-helper"));

var _actionQueue = require("./store/action-queue");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_loglevel.default.setLevel(global.METAMASK_DEBUG ? 'debug' : 'warn');

let reduxStore;
/**
 * Method to update backgroundConnection object use by UI
 *
 * @param backgroundConnection - connection object to background
 */

const updateBackgroundConnection = backgroundConnection => {
  (0, _actionQueue._setBackgroundConnection)(backgroundConnection);
  backgroundConnection.onNotification(data => {
    if (data.method === 'sendUpdate') {
      reduxStore.dispatch(actions.updateMetamaskState(data.params[0]));
    } else {
      throw new Error(`Internal JSON-RPC Notification Not Handled:\n\n ${JSON.stringify(data)}`);
    }
  });
};

exports.updateBackgroundConnection = updateBackgroundConnection;

function launchMetamaskUi(opts, cb) {
  const {
    backgroundConnection
  } = opts; // check if we are unlocked first

  backgroundConnection.getState(function (err, metamaskState) {
    if (err) {
      cb(err, metamaskState);
      return;
    }

    startApp(metamaskState, backgroundConnection, opts).then(store => {
      setupDebuggingHelpers(store);
      cb(null, store);
    });
  });
}

async function startApp(metamaskState, backgroundConnection, opts) {
  // parse opts
  if (!metamaskState.featureFlags) {
    metamaskState.featureFlags = {};
  }

  const {
    currentLocaleMessages,
    enLocaleMessages
  } = await (0, _errorUtils.setupLocale)(metamaskState.currentLocale);

  if (metamaskState.textDirection === 'rtl') {
    await (0, _switchDirection.default)('rtl');
  }

  const draftInitialState = {
    activeTab: opts.activeTab,
    // metamaskState represents the cross-tab state
    metamask: metamaskState,
    // appState represents the current tab's popup state
    appState: {},
    localeMessages: {
      current: currentLocaleMessages,
      en: enLocaleMessages
    }
  };
  updateBackgroundConnection(backgroundConnection);

  if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
    const {
      origin
    } = draftInitialState.activeTab;
    const permittedAccountsForCurrentTab = (0, _selectors.getPermittedAccountsForCurrentTab)(draftInitialState);
    const selectedAddress = (0, _selectors.getSelectedAddress)(draftInitialState);
    const unconnectedAccountAlertShownOrigins = (0, _metamask.getUnconnectedAccountAlertShown)(draftInitialState);
    const unconnectedAccountAlertIsEnabled = (0, _metamask.getUnconnectedAccountAlertEnabledness)(draftInitialState);

    if (origin && unconnectedAccountAlertIsEnabled && !unconnectedAccountAlertShownOrigins[origin] && permittedAccountsForCurrentTab.length > 0 && !permittedAccountsForCurrentTab.includes(selectedAddress)) {
      draftInitialState[_alerts.ALERT_TYPES.unconnectedAccount] = {
        state: _alerts2.ALERT_STATE.OPEN
      };
      actions.setUnconnectedAccountAlertShown(origin);
    }
  }

  const store = (0, _store.default)(draftInitialState);
  reduxStore = store; // if unconfirmed txs, start on txConf page

  const unapprovedTxsAll = (0, _txHelper.default)(metamaskState.unapprovedTxs, metamaskState.unapprovedMsgs, metamaskState.unapprovedPersonalMsgs, metamaskState.unapprovedDecryptMsgs, metamaskState.unapprovedEncryptionPublicKeyMsgs, metamaskState.unapprovedTypedMessages, metamaskState.network, metamaskState.provider.chainId);
  const numberOfUnapprovedTx = unapprovedTxsAll.length;

  if (numberOfUnapprovedTx > 0) {
    store.dispatch(actions.showConfTxPage({
      id: unapprovedTxsAll[0].id
    }));
  } // global metamask api - used by tooling


  global.metamask = {
    updateCurrentLocale: code => {
      store.dispatch(actions.updateCurrentLocale(code));
    },
    setProviderType: type => {
      store.dispatch(actions.setProviderType(type));
    },
    setFeatureFlag: (key, value) => {
      store.dispatch(actions.setFeatureFlag(key, value));
    }
  }; // start app

  (0, _reactDom.render)( /*#__PURE__*/_react.default.createElement(_pages.default, {
    store: store
  }), opts.container);
  return store;
}

function setupDebuggingHelpers(store) {
  window.getCleanAppState = async function () {
    const state = (0, _lodash.clone)(store.getState());
    state.version = global.platform.getVersion();
    state.browser = window.navigator.userAgent;
    state.completeTxList = await actions.getTransactions({
      filterToCurrentNetwork: false
    });
    return state;
  };

  window.sentryHooks.getSentryState = function () {
    const fullState = store.getState();
    const debugState = (0, _object.maskObject)(fullState, _setupSentry.SENTRY_STATE);
    return {
      browser: window.navigator.userAgent,
      store: debugState,
      version: global.platform.getVersion()
    };
  };
}

window.logStateString = async function (cb) {
  const state = await window.getCleanAppState();

  _webextensionPolyfill.default.runtime.getPlatformInfo().then(platform => {
    state.platform = platform;
    const stateString = JSON.stringify(state, null, 2);
    cb(null, stateString);
  }).catch(err => {
    cb(err);
  });
};

window.logState = function (toClipboard) {
  return window.logStateString((err, result) => {
    if (err) {
      console.error(err.message);
    } else if (toClipboard) {
      (0, _copyToClipboard.default)(result);
      console.log('State log copied');
    } else {
      console.log(result);
    }
  });
};

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\add-collectible\\add-collectible.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../components/app/collectibles-detection-notice":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\collectibles-detection-notice\\index.js","../../components/ui/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../components/ui/box":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/form-field":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\form-field\\index.js","../../components/ui/page-container":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/typography":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/design-system":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","@metamask/controllers":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\controllers\\dist\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\add-collectible\add-collectible.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AddCollectible;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _controllers = require("@metamask/controllers");

var _useI18nContext = require("../../hooks/useI18nContext");

var _routes = require("../../helpers/constants/routes");

var _designSystem = require("../../helpers/constants/design-system");

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../components/ui/typography"));

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message"));

var _pageContainer = _interopRequireDefault(require("../../components/ui/page-container"));

var _actions = require("../../store/actions");

var _formField = _interopRequireDefault(require("../../components/ui/form-field"));

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _collectiblesDetectionNotice = _interopRequireDefault(require("../../components/app/collectibles-detection-notice"));

var _metametrics = require("../../contexts/metametrics");

var _transaction = require("../../../shared/constants/transaction");

var _metametrics2 = require("../../../shared/constants/metametrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AddCollectible() {
  var _history$location, _history$location$sta, _history$location2, _history$location2$st, _ref;

  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const useCollectibleDetection = (0, _reactRedux.useSelector)(_selectors.getUseCollectibleDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const collectibleDetectionNoticeDismissed = (0, _reactRedux.useSelector)(_metamask.getCollectiblesDetectionNoticeDismissed);
  const addressEnteredOnImportTokensPage = history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.addressEnteredOnImportTokensPage;
  const contractAddressToConvertFromTokenToCollectible = history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.tokenAddress;
  const [address, setAddress] = (0, _react.useState)((_ref = addressEnteredOnImportTokensPage !== null && addressEnteredOnImportTokensPage !== void 0 ? addressEnteredOnImportTokensPage : contractAddressToConvertFromTokenToCollectible) !== null && _ref !== void 0 ? _ref : '');
  const [tokenId, setTokenId] = (0, _react.useState)('');
  const [disabled, setDisabled] = (0, _react.useState)(true);
  const [collectibleAddFailed, setCollectibleAddFailed] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);

  const handleAddCollectible = async () => {
    try {
      await dispatch((0, _actions.addCollectibleVerifyOwnership)(address, tokenId));
    } catch (error) {
      const {
        message
      } = error;
      dispatch((0, _actions.setNewCollectibleAddedMessage)(message));
      setCollectibleAddFailed(true);
      return;
    }

    if (contractAddressToConvertFromTokenToCollectible) {
      await dispatch((0, _actions.ignoreTokens)({
        tokensToIgnore: contractAddressToConvertFromTokenToCollectible,
        dontShowLoadingIndicator: true
      }));
    }

    dispatch((0, _actions.setNewCollectibleAddedMessage)('success'));
    const tokenDetails = await (0, _actions.getTokenStandardAndDetails)(address, null, tokenId.toString());
    trackEvent({
      event: _metametrics2.EVENT_NAMES.TOKEN_ADDED,
      category: 'Wallet',
      sensitiveProperties: {
        token_contract_address: address,
        token_symbol: tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol,
        tokenId: tokenId.toString(),
        asset_type: _transaction.ASSET_TYPES.COLLECTIBLE,
        token_standard: tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.standard,
        source: _metametrics2.EVENT.SOURCE.TOKEN.CUSTOM
      }
    });
    history.push(_routes.DEFAULT_ROUTE);
  };

  const validateAndSetAddress = val => {
    setDisabled(!_controllers.util.isValidHexAddress(val) || !tokenId);
    setAddress(val);
  };

  const validateAndSetTokenId = val => {
    setDisabled(!_controllers.util.isValidHexAddress(address) || !val || isNaN(Number(val)));
    setTokenId(val);
  };

  return /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
    title: t('importNFT'),
    onSubmit: () => {
      handleAddCollectible();
    },
    submitText: t('add'),
    onCancel: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    onClose: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    disabled: disabled,
    contentComponent: /*#__PURE__*/_react.default.createElement(_box.default, null, isMainnet && !useCollectibleDetection && !collectibleDetectionNoticeDismissed ? /*#__PURE__*/_react.default.createElement(_collectiblesDetectionNotice.default, null) : null, collectibleAddFailed && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "danger",
      useIcon: true,
      iconFillColor: "var(--color-error-default)",
      message: /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.INLINE_FLEX
      }, /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TYPOGRAPHY.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
        margin: 0
      }, t('collectibleAddFailedMessage')), /*#__PURE__*/_react.default.createElement("button", {
        className: "fas fa-times add-collectible__close",
        title: t('close'),
        onClick: () => setCollectibleAddFailed(false)
      }))
    }), /*#__PURE__*/_react.default.createElement(_box.default, {
      margin: 4
    }, /*#__PURE__*/_react.default.createElement(_formField.default, {
      dataTestId: "address",
      titleText: t('address'),
      placeholder: "0x...",
      value: address,
      onChange: val => {
        validateAndSetAddress(val);
        setCollectibleAddFailed(false);
      },
      tooltipText: t('importNFTAddressToolTip'),
      autoFocus: true
    }), /*#__PURE__*/_react.default.createElement(_formField.default, {
      dataTestId: "token-id",
      titleText: t('tokenId'),
      placeholder: t('nftTokenIdPlaceholder'),
      value: tokenId,
      onChange: val => {
        validateAndSetTokenId(val);
        setCollectibleAddFailed(false);
      },
      tooltipText: t('importNFTTokenIdToolTip')
    })))
  });
}

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\add-collectible\\index.js", {"./add-collectible":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\add-collectible\\add-collectible.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\add-collectible\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _addCollectible.default;
  }
});

var _addCollectible = _interopRequireDefault(require("./add-collectible"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\asset.js", {"../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../components/app/collectible-details/collectible-details":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\collectible-details\\collectible-details.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","./components/native-asset":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\native-asset.js","./components/token-asset":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\token-asset.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _stringUtils = require("../../../shared/modules/string-utils");

var _collectibleDetails = _interopRequireDefault(require("../../components/app/collectible-details/collectible-details"));

var _metamask = require("../../ducks/metamask/metamask");

var _routes = require("../../helpers/constants/routes");

var _nativeAsset = _interopRequireDefault(require("./components/native-asset"));

var _tokenAsset = _interopRequireDefault(require("./components/token-asset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Asset = () => {
  const nativeCurrency = (0, _reactRedux.useSelector)(state => state.metamask.nativeCurrency);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const collectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const {
    asset,
    id
  } = (0, _reactRouterDom.useParams)();
  const token = tokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, asset));
  const collectible = collectibles.find(({
    address,
    tokenId
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, asset) && id === tokenId.toString());
  (0, _react.useEffect)(() => {
    const el = document.querySelector('.app');
    el.scroll(0, 0);
  }, []);
  let content;

  if (collectible) {
    content = /*#__PURE__*/_react.default.createElement(_collectibleDetails.default, {
      collectible: collectible
    });
  } else if (token) {
    content = /*#__PURE__*/_react.default.createElement(_tokenAsset.default, {
      token: token
    });
  } else if (asset === nativeCurrency) {
    content = /*#__PURE__*/_react.default.createElement(_nativeAsset.default, {
      nativeCurrency: nativeCurrency
    });
  } else {
    content = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "main-container asset__container"
  }, content);
};

var _default = Asset;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-breadcrumb.js", {"prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\components\asset-breadcrumb.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AssetBreadcrumb = ({
  accountName,
  assetName,
  onBack
}) => {
  return /*#__PURE__*/_react.default.createElement("button", {
    className: "asset-breadcrumb",
    onClick: onBack
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-left asset-breadcrumb__chevron",
    "data-testid": "asset__back"
  }), /*#__PURE__*/_react.default.createElement("span", null, accountName), "\xA0/\xA0", /*#__PURE__*/_react.default.createElement("span", {
    className: "asset-breadcrumb__asset"
  }, assetName));
};

AssetBreadcrumb.propTypes = {
  accountName: _propTypes.default.string.isRequired,
  assetName: _propTypes.default.string.isRequired,
  onBack: _propTypes.default.func.isRequired
};
var _default = AssetBreadcrumb;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js", {"./asset-breadcrumb":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-breadcrumb.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\components\asset-navigation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _assetBreadcrumb = _interopRequireDefault(require("./asset-breadcrumb"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AssetNavigation = ({
  accountName,
  assetName,
  onBack,
  optionsButton
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "asset-navigation"
  }, /*#__PURE__*/_react.default.createElement(_assetBreadcrumb.default, {
    accountName: accountName,
    assetName: assetName,
    onBack: onBack
  }), optionsButton);
};

AssetNavigation.propTypes = {
  accountName: _propTypes.default.string.isRequired,
  assetName: _propTypes.default.string.isRequired,
  onBack: _propTypes.default.func.isRequired,
  optionsButton: _propTypes.default.element
};
AssetNavigation.defaultProps = {
  optionsButton: undefined
};
var _default = AssetNavigation;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js", {"../../../components/ui/menu":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\menu\\index.js","../../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\components\asset-options.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _i18n = require("../../../contexts/i18n");

var _menu = require("../../../components/ui/menu");

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const AssetOptions = ({
  onRemove,
  onClickBlockExplorer,
  onViewAccountDetails,
  onViewTokenDetails,
  tokenSymbol,
  isNativeAsset
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [assetOptionsButtonElement, setAssetOptionsButtonElement] = (0, _react.useState)(null);
  const [assetOptionsOpen, setAssetOptionsOpen] = (0, _react.useState)(false);
  const history = (0, _reactRouterDom.useHistory)();
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);

  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };

  const openBlockExplorer = () => {
    setAssetOptionsOpen(false);
    onClickBlockExplorer();
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("button", {
    className: "fas fa-ellipsis-v asset-options__button",
    "data-testid": "asset-options__button",
    onClick: () => setAssetOptionsOpen(true),
    ref: setAssetOptionsButtonElement,
    title: t('assetOptions')
  }), assetOptionsOpen ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: assetOptionsButtonElement,
    onHide: () => setAssetOptionsOpen(false)
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconClassName: "fas fa-qrcode",
    "data-testid": "asset-options__account-details",
    onClick: () => {
      setAssetOptionsOpen(false);
      onViewAccountDetails();
    }
  }, t('accountDetails')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconClassName: "fas fa-external-link-alt asset-options__icon",
    "data-testid": "asset-options__etherscan",
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer
  }, t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [t('blockExplorerAssetAction')])), isNativeAsset ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconClassName: "fas fa-trash-alt asset-options__icon",
    "data-testid": "asset-options__hide",
    onClick: () => {
      setAssetOptionsOpen(false);
      onRemove();
    }
  }, t('hideTokenSymbol', [tokenSymbol])), isNativeAsset ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconClassName: "fas fa-info-circle asset-options__icon",
    "data-testid": "asset-options__token-details",
    onClick: () => {
      setAssetOptionsOpen(false);
      onViewTokenDetails();
    }
  }, t('tokenDetails'))) : null);
};

const isNotFunc = p => {
  return typeof p !== 'function';
};

AssetOptions.propTypes = {
  isNativeAsset: _propTypes.default.bool,
  onClickBlockExplorer: _propTypes.default.func.isRequired,
  onViewAccountDetails: _propTypes.default.func.isRequired,
  onRemove: props => {
    if (props.isNativeAsset === false && isNotFunc(props.onRemove)) {
      throw new Error('When isNativeAsset is true, onRemove is a required prop');
    }
  },
  onViewTokenDetails: props => {
    if (props.isNativeAsset === false && isNotFunc(props.onViewTokenDetails)) {
      throw new Error('When isNativeAsset is true, onViewTokenDetails is a required prop');
    }
  },
  tokenSymbol: props => {
    if (props.isNativeAsset === false && typeof props.tokenSymbol !== 'string') {
      throw new Error('When isNativeAsset is true, tokenSymbol is a required prop');
    }
  }
};
var _default = AssetOptions;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\native-asset.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/app/transaction-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js","../../../components/app/wallet-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./asset-navigation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js","./asset-options":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\components\native-asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NativeAsset;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _etherscanLink = require("@metamask/etherscan-link");

var _transactionList = _interopRequireDefault(require("../../../components/app/transaction-list"));

var _walletOverview = require("../../../components/app/wallet-overview");

var _selectors = require("../../../selectors/selectors");

var _actions = require("../../../store/actions");

var _routes = require("../../../helpers/constants/routes");

var _util = require("../../../helpers/utils/util");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _assetNavigation = _interopRequireDefault(require("./asset-navigation"));

var _assetOptions = _interopRequireDefault(require("./asset-options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function NativeAsset({
  nativeCurrency
}) {
  const selectedAccountName = (0, _reactRedux.useSelector)(state => (0, _selectors.getSelectedIdentity)(state).name);
  const dispatch = (0, _reactRedux.useDispatch)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const address = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const history = (0, _reactRouterDom.useHistory)();
  const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const isCustomNetwork = (0, _reactRedux.useSelector)(_selectors.getIsCustomNetwork);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: nativeCurrency,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_assetOptions.default, {
      isNativeAsset: true,
      onClickBlockExplorer: () => {
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            link_type: 'Account Tracker',
            action: 'Asset Options',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      onViewAccountDetails: () => {
        dispatch((0, _actions.showModal)({
          name: 'ACCOUNT_DETAILS'
        }));
      },
      isCustomNetwork: isCustomNetwork
    })
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.EthOverview, {
    className: "asset__overview"
  }), /*#__PURE__*/_react.default.createElement(_transactionList.default, {
    hideTokenTransactions: true
  }));
}

NativeAsset.propTypes = {
  nativeCurrency: _propTypes.default.string.isRequired
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\token-asset.js", {"../../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../components/app/transaction-list":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js","../../../components/app/wallet-overview":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js","../../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors/selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\selectors.js","../../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","./asset-navigation":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js","./asset-options":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js","@metamask/etherscan-link":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\prop-types\\index.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\components\token-asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenAsset;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _etherscanLink = require("@metamask/etherscan-link");

var _transactionList = _interopRequireDefault(require("../../../components/app/transaction-list"));

var _walletOverview = require("../../../components/app/wallet-overview");

var _selectors = require("../../../selectors/selectors");

var _routes = require("../../../helpers/constants/routes");

var _util = require("../../../helpers/utils/util");

var _actions = require("../../../store/actions");

var _metametrics = require("../../../contexts/metametrics");

var _metametrics2 = require("../../../../shared/constants/metametrics");

var _assetNavigation = _interopRequireDefault(require("./asset-navigation"));

var _assetOptions = _interopRequireDefault(require("./asset-options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TokenAsset({
  token
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const selectedAccountName = selectedIdentity.name;
  const selectedAddress = selectedIdentity.address;
  const history = (0, _reactRouterDom.useHistory)();
  const tokenTrackerLink = (0, _etherscanLink.getTokenTrackerLink)(token.address, chainId, null, selectedAddress, rpcPrefs);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const isCustomNetwork = (0, _reactRedux.useSelector)(_selectors.getIsCustomNetwork);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: token.symbol,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_assetOptions.default, {
      onRemove: () => dispatch((0, _actions.showModal)({
        name: 'HIDE_TOKEN_CONFIRMATION',
        token,
        history
      })),
      isCustomNetwork: isCustomNetwork,
      onClickBlockExplorer: () => {
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics2.EVENT.CATEGORIES.NAVIGATION,
          properties: {
            link_type: 'Token Tracker',
            action: 'Token Options',
            block_explorer_domain: (0, _util.getURLHostName)(tokenTrackerLink)
          }
        });
        global.platform.openTab({
          url: tokenTrackerLink
        });
      },
      onViewAccountDetails: () => {
        dispatch((0, _actions.showModal)({
          name: 'ACCOUNT_DETAILS'
        }));
      },
      onViewTokenDetails: () => {
        history.push(`${_routes.TOKEN_DETAILS}/${token.address}`);
      },
      tokenSymbol: token.symbol
    })
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.TokenOverview, {
    className: "asset__overview",
    token: token
  }), /*#__PURE__*/_react.default.createElement(_transactionList.default, {
    tokenAddress: token.address
  }));
}

TokenAsset.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};


      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\index.js", {"./asset":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\asset\\asset.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\asset\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _asset.default;
  }
});

var _asset = _interopRequireDefault(require("./asset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.js", {"../../../shared/constants/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\metametrics.js","../../../shared/constants/transaction":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\constants\\transaction.js","../../../shared/modules/string-utils":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\shared\\modules\\string-utils.js","../../components/ui/actionable-message/actionable-message":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../components/ui/button":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/token-balance":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\i18n.js","../../contexts/metametrics":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/history/history":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/zendesk-url":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../selectors":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\store\\actions.js","react":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react\\index.js","react-redux":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-add-suggested-token\confirm-add-suggested-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message/actionable-message"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));

var _i18n = require("../../contexts/i18n");

var _metametrics = require("../../contexts/metametrics");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));

var _stringUtils = require("../../../shared/modules/string-utils");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _metametrics2 = require("../../../shared/constants/metametrics");

var _transaction = require("../../../shared/constants/transaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getTokenName(name, symbol) {
  return name === undefined ? symbol : `${name} (${symbol})`;
}
/**
 * @param {Array} suggestedAssets - an array of assets suggested to add to the user's wallet
 * via the RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with
 *          an address that matches an existing token.
 */


function hasDuplicateAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(({
      address
    }) => {
      return (0, _stringUtils.isEqualCaseInsensitive)(address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}
/**
 * @param {Array} suggestedAssets - a list of assets suggested to add to the user's wallet
 * via RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with both
 *          1. a symbol that matches an existing token
 *          2. an address that does not match an existing token
 */


function hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(token => {
      return (0, _stringUtils.isEqualCaseInsensitive)(token.symbol, asset.symbol) && !(0, _stringUtils.isEqualCaseInsensitive)(token.address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}

const ConfirmAddSuggestedToken = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const suggestedAssets = (0, _reactRedux.useSelector)(_selectors.getSuggestedAssets);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const knownTokenActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('knownTokenWarning', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "confirm-add-suggested-token-duplicate-warning",
        className: "confirm-add-suggested-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: _zendeskUrl.default.TOKEN_SAFETY_PRACTICES
      }, t('learnScamRisk'))]),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  const reusedTokenNameActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('reusedTokenNameWarning'),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  const handleAddTokensClick = (0, _react.useCallback)(async () => {
    await Promise.all(suggestedAssets.map(async ({
      asset,
      id
    }) => {
      await dispatch((0, _actions.acceptWatchAsset)(id));
      trackEvent({
        event: _metametrics2.EVENT_NAMES.TOKEN_ADDED,
        category: _metametrics2.EVENT.CATEGORIES.WALLET,
        sensitiveProperties: {
          token_symbol: asset.symbol,
          token_contract_address: asset.address,
          token_decimal_precision: asset.decimals,
          unlisted: asset.unlisted,
          source: _metametrics2.EVENT.SOURCE.TOKEN.DAPP,
          token_standard: _transaction.TOKEN_STANDARDS.ERC20,
          asset_type: _transaction.ASSET_TYPES.TOKEN
        }
      });
    }));
    history.push(mostRecentOverviewPage);
  }, [dispatch, history, trackEvent, mostRecentOverviewPage, suggestedAssets]);

  const goBackIfNoSuggestedAssetsOnFirstRender = () => {
    if (!suggestedAssets.length) {
      history.push(mostRecentOverviewPage);
    }
  };

  (0, _react.useEffect)(() => {
    goBackIfNoSuggestedAssetsOnFirstRender(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('addSuggestedTokens')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens')), knownTokenActionableMessage, reusedTokenNameActionableMessage), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__token-list"
  }, suggestedAssets.map(({
    asset
  }) => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__token-list-item",
      key: asset.address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__token confirm-add-suggested-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-add-suggested-token__token-icon",
      diameter: 48,
      address: asset.address,
      image: asset.image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__name"
    }, getTokenName(asset.name, asset.symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: asset
    })));
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__footer"
  }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    large: true,
    className: "page-container__footer-button",
    onClick: async () => {
      await Promise.all(suggestedAssets.map(({
        id
      }) => dispatch((0, _actions.rejectWatchAsset)(id))));
      history.push(mostRecentOverviewPage);
    }
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    large: true,
    className: "page-container__footer-button",
    disabled: suggestedAssets.length === 0,
    onClick: handleAddTokensClick
  }, t('addToken')))));
};

var _default = ConfirmAddSuggestedToken;
exports.default = _default;

      };
    };
  }
}, {package:"$root$",}],
["C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\index.js", {"./confirm-add-suggested-token":"C:\\a_repos\\0_game7\\hyperplay\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: C:\a_repos\0_game7\hyperplay\metamask-extension\ui\pages\confirm-add-suggested-token\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmAddSuggestedToken.default;
  }
});

var _confirmAddSuggestedToken = _interopRequireDefault(require("./confirm-add-suggested-token"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
}, {package:"$root$",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
